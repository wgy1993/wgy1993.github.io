<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wgy的博客</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wgy1993.gitee.io/"/>
  <updated>2020-06-13T11:04:24.514Z</updated>
  <id>https://wgy1993.gitee.io/</id>
  
  <author>
    <name>Wgy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring(三)</title>
    <link href="https://wgy1993.gitee.io/archives/680971a4.html"/>
    <id>https://wgy1993.gitee.io/archives/680971a4.html</id>
    <published>2020-06-13T10:27:26.000Z</published>
    <updated>2020-06-13T11:04:24.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-AOP的相关概念"><a href="#1-AOP的相关概念" class="headerlink" title="1.    AOP的相关概念"></a>1.    AOP的相关概念</h1><h2 id="1-1-AOP概述"><a href="#1-1-AOP概述" class="headerlink" title="1.1    AOP概述"></a>1.1    AOP概述</h2><h3 id="1-1-1-什么是AOP"><a href="#1-1-1-什么是AOP" class="headerlink" title="1.1.1    什么是AOP"></a>1.1.1    什么是AOP</h3><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/面向切面编程/6016335" target="_blank" rel="noopener">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/预编译/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><a id="more"></a><h3 id="1-1-2-AOP的作用及优势"><a href="#1-1-2-AOP的作用及优势" class="headerlink" title="1.1.2    AOP的作用及优势"></a>1.1.2    AOP的作用及优势</h3><p><strong>作用：</strong></p><p>在程序运行期间，不修改源码对已有方法进行增强。</p><p><strong>优势：</strong></p><p>减少重复代码    提高开发效率     维护方便</p><h3 id="1-1-3-AOP的实现方式"><a href="#1-1-3-AOP的实现方式" class="headerlink" title="1.1.3    AOP的实现方式"></a>1.1.3    AOP的实现方式</h3><p>使用动态代理技术</p><h2 id="1-2-AOP的具体应用"><a href="#1-2-AOP的具体应用" class="headerlink" title="1.2    AOP的具体应用"></a>1.2    AOP的具体应用</h2><h3 id="1-2-1-案例中问题"><a href="#1-2-1-案例中问题" class="headerlink" title="1.2.1    案例中问题"></a>1.2.1    案例中问题</h3><p>这是我们之前在struts2课程中做的一个完整的增删改查例子。下面是客户的业务层接口和实现类。</p><p>通过下面的代码，我们能看出什么问题吗?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> * 事务必须在此控制</span></span><br><span class="line"><span class="comment"> * 业务层都是调用持久层的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            customerDao.saveCustomer(customer);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            List&lt;Customer&gt; customers = customerDao.findAllCustomer();</span><br><span class="line">            tx.commit();</span><br><span class="line">            <span class="keyword">return</span> customers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面代码的问题就是：我们的事务控制是重复性的代码。这还只是一个业务类，如果有多个业务了，每个业务类中都会有这些重复性的代码。</strong></p><h3 id="1-2-2-动态代理回顾"><a href="#1-2-2-动态代理回顾" class="headerlink" title="1.2.2    动态代理回顾"></a>1.2.2    动态代理回顾</h3><h4 id="1-2-2-1-动态代理的特点"><a href="#1-2-2-1-动态代理的特点" class="headerlink" title="1.2.2.1    动态代理的特点"></a>1.2.2.1    动态代理的特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字节码随用随创建，随用随加载。</span><br><span class="line">它与静态代理的区别也在于此。因为静态代理是字节码一上来就创建好，并完成加载。</span><br><span class="line">装饰者模式就是静态代理的一种体现。</span><br></pre></td></tr></table></figure><h4 id="1-2-2-2-动态代理常用的有两种方式"><a href="#1-2-2-2-动态代理常用的有两种方式" class="headerlink" title="1.2.2.2    动态代理常用的有两种方式"></a>1.2.2.2    动态代理常用的有两种方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">基于接口的动态代理</span><br><span class="line">    提供者：JDK官方的Proxy类。</span><br><span class="line">    要求：被代理类最少实现一个接口。</span><br><span class="line">基于子类的动态代理</span><br><span class="line">    提供者：第三方的CGLib，如果报asmxxxx异常，需要导入asm.jar。</span><br><span class="line">    要求：被代理类不能用final修饰的类（最终类）。</span><br></pre></td></tr></table></figure><h4 id="1-2-2-3-使用JDK官方的Proxy类创建代理对象"><a href="#1-2-2-3-使用JDK官方的Proxy类创建代理对象" class="headerlink" title="1.2.2.3    使用JDK官方的Proxy类创建代理对象"></a>1.2.2.3    使用JDK官方的Proxy类创建代理对象</h4><p> 此处我们使用的是一个演员的例子：</p><p>在很久以前，演员和剧组都是直接见面联系的。没有中间人环节。</p><p>而随着时间的推移，产生了一个新兴职业：经纪人（中间人），这个时候剧组再想找演员就需要通过经纪人来找了。下面我们就用代码演示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个经纪公司的要求:</span></span><br><span class="line"><span class="comment"> *      能做基本的表演和危险的表演</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IActor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本演出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 危险演出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个演员</span></span><br><span class="line"><span class="comment"> * 实现了接口，就表示具有接口中的方法实现。即：符合经纪公司的要求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">implements</span> <span class="title">IActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿到钱，开始基本的表演："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿到钱，开始危险的表演："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个剧组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一个剧组找演员</span></span><br><span class="line">        <span class="keyword">final</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         * 作用：不改变源码的基础上，对已有方法增强。（它是AOP思想的实现技术）</span></span><br><span class="line"><span class="comment">         * 分类：</span></span><br><span class="line"><span class="comment">         *    基于接口的动态代理：</span></span><br><span class="line"><span class="comment">         *            要求：被代理类最少实现一个接口</span></span><br><span class="line"><span class="comment">         *            提供者：JDK官方</span></span><br><span class="line"><span class="comment">         *            涉及的类：Proxy</span></span><br><span class="line"><span class="comment">         *    创建代理对象的方法：newProxyInstance(ClassLoader,Class[],InvocationHandler)</span></span><br><span class="line"><span class="comment">         *            参数的含义：</span></span><br><span class="line"><span class="comment">         *            ClassLoader：类加载器。和被代理对象使用相同的类加载器。一般都是固定写法。</span></span><br><span class="line"><span class="comment">         *                Class[]：字节码数组。被代理类实现的接口。（要求代理对象和被代理对象具有相同的行为）。一般都是固定写法。</span></span><br><span class="line"><span class="comment">         *      InvocationHandler：它是一个接口，就是用于我们提供增强代码的。我们一般都是些一个该接口的实现类。实现类可以是匿名内部类。</span></span><br><span class="line"><span class="comment">         *                         它的含义就是：如何代理。此处的代码只能是谁用谁提供。</span></span><br><span class="line"><span class="comment">         *                策略模式：</span></span><br><span class="line"><span class="comment">         *                    使用要求：数据已经有了</span></span><br><span class="line"><span class="comment">         *                            目的明确</span></span><br><span class="line"><span class="comment">         *                            达成目标的过程就是策略。</span></span><br><span class="line"><span class="comment">         *                在dbutils中的ResultSetHandler就是策略模式的具体应用。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *基于子类的动态代理</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        IActor proxyActor = (IActor) Proxy.newProxyInstance(actor.getClass().getClassLoader(),</span><br><span class="line">                actor.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 执行被代理对象的任何方法都会经过该方法，该方法有拦截的功能</span></span><br><span class="line"><span class="comment">                     * 方法的参数</span></span><br><span class="line"><span class="comment">                     *   Object proxy：代理对象的引用。不一定每次都会有。</span></span><br><span class="line"><span class="comment">                     *   Method method：当前执行的方法</span></span><br><span class="line"><span class="comment">                     *   Object[] args：当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * 返回值：</span></span><br><span class="line"><span class="comment">                     *   当前执行方法的返回值</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//1.取出执行方法中的参数：给的多少钱</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//2.判断当前执行的是什么方法：每个经纪公司对不同演出收费不一样，此处开始判断</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"basicAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="comment">//基本演出，没有10000不演</span></span><br><span class="line">                            <span class="keyword">if</span>(money &gt; <span class="number">10000</span>)&#123;</span><br><span class="line">                                <span class="comment">//执行方法（开始表演）</span></span><br><span class="line">                                <span class="comment">//看上去剧组是给了20000，实际到演员手里只有10000</span></span><br><span class="line">                                <span class="comment">//这就是我们没有修改原来basicAct方法源码，对方法进行了增强</span></span><br><span class="line">                                rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"dangerAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="comment">//危险演出，没有50000不演</span></span><br><span class="line">                            <span class="keyword">if</span>(money &gt; <span class="number">50000</span>)&#123;</span><br><span class="line">                                <span class="comment">//执行方法</span></span><br><span class="line">                                <span class="comment">//看上去剧组是给了60000，实际到演员手里只有30000</span></span><br><span class="line">                                <span class="comment">//这就是我们没有修改原来dangerAct方法源码，对方法进行了增强</span></span><br><span class="line">                                rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> rtValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="comment">//      没有经纪公司的时候，直接找演员。</span></span><br><span class="line"><span class="comment">//      actor.basicAct(1000f);</span></span><br><span class="line"><span class="comment">//      actor.dangerAct(5000f);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      剧组无法直接联系演员，而是由经纪公司找的演员</span></span><br><span class="line">        proxyActor.basicAct(<span class="number">20000</span>);</span><br><span class="line">        proxyActor.dangerAct(<span class="number">60000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-4-使用CGLib的Enhancer类创建代理对象"><a href="#1-2-2-4-使用CGLib的Enhancer类创建代理对象" class="headerlink" title="1.2.2.4    使用CGLib的Enhancer类创建代理对象"></a>1.2.2.4    使用CGLib的Enhancer类创建代理对象</h4><p>还是那个演员的例子，只不过不让他实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个演员</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本的演出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CGLIB拿到钱，开始基本的表演："</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 危险的表演</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CGLIB拿到钱，开始危险的表演："</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个剧组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         *  作用：不改变源码的基础上，对已有方法增强。（它是AOP思想的实现技术）</span></span><br><span class="line"><span class="comment">         *  分类：</span></span><br><span class="line"><span class="comment">         *      基于接口的动态代理：</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *      基于子类的动态代理：</span></span><br><span class="line"><span class="comment">         *          要求：被代理类不能是最终类。不能被final修饰</span></span><br><span class="line"><span class="comment">         *          提供者：第三方CGLib</span></span><br><span class="line"><span class="comment">         *          涉及的类：Enhancer</span></span><br><span class="line"><span class="comment">         *          创建代理对象的方法：create(Class,Callback);</span></span><br><span class="line"><span class="comment">         *          参数的含义：</span></span><br><span class="line"><span class="comment">         *              Class：被代理对象的字节码</span></span><br><span class="line"><span class="comment">         *              Callback：如何代理。它和InvocationHandler的作用是一样的。它也是一个接口，我们一般使用该接口的子接口MethodInterceptor</span></span><br><span class="line"><span class="comment">         *                          在使用时我们也是创建该接口的匿名内部类。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Actor cglibActor = (Actor) Enhancer.create(actor.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法，都会经过该方法。它和基于接口动态代理的invoke方法的作用是一模一样的。</span></span><br><span class="line"><span class="comment">             * 方法的参数;</span></span><br><span class="line"><span class="comment">             *   前面三个和invoke方法的参数含义和作用都一样。</span></span><br><span class="line"><span class="comment">             *   MethodProxy methodProxy：当前执行方法的代理对象。一般不用</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//1.取出执行方法中的参数：给的多少钱</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前执行的是什么方法</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"basicAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    <span class="comment">//基本演出</span></span><br><span class="line">                    <span class="keyword">if</span>(money &gt; <span class="number">10000</span>)&#123;</span><br><span class="line">                        <span class="comment">//执行方法（开始表演）</span></span><br><span class="line">                        rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"dangerAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    <span class="comment">//危险演出</span></span><br><span class="line">                    <span class="keyword">if</span>(money &gt; <span class="number">50000</span>)&#123;</span><br><span class="line">                        <span class="comment">//执行方法</span></span><br><span class="line">                        rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> rtValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibActor.basicAct(<span class="number">50000</span>);</span><br><span class="line">        cglibActor.dangerAct(<span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-解决案例中的问题"><a href="#1-2-3-解决案例中的问题" class="headerlink" title="1.2.3    解决案例中的问题"></a>1.2.3    解决案例中的问题</h3><p>思路只有一个：使用动态代理技术创建客户业务层的代理对象，在执行CustomerServiceImpl时，对里面的方法进行增强，加入事务的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建客户业务层对象工厂（当然也可以创建其他业务层对象，只不过我们此处不做那么繁琐）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取客户业务层对象的代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICustomerService <span class="title">getCustomerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义客户业务层对象</span></span><br><span class="line">        <span class="keyword">final</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">        <span class="comment">//生成它的代理对象</span></span><br><span class="line">        ICustomerService proxyCustomerService = (ICustomerService) </span><br><span class="line">            Proxy.newProxyInstance(customerService.getClass().getClassLoader()</span><br><span class="line">            ,customerService.getClass().getInterfaces(), </span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">//执行客户业务层任何方法，都会在此处被拦截，我们对那些方法增强，加入事务。</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                String name = method.getName();</span><br><span class="line">                Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//开启事务</span></span><br><span class="line">                    HibernateUtil.beginTransaction();</span><br><span class="line">                    <span class="comment">//执行操作</span></span><br><span class="line">                    rtValue = method.invoke(customerService, args);</span><br><span class="line">                    <span class="comment">//提交事务</span></span><br><span class="line">                    HibernateUtil.commit();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    <span class="comment">//回滚事务</span></span><br><span class="line">                    HibernateUtil.rollback();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    <span class="comment">//释放资源.hibernate在我们事务操作（提交/回滚）之后，已经帮我们关了。</span></span><br><span class="line">                    <span class="comment">//如果他没关，我们在此处关</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> rtValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxyCustomerService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-Spring中的AOP"><a href="#1-3-Spring中的AOP" class="headerlink" title="1.3    Spring中的AOP"></a>1.3    Spring中的AOP</h2><h3 id="1-3-1-关于代理的选择"><a href="#1-3-1-关于代理的选择" class="headerlink" title="1.3.1    关于代理的选择"></a>1.3.1    关于代理的选择</h3><p>在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p><h3 id="1-3-2-AOP相关术语"><a href="#1-3-2-AOP相关术语" class="headerlink" title="1.3.2    AOP相关术语"></a>1.3.2    AOP相关术语</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Joinpoint(连接点):</span><br><span class="line">    所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。</span><br><span class="line">Pointcut(切入点):</span><br><span class="line">    所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。</span><br><span class="line">Advice(通知&#x2F;增强):</span><br><span class="line">    所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。</span><br><span class="line">    通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</span><br><span class="line">Introduction(引介):</span><br><span class="line">    引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。</span><br><span class="line">Target(目标对象):</span><br><span class="line">    代理的目标对象。</span><br><span class="line">Weaving(织入):</span><br><span class="line">    是指把增强应用到目标对象来创建新的代理对象的过程。</span><br><span class="line">    spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</span><br><span class="line">Proxy（代理）:</span><br><span class="line">    一个类被AOP织入增强后，就产生一个结果代理类。</span><br><span class="line">Aspect(切面):</span><br><span class="line">    是切入点和通知（引介）的结合。</span><br></pre></td></tr></table></figure><h3 id="1-3-3-学习spring中的AOP要明确的事"><a href="#1-3-3-学习spring中的AOP要明确的事" class="headerlink" title="1.3.3    学习spring中的AOP要明确的事"></a>1.3.3    学习spring中的AOP要明确的事</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a、开发阶段（我们做的）</span><br><span class="line">    编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。</span><br><span class="line">    把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP编程人员来做。</span><br><span class="line">    在配置文件中，声明切入点与通知间的关系，即切面。：AOP编程人员来做。</span><br><span class="line">b、运行阶段（Spring框架完成的）</span><br><span class="line">    Spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</span><br></pre></td></tr></table></figure><h1 id="2-基于XML的AOP配置"><a href="#2-基于XML的AOP配置" class="headerlink" title="2.    基于XML的AOP配置"></a>2.    基于XML的AOP配置</h1><h2 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1    环境搭建"></a>2.1    环境搭建</h2><h3 id="2-1-1-准备客户的业务层和接口（需要增强的类）"><a href="#2-1-1-准备客户的业务层和接口（需要增强的类）" class="headerlink" title="2.1.1    准备客户的业务层和接口（需要增强的类）"></a>2.1.1    准备客户的业务层和接口（需要增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-拷贝必备的jar包"><a href="#2-1-2-拷贝必备的jar包" class="headerlink" title="2.1.2    拷贝必备的jar包"></a>2.1.2    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/H6e871f3153dc4618a3cce47f417067955.jpg" alt="img"></p><h3 id="2-1-3-创建spring的配置文件并导入约束"><a href="#2-1-3-创建spring的配置文件并导入约束" class="headerlink" title="2.1.3    创建spring的配置文件并导入约束"></a>2.1.3    创建spring的配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-把客户的业务层配置到spring容器中"><a href="#2-1-4-把客户的业务层配置到spring容器中" class="headerlink" title="2.1.4    把客户的业务层配置到spring容器中"></a>2.1.4    把客户的业务层配置到spring容器中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把资源交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-制作通知（增强的类）"><a href="#2-1-5-制作通知（增强的类）" class="headerlink" title="2.1.5    制作通知（增强的类）"></a>2.1.5    制作通知（增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于记录日志的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录日志的操作</span></span><br><span class="line"><span class="comment">     * 计划让其在业务核心方法（切入点方法）执行之前执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的printLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-配置步骤"><a href="#2-2-配置步骤" class="headerlink" title="2.2    配置步骤"></a>2.2    配置步骤</h2><h3 id="2-2-1-把通知类用bean标签配置起来"><a href="#2-2-1-把通知类用bean标签配置起来" class="headerlink" title="2.2.1    把通知类用bean标签配置起来"></a>2.2.1    把通知类用bean标签配置起来</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把通知类也交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.wgy.util.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-使用aop-config声明aop配置"><a href="#2-2-2-使用aop-config声明aop配置" class="headerlink" title="2.2.2    使用aop:config声明aop配置"></a>2.2.2    使用aop:config声明aop配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- aop的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置的代码都写在此处 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-使用aop-aspect配置切面"><a href="#2-2-3-使用aop-aspect配置切面" class="headerlink" title="2.2.3    使用aop:aspect配置切面"></a>2.2.3    使用aop:aspect配置切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置切面 ：此标签要出现在aop:config内部</span></span><br><span class="line"><span class="comment">    id：给切面提供一个唯一标识</span></span><br><span class="line"><span class="comment">    ref：引用的是通知类的bean的id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通知的类型要写在此处--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-使用aop-before配置前置通知"><a href="#2-2-4-使用aop-before配置前置通知" class="headerlink" title="2.2.4    使用aop:before配置前置通知"></a>2.2.4    使用aop:before配置前置通知</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于配置前置通知：指定增强的方法在切入点方法之前执行 </span></span><br><span class="line"><span class="comment">            method:用于指定通知类中的增强方法名称</span></span><br><span class="line"><span class="comment">            ponitcut-ref：用于指定切入点的表达式的引用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-使用aop-pointcut配置切入点表达式"><a href="#2-2-5-使用aop-pointcut配置切入点表达式" class="headerlink" title="2.2.5    使用aop:pointcut配置切入点表达式"></a>2.2.5    使用aop:pointcut配置切入点表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public void com.wgy.service.impl.CustomerServiceImpl.saveCustomer())"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-切入点表达式说明"><a href="#2-3-切入点表达式说明" class="headerlink" title="2.3    切入点表达式说明"></a>2.3    切入点表达式说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">execution:</span><br><span class="line">        匹配方法的执行(常用)</span><br><span class="line">        execution(表达式)</span><br><span class="line">表达式语法：execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br><span class="line">写法说明：</span><br><span class="line">    全匹配方式：</span><br><span class="line">        public void com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    访问修饰符可以省略</span><br><span class="line">        void com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    返回值可以使用*号，表示任意返回值</span><br><span class="line">        * com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    包名可以使用*号，表示任意包，但是有几级包，需要写几个*</span><br><span class="line">        * *.*.*.*.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    使用..来表示当前包，及其子包</span><br><span class="line">        * com..CustomerServiceImpl.saveCustomer()</span><br><span class="line">    类名可以使用*号，表示任意类</span><br><span class="line">        * com..*.saveCustomer()</span><br><span class="line">    方法名可以使用*号，表示任意方法</span><br><span class="line">        * com..*.*()</span><br><span class="line">    参数列表可以使用*，表示参数可以是任意数据类型，但是必须有参数</span><br><span class="line">        * com..*.*(*)</span><br><span class="line">    参数列表可以使用..表示有无参数均可，有参数可以是任意类型</span><br><span class="line">        * com..*.*(..)</span><br><span class="line">    全通配方式：</span><br><span class="line">        * *..*.*(..)</span><br><span class="line">    实际开发中，我们一般情况下，我们都是对业务层方法进行增强：</span><br><span class="line">        所以写法：* com.wgy.service.impl.*.*(..)</span><br></pre></td></tr></table></figure><h2 id="2-4-完整配置"><a href="#2-4-完整配置" class="headerlink" title="2.4    完整配置"></a>2.4    完整配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 基于xml的aop配置步骤 ：要想使用spring的aop，必须导入aop的jar包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一步：把通知类交给spring来管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.wgy.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二步：导入aop名称空间，并且使用aop:config开始aop的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义通用的切入点表达式，如果写在aop:aspct标签外部，则表示所有切面可用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 第三步：使用aop:aspect配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第四步：配置通知的类型，指定增强的方法何时执行。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义通用的切入点表达式：如果是写在了aop:aspect标签内部，则表示只有当前切面可用</span></span><br><span class="line"><span class="comment">            &lt;aop:pointcut expression="execution(* com.wgy.service.impl.*.*(..))" id="pt1"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-通知的类型"><a href="#2-5-通知的类型" class="headerlink" title="2.5    通知的类型"></a>2.5    通知的类型</h2><h3 id="2-5-1-类型说明"><a href="#2-5-1-类型说明" class="headerlink" title="2.5.1    类型说明"></a>2.5.1    类型说明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置通知的类型</span></span><br><span class="line"><span class="comment">    aop:before：</span></span><br><span class="line"><span class="comment">        用于配置前置通知。前置通知的执行时间点：切入点方法执行之前执行</span></span><br><span class="line"><span class="comment">    aop:after-returning：</span></span><br><span class="line"><span class="comment">        用于配置后置通知。后置通知的执行时间点：切入点方法正常执行之后。它和异常通知只能有一个执行</span></span><br><span class="line"><span class="comment">    aop:after-throwing</span></span><br><span class="line"><span class="comment">        用于配置异常通知。异常通知的执行时间点：切入点方法执行产生异常后执行。它和后置通知只能执行一个。</span></span><br><span class="line"><span class="comment">    aop:after</span></span><br><span class="line"><span class="comment">        用于配置最终通知。最终通知的执行时间点：无论切入点方法执行时是否有异常，它都会在其后面执行。</span></span><br><span class="line"><span class="comment">    aop:around</span></span><br><span class="line"><span class="comment">        用于配置环绕通知。他和前面四个不一样，他不是用于指定通知方法何时执行的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundPringLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-环绕通知的特殊说明"><a href="#2-5-2-环绕通知的特殊说明" class="headerlink" title="2.5.2    环绕通知的特殊说明"></a>2.5.2    环绕通知的特殊说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环绕通知</span></span><br><span class="line"><span class="comment"> * 问题：</span></span><br><span class="line"><span class="comment"> *  当我们配置了环绕通知之后，切入点方法没有执行，而环绕通知里的代码执行了。</span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> *  由动态代理可知，环绕通知指的是invoke方法，并且里面有明确的切入点方法调用。而我们现在的环绕通知没有明确切入点方法调用。</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> *  spring为我们提供了一个接口：ProceedingJoinPoint。该接口可以作为环绕通知的方法参数来使用。</span></span><br><span class="line"><span class="comment"> *  在程序运行时，spring框架会为我们提供该接口的实现类，供我们使用。</span></span><br><span class="line"><span class="comment"> *  该接口中有一个方法，proceed()，它的作用就等同于method.invoke方法，就是明确调用业务层核心方法（切入点方法）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 环绕通知：</span></span><br><span class="line"><span class="comment"> *  它是spring框架为我们提供的一种可以在代码中手动控制通知方法什么时候执行的方式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。前置"</span>);</span><br><span class="line">        rtValue = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。后置"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。异常"</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。最终"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rtValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-基于注解的AOP配置"><a href="#3-基于注解的AOP配置" class="headerlink" title="3.    基于注解的AOP配置"></a>3.    基于注解的AOP配置</h1><h2 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1    环境搭建"></a>3.1    环境搭建</h2><h3 id="3-1-1-准备客户的业务层和接口（需要增强的类）"><a href="#3-1-1-准备客户的业务层和接口（需要增强的类）" class="headerlink" title="3.1.1    准备客户的业务层和接口（需要增强的类）"></a>3.1.1    准备客户的业务层和接口（需要增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-拷贝必备的jar包"><a href="#3-1-2-拷贝必备的jar包" class="headerlink" title="3.1.2    拷贝必备的jar包"></a>3.1.2    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/H6e871f3153dc4618a3cce47f417067955.jpg" alt="img"></p><h3 id="3-1-3-创建spring的配置文件并导入约束"><a href="#3-1-3-创建spring的配置文件并导入约束" class="headerlink" title="3.1.3    创建spring的配置文件并导入约束"></a>3.1.3    创建spring的配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-4-把资源使用注解让spring来管理"><a href="#3-1-4-把资源使用注解让spring来管理" class="headerlink" title="3.1.4    把资源使用注解让spring来管理"></a>3.1.4    把资源使用注解让spring来管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-5-在配置文件中指定spring要扫描的包"><a href="#3-1-5-在配置文件中指定spring要扫描的包" class="headerlink" title="3.1.5    在配置文件中指定spring要扫描的包"></a>3.1.5    在配置文件中指定spring要扫描的包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知spring，在创建容器时要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-配置步骤"><a href="#3-2-配置步骤" class="headerlink" title="3.2    配置步骤"></a>3.2    配置步骤</h2><h3 id="3-2-1-把通知类也使用注解配置"><a href="#3-2-1-把通知类也使用注解配置" class="headerlink" title="3.2.1    把通知类也使用注解配置"></a>3.2.1    把通知类也使用注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个记录日志的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-在通知类上使用-Aspect注解声明为切面"><a href="#3-2-2-在通知类上使用-Aspect注解声明为切面" class="headerlink" title="3.2.2    在通知类上使用@Aspect注解声明为切面"></a>3.2.2    在通知类上使用@Aspect注解声明为切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个记录日志的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-在增强的方法上使用注解配置通知"><a href="#3-2-3-在增强的方法上使用注解配置通知" class="headerlink" title="3.2.3    在增强的方法上使用注解配置通知"></a>3.2.3    在增强的方法上使用注解配置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于记录日志的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//配置了切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定切入点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @Before("execution(* com.wgy.service.impl.*.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置：Logger中的beforePrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @AfterReturning("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置：Logger中的afterReturningPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @AfterThrowing("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowingPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常：Logger中的afterThrowingPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @After("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终：Logger中的afterPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。前置"</span>);</span><br><span class="line">            rtValue = pjp.proceed();</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。后置"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。异常"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。最终"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-在spring配置文件中开启spring对注解AOP的支持"><a href="#3-2-4-在spring配置文件中开启spring对注解AOP的支持" class="headerlink" title="3.2.4    在spring配置文件中开启spring对注解AOP的支持"></a>3.2.4    在spring配置文件中开启spring对注解AOP的支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启spring对注解AOP的支持 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-不使用XML的配置方式"><a href="#3-3-不使用XML的配置方式" class="headerlink" title="3.3    不使用XML的配置方式"></a>3.3    不使用XML的配置方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.wgy"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-AOP的相关概念&quot;&gt;&lt;a href=&quot;#1-AOP的相关概念&quot; class=&quot;headerlink&quot; title=&quot;1.    AOP的相关概念&quot;&gt;&lt;/a&gt;1.    AOP的相关概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-AOP概述&quot;&gt;&lt;a href=&quot;#1-1-AOP概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    AOP概述&quot;&gt;&lt;/a&gt;1.1    AOP概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是AOP&quot;&gt;&lt;a href=&quot;#1-1-1-什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是AOP&quot;&gt;&lt;/a&gt;1.1.1    什么是AOP&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：&lt;a href=&quot;https://baike.baidu.com/item/面向切面编程/6016335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向切面编程&lt;/a&gt;，通过&lt;a href=&quot;https://baike.baidu.com/item/预编译/3191547&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;预编译&lt;/a&gt;方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是&lt;a href=&quot;https://baike.baidu.com/item/OOP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OOP&lt;/a&gt;的延续，是软件开发中的一个热点，也是&lt;a href=&quot;https://baike.baidu.com/item/Spring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring&lt;/a&gt;框架中的一个重要内容，是&lt;a href=&quot;https://baike.baidu.com/item/函数式编程/4035031&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数式编程&lt;/a&gt;的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的&lt;a href=&quot;https://baike.baidu.com/item/耦合度/2603938&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;耦合度&lt;/a&gt;降低，提高程序的可重用性，同时提高了开发的效率。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(二)</title>
    <link href="https://wgy1993.gitee.io/archives/16fa518f.html"/>
    <id>https://wgy1993.gitee.io/archives/16fa518f.html</id>
    <published>2020-06-11T06:53:10.000Z</published>
    <updated>2020-06-11T07:15:43.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基于注解的IOC配置"><a href="#1-基于注解的IOC配置" class="headerlink" title="1.    基于注解的IOC配置"></a>1.    基于注解的IOC配置</h1><h2 id="1-1-写在最前"><a href="#1-1-写在最前" class="headerlink" title="1.1    写在最前"></a>1.1    写在最前</h2><p>学习基于注解的IoC配置，大家脑海里首先得有一个认知，即注解配置和xml配置要实现的功能都是一样的，都是要降低程序间的耦合。只是配置的形式不一样。</p><p>关于实际的开发中到底使用xml还是注解，每家公司有着不同的使用习惯。所以这两种配置方式我们都需要掌握。</p><a id="more"></a><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2    环境搭建"></a>1.2    环境搭建</h2><h3 id="1-2-1-拷贝必备jar包"><a href="#1-2-1-拷贝必备jar包" class="headerlink" title="1.2.1    拷贝必备jar包"></a>1.2.1    拷贝必备jar包</h3><p>注意：在基于xml的配置中，多拷贝一个aop的jar包。如下图：</p><p><img src="https://ae01.alicdn.com/kf/He68f32821d354986a25ef308824f453e8.jpg" alt="image-20200611124335142"></p><h3 id="1-2-2-在类的根路径下创建任意名称的xml文件"><a href="#1-2-2-在类的根路径下创建任意名称的xml文件" class="headerlink" title="1.2.2    在类的根路径下创建任意名称的xml文件"></a>1.2.2    在类的根路径下创建任意名称的xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-使用-Component注解配置管理的资源"><a href="#1-2-3-使用-Component注解配置管理的资源" class="headerlink" title="1.2.3    使用@Component注解配置管理的资源"></a>1.2.3    使用@Component注解配置管理的资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-在Spring的配置文件中开启Spring对注解ioc的支持"><a href="#1-2-4-在Spring的配置文件中开启Spring对注解ioc的支持" class="headerlink" title="1.2.4    在Spring的配置文件中开启Spring对注解ioc的支持"></a>1.2.4    在Spring的配置文件中开启Spring对注解ioc的支持</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知spring在创建容器时要扫描的包。当配置了此标签之后，spring创建容器就会去指定的包及其子包下找对应的注解</span></span><br><span class="line"><span class="comment">         标签是在一个context的名称空间里，所以必须先导入context名称空间</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-常用注解"><a href="#1-3-常用注解" class="headerlink" title="1.3    常用注解"></a>1.3    常用注解</h2><h3 id="1-3-1-用于创建bean对象"><a href="#1-3-1-用于创建bean对象" class="headerlink" title="1.3.1    用于创建bean对象"></a>1.3.1    用于创建bean对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;bean id&#x3D;&quot;&quot; class&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">    作用：就相当于配置了一个bean标签。</span><br><span class="line">    它能出现的位置：类上面</span><br><span class="line">    属性：</span><br><span class="line">    value：含义是指定bean的id。当不写时，它有默认值，默认值是：当前类的短名首字母改小写。</span><br><span class="line">    </span><br><span class="line">由此注解衍生的三个注解：</span><br><span class="line">    @Controller一般用于表现的注解</span><br><span class="line">    @Service一般用于业务层</span><br><span class="line">    @Repository一般用于持久层</span><br><span class="line">    他们和@Component的作用及属性都是一模一样</span><br><span class="line">    细节：如果注解中有且只有一个属性要赋值时，且名称是value，value在赋值是可以不写。</span><br></pre></td></tr></table></figure><h3 id="1-3-2-用于注入数据的"><a href="#1-3-2-用于注入数据的" class="headerlink" title="1.3.2    用于注入数据的"></a>1.3.2    用于注入数据的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;property name&#x3D;&quot;&quot; ref&#x3D;&quot;&quot;&gt;    </span><br><span class="line">        &lt;property name&#x3D;&quot;&quot; value&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">    作用：自动按照类型注入。只要有唯一的类型匹配就能注入成功。</span><br><span class="line">        如果注入的bean在容器中类型不唯一时，它会把变量名称作为bean的id，在容器中查找，找到后也能注入成功。</span><br><span class="line">        如果没有找到一致的bean的id，则报错。</span><br><span class="line">        当我们使用注解注入时，set方法就不是必须的了。</span><br><span class="line">        </span><br><span class="line">@Qualifier</span><br><span class="line">    作用：在自动按照类型注入的基础之上，再按照bean的id注入。</span><br><span class="line">    它在给类成员注入数据时，不能独立使用。但是再给方法的形参注入数据时，可以独立使用。</span><br><span class="line">    属性：</span><br><span class="line">    value：用于指定bean的id。</span><br><span class="line">    </span><br><span class="line">@Resource</span><br><span class="line">    作用：直接按照bean的id注入。</span><br><span class="line">    属性：</span><br><span class="line">    name：用于指定bean的id。</span><br><span class="line">    </span><br><span class="line">以上三个注解都是用于注入其他bean类型的。用于注入基本类型和String类型需要使用Value</span><br><span class="line"></span><br><span class="line">@Value:</span><br><span class="line">    作用：用于注入基本类型和String类型数据。它可以借助Spring的el表达式读取properties文件中的配置。</span><br><span class="line">    属性：</span><br><span class="line">    value：用于指定要注入的数据</span><br></pre></td></tr></table></figure><h3 id="1-3-3-用于改变作用范围的"><a href="#1-3-3-用于改变作用范围的" class="headerlink" title="1.3.3    用于改变作用范围的"></a>1.3.3    用于改变作用范围的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;bean id&#x3D;&quot;&quot; class&#x3D;&quot;&quot; scope&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">@Scope</span><br><span class="line">    作用：用于改变bean的作用范围</span><br><span class="line">    属性：</span><br><span class="line">        value：用于指定范围的取值。</span><br><span class="line">        取值和xml中scope属性的取值是一样的。singleton prototype request session globalsession</span><br></pre></td></tr></table></figure><h3 id="1-3-4-和生命周期相关的"><a href="#1-3-4-和生命周期相关的" class="headerlink" title="1.3.4    和生命周期相关的"></a>1.3.4    和生命周期相关的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;bean id&#x3D;&quot;&quot; class&#x3D;&quot;&quot; init-method&#x3D;&quot;&quot; destroy-method&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">@PostConstruct</span><br><span class="line">    作用：</span><br><span class="line">        用于指定初始化方法。</span><br><span class="line"></span><br><span class="line">@PreDestroy</span><br><span class="line">    作用：</span><br><span class="line">        用于指定销毁方法。</span><br></pre></td></tr></table></figure><h3 id="1-3-5-代码示例"><a href="#1-3-5-代码示例" class="headerlink" title="1.3.5    代码示例"></a>1.3.5    代码示例</h3><p><strong>持久层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"泰斯特"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  @Autowired</span></span><br><span class="line"><span class="comment">//  @Qualifier("customerDao1")</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"customerDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层......"</span>+name);</span><br><span class="line">        customerDao.saveCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>持久层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟客户的持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层保存了客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-6-关于Spring注解和XML的选择问题"><a href="#1-3-6-关于Spring注解和XML的选择问题" class="headerlink" title="1.3.6    关于Spring注解和XML的选择问题"></a>1.3.6    关于Spring注解和XML的选择问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注解的优势：</span><br><span class="line">    配置简单，维护方便（我们找到类，就相当于找到了对应的配置）。</span><br><span class="line">XML的优势：</span><br><span class="line">    修改时，不用改源码。不涉及重新编译和部署。</span><br></pre></td></tr></table></figure><p><strong>Spring管理Bean方式的比较：</strong></p><p><img src="https://ae01.alicdn.com/kf/H9bbfd478f8cc40f98f60137de1766e3f8.jpg" alt="img"></p><h2 id="1-4-Spring的纯注解配置"><a href="#1-4-Spring的纯注解配置" class="headerlink" title="1.4    Spring的纯注解配置"></a>1.4    Spring的纯注解配置</h2><h3 id="1-4-1-待改造的问题"><a href="#1-4-1-待改造的问题" class="headerlink" title="1.4.1    待改造的问题"></a>1.4.1    待改造的问题</h3><p>我们发现，之所以我们现在离不开xml配置文件，是因为我们有一句很关键的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 告知spring在创建容器时要扫描的包。当配置了此标签之后，spring创建容器就会去指定的包及其子包下找对应的注解</span><br><span class="line">    标签是在一个context的名称空间里，所以必须先导入context名称空间</span><br><span class="line">--&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;com.wgy&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果他要也能用注解配置，那么我们就可以脱离xml文件了。</p><h3 id="1-4-2-使用注解配置要扫描的包"><a href="#1-4-2-使用注解配置要扫描的包" class="headerlink" title="1.4.2    使用注解配置要扫描的包"></a>1.4.2    使用注解配置要扫描的包</h3><p><strong>创建配置类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个spring的配置类</span></span><br><span class="line"><span class="comment"> * 它的作用就相当于bean.xml</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//它就是把当前类看成是spring的配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"com.wgy"</span>&#125;)<span class="comment">//配置要扫描的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类获取容器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取容器：由于我们已经没有了xml文件，所以再用读取xml方式就不能用了。</span></span><br><span class="line">    <span class="comment">//这时需要指定加载哪个类上的注解</span></span><br><span class="line">    ApplicationContext ac = </span><br><span class="line">        <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//2.根据id获取对象</span></span><br><span class="line">    ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">    cs.saveCustomer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-新注解说明"><a href="#1-4-3-新注解说明" class="headerlink" title="1.4.3    新注解说明"></a>1.4.3    新注解说明</h3><h4 id="1-4-3-1-Configuration"><a href="#1-4-3-1-Configuration" class="headerlink" title="1.4.3.1    @Configuration"></a>1.4.3.1    @Configuration</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">    作用：</span><br><span class="line">        用于指定当前类是一个spring配置类，当创建容器时会从该类上加载注解。获取容器时需要使用AnnotationApplicationContext(有@Configuration注解的类.class)。</span><br><span class="line">    属性：</span><br><span class="line">        value:用于指定配置类的字节码</span><br></pre></td></tr></table></figure><h4 id="1-4-3-2-ComponentScan"><a href="#1-4-3-2-ComponentScan" class="headerlink" title="1.4.3.2    @ComponentScan"></a>1.4.3.2    @ComponentScan</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">    作用：</span><br><span class="line">        用于指定spring在初始化容器时要扫描的包。作用和在spring的xml配置文件中的：</span><br><span class="line">        &lt;context:component-scan base-package&#x3D;&quot;com.wgy&quot;&#x2F;&gt;是一样的。</span><br><span class="line">    属性：</span><br><span class="line">        basePackages：用于指定要扫描的包。和该注解中的value属性作用一样。</span><br></pre></td></tr></table></figure><h4 id="1-4-3-3-PropertySource"><a href="#1-4-3-3-PropertySource" class="headerlink" title="1.4.3.3    @PropertySource"></a>1.4.3.3    @PropertySource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PropertySource</span><br><span class="line">    作用：</span><br><span class="line">        用于加载.properties文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到properties配置文件中，就可以使用此注解指定properties配置文件的位置。</span><br><span class="line">    属性：</span><br><span class="line">        value[]：用于指定properties文件位置。如果是在类路径下，需要写上classpath:</span><br></pre></td></tr></table></figure><h4 id="1-4-3-4-Import"><a href="#1-4-3-4-Import" class="headerlink" title="1.4.3.4    @Import"></a>1.4.3.4    @Import</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Import</span><br><span class="line">    作用：</span><br><span class="line">        用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration注解。当然，写上也没问题。</span><br><span class="line">    属性：</span><br><span class="line">        value[]：用于指定其他配置类的字节码。</span><br></pre></td></tr></table></figure><h4 id="1-4-3-5-Bean"><a href="#1-4-3-5-Bean" class="headerlink" title="1.4.3.5    @Bean"></a>1.4.3.5    @Bean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">    作用：</span><br><span class="line">        该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。它就相当于我们之前在xml配置中介绍的factory-bean和factory-method。</span><br><span class="line">    属性：</span><br><span class="line">        name：给当前@Bean注解方法创建的对象指定一个名称(即bean的id）。</span><br></pre></td></tr></table></figure><h4 id="1-4-3-6-代码示例"><a href="#1-4-3-6-代码示例" class="headerlink" title="1.4.3.6    代码示例"></a>1.4.3.6    代码示例</h4><p><code>jdbcConfig.properties:</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>Jdbc的配置类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jdbc的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"runner"</span>)<span class="comment">//它是把方法的返回值存入Spring容器中。该注解有一个属性，name：用于指定bean的id。当不指定时它有默认值，默认值是方法的名称。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(@Qualifier(<span class="string">"ds1"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ds"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(driver);<span class="comment">//com.mysql.jdbc.Driver</span></span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ds1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个spring的配置类</span></span><br><span class="line"><span class="comment"> * 它的作用就相当于bean.xml</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//它就是把当前类看成是spring的配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"com.wgy"</span>&#125;)</span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>&#125;)//导入其他配置类</span></span><br><span class="line"><span class="class">@<span class="title">PropertySource</span>(</span>&#123;<span class="string">"classpath:config/jdbcConfig.properties"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring EL表达式失效问题：</span></span><br><span class="line"><span class="comment">     * 目前使用的版本是4.2.4,在spring4.3以前都需要提供一个占位符配置器：</span></span><br><span class="line"><span class="comment">     * PropertySourcesPlaceholderConfigurer</span></span><br><span class="line"><span class="comment">     * 而在spring4.3以后，则不需要提供。</span></span><br><span class="line"><span class="comment">     * 提供的方式如下：（在SpringConfiguration或JdbcConfig中配置均可）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">createPropertySourcesPlaceholderConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Spring整合Junit"><a href="#2-Spring整合Junit" class="headerlink" title="2.    Spring整合Junit"></a>2.    Spring整合Junit</h1><h2 id="2-1-准备测试环境"><a href="#2-1-准备测试环境" class="headerlink" title="2.1    准备测试环境"></a>2.1    准备测试环境</h2><h3 id="2-1-1-创建业务层接口实现类"><a href="#2-1-1-创建业务层接口实现类" class="headerlink" title="2.1.1    创建业务层接口实现类"></a>2.1.1    创建业务层接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(ICustomerDao customerDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-创建持久层接口实现类"><a href="#2-1-2-创建持久层接口实现类" class="headerlink" title="2.1.2    创建持久层接口实现类"></a>2.1.2    创建持久层接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了所有客户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-导入junit的jar包"><a href="#2-1-3-导入junit的jar包" class="headerlink" title="2.1.3    导入junit的jar包"></a>2.1.3    导入junit的jar包</h3><p><img src="https://ae01.alicdn.com/kf/Hf2a3437406bc41b7b3e01e3ba5fc1709Y.jpg" alt="image-20200611141929079"></p><h3 id="2-1-4-编写测试类"><a href="#2-1-4-编写测试类" class="headerlink" title="2.1.4    编写测试类"></a>2.1.4    编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试客户的业务层和持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-使用xml配置步骤"><a href="#2-2-使用xml配置步骤" class="headerlink" title="2.2    使用xml配置步骤"></a>2.2    使用xml配置步骤</h2><h3 id="2-2-1-xml文件中的配置"><a href="#2-2-1-xml文件中的配置" class="headerlink" title="2.2.1    xml文件中的配置"></a>2.2.1    xml文件中的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把资源交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-拷贝整合junit的必备jar包"><a href="#2-2-2-拷贝整合junit的必备jar包" class="headerlink" title="2.2.2    拷贝整合junit的必备jar包"></a>2.2.2    拷贝整合junit的必备jar包</h3><p><img src="https://ae01.alicdn.com/kf/H5c098d75704c45b08b481dcbea30ded17.jpg" alt="image-20200611142214483"></p><h3 id="2-2-3-使用-RunWith注解替换原有运行器"><a href="#2-2-3-使用-RunWith注解替换原有运行器" class="headerlink" title="2.2.3    使用@RunWith注解替换原有运行器"></a>2.2.3    使用@RunWith注解替换原有运行器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-使用-ContextConfiguration指定spring配置文件的位置"><a href="#2-2-4-使用-ContextConfiguration指定spring配置文件的位置" class="headerlink" title="2.2.4    使用@ContextConfiguration指定spring配置文件的位置"></a>2.2.4    使用@ContextConfiguration指定spring配置文件的位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=&#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-使用-Autowired给测试类中的变量注入数据"><a href="#2-2-5-使用-Autowired给测试类中的变量注入数据" class="headerlink" title="2.2.5    使用@Autowired给测试类中的变量注入数据"></a>2.2.5    使用@Autowired给测试类中的变量注入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=&#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-使用纯注解配置步骤"><a href="#2-3-使用纯注解配置步骤" class="headerlink" title="2.3    使用纯注解配置步骤"></a>2.3    使用纯注解配置步骤</h2><h3 id="2-3-1-拷贝整合junit的必备jar"><a href="#2-3-1-拷贝整合junit的必备jar" class="headerlink" title="2.3.1    拷贝整合junit的必备jar"></a>2.3.1    拷贝整合junit的必备jar</h3><p><img src="https://ae01.alicdn.com/kf/H5c098d75704c45b08b481dcbea30ded17.jpg" alt="image-20200611142214483"></p><h3 id="2-3-2-把资源都用注解管理"><a href="#2-3-2-把资源都用注解管理" class="headerlink" title="2.3.2    把资源都用注解管理"></a>2.3.2    把资源都用注解管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了所有客户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-使用注解配置方式创建Spring容器"><a href="#2-3-3-使用注解配置方式创建Spring容器" class="headerlink" title="2.3.3    使用注解配置方式创建Spring容器"></a>2.3.3    使用注解配置方式创建Spring容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123;<span class="string">"com.wgy"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-使用RunWith注解和ContextConfiguration注解配置"><a href="#2-3-4-使用RunWith注解和ContextConfiguration注解配置" class="headerlink" title="2.3.4    使用RunWith注解和ContextConfiguration注解配置"></a>2.3.4    使用RunWith注解和ContextConfiguration注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=&#123;CustomerServiceTest<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class">@<span class="title">ComponentScan</span>(<span class="title">basePackages</span></span>=&#123;<span class="string">"com.wgy"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-为什么不把测试类配到xml中"><a href="#2-4-为什么不把测试类配到xml中" class="headerlink" title="2.4    为什么不把测试类配到xml中"></a>2.4    为什么不把测试类配到xml中</h2><ol><li>当我们在xml中配置了一个bean，Spring加载配置文件创建容器时，就会创建对象。</li><li>测试类只是我们在测试功能时使用，而在项目中它并不参与程序逻辑，也不会解决需求上的问题，所以创建完了，并没有使用。那么存在容器中就会造成资源的浪费。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基于注解的IOC配置&quot;&gt;&lt;a href=&quot;#1-基于注解的IOC配置&quot; class=&quot;headerlink&quot; title=&quot;1.    基于注解的IOC配置&quot;&gt;&lt;/a&gt;1.    基于注解的IOC配置&lt;/h1&gt;&lt;h2 id=&quot;1-1-写在最前&quot;&gt;&lt;a href=&quot;#1-1-写在最前&quot; class=&quot;headerlink&quot; title=&quot;1.1    写在最前&quot;&gt;&lt;/a&gt;1.1    写在最前&lt;/h2&gt;&lt;p&gt;学习基于注解的IoC配置，大家脑海里首先得有一个认知，即注解配置和xml配置要实现的功能都是一样的，都是要降低程序间的耦合。只是配置的形式不一样。&lt;/p&gt;
&lt;p&gt;关于实际的开发中到底使用xml还是注解，每家公司有着不同的使用习惯。所以这两种配置方式我们都需要掌握。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(一)</title>
    <link href="https://wgy1993.gitee.io/archives/b9cbcaed.html"/>
    <id>https://wgy1993.gitee.io/archives/b9cbcaed.html</id>
    <published>2020-06-10T15:26:00.000Z</published>
    <updated>2020-06-10T15:42:45.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1.    Spring概述"></a>1.    Spring概述</h1><h2 id="1-1-Spring概述"><a href="#1-1-Spring概述" class="headerlink" title="1.1    Spring概述"></a>1.1    Spring概述</h2><h3 id="1-1-1-Spring介绍"><a href="#1-1-1-Spring介绍" class="headerlink" title="1.1.1    Spring介绍"></a>1.1.1    Spring介绍</h3><p>Spring是分层的Java SE/EE应用 full-stack轻量级开源框架，以IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。</p><a id="more"></a><h3 id="1-1-2-Spring的发展历程"><a href="#1-1-2-Spring的发展历程" class="headerlink" title="1.1.2    Spring的发展历程"></a>1.1.2    Spring的发展历程</h3><p>1997年IBM提出了EJB的思想</p><p>1998年，SUN制定开发标准规范EJB1.0</p><p>1999年，EJB1.1发布</p><p>2001年，EJB2.0发布</p><p>2003年，EJB2.1发布</p><p>2006年，EJB3.0发布</p><p><strong>Rod Johnson（spring之父）</strong></p><p>​    Expert One-to-One J2EE Design and Development(2002)</p><p>​    阐述了J2EE使用EJB开发设计的优点及解决方案</p><p>​    Expert One-to-One J2EE Development without EJB(2004)</p><p>​    阐述了J2EE开发不使用EJB的解决方式（Spring雏形）</p><h3 id="1-1-3-Spring的优势"><a href="#1-1-3-Spring的优势" class="headerlink" title="1.1.3    Spring的优势"></a>1.1.3    Spring的优势</h3><p><strong>方便解耦，简化开发</strong></p><p>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p><p><strong>AOP编程的支持</strong></p><p>通过Spring的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</p><p><strong>声明式事务的支持</strong></p><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</p><p><strong>方便程序的测试</strong></p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p><p><strong>方便集成各种优秀框架</strong></p><p>Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的直接支持。</p><p><strong>降低JavaEE API的使用难度</strong></p><p>Spring对JavaEE API（如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。</p><p><strong>Java源码是经典学习范例</strong></p><p>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无意是Java技术的最佳实践的范例。</p><h3 id="1-1-4-Spring的体系结构"><a href="#1-1-4-Spring的体系结构" class="headerlink" title="1.1.4    Spring的体系结构"></a>1.1.4    Spring的体系结构</h3><p><img src="https://ae01.alicdn.com/kf/H79b550755de64c17b8ee0ae7b6d266bff.jpg" alt="image-20200610214632321"></p><h2 id="1-2-程序的耦合和解耦"><a href="#1-2-程序的耦合和解耦" class="headerlink" title="1.2    程序的耦合和解耦"></a>1.2    程序的耦合和解耦</h2><h3 id="1-2-1-什么是程序的耦合"><a href="#1-2-1-什么是程序的耦合" class="headerlink" title="1.2.1    什么是程序的耦合"></a>1.2.1    什么是程序的耦合</h3><p>我们在开发中，会写很多的类，而有些类之间不可避免的产生依赖关系，这种依赖关系称之为耦合。</p><p>有些依赖关系是必须的，有些依赖关系可以通过优化代码来解除的。请看下面的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码表示：业务层调用持久层，并且此时业务层在依赖持久层的接口和实现类。如果此时没有持久层实现类，编译将不能通过。这种依赖关系就是我们可以通过优化代码解决的。</p><p><strong>再比如：</strong></p><p>下面的代码中，我们的类依赖了MySQL的具体驱动类，如果这时候更换了数据库品牌，我们需要改源码来修改数据库驱动。这显然不是我们想要的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC操作数据库的基本入门中存在什么问题？</span></span><br><span class="line"><span class="comment">     *   导致驱动注册两次是个问题，但不是严重的。</span></span><br><span class="line"><span class="comment">     *   严重的问题：是当前类和mysql的驱动类有很强的依赖关系。</span></span><br><span class="line"><span class="comment">     *      当我们没有驱动类的时候，连编译都不让。</span></span><br><span class="line"><span class="comment">     * 那这种依赖关系，就叫做程序的耦合</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 我们在开发中，理想的状态应该是：</span></span><br><span class="line"><span class="comment">     *   我们应该尽力达到的：编译时不依赖，运行时才依赖。</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">        <span class="comment">//Class.forName("com.mysql.jdbc.Driver");</span></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="comment">//3.获取预处理sql语句对象</span></span><br><span class="line">        <span class="comment">//4.获取结果集</span></span><br><span class="line">        <span class="comment">//5.遍历结果集</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-解决程序耦合的思路"><a href="#1-2-2-解决程序耦合的思路" class="headerlink" title="1.2.2    解决程序耦合的思路"></a>1.2.2    解决程序耦合的思路</h3><p>当是我们讲解jdbc时，是通过反射来注册驱动的，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><p>这时的好处是，我们的类中不再依赖具体的驱动类，此时就算删除mysql的驱动jar包，依然可以编译。但是因为没有驱动类，所以不能运行。</p><p>不过，此处也有个问题，就是我们反射类对象的全限定类名字符串是在java类中写死的，一旦要改还是要修改源码。</p><p>解决这个问题也很简单，使用配置文件配置。</p><h3 id="1-2-3-工厂模式解耦"><a href="#1-2-3-工厂模式解耦" class="headerlink" title="1.2.3    工厂模式解耦"></a>1.2.3    工厂模式解耦</h3><p>在实际开发中我们可以把所有的dao和service和action对象使用配置文件配置起来，当启动服务器应用加载的时候，通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。</p><h3 id="1-2-4-控制反转-Inversion-Of-Control"><a href="#1-2-4-控制反转-Inversion-Of-Control" class="headerlink" title="1.2.4    控制反转-Inversion Of Control"></a>1.2.4    控制反转-Inversion Of Control</h3><p>上面解耦的思路有2个问题：</p><p><strong>1、存哪去？</strong></p><p>分析：由于我们是很多对象，肯定要找个集合来存。这时候有Map和List供选择。</p><p>​            到底选Map还是List就看我们有没有查找需求。有查找需求，选Map。</p><p>所以我们的答案就是：</p><p>​           在应用加载时，创建一个Map，用于存放action，Service和dao对象。</p><p>​           我们把这个map称之为<strong>容器</strong>。</p><p><strong>2、还是没解释什么是工厂？</strong></p><p>工厂就是负责给我们从容器中获取指定对象的类。这时候我们获取对象的方式发生了改变。</p><p>原来：</p><p>​        我们在获取对象时，都是采用new的方式。是主动的。</p><p><img src="https://ae01.alicdn.com/kf/H47b61de22b504f06ac95ec0f75f00325h.jpg" alt="img"></p><p>现在：</p><p>​        我们获取对象时，同时跟工厂要，有工厂为我们查找或者创建对象。是被动的。</p><p><img src="https://ae01.alicdn.com/kf/He877ec63b593433795bae00197a236eaL.jpg" alt="img"></p><p>这种被动接收的方式获取对象的思想就是控制反转，它是Spring框架的核心之一。</p><p>它的作用只有一个：削减计算机程序的耦合。</p><blockquote><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/面向对象编程" target="_blank" rel="noopener">面向对象编程</a>中的一种设计原则，可以用来减低计算机代码之间的<a href="https://baike.baidu.com/item/耦合度" target="_blank" rel="noopener">耦合度</a>。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p></blockquote><h1 id="2-使用Spring的IOC解决程序耦合"><a href="#2-使用Spring的IOC解决程序耦合" class="headerlink" title="2.    使用Spring的IOC解决程序耦合"></a>2.    使用Spring的IOC解决程序耦合</h1><h2 id="2-1-案例的前期准备"><a href="#2-1-案例的前期准备" class="headerlink" title="2.1    案例的前期准备"></a>2.1    案例的前期准备</h2><p>本章我们使用的案例是，客户的业务层和持久层的依赖关系解决。在开始Spring的配置之前，我们要先准备一下环境。由于我们是使用Spring解决依赖关系，并不是真正的要做增伤改查操作，所以此时我们没必要写实体类。并且我们在此处使用的是java工程，不是java web工程。</p><h3 id="2-1-1-准备Spring的开发包"><a href="#2-1-1-准备Spring的开发包" class="headerlink" title="2.1.1    准备Spring的开发包"></a>2.1.1    准备Spring的开发包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">官网：http:&#x2F;&#x2F;spring.io&#x2F; </span><br><span class="line">下载地址：</span><br><span class="line">http:&#x2F;&#x2F;repo.springsource.org&#x2F;libs-release-local&#x2F;org&#x2F;springframework&#x2F;spring</span><br><span class="line">解压:(Spring目录结构:)</span><br><span class="line">    * docs:API和开发规范.</span><br><span class="line">    * libs:jar包和源码.</span><br><span class="line">    * schema:约束.</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H416dff6a7e2148e68a2e45b48fb1caf91.jpg" alt="image-20200610220328001"></p><h3 id="2-1-2-创建业务层接口和实现类"><a href="#2-1-2-创建业务层接口和实现类" class="headerlink" title="2.1.2    创建业务层接口和实现类"></a>2.1.2    创建业务层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟：客户的业务层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();<span class="comment">//此处有依赖关系</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span>);</span><br><span class="line">        customerDao.saveCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-创建持久层接口和实现类"><a href="#2-1-3-创建持久层接口和实现类" class="headerlink" title="2.1.3    创建持久层接口和实现类"></a>2.1.3    创建持久层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个客户dao</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟客户的持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层保存了客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-基于XML的配置（入门案例）"><a href="#2-2-基于XML的配置（入门案例）" class="headerlink" title="2.2    基于XML的配置（入门案例）"></a>2.2    基于XML的配置（入门案例）</h2><h3 id="2-2-1-拷贝必备的jar包"><a href="#2-2-1-拷贝必备的jar包" class="headerlink" title="2.2.1    拷贝必备的jar包"></a>2.2.1    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/Hb69badafef854db0961f917646df703bP.jpg" alt="image-20200610220759972"></p><h3 id="2-2-2-在类根路径下创建任意名称的xml文件"><a href="#2-2-2-在类根路径下创建任意名称的xml文件" class="headerlink" title="2.2.2    在类根路径下创建任意名称的xml文件"></a>2.2.2    在类根路径下创建任意名称的xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入schema约束</span></span><br><span class="line"><span class="comment">约束的位置在:</span></span><br><span class="line"><span class="comment">..\spring-framework-4.2.4.RELEASE\docs\spring-framework-reference\html\xsd-configuration.html文件中。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-把资源交给spring来管理"><a href="#2-2-3-把资源交给spring来管理" class="headerlink" title="2.2.3    把资源交给spring来管理"></a>2.2.3    把资源交给spring来管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置资源：把对象的创建交给spring来管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-测试配置是否成功"><a href="#2-2-4-测试配置是否成功" class="headerlink" title="2.2.4    测试配置是否成功"></a>2.2.4    测试配置是否成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring的入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ClassPahtXmlApplicationContext：它是只能加载类路径下的配置文件我们用这个</span></span><br><span class="line"><span class="comment">     * FileSystemXmlApplicationContext：它是可以加载磁盘任意位置的配置文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据bean的id获取对象</span></span><br><span class="line">        ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">        cs.saveCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Spring基于XML的IOC细节"><a href="#2-3-Spring基于XML的IOC细节" class="headerlink" title="2.3    Spring基于XML的IOC细节"></a>2.3    Spring基于XML的IOC细节</h2><h3 id="2-3-1-Spring中工厂的类结构图"><a href="#2-3-1-Spring中工厂的类结构图" class="headerlink" title="2.3.1    Spring中工厂的类结构图"></a>2.3.1    Spring中工厂的类结构图</h3><p><img src="https://ae01.alicdn.com/kf/Hd9718e12764942bf85149339b6955f2eN.jpg" alt="img"></p><h4 id="2-3-1-1-Bean创建的两种规则"><a href="#2-3-1-1-Bean创建的两种规则" class="headerlink" title="2.3.1.1    Bean创建的两种规则"></a>2.3.1.1    Bean创建的两种规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory:</span><br><span class="line">    提供的是一种延迟加载思想来创建bean对象。bean对象什么时候用什么时候创建</span><br><span class="line">ApplicationContext</span><br><span class="line">    提供的是一种立即加载思想来创建bean对象。只要一解析完配置文件，就立马创建bean对象。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取容器</span></span><br><span class="line">    Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"bean.xml"</span>);</span><br><span class="line">    BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">    <span class="comment">//2.根据bean的id获取对象</span></span><br><span class="line">    ICustomerService cs = (ICustomerService) factory.getBean(<span class="string">"customerService"</span>);</span><br><span class="line"></span><br><span class="line">    cs.saveCustomer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-IOC中bean标签和管理对象细节"><a href="#2-3-2-IOC中bean标签和管理对象细节" class="headerlink" title="2.3.2    IOC中bean标签和管理对象细节"></a>2.3.2    IOC中bean标签和管理对象细节</h3><h4 id="2-3-2-1-bean标签"><a href="#2-3-2-1-bean标签" class="headerlink" title="2.3.2.1    bean标签"></a>2.3.2.1    bean标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于配置对象让Spring来创建的。</span><br><span class="line">    默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</span><br><span class="line">属性：</span><br><span class="line">    id：给对象在容器中提供一个唯一标识。用于获取对象。</span><br><span class="line">    class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。</span><br><span class="line">    scope：指定对象的作用范围。</span><br><span class="line">    init-method：指定类中的初始化方法名称。</span><br><span class="line">    destroy-method：指定类中销毁方法名称。</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;customerService&quot; class&#x3D;&quot;com.wgy.service.impl.CustomerServiceImpl&quot;</span><br><span class="line">        scope&#x3D;&quot;singleton&quot; init-method&#x3D;&quot;init&quot; destroy-method&#x3D;&quot;destroy&quot;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bean对象创建了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象初始化了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象销毁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-Bean的作用范围"><a href="#2-3-2-2-Bean的作用范围" class="headerlink" title="2.3.2.2    Bean的作用范围"></a>2.3.2.2    Bean的作用范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Bean的作用范围：</span><br><span class="line">    它是可以通过配置的方式来调整作用范围。</span><br><span class="line">    配置的属性：bean标签的scope属性。</span><br><span class="line">    属性的取值：</span><br><span class="line">        singleton：单例的（默认值）</span><br><span class="line">        prototype：多例的（当我们让spring接管struts2的action创建时，action必须配置此值）</span><br><span class="line">        request：作用范围是一次请求，和当前请求的转发。</span><br><span class="line">        session：作用范围是一次会话。</span><br><span class="line">        globalsession ：作用范围是一次全局会话。</span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-Bean的生命周期"><a href="#2-3-2-3-Bean的生命周期" class="headerlink" title="2.3.2.3    Bean的生命周期"></a>2.3.2.3    Bean的生命周期</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bean的生命周期：</span><br><span class="line">    涉及bean标签的两个属性：</span><br><span class="line">        init-method</span><br><span class="line">        destroy-method</span><br><span class="line">    单例：</span><br><span class="line">        出生：容器创建，对象就出生了。</span><br><span class="line">        活着：只要容器在，对象就一直存在。</span><br><span class="line">        死亡：容器销毁，对象消亡。</span><br><span class="line">    多例：</span><br><span class="line">        出生：每次使用时，创建对象</span><br><span class="line">        活着：只要对象在使用中，就一直活着</span><br><span class="line">        死亡：当对象长时间不使用，并且也没有别的对象引用时，由java的垃圾回收器回收。</span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-Bean的三种创建方式"><a href="#2-3-2-4-Bean的三种创建方式" class="headerlink" title="2.3.2.4    Bean的三种创建方式"></a>2.3.2.4    Bean的三种创建方式</h4><p>第一种方式：调用默认无参构造函数创建    此种方式用的最多</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在默认情况下：</span></span><br><span class="line"><span class="comment">    它会根据默认无参构造函数来创建类对象。如果bean中没有默认无参构造函数，则创建失败，会报异常 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方式：使用静态工厂中的方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个静态工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICustomerService <span class="title">getCustomerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是:</span></span><br><span class="line"><span class="comment">     使用StaticFactory类中的静态方法getCustomerService创建对象，并存入Spring容器</span></span><br><span class="line"><span class="comment">     id属性：指定bean的id，用于从容器中获取</span></span><br><span class="line"><span class="comment">     class属性：指定静态工厂的全限定类名</span></span><br><span class="line"><span class="comment">     factory-method属性：指定生产对象的静态方法</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"staticCustomerService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.wgy.factory.StaticFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"getCustomerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三种方式：使用实例工厂中的方法创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个实例工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICustomerService <span class="title">getCustomerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是：</span></span><br><span class="line"><span class="comment">     先把工厂的创建交给Spring来管理。</span></span><br><span class="line"><span class="comment">     然后在使用工厂的bean来调用里面的方法</span></span><br><span class="line"><span class="comment">     factory-bean属性：用于指定实例工厂bean的id。</span></span><br><span class="line"><span class="comment">     factory-method属性：用于指定实例工厂中创建对象的方法。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instancFactory"</span> <span class="attr">class</span>=<span class="string">"com.wgy.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceCustomerService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">"instancFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"getCustomerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-Spring的依赖注入"><a href="#2-3-3-Spring的依赖注入" class="headerlink" title="2.3.3    Spring的依赖注入"></a>2.3.3    Spring的依赖注入</h3><p>它是spring框架核心ioc的具体实现方式。简单的说，就是坐等框架把对象传入，而不用我们自己去获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Spring的依赖注入：</span><br><span class="line">    注入的方式有3三种：</span><br><span class="line">        第一种：使用构造函数注入</span><br><span class="line">        第二种：使用set方法注入</span><br><span class="line">        第三种：使用注解注入</span><br><span class="line">    注入的数据类型有3类：</span><br><span class="line">        第一类：基本类型和String类型</span><br><span class="line">        第二类：其他bean类型（必须是在spring的配置文件中出现过的bean）</span><br><span class="line">        第三类：复杂类型（集合类型）</span><br></pre></td></tr></table></figure><h4 id="2-3-3-1-构造函数注入"><a href="#2-3-3-1-构造函数注入" class="headerlink" title="2.3.3.1    构造函数注入"></a>2.3.3.1    构造函数注入</h4><p>就是使用类中的构造函数，给成员变量赋值。注意，赋值的操作不是我们自己做的，而是通过配置的方式，让Spring框架来为我们注入。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> Date today;</span><br><span class="line">    <span class="comment">//以上三个类成员，没有具体的实际意义，只是用于演示注入。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerServiceImpl</span><span class="params">(String driver, Integer port, Date today)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.today = today;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span>+driver+<span class="string">","</span>+port+<span class="string">","</span>+today);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构造函数注入：</span></span><br><span class="line"><span class="comment">      涉及的标签：constructor-arg</span></span><br><span class="line"><span class="comment">      标签的属性：</span></span><br><span class="line"><span class="comment">            type:指定参数的类型。</span></span><br><span class="line"><span class="comment">            index:指定参数的索引位置，从0开始。</span></span><br><span class="line"><span class="comment">            name:指定参数的名称。一般用它</span></span><br><span class="line"><span class="comment">            ========上面三个属性是指定给哪个参数赋值的，下面两个属性是指定赋什么值的==============</span></span><br><span class="line"><span class="comment">            value:指定基本数据类型或String类型的数据</span></span><br><span class="line"><span class="comment">            ref:指定其他bean类型数据</span></span><br><span class="line"><span class="comment">      标签出现的位置：</span></span><br><span class="line"><span class="comment">            写在bean标签内部</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"3306"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"today"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-set方法注入"><a href="#2-3-3-2-set方法注入" class="headerlink" title="2.3.3.2    set方法注入"></a>2.3.3.2    set方法注入</h4><p>就是在类中提供需要注入成员的set方法。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl2</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> Date today;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以上三个类成员，没有具体的实际意义，只是用于演示注入。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(Integer port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToday</span><span class="params">(Date today)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.today = today;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span> + driver + <span class="string">","</span> + port + <span class="string">","</span> + today);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set方法注入</span></span><br><span class="line"><span class="comment">        涉及的标签：property</span></span><br><span class="line"><span class="comment">        标签的属性：</span></span><br><span class="line"><span class="comment">            name:指定参数的set方法名称。</span></span><br><span class="line"><span class="comment">            =========上面三个属性是指定给哪个参数赋值的，下面两个属性是指定赋什么值的============</span></span><br><span class="line"><span class="comment">            value:指定基本数据类型或String类型的数据</span></span><br><span class="line"><span class="comment">            ref:指定其他bean类型数据</span></span><br><span class="line"><span class="comment">        标签出现的位置：</span></span><br><span class="line"><span class="comment">            写在bean标签内部</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService2"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"3307"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"today"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-复杂类型的注入"><a href="#2-3-3-3-复杂类型的注入" class="headerlink" title="2.3.3.3    复杂类型的注入"></a>2.3.3.3    复杂类型的注入</h4><p>就是给类中的集合成员传值，它用的也是set方法注入的方式，只不过变量的数据类型都是集合。我们这里介绍注入数组，List,Set,Map,Properties。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl3</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 复杂类型的注入</span></span><br><span class="line"><span class="comment">        结构相同，标签可以互换</span></span><br><span class="line"><span class="comment">        List结构的：</span></span><br><span class="line"><span class="comment">            array,list,set</span></span><br><span class="line"><span class="comment">        Map结构的</span></span><br><span class="line"><span class="comment">            map,entry,props,prop</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService3"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testF"</span>&gt;</span>FFF<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testG"</span>&gt;</span>GGG<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testD"</span> <span class="attr">value</span>=<span class="string">"DDD"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testE"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>EEE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Spring概述&quot;&gt;&lt;a href=&quot;#1-Spring概述&quot; class=&quot;headerlink&quot; title=&quot;1.    Spring概述&quot;&gt;&lt;/a&gt;1.    Spring概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-Spring概述&quot;&gt;&lt;a href=&quot;#1-1-Spring概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    Spring概述&quot;&gt;&lt;/a&gt;1.1    Spring概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-Spring介绍&quot;&gt;&lt;a href=&quot;#1-1-1-Spring介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    Spring介绍&quot;&gt;&lt;/a&gt;1.1.1    Spring介绍&lt;/h3&gt;&lt;p&gt;Spring是分层的Java SE/EE应用 full-stack轻量级开源框架，以IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Struts2(四)</title>
    <link href="https://wgy1993.gitee.io/archives/bb3a06c4.html"/>
    <id>https://wgy1993.gitee.io/archives/bb3a06c4.html</id>
    <published>2020-06-08T07:27:44.000Z</published>
    <updated>2020-06-08T07:35:50.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Struts2中的拦截器"><a href="#1-Struts2中的拦截器" class="headerlink" title="1.    Struts2中的拦截器"></a>1.    Struts2中的拦截器</h1><h2 id="1-1-Struts2的拦截器基本概念"><a href="#1-1-Struts2的拦截器基本概念" class="headerlink" title="1.1    Struts2的拦截器基本概念"></a>1.1    Struts2的拦截器基本概念</h2><h3 id="1-1-1-拦截器概述"><a href="#1-1-1-拦截器概述" class="headerlink" title="1.1.1    拦截器概述"></a>1.1.1    拦截器概述</h3><p>在Webwork的中文文档的解释为——拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者在定义的action执行的前后加入执行的代码，也可以在一个action执行前阻止其执行。也就是说它提供了一种可以<strong>提取action中可重用代码，统一管理和执行的方式</strong>。</p><a id="more"></a><p>拦截器链 （Interceptor Chain，在Struts 2中称为拦截器栈Interceptor Stack）。拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。</p><p>拦截器和过滤器是有几分相似，但是也有区别：</p><ul><li><strong>过滤器</strong>是servlet规范中的一部分，任何java web工程都可以使用。</li><li><strong>拦截器</strong>是struts2框架自己的，只有使用了struts2框架的工程才能用。</li><li><strong>过滤器</strong>在url-pattern中配置了<strong>/*</strong>之后，可以对所有要访问的资源拦截。</li><li><strong>拦截器</strong>它是只有进入struts2核心内部之后，才会起作用，如果访问的是jsp，html,css,image或者js是不会进行拦截的。</li></ul><p>同时，拦截器还是AOP编程思想的具体体现形式。<strong>AOP（Aspect-Oriented Programming）</strong>简单的说就是：</p><ul><li>在不修改源码的基础上，已有的方法进行动态增强。</li><li>在struts2中，拦截器它就是对我们的动作方法进行增强。（其实就是把重复性的代码提取出来，然后放到拦截器中，统一管理，统一调用）</li></ul><h3 id="1-1-2-拦截器的执行时机"><a href="#1-1-2-拦截器的执行时机" class="headerlink" title="1.1.2    拦截器的执行时机"></a>1.1.2    拦截器的执行时机</h3><p>在访问struts2核心内部时，在动作方法执行之前先正序执行，然后执行动作方法，执行完动作方法和结果视图之后，再倒序执行。<strong>所以它是先进后出，是个栈的结构。</strong>具体可参考下图：</p><p><img src="https://ae01.alicdn.com/kf/H4b8d160a011e468f93041a943c89aca0u.jpg" alt="image-20200608142116219"></p><h2 id="1-2-自定义拦截器"><a href="#1-2-自定义拦截器" class="headerlink" title="1.2    自定义拦截器"></a>1.2    自定义拦截器</h2><p><strong>直接或间接的实现Interceptor接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口提供了三个方法，其具体介绍如下。</p><ul><li>void init()：该方法在拦截器被创建后会立即被调用, 它在拦截器的生命周期内只被调用一次. 可以在该方法中对相关资源进行必要的初始化。</li><li>void destroy()：该方法与init方法相对应，在拦截器实例被销毁之前，将调用该方法来释放和拦截器相关的资源。它在拦截器的生命周期内，也只被调用一次。</li><li>String intercept(ActionInvocation invocation) throws Exception：该方法是拦截器的核心方法，用来添加真正执行拦截工作的代码，实现具体的拦截操作。它返回一个字符串作为逻辑视图，系统根据返回的字符串跳转到对应的视图资源。每拦截一个动作请求, 该方法就会被调用一次。该方法的ActionInvocation参数包含了被拦截的Action的引用，可以通过该参数的invoke()方法，将控制权转给下一个拦截器或者转给Action的execute()方法。</li></ul><p><strong>继承抽象拦截器类AbstractIntercepter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractInterceptor有一个子类MethodFilterInterceptor，该类中提供了两个属性，可以告知拦截器对哪些方法进行拦截或者对哪些方法排除。</p><p><img src="https://ae01.alicdn.com/kf/Hf2d15c08fca648f1a70cd3735c3be409Z.jpg" alt="img"></p><h3 id="1-2-1-第一步：编写普通java类，继承AbstractInterceptor"><a href="#1-2-1-第一步：编写普通java类，继承AbstractInterceptor" class="headerlink" title="1.2.1    第一步：编写普通java类，继承AbstractInterceptor"></a>1.2.1    第一步：编写普通java类，继承AbstractInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> *  第一步：编写一个普通类，继承AbstractInterceptor（也可以实现Interceptor接口）</span></span><br><span class="line"><span class="comment"> *  第二步：配置拦截器</span></span><br><span class="line"><span class="comment"> *      &lt;!-- 声明一个拦截器 --&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;interceptors&gt;</span></span><br><span class="line"><span class="comment"> *          &lt;interceptor name="myInterceptor" class="com.itheima.web.interceptors.MyInterceptor"&gt;&lt;/interceptor&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;/interceptors&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;!-- 引用拦截器：写在action标签的内部。当我们写了自己的拦截器引用时，默认的拦截器栈就失效了 --&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;interceptor-ref name="myInterceptor"&gt;&lt;/interceptor-ref&gt;</span></span><br><span class="line"><span class="comment"> *  拦截器的放行：</span></span><br><span class="line"><span class="comment"> *      invocation.invoke();</span></span><br><span class="line"><span class="comment"> *  返回值的内容是：</span></span><br><span class="line"><span class="comment"> *      动作方法的返回值</span></span><br><span class="line"><span class="comment"> *  关于结果视图的执行时机以及拦截器的返回值问题</span></span><br><span class="line"><span class="comment"> *      在放行之前，拦截器的返回值可以控制显示哪个结果视图。一旦放行之后，它一定会显示动作方法返回值所匹配的结果视图，此时已经不管拦截器返回什么内容。</span></span><br><span class="line"><span class="comment"> *  多个拦截器的执行顺序问题：</span></span><br><span class="line"><span class="comment"> *      是由引用顺序决定的，与声明顺序无关</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"访问Action之前：MyInterceptor拦截了。。。。"</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        String rtValue = invocation.invoke();</span><br><span class="line">        System.out.println(<span class="string">"访问Action之后：MyInterceptor拦截了。。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-第二步：在struts-xml中配置拦截器"><a href="#1-2-2-第二步：在struts-xml中配置拦截器" class="headerlink" title="1.2.2    第二步：在struts.xml中配置拦截器"></a>1.2.2    第二步：在struts.xml中配置拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">        &lt;!-- 声明一个拦截器 --&gt;</span><br><span class="line">        &lt;interceptors&gt;</span><br><span class="line">            &lt;interceptor name&#x3D;&quot;myIntercepter&quot; class&#x3D;&quot;com.wgy.web.interceptors.MyInterceptor&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;interceptors&gt;</span><br><span class="line"></span><br><span class="line">        &lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">            &lt;!-- 引用拦截器：当我们写了自己的拦截器引用时，默认的拦截器栈就失效了 --&gt;</span><br><span class="line">            &lt;interceptor-ref name&#x3D;&quot;myIntercepter&quot;&#x2F;&gt;</span><br><span class="line">            &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><h2 id="1-3-案例-检查登录拦截器"><a href="#1-3-案例-检查登录拦截器" class="headerlink" title="1.3    案例-检查登录拦截器"></a>1.3    案例-检查登录拦截器</h2><h3 id="1-3-1-定义拦截器"><a href="#1-3-1-定义拦截器" class="headerlink" title="1.3.1    定义拦截器"></a>1.3.1    定义拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查登录拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckLoginInterceptor2</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object obj = ServletActionContext.getRequest().getSession().getAttribute(<span class="string">"userinfo"</span>);</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没登录，去登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已登录，就放行</span></span><br><span class="line">        <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-配置拦截器"><a href="#1-3-2-配置拦截器" class="headerlink" title="1.3.2    配置拦截器"></a>1.3.2    配置拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name&#x3D;&quot;myDefault&quot; extends&#x3D;&quot;struts-default&quot; abstract&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;!-- 声明拦截器 --&gt;</span><br><span class="line">    &lt;interceptors&gt;</span><br><span class="line">        &lt;interceptor name&#x3D;&quot;checkLogin&quot; class&#x3D;&quot;com.wgy.web.interceptors.CheckLoginInterceptor2&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 定义一个自己的拦截器栈 --&gt;</span><br><span class="line">        &lt;interceptor-stack name&#x3D;&quot;myDefaultStack&quot;&gt;</span><br><span class="line">            &lt;interceptor-ref name&#x3D;&quot;checkLogin&quot;&gt;</span><br><span class="line">                &lt;!-- 告知拦截器，哪些方法需要拦截，哪些方法不需要拦截 --&gt;</span><br><span class="line">                &lt;param name&#x3D;&quot;excludeMethods&quot;&gt;userLogin&lt;&#x2F;param&gt;</span><br><span class="line">            &lt;&#x2F;interceptor-ref&gt;</span><br><span class="line">            &lt;interceptor-ref name&#x3D;&quot;defaultStack&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;interceptor-stack&gt;</span><br><span class="line">    &lt;&#x2F;interceptors&gt;</span><br><span class="line">    &lt;!-- 把我们自定义的拦截器栈声明为默认拦截器栈 --&gt;</span><br><span class="line">    &lt;default-interceptor-ref name&#x3D;&quot;myDefaultStack&quot;&#x2F;&gt;</span><br><span class="line">    &lt;global-results&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;global-results&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-编写和配置Action"><a href="#1-3-3-编写和配置Action" class="headerlink" title="1.3.3    编写和配置Action"></a>1.3.3    编写和配置Action</h3><p>动作类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BBSAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 娱乐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 体育</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 军事</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//往session域中存入一个登录标记</span></span><br><span class="line">        ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"userinfo"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;myDefault&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;demo1.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;demo2&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;demo2.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;demo3&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;demo3&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;demo3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;login&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;userLogin&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;main.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h1 id="2-Struts2的注解配置"><a href="#2-Struts2的注解配置" class="headerlink" title="2.    Struts2的注解配置"></a>2.    Struts2的注解配置</h1><h2 id="2-1-使用前提"><a href="#2-1-使用前提" class="headerlink" title="2.1    使用前提"></a>2.1    使用前提</h2><p>Struts2框架，它不仅支持基于XML的配置方式，同时也支持基于注解配置的方式。</p><p>注解和XML的配置，都是告知struts2框架，当我们jsp页面发送请求，根据配置执行对应动作类的方法，并根据返回值，前往指定的结果视图（jsp页面或者其他动作）。它们只是配置的形式不一样。</p><p>其次要想使用struts2的注解，必须要导入一个新的jar包。该jar包是： <strong>struts2-convention-plugin-2.3.24.jar</strong></p><h2 id="2-2-常用注解"><a href="#2-2-常用注解" class="headerlink" title="2.2    常用注解"></a>2.2    常用注解</h2><h3 id="2-2-1-NameSpace"><a href="#2-2-1-NameSpace" class="headerlink" title="2.2.1    @NameSpace"></a>2.2.1    @NameSpace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它只能出现在package上或者Action类上。一般情况下都是写在Action类上。</span><br><span class="line">作用：</span><br><span class="line">    指定当前Action中所有动作方法的名称空间。</span><br><span class="line">属性：</span><br><span class="line">    value：指定名称空间的名称。写法和xml配置时一致。不指定的话，默认名称空间是&quot;&quot;。</span><br><span class="line">示例：</span><br><span class="line">@Namespace(&quot;&#x2F;customer&quot;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-ParentPackage"><a href="#2-2-2-ParentPackage" class="headerlink" title="2.2.2    @ParentPackage"></a>2.2.2    @ParentPackage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它只能出现在package上或者Action类上。一般情况下都是写在Action类上。</span><br><span class="line">作用：</span><br><span class="line">    指定当前动作类所在包的父包。由于我们已经是在类中配置了，所以无需在指定包名了。</span><br><span class="line">属性：</span><br><span class="line">    value：指定父包的名称。</span><br><span class="line">示例：</span><br><span class="line">@ParentPackage(&quot;struts-default&quot;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Action"><a href="#2-2-3-Action" class="headerlink" title="2.2.3    @Action"></a>2.2.3    @Action</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它只能出现在Action类上或者动作方法上。一般情况下都是写在动作方法上。</span><br><span class="line">作用：</span><br><span class="line">    指定当前动作方法的动作名称。也就是xml配置时action标签的name属性。</span><br><span class="line">属性：</span><br><span class="line">    value：指定动作名称。</span><br><span class="line">    results[]：它是一个数组，数据类型是注解。用于指定结果视图。此属性可以没有，当没有该属性时，表示不返回任何结果视图。即使用response输出响应正文。</span><br><span class="line">    interceptorRefs[]：它是一个数组，数据类型是注解。用于指定引用的拦截器。</span><br><span class="line">示例：</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取添加客户页面</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Action(value&#x3D;&quot;addUICustomer&quot;,results&#x3D;&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;addUICustomer&quot;,location&#x3D;&quot;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public String addUICustomer()&#123;</span><br><span class="line">    return &quot;addUICustomer&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Result"><a href="#2-2-4-Result" class="headerlink" title="2.2.4    @Result"></a>2.2.4    @Result</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它可以出现在动作类上，也可以出现在Action注解中。</span><br><span class="line">作用：</span><br><span class="line">    出现在类上，表示当前动作类中的所有动作方法都可以用此视图。</span><br><span class="line">    出现在Action注解中，表示当前Action可用此视图。</span><br><span class="line">属性：</span><br><span class="line">    name：指定逻辑结果视图名称。</span><br><span class="line">    type：指定前往视图的方式。例如：请求转发，重定向，重定向到另外的动作。</span><br><span class="line">    location：指定前往的地址。可以是一个页面，也可以是一个动作。</span><br><span class="line">示例：</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 保存客户</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Action(value&#x3D;&quot;addCustomer&quot;,results&#x3D;&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;addCustomer&quot;,type&#x3D;&quot;redirect&quot;,location&#x3D;&quot;&#x2F;jsp&#x2F;success.jsp&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public String addCustomer()&#123;</span><br><span class="line">    customerService.saveCustomer(customer);</span><br><span class="line">    return &quot;addCustomer&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-Results"><a href="#2-2-5-Results" class="headerlink" title="2.2.5    @Results"></a>2.2.5    @Results</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它可以出现在动作类上，也可以出现在Action注解中。</span><br><span class="line">作用：</span><br><span class="line">    用于配置多个结果视图。</span><br><span class="line">属性：</span><br><span class="line">    value：它是一个数组，数据类型是result注解。</span><br><span class="line">示例：</span><br><span class="line">@Results(&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;login&quot;,location&#x3D;&quot;&#x2F;login.jsp&quot;),</span><br><span class="line">    @Result(name&#x3D;&quot;error&quot;,location&#x3D;&quot;&#x2F;error.jsp&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-InterceptorRef"><a href="#2-2-6-InterceptorRef" class="headerlink" title="2.2.6    @InterceptorRef"></a>2.2.6    @InterceptorRef</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它可以出现在动作类上或者Action注解中。</span><br><span class="line">作用：</span><br><span class="line">    用于配置要引用的拦截器或者拦截器栈</span><br><span class="line">属性：</span><br><span class="line">    value：用于指定拦截器或者拦截器栈</span><br><span class="line">示例：</span><br><span class="line">出现在动作方法上：</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 查询所有客户</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Action(value&#x3D;&quot;findAllCustomer&quot;,</span><br><span class="line">    results&#x3D;&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;findAllCustomer&quot;,location&#x3D;&quot;&#x2F;jsp&#x2F;customer&#x2F;list.jsp&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    interceptorRefs&#x3D;&#123;</span><br><span class="line">    @InterceptorRef(&quot;myDefaultStack&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">public String findAllCustomer()&#123;</span><br><span class="line">    customers &#x3D; customerService.findAllCustomer();</span><br><span class="line">    return &quot;findAllCustomer&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">出现在动作类上：</span><br><span class="line">@InterceptorRef(&quot;myDefaultStack&quot;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-案例-注解实现客户保存和查询列表"><a href="#2-3-案例-注解实现客户保存和查询列表" class="headerlink" title="2.3    案例-注解实现客户保存和查询列表"></a>2.3    案例-注解实现客户保存和查询列表</h2><h3 id="2-3-1-拷贝必备jar包"><a href="#2-3-1-拷贝必备jar包" class="headerlink" title="2.3.1    拷贝必备jar包"></a>2.3.1    拷贝必备jar包</h3><p>导入jar包： <strong>struts2-convention-plugin-2.3.24.jar</strong></p><h3 id="2-3-2-使用注解配置Action"><a href="#2-3-2-使用注解配置Action" class="headerlink" title="2.3.2    使用注解配置Action"></a>2.3.2    使用注解配置Action</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ParentPackage</span>(<span class="string">"struts-default"</span>)<span class="comment">//指定当前包的父包</span></span><br><span class="line"><span class="meta">@Namespace</span>(<span class="string">"/customer"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"customerList"</span>,type=<span class="string">"redirect"</span>,location=<span class="string">"findAllCustomer.action"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"error"</span>,location=<span class="string">"/jsp/error.jsp"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"addUICustomer"</span>,location=<span class="string">"/jsp/customer/add.jsp"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"findAllCustomer"</span>,location=<span class="string">"/jsp/customer/list.jsp"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"findAllCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.调用service查询客户</span></span><br><span class="line">        List&lt;Customer&gt; customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="comment">//2.返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addUICustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.saveCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"customerList"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"deleteCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.deleteCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"customerList"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------getters and setters--------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customers = customers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Struts2中的拦截器&quot;&gt;&lt;a href=&quot;#1-Struts2中的拦截器&quot; class=&quot;headerlink&quot; title=&quot;1.    Struts2中的拦截器&quot;&gt;&lt;/a&gt;1.    Struts2中的拦截器&lt;/h1&gt;&lt;h2 id=&quot;1-1-Struts2的拦截器基本概念&quot;&gt;&lt;a href=&quot;#1-1-Struts2的拦截器基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.1    Struts2的拦截器基本概念&quot;&gt;&lt;/a&gt;1.1    Struts2的拦截器基本概念&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-拦截器概述&quot;&gt;&lt;a href=&quot;#1-1-1-拦截器概述&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    拦截器概述&quot;&gt;&lt;/a&gt;1.1.1    拦截器概述&lt;/h3&gt;&lt;p&gt;在Webwork的中文文档的解释为——拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者在定义的action执行的前后加入执行的代码，也可以在一个action执行前阻止其执行。也就是说它提供了一种可以&lt;strong&gt;提取action中可重用代码，统一管理和执行的方式&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2(三)</title>
    <link href="https://wgy1993.gitee.io/archives/4179e9cb.html"/>
    <id>https://wgy1993.gitee.io/archives/4179e9cb.html</id>
    <published>2020-06-07T11:48:27.000Z</published>
    <updated>2020-06-07T12:03:17.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-OGNL表达式"><a href="#1-OGNL表达式" class="headerlink" title="1.    OGNL表达式"></a>1.    OGNL表达式</h1><h2 id="1-1-OGNL表达式概述"><a href="#1-1-OGNL表达式概述" class="headerlink" title="1.1    OGNL表达式概述"></a>1.1    OGNL表达式概述</h2><h3 id="1-1-1-什么是OGNL表达式"><a href="#1-1-1-什么是OGNL表达式" class="headerlink" title="1.1.1    什么是OGNL表达式"></a>1.1.1    什么是OGNL表达式</h3><p>OGNL的全称是对象图导航语言（Object-Graph Navigation Language），它是一种功能强大的<strong>开源表达式语言</strong>，使用这种表达式语言，可以通过某种表达式语法，<strong>存取Java对象的任意属性</strong>，<strong>调用Java对象的方法</strong>，同时能够自动<strong>实现必要的类型转换</strong>。如果把表达式看作是一个带有语义的字符串，那么OGNL无疑成为了这个语义字符串与Java对象之间沟通的桥梁。</p><a id="more"></a><h3 id="1-1-2-OGNL表达式的由来"><a href="#1-1-2-OGNL表达式的由来" class="headerlink" title="1.1.2    OGNL表达式的由来"></a>1.1.2    OGNL表达式的由来</h3><p>它原本是xwork2中的默认表达式语言，当年OpenSymphony和apache在合作开发struts2框架时，把这个表达式也引进来了，所以就变成了struts2的默认表达式语言。</p><h3 id="1-1-3-OGNL表达式的使用要求"><a href="#1-1-3-OGNL表达式的使用要求" class="headerlink" title="1.1.3    OGNL表达式的使用要求"></a>1.1.3    OGNL表达式的使用要求</h3><p>要想使用ognl表达式，一般情况下都得需要使用struts2的标签库。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="1-1-4-它的特点"><a href="#1-1-4-它的特点" class="headerlink" title="1.1.4    它的特点"></a>1.1.4    它的特点</h3><p>它不仅可以用于取值，显示。还可以赋值。<strong>取值</strong>是我们程序员使用框架做的事情。<strong>赋值</strong>是框架为我们做的。</p><h2 id="1-2-OGNL表达式的基本用法"><a href="#1-2-OGNL表达式的基本用法" class="headerlink" title="1.2    OGNL表达式的基本用法"></a>1.2    OGNL表达式的基本用法</h2><h3 id="1-2-1-s-property标签输出内容到浏览器"><a href="#1-2-1-s-property标签输出内容到浏览器" class="headerlink" title="1.2.1    s:property标签输出内容到浏览器"></a>1.2.1    s:property标签输出内容到浏览器</h3><h4 id="1-2-1-1-s-property的用法"><a href="#1-2-1-1-s-property的用法" class="headerlink" title="1.2.1.1    s:property的用法"></a>1.2.1.1    s:property的用法</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--要想使用OGNL表达式获取数据，此时需要借助struts2的标签库</span><br><span class="line">    s:property标签实现把数据输出到浏览器上</span><br><span class="line">    &lt;s:property value=<span class="string">""</span>/&gt;</span><br><span class="line">    value属性的取值是一个OGNL表达式。</span><br><span class="line">    标签会把value属性取值所对应的内容输出到浏览器上</span><br><span class="line">    如果没有任何对应内容，则什么都不显示</span><br><span class="line">--%&gt;</span><br><span class="line">OGNL的最基本用法：&lt;s:property value=<span class="string">"OGNLExpression"</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-1-2-OGNL表达式和字符串的转换"><a href="#1-2-1-2-OGNL表达式和字符串的转换" class="headerlink" title="1.2.1.2    OGNL表达式和字符串的转换"></a>1.2.1.2    OGNL表达式和字符串的转换</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式和字符串的转换</span><br><span class="line">    表达式转成字符串</span><br><span class="line">    %&#123;<span class="string">''</span>&#125;  | %&#123;<span class="string">""</span>&#125;</span><br><span class="line">    可以把%&#123;&#125;去掉</span><br><span class="line"> --%&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">"%&#123;'OGNLExpression1'&#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">'%&#123;"OGNLExpression2"&#125;'</span>/&gt;&lt;br/&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">'"OGNLExpression3"'</span>/&gt;&lt;br/&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">"'OGNLExpression4'"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    字符串转成表达式</span><br><span class="line">    %&#123;&#125;把字符串套起来</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- user.name 看上去是字符串，当它执行user对象的getName方法时，表示用OGNL表达式解释。 --&gt;</span><br><span class="line">字符串转成一个OGNL表达式：&lt;s:textfield name=<span class="string">"username"</span> value=<span class="string">"%&#123;user.name&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H7a4a659232534a5e8d8521912ec33bdbn.jpg" alt="image-20200607170212242"></p><h3 id="1-2-2-OGNL表达式访问对象的方法"><a href="#1-2-2-OGNL表达式访问对象的方法" class="headerlink" title="1.2.2    OGNL表达式访问对象的方法"></a>1.2.2    OGNL表达式访问对象的方法</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式访问对象的方法 --%&gt;</span><br><span class="line">调用字符串的长度方法：&lt;s:property value=<span class="string">"'OGNLExpression1'.length()"</span>/&gt;&lt;br/&gt;</span><br><span class="line">调用字符串的转大写方法：&lt;s:property value=<span class="string">"'OGNLExpression1'.toUpperCase()"</span>/&gt;&lt;br/&gt;</span><br><span class="line">调用字符串的分隔方法：&lt;s:property value=<span class="string">"'OGNLExpression1'.split('E')"</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-OGNL表达式访问类的静态属性和静态方法"><a href="#1-2-3-OGNL表达式访问类的静态属性和静态方法" class="headerlink" title="1.2.3    OGNL表达式访问类的静态属性和静态方法"></a>1.2.3    OGNL表达式访问类的静态属性和静态方法</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式访问类的静态成员(静态属性)</span><br><span class="line">   访问静态属性需要按照固定的书写规范来写。</span><br><span class="line">   规范是：</span><br><span class="line">      @包名.包名...类名@静态属性名称</span><br><span class="line">--%&gt;</span><br><span class="line">OGNL表达式访问静态属性：&lt;s:property value=<span class="string">"@java.lang.Integer@MAX_VALUE"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式访问类的静态方法</span><br><span class="line">    访问静态方法需要按照固定的书写规范来写。</span><br><span class="line">    规范是：</span><br><span class="line">        @包名.包名...类名@静态方法名称</span><br><span class="line">--%&gt;</span><br><span class="line">OGNL表达式访问静态方法：&lt;s:property value=<span class="string">"@java.lang.Math@random()"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-OGNL表达式操作集合"><a href="#1-2-4-OGNL表达式操作集合" class="headerlink" title="1.2.4    OGNL表达式操作集合"></a>1.2.4    OGNL表达式操作集合</h3><h4 id="1-2-4-1-list集合"><a href="#1-2-4-1-list集合" class="headerlink" title="1.2.4.1    list集合"></a>1.2.4.1    list集合</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--操作List集合</span><br><span class="line">    s:radio标签的list取值就是一个OGNL表达式。</span><br><span class="line">    &#123;&#125;就表示创建了一个List集合</span><br><span class="line">    &#123;<span class="string">'男'</span>,<span class="string">'女'</span>&#125;===  List list = <span class="keyword">new</span> ArrayList();  list.add(<span class="string">"男"</span>); list.add(<span class="string">"女"</span>);</span><br><span class="line">--%&gt;</span><br><span class="line">Struts2的单选按钮：&lt;br/&gt;</span><br><span class="line">&lt;s:radio list="&#123;'男','女'&#125;" name="gender2" label="性别"&gt;&lt;/s:radio&gt;</span><br><span class="line"></span><br><span class="line">HTML的单选按钮：&lt;br/&gt;</span><br><span class="line">性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender1"</span> value=<span class="string">"男"</span>&gt;男</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender1"</span> value=<span class="string">"女"</span>&gt;女</span><br></pre></td></tr></table></figure><h4 id="1-2-4-2-map集合"><a href="#1-2-4-2-map集合" class="headerlink" title="1.2.4.2    map集合"></a>1.2.4.2    map集合</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--操作Map集合</span><br><span class="line">    #&#123;&#125;就表示创建了一个Map集合。</span><br><span class="line">    #&#123;key:value,key:value&#125;</span><br><span class="line">    #&#123;'male':'男','female':'女'&#125;=== Map map = new HashMap();  map.put("male","男");  map.put("female","女");</span><br><span class="line">--%&gt;</span><br><span class="line">Struts2的单选按钮：&lt;br/&gt;</span><br><span class="line">&lt;s:radio list="#&#123;'male':'男','female':'女'&#125;" name="gender4" label="性别"&gt;&lt;/s:radio&gt;</span><br><span class="line"></span><br><span class="line">HTML的单选按钮：&lt;br/&gt;</span><br><span class="line">性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender3"</span> value=<span class="string">"male"</span>&gt;男</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender3"</span> value=<span class="string">"female"</span>&gt;女</span><br></pre></td></tr></table></figure><h1 id="2-OGNL上下文"><a href="#2-OGNL上下文" class="headerlink" title="2.    OGNL上下文"></a>2.    OGNL上下文</h1><h2 id="2-1-ContextMap"><a href="#2-1-ContextMap" class="headerlink" title="2.1    ContextMap"></a>2.1    ContextMap</h2><h3 id="2-1-1-ContextMap概述"><a href="#2-1-1-ContextMap概述" class="headerlink" title="2.1.1    ContextMap概述"></a>2.1.1    ContextMap概述</h3><p>它是OGNL上下文对象，是struts2中封装数据最大的对象。我们一次请求中所有用到的信息都可以在它里面找到。它是一个Map结构的对象，其中key是字符串，value是一个Object。</p><h3 id="2-1-2-ContextMap中封装的数据"><a href="#2-1-2-ContextMap中封装的数据" class="headerlink" title="2.1.2    ContextMap中封装的数据"></a>2.1.2    ContextMap中封装的数据</h3><p><img src="https://ae01.alicdn.com/kf/Hc5d69a854e6c4686b0afdece7f43e634U.jpg" alt="img"></p><p>我们把这些内容拿出来逐个分析一下，得到下面的表格：</p><table><thead><tr><th>Map的key（类型是String）</th><th>Map的Value （类型是Object）</th><th>说明信息</th></tr></thead><tbody><tr><td>application</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的应用域中的所有数据</td></tr><tr><td>session</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的会话域中的所有数据</td></tr><tr><td>request</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的请求域中的所有数据</td></tr><tr><td>valueStack(特殊)</td><td>com.opensymphony.xwork2.ognl.OgnlValueStack</td><td>它是List结构</td></tr><tr><td>parameters</td><td>Java.util.Map&lt;String,String[]&gt;</td><td>封装的是请求参数</td></tr><tr><td>attr</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的是四大域的组合数据，从最小的域开始搜索</td></tr><tr><td>action</td><td>com.opensymphony.xwork2.ActionSupport</td><td>当前执行的动作类对象</td></tr></tbody></table><p><img src="https://ae01.alicdn.com/kf/H02833e758ebc4f9297b000d84dca1c1fF.jpg" alt="image-20200607171436366"></p><h2 id="2-2-ActionContext"><a href="#2-2-ActionContext" class="headerlink" title="2.2    ActionContext"></a>2.2    ActionContext</h2><h3 id="2-2-1-ActionContext对象概述"><a href="#2-2-1-ActionContext对象概述" class="headerlink" title="2.2.1    ActionContext对象概述"></a>2.2.1    ActionContext对象概述</h3><p>它是一个工具类，是struts2框架提供给我们的，可以让我们调用其中的方法，快速的操作ContextMap。用它操作OGNL上下文对象，比直接操作ContextMap要方便很多。</p><h3 id="2-2-2-ActionContext对象与ContextMap的关系"><a href="#2-2-2-ActionContext对象与ContextMap的关系" class="headerlink" title="2.2.2    ActionContext对象与ContextMap的关系"></a>2.2.2    ActionContext对象与ContextMap的关系</h3><p>ActionContext就相当于对ContextMap进行了一次再封装。</p><p><img src="https://ae01.alicdn.com/kf/Hb7ddb62b50cf47218433b24f75553af9u.jpg" alt="image-20200607173258169"></p><h3 id="2-2-3-ActionContext何时创建"><a href="#2-2-3-ActionContext何时创建" class="headerlink" title="2.2.3    ActionContext何时创建"></a>2.2.3    ActionContext何时创建</h3><p>由于ActionContext是操作的ContextMap，而ContextMap中封了我们一次请求的所有数据，所以它的创建应该是每次请求访问Action时，即核心控制器(StrutsPrepareAndExecuteFilter)的doFilter方法执行时，下图是代码截取：</p><p><img src="https://ae01.alicdn.com/kf/Hb0466b7ae08c4f4392e29b66ac491236B.jpg" alt="img"></p><h3 id="2-2-4-ActionContext的线程安全"><a href="#2-2-4-ActionContext的线程安全" class="headerlink" title="2.2.4    ActionContext的线程安全"></a>2.2.4    ActionContext的线程安全</h3><p>我们都知道，java的web工程是多线程的，那么每个线程在访问Action时，都会创建自己的ActionContext,那么是如何保证在获取ActionContext时，每个线程都能获取到自己的那个呢？</p><p>答案就是，每次创建ActionContext时，把对象绑定到当前线程上。下图是代码截取：</p><p><img src="https://ae01.alicdn.com/kf/H1c94fdc742bf4c52b6c9237c852ea0dfL.jpg" alt="img"></p><h3 id="2-2-5-ActionContext的获取"><a href="#2-2-5-ActionContext的获取" class="headerlink" title="2.2.5    ActionContext的获取"></a>2.2.5    ActionContext的获取</h3><p>使用ActionContext类中的静态方法getContext()从当前线程上获取</p><h3 id="2-2-6-获取ContextMap中的数据"><a href="#2-2-6-获取ContextMap中的数据" class="headerlink" title="2.2.6    获取ContextMap中的数据"></a>2.2.6    获取ContextMap中的数据</h3><h4 id="2-2-6-1-s-debug标签的使用"><a href="#2-2-6-1-s-debug标签的使用" class="headerlink" title="2.2.6.1    s:debug标签的使用"></a>2.2.6.1    s:debug标签的使用</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 引入标签库 --%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="number">1</span>、struts2的debug标签</span><br><span class="line">    它是一个用于开发阶段的标签，查看我们OGNL上下文中内容的标签 --%&gt;</span><br><span class="line">&lt;s:debug/&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-6-2-使用OGNL表达式获取Map中的数据"><a href="#2-2-6-2-使用OGNL表达式获取Map中的数据" class="headerlink" title="2.2.6.2    使用OGNL表达式获取Map中的数据"></a>2.2.6.2    使用OGNL表达式获取Map中的数据</h4><p>动作类存数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActionContext的数据存取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ActionContext往ContextMap中存入数据</span></span><br><span class="line"><span class="comment">     *     contextMap    hello context map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 往应用域中存入数据：用两种方式实现</span></span><br><span class="line"><span class="comment">     *     applicationMaphello application map</span></span><br><span class="line"><span class="comment">     *     applicationAttrhello application attr</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 往会话域中存入数据：同上用两种方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取ActionContext</span></span><br><span class="line">        <span class="comment">//从当前线程上获取</span></span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        <span class="comment">//2.存入数据</span></span><br><span class="line">        context.put(<span class="string">"contextMap"</span>, <span class="string">"hello context map"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.往应用域中存入数据</span></span><br><span class="line">        <span class="comment">//第一种方式：使用原始ServletAPI对象ServletContext</span></span><br><span class="line">        ServletContext applicationAttr = ServletActionContext.getServletContext();</span><br><span class="line">        applicationAttr.setAttribute(<span class="string">"applicationAttr"</span>, <span class="string">"hello application attr"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方式：根据key从ActionContext中获取应用域的map，往map中存入数据</span></span><br><span class="line">        Map&lt;String,Object&gt; applicationMap = context.getApplication();</span><br><span class="line">        applicationMap.put(<span class="string">"applicationMap"</span>,<span class="string">"hello application map"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.往会话域中存入数据</span></span><br><span class="line">        <span class="comment">//第一种：使用ServletAPI的HttpSession</span></span><br><span class="line">        HttpSession session = ServletActionContext.getRequest().getSession();</span><br><span class="line">        session.setAttribute(<span class="string">"sessionAttr"</span>, <span class="string">"hello session attr"</span>);</span><br><span class="line">        <span class="comment">//第二种：获取key为session的map</span></span><br><span class="line">        Map&lt;String,Object&gt; sessionMap = context.getSession();</span><br><span class="line">        sessionMap.put(<span class="string">"sessionMap"</span>,<span class="string">"hello session map"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面中使用OGNL表达式获取：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--借助struts2的s:property标签和OGNL表达式获取ActionContext存入的数据</span><br><span class="line">    我们现在获取的数据，都是在map中。</span><br><span class="line">    获取Map中的数据，OGNL表达式的写法：</span><br><span class="line">        #key</span><br><span class="line">        如果还想继续向下获取，使用.key的方式</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#contextMap"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#application.applicationMap"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#session.sessionAttr"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;s:property value=<span class="string">"#session.sessionMap"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="2-3-ValueStack对象"><a href="#2-3-ValueStack对象" class="headerlink" title="2.3    ValueStack对象"></a>2.3    ValueStack对象</h2><h3 id="2-3-1-ValueStack对象概述"><a href="#2-3-1-ValueStack对象概述" class="headerlink" title="2.3.1    ValueStack对象概述"></a>2.3.1    ValueStack对象概述</h3><p>ValueStack是Struts的一个接口，字面意义为值栈，OgnlValueStack是ValueStack的实现类，客户端发起一个请求struts2架构会创建一个action实例同时创建一个OgnlValueStack值栈实例，OgnlValueStack贯穿整个 Action 的生命周期。</p><p>它是ContextMap中的一部分，里面的结构是一个List，是我们可以快速访问数据一个容器。它的封装是由struts2框架完成的。</p><p>通常情况下我们是从页面上获取数据。它实现了栈的特性（先进后出）。</p><h3 id="2-3-2-ValueStack的内部结构"><a href="#2-3-2-ValueStack的内部结构" class="headerlink" title="2.3.2    ValueStack的内部结构"></a>2.3.2    ValueStack的内部结构</h3><p>在 OnglValueStack 中包含了一个CompoundRoot的对象，该对象继承了ArrayList，并且提供了只能操作集合第一个元素的方法，所以我们说它实现了栈的特性。同时，它里面定义了一个ContextMap的引用，也就是说，我们有值栈对象，也可以通过值栈来获取ContextMap。</p><p><img src="https://ae01.alicdn.com/kf/Hbf62e199fa1c4a18bf9c755a9a56ff63S.jpg" alt="image-20200607173453041"></p><h3 id="2-3-3-获取ValueStack中的数据"><a href="#2-3-3-获取ValueStack中的数据" class="headerlink" title="2.3.3    获取ValueStack中的数据"></a>2.3.3    获取ValueStack中的数据</h3><h4 id="2-3-3-1-值栈中都有什么"><a href="#2-3-3-1-值栈中都有什么" class="headerlink" title="2.3.3.1    值栈中都有什么"></a>2.3.3.1    值栈中都有什么</h4><p>首先我们要明确，值栈中存的都是对象。因为它本质就是一个List，List中只能存对象。</p><p>值栈中包含了我们通过调用push方法压栈的对象，当前执行的动作了和一个名称为DefaultTextProvider的类。值栈中的内容如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hb8889a5601804ced8720acb2b9af4de2R.jpg" alt="img"></p><h4 id="2-3-3-2-在动作类中往值栈中存入数据"><a href="#2-3-3-2-在动作类中往值栈中存入数据" class="headerlink" title="2.3.3.2    在动作类中往值栈中存入数据"></a>2.3.3.2    在动作类中往值栈中存入数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ValueStack的数据存取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把私有成员放入值栈中</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"泰斯特"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取ValueStack，并且压栈操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取ActionContext</span></span><br><span class="line">        <span class="comment">//从当前线程上获取</span></span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        <span class="comment">//2.获取ValueStack对象</span></span><br><span class="line">        ValueStack vs = context.getValueStack();</span><br><span class="line">        <span class="comment">//3.压栈操作</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>,<span class="string">"male"</span>);</span><br><span class="line">        </span><br><span class="line">        vs.push(s);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-我们可以获取值栈中的什么"><a href="#2-3-3-3-我们可以获取值栈中的什么" class="headerlink" title="2.3.3.3    我们可以获取值栈中的什么"></a>2.3.3.3    我们可以获取值栈中的什么</h4><p>一般情况下，我们都是根据debug标签中显示的Property Name来获取Property Value。</p><p>当然我们也可以获取栈顶对象。</p><p><img src="https://ae01.alicdn.com/kf/H5d18042919534963914ab2054f1c0d38y.jpg" alt="image-20200607175025011"></p><h4 id="2-3-3-5-在页面上使用OGNL表达式获取数据"><a href="#2-3-3-5-在页面上使用OGNL表达式获取数据" class="headerlink" title="2.3.3.5    在页面上使用OGNL表达式获取数据"></a>2.3.3.5    在页面上使用OGNL表达式获取数据</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--获取值栈的数据也需要借助于struts2的标签库</span><br><span class="line">    使用s:property获取</span><br><span class="line">    获取值栈的数据，是直接写属性名称，得到的就是属性的值。</span><br><span class="line">    OGNL表达式的找法，是从栈顶逐个属性名称开始查找，只要找到之后，就不再继续查找，而是返回结果。</span><br><span class="line"> --%&gt;</span><br><span class="line">姓名：&lt;s:property value=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;s:property value=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">性别：&lt;s:property value=<span class="string">"gender"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--获取指定位置的属性 --%&gt;</span><br><span class="line">获取第一个name:&lt;s:property value=<span class="string">"[0].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">获取第二个name:&lt;s:property value=<span class="string">"[1].name"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--如果使用s:property标签，没有写value属性，取的是栈顶对象 --%&gt;</span><br><span class="line">&lt;s:property/&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-6-OGNL表达式执行时调用的方法"><a href="#2-3-3-6-OGNL表达式执行时调用的方法" class="headerlink" title="2.3.3.6    OGNL表达式执行时调用的方法"></a>2.3.3.6    OGNL表达式执行时调用的方法</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--s:property在通过OGNL表达式获取数据时，所调用的方法：ValueStack中的findValue(String expr); --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    ActionContext context = ActionContext.getContext();</span><br><span class="line">    ValueStack vs = context.getValueStack();</span><br><span class="line">    Object o1 = vs.findValue(<span class="string">"[0].name"</span>);</span><br><span class="line">    out.println(o1);</span><br><span class="line">    out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    Object o2 = vs.findValue(<span class="string">"[1].name"</span>);</span><br><span class="line">    out.print(o2);</span><br><span class="line">    out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    Object o3 = vs.findValue(<span class="string">"#application.applicationMap"</span>);</span><br><span class="line">    out.print(o3);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Struts2中使用EL表达式"><a href="#3-Struts2中使用EL表达式" class="headerlink" title="3.    Struts2中使用EL表达式"></a>3.    Struts2中使用EL表达式</h1><h2 id="3-1-EL表达式回顾"><a href="#3-1-EL表达式回顾" class="headerlink" title="3.1    EL表达式回顾"></a>3.1    EL表达式回顾</h2><p>EL表达式的写法：${表达式}。</p><p>它是从四大域中，由小到大逐个域搜索，根据名称获取值。只要找到了，就不再继续搜索。</p><p>它的原理：使用的是PageContext类中的findValue方法。</p><h2 id="3-2-Struts2对EL表达式的改变"><a href="#3-2-Struts2对EL表达式的改变" class="headerlink" title="3.2    Struts2对EL表达式的改变"></a>3.2    Struts2对EL表达式的改变</h2><p>Struts2框架中对EL表达式做了如下改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EL表达式原来的搜素顺序： </span><br><span class="line">    page Scope——&gt;request Scope——&gt;session Scope——&gt;application Scope</span><br><span class="line">EL表达式改变后的搜索顺序：</span><br><span class="line">    page Scope—&gt;request Scope—&gt;valueStack—&gt;contextMap—&gt;session Scope—&gt;application Scope</span><br></pre></td></tr></table></figure><p>struts2框架对request对象进行了包装，并且对getAttribute方法进行了增强，代码如下：</p><p><img src="https://ae01.alicdn.com/kf/Hebee1568b7ef48b2ab06a9969f917809q.jpg" alt="img"></p><h1 id="4-OGNL表达式中的各种符号总结"><a href="#4-OGNL表达式中的各种符号总结" class="headerlink" title="4.    OGNL表达式中的各种符号总结"></a>4.    OGNL表达式中的各种符号总结</h1><h2 id="4-1"><a href="#4-1" class="headerlink" title="4.1    %"></a>4.1    <code>%</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、把OGNL表达式转成普通字符串 %&#123;&quot;&quot;&#125;</span><br><span class="line">2、把字符串转成OGNL表达式%&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2"><a href="#4-2" class="headerlink" title="4.2    #"></a>4.2    <code>#</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、获取ContextMap中的数据。#key</span><br><span class="line">2、在页面中可以创建Map集合。 #&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3    $"></a>4.3    <code>$</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、EL表达式使用</span><br><span class="line">2、可以在struts2的配置中使用OGNL表达式（配置可以是xml文件，也可以是注解）$&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="5-案例-优化客户列表的展示"><a href="#5-案例-优化客户列表的展示" class="headerlink" title="5.    案例-优化客户列表的展示"></a>5.    案例-优化客户列表的展示</h1><h2 id="5-1-改造Action"><a href="#5-1-改造Action" class="headerlink" title="5.1    改造Action"></a>5.1    改造Action</h2><p>我们把之前查询所有客户的动作方法改造一下，之前我们是把查询结果存入请求域中了，而此时我们只需要在Action中定义一个集合，并且提供get/set方法，它就会出现在值栈中。就可以在页面中使用OGNL表达式获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.调用service查询客户</span></span><br><span class="line">    List&lt;Customer&gt; customers = customerService.findAllCustomer();</span><br><span class="line">    <span class="comment">//2.返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customers = customers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-改造jsp"><a href="#5-2-改造jsp" class="headerlink" title="5.2    改造jsp"></a>5.2    改造jsp</h2><p>在显示客户列表时，我们之前采用的是jstl标签库的c:forEach标签，今天我们将使用struts2提供的迭代标签s:iterator。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- </span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;customers&#125;"</span> <span class="keyword">var</span>=<span class="string">"customer"</span>&gt;</span><br><span class="line">        &lt;TR&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custName &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custLevel &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custSource &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custIndustry &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custAddress &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custPhone &#125;&lt;/TD&gt;</span><br><span class="line">        &lt;/TR&gt;</span><br><span class="line">    &lt;/c:forEach&gt; </span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    struts2中的迭代标签：</span><br><span class="line">    属性：</span><br><span class="line">    value：它的取值是一个OGNL表达式</span><br><span class="line">    <span class="keyword">var</span>：写了该属性：它会把<span class="keyword">var</span>的值作为key，把当前遍历的对象作为value，存入contextMap中</span><br><span class="line">    没写该属性：它会把每次遍历的对象压入栈顶</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%-- </span><br><span class="line">    &lt;s:iterator value=<span class="string">"customers"</span> <span class="keyword">var</span>=<span class="string">"cust"</span>&gt;</span><br><span class="line">    &lt;TR&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custName"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custLevel"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custSource"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custIndustry"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custAddress"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custPhone"/&gt;&lt;/TD&gt;                       </span><br><span class="line">        &lt;/TR&gt;</span><br><span class="line">    &lt;/s:iterator&gt; </span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;s:iterator value=<span class="string">"customers"</span>&gt;</span><br><span class="line">    &lt;TR&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custName"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custLevel"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custSource"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custIndustry"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custAddress"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custPhone"/&gt;&lt;/TD&gt;</span><br><span class="line">    &lt;/TR&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-OGNL表达式&quot;&gt;&lt;a href=&quot;#1-OGNL表达式&quot; class=&quot;headerlink&quot; title=&quot;1.    OGNL表达式&quot;&gt;&lt;/a&gt;1.    OGNL表达式&lt;/h1&gt;&lt;h2 id=&quot;1-1-OGNL表达式概述&quot;&gt;&lt;a href=&quot;#1-1-OGNL表达式概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    OGNL表达式概述&quot;&gt;&lt;/a&gt;1.1    OGNL表达式概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是OGNL表达式&quot;&gt;&lt;a href=&quot;#1-1-1-什么是OGNL表达式&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是OGNL表达式&quot;&gt;&lt;/a&gt;1.1.1    什么是OGNL表达式&lt;/h3&gt;&lt;p&gt;OGNL的全称是对象图导航语言（Object-Graph Navigation Language），它是一种功能强大的&lt;strong&gt;开源表达式语言&lt;/strong&gt;，使用这种表达式语言，可以通过某种表达式语法，&lt;strong&gt;存取Java对象的任意属性&lt;/strong&gt;，&lt;strong&gt;调用Java对象的方法&lt;/strong&gt;，同时能够自动&lt;strong&gt;实现必要的类型转换&lt;/strong&gt;。如果把表达式看作是一个带有语义的字符串，那么OGNL无疑成为了这个语义字符串与Java对象之间沟通的桥梁。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2(二)</title>
    <link href="https://wgy1993.gitee.io/archives/3f8ac9e0.html"/>
    <id>https://wgy1993.gitee.io/archives/3f8ac9e0.html</id>
    <published>2020-06-05T09:14:53.000Z</published>
    <updated>2020-06-05T09:34:32.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-结果视图的配置"><a href="#1-结果视图的配置" class="headerlink" title="1.    结果视图的配置"></a>1.    结果视图的配置</h1><h2 id="1-1-result标签"><a href="#1-1-result标签" class="headerlink" title="1.1    result标签"></a>1.1    result标签</h2><p>在sturts.xml文件中，Result的配置非常简单，使用<result>元素来配置Result逻辑视图与物理视图之间的映射，<result>元素可以有name和type属性，但这两种属性都不是必选的。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">    &lt;!-- result标签：</span><br><span class="line">        作用：用于配置结果视图（结果视图可以是一个jsp&#x2F;html，也可以是一个action）</span><br><span class="line">        属性：</span><br><span class="line">            name：指定逻辑结果视图。作用就是和动作方法的返回值进行比较，当一致时，前往配置的页面或者action。不写的话:默认值是success——&gt;去哪</span><br><span class="line">            type：指定前往结果视图的方式。以何种方式前往。——&gt;怎么去</span><br><span class="line">                type取值都是来源于struts-default.xml文件中package名称是struts-default包中定义类型</span><br><span class="line">                常用的结果类型：</span><br><span class="line">                dispatcher：请求转发  （默认值）</span><br><span class="line">                redirect：重定向(可以是重定向到另外一个动作或者是重定向到一个jsp)</span><br><span class="line">                redirectAction：重定向到另外一个动作(它由于会自动在后面为我们拼接url后缀，所以只能重定向到动作)</span><br><span class="line">        </span><br><span class="line">                请求转发和重定向的区别：</span><br><span class="line">                请求转发：一次请求地址栏不变请求域中数据不丢失服务器行为只能是在当前应用中转发</span><br><span class="line">                重定向：  两次请求地址栏改变请求域中数据丢失浏览器行为可以定向到当前应用的外部</span><br><span class="line">        </span><br><span class="line">                响应浏览器的三种方式：</span><br><span class="line">                    请求转发重定向使用流输出（如果只有一种方式，那就是此种方式）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirectAction&quot;&gt;demo2&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;error&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;error.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br><span class="line">&lt;action name&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-配置全局结果视图"><a href="#1-2-配置全局结果视图" class="headerlink" title="1.2    配置全局结果视图"></a>1.2    配置全局结果视图</h2><h3 id="1-2-1-局部结果视图和全局结果视图"><a href="#1-2-1-局部结果视图和全局结果视图" class="headerlink" title="1.2.1    局部结果视图和全局结果视图"></a>1.2.1    局部结果视图和全局结果视图</h3><p>配置在action标签内的result，我们成为局部结果视图，它只能由当前action使用。</p><p>而在实际开发中，有很多页面，每个action可能都会用到。比如：success.jsp,error.jsp,login.jsp等等。当我们很多action都用到了login.jsp，在每个action标签中都配置一次，显然是不合理的，这个时候我们就用到了全局结果视图。</p><h3 id="1-2-2-配置方式"><a href="#1-2-2-配置方式" class="headerlink" title="1.2.2    配置方式"></a>1.2.2    配置方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义一个公共包</span><br><span class="line">        全局结果视图和局部结果视图</span><br><span class="line">            定义是放在action标签外面， 在global-results标签内部的结果视图。</span><br><span class="line">            可以在多个action中使用</span><br><span class="line">            优先级：先找局部，再找全局。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;myDefault&quot; extends&#x3D;&quot;struts-default&quot; abstract&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;global-results&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;global-results&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br><span class="line"></span><br><span class="line">&lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;myDefault&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirectAction&quot;&gt;demo2&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;action name&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h1 id="2-访问Servlet的API的两种方式"><a href="#2-访问Servlet的API的两种方式" class="headerlink" title="2.    访问Servlet的API的两种方式"></a>2.    访问Servlet的API的两种方式</h1><h2 id="2-1-使用ServletActionContext"><a href="#2-1-使用ServletActionContext" class="headerlink" title="2.1    使用ServletActionContext"></a>2.1    使用ServletActionContext</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问ServletAPI:</span></span><br><span class="line"><span class="comment"> *  有两种方式：</span></span><br><span class="line"><span class="comment"> *  第一种方式：</span></span><br><span class="line"><span class="comment"> *      使用struts2框架提供的一个工具类，该类中包含了相应的静态方法，可以直接获取</span></span><br><span class="line"><span class="comment"> *      工具类是：ServletActionContext</span></span><br><span class="line"><span class="comment"> *      此种方式是我们实际开发中用的最多的方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输出结果之后，找出其中一个和其他三个不一样：</span></span><br><span class="line"><span class="comment"> *      org.apache.struts2.dispatcher.StrutsRequestWrapper@1c6e453它和其他三个不一样，它是struts2提供的</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.connector.ResponseFacade@b846ae</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.core.ApplicationContextFacade@287809</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.session.StandardSessionFacade@e0d480</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line">    <span class="keyword">private</span> HttpSession session;</span><br><span class="line">    <span class="keyword">private</span> ServletContext application;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        request = ServletActionContext.getRequest();</span><br><span class="line">        response = ServletActionContext.getResponse();</span><br><span class="line">        application = ServletActionContext.getServletContext();</span><br><span class="line">        session = request.getSession();</span><br><span class="line"></span><br><span class="line">        System.out.println(request);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        System.out.println(application);</span><br><span class="line">        System.out.println(session);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-通过实现接口的方式"><a href="#2-2-通过实现接口的方式" class="headerlink" title="2.2    通过实现接口的方式"></a>2.2    通过实现接口的方式</h2><p><img src="https://ae01.alicdn.com/kf/Ha7be4fae5c764e088466d9f8caad0d53V.jpg" alt="image-20200605155121131"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问ServletAPI:</span></span><br><span class="line"><span class="comment"> *  有两种方式：</span></span><br><span class="line"><span class="comment"> *  第二种方式：</span></span><br><span class="line"><span class="comment"> *      通过实现不同的接口，获取不同的对象。</span></span><br><span class="line"><span class="comment"> *      要想使用request，需要实现ServletRequestAware</span></span><br><span class="line"><span class="comment"> *      要想使用response，需要实现ServletResponseAware</span></span><br><span class="line"><span class="comment"> *      要想使用servletContext，需要实现SerlvetContextAware</span></span><br><span class="line"><span class="comment"> *  输出结果之后，找出其中一个和其他三个不一样：</span></span><br><span class="line"><span class="comment"> *      org.apache.struts2.dispatcher.StrutsRequestWrapper@1c6e453它和其他三个不一样，它是struts2提供的</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.connector.ResponseFacade@b846ae</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.core.ApplicationContextFacade@287809</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.session.StandardSessionFacade@e0d480</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  如果说是一种方式获取ServletAPI对象：ActionContext中的get(key)</span></span><br><span class="line"><span class="comment"> *  如果说是三种方式获取ServletAPI对象，除了我们讲的两种之外，也可以使用ActionContext获取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  通过分析源码，我们得知，ActionContext看上去是一个类似Map的结构。</span></span><br><span class="line"><span class="comment"> *  map的key是String类型，Map的value是Object类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">ServletRequestAware</span>, <span class="title">ServletResponseAware</span>, <span class="title">ServletContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ServletContext application = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        System.out.println(application);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletResponse</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletContext</span><span class="params">(ServletContext application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-请求参数的封装"><a href="#3-请求参数的封装" class="headerlink" title="3.    请求参数的封装"></a>3.    请求参数的封装</h1><h2 id="3-1-请求参数封装概述"><a href="#3-1-请求参数封装概述" class="headerlink" title="3.1    请求参数封装概述"></a>3.1    请求参数封装概述</h2><p>封装请求参数就是把我们通过浏览器发送请求时，要转递给服务器的数据封装到指定的对象中。这个对象一般都是实体类。但是有时就是Action中的一个属性。也就是说，我们封装请求参数时，可以有实体类，也可以没有。同时，我们还需要知道，请求参数的封装和请求方式无关。无论get还是post都可以封装。</p><h2 id="3-2-属性驱动"><a href="#3-2-属性驱动" class="headerlink" title="3.2    属性驱动"></a>3.2    属性驱动</h2><h3 id="3-2-1-没有实体类"><a href="#3-2-1-没有实体类" class="headerlink" title="3.2.1    没有实体类"></a>3.2.1    没有实体类</h3><p>此种情况，我们一般也称为动作类和模型在一起，也就是说我们在action中定义一些私有成员，并且提供它们的公有get/set方法。具体代码如下</p><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> * 第一种情况：</span></span><br><span class="line"><span class="comment"> *    属性驱动：没有实体类</span></span><br><span class="line"><span class="comment"> *    表单数据的接收都定义在动作类中，所以称为动作类和模型数据写在一起</span></span><br><span class="line"><span class="comment"> * 要想封装成功，需要按照要求书写：</span></span><br><span class="line"><span class="comment"> *    要求是：表单元素的name属性取值，必须和动作类中成员get/set方法后面的部分保持一致</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 细节：</span></span><br><span class="line"><span class="comment"> *    1、struts2框架会我们解决post请求的中文乱码问题，但是get请求不解决。</span></span><br><span class="line"><span class="comment"> *    2、struts2框架会自动为我们转换数据类型：</span></span><br><span class="line"><span class="comment"> *         基本类型自动转换</span></span><br><span class="line"><span class="comment"> *         字符串数组会按照逗号+空格的方式拼接成字符串</span></span><br><span class="line"><span class="comment"> *         日期类型会按照本地格式转成日期对象</span></span><br><span class="line"><span class="comment"> *             本地格式：yyyy-MM-dd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 执行参数封装，是一个名称为params的拦截器实现的。</span></span><br><span class="line"><span class="comment"> * 封装的规则只有一个，它要去指定位置找属性，找到之后调用set方法赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(username+<span class="string">"==="</span>+age+<span class="string">"==="</span>+birthday+<span class="string">"==="</span>+hobby);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：第一种情况：属性驱动-没有实体类  --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo1.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-有实体类"><a href="#3-2-2-有实体类" class="headerlink" title="3.2.2    有实体类"></a>3.2.2    有实体类</h3><p>此种情况是，我们有独立的实体类，在action中定义的是实体类对象，并且提供get/set方法。代码如下：</p><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> * 第二种情况：</span></span><br><span class="line"><span class="comment"> *    属性驱动：有实体类</span></span><br><span class="line"><span class="comment"> *    表单数据的接收都定义在实体类中，把实体类定义在动作类中。</span></span><br><span class="line"><span class="comment"> * 要想封装成功，需要按照要求书写：</span></span><br><span class="line"><span class="comment"> *   此时需要使用OGNL表达式来指定表单元素的name取值</span></span><br><span class="line"><span class="comment"> *   OGNL表达式全称：Object Graphic Navigation Language</span></span><br><span class="line"><span class="comment"> *                   对象    图    导航      语言</span></span><br><span class="line"><span class="comment"> *  写法：</span></span><br><span class="line"><span class="comment"> *  user.username  user.age</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 执行参数封装，是一个名称为params的拦截器实现的。</span></span><br><span class="line"><span class="comment"> * 封装的规则只有一个，它要去指定位置找属性，找到之后调用set方法赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：第二种情况：属性驱动-有实体类 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo2.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"user.hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"user.hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"user.hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo2&quot; class&#x3D;&quot;com.wgy.web.action.Demo2Action&quot; method&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-模型驱动"><a href="#3-3-模型驱动" class="headerlink" title="3.3    模型驱动"></a>3.3    模型驱动</h2><p>在Struts2中，Action处理请求参数还有另外一种方式，叫做模型驱动（ModelDriven）。通过实现ModelDriven接口来接收请求参数。</p><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> * 第三种情况：我们在后面用的最多的方式</span></span><br><span class="line"><span class="comment"> *      模型驱动</span></span><br><span class="line"><span class="comment"> * 要想封装成功，需要按照要求书写：</span></span><br><span class="line"><span class="comment"> *  1、动作类必须实现ModelDriven接口</span></span><br><span class="line"><span class="comment"> *  2、动作类中需要定义模型，并且必须实例化出来</span></span><br><span class="line"><span class="comment"> *  3、提供接口抽象方法的实现，返回值必须是模型对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 执行参数封装，是一个名称为params的拦截器实现的。</span></span><br><span class="line"><span class="comment"> * 模型驱动的实现，除了params拦截器之外，还需要一个叫modelDriven的拦截器配合</span></span><br><span class="line"><span class="comment"> * 封装的规则只有一个，它要去指定位置找属性，找到之后调用set方法赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：第三种情况：模型驱动 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo3.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo3&quot; class&#x3D;&quot;com.wgy.web.action.Demo3Action&quot; method&#x3D;&quot;demo3&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-封装集合数据"><a href="#3-4-封装集合数据" class="headerlink" title="3.4    封装集合数据"></a>3.4    封装集合数据</h2><p>在实际的开发中，有些时候我们需要批量插入用户或者批量插入其他的对象，在Action中需要接受到这多个Action中封装的对象，然后传递给业务层。那么这个时候就需要将表单的数据封装到集合中。</p><h3 id="3-4-1-封装到List"><a href="#3-4-1-封装到List" class="headerlink" title="3.4.1    封装到List"></a>3.4.1    封装到List</h3><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装：List集合封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装都需要基于第二种情况实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：List集合类型的封装 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo4.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[0].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[0].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[0].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[1].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[1].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[1].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo4&quot; class&#x3D;&quot;com.wgy.web.action.Demo4Action&quot; method&#x3D;&quot;demo4&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-封装到Map"><a href="#3-4-2-封装到Map" class="headerlink" title="3.4.2    封装到Map"></a>3.4.2    封装到Map</h3><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装：Map集合封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装都需要基于第二种情况实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Map&lt;String, User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：Map集合类型的封装 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo5.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['key1'].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['key1'].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['key1'].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['key1'].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['key1'].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['key1'].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['abc'].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['abc'].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['abc'].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['abc'].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['abc'].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['abc'].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo5&quot; class&#x3D;&quot;com.wgy.web.action.Demo5Action&quot; method&#x3D;&quot;demo5&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h1 id="4-案例：Struts2-Hibernate实现保存删除客户"><a href="#4-案例：Struts2-Hibernate实现保存删除客户" class="headerlink" title="4.    案例：Struts2+Hibernate实现保存删除客户"></a>4.    案例：Struts2+Hibernate实现保存删除客户</h1><h2 id="4-1-Struts2"><a href="#4-1-Struts2" class="headerlink" title="4.1    Struts2"></a>4.1    Struts2</h2><h3 id="4-1-1-修改jsp"><a href="#4-1-1-修改jsp" class="headerlink" title="4.1.1    修改jsp"></a>4.1.1    修改jsp</h3><p><strong>menu.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TR&gt;</span><br><span class="line">    &lt;TD <span class="class"><span class="keyword">class</span></span>=menuSmall&gt;</span><br><span class="line">        &lt;A class=style2 href="$&#123;pageContext.request.contextPath&#125;/customer/addUICustomer.action"  target=main&gt;－ 新增客户&lt;/A&gt;</span><br><span class="line">    &lt;/TD&gt;</span><br><span class="line">&lt;/TR&gt;</span><br></pre></td></tr></table></figure><p><strong>add.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FORM id=form1 name=form1 action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/customer/addCustomer.action"</span> method=post&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/FORM&gt;</span><br></pre></td></tr></table></figure><p><strong>list.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT language=javascript&gt;</span><br><span class="line"><span class="function">function <span class="title">delOne</span><span class="params">(custId)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> sure = window.confirm(<span class="string">"确定删除吗？"</span>);</span><br><span class="line"><span class="keyword">if</span>(sure)&#123;</span><br><span class="line">window.location.href = <span class="string">"$&#123;pageContext.request.contextPath&#125;/customer/deleteCustomer?custId="</span>+custId;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/SCRIPT&gt;</span><br><span class="line">&lt;a href="javascript:delOne('$&#123;customer.custId&#125;')" &gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-配置xml并编写Action"><a href="#4-1-2-配置xml并编写Action" class="headerlink" title="4.1.2    配置xml并编写Action"></a>4.1.2    配置xml并编写Action</h3><p><strong>struts.xml的配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;!-- 开启开发者模式 --&gt;</span><br><span class="line">    &lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">    &lt;!--  动作配置 --&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;customer&quot; extends&#x3D;&quot;struts-default&quot; namespace&#x3D;&quot;&#x2F;customer&quot;&gt;</span><br><span class="line">        &lt;!-- 查询所有客户 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;findAllCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;findAllCustomer&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;findAllCustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;list.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 获取添加客户页面 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;addUICustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;addUICustomer&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;addUICustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加客户 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;addCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;addCustomer&quot;&gt;</span><br><span class="line">            &lt;!-- &lt;result name&#x3D;&quot;addCustomer&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;jsp&#x2F;success.jsp&lt;&#x2F;result&gt; --&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;addCustomer&quot; type&#x3D;&quot;redirect&quot;&gt;findAllCustomer&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 删除客户 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;deleteCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;deleteCustomer&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;deleteCustomer&quot; type&#x3D;&quot;redirect&quot;&gt;findAllCustomer&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><p><strong>动作类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.调用service查询客户</span></span><br><span class="line">        List&lt;Customer&gt; customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="comment">//2.获取request对象</span></span><br><span class="line">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">        <span class="comment">//3.把查询的结果存入请求域中</span></span><br><span class="line">        request.setAttribute(<span class="string">"customers"</span>, customers);</span><br><span class="line">        <span class="comment">//4.返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.saveCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.deleteCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"deleteCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-Hibernate"><a href="#4-2-Hibernate" class="headerlink" title="4.2    Hibernate"></a>4.2    Hibernate</h2><h3 id="4-2-1-编写业务层接口及实现类"><a href="#4-2-1-编写业务层接口及实现类" class="headerlink" title="4.2.1    编写业务层接口及实现类"></a>4.2.1    编写业务层接口及实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> * 事务控制在业务层的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取Session</span></span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            <span class="comment">//2.开启事务</span></span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            <span class="comment">//3.执行操作</span></span><br><span class="line">            List&lt;Customer&gt; customers = customerDao.findAllCustomer();</span><br><span class="line">            <span class="comment">//4.提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">            <span class="comment">//5.返回结果</span></span><br><span class="line">            <span class="keyword">return</span> customers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取Session</span></span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            <span class="comment">//2.开启事务</span></span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            <span class="comment">//3.执行操作</span></span><br><span class="line">            customerDao.saveCustomer(customer);</span><br><span class="line">            <span class="comment">//4.提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取Session</span></span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            <span class="comment">//2.开启事务</span></span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            <span class="comment">//3.执行操作</span></span><br><span class="line">            customerDao.deleteCustomer(customer);</span><br><span class="line">            <span class="comment">//4.提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-编写持久层接口及实现类"><a href="#4-2-2-编写持久层接口及实现类" class="headerlink" title="4.2.2    编写持久层接口及实现类"></a>4.2.2    编写持久层接口及实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> custID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Customer <span class="title">findCustomerById</span><span class="params">(Long custID)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateUtil.getCurrentSession().createQuery(<span class="string">"from Customer"</span>).list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        HibernateUtil.getCurrentSession().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        HibernateUtil.getCurrentSession().delete(findCustomerById(customer.getCustId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findCustomerById</span><span class="params">(Long custID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateUtil.getCurrentSession().get(Customer<span class="class">.<span class="keyword">class</span>,<span class="title">custID</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-请求参数封装失败后处理办法"><a href="#5-请求参数封装失败后处理办法" class="headerlink" title="5.    请求参数封装失败后处理办法"></a>5.    请求参数封装失败后处理办法</h1><h2 id="5-1-配置input结果视图"><a href="#5-1-配置input结果视图" class="headerlink" title="5.1    配置input结果视图"></a>5.1    配置input结果视图</h2><p>视图路径应该是从哪来回哪去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo3&quot; class&#x3D;&quot;com.wgy.web.action.Demo3Action&quot; method&#x3D;&quot;demo3&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;user.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="5-2-提示错误信息"><a href="#5-2-提示错误信息" class="headerlink" title="5.2    提示错误信息"></a>5.2    提示错误信息</h2><p><strong>引入struts2标签库</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：类型转换失败的处理方式 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo3.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;s:fielderror fieldName=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;s:fielderror fieldName=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>/&gt;&lt;s:fielderror fieldName=<span class="string">"birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;s:fielderror fieldName=<span class="string">"hobby"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-3-把提交的数据回显回来"><a href="#5-3-把提交的数据回显回来" class="headerlink" title="5.3    把提交的数据回显回来"></a>5.3    把提交的数据回显回来</h2><p>html标签和struts2标签都可以实现</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=<span class="string">"demo3"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"姓名"</span>/&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"age"</span> label=<span class="string">"年龄"</span>/&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"birthday"</span> label=<span class="string">"生日"</span>/&gt;</span><br><span class="line">&lt;s:submit value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-4-关于中文提示的问题"><a href="#5-4-关于中文提示的问题" class="headerlink" title="5.4    关于中文提示的问题"></a>5.4    关于中文提示的问题</h2><p>I18N ： 国际化   Internationalization</p><p>同实体类创建.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">invalid.fieldvalue.birthday</span>=<span class="string">请输入正确的日期格式。正确的格式是：yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-结果视图的配置&quot;&gt;&lt;a href=&quot;#1-结果视图的配置&quot; class=&quot;headerlink&quot; title=&quot;1.    结果视图的配置&quot;&gt;&lt;/a&gt;1.    结果视图的配置&lt;/h1&gt;&lt;h2 id=&quot;1-1-result标签&quot;&gt;&lt;a href=&quot;#1-1-result标签&quot; class=&quot;headerlink&quot; title=&quot;1.1    result标签&quot;&gt;&lt;/a&gt;1.1    result标签&lt;/h2&gt;&lt;p&gt;在sturts.xml文件中，Result的配置非常简单，使用&lt;result&gt;元素来配置Result逻辑视图与物理视图之间的映射，&lt;result&gt;元素可以有name和type属性，但这两种属性都不是必选的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2(一)</title>
    <link href="https://wgy1993.gitee.io/archives/90bb5282.html"/>
    <id>https://wgy1993.gitee.io/archives/90bb5282.html</id>
    <published>2020-06-04T15:33:21.000Z</published>
    <updated>2020-06-04T15:51:22.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Struts2基本概念"><a href="#1-Struts2基本概念" class="headerlink" title="1.    Struts2基本概念"></a>1.    Struts2基本概念</h1><h2 id="1-1-三层架构和三大框架各自的位置"><a href="#1-1-三层架构和三大框架各自的位置" class="headerlink" title="1.1    三层架构和三大框架各自的位置"></a>1.1    三层架构和三大框架各自的位置</h2><h3 id="1-1-1-三层架构"><a href="#1-1-1-三层架构" class="headerlink" title="1.1.1    三层架构"></a>1.1.1    三层架构</h3><p>我们的开发架构一般都是基于两种形式，一种是C/S架构，也就是客户端/服务器，另一种是B/S架构，也就是浏览器/服务器。在JavaEE开发中，几乎全都是基于B/S架构的开发。那么在B/S架构中，系统标准的三层架构包括：<strong>表现层、业务层、持久层</strong>。三层架构在我们的实际开发中使用的非常多。</p><p>三层架构中，每一层各司其职，接下来我们就说说每层都负责哪些方面：</p><a id="more"></a><ul><li><p><strong>表现层：</strong></p><p>也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求web层，web需要接收http请求，完成http响应。</p><p>表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。</p><p>表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。</p><p>表现层的设计一般都使用MVC模型。（MVC是表现层的设计模型，和其他层没有关系）</p></li><li><p><strong>业务层：</strong></p><p>也就是我们常说的service层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web层依赖业务层，但是业务层不依赖web层。</p><p>业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的，事务应该放到业务层来控制）</p></li><li><p><strong>持久层：</strong></p><p>也就是我们是常说的dao层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库中。</p><p>通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。</p></li></ul><h3 id="1-1-2-三大框架和三层架构的关系"><a href="#1-1-2-三大框架和三层架构的关系" class="headerlink" title="1.1.2    三大框架和三层架构的关系"></a>1.1.2    三大框架和三层架构的关系</h3><p><img src="https://ae01.alicdn.com/kf/Ha2103ad439dc4b7a8e84a0fe1642c6adx.jpg" alt="image-20200604183345906"></p><h2 id="1-2-Struts2概述"><a href="#1-2-Struts2概述" class="headerlink" title="1.2    Struts2概述"></a>1.2    Struts2概述</h2><p>Struts2是一种基于MVC模式的轻量级Web框架，它自问世以来，就受到了广大Web开发者的关注，并广泛应用于各种企业系统的开发中。目前掌握Struts2框架几乎成为Web开发者的必备技能之一。</p><p>在介绍Struts2之前，先来认识一下Struts1。Struts1是最早的基于MVC模式的轻量级Web框架，它能够合理的划分代码结构，并包含验证框架、国际化框架等多种实用工具框架。但是随着技术的进步，Struts1的局限性也越来越多的暴露出来。为了符合更加灵活、高效的开发需求，Struts2框架应运而生。</p><p>Struts2是Struts1的下一代产品，是在 Struts1和WebWork技术的基础上进行合并后的全新框架（WebWork是由OpenSymphony组织开发的，致力于组件化和代码重用的J2EE Web框架，它也是一个MVC框架）。虽然Struts2的名字与Struts1相似，但其设计思想却有很大不同。实质上，Struts2是以WebWork为核心的，它采用拦截器的机制来处理用户的请求。这样的设计也使得业务逻辑控制器能够与<a href="http://baike.baidu.com/view/25169.htm" target="_blank" rel="noopener">Servlet</a>API完全脱离开，所以Struts2可以理解为WebWork的更新产品。</p><p>Struts2拥有优良的设计和功能，其优势具体如下：</p><ul><li>项目开源，使用及拓展方便，天生优势。</li><li>提供Exception处理机制。</li><li>Result方式的页面导航，通过Result标签很方便的实现重定向和页面跳转。</li><li>通过简单、集中的配置来调度业务类，使得配置和修改都非常容易。</li><li>提供简单、统一的表达式语言来访问所有可供访问的数据。</li><li>提供标准、强大的验证框架和国际化框架。</li><li>提供强大的、可以有效减少页面代码的标签。</li><li>提供良好的Ajax支持。</li><li>拥有简单的插件，只需放入相应的JAR包，任何人都可以扩展Struts2框架，比如自定义拦截器、自定义结果类型、自定义标签等，为Struts2定制需要的功能，不需要什么特殊配置，并且可以发布给其他人使用。</li><li>拥有智能的默认设置，不需要另外进行繁琐的设置。使用默认设置就可以完成大多数项目程序开发所需要的功能。</li></ul><h1 id="2-Struts2的入门"><a href="#2-Struts2的入门" class="headerlink" title="2.    Struts2的入门"></a>2.    Struts2的入门</h1><h2 id="2-1-Struts2环境搭建"><a href="#2-1-Struts2环境搭建" class="headerlink" title="2.1    Struts2环境搭建"></a>2.1    Struts2环境搭建</h2><h3 id="2-1-1-下载struts2开发包"><a href="#2-1-1-下载struts2开发包" class="headerlink" title="2.1.1    下载struts2开发包"></a>2.1.1    下载struts2开发包</h3><p>Struts2的官网: <a href="https://struts.apache.org/" target="_blank" rel="noopener">https://struts.apache.org/</a></p><p><img src="https://ae01.alicdn.com/kf/H08157693d82c4839a33ef6237a0e3dfaK.jpg" alt="img"></p><h3 id="2-1-2-Struts2开发包目录介绍"><a href="#2-1-2-Struts2开发包目录介绍" class="headerlink" title="2.1.2    Struts2开发包目录介绍"></a>2.1.2    Struts2开发包目录介绍</h3><p>解压后的目录结构如下：</p><p><img src="https://ae01.alicdn.com/kf/Hb7181f3bdc8945acac5856883253282e7.jpg" alt="image-20200604192426425"></p><h3 id="2-1-3-搭建步骤"><a href="#2-1-3-搭建步骤" class="headerlink" title="2.1.3    搭建步骤"></a>2.1.3    搭建步骤</h3><h4 id="2-1-3-1-第一步：拷贝struts2必备jar包到web工程的lib目录"><a href="#2-1-3-1-第一步：拷贝struts2必备jar包到web工程的lib目录" class="headerlink" title="2.1.3.1    第一步：拷贝struts2必备jar包到web工程的lib目录"></a>2.1.3.1    第一步：拷贝struts2必备jar包到web工程的lib目录</h4><p>要进行struts2的基本的开发，可以参考struts-2.3.24中的apps下的一些示例代码，其中struts2-blank.war是一个struts2的空的工程。我们只需要将struts2-blank.war解压后进入到WEB-INF下的lib中查看。</p><p><img src="https://ae01.alicdn.com/kf/Hcdc6b8b63fe541a7a3b0f6fafca8579cF.jpg" alt="image-20200604192712061"></p><h4 id="2-1-3-2-第二步：在类的根路径下创建一个名称为struts-xml的文件，并导入约束"><a href="#2-1-3-2-第二步：在类的根路径下创建一个名称为struts-xml的文件，并导入约束" class="headerlink" title="2.1.3.2    第二步：在类的根路径下创建一个名称为struts.xml的文件，并导入约束"></a>2.1.3.2    第二步：在类的根路径下创建一个名称为struts.xml的文件，并导入约束</h4><p>在开发中需要将struts.xml文件引入到工程的src下，因为src下内容发布到web服务器中就是WEB-INF下的classes中。</p><p><img src="https://ae01.alicdn.com/kf/H2a156d974be044ed9e1e56c5d2aff304P.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 导入约束：</span><br><span class="line">    约束的位置：在struts2的核心jar包中</span><br><span class="line">            struts2-core-2.3.24.jar中包含一个名称为：</span><br><span class="line">                struts-2.3.dtd的约束文件</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-3-第三步：在web-xml配置struts2的核心控制器"><a href="#2-1-3-3-第三步：在web-xml配置struts2的核心控制器" class="headerlink" title="2.1.3.3    第三步：在web.xml配置struts2的核心控制器"></a>2.1.3.3    第三步：在web.xml配置struts2的核心控制器</h4><p>Struts2框架要想执行，所有的请求都需要经过这个前端控制器（核心过滤器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">         version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line">    &lt;!-- 配置struts2的核心过滤器 --&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;struts2&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">    &lt;&#x2F;filter&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;struts2&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;filter-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-4-验证搭建成功与否"><a href="#2-1-3-4-验证搭建成功与否" class="headerlink" title="2.1.3.4    验证搭建成功与否"></a>2.1.3.4    验证搭建成功与否</h4><p>把应用部署到tomcat中，启动tomcat，不报异常则表示搭建成功。</p><h2 id="2-2-Struts2入门案例"><a href="#2-2-Struts2入门案例" class="headerlink" title="2.2    Struts2入门案例"></a>2.2    Struts2入门案例</h2><h3 id="2-2-1-案例需求"><a href="#2-2-1-案例需求" class="headerlink" title="2.2.1    案例需求"></a>2.2.1    案例需求</h3><p>通过点击超链接发送请求，由Struts2中类来负责接收，并且在控制台输出接收到了的语句。</p><h3 id="2-2-2-案例实现"><a href="#2-2-2-案例实现" class="headerlink" title="2.2.2    案例实现"></a>2.2.2    案例实现</h3><h4 id="2-2-2-1-第一步：编写index-jsp"><a href="#2-2-2-1-第一步：编写index-jsp" class="headerlink" title="2.2.2.1    第一步：编写index.jsp"></a>2.2.2.1    第一步：编写index.jsp</h4><p><img src="https://ae01.alicdn.com/kf/H5409d3a8a78c4f3394ca8a426e097c14K.jpg" alt="img"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;struts2的入门案例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--struts2的核心控制默认会处理以.action为后缀的url，或者是没有任何后缀的url --%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/hello"&gt;访问第一个struts2应用&lt;/a&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/hello.action"&gt;访问第一个struts2应用.action&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-第二步：编写Class"><a href="#2-2-2-2-第二步：编写Class" class="headerlink" title="2.2.2.2    第二步：编写Class"></a>2.2.2.2    第二步：编写Class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们的第一个动作类。 </span></span><br><span class="line"><span class="comment"> * 动作类： </span></span><br><span class="line"><span class="comment"> *    它就是一个概念。它就是struts2框架中用于处理请求的类。</span></span><br><span class="line"><span class="comment"> *    我们以后处理请求都写动作类。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们的第一个动作方法</span></span><br><span class="line"><span class="comment"> * 动作方法：</span></span><br><span class="line"><span class="comment"> *  动作类中用于处理请求的方法</span></span><br><span class="line"><span class="comment"> * 动作方法有编写规范：</span></span><br><span class="line"><span class="comment"> * 1、访问修饰符都是public</span></span><br><span class="line"><span class="comment"> * 2、方法的返回值一般都是String(但是可以是void)</span></span><br><span class="line"><span class="comment"> *  3、方法都没有参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloAction的sayHello方法执行了。。。。"</span>+<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-第三步：在配置文件中配置我们的动作类"><a href="#2-2-2-3-第三步：在配置文件中配置我们的动作类" class="headerlink" title="2.2.2.3    第三步：在配置文件中配置我们的动作类"></a>2.2.2.3    第三步：在配置文件中配置我们的动作类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.0.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;!-- 配置文件 --&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;hello&quot; class&#x3D;&quot;com.wgy.web.action.HelloAction&quot; method&#x3D;&quot;sayHello&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-4-第四步：编写success-jsp"><a href="#2-2-2-4-第四步：编写success-jsp" class="headerlink" title="2.2.2.4    第四步：编写success.jsp"></a>2.2.2.4    第四步：编写success.jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;执行结果页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;执行成功！</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-5-第五步：启动tomcat测试访问结果"><a href="#2-2-2-5-第五步：启动tomcat测试访问结果" class="headerlink" title="2.2.2.5    第五步：启动tomcat测试访问结果"></a>2.2.2.5    第五步：启动tomcat测试访问结果</h4><h2 id="2-3-Struts2的执行过程"><a href="#2-3-Struts2的执行过程" class="headerlink" title="2.3    Struts2的执行过程"></a>2.3    Struts2的执行过程</h2><h3 id="2-3-1-执行时序"><a href="#2-3-1-执行时序" class="headerlink" title="2.3.1    执行时序"></a>2.3.1    执行时序</h3><p>首先是，启动tomcat服务器，这时候会加载web.xml，当读到filter标签时，会创建过滤器对象。</p><p>Struts2的核心过滤器（StrutsPrepareAndExecuteFilter）会负责加载类路径下的struts.xml配置文件。</p><p>接下来，从客户端发送请求过来 先经过前端控制器（核心过滤器StrutsPrepareAndExecuteFilter），前端控制器会根据请求的名称在struts.xml中找到对应的配置，创建我们的动作类对象（每次访问时都会创建新的Action对象），然后执行指定的方法，根据方法的返回值找到Result的配置进行页面的跳转.最后响应浏览器。</p><p><img src="https://ae01.alicdn.com/kf/H3380a4a9a4c747cfb692310c63c89496T.jpg" alt="image-20200604200648417"></p><h3 id="2-3-2-内部执行流程"><a href="#2-3-2-内部执行流程" class="headerlink" title="2.3.2    内部执行流程"></a>2.3.2    内部执行流程</h3><p>Struts2框架在默认情况下核心控制器（StrutsPrepareAndExecuteFilter）默认会拦截以.action为后缀的请求，或者是没有任何后缀的请求。当拦截下来后，送入Struts2的核心内部。如下图所示：</p><p><img src="https://ae01.alicdn.com/kf/H6938fe09b5054edd9af6ba47175967634.jpg" alt="image-20200604200635414"></p><p>我们通过上面的图解，应该明确在实际开发中我们用struts2要做哪些：</p><ol><li>写动作类</li><li>写jsp</li><li>写配置文件</li></ol><p>其中，又以配置文件为重。</p><h1 id="3-Struts2的配置文件详解"><a href="#3-Struts2的配置文件详解" class="headerlink" title="3.    Struts2的配置文件详解"></a>3.    Struts2的配置文件详解</h1><h2 id="3-1-Struts2中的配置文件"><a href="#3-1-Struts2中的配置文件" class="headerlink" title="3.1    Struts2中的配置文件"></a>3.1    Struts2中的配置文件</h2><h3 id="3-1-1-配置文件说明"><a href="#3-1-1-配置文件说明" class="headerlink" title="3.1.1    配置文件说明"></a>3.1.1    配置文件说明</h3><p>在struts2中给我们提供了6个配置文件。他们的加载时机是tomcat启动服务一加载我们的应用时，就加载struts2的配置文件。</p><p>他们的加载顺序入如下：</p><table><thead><tr><th>顺序</th><th>配置文件名</th><th>所在位置</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>default.properties</td><td>struts2-core-2.3.15.3.jar\org\apache\struts2</td><td>不能修改</td></tr><tr><td>2</td><td>struts-default.xml</td><td>struts2-core-2.3.15.3.jar</td><td>不能修改</td></tr><tr><td>3</td><td>strtuts-plugin.xml</td><td>在struts2提供的插件jar包中</td><td>不能修改</td></tr><tr><td>4</td><td>struts.xml</td><td>我们的应用中</td><td>我们修改的：推荐</td></tr><tr><td>5</td><td>struts.properties</td><td>我们的应用中</td><td>我们修改的</td></tr><tr><td>6</td><td>web.xml</td><td>我们的应用中</td><td>我们修改的，可以给过滤器配置参数</td></tr></tbody></table><h3 id="3-1-2-配置文件的注意事项"><a href="#3-1-2-配置文件的注意事项" class="headerlink" title="3.1.2    配置文件的注意事项"></a>3.1.2    配置文件的注意事项</h3><ol><li>Struts2提供了两种配置的方式。一种是key=value的方式，即使用.properties文件。另一种是xml文件配置。我们推荐使用xml文件（它能描述层级关系）。</li><li>当多个配置文件中，有相同的参数，后加载的会把前面的值给覆盖了。</li></ol><h3 id="3-1-3-Struts2中的常用常量"><a href="#3-1-3-Struts2中的常用常量" class="headerlink" title="3.1.3    Struts2中的常用常量"></a>3.1.3    Struts2中的常用常量</h3><p>常量定义在了default.properties配置文件中，体现形式都是key=value。所有的struts2应用都会用到这些常量。</p><p>常用的：</p><table><thead><tr><th>常量名</th><th>常量值</th><th>说明</th></tr></thead><tbody><tr><td>struts.i18n.encoding</td><td>UTF-8</td><td>应用中使用的编码</td></tr><tr><td>struts.objectFactory.spring.autoWire</td><td>name</td><td>和spring框架整合有关</td></tr><tr><td>struts.multipart.parser</td><td>jakarta</td><td>指定文件上传用的组件</td></tr><tr><td>struts.multipart.maxSize</td><td>2097152</td><td>文件上传总文件大小限制：2M</td></tr><tr><td>struts.action.extension</td><td>action,,</td><td>能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td></tr><tr><td>struts.enable.DynamicMethodInvocation</td><td>false</td><td>是否允许动态方法调用</td></tr><tr><td>struts.devMode</td><td>false</td><td>是否是开发模式。开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true</td></tr><tr><td>struts.ui.theme</td><td>xhtml</td><td>页面展示用的主题</td></tr></tbody></table><h2 id="3-2-Struts-xml中的标签详解"><a href="#3-2-Struts-xml中的标签详解" class="headerlink" title="3.2    Struts.xml中的标签详解"></a>3.2    Struts.xml中的标签详解</h2><h3 id="3-2-1-constant标签"><a href="#3-2-1-constant标签" class="headerlink" title="3.2.1    constant标签"></a>3.2.1    constant标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- constant标签：</span><br><span class="line">    作用：</span><br><span class="line">        用于修改struts2中的常量</span><br><span class="line">    属性：</span><br><span class="line">        name：指定常量的key</span><br><span class="line">        value：指定常量的值</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 开启开发者模式 --&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&gt;&lt;&#x2F;constant&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-package标签"><a href="#3-2-2-package标签" class="headerlink" title="3.2.2    package标签"></a>3.2.2    package标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- package标签：</span><br><span class="line">    作用：给访问的action进行分包管理。把配置文件按照面向对象的思想来管理。</span><br><span class="line">    属性：</span><br><span class="line">        name：指定包的名称。必须写，并且必须唯一。</span><br><span class="line">        extends：指定当前包的父包。子包自动具备父包所定义的配置。我们的包一般都需要继承struts-default包。</span><br><span class="line">        该包在struts-defaul.xml文件中定义着。如果不继承该包，则不能使用struts2的核心功能。</span><br><span class="line">        abstract：把当前包声明为抽象包。抽象包就是用来被继承的。里面定义一般都是公共的配置。</span><br><span class="line">                  只有没有action标签的包，才能定义为抽象包。</span><br><span class="line">        namespace：指定当前包的名称空间。它可以让我们的访问URL模块化。当我们指定了该属性，访问URL就变成了：名称空间+&#x2F;hello</span><br><span class="line">                   名称空间的写法：第一个字符必须是&#x2F;，后面紧跟的字符必须是一个字母。其余内容可以是字母，也可以是数字。</span><br><span class="line">                    例如：我们访问用户</span><br><span class="line">                        &#x2F;user&#x2F;addUser.action</span><br><span class="line">                        &#x2F;user&#x2F;updateUser.action</span><br><span class="line">                    名称空间有默认值。默认值是：&quot;&quot;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;struts-default&quot; namespace&#x3D;&quot;&#x2F;n1&quot;&gt;</span><br><span class="line">&lt;action name&#x3D;&quot;hello&quot; class&#x3D;&quot;com.wgy.web.action.HelloAction&quot; method&#x3D;&quot;sayHello&quot;&gt;</span><br><span class="line">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-action标签"><a href="#3-2-3-action标签" class="headerlink" title="3.2.3    action标签"></a>3.2.3    action标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- action标签：</span><br><span class="line">作用：建立动作名称，动作类和动作方法的对应关系</span><br><span class="line">属性：</span><br><span class="line">        name:指定动作名称。它是唯一的</span><br><span class="line">        class:指定动作类的全限定类名</span><br><span class="line">        method：指定动作方法名称</span><br><span class="line">--&gt;</span><br><span class="line">&lt;action name&#x3D;&quot;hello&quot; class&#x3D;&quot;com.wgy.web.action.HelloAction&quot; method&#x3D;&quot;sayHello&quot;&gt;</span><br><span class="line">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-action的三种创建方式"><a href="#3-3-action的三种创建方式" class="headerlink" title="3.3    action的三种创建方式"></a>3.3    action的三种创建方式</h2><h3 id="3-3-1-第一种：无侵入式创建-实际开发中基本不用"><a href="#3-3-1-第一种：无侵入式创建-实际开发中基本不用" class="headerlink" title="3.3.1    第一种：无侵入式创建(实际开发中基本不用)"></a>3.3.1    第一种：无侵入式创建(实际开发中基本不用)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们的第一个动作类</span></span><br><span class="line"><span class="comment"> * 动作类的第一种创建方式：</span></span><br><span class="line"><span class="comment"> *  无侵入式的创建。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line">System.out.println(<span class="string">"HelloAction中的sayHello方法执行了。。。。"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;hello&quot; class&#x3D;&quot;com.wgy.web.action.HelloAction&quot; method&#x3D;&quot;sayHello&quot;&gt;</span><br><span class="line">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-第二种：实现Action接口的定义方式-实际开发中用的也不多"><a href="#3-3-2-第二种：实现Action接口的定义方式-实际开发中用的也不多" class="headerlink" title="3.3.2    第二种：实现Action接口的定义方式   (实际开发中用的也不多)"></a>3.3.2    第二种：实现Action接口的定义方式   (实际开发中用的也不多)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现接口的方式创建动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello2Action</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello2Action的execute方法执行了。。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 默认动作方法：当我们要是执行的是execute方法时，method属性可以不写。 --&gt;</span><br><span class="line">&lt;action name&#x3D;&quot;hello2&quot; class&#x3D;&quot;com.wgy.web.action.Hello2Action&quot;&gt;</span><br><span class="line">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><p>Action接口中的常量</p><p><strong>SUCCESS</strong>：一般多用于成功</p><p><strong>ERROR</strong>：一般多用于动作方法执行失败</p><p><strong>LOGIN</strong>：一般多用于返回登录页面</p><p><strong>NONE</strong>：一般用于不返回任何结果视图，和return null作用是一样的</p><p><strong>INPUT</strong>：一般多用于数据回显，也是struts2中数据回显时的默认返回值。   </p><h3 id="3-3-3-第三种：继承ActionSupport-实际开发中采用的方式"><a href="#3-3-3-第三种：继承ActionSupport-实际开发中采用的方式" class="headerlink" title="3.3.3    第三种：继承ActionSupport (实际开发中采用的方式)"></a>3.3.3    第三种：继承ActionSupport (实际开发中采用的方式)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过继承ActionSupport的方式创建动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;hello3&quot; class&#x3D;&quot;com.wgy.web.action.Hello3Action&quot;&gt;</span><br><span class="line">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-默认动作类：ActionSupport类"><a href="#3-3-4-默认动作类：ActionSupport类" class="headerlink" title="3.3.4    默认动作类：ActionSupport类"></a>3.3.4    默认动作类：ActionSupport类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通过struts-default.xml中我们知道默认的动作类是ActionSupport，所以如果实现该类的execute方法，则可以不用指定class和method属性 --&gt;</span><br><span class="line">&lt;action name&#x3D;&quot;hello4&quot;&gt;</span><br><span class="line">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-action的三种访问方式"><a href="#3-4-action的三种访问方式" class="headerlink" title="3.4    action的三种访问方式"></a>3.4    action的三种访问方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存了用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-1-第一种：全匹配配置访问方式"><a href="#3-4-1-第一种：全匹配配置访问方式" class="headerlink" title="3.4.1    第一种：全匹配配置访问方式"></a>3.4.1    第一种：全匹配配置访问方式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/addUser"&gt;添加用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/updateUser"&gt;更新用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/deleteUser"&gt;删除用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/findUser"&gt;查询用户&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name&#x3D;&quot;user&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;addUser&quot; class&#x3D;&quot;com.wgy.web.action.UserAction&quot; method&#x3D;&quot;addUser&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;updateUser&quot; class&#x3D;&quot;com.wgy.web.action.UserAction&quot; method&#x3D;&quot;updateUser&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;deleteUser&quot; class&#x3D;&quot;com.wgy.web.action.UserAction&quot; method&#x3D;&quot;deleteUser&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;findUser&quot; class&#x3D;&quot;com.wgy.web.action.UserAction&quot; method&#x3D;&quot;findUser&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-第二种：使用通配符的方式"><a href="#3-4-2-第二种：使用通配符的方式" class="headerlink" title="3.4.2    第二种：使用通配符的方式*"></a>3.4.2    第二种：使用通配符的方式*</h3><ul><li>通配符基本用法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/addUser"&gt;添加用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/updateUser"&gt;更新用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/deleteUser"&gt;删除用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/findUser"&gt;查询用户&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通配符基本用法 --&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;user&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;*&quot; class&#x3D;&quot;com.wgy.web.action.UserAction&quot; method&#x3D;&quot;&#123;1&#125;&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><ul><li>通配符的高级用法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/add_User"&gt;添加用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/update_User"&gt;更新用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/delete_User"&gt;删除用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/find_User"&gt;查询用户&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通配符的高级用法 --&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;user&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;*_*&quot; class&#x3D;&quot;com.wgy.web.action.&#123;2&#125;Action&quot; method&#x3D;&quot;&#123;1&#125;&#123;2&#125;&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-第三种：使用动态方法调用的方式"><a href="#3-4-3-第三种：使用动态方法调用的方式" class="headerlink" title="3.4.3    第三种：使用动态方法调用的方式"></a>3.4.3    第三种：使用动态方法调用的方式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/user!addUser"&gt;添加用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/user!updateUser"&gt;更新用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/user!deleteUser"&gt;删除用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/user!findUser"&gt;查询用户&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用动态方法调用的方式 --&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.enable.DynamicMethodInvocation&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;user&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;user&quot; class&#x3D;&quot;com.wgy.web.action.UserAction&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h1 id="4-案例：Strut2-Hibernate查询客户列表"><a href="#4-案例：Strut2-Hibernate查询客户列表" class="headerlink" title="4.    案例：Strut2+Hibernate查询客户列表"></a>4.    案例：Strut2+Hibernate查询客户列表</h1><h2 id="4-1-第一步：搭建hibernate开发环境并准备实体类和映射配置"><a href="#4-1-第一步：搭建hibernate开发环境并准备实体类和映射配置" class="headerlink" title="4.1    第一步：搭建hibernate开发环境并准备实体类和映射配置"></a>4.1    第一步：搭建hibernate开发环境并准备实体类和映射配置</h2><p>可参考Hibernate环境搭建。</p><p>Hibernate开发环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Configuration DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">    &lt;!-- 配置SessionFactory--&gt;</span><br><span class="line">    &lt;session-factory&gt;</span><br><span class="line">        &lt;!-- 第一部分：连接数据库的信息 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.url&quot;&gt;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;struts2&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.username&quot;&gt;root&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.password&quot;&gt;root&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 数据库的方言 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 第二部分：hibernate的可选配置 --&gt;</span><br><span class="line">        &lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.show_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.format_sql&quot;&gt;false&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span><br><span class="line">        &lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 设置hibernate的连接池提供商 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.provider_class&quot;&gt;org.hibernate.c3p0.internal.C3P0ConnectionProvider&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 第三部分：映射配置文件的位置 --&gt;</span><br><span class="line">        &lt;mapping class&#x3D;&quot;com.wgy.domain.Customer&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;session-factory&gt;</span><br><span class="line">&lt;&#x2F;hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><p>实体类和映射配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-第二步：搭建struts2环境"><a href="#4-2-第二步：搭建struts2环境" class="headerlink" title="4.2    第二步：搭建struts2环境"></a>4.2    第二步：搭建struts2环境</h2><p>参考2.1.3章节的步骤去做。</p><h2 id="4-3-第三步：导入crm的jsp页面"><a href="#4-3-第三步：导入crm的jsp页面" class="headerlink" title="4.3    第三步：导入crm的jsp页面"></a>4.3    第三步：导入crm的jsp页面</h2><p>把下图中红框内文件夹下所有内容都拷贝到WebContent目录中</p><p><img src="https://ae01.alicdn.com/kf/Hef71a9c647a14088a23049d402e1ec3dI.jpg" alt="img"></p><h2 id="4-4-第四步：修改menu-jsp"><a href="#4-4-第四步：修改menu-jsp" class="headerlink" title="4.4    第四步：修改menu.jsp"></a>4.4    第四步：修改menu.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TR&gt; </span><br><span class="line">    &lt;TD <span class="class"><span class="keyword">class</span></span>=menuSmall&gt;</span><br><span class="line">        &lt;A class=style2 href="$&#123;pageContext.request.contextPath&#125;/customer/findAllCustomer.action" target=main&gt;－ 客户列表&lt;/A&gt;</span><br><span class="line">    &lt;/TD&gt;</span><br><span class="line">&lt;/TR&gt;</span><br></pre></td></tr></table></figure><h2 id="4-5-第五步：在配置文件中配置findAllCustomer-action"><a href="#4-5-第五步：在配置文件中配置findAllCustomer-action" class="headerlink" title="4.5    第五步：在配置文件中配置findAllCustomer.action"></a>4.5    第五步：在配置文件中配置findAllCustomer.action</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;!-- 开启开发者模式 --&gt;</span><br><span class="line">    &lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">    &lt;!--  动作配置 --&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;customer&quot; extends&#x3D;&quot;struts-default&quot; namespace&#x3D;&quot;&#x2F;customer&quot;&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;findAllCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;findAllCustomer&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;findAllCustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;list.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><h2 id="4-6-第六步：创建动作类并提供动作方法"><a href="#4-6-第六步：创建动作类并提供动作方法" class="headerlink" title="4.6    第六步：创建动作类并提供动作方法"></a>4.6    第六步：创建动作类并提供动作方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.调用service查询客户</span></span><br><span class="line">        List&lt;Customer&gt; customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="comment">//2.获取request对象</span></span><br><span class="line">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">        <span class="comment">//3.把查询的结果存入请求域中</span></span><br><span class="line">        request.setAttribute(<span class="string">"customers"</span>, customers);</span><br><span class="line">        <span class="comment">//4.返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-第七步：编写service接口和实现类"><a href="#4-7-第七步：编写service接口和实现类" class="headerlink" title="4.7    第七步：编写service接口和实现类"></a>4.7    第七步：编写service接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> * 事务控制在业务层的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取Session</span></span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            <span class="comment">//2.开启事务</span></span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            <span class="comment">//3.执行操作</span></span><br><span class="line">            List&lt;Customer&gt; customers = customerDao.findAllCustomer();</span><br><span class="line">            <span class="comment">//4.提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">            <span class="comment">//5.返回结果</span></span><br><span class="line">            <span class="keyword">return</span> customers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-8-第八步：编写dao接口和实现类"><a href="#4-8-第八步：编写dao接口和实现类" class="headerlink" title="4.8    第八步：编写dao接口和实现类"></a>4.8    第八步：编写dao接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateUtil.getCurrentSession().createQuery(<span class="string">"from Customer"</span>).list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-9-第九步：页面展示jsp-customer-list-jsp"><a href="#4-9-第九步：页面展示jsp-customer-list-jsp" class="headerlink" title="4.9    第九步：页面展示jsp/customer/list.jsp"></a>4.9    第九步：页面展示jsp/customer/list.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;customers&#125;"</span> <span class="keyword">var</span>=<span class="string">"customer"</span>&gt;</span><br><span class="line">    &lt;TR&gt;</span><br><span class="line">        &lt;TD&gt;$&#123;customer.custName &#125;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;$&#123;customer.custLevel &#125;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;$&#123;customer.custSource &#125;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;$&#123;customer.custIndustry &#125;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;$&#123;customer.custAddress &#125;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;$&#123;customer.custPhone &#125;&lt;/TD&gt;</span><br><span class="line">    &lt;/TR&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Struts2基本概念&quot;&gt;&lt;a href=&quot;#1-Struts2基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.    Struts2基本概念&quot;&gt;&lt;/a&gt;1.    Struts2基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-三层架构和三大框架各自的位置&quot;&gt;&lt;a href=&quot;#1-1-三层架构和三大框架各自的位置&quot; class=&quot;headerlink&quot; title=&quot;1.1    三层架构和三大框架各自的位置&quot;&gt;&lt;/a&gt;1.1    三层架构和三大框架各自的位置&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-三层架构&quot;&gt;&lt;a href=&quot;#1-1-1-三层架构&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    三层架构&quot;&gt;&lt;/a&gt;1.1.1    三层架构&lt;/h3&gt;&lt;p&gt;我们的开发架构一般都是基于两种形式，一种是C/S架构，也就是客户端/服务器，另一种是B/S架构，也就是浏览器/服务器。在JavaEE开发中，几乎全都是基于B/S架构的开发。那么在B/S架构中，系统标准的三层架构包括：&lt;strong&gt;表现层、业务层、持久层&lt;/strong&gt;。三层架构在我们的实际开发中使用的非常多。&lt;/p&gt;
&lt;p&gt;三层架构中，每一层各司其职，接下来我们就说说每层都负责哪些方面：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate(四)</title>
    <link href="https://wgy1993.gitee.io/archives/c4c4045f.html"/>
    <id>https://wgy1993.gitee.io/archives/c4c4045f.html</id>
    <published>2020-06-03T14:33:02.000Z</published>
    <updated>2020-06-03T14:57:57.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JPA相关概念"><a href="#1-JPA相关概念" class="headerlink" title="1.    JPA相关概念"></a>1.    JPA相关概念</h1><h2 id="1-1-JPA概述"><a href="#1-1-JPA概述" class="headerlink" title="1.1    JPA概述"></a>1.1    JPA概述</h2><p>全称是：Java Persistence API。是SUN公司推出的一套基于ORM的规范。Hibernate框架中提供了JPA的实现。</p><p>JPA通过JDK 5.0注解或XML描述对象—关系表的映射关系，并将运行期的实体<a href="http://baike.baidu.com/item/对象持久化" target="_blank" rel="noopener">对象持久化</a>到数据库中。</p><a id="more"></a><h2 id="1-2-JPA的优势"><a href="#1-2-JPA的优势" class="headerlink" title="1.2    JPA的优势"></a>1.2    JPA的优势</h2><ul><li><p>标准化</p><p> JPA 是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的访问<a href="http://baike.baidu.com/item/API" target="_blank" rel="noopener">API</a>，这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行。</p></li><li><p>容器级特性的支持</p><p> JPA框架中支持大数据集、<a href="http://baike.baidu.com/item/事务" target="_blank" rel="noopener">事务</a>、并发等容器级事务，这使得 JPA 超越了简单持久化框架的局限，在企业应用发挥更大的作用。</p></li><li><p>简单方便</p><p> JPA的主要目标之一就是提供更加简单的编程模型：在JPA框架下创建实体和创建Java 类一样简单，没有任何的约束和限制，只需要使用 javax.persistence.Entity进行注释，JPA的框架和接口也都非常简单，没有太多特别的规则和设计模式的要求，开发者可以很容易的掌握。JPA基于非侵入式原则设计，因此可以很容易的和其它框架或者容器集成。</p></li><li><p>查询能力</p><p> JPA的查询语言是<a href="http://baike.baidu.com/item/面向对象" target="_blank" rel="noopener">面向对象</a>而非面向数据库的，它以面向对象的自然语法构造查询语句，可以看成是Hibernate HQL的等价物。JPA定义了独特的<a href="http://baike.baidu.com/item/JPQL" target="_blank" rel="noopener">JPQL</a>（Java Persistence Query Language），JPQL是EJB QL的一种扩展，它是针对实体的一种查询语言，操作对象是实体，而不是关系数据库的表，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING 等通常只有 SQL 才能够提供的高级查询特性，甚至还能够支持<a href="http://baike.baidu.com/item/子查询" target="_blank" rel="noopener">子查询</a>。</p></li><li><p>高级特性</p><p> JPA 中能够支持<a href="http://baike.baidu.com/item/面向对象" target="_blank" rel="noopener">面向对象</a>的高级特性，如类之间的继承、<a href="http://baike.baidu.com/item/多态" target="_blank" rel="noopener">多态</a>和类之间的复杂关系，这样的支持能够让开发者最大限度的使用面向对象的模型设计企业应用，而不需要自行处理这些特性在关系数据库的持久化。</p></li></ul><h2 id="1-3-学习JPA要明确的"><a href="#1-3-学习JPA要明确的" class="headerlink" title="1.3    学习JPA要明确的"></a>1.3    学习JPA要明确的</h2><ol><li>JPA是一套ORM规范，Hibernate实现了JPA规范</li><li>hibernate中有自己的独立ORM操作数据库方式，也有JPA规范实现的操作数据库方式。</li></ol><h1 id="2-JPA入门"><a href="#2-JPA入门" class="headerlink" title="2.    JPA入门"></a>2.    JPA入门</h1><h2 id="2-1-需求介绍"><a href="#2-1-需求介绍" class="headerlink" title="2.1    需求介绍"></a>2.1    需求介绍</h2><p>本章节我们实现基于JPA注解的对象关系映射，配置实体类和数据库表的对应关系。并且使用JPA规范中的方法实现CRUD操作。</p><h2 id="2-2-JPA环境搭建"><a href="#2-2-JPA环境搭建" class="headerlink" title="2.2    JPA环境搭建"></a>2.2    JPA环境搭建</h2><h3 id="2-2-1-第一步：拷贝jar包"><a href="#2-2-1-第一步：拷贝jar包" class="headerlink" title="2.2.1    第一步：拷贝jar包"></a>2.2.1    第一步：拷贝jar包</h3><p><img src="https://ae01.alicdn.com/kf/Ha8da0b4ed332403faf884f44ce0a67efu.jpg" alt="img"></p><h3 id="2-2-2-第二步：创建配置文件"><a href="#2-2-2-第二步：创建配置文件" class="headerlink" title="2.2.2    第二步：创建配置文件"></a>2.2.2    第二步：创建配置文件</h3><p>在src下面的META-INF文件夹下面创建一个名称为persistence.xml的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;persistence xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;persistence&quot;</span><br><span class="line">             xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">             xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;persistence</span><br><span class="line">    http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;persistence&#x2F;persistence_2_0.xsd&quot;</span><br><span class="line">             version&#x3D;&quot;2.0&quot;&gt;</span><br><span class="line">    &lt;!-- 配置持久化单元，可以配置多个，但是名称不能重复</span><br><span class="line">    name:用于指定持久化单元名称</span><br><span class="line">        transaction-type:指定事务的类型。</span><br><span class="line">            JTA：Java Transaction API</span><br><span class="line">                RESOURCE_LOCAL:指的是本地代码事务。（我们用这个）</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;persistence-unit name&#x3D;&quot;myJPAUnit&quot; transaction-type&#x3D;&quot;RESOURCE_LOCAL&quot;&gt;</span><br><span class="line">        &lt;!-- JPA规范的提供商 可以不写。--&gt;</span><br><span class="line">        &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;&#x2F;provider&gt;</span><br><span class="line">        &lt;!-- 指定由Jpa注解的实体类位置 可以不写。--&gt;</span><br><span class="line">        &lt;class&gt;com.wgy.domain.Customer&lt;&#x2F;class&gt;</span><br><span class="line">        &lt;!-- 连接库相关的一些配置 --&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;!-- 第一部分：连接数据库的信息 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.connection.driver_class&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.connection.url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;hibernate01&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.connection.username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.connection.password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!-- 数据库的方言 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.dialect&quot; value&#x3D;&quot;org.hibernate.dialect.MySQLDialect&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 第二部分：hibernate的可选配置 --&gt;</span><br><span class="line">            &lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.show_sql&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.format_sql&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span><br><span class="line">            &lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;hibernate.hbm2ddl.auto&quot; value&#x3D;&quot;update&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;&#x2F;persistence-unit&gt;</span><br><span class="line">&lt;&#x2F;persistence&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-第三步：编写工具类，用于获取JPA的操作数据库对象"><a href="#2-2-3-第三步：编写工具类，用于获取JPA的操作数据库对象" class="headerlink" title="2.2.3    第三步：编写工具类，用于获取JPA的操作数据库对象"></a>2.2.3    第三步：编写工具类，用于获取JPA的操作数据库对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPA的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPAUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//它就相当于SessionFactory</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EntityManagerFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//注意：该方法参数必须和persistence.xml中persistence-unit标签name属性取值一致</span></span><br><span class="line">        factory = Persistence.createEntityManagerFactory(<span class="string">"myJPAUnit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取EntityManager对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EntityManager <span class="title">createEntityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> em.createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-第四步：编写实体类并使用注解配置"><a href="#2-2-4-第四步：编写实体类并使用注解配置" class="headerlink" title="2.2.4    第四步：编写实体类并使用注解配置"></a>2.2.4    第四步：编写实体类并使用注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户实体类</span></span><br><span class="line"><span class="comment"> * 使用的注解都是JPA规范，所以导包，都需要导入javax.persistence包下的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span><span class="comment">//表明该类是一个实体类</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)<span class="comment">//建立当前类和数据库表的对应关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//表明当前字段是主键</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)<span class="comment">//表明对应数据库的主键字段是cust_id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//指定主键生成策略。</span></span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-JPA的CRUD操作"><a href="#2-3-JPA的CRUD操作" class="headerlink" title="2.3    JPA的CRUD操作"></a>2.3    JPA的CRUD操作</h2><h3 id="2-3-1-保存"><a href="#2-3-1-保存" class="headerlink" title="2.3.1    保存"></a>2.3.1    保存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建客户对象</span></span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    c.setCustName(<span class="string">"JPA Customer"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.执行保存操作</span></span><br><span class="line">    em.persist(c);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-快照更新"><a href="#2-3-2-快照更新" class="headerlink" title="2.3.2    快照更新"></a>2.3.2    快照更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.执行更新操作（需要把更新的对象先查询出来）</span></span><br><span class="line">    Customer c = em.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//修改客户的地址为：顺义区</span></span><br><span class="line">    c.setCustAddress(<span class="string">"顺义区"</span>);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-merge更新"><a href="#2-3-3-merge更新" class="headerlink" title="2.3.3    merge更新"></a>2.3.3    merge更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新的另一种操作方式</span></span><br><span class="line"><span class="comment"> * merge是合并  （两个实体合并）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.执行更新操作（需要把更新的对象先查询出来）</span></span><br><span class="line">    Customer c = em.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//修改客户的地址为：顺义区</span></span><br><span class="line">    c.setCustAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line"></span><br><span class="line">    em.merge(c);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-删除"><a href="#2-3-4-删除" class="headerlink" title="2.3.4    删除"></a>2.3.4    删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.执行更新操作（需要把更新的对象先查询出来）</span></span><br><span class="line">    Customer c = em.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    em.remove(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-查询一个"><a href="#2-3-5-查询一个" class="headerlink" title="2.3.5    查询一个"></a>2.3.5    查询一个</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询一个实体立即加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.执行更新操作（需要把更新的对象先查询出来）</span></span><br><span class="line">    Customer c = em.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询一个实体延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.执行更新操作（需要把更新的对象先查询出来）</span></span><br><span class="line">    Customer c = em.getReference(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-6-查询所有"><a href="#2-3-6-查询所有" class="headerlink" title="2.3.6    查询所有"></a>2.3.6    查询所有</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 涉及的对象是：</span></span><br><span class="line"><span class="comment"> * JPA的Query</span></span><br><span class="line"><span class="comment"> * 如何获取该对象：</span></span><br><span class="line"><span class="comment"> * EntityManager的createQuery(String jpql)</span></span><br><span class="line"><span class="comment"> * 参数含义：</span></span><br><span class="line"><span class="comment"> * JPQL：Java Persistence Query Language</span></span><br><span class="line"><span class="comment"> * 他的写法和HQL很相似。也是把表名换成类名，把字段名换成属性名称</span></span><br><span class="line"><span class="comment"> * 它在写查询所有时，不能直接用from 实体类</span></span><br><span class="line"><span class="comment"> * 需要使用select关键字</span></span><br><span class="line"><span class="comment"> * select c from Customer c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.获取JPA的查询对象Query</span></span><br><span class="line">    Query query = em.createQuery(<span class="string">"select c from Customer c where custName like ? and custLevel = ? "</span>);</span><br><span class="line">    <span class="comment">//给占位符赋值</span></span><br><span class="line">    query.setParameter(<span class="number">1</span>, <span class="string">"%集%"</span>);</span><br><span class="line">    query.setParameter(<span class="number">2</span>, <span class="string">"23"</span>);</span><br><span class="line">    <span class="comment">//执行方法获取结果集</span></span><br><span class="line">    <span class="comment">//getSingleResult()：查询结果是一个对象</span></span><br><span class="line">    List list = query.getResultList();</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-JPA的多表操作"><a href="#3-JPA的多表操作" class="headerlink" title="3.    JPA的多表操作"></a>3.    JPA的多表操作</h1><h2 id="3-1-一对多关系配置及操作"><a href="#3-1-一对多关系配置及操作" class="headerlink" title="3.1    一对多关系配置及操作"></a>3.1    一对多关系配置及操作</h2><h3 id="3-1-1-配置"><a href="#3-1-1-配置" class="headerlink" title="3.1.1    配置"></a>3.1.1    配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对多关系映射：一个客户可以有多个联系人</span></span><br><span class="line"><span class="comment">     * mappedBy 取消维护</span></span><br><span class="line"><span class="comment">     * cascade 级联保存</span></span><br><span class="line"><span class="comment">     * fetch 查询加载时机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(targetEntity = LinkMan<span class="class">.<span class="keyword">class</span>,<span class="title">mappedBy</span> </span>= <span class="string">"customer"</span>,cascade = CascadeType.ALL,fetch = FetchType.EAGER)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;LinkMan&gt; linkmans = <span class="keyword">new</span> HashSet&lt;LinkMan&gt;(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_linkman"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_id"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long lkmId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_gender"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmGender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmPhone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_mobile"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmMobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmEmail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_position"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmPosition;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_memo"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmMemo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对多关系映射，多的一方。</span></span><br><span class="line"><span class="comment">     * 从表实体包含主表实体的对象引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToOne</span>(targetEntity = Customer<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span> </span>= FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"lkm_cust_id"</span>,referencedColumnName = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-操作"><a href="#3-1-2-操作" class="headerlink" title="3.1.2    操作"></a>3.1.2    操作</h3><h4 id="3-1-2-1-保存"><a href="#3-1-2-1-保存" class="headerlink" title="3.1.2.1    保存"></a>3.1.2.1    保存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> * 创建一个客户和一个联系人</span></span><br><span class="line"><span class="comment"> * 建立客户和联系人的双向关联关系</span></span><br><span class="line"><span class="comment"> * 先保存客户，再保存联系人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    LinkMan l = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    c.setCustName(<span class="string">"JPA One To Many Customer"</span>);</span><br><span class="line">    l.setLkmName(<span class="string">"JPA One To Many LinkMan"</span>);</span><br><span class="line"></span><br><span class="line">    c.getLinkmans().add(l);</span><br><span class="line">    l.setCustomer(c);</span><br><span class="line"></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    em.persist(c);</span><br><span class="line">    em.persist(l);</span><br><span class="line">    tx.commit();</span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-2-更新"><a href="#3-1-2-2-更新" class="headerlink" title="3.1.2.2    更新"></a>3.1.2.2    更新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新操作</span></span><br><span class="line"><span class="comment"> * 创建一个联系人</span></span><br><span class="line"><span class="comment"> * 查询id为5的客户</span></span><br><span class="line"><span class="comment"> * 为5这个客服分配该联系人</span></span><br><span class="line"><span class="comment"> * 更新客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkMan l = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    l.setLkmName(<span class="string">"JPA One To Many LinkMan 2"</span>);</span><br><span class="line"></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    Customer c = em.find(Customer<span class="class">.<span class="keyword">class</span>, 5<span class="title">L</span>)</span>;</span><br><span class="line"></span><br><span class="line">    c.getLinkmans().add(l);</span><br><span class="line">    l.setCustomer(c);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-3-删除"><a href="#3-1-2-3-删除" class="headerlink" title="3.1.2.3    删除"></a>3.1.2.3    删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line"></span><br><span class="line">    Customer c = em.find(Customer<span class="class">.<span class="keyword">class</span>, 5<span class="title">L</span>)</span>;</span><br><span class="line">    em.remove(c);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-4-查询"><a href="#3-1-2-4-查询" class="headerlink" title="3.1.2.4    查询"></a>3.1.2.4    查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据客户查询客户下的联系人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//1.查询id为1的客户</span></span><br><span class="line">    Customer c = em.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">l</span>)</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    <span class="comment">//查询当前客户下的联系人</span></span><br><span class="line">    Set&lt;LinkMan&gt; linkmans = c.getLinkmans();</span><br><span class="line">    System.out.println(linkmans);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据联系人，查询联系人的所属客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//1.查询id为1的客户</span></span><br><span class="line">    LinkMan l = em.find(LinkMan<span class="class">.<span class="keyword">class</span>, 1<span class="title">l</span>)</span>;</span><br><span class="line">    System.out.println(l);</span><br><span class="line">    <span class="comment">//查询当前客户下的联系人</span></span><br><span class="line">    Customer c = l.getCustomer();</span><br><span class="line">    System.out.println(c);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-多对多关系配置及操作"><a href="#3-2-多对多关系配置及操作" class="headerlink" title="3.2    多对多关系配置及操作"></a>3.2    多对多关系配置及操作</h2><h3 id="3-2-1-配置"><a href="#3-2-1-配置" class="headerlink" title="3.2.1    配置"></a>3.2.1    配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_id"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"uuid"</span>, strategy = <span class="string">"uuid"</span>)<span class="comment">//声明一个主键生成器 name属性：给生成器起个名字。strategy：指定的就是hibernate中包含的生成策略</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"uuid"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_memo"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleMemo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射：一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="comment">//加入一张表</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name=<span class="string">"user_role_ref"</span>,</span><br><span class="line">            joinColumns = &#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"role_id"</span>,referencedColumnName=<span class="string">"role_id"</span>)&#125;,<span class="comment">//写的是当前实体在中间表的外键字段</span></span><br><span class="line">            inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"user_id"</span>,referencedColumnName=<span class="string">"user_id"</span>)&#125;<span class="comment">//写的是对方实体在中间表的外键字段</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Set&lt;SysUser&gt; users = <span class="keyword">new</span> HashSet&lt;SysUser&gt;(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_id"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"uuid"</span>, strategy = <span class="string">"uuid"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"uuid"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_state"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer userState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射：一个用户可以具备多个角色</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"users"</span>,cascade= CascadeType.ALL)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;SysRole&gt; roles = <span class="keyword">new</span> HashSet&lt;SysRole&gt;(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-操作"><a href="#3-2-2-操作" class="headerlink" title="3.2.2    操作"></a>3.2.2    操作</h3><h4 id="3-2-2-1-保存"><a href="#3-2-2-1-保存" class="headerlink" title="3.2.2.1    保存"></a>3.2.2.1    保存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> * 创建两个用户</span></span><br><span class="line"><span class="comment"> * 创建三个角色</span></span><br><span class="line"><span class="comment"> * 让1号用户具备1号和2号角色</span></span><br><span class="line"><span class="comment"> * 让2号用户具备2号和3号角色</span></span><br><span class="line"><span class="comment"> * 保存用户和角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SysUser u1 = <span class="keyword">new</span> SysUser();</span><br><span class="line">    SysUser u2 = <span class="keyword">new</span> SysUser();</span><br><span class="line">    u1.setUserName(<span class="string">"JPA Many to Many u1"</span>);</span><br><span class="line">    u2.setUserName(<span class="string">"JPA Many to Many u2"</span>);</span><br><span class="line"></span><br><span class="line">    SysRole r1 = <span class="keyword">new</span> SysRole();</span><br><span class="line">    SysRole r2 = <span class="keyword">new</span> SysRole();</span><br><span class="line">    SysRole r3 = <span class="keyword">new</span> SysRole();</span><br><span class="line"></span><br><span class="line">    r1.setRoleName(<span class="string">"JPA Many to Many r1"</span>);</span><br><span class="line">    r2.setRoleName(<span class="string">"JPA Many to Many r2"</span>);</span><br><span class="line">    r3.setRoleName(<span class="string">"JPA Many to Many r3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立用户和角色的关联关系</span></span><br><span class="line">    u1.getRoles().add(r1);</span><br><span class="line">    u1.getRoles().add(r2);</span><br><span class="line">    u2.getRoles().add(r2);</span><br><span class="line">    u2.getRoles().add(r3);</span><br><span class="line"></span><br><span class="line">    r1.getUsers().add(u1);</span><br><span class="line">    r2.getUsers().add(u1);</span><br><span class="line">    r2.getUsers().add(u2);</span><br><span class="line">    r3.getUsers().add(u2);</span><br><span class="line"></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//保存操作</span></span><br><span class="line">    em.persist(u1);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    em.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-删除"><a href="#3-2-2-2-删除" class="headerlink" title="3.2.2.2    删除"></a>3.2.2.2    删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> * 双向级联删除，不管是hibernate还是Jpa,多对多中都不能配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//查询用户</span></span><br><span class="line">    SysUser u1 = em.find(SysUser.class, "8a7e83cc5fbf19b6015fbf19bada0000");</span><br><span class="line">    em.remove(u1);</span><br><span class="line">    tx.commit();</span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-JPA的其他说明"><a href="#4-JPA的其他说明" class="headerlink" title="4.    JPA的其他说明"></a>4.    JPA的其他说明</h1><h2 id="4-1-JPA中使用C3P0连接池"><a href="#4-1-JPA中使用C3P0连接池" class="headerlink" title="4.1    JPA中使用C3P0连接池"></a>4.1    JPA中使用C3P0连接池</h2><h3 id="4-1-1-第一步：拷贝C3P0所必须的3个jar包"><a href="#4-1-1-第一步：拷贝C3P0所必须的3个jar包" class="headerlink" title="4.1.1    第一步：拷贝C3P0所必须的3个jar包"></a>4.1.1    第一步：拷贝C3P0所必须的3个jar包</h3><p><img src="https://ae01.alicdn.com/kf/H84d6fa1793fe4da5aeecd27ef68bd184X.jpg" alt="img"></p><h3 id="4-1-2-第二步：在persistence-xml配置文件中配置"><a href="#4-1-2-第二步：在persistence-xml配置文件中配置" class="headerlink" title="4.1.2    第二步：在persistence.xml配置文件中配置"></a>4.1.2    第二步：在persistence.xml配置文件中配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置使用C3P0数据源 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.provider_class&quot; value&#x3D;&quot;org.hibernate.connection.C3P0ConnectionProvider&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-验证是否配置成功"><a href="#4-1-3-验证是否配置成功" class="headerlink" title="4.1.3    验证是否配置成功"></a>4.1.3    验证是否配置成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证c3p0连接池是否配置成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取jpa中的操作对象</span></span><br><span class="line">    EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    Session session = em.unwrap(Session<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//3.执行session的doWork方法</span></span><br><span class="line">    session.doWork(<span class="keyword">new</span> Work() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Connection conn)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            System.out.println(conn.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取jpa中的操作对象</span></span><br><span class="line">    EntityManager em1 = JPAUtil.createEntityManager();</span><br><span class="line">    EntityManager em2 = JPAUtil.createEntityManager();</span><br><span class="line">    <span class="comment">//false</span></span><br><span class="line">    System.out.println(em1 == em2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-JPA与Hibernate中操作数据的方法对照"><a href="#4-2-JPA与Hibernate中操作数据的方法对照" class="headerlink" title="4.2    JPA与Hibernate中操作数据的方法对照"></a>4.2    JPA与Hibernate中操作数据的方法对照</h2><p><img src="https://ae01.alicdn.com/kf/Hb50fa2026d944097bc527e4b08d55e17o.jpg" alt="image-20200603214305905"></p><h1 id="5-Hibernate中使用JPA注解映射配置"><a href="#5-Hibernate中使用JPA注解映射配置" class="headerlink" title="5.    Hibernate中使用JPA注解映射配置"></a>5.    Hibernate中使用JPA注解映射配置</h1><h2 id="5-1-编写主配置文件-hibernate-cfg-xml"><a href="#5-1-编写主配置文件-hibernate-cfg-xml" class="headerlink" title="5.1    编写主配置文件(hibernate.cfg.xml)"></a>5.1    编写主配置文件(hibernate.cfg.xml)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在类的根路径下创建名称为hibernate.cfg.xml的配置文件导入约束：dtd约束 --&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Configuration DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">    &lt;!-- 配置SessionFactory</span><br><span class="line">            SessionFactory的作用就是用于创建Session对象的。</span><br><span class="line">            Session对象就是hibernate中操作数据库的核心对象。</span><br><span class="line">        此处的配置不要求背，但是要求记住创建SessionFactory必须的三部分信息</span><br><span class="line">            第一部分：</span><br><span class="line">                连接数据库的信息</span><br><span class="line">            第二部分：</span><br><span class="line">                hibernate的可选配置</span><br><span class="line">            第三部分：</span><br><span class="line">                映射文件的位置</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;session-factory&gt;</span><br><span class="line">        &lt;!-- 第一部分：连接数据库的信息 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.url&quot;&gt;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;hibernate01&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.username&quot;&gt;root&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.password&quot;&gt;root&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 数据库的方言 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 第二部分：hibernate的可选配置 --&gt;</span><br><span class="line">        &lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.show_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.format_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 设置hibernate的连接池提供商 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.connection.provider_class&quot;&gt;org.hibernate.c3p0.internal.C3P0ConnectionProvider</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 第三部分：映射配置文件的位置 --&gt;</span><br><span class="line">        &lt;mapping class&#x3D;&quot;com.wgy.domain.Customer&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;session-factory&gt;</span><br><span class="line">&lt;&#x2F;hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="5-2-编写实体类并使用JPA注解配置"><a href="#5-2-编写实体类并使用JPA注解配置" class="headerlink" title="5.2    编写实体类并使用JPA注解配置"></a>5.2    编写实体类并使用JPA注解配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-操作"><a href="#5-2-操作" class="headerlink" title="5.2    操作"></a>5.2    操作</h2><h3 id="5-2-1-保存"><a href="#5-2-1-保存" class="headerlink" title="5.2.1    保存"></a>5.2.1    保存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    c.setCustName(<span class="string">"hibernate jpa customer"</span>);</span><br><span class="line"></span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    s.save(c);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-查询"><a href="#5-2-2-查询" class="headerlink" title="5.2.2    查询"></a>5.2.2    查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    Customer c = s.get(Customer<span class="class">.<span class="keyword">class</span>, 6<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-3-修改"><a href="#5-2-3-修改" class="headerlink" title="5.2.3    修改"></a>5.2.3    修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    Customer c = s.get(Customer<span class="class">.<span class="keyword">class</span>, 6<span class="title">L</span>)</span>;</span><br><span class="line">    c.setCustAddress(<span class="string">"顺义区"</span>);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-4-删除"><a href="#5-2-4-删除" class="headerlink" title="5.2.4    删除"></a>5.2.4    删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    Customer c = s.get(Customer<span class="class">.<span class="keyword">class</span>, 6<span class="title">L</span>)</span>;</span><br><span class="line">    s.delete(c);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-JPA相关概念&quot;&gt;&lt;a href=&quot;#1-JPA相关概念&quot; class=&quot;headerlink&quot; title=&quot;1.    JPA相关概念&quot;&gt;&lt;/a&gt;1.    JPA相关概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-JPA概述&quot;&gt;&lt;a href=&quot;#1-1-JPA概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    JPA概述&quot;&gt;&lt;/a&gt;1.1    JPA概述&lt;/h2&gt;&lt;p&gt;全称是：Java Persistence API。是SUN公司推出的一套基于ORM的规范。Hibernate框架中提供了JPA的实现。&lt;/p&gt;
&lt;p&gt;JPA通过JDK 5.0注解或XML描述对象—关系表的映射关系，并将运行期的实体&lt;a href=&quot;http://baike.baidu.com/item/对象持久化&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;对象持久化&lt;/a&gt;到数据库中。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hibernate" scheme="https://wgy1993.gitee.io/tags/Hibernate/"/>
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate(三)</title>
    <link href="https://wgy1993.gitee.io/archives/3e87eb50.html"/>
    <id>https://wgy1993.gitee.io/archives/3e87eb50.html</id>
    <published>2020-05-31T08:27:38.000Z</published>
    <updated>2020-06-01T05:39:23.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-多表设计"><a href="#1-多表设计" class="headerlink" title="1.    多表设计"></a>1.    多表设计</h1><h2 id="1-1-表之间的关系划分"><a href="#1-1-表之间的关系划分" class="headerlink" title="1.1    表之间的关系划分"></a>1.1    表之间的关系划分</h2><ul><li>一对一</li><li>一对多（多对一）</li><li>多对多</li></ul><h1 id="2-如何确立和实现数据库中的表关系"><a href="#2-如何确立和实现数据库中的表关系" class="headerlink" title="2.    如何确立和实现数据库中的表关系"></a>2.    如何确立和实现数据库中的表关系</h1><h2 id="2-1-一对多的表关系在数据库中如何实现"><a href="#2-1-一对多的表关系在数据库中如何实现" class="headerlink" title="2.1    一对多的表关系在数据库中如何实现?"></a>2.1    一对多的表关系在数据库中如何实现?</h2><p>使用外键约束。我们一般习惯把一的方称为主表，把多的一方称为从表。</p><a id="more"></a><p><strong>什么是外键：</strong></p><p>从表中有一列，该列的取值除了null之外，只能来源于主表的主键。默认情况下，外键字段的值是可以重复的。</p><h2 id="2-2-多对多的表关系在数据库中如何实现？"><a href="#2-2-多对多的表关系在数据库中如何实现？" class="headerlink" title="2.2    多对多的表关系在数据库中如何实现？"></a>2.2    多对多的表关系在数据库中如何实现？</h2><p>使用中间表。中间表中只有两个外键，引用两个多对多表的主键。不能有其他字段信息，至于中间表的主键，应该采用联合主键。</p><p>任何一个多方的表和中间表去比较，都是一对多的关系。</p><h2 id="2-3-一对一的表关系在数据库中如何实现？"><a href="#2-3-一对一的表关系在数据库中如何实现？" class="headerlink" title="2.3    一对一的表关系在数据库中如何实现？"></a>2.3    一对一的表关系在数据库中如何实现？</h2><p>有两种：</p><ul><li><p>第一种：建立外键的方式：</p><p>使用外键约束，唯一约束，非空约束。它是把外键字段加了非空和唯一约束。从而实现了一对一。</p></li><li><p>第二种：使用主键的方式：</p><p>让其中一张表既是主键，又是外键。</p></li></ul><h2 id="2-4-如何确立两张表之间的关系："><a href="#2-4-如何确立两张表之间的关系：" class="headerlink" title="2.4    如何确立两张表之间的关系："></a>2.4    如何确立两张表之间的关系：</h2><p>找外键。</p><h1 id="3-学习多表映射配置要遵循的步骤"><a href="#3-学习多表映射配置要遵循的步骤" class="headerlink" title="3.    学习多表映射配置要遵循的步骤"></a>3.    学习多表映射配置要遵循的步骤</h1><ul><li>第一步：确定两张表之间的关系</li><li>第二步：在数据库中实现两张表之间的关系建立</li><li>第三步：在实体类中描述出两个实体之间的关系</li><li>第四步：在映射配置文件中建立两个实体和两张表之间的关系</li></ul><h1 id="4-一对多关系映射配置"><a href="#4-一对多关系映射配置" class="headerlink" title="4.    一对多关系映射配置"></a>4.    一对多关系映射配置</h1><p>示例：客户和联系人两张表</p><h2 id="4-1-确定两张表之间的关系"><a href="#4-1-确定两张表之间的关系" class="headerlink" title="4.1    确定两张表之间的关系"></a>4.1    确定两张表之间的关系</h2><p>一个客户可以包含多个联系人，多个联系人可以属于同一个客户。所以：客户和联系人之间的关系是一对多。</p><h2 id="4-2-在数据库中实现两张表之间的关系建立"><a href="#4-2-在数据库中实现两张表之间的关系建立" class="headerlink" title="4.2    在数据库中实现两张表之间的关系建立"></a>4.2    在数据库中实现两张表之间的关系建立</h2><p>实现一对多的关系，靠外键。客户表是主表，联系人表是从表。我们需要在联系人表中添加外键。</p><p><img src="https://ae01.alicdn.com/kf/H64f49425b6ea4334b45df98958537583N.jpg" alt="img"></p><h2 id="4-3-在实体类中描述出两个实体之间的关系"><a href="#4-3-在实体类中描述出两个实体之间的关系" class="headerlink" title="4.3    在实体类中描述出两个实体之间的关系"></a>4.3    在实体类中描述出两个实体之间的关系</h2><p>主表的实体类应该包含从表实体类的集合引用，从表的实体类应该包含主表实体类的对象引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对多关系映射：一的一方</span></span><br><span class="line"><span class="comment">     * 主表实体应该包含从表实体的集合引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;LinkMan&gt; linkmans = <span class="keyword">new</span> HashSet&lt;LinkMan&gt;(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long lkmId;</span><br><span class="line">    <span class="keyword">private</span> String lkmName;</span><br><span class="line">    <span class="keyword">private</span> String lkmGender;</span><br><span class="line">    <span class="keyword">private</span> String lkmPhone;</span><br><span class="line">    <span class="keyword">private</span> String lkmMobile;</span><br><span class="line">    <span class="keyword">private</span> String lkmEmail;</span><br><span class="line">    <span class="keyword">private</span> String lkmPosition;</span><br><span class="line">    <span class="keyword">private</span> String lkmMemo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对多关系映射，多的一方。</span></span><br><span class="line"><span class="comment">     * 从表实体包含主表实体的对象引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-在映射配置文件中建立两个实体和两张表之间的关系"><a href="#4-4-在映射配置文件中建立两个实体和两张表之间的关系" class="headerlink" title="4.4    在映射配置文件中建立两个实体和两张表之间的关系"></a>4.4    在映射配置文件中建立两个实体和两张表之间的关系</h2><p>客户配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在实体类所在的包下，创建一个xml文件。该文件建议名称为：实体类名称+.hbm+.xml导入约束：dtd约束 --&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package&#x3D;&quot;com.wgy.domain&quot;&gt;</span><br><span class="line">    &lt;class name&#x3D;&quot;Customer&quot; table&#x3D;&quot;cst_customer&quot; lazy&#x3D;&quot;true&quot;&gt;</span><br><span class="line">        &lt;id name&#x3D;&quot;custId&quot; column&#x3D;&quot;cust_id&quot;&gt;</span><br><span class="line">            &lt;generator class&#x3D;&quot;identity&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;id&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;custName&quot; column&#x3D;&quot;cust_name&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;custSource&quot; column&#x3D;&quot;cust_source&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;custIndustry&quot; column&#x3D;&quot;cust_industry&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;custLevel&quot; column&#x3D;&quot;cust_level&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;custAddress&quot; column&#x3D;&quot;cust_address&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;custPhone&quot; column&#x3D;&quot;cust_phone&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 一对多关系映射：主表实体的映射配置</span><br><span class="line">            涉及的标签：</span><br><span class="line">                set：</span><br><span class="line">                    作用：用于配置set集合属性。</span><br><span class="line">                    属性：</span><br><span class="line">                      name：指定实体类中set集合的属性名称。</span><br><span class="line">                      table：指定从表的名称。在一对多配置时可以不写。</span><br><span class="line">                key:</span><br><span class="line">                    作用：用于映射外键字段。</span><br><span class="line">                    属性：</span><br><span class="line">                      column：指定外键字段名称</span><br><span class="line">                one-to-many:</span><br><span class="line">                    作用：用于建立一对多的映射配置</span><br><span class="line">                    属性：</span><br><span class="line">                      class：用于指定从表实体的名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;set name&#x3D;&quot;linkmans&quot; table&#x3D;&quot;cst_linkman&quot;&gt;</span><br><span class="line">            &lt;key column&#x3D;&quot;lkm_cust_id&quot;&#x2F;&gt;</span><br><span class="line">            &lt;one-to-many class&#x3D;&quot;LinkMan&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">    &lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><p>联系人配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package&#x3D;&quot;com.wgy.domain&quot;&gt;</span><br><span class="line">    &lt;class name&#x3D;&quot;LinkMan&quot; table&#x3D;&quot;cst_linkman&quot;&gt;</span><br><span class="line">        &lt;id name&#x3D;&quot;lkmId&quot; column&#x3D;&quot;lkm_id&quot;&gt;</span><br><span class="line">            &lt;generator class&#x3D;&quot;identity&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;id&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;lkmName&quot; column&#x3D;&quot;lkm_name&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;lkmGender&quot; column&#x3D;&quot;lkm_gender&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;lkmPhone&quot; column&#x3D;&quot;lkm_phone&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;lkmMobile&quot; column&#x3D;&quot;lkm_mobile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;lkmEmail&quot; column&#x3D;&quot;lkm_email&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;lkmPosition&quot; column&#x3D;&quot;lkm_position&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;lkmMemo&quot; column&#x3D;&quot;lkm_memo&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 一对多关系映射：从表实体的映射配置</span><br><span class="line">                涉及的标签：</span><br><span class="line">                    many-to-one：</span><br><span class="line">                        作用：建立多对一的映射配置</span><br><span class="line">                        属性：</span><br><span class="line">                          name：从表实体中引用主表实体对象引用的名称</span><br><span class="line">                          class：指定属性所对应的实体类名称</span><br><span class="line">                          column：指定从表中外键字段的名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;many-to-one name&#x3D;&quot;customer&quot; class&#x3D;&quot;Customer&quot; column&#x3D;&quot;lkm_cust_id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h1 id="5-多对多关系映射配置"><a href="#5-多对多关系映射配置" class="headerlink" title="5.    多对多关系映射配置"></a>5.    多对多关系映射配置</h1><p>示例：用户和角色</p><h2 id="5-1-确定两张表之间的关系"><a href="#5-1-确定两张表之间的关系" class="headerlink" title="5.1    确定两张表之间的关系"></a>5.1    确定两张表之间的关系</h2><p>一个用户可以有多个角色，一个角色可以赋给多个用户，所以用户和角色之间是多对多。</p><h2 id="5-2-在数据库中实现两张表之间的关系建立"><a href="#5-2-在数据库中实现两张表之间的关系建立" class="headerlink" title="5.2    在数据库中实现两张表之间的关系建立"></a>5.2    在数据库中实现两张表之间的关系建立</h2><p>在数据库中实现多对多要靠中间表。中间表中只能出现用户和角色主键。</p><p><img src="https://ae01.alicdn.com/kf/H9827530ea7634df58ad9ee7616cfe92dq.jpg" alt="img"></p><h2 id="5-3-在实体类中描述出两个实体之间的关系"><a href="#5-3-在实体类中描述出两个实体之间的关系" class="headerlink" title="5.3    在实体类中描述出两个实体之间的关系"></a>5.3    在实体类中描述出两个实体之间的关系</h2><p>各自包含对方一个集合引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userPassword;</span><br><span class="line">    <span class="keyword">private</span> Integer userState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射：一个用户可以具备多个角色</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;SysRole&gt; roles = <span class="keyword">new</span> HashSet&lt;SysRole&gt;(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleMemo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射：一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;SysUser&gt; users = <span class="keyword">new</span> HashSet&lt;SysUser&gt;(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-在映射配置文件中建立两个实体和两张表之间的关系"><a href="#5-4-在映射配置文件中建立两个实体和两张表之间的关系" class="headerlink" title="5.4    在映射配置文件中建立两个实体和两张表之间的关系"></a>5.4    在映射配置文件中建立两个实体和两张表之间的关系</h2><p>用户配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package&#x3D;&quot;com.wgy.domain&quot;&gt;</span><br><span class="line">    &lt;class name&#x3D;&quot;SysUser&quot; table&#x3D;&quot;sys_user&quot;&gt;</span><br><span class="line">        &lt;id name&#x3D;&quot;userId&quot; column&#x3D;&quot;user_id&quot;&gt;</span><br><span class="line">            &lt;generator class&#x3D;&quot;identity&quot;&gt;&lt;&#x2F;generator&gt;</span><br><span class="line">        &lt;&#x2F;id&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;userName&quot; column&#x3D;&quot;user_name&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;userPassword&quot; column&#x3D;&quot;user_password&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;userState&quot; column&#x3D;&quot;user_state&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 多对多关系映射</span><br><span class="line">                涉及的标签：</span><br><span class="line">                    set:</span><br><span class="line">                        作用：用于映射set集合属性</span><br><span class="line">                        属性：</span><br><span class="line">                            name：指定集合的名称</span><br><span class="line">                            table：指定的是中间表的名称</span><br><span class="line">                    key:</span><br><span class="line">                        作用：用于映射外键字段</span><br><span class="line">                        属性：</span><br><span class="line">                            column：指定的是当前实体在中间表的外键字段名称</span><br><span class="line">                    many-to-many</span><br><span class="line">                        作用：用于映射多对多的关系</span><br><span class="line">                        属性：</span><br><span class="line">                            class：对方的实体类名称</span><br><span class="line">                            column：对方在中间表的外键字段名称</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name&#x3D;&quot;roles&quot; table&#x3D;&quot;user_role_ref&quot;&gt;</span><br><span class="line">            &lt;key column&#x3D;&quot;user_id&quot;&gt;&lt;&#x2F;key&gt;</span><br><span class="line">            &lt;many-to-many class&#x3D;&quot;SysRole&quot; column&#x3D;&quot;role_id&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">    &lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><p>角色配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package&#x3D;&quot;com.wgy.domain&quot;&gt;</span><br><span class="line">    &lt;class name&#x3D;&quot;SysRole&quot; table&#x3D;&quot;sys_role&quot;&gt;</span><br><span class="line">        &lt;id name&#x3D;&quot;roleId&quot; column&#x3D;&quot;role_id&quot;&gt;</span><br><span class="line">            &lt;generator class&#x3D;&quot;identity&quot;&gt;&lt;&#x2F;generator&gt;</span><br><span class="line">        &lt;&#x2F;id&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;roleName&quot; column&#x3D;&quot;role_name&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;roleMemo&quot; column&#x3D;&quot;role_memo&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!-- 多对多关系映射 --&gt;</span><br><span class="line">        &lt;set name&#x3D;&quot;users&quot; table&#x3D;&quot;user_role_ref&quot; inverse&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;key column&#x3D;&quot;role_id&quot;&gt;&lt;&#x2F;key&gt;</span><br><span class="line">            &lt;many-to-many class&#x3D;&quot;SysUser&quot; column&#x3D;&quot;user_id&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">    &lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h1 id="6-多表增删改操作"><a href="#6-多表增删改操作" class="headerlink" title="6.    多表增删改操作"></a>6.    多表增删改操作</h1><h2 id="6-1-一对多关系的操作"><a href="#6-1-一对多关系的操作" class="headerlink" title="6.1    一对多关系的操作"></a>6.1    一对多关系的操作</h2><h3 id="6-1-1-保存操作"><a href="#6-1-1-保存操作" class="headerlink" title="6.1.1    保存操作"></a>6.1.1    保存操作</h3><h4 id="6-1-1-1-正常保存"><a href="#6-1-1-1-正常保存" class="headerlink" title="6.1.1.1    正常保存"></a>6.1.1.1    正常保存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> * 正常的保存：创建一个新的联系人，需要关联一个客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1.查询一个客户</span></span><br><span class="line">    Customer c1 = s.get(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">    LinkMan l = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    l.setLkmName(<span class="string">"一对多的联系人"</span>);</span><br><span class="line">    <span class="comment">//3.建立客户和联系人的关联关系（让联系人知道属于哪个客户即可）</span></span><br><span class="line">    l.setCustomer(c1);</span><br><span class="line">    <span class="comment">//4.保存联系人</span></span><br><span class="line">    s.save(l);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1-1-2-特殊情况"><a href="#6-1-1-2-特殊情况" class="headerlink" title="6.1.1.2    特殊情况"></a>6.1.1.2    特殊情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 特殊的情况：</span></span><br><span class="line"><span class="comment"> *  创建一个客户和一个联系人</span></span><br><span class="line"><span class="comment"> *  建立联系人和客户的双向关联关系</span></span><br><span class="line"><span class="comment"> *   使用符合原则的保存</span></span><br><span class="line"><span class="comment"> *   原则是：先保存主表实体，再保存从表实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  此时保存会有问题：</span></span><br><span class="line"><span class="comment"> *  我们保存两个实体，应该只有两条insert语句。</span></span><br><span class="line"><span class="comment"> *  而执行结果却是多了一条update的语句。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  解决办法：</span></span><br><span class="line"><span class="comment"> *  让客户在执行操作的时候，放弃维护关联关系的权利。</span></span><br><span class="line"><span class="comment"> *  配置的方式：</span></span><br><span class="line"><span class="comment"> *  在Customer的映射配置文件中的set标签上使用inverse属性。</span></span><br><span class="line"><span class="comment"> *  inverse含义：是否放弃维护关联关系的权利</span></span><br><span class="line"><span class="comment"> *  true：放弃</span></span><br><span class="line"><span class="comment"> *  false：不放弃（默认值）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个客户</span></span><br><span class="line">    <span class="comment">//瞬时态</span></span><br><span class="line">    Customer c1 = <span class="keyword">new</span> Customer();</span><br><span class="line">    c1.setCustName(<span class="string">"一对多的客户_4"</span>);</span><br><span class="line">    <span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">    <span class="comment">//瞬时态</span></span><br><span class="line">    LinkMan l = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    l.setLkmName(<span class="string">"一对多的联系人_4"</span>);</span><br><span class="line">    <span class="comment">//3.建立客户和联系人的关联关系(双向)</span></span><br><span class="line">    l.setCustomer(c1);</span><br><span class="line">    c1.getLinkmans().add(l);</span><br><span class="line"></span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.保存，要符合原则</span></span><br><span class="line">    <span class="comment">//持久态  有一级缓存和快照</span></span><br><span class="line">    s.save(c1);</span><br><span class="line">    <span class="comment">//持久态    有一级缓存和快照</span></span><br><span class="line">    s.save(l);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;set name&#x3D;&quot;linkmans&quot; table&#x3D;&quot;cst_linkman&quot; inverse&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;key column&#x3D;&quot;lkm_cust_id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;one-to-many class&#x3D;&quot;LinkMan&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure><h4 id="6-1-1-3-级联保存"><a href="#6-1-1-3-级联保存" class="headerlink" title="6.1.1.3    级联保存"></a>6.1.1.3    级联保存</h4><p>级联操作是指当主控方执行保存、更新或者删除操作时，其关联对象（被控方）也执行相同的操作。</p><p>保存客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存操作：</span></span><br><span class="line"><span class="comment"> *  级联保存</span></span><br><span class="line"><span class="comment"> *  使用级联保存，配置的方式，仍然是找到Customer的映射配置文件的Set标签，</span></span><br><span class="line"><span class="comment"> *  也可以配置在many-to-one上。</span></span><br><span class="line"><span class="comment"> *  在上面加入cascade属性</span></span><br><span class="line"><span class="comment"> *  cascade：配置级联操作</span></span><br><span class="line"><span class="comment"> *  级联保存更新的取值：save-update</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个客户</span></span><br><span class="line">    <span class="comment">//瞬时态</span></span><br><span class="line">    Customer c1 = <span class="keyword">new</span> Customer();</span><br><span class="line">    c1.setCustName(<span class="string">"一对多的客户_5"</span>);</span><br><span class="line">    <span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">    <span class="comment">//瞬时态</span></span><br><span class="line">    LinkMan l = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    l.setLkmName(<span class="string">"一对多的联系人_5"</span>);</span><br><span class="line">    <span class="comment">//3.建立客户和联系人的关联关系(双向)</span></span><br><span class="line">    l.setCustomer(c1);</span><br><span class="line">    c1.getLinkmans().add(l);</span><br><span class="line"></span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.保存，要符合原则</span></span><br><span class="line">    s.save(c1);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;set name&#x3D;&quot;linkmans&quot; table&#x3D;&quot;cst_linkman&quot; inverse&#x3D;&quot;true&quot; cascade&#x3D;&quot;save-update&quot;&gt;</span><br><span class="line">    &lt;key column&#x3D;&quot;lkm_cust_id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;one-to-many class&#x3D;&quot;LinkMan&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure><p>保存联系人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个客户</span></span><br><span class="line">    <span class="comment">//瞬时态</span></span><br><span class="line">    Customer c1 = <span class="keyword">new</span> Customer();</span><br><span class="line">    c1.setCustName(<span class="string">"一对多的客户_6"</span>);</span><br><span class="line">    <span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">    <span class="comment">//瞬时态</span></span><br><span class="line">    LinkMan l = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    l.setLkmName(<span class="string">"一对多的联系人_6"</span>);</span><br><span class="line">    <span class="comment">//3.建立客户和联系人的关联关系(双向)</span></span><br><span class="line">    l.setCustomer(c1);</span><br><span class="line">    c1.getLinkmans().add(l);</span><br><span class="line"></span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.保存，要符合原则</span></span><br><span class="line">    s.save(l);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;many-to-one name&#x3D;&quot;customer&quot; class&#x3D;&quot;Customer&quot; column&#x3D;&quot;lkm_cust_id&quot; cascade&#x3D;&quot;save-update&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-更新操作"><a href="#6-1-2-更新操作" class="headerlink" title="6.1.2    更新操作"></a>6.1.2    更新操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新操作</span></span><br><span class="line"><span class="comment"> *  需求：</span></span><br><span class="line"><span class="comment"> *      创建一个新的联系人，查询一个已有客户</span></span><br><span class="line"><span class="comment"> *      联系人新联系人和已有客户的双向关联关系</span></span><br><span class="line"><span class="comment"> *  更新客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1.查询一个客户</span></span><br><span class="line">    Customer c1 = s.get(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">    <span class="comment">//瞬时态</span></span><br><span class="line">    LinkMan l = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    l.setLkmName(<span class="string">"一对多的联系人"</span>);</span><br><span class="line">    <span class="comment">//3.建立客户和联系人的关联关系（双向）</span></span><br><span class="line">    l.setCustomer(c1);</span><br><span class="line">    c1.getLinkmans().add(l);</span><br><span class="line">    <span class="comment">//4.更新客户</span></span><br><span class="line">    s.update(c1);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-3-删除操作"><a href="#6-1-3-删除操作" class="headerlink" title="6.1.3    删除操作"></a>6.1.3    删除操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> *      删除从表数据就是单表</span></span><br><span class="line"><span class="comment"> *      删除主表数据：</span></span><br><span class="line"><span class="comment"> *     看有没有从表数据引用</span></span><br><span class="line"><span class="comment"> *     有引用：</span></span><br><span class="line"><span class="comment"> *         在删除是，hibernate会把从表中的外键字段置为null，然后再删除主表数据。</span></span><br><span class="line"><span class="comment"> * 如果外键字段有非空约束，则hibernate不能更新外键字段为null，会报错。</span></span><br><span class="line"><span class="comment"> * 如果仍然想删除，此时需要使用级联删除。同时必须配置inverse属性是true。</span></span><br><span class="line"><span class="comment"> *     没有引用： 就是单表，直接删</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1.查询一个客户</span></span><br><span class="line">    Customer c9 = s.get(Customer<span class="class">.<span class="keyword">class</span>, 5<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//2.删除id为5的客户</span></span><br><span class="line">    s.delete(c9);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;set name&#x3D;&quot;linkmans&quot; table&#x3D;&quot;cst_linkman&quot; inverse&#x3D;&quot;true&quot; cascade&#x3D;&quot;save-update,delete&quot;&gt;</span><br><span class="line">    &lt;key column&#x3D;&quot;lkm_cust_id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;one-to-many class&#x3D;&quot;LinkMan&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-多对多关系的操作"><a href="#6-2-多对多关系的操作" class="headerlink" title="6.2    多对多关系的操作"></a>6.2    多对多关系的操作</h2><h3 id="6-2-1-保存操作"><a href="#6-2-1-保存操作" class="headerlink" title="6.2.1    保存操作"></a>6.2.1    保存操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> *  需求：</span></span><br><span class="line"><span class="comment"> *      创建2个用户和3个角色</span></span><br><span class="line"><span class="comment"> *      让1号用户具备1号和2号角色</span></span><br><span class="line"><span class="comment"> *      让2号用户具备2号和3号角色</span></span><br><span class="line"><span class="comment"> *      保存用户和角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SysUser u1 = <span class="keyword">new</span> SysUser();</span><br><span class="line">    u1.setUserName(<span class="string">"用户1"</span>);</span><br><span class="line">    SysUser u2 = <span class="keyword">new</span> SysUser();</span><br><span class="line">    u2.setUserName(<span class="string">"用户2"</span>);</span><br><span class="line"></span><br><span class="line">    SysRole r1 = <span class="keyword">new</span> SysRole();</span><br><span class="line">    r1.setRoleName(<span class="string">"角色1"</span>);</span><br><span class="line">    SysRole r2 = <span class="keyword">new</span> SysRole();</span><br><span class="line">    r2.setRoleName(<span class="string">"角色2"</span>);</span><br><span class="line">    SysRole r3 = <span class="keyword">new</span> SysRole();</span><br><span class="line">    r3.setRoleName(<span class="string">"角色3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立双向关联关系</span></span><br><span class="line">    <span class="comment">//先建立用户的</span></span><br><span class="line">    u1.getRoles().add(r1);</span><br><span class="line">    u1.getRoles().add(r2);</span><br><span class="line">    u2.getRoles().add(r2);</span><br><span class="line">    u2.getRoles().add(r3);</span><br><span class="line">    <span class="comment">//再建立角色</span></span><br><span class="line">    r1.getUsers().add(u1);</span><br><span class="line">    r2.getUsers().add(u1);</span><br><span class="line">    r2.getUsers().add(u2);</span><br><span class="line">    r3.getUsers().add(u2);</span><br><span class="line"></span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    s.save(u1);</span><br><span class="line">    s.save(u2);</span><br><span class="line">    s.save(r1);</span><br><span class="line">    s.save(r2);</span><br><span class="line">    s.save(r3);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-2-删除操作"><a href="#6-2-2-删除操作" class="headerlink" title="6.2.2    删除操作"></a>6.2.2    删除操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> * 实际开发中：多对多的双向级联删除是禁止使用的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1查询id为3的用户</span></span><br><span class="line">    SysUser u3 = s.get(SysUser<span class="class">.<span class="keyword">class</span>, 3<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    s.delete(u3);</span><br><span class="line">    tx.commit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-Hibernate中的多表查询"><a href="#7-Hibernate中的多表查询" class="headerlink" title="7.    Hibernate中的多表查询"></a>7.    Hibernate中的多表查询</h1><h2 id="7-1-对象导航查询"><a href="#7-1-对象导航查询" class="headerlink" title="7.1    对象导航查询"></a>7.1    对象导航查询</h2><h3 id="7-1-1-概述"><a href="#7-1-1-概述" class="headerlink" title="7.1.1    概述"></a>7.1.1    概述</h3><p>对象图导航检索方式是根据已经加载的对象，导航到他的关联对象。它利用类与类之间的关系来检索对象。</p><p>例如：我们通过OID查询方式查出一个客户，可以调用Customer类中的getLinkMans()方法来获取该客户的所有联系人。</p><p> 对象导航查询的使用要求是：两个对象之间必须存在关联关系。</p><h3 id="7-1-2-对象导航检索示例"><a href="#7-1-2-对象导航检索示例" class="headerlink" title="7.1.2    对象导航检索示例"></a>7.1.2    对象导航检索示例</h3><p>查询联系人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询id为1的客户下所属联系人</span></span><br><span class="line"><span class="comment"> * 一对多时，根据一的一方查询多的一方时，需要使用延迟加载。（默认配置即可）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//查询id为1的客户</span></span><br><span class="line">    Customer c = s.get(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    Set&lt;LinkMan&gt; linkmans = c.getLinkmans();</span><br><span class="line">    System.out.println(linkmans);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询id为5的联系人属于哪个客户</span></span><br><span class="line"><span class="comment"> * 多对一时，根据多的一方查询一的一方时，不需要使用延迟加载，而是使用立即加载，需要配置一下</span></span><br><span class="line"><span class="comment"> * 需要找到联系人的映射配置文件：在many-to-one标签上使用lazy属性。</span></span><br><span class="line"><span class="comment"> *      取值有：</span></span><br><span class="line"><span class="comment"> *          false：使用立即加载。</span></span><br><span class="line"><span class="comment"> *          proxy：是看load方法是延迟加载还是立即加载</span></span><br><span class="line"><span class="comment"> *          no-proxy：不管</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    LinkMan l = s.get(LinkMan<span class="class">.<span class="keyword">class</span>, 5<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(l);</span><br><span class="line">    Customer c = l.getCustomer();</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;many-to-one name&#x3D;&quot;customer&quot; class&#x3D;&quot;Customer&quot; column&#x3D;&quot;lkm_cust_id&quot; cascade&#x3D;&quot;save-update&quot; lazy&#x3D;&quot;false&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>load方法加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于load方法改为立即加载的方式</span></span><br><span class="line"><span class="comment"> *      找到查询实体的映射配置文件，它的class标签上也有一个lazy属性。含义是：是否延迟加载</span></span><br><span class="line"><span class="comment"> *          true：延迟加载(默认值)</span></span><br><span class="line"><span class="comment"> *          false：立即加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    Customer c = s.load(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>class标签的lazy：它只能管load方法是否是延迟加载。</li><li>set标签的lazy：它管查询关联的集合对象是否是延迟加载。</li><li>many-to-one的lazy：它管查询关联的主表实体是否是立即加载。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-多表设计&quot;&gt;&lt;a href=&quot;#1-多表设计&quot; class=&quot;headerlink&quot; title=&quot;1.    多表设计&quot;&gt;&lt;/a&gt;1.    多表设计&lt;/h1&gt;&lt;h2 id=&quot;1-1-表之间的关系划分&quot;&gt;&lt;a href=&quot;#1-1-表之间的关系划分&quot; class=&quot;headerlink&quot; title=&quot;1.1    表之间的关系划分&quot;&gt;&lt;/a&gt;1.1    表之间的关系划分&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一对一&lt;/li&gt;
&lt;li&gt;一对多（多对一）&lt;/li&gt;
&lt;li&gt;多对多&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-如何确立和实现数据库中的表关系&quot;&gt;&lt;a href=&quot;#2-如何确立和实现数据库中的表关系&quot; class=&quot;headerlink&quot; title=&quot;2.    如何确立和实现数据库中的表关系&quot;&gt;&lt;/a&gt;2.    如何确立和实现数据库中的表关系&lt;/h1&gt;&lt;h2 id=&quot;2-1-一对多的表关系在数据库中如何实现&quot;&gt;&lt;a href=&quot;#2-1-一对多的表关系在数据库中如何实现&quot; class=&quot;headerlink&quot; title=&quot;2.1    一对多的表关系在数据库中如何实现?&quot;&gt;&lt;/a&gt;2.1    一对多的表关系在数据库中如何实现?&lt;/h2&gt;&lt;p&gt;使用外键约束。我们一般习惯把一的方称为主表，把多的一方称为从表。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hibernate" scheme="https://wgy1993.gitee.io/tags/Hibernate/"/>
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate(二)</title>
    <link href="https://wgy1993.gitee.io/archives/4074cb7b.html"/>
    <id>https://wgy1993.gitee.io/archives/4074cb7b.html</id>
    <published>2020-05-28T16:09:27.000Z</published>
    <updated>2020-06-03T15:01:27.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Hibernate的持久化类和对象标识符"><a href="#1-Hibernate的持久化类和对象标识符" class="headerlink" title="1.    Hibernate的持久化类和对象标识符"></a>1.    Hibernate的持久化类和对象标识符</h1><h2 id="1-1-持久化类的编写规范"><a href="#1-1-持久化类的编写规范" class="headerlink" title="1.1    持久化类的编写规范"></a>1.1    持久化类的编写规范</h2><h3 id="1-1-1-什么是持久化类"><a href="#1-1-1-什么是持久化类" class="headerlink" title="1.1.1    什么是持久化类"></a>1.1.1    什么是持久化类</h3><p>Hibernate是持久层的ORM映射框架，专注于数据的持久化工作。</p><ul><li>持久化就是将内存中的数据永久存储到关系型数据库中。</li><li>持久化类指的是一个Java类与数据库表建立了映射关系，那么这个类称为是持久化类。其实你可以简单的理解为持久化类就是一个Java类有了一个映射文件与数据库的表建立了关系。</li></ul><a id="more"></a><h3 id="1-1-2-持久化类的编写规范"><a href="#1-1-2-持久化类的编写规范" class="headerlink" title="1.1.2    持久化类的编写规范"></a>1.1.2    持久化类的编写规范</h3><p><strong>应该遵循JavaBean的编写规范:</strong></p><ul><li>Bean：在软件开发中是指的可重用的组件。</li><li>JavaBean：指的是用java语言编写的可重用组件。在我们的实际项目中：domain,service,dao都可以看成是JavaBean。</li></ul><p><strong>编写规范：</strong></p><ul><li>类都是public的</li><li>一般实现序列化接口</li><li>类成员（字段）都是私有的</li><li>私有类成员都有公有get/set方法</li><li>类都有默认无参构造函数</li></ul><p><strong>细节：</strong><br>        数据类型的选择问题：<br>        基本类型和包装类，选择哪个？由于包装类可以有null值。所以实际开发中都是用包装类。</p><h2 id="1-2-Hibernate中对象标识符（OID）"><a href="#1-2-Hibernate中对象标识符（OID）" class="headerlink" title="1.2    Hibernate中对象标识符（OID）"></a>1.2    Hibernate中对象标识符（OID）</h2><p>OID全称是Object Identifier，又叫做对象标识符。</p><p>它是hibernate用于区分两个对象是否是同一个对象的标识。</p><p>我们都知道，虚拟机内存区分两个对象看的是内存的地址是否一致。数据库区分两个对象，靠的是表的主键。Hibernate负责把内存中的对象持久化到数据库表中，靠的就是对象标识符来区分两个对象是否是同一个。实体类中映射主键的字段就是OID，如下图所示：</p><p><img src="https://ae01.alicdn.com/kf/Hdbe077ec86b3435789c33904d9afbaeeQ.jpg" alt="image-20200528202834139"></p><h2 id="1-3-Hibernate的主键生成策略"><a href="#1-3-Hibernate的主键生成策略" class="headerlink" title="1.3    Hibernate的主键生成策略"></a>1.3    Hibernate的主键生成策略</h2><p><img src="https://ae01.alicdn.com/kf/H953436512c2a464dab238f6f639b58f53.jpg" alt="image-20200528203024600"></p><h1 id="2-Hibernate的一级缓存和对象状态"><a href="#2-Hibernate的一级缓存和对象状态" class="headerlink" title="2.    Hibernate的一级缓存和对象状态"></a>2.    Hibernate的一级缓存和对象状态</h1><h2 id="2-1-Hibernate的一级缓存"><a href="#2-1-Hibernate的一级缓存" class="headerlink" title="2.1    Hibernate的一级缓存"></a>2.1    Hibernate的一级缓存</h2><p><strong>什么缓存？</strong></p><p>它就是内存中的临时数据。</p><p><strong>什么样的数据适用于缓存，什么样的数据不适用缓存？</strong></p><ul><li><p>适用缓存的数据：</p><p>经常查询的，并且不经常修改的。同时数据一旦出现问题，对最终结果影响不大的。</p></li><li><p>不适用缓存的数据：</p><p>不管是否经常查询，只要是经常修改的，都可以不用缓存。并且如果数据由于使用缓存，产生了异常数据，对最终结果影响很大，则不能使用。例如：股市的牌价，银行的汇率，商品的库存等等。</p></li></ul><h3 id="2-1-1-Hibernate中的一级缓存"><a href="#2-1-1-Hibernate中的一级缓存" class="headerlink" title="2.1.1    Hibernate中的一级缓存"></a>2.1.1    Hibernate中的一级缓存</h3><p>Hibernate的一级缓存就是指Session缓存，Session缓存是一块内存空间，用来存放相互管理的java对象，在使用Hibernate查询对象的时候，首先会使用对象属性的OID值在Hibernate的一级缓存中进行查找，如果找到匹配OID值的对象，就直接将该对象从一级缓存中取出使用，不会再查询数据库；如果没有找到相同OID值的对象，则会去数据库中查找相应数据。当从数据库中查询到所需数据时，该数据信息也会放置到一级缓存中。<strong>Hibernate的一级缓存的作用就是减少对数据库的访问次数</strong>。</p><p>在 Session 接口的实现中包含一系列的 Java 集合, 这些 Java 集合构成了 Session 缓存。只要 Session 实例没有结束生命周期，存放在它缓存中的对象也不会结束生命周期。固一级缓存也被称为是Session基本的缓存。</p><p>Hibernate的一级缓存有如下特点：</p><ul><li>当应用程序调用Session接口的save()、update()、saveOrUpdate时，如果Session缓存中没有相应的对象，Hibernate就会自动的把从数据库中查询到的相应对象信息加入到一级缓存中去。</li><li>当调用Session接口的load()、get()方法，以及Query接口的list()、iterator()方法时，会判断缓存中是否存在该对象，有则返回，不会查询数据库，如果缓存中没有要查询对象，再去数据库中查询对应对象，并添加到一级缓存中。</li><li>当调用Session的close()方法时，Session缓存会被清空。</li></ul><h3 id="2-1-2-测试一级缓存"><a href="#2-1-2-测试一级缓存" class="headerlink" title="2.1.2    测试一级缓存"></a>2.1.2    测试一级缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证明一级缓存确实存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1.根据id查询客户</span></span><br><span class="line">    <span class="comment">//先去数据库查询，并且把查询的结果存入了一级缓存之中</span></span><br><span class="line">    Customer c1 = s.get(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c1);</span><br><span class="line">    <span class="comment">//2.根据id再次查询客户</span></span><br><span class="line">    <span class="comment">//先去一级缓存中看看有没有，如果有的话，直接拿过来用，如果没有的话，再去查询。</span></span><br><span class="line">    Customer c2 = s.get(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c2);</span><br><span class="line">    <span class="comment">//true 一级缓存缓存的是对象的地址</span></span><br><span class="line">    System.out.println(c1 == c2);</span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//session关闭，一级缓存就消失了</span></span><br><span class="line">    s.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H5078bb74071a4da0a7b3aa93ac35c15dn.jpg" alt="image-20200528204420329"></p><h3 id="2-1-3-快照机制"><a href="#2-1-3-快照机制" class="headerlink" title="2.1.3    快照机制"></a>2.1.3    快照机制</h3><p>Hibernate 向一级缓存放入数据时，同时复制一份数据放入到Hibernate快照中，当使用commit()方法提交事务时，同时会清理Session的一级缓存，这时会使用OID判断一级缓存中的对象和快照中的对象是否一致，如果两个对象中的属性发生变化，则执行update语句，将缓存的内容同步到数据库，并更新快照；如果一致，则不执行update语句。Hibernate快照的作用就是确保一级缓存中的数据和数据库中的数据一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1.根据id查询客户</span></span><br><span class="line">    Customer c5 = s.get(Customer<span class="class">.<span class="keyword">class</span>, 2<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//输出客户的地址：北京市顺义区</span></span><br><span class="line">    System.out.println(c5.getCustAddress());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.修改客户的地址为  湖北省</span></span><br><span class="line">    c5.setCustAddress(<span class="string">"湖北省"</span>);</span><br><span class="line">    <span class="comment">//输出客户的地址：湖北省</span></span><br><span class="line">    System.out.println(c5.getCustAddress());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有写update语句</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//session关闭，一级缓存就消失了</span></span><br><span class="line">    s.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印c5的address，这个c5能不能用   答案是可以使用。</span></span><br><span class="line">    <span class="comment">//此时输出是什么  北京市顺义区 | 湖北省</span></span><br><span class="line">    System.out.println(c5.getCustAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H304b9e33b0fd404296da6d659b514d7d9.jpg" alt="image-20200528210754044"></p><h2 id="2-2-对象的状态"><a href="#2-2-对象的状态" class="headerlink" title="2.2    对象的状态"></a>2.2    对象的状态</h2><h3 id="2-2-1-对象的状态说明"><a href="#2-2-1-对象的状态说明" class="headerlink" title="2.2.1    对象的状态说明"></a>2.2.1    对象的状态说明</h3><p>Hibernate为了更好的来管理持久化类，特将持久化类分成了三种状态。在Hibernate中持久化的对象可以划分为四种状态，分别是瞬时态、持久态、脱管态和删除状态，一个持久化类的实例可能处于四种不同状态中的某一种，四种状态的详细介绍如下。</p><ul><li><p><strong>瞬时态（transient）</strong></p><p> 瞬时态也称为临时态或者自由态，瞬时态的实例是由new命令创建、开辟内存空间的对象，<strong>不存在持久化标识OID（相当于主键值），尚未与Hibernate Session关联</strong>，在数据库中也没有记录，失去引用后将被JVM回收。瞬时状态的对象在内存中是孤立存在的，与数据库中的数据无任何关联，仅是一个信息携带的载体。</p></li><li><p><strong>持久态（persistent）</strong></p><p> 持久态的对象<strong>存在持久化标识OID ，加入到了Session缓存中，并且相关联的Session没有关闭</strong>，在数据库中有对应的记录，每条记录只对应唯一的持久化对象，需要注意的是，持久态对象是在事务还未提交前变成持久态的。</p></li><li><p><strong>脱管态（detached）</strong></p><p> 脱管态也称离线态或者游离态，当某个持久化状态的实例与Session的关联被关闭时就变成了脱管态。<strong>脱管态对象存在持久化标识OID，并且仍然与数据库中的数据存在关联，只是失去了与当前Session的关联</strong>，脱管状态对象发生改变时Hibernate不能检测到。</p></li><li><p><strong>删除状态（了解）</strong></p></li></ul><p><img src="https://ae01.alicdn.com/kf/Hd74ac1d004ad47f6bba94e92c76d5f40B.jpg" alt="image-20200528211757358"></p><h3 id="2-2-2-学习对象状态我们要明确的"><a href="#2-2-2-学习对象状态我们要明确的" class="headerlink" title="2.2.2    学习对象状态我们要明确的"></a>2.2.2    学习对象状态我们要明确的</h3><ul><li><p>是为了更好的掌握hibernate中操作的方法。</p></li><li><p>区分状态只有两个标识：一是否有OID，二是否和Session建立的关系</p><ul><li><p>瞬时状态（临时状态）</p><p>标志：没有OID，和Session没有关系。</p></li><li><p>持久化状态</p><p>标志：有OID，和Session有关系。只有持久化状态的对象才会有一级缓存的概念。</p></li><li><p>脱管状态（游离状态）</p><p>标志：有OID，和Session没有关系。</p></li><li><p>删除状态（了解）：</p><p>标志：有OID，和Session有关系。同时已经调用了删除方法，即将从数据库中把记录删除。但是事务还没有提交，此时的对象状态是删除态。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//瞬时状态</span></span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    c.setCustName(<span class="string">"测试_saveOrUpdate"</span>);</span><br><span class="line">    Session s1 = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx1 = s1.beginTransaction();</span><br><span class="line">    s1.saveOrUpdate(c);</span><br><span class="line">    tx1.commit();</span><br><span class="line">    s1.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s1 = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx1 = s1.beginTransaction();</span><br><span class="line">    <span class="comment">//持久化状态</span></span><br><span class="line">    Customer c = s1.get(Customer<span class="class">.<span class="keyword">class</span>, 9<span class="title">L</span>)</span>;</span><br><span class="line">    tx1.commit();</span><br><span class="line">    s1.close();</span><br><span class="line"></span><br><span class="line">    c.setCustAddress(<span class="string">"顺义校区"</span>);</span><br><span class="line">    <span class="comment">//脱管状态</span></span><br><span class="line">    System.out.println(c);</span><br><span class="line"></span><br><span class="line">    Session session = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line">    <span class="comment">//持久化状态</span></span><br><span class="line">    session.saveOrUpdate(c);</span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Hibernate的事务控制"><a href="#3-Hibernate的事务控制" class="headerlink" title="3.    Hibernate的事务控制"></a>3.    Hibernate的事务控制</h1><h2 id="3-1-配置Session和线程绑定"><a href="#3-1-配置Session和线程绑定" class="headerlink" title="3.1    配置Session和线程绑定"></a>3.1    配置Session和线程绑定</h2><p>保证在Service中开启的事务时使用的Session对象和DAO中多个操作使用的是同一个Session对象。</p><ul><li><p>在hibernate.cfg.xml文件中配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></li><li><p>获取Session时使用的方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽取hibernate的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//了解：hibernate把可以预见的异常都转成了运行时异常</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            configuration.configure();</span><br><span class="line">            factory = configuration.buildSessionFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExceptionInInitializerError e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化SessionFactory失败,请检查配置文件"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前线程上获取Session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//只有配置了把session和线程绑定之后，才能使用此方法，否则返回值是null</span></span><br><span class="line">        <span class="keyword">return</span> factory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证session和线程绑定的配置</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s1 = HibernateUtil.getCurrentSession();</span><br><span class="line">    Session s2 = HibernateUtil.getCurrentSession();</span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1 == s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当我们把session和线程绑定之后，hibernate就会在提交或者回滚事务之后，自动帮我们关闭session</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//瞬时状态</span></span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    c.setCustName(<span class="string">"测试_getCurrentSession"</span>);</span><br><span class="line">    Session s1 = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx1 = s1.beginTransaction();</span><br><span class="line">    s1.saveOrUpdate(c);</span><br><span class="line">    tx1.commit();</span><br><span class="line">    <span class="comment">//s1.close();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-Hibernate中的查询方式"><a href="#4-Hibernate中的查询方式" class="headerlink" title="4.    Hibernate中的查询方式"></a>4.    Hibernate中的查询方式</h1><p>hibernate中一共有5种查询方式</p><ul><li><p>OID查询：</p><p> 根据id查询一个实体。涉及的方法：get和load</p></li><li><p>SQL查询：</p><p> 使用SQL语句查询数据库。涉及两种方式：</p><ul><li><p>第一种：SQLQuery（一般不怎么用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//使用session对象，获取一个查询对象Query</span></span><br><span class="line">    SQLQuery sqlquery = s.createSQLQuery(<span class="string">"select * from cst_customer"</span>);</span><br><span class="line">    <span class="comment">//使用sqlquery对象获取结果集</span></span><br><span class="line">    List&lt;Object[]&gt; list = sqlquery.list();</span><br><span class="line">    <span class="keyword">for</span> (Object[] os : list) &#123;</span><br><span class="line">    System.out.println(<span class="string">"------------数组中的内容-----------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : os) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">    s.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种：session的doWork方法，它可以拿到Connection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hibernate中如何使用原始JDBC API</span></span><br><span class="line"><span class="comment"> * JDBC的API：</span></span><br><span class="line"><span class="comment"> * Connection</span></span><br><span class="line"><span class="comment"> * Statement</span></span><br><span class="line"><span class="comment"> * PreparedStatement</span></span><br><span class="line"><span class="comment"> * ResultSet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取Session对象</span></span><br><span class="line">    Session s = HibernateUtil.openSession();</span><br><span class="line">    <span class="comment">//2.调用doWork方法</span></span><br><span class="line">    s.doWork(<span class="keyword">new</span> Work() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Connection conn)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            System.out.println(conn.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>HQL查询：</p><p> 使用HQL语句查询数据库</p></li><li><p>QBC查询：</p><p> 使用Criteria对象查询数据库</p></li><li><p>对象导航查询：</p><p> 对象图导航检索方式是根据已经加载的对象，导航到他的关联对象。它利用类与类之间的关系来检索对象。</p></li></ul><h1 id="5-Hibernate查询对象的API"><a href="#5-Hibernate查询对象的API" class="headerlink" title="5.    Hibernate查询对象的API"></a>5.    Hibernate查询对象的API</h1><h2 id="5-1-Query"><a href="#5-1-Query" class="headerlink" title="5.1    Query"></a>5.1    Query</h2><h3 id="5-1-1-概述"><a href="#5-1-1-概述" class="headerlink" title="5.1.1    概述"></a>5.1.1    概述</h3><p>Query代表面向对象的一个Hibernate查询操作。</p><p>在Hibernate中，通常使用session.createQuery()方法接受一个HQL语句，然后调用Query的list()或uniqueResult()方法执行查询。</p><p>所谓的<strong>HQL</strong>是Hibernate Query Language缩写，其语法很像SQL语法，但它是完全面向对象的。</p><p>在Hibernate中使用Query对象的步骤，具体所示：</p><ol><li>获得Hibernate的Session对象</li><li>编写HQL语句</li><li>调用session.createQuery 创建查询对象</li><li>如果HQL语句包含参数，则调用Query的setXxx设置参数</li><li>调用Query对象的方法执行查询</li></ol><p>HQL的说明：</p><p>​           把表的名称换成实体类名称。把表字段名称换成实体类属性名称。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SQL：select * from cst_customer where cust_name like ?</span><br><span class="line"></span><br><span class="line">HQL：select * from Customer where custName &#x3D; ?</span><br><span class="line"></span><br><span class="line">其中select * 可以省略，写为：from Customer where custName &#x3D; ?</span><br></pre></td></tr></table></figure><h3 id="5-1-2-常用查询"><a href="#5-1-2-常用查询" class="headerlink" title="5.1.2    常用查询"></a>5.1.2    常用查询</h3><h4 id="5-1-2-1-基本查询"><a href="#5-1-2-1-基本查询" class="headerlink" title="5.1.2.1    基本查询"></a>5.1.2.1    基本查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//1.获取Query对象</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line">    <span class="comment">//2.获取结果集</span></span><br><span class="line">    List list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">    System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">    transaction.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-2-条件查询"><a href="#5-1-2-2-条件查询" class="headerlink" title="5.1.2.2    条件查询"></a>5.1.2.2    条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//1.获取Query对象</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer where custLevel = ?  and  custName like ?"</span>);</span><br><span class="line">    <span class="comment">//给参数占位符赋值 </span></span><br><span class="line">    <span class="comment">//hibernate的参数占位符是从0开始的</span></span><br><span class="line">    query.setString(<span class="number">0</span>, <span class="string">"23"</span>);</span><br><span class="line">    query.setString(<span class="number">1</span>, <span class="string">"%集%"</span>);</span><br><span class="line">    <span class="comment">//2.获取结果集</span></span><br><span class="line">    List list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">        System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">    transaction.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> *  给参数占位符提供一个具体的名称</span></span><br><span class="line"><span class="comment"> *  参数占位符的写法：</span></span><br><span class="line"><span class="comment"> *  :名称</span></span><br><span class="line"><span class="comment"> *  赋值的时候不需要写冒号，直接写名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1.获取Query对象</span></span><br><span class="line">    Query query = s.createQuery(<span class="string">"from Customer where custName like :custName and custLevel = :custLevel"</span>);</span><br><span class="line">    <span class="comment">//2.给参数占位符赋值</span></span><br><span class="line">    <span class="comment">//query.setString("custName", "%集%");</span></span><br><span class="line">    <span class="comment">//query.setString("custLevel", "普通客户");</span></span><br><span class="line">    query.setParameter(<span class="string">"custLevel"</span>, <span class="string">"23"</span>);</span><br><span class="line">    query.setParameter(<span class="string">"custName"</span>, <span class="string">"%集%"</span>);</span><br><span class="line">    <span class="comment">//3.执行对象的方法，获取结果集</span></span><br><span class="line">    List list = query.list();</span><br><span class="line">    <span class="keyword">for</span>(Object o : list)&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-3-分页查询"><a href="#5-1-2-3-分页查询" class="headerlink" title="5.1.2.3    分页查询"></a>5.1.2.3    分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> *  mysql分页关键字</span></span><br><span class="line"><span class="comment"> *  limit</span></span><br><span class="line"><span class="comment"> *  Limit的两个参数含义</span></span><br><span class="line"><span class="comment"> *  第一个：查询的开始记录索引</span></span><br><span class="line"><span class="comment"> *  第二个：每次查询的条数</span></span><br><span class="line"><span class="comment"> * hibernate为我们提供了两个方法：</span></span><br><span class="line"><span class="comment"> * setFirstResult：设置查询的开始记录索引</span></span><br><span class="line"><span class="comment"> * setMaxResults：设置每次查询的条数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 不管是用什么数据库，涉及分页的都是这两个方法。</span></span><br><span class="line"><span class="comment"> * 因为SQL语句的生成已经是hibernate的事了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//1.获取Query对象</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line">    <span class="comment">//设置分页的方法</span></span><br><span class="line">    query.setFirstResult(<span class="number">2</span>);</span><br><span class="line">    query.setMaxResults(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//2.获取结果集</span></span><br><span class="line">    List list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">        System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">    transaction.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-4-排序查询"><a href="#5-1-2-4-排序查询" class="headerlink" title="5.1.2.4    排序查询"></a>5.1.2.4    排序查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//1.获取Query对象</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer order by custId desc"</span>);</span><br><span class="line">    <span class="comment">//2.获取结果集</span></span><br><span class="line">    List list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">        System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">    transaction.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-5-统计查询"><a href="#5-1-2-5-统计查询" class="headerlink" title="5.1.2.5    统计查询"></a>5.1.2.5    统计查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HQL使用聚合函数：</span></span><br><span class="line"><span class="comment"> *     统计查询</span></span><br><span class="line"><span class="comment"> * 聚合函数：</span></span><br><span class="line"><span class="comment"> *     count sum max min avg</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * sql语句使用聚合函数时，在不使用group by子句的情况下，返回的结果，永远只有一行一列的情况。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在SQL语句时：</span></span><br><span class="line"><span class="comment"> * select count(*) from table它是统计所有字段，效率没有只统计主键字段高</span></span><br><span class="line"><span class="comment"> * select count(主键) from table它和第一个的结果是一样的，但是效率更高</span></span><br><span class="line"><span class="comment"> * select count(非主键) from table只统计不为null的字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1.获取Query对象</span></span><br><span class="line">    Query query = s.createQuery(<span class="string">"select count(*) from Customer"</span>);</span><br><span class="line">    <span class="comment">//2.获取结果集</span></span><br><span class="line">    <span class="comment">//当返回的结果唯一时，可以使用此方法。如果返回的结果不唯一，使用了此方法会抛异常。</span></span><br><span class="line">    Long total = (Long)query.uniqueResult();</span><br><span class="line">    System.out.println(total);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-6-投影查询"><a href="#5-1-2-6-投影查询" class="headerlink" title="5.1.2.6    投影查询"></a>5.1.2.6    投影查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 投影查询</span></span><br><span class="line"><span class="comment"> * 当我们在查询实体时，只需要部分字段，而是全部。并且希望它的返回结果使用实体类来封装，而不是Object[]</span></span><br><span class="line"><span class="comment"> * 这个时候我们称之为创建实体类的投影</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 投影查询的用法：</span></span><br><span class="line"><span class="comment"> * 1.查询语句需要时使用new关键字</span></span><br><span class="line"><span class="comment"> * 2.在实体类中添加对应参数列表的构造函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//1.获取Query对象</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"select new com.wgy.domain.Customer(custId,custName) from Customer"</span>);</span><br><span class="line">    <span class="comment">//2.获取结果集</span></span><br><span class="line">    List list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">        System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">    transaction.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * //提供对应参数列表的构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> custId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> custName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Long custId, String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><h3 id="5-1-3-Query中的方法说明"><a href="#5-1-3-Query中的方法说明" class="headerlink" title="5.1.3    Query中的方法说明"></a>5.1.3    Query中的方法说明</h3><ul><li>list方法：该方法用于查询语句，返回的结果是一个list集合。</li><li>uniqueResult方法：该方法用于查询，返回的结果是一个Object对象。</li><li>setter方法：Query接口中提供了一系列的setter方法用于设置查询语句中的参数，针对不同的数据类型，需要用到不同的setter方法。</li><li>uniqueResult()方法：该方法用于返回唯一的结果，在确保只有一条记录的查询时可以使用该方法。</li><li>setFirstResult()方法：该方法可以设置获取第一个记录的位置，也就是它表示从第几条记录开始查询，默认从0开始计算。</li><li>setMaxResult()方法：该方法用于设置结果集的最大记录数，通常与setFirstResult()方法结合使用，用于限制结果集的范围，以实现分页功能。</li></ul><h2 id="5-2-Criteria"><a href="#5-2-Criteria" class="headerlink" title="5.2    Criteria"></a>5.2    Criteria</h2><h3 id="5-2-1-概述"><a href="#5-2-1-概述" class="headerlink" title="5.2.1    概述"></a>5.2.1    概述</h3><p>Criteria是一个完全面向对象，可扩展的条件查询API，通过它完全不需要考虑数据库底层如何实现，以及SQL语句如何编写，它是Hibernate框架的核心查询对象。</p><p>Criteria 查询，又称为<strong>QBC</strong>查询（Query By Criteria），它是Hibernate的另一种对象检索方式。</p><p>通常，使用Criteria对象查询数据的主要步骤，具体如下：</p><ol><li>获得Hibernate的Session对象</li><li>通过Session获得Criteria对象</li><li>使用Restrictions的静态方法创建Criterion条件对象。Restrictions类中提供了一系列用于设定查询条件的静态方法，这些静态方法都返回Criterion实例，每个Criterion实例代表一个查询条件</li><li>向Criteria对象中添加Criterion 查询条件。Criteria的add()方法用于加入查询条件</li><li>执行Criterita的 list() 或uniqueResult() 获得结果</li></ol><p><strong>细节：</strong></p><p> HQL能查的，QBC都能查，反之亦然。</p><h3 id="5-2-2-常用查询"><a href="#5-2-2-常用查询" class="headerlink" title="5.2.2    常用查询"></a>5.2.2    常用查询</h3><h4 id="5-2-2-1-基本查询"><a href="#5-2-2-1-基本查询" class="headerlink" title="5.2.2.1    基本查询"></a>5.2.2.1    基本查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1. 获取Criteria对象</span></span><br><span class="line">    <span class="comment">//它就相当于HQL的from Customer</span></span><br><span class="line">    Criteria c = s.createCriteria(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//2. 获取结果集</span></span><br><span class="line">    List list = c.list();</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-2-条件查询"><a href="#5-2-2-2-条件查询" class="headerlink" title="5.2.2.2    条件查询"></a>5.2.2.2    条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1. 获取Criteria对象</span></span><br><span class="line">    Criteria c = s.createCriteria(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//使用criteria对象的add方法来添加条件</span></span><br><span class="line">    c.add(Restrictions.eq(<span class="string">"custLevel"</span>, <span class="string">"23"</span>));</span><br><span class="line">    c.add(Restrictions.like(<span class="string">"custName"</span>, <span class="string">"%集%"</span>));</span><br><span class="line">    <span class="comment">//2. 获取结果集</span></span><br><span class="line">    List list = c.list();</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-3-分页查询"><a href="#5-2-2-3-分页查询" class="headerlink" title="5.2.2.3    分页查询"></a>5.2.2.3    分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * QBC的分页查询和HQL的分页查询所用的方法和方法的含义都是一模一样的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1. 获取Criteria对象</span></span><br><span class="line">    Criteria c = s.createCriteria(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//设置分页条件</span></span><br><span class="line">    c.setFirstResult(<span class="number">2</span>);</span><br><span class="line">    c.setMaxResults(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//2. 获取结果集</span></span><br><span class="line">    List list = c.list();</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-4-排序查询"><a href="#5-2-2-4-排序查询" class="headerlink" title="5.2.2.4    排序查询"></a>5.2.2.4    排序查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1. 获取Criteria对象</span></span><br><span class="line">    Criteria c = s.createCriteria(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//添加排序</span></span><br><span class="line">    c.addOrder(Order.desc(<span class="string">"custId"</span>));</span><br><span class="line">    <span class="comment">//2. 获取结果集</span></span><br><span class="line">    List list = c.list();</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-5-统计查询"><a href="#5-2-2-5-统计查询" class="headerlink" title="5.2.2.5    统计查询"></a>5.2.2.5    统计查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计（投影）查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    <span class="comment">//1. 获取Criteria对象</span></span><br><span class="line">    Criteria c = s.createCriteria(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//设置聚合函数</span></span><br><span class="line">    <span class="comment">//c.setProjection(Projections.rowCount());</span></span><br><span class="line">    c.setProjection(Projections.count(<span class="string">"custId"</span>));</span><br><span class="line">    <span class="comment">//2. 获取结果集</span></span><br><span class="line">    Long count = (Long)c.uniqueResult();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-6-离线查询"><a href="#5-2-2-6-离线查询" class="headerlink" title="5.2.2.6    离线查询"></a>5.2.2.6    离线查询</h4><p><img src="https://ae01.alicdn.com/kf/H1af882e68622493f8061cbaa353dc9b2u.jpg" alt="image-20200528223420445"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 离线查询</span></span><br><span class="line"><span class="comment"> * 离线：</span></span><br><span class="line"><span class="comment"> *     它是和在线对应的。</span></span><br><span class="line"><span class="comment"> *     Criteria对象是一个在线对象，它是由一个可用的（活动的）Session对象获取的出来的。</span></span><br><span class="line"><span class="comment"> *     当session失效时，就无法再获取该对象了。</span></span><br><span class="line"><span class="comment"> *  有一个对象，它也可以用于设置条件，但是获取的时候并不需要Session对象。该对象就叫做离线对象：</span></span><br><span class="line"><span class="comment"> *  DetachedCriteria对象</span></span><br><span class="line"><span class="comment"> *      使用该对象进行的查询就叫做：离线查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  如何获取该对象</span></span><br><span class="line"><span class="comment"> * DetachedCriteria dCriteria = DetachedCriteria.forClass(要查询的实体类字节码);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取离线对象，不需要Session</span></span><br><span class="line">    DetachedCriteria dc = DetachedCriteria.forClass(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//2.封装查询条件</span></span><br><span class="line">    dc.add(Restrictions.eq(<span class="string">"custLevel"</span>, <span class="string">"23"</span>));</span><br><span class="line">    dc.add(Restrictions.like(<span class="string">"custName"</span>,<span class="string">"%集%"</span>));</span><br><span class="line"></span><br><span class="line">    List list = testService(dc);</span><br><span class="line">    <span class="keyword">for</span>(Object o : list)&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List <span class="title">testService</span><span class="params">(DetachedCriteria dc)</span> </span>&#123;</span><br><span class="line">    Session s = <span class="keyword">null</span>;</span><br><span class="line">    Transaction tx  = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        s = HibernateUtil.getCurrentSession();</span><br><span class="line">        tx = s.beginTransaction();</span><br><span class="line">        List list = testDao(dc);</span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List <span class="title">testDao</span><span class="params">(DetachedCriteria dc)</span> </span>&#123;</span><br><span class="line">    Session s = HibernateUtil.getCurrentSession();</span><br><span class="line">    <span class="comment">//把离线对象转成在线对象</span></span><br><span class="line">    Criteria c = dc.getExecutableCriteria(s);</span><br><span class="line">    <span class="keyword">return</span>  c.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-3-QBC常用查询条件说明"><a href="#5-2-3-QBC常用查询条件说明" class="headerlink" title="5.2.3    QBC常用查询条件说明"></a>5.2.3    QBC常用查询条件说明</h3><table><thead><tr><th>短语</th><th>含义</th></tr></thead><tbody><tr><td>Restrictions.eq</td><td>等于=</td></tr><tr><td>Restrictions.allEq</td><td>使用Map,使用key/value进行多个等于的判断</td></tr><tr><td>Restrictions.gt</td><td>大于&gt;</td></tr><tr><td>Restrictions.ge</td><td>大于等于&gt;=</td></tr><tr><td>Restrictions.lt</td><td>小于&lt;</td></tr><tr><td>Restrictions.le</td><td>小于等于&lt;=</td></tr><tr><td>Restrictions.between</td><td>对应sql的between子句</td></tr><tr><td>Restrictions.like</td><td>对应sql的like子句</td></tr><tr><td>Restrictions.in</td><td>对应sql的in子句</td></tr><tr><td>Restrictions.and</td><td>and 关系</td></tr><tr><td>Restrictions.or</td><td>or关系</td></tr><tr><td>Restrictions.sqlRestriction</td><td>Sql限定查询</td></tr><tr><td>Restrictions.asc()</td><td>根据传入的字段进行升序排序</td></tr><tr><td>Restrictions.desc()</td><td>根据传入的字段进行降序排序</td></tr></tbody></table><table>    <tr>        <th>运算类型</th>        <th>HQL运算符</th>        <th>QBC运算方法</th>      </tr >    <tr >        <td rowspan="7">type</td>        <td>=</td>        <td>Restrictions.eq()</td>    </tr>    <tr>        <td><></td>        <td>Restrictions.not(Restrictions.eq())</td>    </tr>    <tr>        <td>>=</td>        <td>Restrictions.ge()</td>    </tr>    <tr>        <td><</td>        <td>Restrictions.lt()</td>    </tr>    <tr>        <td><=</td>        <td>Restrictions.le()</td>    </tr>    <tr>        <td>is null</td>        <td>Restrictions.isNull()</td>    </tr>    <tr>        <td>is not null</td>        <td>Restrictions.isNotNull()</td>    </tr>    <tr>        <td rowspan="4">范围运算符</td>        <td>in</td>        <td>Restrictions.in()</td>    </tr>    <tr>        <td >not in</td>        <td>Restrictions.not(Restrictions.in())</td>    </tr>    <tr>        <td>between</td>        <td>Restrictions.between()</td>    </tr>    <tr>        <td >not between</td>        <td >Restrictions.not(Restrictions.between())</td>    </tr></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Hibernate的持久化类和对象标识符&quot;&gt;&lt;a href=&quot;#1-Hibernate的持久化类和对象标识符&quot; class=&quot;headerlink&quot; title=&quot;1.    Hibernate的持久化类和对象标识符&quot;&gt;&lt;/a&gt;1.    Hibernate的持久化类和对象标识符&lt;/h1&gt;&lt;h2 id=&quot;1-1-持久化类的编写规范&quot;&gt;&lt;a href=&quot;#1-1-持久化类的编写规范&quot; class=&quot;headerlink&quot; title=&quot;1.1    持久化类的编写规范&quot;&gt;&lt;/a&gt;1.1    持久化类的编写规范&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是持久化类&quot;&gt;&lt;a href=&quot;#1-1-1-什么是持久化类&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是持久化类&quot;&gt;&lt;/a&gt;1.1.1    什么是持久化类&lt;/h3&gt;&lt;p&gt;Hibernate是持久层的ORM映射框架，专注于数据的持久化工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持久化就是将内存中的数据永久存储到关系型数据库中。&lt;/li&gt;
&lt;li&gt;持久化类指的是一个Java类与数据库表建立了映射关系，那么这个类称为是持久化类。其实你可以简单的理解为持久化类就是一个Java类有了一个映射文件与数据库的表建立了关系。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Hibernate" scheme="https://wgy1993.gitee.io/tags/Hibernate/"/>
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate(一)</title>
    <link href="https://wgy1993.gitee.io/archives/ef455019.html"/>
    <id>https://wgy1993.gitee.io/archives/ef455019.html</id>
    <published>2020-05-28T06:17:43.000Z</published>
    <updated>2020-06-03T15:03:13.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Hibernate和ORM的概念"><a href="#1-Hibernate和ORM的概念" class="headerlink" title="1.    Hibernate和ORM的概念"></a>1.    Hibernate和ORM的概念</h1><h2 id="1-1-Hibrenate概述"><a href="#1-1-Hibrenate概述" class="headerlink" title="1.1    Hibrenate概述"></a>1.1    Hibrenate概述</h2><p>它是一个轻量级，企业级，开源的ORM持久层框架。是可以操作数据库的框架。</p><ul><li>框架：它就是一个架构。</li><li>通常情况下，软件工程的持久层解决方案，一个为主一个为辅。两者并存（写SQL语句的和不写SQL语句的</li><li>轻量级：指的是使用时依赖的资源很少。（目前我们使用的阶段，只依赖log4j，c3p0连接池）</li><li>企业级：指的是在企业级应用中使用的比较多</li><li>开源的：开放源代码。</li><li>ORM的操作方式：建立对象关系映射，实现操作实体类就相当于操作数据库表。</li></ul><a id="more"></a><blockquote><p>Hibernate框架是当今主流的Java持久层框架之一，由于它具有简单易学、灵活性强、扩展性强等特点，能够大大地简化程序的代码量，提高工作效率，因此受到广大开发人员的喜爱。</p><p>Hibernate是一个开放源代码的ORM框架，它对JDBC进行了轻量级的对象封装，使得Java开发人员可以使用面向对象的编程思想来操作数据库。</p></blockquote><h2 id="1-2-ORM"><a href="#1-2-ORM" class="headerlink" title="1.2    ORM"></a>1.2    ORM</h2><p>Object Relational Mapping</p><ul><li>对象关系映射</li><li>就是建立实体类和数据库表的对应关系。</li><li>实现操作实体类对象就相当于操作数据库表</li></ul><blockquote><p>Object Relation Mapping 对象关系映射。</p><p>对象-关系映射（OBJECT/RELATIONALMAPPING，简称ORM），是随着面向对象的<a href="http://baike.baidu.com/view/1471861.htm" target="_blank" rel="noopener">软件开发方法</a>发展而产生的。用来把对象模型表示的对象映射到基于S Q L 的关系模型数据库结构中去。这样，我们在具体的操作实体对象的时候，就不需要再去和复杂的 SQ L 语句打交道，只需简单的操作实体对象的属性和方法[2] 。O R M 技术是在对象和关系之间提供了一条桥梁，前台的对象型数据和数据库中的关系型的数据通过这个桥梁来相互转化[1] 。</p><p><strong>简单的说就是把我们程序中的实体类和数据库表建立起来对应关系。</strong></p></blockquote><h2 id="1-3-为什么要学习Hibernate"><a href="#1-3-为什么要学习Hibernate" class="headerlink" title="1.3    为什么要学习Hibernate"></a>1.3    为什么要学习Hibernate</h2><p>与其它操作数据库的技术相比，Hibernate具有以下几点优势：</p><ul><li>Hibernate对JDBC访问数据库的代码做了轻量级封装，大大简化了数据访问层繁琐的重复性代码，并且减少了内存消耗，加快了运行效率。</li><li>Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现，它很大程度的简化了DAO（Data Access Object，数据访问对象）层编码工作。</li><li>Hibernate的性能非常好，映射的灵活性很出色。它支持很多关系型数据库，从一对一到多对多的各种复杂关系。</li><li>可扩展性强，由于源代码的开源以及API的开放，当本身功能不够用时，可以自行编码进行扩展。</li></ul><p><strong>明确：</strong></p><p>​    <strong>操作实体类就相当于操作数据库表</strong></p><blockquote><p>使用传统的JDBC开发应用系统时，如果是小型应用系统，并不觉得有什么麻烦，但是对于大型应用系统的开发，使用JDBC就会显得力不从心。例如对几十、几百张包含几十个字段的表进行插入操作时，编写的SQL语句不但很长，而且繁琐，容易出错；在读取数据时，需要写多条getXxx语句从结果集中取出各个字段的信息，不但枯燥重复，并且工作量非常大。为了提高数据访问层的编程效率，Gavin King开发出了一个当今最流行的的ORM框架，它就是Hibernate框架。</p><p>所谓的ORM就是利用描述对象和数据库表之间映射的元数据，自动把Java应用程序中的对象，持久化到关系型数据库的表中。通过操作Java对象，就可以完成对数据库表的操作。可以把ORM理解为关系型数据和对象的一个纽带，开发人员只需要关注纽带一端映射的对象即可。ORM原理如图所示。</p><p><img src="https://ae01.alicdn.com/kf/Hce6689de20a94fa09b8b22db035878ddF.jpg" alt="img"></p></blockquote><h1 id="2-CRM"><a href="#2-CRM" class="headerlink" title="2.    CRM"></a>2.    CRM</h1><p>CRM：客户关系管理系统</p><blockquote><p>CRM（Customer Relationship Management）客户关系管理，是利用相应的信息技术以及互联网技术来协调企业与顾客间在销售、营销和服务上的交互，向客户提供创新式的个性化的客户交互和服务的过程。</p><p>其最终目标是将面向客户的各项信息和活动集成起来，组建一个以客户为中心的企业，实现对面向客户的活动的全面管理。</p></blockquote><h1 id="3-Hibernate快速入门"><a href="#3-Hibernate快速入门" class="headerlink" title="3.    Hibernate快速入门"></a>3.    Hibernate快速入门</h1><h2 id="3-1-需求介绍"><a href="#3-1-需求介绍" class="headerlink" title="3.1    需求介绍"></a>3.1    需求介绍</h2><p>保存一个客户到数据库的客户表中。</p><h2 id="3-2-搭建Hibernate开发环境"><a href="#3-2-搭建Hibernate开发环境" class="headerlink" title="3.2    搭建Hibernate开发环境"></a>3.2    搭建Hibernate开发环境</h2><h3 id="3-2-1-第一步：拷贝必备的jar包到开发目录"><a href="#3-2-1-第一步：拷贝必备的jar包到开发目录" class="headerlink" title="3.2.1    第一步：拷贝必备的jar包到开发目录"></a>3.2.1    第一步：拷贝必备的jar包到开发目录</h3><p>数据库驱动包，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H42f3639350de4c93b6ea7af89ff4e03eg.jpg" alt="image-20200528110301508"></p><p>Hibernate/lib/required/*.jar，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H235e8a817a344ae88666f2481d83a670J.jpg" alt="image-20200528110244430"></p><p>日志记录的包，如下图:</p><p><img src="https://ae01.alicdn.com/kf/H3d632a5388b445b6a0ecacd24cdbfe2fD.jpg" alt="image-20200528110345308"></p><h3 id="3-2-2-第二步：创建数据库和实体类"><a href="#3-2-2-第二步：创建数据库和实体类" class="headerlink" title="3.2.2    第二步：创建数据库和实体类"></a>3.2.2    第二步：创建数据库和实体类</h3><p>持久化类是应用程序中的业务实体类，这里的持久化是指类的对象能够被持久化保存到数据库中。Hibernate使用普通Java对象（Plain Old Java Object），即POJO的编程模式来进行持久化。POJO类中包含的是与数据库表相对应的各个属性，这些属性通过getter和setter方法来访问，对外部隐藏了内部的实现细节。下面就来编写Customer持久化类。</p><p>在项目src目录下，创建cn.wgy.domain包，并在包中创建实体类Customer（对应数据库表cst_customer），Customer类包含与cst_customer数据表字段对应的属性，以及相应的getXxx ()和setXxx ()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*创建客户表*&#x2F;</span><br><span class="line">CREATE TABLE &#96;cst_customer&#96; (</span><br><span class="line">  &#96;cust_id&#96; bigint(32) NOT NULL AUTO_INCREMENT COMMENT &#39;客户编号(主键)&#39;,</span><br><span class="line">  &#96;cust_name&#96; varchar(32) NOT NULL COMMENT &#39;客户名称(公司名称)&#39;,</span><br><span class="line">  &#96;cust_source&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户信息来源&#39;,</span><br><span class="line">  &#96;cust_industry&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户所属行业&#39;,</span><br><span class="line">  &#96;cust_level&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户级别&#39;,</span><br><span class="line">  &#96;cust_address&#96; varchar(128) DEFAULT NULL COMMENT &#39;客户联系地址&#39;,</span><br><span class="line">  &#96;cust_phone&#96; varchar(64) DEFAULT NULL COMMENT &#39;客户联系电话&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;cust_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;94 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-第三步：编写映射配置文件（xml）"><a href="#3-2-3-第三步：编写映射配置文件（xml）" class="headerlink" title="3.2.3    第三步：编写映射配置文件（xml）"></a>3.2.3    第三步：编写映射配置文件（xml）</h3><p>实体类Customer目前还不具备持久化操作的能力，而Hibernate需要知道实体类Customer映射到数据库Hibernate中的哪个表，以及类中的哪个属性对应数据库表中的哪个字段，这些都需要在映射文件中配置。</p><p>在实体类Customer所在的包中，创建一个名称为Customer.hbm.xml的映射文件，在该文件中定义了实体类Customer的属性是如何映射到cst_customer表的列上的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 在实体类所在的包下，创建一个xml文件。该文件建议名称为：实体类名称+.hbm+.xml --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 导入约束:dtd约束</span><br><span class="line">        位置：在Hibernate的核心jar包中名称为hibernate-mapping-3.0.dtd</span><br><span class="line">        明确该文件中的内容：</span><br><span class="line">            实体类和表的对应关系</span><br><span class="line">            实体类中属性和表的字段的对应关系</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">    &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- package属性用于设定包的名称，接下来该配置文件中凡是用到此包中的对象时都可以省略包名 --&gt;</span><br><span class="line">&lt;hibernate-mapping package&#x3D;&quot;com.wgy.domain&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- class标签</span><br><span class="line">                作用：建立实体类和表的对应关系</span><br><span class="line">                属性：</span><br><span class="line">                    name：指定实体类的名称</span><br><span class="line">                    table：指定数据库表的名称</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;class name&#x3D;&quot;Customer&quot; table&#x3D;&quot;cst_customer&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- id标签</span><br><span class="line">                        作用：用于映射主键</span><br><span class="line">                        属性：</span><br><span class="line">                            name：指定的是属性名称。也就是get&#x2F;set方法后面的部分，并且首字母要转小写。</span><br><span class="line">                            column:指定的是数据库表的字段名称</span><br><span class="line">--&gt;</span><br><span class="line">&lt;id name&#x3D;&quot;custId&quot; column&#x3D;&quot;cust_id&quot;&gt;</span><br><span class="line">            </span><br><span class="line">                        &lt;!-- generator标签：</span><br><span class="line">                                作用：配置主键的生成策略。</span><br><span class="line">                                属性：</span><br><span class="line">                                    class:指定生成方式的取值。</span><br><span class="line">                                    取值之一：native。使用本地数据库的自动增长能力。</span><br><span class="line">                                    mysql数据库的自动增长能力是让某一列自动+1。但是不是所有数据库都支持这种方式。</span><br><span class="line">                        --&gt;</span><br><span class="line">&lt;generator class&#x3D;&quot;native&quot;&gt;&lt;&#x2F;generator&gt;</span><br><span class="line">&lt;&#x2F;id&gt;</span><br><span class="line">        </span><br><span class="line">&lt;!-- property标签：</span><br><span class="line">                        作用：映射其他字段</span><br><span class="line">                        属性：</span><br><span class="line">                            name：指定属性的名称。和id标签的name属性含义一致</span><br><span class="line">                            column：指定数据库表的字段名称</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;custName&quot; column&#x3D;&quot;cust_name&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;custLevel&quot; column&#x3D;&quot;cust_level&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;custSource&quot; column&#x3D;&quot;cust_source&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;custIndustry&quot; column&#x3D;&quot;cust_industry&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;custAddress&quot; column&#x3D;&quot;cust_address&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;custPhone&quot; column&#x3D;&quot;cust_phone&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-第四步：编写主配置文件（hibernate-cfg-xml）"><a href="#3-2-4-第四步：编写主配置文件（hibernate-cfg-xml）" class="headerlink" title="3.2.4    第四步：编写主配置文件（hibernate.cfg.xml）"></a>3.2.4    第四步：编写主配置文件（hibernate.cfg.xml）</h3><p>Hibernate的映射文件反映了持久化类和数据库表的映射信息，而Hibernate的配置文件则主要用来配置数据库连接以及Hibernate运行时所需要的各个属性的值。在项目的src下创建一个名称为hibernate.cfg.xml的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 在类的根路径下创建名称为hibernate.cfg.xml的配置文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 导入dtd约束：</span><br><span class="line">        位置：在核心jar包中的名称为hibernate-configuration-3.0.dtd中</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Configuration DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">&lt;!-- 配置SessionFactory</span><br><span class="line">                SessionFactory的作用就是用于创建Session对象的。</span><br><span class="line">                Session对象就是hibernate中操作数据库的核心对象。</span><br><span class="line">此处的配置不要求背，但是要求记住创建SessionFactory必须的三部分信息</span><br><span class="line">                    第一部分：</span><br><span class="line">                        连接数据库的信息</span><br><span class="line">                    第二部分：</span><br><span class="line">                        hibernate的可选配置</span><br><span class="line">                    第三部分：</span><br><span class="line">                        映射文件的位置</span><br><span class="line">--&gt;</span><br><span class="line">&lt;session-factory&gt;</span><br><span class="line">&lt;!-- 第一部分：连接数据库的信息 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;&#x2F;property&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;hibernate.connection.url&quot;&gt;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;hibernate01&lt;&#x2F;property&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;hibernate.connection.username&quot;&gt;root&lt;&#x2F;property&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;hibernate.connection.password&quot;&gt;root&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!-- 数据库的方言 --&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span><br><span class="line">                &lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;hibernate.show_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">                &lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;hibernate.format_sql&quot;&gt;false&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!-- 是否让hibernate根据表结构的变化来生成DDL语句</span><br><span class="line"> DDL:数据定义语言</span><br><span class="line"> hibernate可以根据映射文件来为我们生成数据库的表结构。但是他不能生成数据库。</span><br><span class="line">                         hbm2ddl.auto的取值</span><br><span class="line">                            * none:不用Hibernate自动生成表.</span><br><span class="line">                            * create:每次都会创建一个新的表.(测试)</span><br><span class="line">                            * create-drop:每次都会创建一个新的表，执行程序结束后删除这个表.(测试)</span><br><span class="line">                            * update:如果数据库中有表，使用原来的表，如果没有表，创建一个新表.可以更新表结构。</span><br><span class="line">                            * validate:只会使用原有的表.对映射关系进行校验.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 第三部分：映射配置文件的位置 --&gt;</span><br><span class="line">                &lt;mapping resource&#x3D;&quot;com&#x2F;wgy&#x2F;domain&#x2F;Customer.hbm.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;session-factory&gt;</span><br><span class="line">&lt;&#x2F;hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-实现保存操作"><a href="#3-4-实现保存操作" class="headerlink" title="3.4    实现保存操作"></a>3.4    实现保存操作</h2><p>在项目中新建一个名称为cn.wgy.test的包，然后在包中建立一个名为HibernateDemo1Test.java的文件，该文件是用来测试的类文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hibernate的入门案例</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> * 实现保存一个客户到数据库</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo1Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 步骤分析</span></span><br><span class="line"><span class="comment">     * 1、解析主配置文件</span></span><br><span class="line"><span class="comment">     * 2、根据配置文件创建SessionFactory</span></span><br><span class="line"><span class="comment">     * 3、根据SessionFactory创建Session</span></span><br><span class="line"><span class="comment">     * 4、开启事务</span></span><br><span class="line"><span class="comment">     * 5、执行操作（保存）</span></span><br><span class="line"><span class="comment">     * 6、提交事务</span></span><br><span class="line"><span class="comment">     * 7、释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"测试1"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1、解析主配置文件</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        configuration.configure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、根据配置文件创建SessionFactory</span></span><br><span class="line">        SessionFactory sessionFactory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、根据SessionFactory创建Session</span></span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、开启事务</span></span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、执行操作（保存）</span></span><br><span class="line">        session.save(customer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-入门案例的执行过程"><a href="#3-5-入门案例的执行过程" class="headerlink" title="3.5    入门案例的执行过程"></a>3.5    入门案例的执行过程</h2><p>首先创建Configuration类的实例，并通过它来读取并解析配置文件hibernate.cfg.xml。然后创建SessionFactory读取解析映射文件信息，并将Configuration对象中的所有配置信息拷贝到SessionFactory内存中。接下来，打开Session，让SessionFactory提供连接，并开启一个事务，之后创建对象，向对象中添加数据，通过session.save()方法完成向数据库中保存数据的操作。最后提交事务，并关闭资源。</p><p><img src="https://ae01.alicdn.com/kf/He495e9b8fdec49f6951d0289a3535993j.jpg" alt="img"></p><h1 id="4-Hibernate中API介绍"><a href="#4-Hibernate中API介绍" class="headerlink" title="4.    Hibernate中API介绍"></a>4.    Hibernate中API介绍</h1><h2 id="4-1-Configuration对象"><a href="#4-1-Configuration对象" class="headerlink" title="4.1    Configuration对象"></a>4.1    Configuration对象</h2><h3 id="4-1-1-作用"><a href="#4-1-1-作用" class="headerlink" title="4.1.1    作用"></a>4.1.1    作用</h3><p>在使用Hibernate时，首先要创建Configuration实例，Configuration实例主要用于启动、加载、管理hibernate的配置文件信息。在启动Hibernate的过程中，Configuration实例首先确定Hibernate配置文件的位置，然后读取相关配置，最后创建一个唯一的SessionFactory实例。Configuration对象只存在于系统的初始化阶段，它将SessionFactory创建完成后，就完成了自己的使命。</p><p>Hibernate通常使用<code>Configuration config = new Configuration().configure();</code>的方式创建实例，此种方式默认会去src下读取 hibernate.cfg.xml配置文件。如果不想使用默认的hibernate.cfg.xml配置文件，而是使用指定目录下（或自定义）的配置文件，则需要向configure()方法中传递一个文件路径的参数，其代码写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configuration config &#x3D; new Configuration().configure(&quot;xml文件位置&quot;);</span><br></pre></td></tr></table></figure><p>此种写法hibernate会去指定位置查找配置文件，例如，想要使用src下config包中的 hibernate.cfg.xml文件，只需将文件位置加入configure()中即可，其代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configuration config = <span class="keyword">new</span> Configuration().configure(<span class="string">"/config/hibernate.cfg.xml"</span>);</span><br></pre></td></tr></table></figure><p>【加载映射文件】</p><p>Hibernate除了可以使用Configuration对象加载核心配置文件以外，还可以利用该对象加载映射文件。因为如何使用properties文件作为Hibernate的核心配置文件，其他的属性可以使用key=value的格式来设置，但是映射没有办法加载。这时这个对象就有了用武之地。可以在手动编写代码的时候去加载映射文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Configuration configuration &#x3D; new Configuration().configure(&quot;xml文件位置&quot;);</span><br><span class="line"></span><br><span class="line">configuration.addResource(&quot;cn&#x2F;wgy&#x2F;domain&#x2F;Customer.hbm.xml&quot;);</span><br></pre></td></tr></table></figure><h3 id="4-1-2-常用方法"><a href="#4-1-2-常用方法" class="headerlink" title="4.1.2    常用方法"></a>4.1.2    常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">默认构造函数：</span><br><span class="line">        它只能加载类的根路径下，名称为hibernate.properties的配置文件。不能加载xml</span><br><span class="line">configure()：</span><br><span class="line">        它用于加载类的根路径下，名称为hibernate.cfg.xml的配置文件。</span><br><span class="line">        configuration.configure();</span><br><span class="line">buildSessionFactory()：</span><br><span class="line">        根据配置文件，构建SessionFactory</span><br><span class="line">        SessionFactory sessionFactory &#x3D; configuration.buildSessionFactory();</span><br><span class="line">addResource(String url);</span><br><span class="line">        指定映射文件的位置</span><br><span class="line">        configuration.addResource(&quot;com&#x2F;itheima&#x2F;domain&#x2F;Customer.hbm.xml&quot;);</span><br><span class="line">addClass(Class clazz);</span><br><span class="line">        指定实体类的字节码</span><br><span class="line">        configuration.addClass(Customer.class);</span><br></pre></td></tr></table></figure><h2 id="4-2-SessionFactory"><a href="#4-2-SessionFactory" class="headerlink" title="4.2    SessionFactory"></a>4.2    SessionFactory</h2><h3 id="4-2-1-作用"><a href="#4-2-1-作用" class="headerlink" title="4.2.1    作用"></a>4.2.1    作用</h3><p>SessionFactory接口负责Hibernate的初始化和建立Session对象。它在Hibernate中起到一个缓冲区作用，Hibernate可以将自动生成的SQL语句、映射数据以及某些可重复利用的的数据放在这个缓冲区中。同时它还保存了对数据库配置的所有映射关系，维护了当前的二级缓存。</p><p>SessionFactory 实例是通过Configuration对象获取的，其获取方法如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SessionFactory sessionFactory = config.buildSessionFactory();</span><br></pre></td></tr></table></figure><h3 id="4-2-2-常用方法"><a href="#4-2-2-常用方法" class="headerlink" title="4.2.2    常用方法"></a>4.2.2    常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openSession()：每次都是生成一个新的Session</span><br></pre></td></tr></table></figure><h3 id="4-2-3-细节"><a href="#4-2-3-细节" class="headerlink" title="4.2.3    细节"></a>4.2.3    细节</h3><p>该对象维护了很多信息：</p><ul><li>连接数据库的信息</li><li>hibernate的基本配置</li><li>映射文件的位置，以及映射文件中的配置</li><li>一些预定义的SQL语句（这些语句都是通用的） 比如：全字段保存，根据id的全字段更新，根据id的全字段查询，根据id的删除等等。</li><li>hibernate的二级缓存（了解）</li></ul><p>同时，它是一个线程安全的对象，所有由该工厂生产的Session都共享工厂中维护的数据。</p><h3 id="4-2-4-使用原则"><a href="#4-2-4-使用原则" class="headerlink" title="4.2.4    使用原则"></a>4.2.4    使用原则</h3><p>由于SessionFactory维护了很多信息同时又是线程安全的，一般情况下，一个项目中只需要一个SessionFactory，只有当应用中存在多个数据源时，才为每个数据源建立一个SessionFactory实例。因此，不应该反复的创建和销毁。</p><p>原则：一个应用应该只有一个SessionFactory。在应用加载时创建，应用卸载时销毁。</p><h3 id="4-2-5-在hibernate中使用数据源-连接池"><a href="#4-2-5-在hibernate中使用数据源-连接池" class="headerlink" title="4.2.5    在hibernate中使用数据源(连接池)"></a>4.2.5    在hibernate中使用数据源(连接池)</h3><p>SessionFactory内部还维护了一个连接池，如果我们需要使用第三方的连接池如C3P0，那么需要我们自己手动进行配置</p><p>配置C3P0步骤如下：</p><ul><li><p>导入连接池的jar包</p><p> <img src="https://ae01.alicdn.com/kf/Hed677a54476846a58b586d0f6eb6728cE.jpg" alt="image-20200528121944904"></p></li><li><p>在hibernate主配置文件中配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置数据源的提供商 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.provider_class&quot;&gt;</span><br><span class="line">org.hibernate.connection.C3P0ConnectionProvider</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-Session"><a href="#4-3-Session" class="headerlink" title="4.3    Session"></a>4.3    Session</h2><h3 id="4-3-1-作用"><a href="#4-3-1-作用" class="headerlink" title="4.3.1    作用"></a>4.3.1    作用</h3><p>Session 是应用程序与数据库之间交互操作的一个单线程对象，是 Hibernate 运作的中心，它的主要功能是为持久化对象提供创建、读取和删除的能力，所有持久化对象必须在session的管理下才可以进行持久化操作。</p><p>创建SessionFactory实例后，就可以通过它获取Session实例。获取Session实例有两种方式，一种是通过openSession()方法，另一种是通过getCurrentSession()方法。两种方法获取session的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用openSession方法创建session</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用getCurrentSession()方法创建session</span></span><br><span class="line">Session session = sessionFactory.getCurrentSession();</span><br></pre></td></tr></table></figure><p>以上两种获取session实例方式的主要区别是，采用openSession方法获取Session实例时，SessionFactory直接创建一个新的Session实例，并且在使用完成后需要调用close方法进行手动关闭。而getCurrentSession方法创建的Session实例会被绑定到当前线程中，它在提交或回滚操作时会自动关闭。</p><h3 id="4-3-2-常用方法"><a href="#4-3-2-常用方法" class="headerlink" title="4.3.2    常用方法"></a>4.3.2    常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">save(Object entity);  ：保存一个实体到数据库</span><br><span class="line"></span><br><span class="line">update(Object entity);：更新一个实体</span><br><span class="line"></span><br><span class="line">delete(Object entity);：删除一个实体</span><br><span class="line"></span><br><span class="line">get(Class clazz,Serializable id);：根据id查询一个实体。参数的含义：Class表示要查询的实体类字节码。Serializable就是查询的条件。</span><br><span class="line"></span><br><span class="line">beginTransaction();：开启事务，并返回事务对象</span><br></pre></td></tr></table></figure><h3 id="4-3-3-细节"><a href="#4-3-3-细节" class="headerlink" title="4.3.3    细节"></a>4.3.3    细节</h3><p>由于SessionFactory已经维护了很多数据，所以Session就维护较少的内容。</p><p>它是一个轻量级对象。并且：它不是线程安全的！！！！！！！</p><p>它维护了hibernate的一级缓存。</p><p>它的反复创建销毁不会消耗太多资源。</p><h3 id="4-3-4-使用原则"><a href="#4-3-4-使用原则" class="headerlink" title="4.3.4    使用原则"></a>4.3.4    使用原则</h3><p>每个线程都只有一个Session对象。</p><h2 id="4-4-Transaction"><a href="#4-4-Transaction" class="headerlink" title="4.4    Transaction"></a>4.4    Transaction</h2><h3 id="4-4-1-作用"><a href="#4-4-1-作用" class="headerlink" title="4.4.1    作用"></a>4.4.1    作用</h3><p>Transaction接口主要用于管理事务，它是Hibernate的数据库事务接口，且对底层的事务接口进行了封装。Transaction接口的事务对象是通过Session对象开启的，其开启方式如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transaction transaction &#x3D; session.beginTransaction();</span><br></pre></td></tr></table></figure><h3 id="4-4-2-常用方法"><a href="#4-4-2-常用方法" class="headerlink" title="4.4.2    常用方法"></a>4.4.2    常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commit()：提交事务</span><br><span class="line"></span><br><span class="line">rollback()：回滚事务</span><br></pre></td></tr></table></figure><p>Session执行完数据库操作后，要使用Transaction接口的commit()方法进行事务提交，才能真正的将数据操作同步到数据库中。发生异常时，需要使用rollback()方法进行事务回滚，以避免数据发生错误。因此，在持久化操作后，必须调用Transaction接口的commit()方法和rollback()方法。如果没有开启事务，那么每个Session的操作，都相当于一个独立的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    c.setCustName(<span class="string">"测试保存功能"</span>);</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    Session s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        s = HibernateUtil.openSession();</span><br><span class="line">        tx = s.beginTransaction();</span><br><span class="line">        <span class="comment">//保存客户</span></span><br><span class="line">        s.save(c);</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    tx.rollback();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-抽取HibernateUtil工具类"><a href="#5-抽取HibernateUtil工具类" class="headerlink" title="5.    抽取HibernateUtil工具类"></a>5.    抽取HibernateUtil工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hibernate的工具类</span></span><br><span class="line"><span class="comment"> * 用于生产一个Session对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">                cfg.configure();</span><br><span class="line">                factory = cfg.buildSessionFactory();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化SessionFactory失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个新的Session对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> factory.openSession();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-案例：使用Hibernate实现CRUD"><a href="#6-案例：使用Hibernate实现CRUD" class="headerlink" title="6.    案例：使用Hibernate实现CRUD"></a>6.    案例：使用Hibernate实现CRUD</h1><h2 id="6-1-保存操作"><a href="#6-1-保存操作" class="headerlink" title="6.1    保存操作"></a>6.1    保存操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">    c.setCustName(<span class="string">"测试保存功能"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.使用工具类获取一个Session</span></span><br><span class="line">    Session session = HibernateUtil.openSession();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    <span class="comment">//Transaction tx = session.beginTransaction();</span></span><br><span class="line">    <span class="comment">//3.保存客户</span></span><br><span class="line">    session.save(c);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    <span class="comment">//tx.commit();</span></span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-查询一个实体"><a href="#6-2-查询一个实体" class="headerlink" title="6.2    查询一个实体"></a>6.2    查询一个实体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.使用工具类获取一个Session</span></span><br><span class="line">    Session session = HibernateUtil.openSession();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line">    <span class="comment">//3.查询id为2的客户</span></span><br><span class="line">    Customer c = session.get(Customer<span class="class">.<span class="keyword">class</span>, 2<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-修改操作"><a href="#6-3-修改操作" class="headerlink" title="6.3    修改操作"></a>6.3    修改操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.使用工具类获取一个Session</span></span><br><span class="line">    Session session = HibernateUtil.openSession();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line">    <span class="comment">//3.查询id为2的客户</span></span><br><span class="line">    Customer c = session.get(Customer<span class="class">.<span class="keyword">class</span>, 2<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//修改客户的地址为：湖北省</span></span><br><span class="line">    c.setCustAddress(<span class="string">"湖北省"</span>);</span><br><span class="line">    <span class="comment">//执行更新</span></span><br><span class="line">    session.update(c);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-删除操作"><a href="#6-4-删除操作" class="headerlink" title="6.4    删除操作"></a>6.4    删除操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.使用工具类获取一个Session</span></span><br><span class="line">    Session session = HibernateUtil.openSession();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line">    <span class="comment">//3.查询id为1的客户</span></span><br><span class="line">    Customer c = session.get(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">    <span class="comment">//删除实体</span></span><br><span class="line">    session.delete(c);<span class="comment">//delete from cst_customer where cust_id = ?</span></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5-实体查询get和load方法"><a href="#6-5-实体查询get和load方法" class="headerlink" title="6.5    实体查询get和load方法"></a>6.5    实体查询get和load方法</h2><h3 id="6-5-1-实体查询的概念"><a href="#6-5-1-实体查询的概念" class="headerlink" title="6.5.1    实体查询的概念"></a>6.5.1    实体查询的概念</h3><p>所谓实体查询即OID查询，就是使用主键作为条件来查询一个实体。其中涉及的方法是Session对象get方法和load方法。 </p><h3 id="6-5-2-方法的说明"><a href="#6-5-2-方法的说明" class="headerlink" title="6.5.2    方法的说明"></a>6.5.2    方法的说明</h3><p><strong>get方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询一个实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entityType 指的是要查询的实体类字节码对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 查询的条件，即主键的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的是实体类对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Class&lt;T&gt; entityType, Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    Customer c = s.get(Customer<span class="class">.<span class="keyword">class</span>, 2<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"get : "</span>+c.toString());</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>load方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询一个实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> theClass 指的是要查询的实体类字节码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id查询的条件，即主键的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的是实体类对象或者是实体类对象的代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">load</span><span class="params">(Class&lt;T&gt; theClass, Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoad</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session s = HibernateUtil.openSession();</span><br><span class="line">    Transaction tx = s.beginTransaction();</span><br><span class="line">    Customer c = s.load(Customer<span class="class">.<span class="keyword">class</span>, 2<span class="title">L</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"load : "</span>+c.toString());</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-3-get和load的区别"><a href="#6-5-3-get和load的区别" class="headerlink" title="6.5.3    get和load的区别"></a>6.5.3    get和load的区别</h3><ul><li><p>查询的时机不一样。</p><p> get的查询时机：每次调用get方法时，马上发起查询。       立即加载</p><p> load的查询时机：每次真正使用的时候，发起查询。        延迟加载   懒加载   惰性加载</p></li><li><p>返回的结果不一样。</p><p> get方法返回的对象是实体类类型</p><p> load方法返回的对象是实体类类型的代理对象</p></li></ul><p>load方法默认情况下是延迟，可以通过配置的方式改为立即加载。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 由于load方法是hibernate的方法所以只有XML的方式：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span> <span class="attr">lazy</span>=<span class="string">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Hibernate和ORM的概念&quot;&gt;&lt;a href=&quot;#1-Hibernate和ORM的概念&quot; class=&quot;headerlink&quot; title=&quot;1.    Hibernate和ORM的概念&quot;&gt;&lt;/a&gt;1.    Hibernate和ORM的概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-Hibrenate概述&quot;&gt;&lt;a href=&quot;#1-1-Hibrenate概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    Hibrenate概述&quot;&gt;&lt;/a&gt;1.1    Hibrenate概述&lt;/h2&gt;&lt;p&gt;它是一个轻量级，企业级，开源的ORM持久层框架。是可以操作数据库的框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;框架：它就是一个架构。&lt;/li&gt;
&lt;li&gt;通常情况下，软件工程的持久层解决方案，一个为主一个为辅。两者并存（写SQL语句的和不写SQL语句的&lt;/li&gt;
&lt;li&gt;轻量级：指的是使用时依赖的资源很少。（目前我们使用的阶段，只依赖log4j，c3p0连接池）&lt;/li&gt;
&lt;li&gt;企业级：指的是在企业级应用中使用的比较多&lt;/li&gt;
&lt;li&gt;开源的：开放源代码。&lt;/li&gt;
&lt;li&gt;ORM的操作方式：建立对象关系映射，实现操作实体类就相当于操作数据库表。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Hibernate" scheme="https://wgy1993.gitee.io/tags/Hibernate/"/>
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+github搭建免费个人博客</title>
    <link href="https://wgy1993.gitee.io/archives/52429b60.html"/>
    <id>https://wgy1993.gitee.io/archives/52429b60.html</id>
    <published>2020-05-15T11:40:37.000Z</published>
    <updated>2020-06-01T05:39:23.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用github pages服务搭建博客的好处有：</p><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台</li></ol><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始一切之前，你必须已经：</p><ul><li>有一个github账号，没有的话去注册一个；</li><li>安装了node.js、npm，并了解相关基础知识；</li><li>安装了git for windows（或者其它git客户端）</li></ul><h1 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？</p><p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>几个注意的地方：</p><ol><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名；</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</li></ol><p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p><h1 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h1><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p><img src="https://ae01.alicdn.com/kf/H0d40da5eee724569a8f2c279ac845f27l.jpg" alt="img"></p><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi wgy1993! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><p>此时你还需要配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;&#x2F;&#x2F; 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@163.com&quot;&#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>具体这个配置是干嘛的我没仔细深究。</p><h1 id="使用hexo写博客"><a href="#使用hexo写博客" class="headerlink" title="使用hexo写博客"></a>使用hexo写博客</h1><h2 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h2><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>安装之前先来说几个注意事项：</p><ol><li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</li><li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li><li>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>E:\MyGitWorkSpace\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /e/MyGitWorkSpace/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hceb1f4a159e343c4bc0496745914a864C.jpg" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p><img src="https://ae01.alicdn.com/kf/Ha77a365fa6744a119c008199db98b27eN.jpg" alt="img"></p><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了</p><h2 id="浏览目录"><a href="#浏览目录" class="headerlink" title="浏览目录"></a>浏览目录</h2><p><img src="https://ae01.alicdn.com/kf/H9b2007ae9dd041c1988780050b8c33e1K.jpg" alt="image-20200515192304796"></p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>。</p><p>个人比较喜欢的2个主题：<a href="https://github.com/pinggod/hexo-theme-jekyll" target="_blank" rel="noopener">hexo-theme-jekyll</a> 和 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>。</p><p>首先下载这个主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /f/Workspaces/hexo/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>下载后的主题都在这里：</p><p><img src="https://ae01.alicdn.com/kf/Hbb471835feb746f39cb6db2d7b0d8cf7C.jpg" alt="img"></p><p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。</p><p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p><h2 id="上传之前"><a href="#上传之前" class="headerlink" title="上传之前"></a>上传之前</h2><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:wgy1993&#x2F;wgy1993.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;wgy1993&#x2F;wgy1993.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure><p>原因是还需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><p><img src="https://ae01.alicdn.com/kf/H3c094a9ce6e8438bbdd7dbeed07d40f48.jpg" alt="img"></p><h2 id="保留README-md等文件"><a href="#保留README-md等文件" class="headerlink" title="保留README.md等文件"></a>保留README.md等文件</h2><p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</p><p><img src="https://ae01.alicdn.com/kf/H4ea0993cfae44c41bbf68297bc697ca07.jpg" alt="img"></p><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><p>常见命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>定位到我们的hexo根目录，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#39;my-first-blog&#39;</span><br></pre></td></tr></table></figure><p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p><p><img src="https://ae01.alicdn.com/kf/H1736b5901cb646c7b007f1bcfdb4e82eY.jpg" alt="img"></p><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><p><img src="https://ae01.alicdn.com/kf/H7a41d5d7f9774850a9292072726612d5M.jpg" alt="img"></p><p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><p>那么<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>有什么区别呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;my-second-blog&quot;</span><br></pre></td></tr></table></figure><p>生成如下：</p><p><img src="https://ae01.alicdn.com/kf/Hfbc4fe32346e40ae95fb1a5ea52a69b4a.jpg" alt="img"></p><p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h3 id="如何让博文列表不显示全部内容"><a href="#如何让博文列表不显示全部内容" class="headerlink" title="如何让博文列表不显示全部内容"></a>如何让博文列表不显示全部内容</h3><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上``即可，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 前言</span></span><br><span class="line"></span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>全是静态文件，访问速度快；</span><br><span class="line"><span class="bullet">2. </span>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line"><span class="bullet">3. </span>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line"><span class="bullet">5. </span>博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line"><span class="bullet">6. </span>等等；</span><br></pre></td></tr></table></figure><p>最终效果：</p><p><img src="https://ae01.alicdn.com/kf/Hb69762d2d3164cc59a4313edfee04d17g.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用github pages服务搭建博客的好处有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全是静态文件，访问速度快；&lt;/li&gt;
&lt;li&gt;免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；&lt;/li&gt;
&lt;li&gt;可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;/li&gt;
&lt;li&gt;数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；&lt;/li&gt;
&lt;li&gt;博客内容可以轻松打包、转移、发布到其它平台&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://wgy1993.gitee.io/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://wgy1993.gitee.io/tags/GitHub/"/>
    
  </entry>
  
</feed>
