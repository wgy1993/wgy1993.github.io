<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wgy的博客</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wgy1993.gitee.io/"/>
  <updated>2020-09-03T11:22:58.289Z</updated>
  <id>https://wgy1993.gitee.io/</id>
  
  <author>
    <name>Wgy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticStack(二)</title>
    <link href="https://wgy1993.gitee.io/archives/1b8ebebc.html"/>
    <id>https://wgy1993.gitee.io/archives/1b8ebebc.html</id>
    <published>2020-09-03T11:10:20.000Z</published>
    <updated>2020-09-03T11:22:58.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Nginx日志分析系统"><a href="#1-Nginx日志分析系统" class="headerlink" title="1.    Nginx日志分析系统"></a>1.    Nginx日志分析系统</h1><h2 id="1-1-项目需求"><a href="#1-1-项目需求" class="headerlink" title="1.1    项目需求"></a>1.1    项目需求</h2><p>Nginx是一款非常优秀的web服务器，往往nginx服务会作为项目的访问入口，那么，nginx的性能保障就变得非常重要了，如果nginx的运行出现了问题就会对项目有较大的影响，所以，我们需要对nginx的运行有监控措施，实时掌握nginx的运行情况，那就需要收集nginx的运行指标和分析nginx的运行日志了。</p><a id="more"></a><h2 id="1-2-业务流程"><a href="#1-2-业务流程" class="headerlink" title="1.2    业务流程"></a>1.2    业务流程</h2><p><img src="https://img-blog.csdnimg.cn/20200903185009212.png" alt="image-20200903162441676"></p><p>说明：</p><ul><li>通过Beats采集Nginx的指标数据和日志数据</li><li>Beats采集到数据后发送到Elasticsearch中</li><li>Kibana读取数据进行分析</li><li>用户通过Kibana进行查看分析报表</li></ul><h2 id="1-3-部署安装Nginx"><a href="#1-3-部署安装Nginx" class="headerlink" title="1.3    部署安装Nginx"></a>1.3    部署安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.11.6.tar.gz</span><br><span class="line">yum -y install pcre-devel zlib-devel</span><br><span class="line">./configure</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过浏览器访问页面并且查看日志</span></span><br><span class="line"><span class="comment">#访问地址：http://192.168.142.128/</span></span><br><span class="line">tail -f /usr/<span class="built_in">local</span>/nginx/logs/access.log</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185039227.png" alt="image-20200903162728549"></p><p>具体操作参考：<a href="https://wgy1993.gitee.io/archives/65b69107.html">https://wgy1993.gitee.io/archives/65b69107.html</a></p><h1 id="2-Beats-简介"><a href="#2-Beats-简介" class="headerlink" title="2.    Beats 简介"></a>2.    Beats 简介</h1><p><img src="https://img-blog.csdnimg.cn/20200903185039288.png" alt="image-20200903162935568"></p><p>官网：<a href="https://www.elastic.co/cn/products/beats" target="_blank" rel="noopener">https://www.elastic.co/cn/products/beats</a></p><p><img src="https://img-blog.csdnimg.cn/20200903185136251.png" alt="image-20200903162951060"></p><p>Beats系列产品：</p><p><img src="https://img-blog.csdnimg.cn/20200903185136254.png" alt="image-20200903163337531"></p><h2 id="2-1-Filebeat"><a href="#2-1-Filebeat" class="headerlink" title="2.1    Filebeat"></a>2.1    Filebeat</h2><p><img src="https://img-blog.csdnimg.cn/20200903185136266.png" alt="image-20200903164540282"></p><h3 id="2-1-1-架构"><a href="#2-1-1-架构" class="headerlink" title="2.1.1    架构"></a>2.1.1    架构</h3><p>用于监控、收集服务器日志文件.</p><p><img src="https://img-blog.csdnimg.cn/20200903185136307.png" alt="image-20200903164606341"></p><h3 id="2-1-2-部署与运行"><a href="#2-1-2-部署与运行" class="headerlink" title="2.1.2    部署与运行"></a>2.1.2    部署与运行</h3><p>下载（或使用资料中提供的安装包，版本为：filebeat-6.5.4）：<a href="https://www.elastic.co/downloads/beats" target="_blank" rel="noopener">https://www.elastic.co/downloads/beats</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;itcast&#x2F;beats</span><br><span class="line">tar -xvf filebeat-6.5.4-linux-x86_64.tar.gz</span><br><span class="line">cd filebeat-6.5.4-linux-x86_64</span><br><span class="line"></span><br><span class="line">#创建如下配置文件 itcast.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: stdin</span><br><span class="line">    enabled: true</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.console:</span><br><span class="line">    pretty: true</span><br><span class="line">    enable: true</span><br><span class="line">    </span><br><span class="line">#启动filebeat</span><br><span class="line">.&#x2F;filebeat -e -c itcast.yml</span><br><span class="line"></span><br><span class="line">#输入hello运行结果如下：</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T12:50:03.585Z&quot;,</span><br><span class="line">    &quot;@metadata&quot;: &#123; #元数据信息</span><br><span class="line">                  &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">                  &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">                  &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">                 &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&quot;,</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;message&quot;: &quot;hello&quot;,  #输入的内容</span><br><span class="line">    &quot;prospector&quot;: &#123; #标准输入勘探器</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&quot;input&quot;: &#123;  #控制台标准输入</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123; #beat版本以及主机信息</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-读取文件"><a href="#2-1-3-读取文件" class="headerlink" title="2.1.3    读取文件"></a>2.1.3    读取文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#配置读取文件项 itcast-log.yml</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">    enabled: true</span><br><span class="line">    paths:</span><br><span class="line">        - &#x2F;itcast&#x2F;beats&#x2F;logs&#x2F;*.log</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.console:</span><br><span class="line">    pretty: true</span><br><span class="line">    enable: true</span><br><span class="line">    </span><br><span class="line">#启动filebeat</span><br><span class="line">.&#x2F;filebeat -e -c itcast-log.yml</span><br><span class="line"></span><br><span class="line">#&#x2F;haoke&#x2F;beats&#x2F;logs下创建a.log文件，并输入如下内容</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line">#观察filebeat输出</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T14:16:10.192Z&quot;,</span><br><span class="line">     &quot;@metadata&quot;: &#123;</span><br><span class="line">        &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&#x2F;haoke&#x2F;beats&#x2F;logs&#x2F;a.log&quot;,</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;message&quot;: &quot;hello&quot;,</span><br><span class="line">    &quot;prospector&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;input&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123;</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T14:16:10.192Z&quot;,</span><br><span class="line">    &quot;@metadata&quot;: &#123;</span><br><span class="line">        &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;prospector&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;input&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123;</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&#x2F;haoke&#x2F;beats&#x2F;logs&#x2F;a.log&quot;,</span><br><span class="line">    &quot;offset&quot;: 6,</span><br><span class="line">    &quot;message&quot;: &quot;world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，已经检测到日志文件有更新，立刻就会读取到更新的内容，并且输出到控制台。</p><h3 id="2-1-4-自定义字段"><a href="#2-1-4-自定义字段" class="headerlink" title="2.1.4    自定义字段"></a>2.1.4    自定义字段</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置读取文件项 itcast-log.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/itcast/beats/logs/*.log</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">["web"]</span>  <span class="comment">#添加自定义tag，便于后续的处理</span></span><br><span class="line">    <span class="attr">fields:</span>  <span class="comment">#添加自定义字段</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">itcast-im</span></span><br><span class="line">    <span class="attr">fields_under_root:</span> <span class="literal">true</span> <span class="comment">#true为添加到根节点，false为添加到子节点中</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">    <span class="attr">index.number_of_shards:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">output.console:</span></span><br><span class="line">    <span class="attr">pretty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动filebeat</span></span><br><span class="line"><span class="string">./filebeat</span> <span class="string">-e</span> <span class="string">-c</span> <span class="string">itcast-log.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#/haoke/beats/logs下创建a.log文件，并输入如下内容</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行效果</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="string">"@timestamp"</span><span class="string">:</span> <span class="string">"2019-01-12T14:37:19.845Z"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"@metadata"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"beat":</span> <span class="string">"filebeat"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"type":</span> <span class="string">"doc"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"version":</span> <span class="string">"6.5.4"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"offset":</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"tags":</span> <span class="string">[</span></span><br><span class="line">    <span class="string">"web"</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">    <span class="attr">"prospector":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"type":</span> <span class="string">"log"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"beat":</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"name":</span> <span class="string">"itcast01"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"hostname":</span> <span class="string">"itcast01"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"version":</span> <span class="string">"6.5.4"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"host":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"name":</span> <span class="string">"itcast01"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"source":</span> <span class="string">"/itcast/beats/logs/a.log"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"message":</span> <span class="string">"123"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"input":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"type":</span> <span class="string">"log"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"from":</span> <span class="string">"haoke-im"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-输出到Elasticsearch"><a href="#2-1-5-输出到Elasticsearch" class="headerlink" title="2.1.5    输出到Elasticsearch"></a>2.1.5    输出到Elasticsearch</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># itcast-log.yml</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/itcast/beats/logs/*.log</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">["haoke-im"]</span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">        <span class="attr">from:</span> <span class="string">haoke-im</span></span><br><span class="line">    <span class="attr">fields_under_root:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">    <span class="attr">index.number_of_shards:</span> <span class="number">3</span> <span class="comment">#指定索引的分区数</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span> <span class="comment">#指定ES的配置</span></span><br><span class="line">    <span class="attr">hosts:</span> <span class="string">["192.168.1.7:9200","192.168.1.7:9201","192.168.1.7:9202"]</span></span><br></pre></td></tr></table></figure><p>在日志文件中输入新的内容进行测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903185136258.png" alt="image-20200903170731296"></p><p>查看数据：</p><p><img src="https://img-blog.csdnimg.cn/20200903185136286.png" alt="image-20200903170743531"></p><h3 id="2-1-6-Filebeat工作原理"><a href="#2-1-6-Filebeat工作原理" class="headerlink" title="2.1.6    Filebeat工作原理"></a>2.1.6    Filebeat工作原理</h3><p>Filebeat由两个主要组件组成：prospector 和 harvester。</p><ul><li>harvester：<ul><li>负责读取单个文件的内容。</li><li>如果文件在读取时被删除或重命名，Filebeat将继续读取文件。</li></ul></li><li>prospector<ul><li>prospector 负责管理harvester并找到所有要读取的文件来源。</li><li>如果输入类型为日志，则查找器将查找路径匹配的所有文件，并为每个文件启动一个harvester。</li><li>Filebeat目前支持两种prospector类型：log和stdin。</li></ul></li><li>Filebeat如何保持文件的状态<ul><li>Filebeat 保存每个文件的状态并经常将状态刷新到磁盘上的注册文件中。</li><li>该状态用于记住harvester正在读取的最后偏移量，并确保发送所有日志行。</li><li>如果输出（例如Elasticsearch或Logstash）无法访问，Filebeat会跟踪最后发送的行，并在输出再次可用时继续读取文件。</li><li>在Filebeat运行时，每个prospector内存中也会保存的文件状态信息，当重新启动Filebeat时，将使用注册文件的数据来重建文件状态，Filebeat将每个harvester在从保存的最后偏移量继续读取。</li><li>文件状态记录在data/registry文件中。</li></ul></li></ul><p>启动命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat -e -c itcast.yml</span><br><span class="line">.&#x2F;filebeat -e -c itcast.yml -d &quot;publish&quot;</span><br><span class="line"></span><br><span class="line">#参数说明</span><br><span class="line">    -e: 输出到标准输出，默认输出到syslog和logs下</span><br><span class="line">    -c: 指定配置文件</span><br><span class="line">    -d: 输出debug信息</span><br><span class="line"></span><br><span class="line">#测试： .&#x2F;filebeat -e -c itcast-log.yml -d &quot;publish&quot;</span><br><span class="line">DEBUG  [publish]    pipeline&#x2F;processor.go:308    Publish event: &#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T15:03:50.820Z&quot;,</span><br><span class="line">    &quot;@metadata&quot;: &#123;</span><br><span class="line">        &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;tags&quot;: [</span><br><span class="line">    &quot;haoke-im&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;prospector&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&#x2F;haoke&#x2F;beats&#x2F;logs&#x2F;a.log&quot;,</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">    &quot;from&quot;: &quot;haoke-im&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;message&quot;: &quot;456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-7-读取Nginx日志文件"><a href="#2-1-7-读取Nginx日志文件" class="headerlink" title="2.1.7    读取Nginx日志文件"></a>2.1.7    读取Nginx日志文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># itcast-nginx.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">    enabled: true</span><br><span class="line">    paths:</span><br><span class="line">    - &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;*.log</span><br><span class="line">    tags: [&quot;nginx&quot;]</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3 #指定索引的分区数</span><br><span class="line">output.elasticsearch: #指定ES的配置</span><br><span class="line">    hosts: [&quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;filebeat -e -c itcast-nginx.yml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185335428.png" alt="image-20200903174244014"></p><p>启动后，可以在Elasticsearch中看到索引以及查看数据：</p><p><img src="https://img-blog.csdnimg.cn/20200903185354525.png" alt="image-20200903174303071"></p><p><img src="https://img-blog.csdnimg.cn/2020090318541164.png" alt="image-20200903174315409"></p><p>可以看到，在message中已经获取到了nginx的日志，但是，内容并没有经过处理，只是读取到原数据，那么对于我们后期的操作是不利的，有办法解决吗？</p><h3 id="2-1-8-Module"><a href="#2-1-8-Module" class="headerlink" title="2.1.8    Module"></a>2.1.8    Module</h3><p>前面要想实现日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我们的配置，直接就可以使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat modules list</span><br><span class="line"></span><br><span class="line">Enabled:</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">apache2</span><br><span class="line">auditd</span><br><span class="line">elasticsearch</span><br><span class="line">haproxy</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">osquery</span><br><span class="line">postgresql</span><br><span class="line">redis</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br></pre></td></tr></table></figure><p>可以看到，内置了很多的module，但是都没有启用，如果需要启用需要进行enable操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat modules enable nginx #启动</span><br><span class="line">.&#x2F;filebeat modules disable nginx #禁用</span><br><span class="line"></span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">apache2</span><br><span class="line">auditd</span><br><span class="line">elasticsearch</span><br><span class="line">haproxy</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">redis</span><br><span class="line">osquery</span><br><span class="line">postgresql</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br></pre></td></tr></table></figure><p>可以发现，nginx的module已经被启用。</p><h4 id="2-1-8-1-nginx-module-配置"><a href="#2-1-8-1-nginx-module-配置" class="headerlink" title="2.1.8.1    nginx module 配置"></a>2.1.8.1    nginx module 配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">nginx</span></span><br><span class="line"> <span class="comment"># Access logs</span></span><br><span class="line"><span class="attr">access:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">var.paths:</span> <span class="string">["/usr/local/nginx/logs/access.log*"]</span></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="comment">#var.paths:</span></span><br><span class="line">    <span class="comment"># Error logs</span></span><br><span class="line"><span class="attr">error:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">var.paths:</span> <span class="string">["/usr/local/nginx/logs/error.log*"]</span></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="comment">#var.paths:</span></span><br></pre></td></tr></table></figure><h4 id="2-1-8-2-配置filebeat"><a href="#2-1-8-2-配置filebeat" class="headerlink" title="2.1.8.2    配置filebeat"></a>2.1.8.2    配置filebeat</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim itcast-nginx.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="comment">#- type: log</span></span><br><span class="line"><span class="comment"># enabled: true</span></span><br><span class="line"><span class="comment"># paths:</span></span><br><span class="line"><span class="comment">#  - /usr/local/nginx/logs/*.log</span></span><br><span class="line"><span class="comment"># tags: ["nginx"]</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">    <span class="attr">index.number_of_shards:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">    <span class="attr">hosts:</span> <span class="string">["192.168.40.133:9200","192.168.40.134:9200","192.168.40.135:9200"]</span></span><br><span class="line"><span class="attr">filebeat.config.modules:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line">    <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="2-1-8-3-测试"><a href="#2-1-8-3-测试" class="headerlink" title="2.1.8.3    测试"></a>2.1.8.3    测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat -e -c itcast-nginx.yml</span><br><span class="line"></span><br><span class="line">#启动会出错，如下</span><br><span class="line">ERROR  fileset&#x2F;factory.go:142 Error loading pipeline: Error loading pipeline for fileset nginx&#x2F;access: This module requires the following Elasticsearch plugins:</span><br><span class="line">ingest-user-agent, ingest-geoip. You can install them by running the following commands on all the Elasticsearch nodes:</span><br><span class="line">  sudo bin&#x2F;elasticsearch-plugin install ingest-user-agent</span><br><span class="line">  sudo bin&#x2F;elasticsearch-plugin install ingest-geoip</span><br><span class="line"> </span><br><span class="line">#解决：需要在Elasticsearch中安装ingest-user-agent、ingest-geoip插件</span><br><span class="line">#在资料中可以找到，ingest-user-agent.tar、ingest-geoip.tar、ingest-geoip-conf.tar 3个文件</span><br><span class="line">#其中，ingest-user-agent.tar、ingest-geoip.tar解压到plugins下</span><br><span class="line">#ingest-geoip-conf.tar解压到config下</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185436109.png" alt="image-20200903174940658"></p><p>测试发现，数据已经写入到了Elasticsearch中，并且拿到的数据更加明确了：</p><p><img src="https://img-blog.csdnimg.cn/20200903185506128.png" alt="image-20200903175057846"></p><p>当然了，其他的Module的用法参加官方文档：</p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200903185528148.png" alt="image-20200903175130212"></p><h2 id="2-2-Metricbeat"><a href="#2-2-Metricbeat" class="headerlink" title="2.2    Metricbeat"></a>2.2    Metricbeat</h2><p><img src="https://img-blog.csdnimg.cn/20200903185547704.png" alt="image-20200903175152818"></p><ul><li>定期收集操作系统或应用服务的指标数据</li><li>存储到Elasticsearch中，进行实时分析</li></ul><h3 id="2-2-1-Metricbeat组成"><a href="#2-2-1-Metricbeat组成" class="headerlink" title="2.2.1    Metricbeat组成"></a>2.2.1    Metricbeat组成</h3><p>Metricbeat有2部分组成，一部分是Module，另一部分为Metricset。</p><ul><li>Module<ul><li>收集的对象，如：mysql、redis、nginx、操作系统等；</li></ul></li><li>Metricset<ul><li>收集指标的集合，如：cpu、memory、network等；</li></ul></li></ul><p>以Redis Module为例：</p><p><img src="https://img-blog.csdnimg.cn/20200903185609236.png" alt="image-20200903175347729"></p><h3 id="2-2-2-部署与收集系统指标"><a href="#2-2-2-部署与收集系统指标" class="headerlink" title="2.2.2    部署与收集系统指标"></a>2.2.2    部署与收集系统指标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf metricbeat-6.5.4-linux-x86_64.tar.gz</span><br><span class="line">cd metricbeat-6.5.4-linux-x86_64</span><br><span class="line">vim metricbeat.yml</span><br><span class="line"></span><br><span class="line">metricbeat.config.modules:</span><br><span class="line">    path: $&#123;path.config&#125;&#x2F;modules.d&#x2F;*.yml</span><br><span class="line">    reload.enabled: false</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 1</span><br><span class="line">    index.codec: best_compression</span><br><span class="line">setup.kibana:</span><br><span class="line">output.elasticsearch:</span><br><span class="line">    hosts: [&quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">processors:</span><br><span class="line">    - add_host_metadata: ~</span><br><span class="line">    - add_cloud_metadata: ~</span><br><span class="line">    </span><br><span class="line">#启动</span><br><span class="line">.&#x2F;metricbeat -e</span><br></pre></td></tr></table></figure><p>在ELasticsearch中可以看到，系统的一些指标数据已经写入进去了：</p><p><img src="https://img-blog.csdnimg.cn/20200903185627175.png" alt="image-20200903175524645"></p><p>system module配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Module: system</span></span><br><span class="line"><span class="comment"># Docs: https://www.elastic.co/guide/en/beats/metricbeat/6.5/metricbeat-module-system.html</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">metricsets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cpu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">load</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">memory</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">network</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">process</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">process_summary</span></span><br><span class="line">        <span class="comment">#- core</span></span><br><span class="line">        <span class="comment">#- diskio</span></span><br><span class="line">        <span class="comment">#- socket</span></span><br><span class="line">    <span class="attr">process.include_top_n:</span></span><br><span class="line">        <span class="attr">by_cpu:</span> <span class="number">5</span>    <span class="comment"># include top 5 processes by CPU</span></span><br><span class="line">        <span class="attr">by_memory:</span> <span class="number">5</span>  <span class="comment"># include top 5 processes by memory</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">metricsets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">filesystem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">fsstat</span></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">drop_event.when.regexp:</span></span><br><span class="line">        <span class="attr">system.filesystem.mount_point:</span> <span class="string">'^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">15m</span></span><br><span class="line">    <span class="attr">metricsets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">uptime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#- module: system</span></span><br><span class="line"><span class="comment"># period: 5m</span></span><br><span class="line"><span class="comment"># metricsets:</span></span><br><span class="line"><span class="comment">#  - raid</span></span><br><span class="line"><span class="comment"># raid.mount_point: '/'</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-Module"><a href="#2-2-3-Module" class="headerlink" title="2.2.3    Module"></a>2.2.3    Module</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;metricbeat modules list  #查看列表</span><br><span class="line"></span><br><span class="line">Enabled:</span><br><span class="line">system #默认启用</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">aerospike</span><br><span class="line">apache</span><br><span class="line">ceph</span><br><span class="line">couchbase</span><br><span class="line">docker</span><br><span class="line">dropwizard</span><br><span class="line">elasticsearch</span><br><span class="line">envoyproxy</span><br><span class="line">etcd</span><br><span class="line">golang</span><br><span class="line">graphite</span><br><span class="line">haproxy</span><br><span class="line">http</span><br><span class="line">jolokia</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">kubernetes</span><br><span class="line">kvm</span><br><span class="line">logstash</span><br><span class="line">memcached</span><br><span class="line">mongodb</span><br><span class="line">munin</span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">php_fpm</span><br><span class="line">postgresql</span><br><span class="line">prometheus</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">traefik</span><br><span class="line">uwsgi</span><br><span class="line">vsphere</span><br><span class="line">windows</span><br><span class="line">zookeeper</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Nginx-Module"><a href="#2-2-4-Nginx-Module" class="headerlink" title="2.2.4    Nginx Module"></a>2.2.4    Nginx Module</h3><h4 id="2-2-4-1-开启nginx的状态查询"><a href="#2-2-4-1-开启nginx的状态查询" class="headerlink" title="2.2.4.1    开启nginx的状态查询"></a>2.2.4.1    开启nginx的状态查询</h4><p>在nginx中，需要开启状态查询，才能查询到指标数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#重新编译nginx</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">.&#x2F;nginx -V  #查询版本信息</span><br><span class="line">nginx version: nginx&#x2F;1.11.6</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC)</span><br><span class="line">configure arguments: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line">#配置nginx</span><br><span class="line">vim nginx.conf</span><br><span class="line">location &#x2F;nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903185649308.png" alt="image-20200903180139156"></p><p>结果说明：</p><ul><li>Active connections：正在处理的活动连接数</li><li>server accepts handled requests<ul><li>第一个 server 表示Nginx启动到现在共处理了9个连接</li><li>第二个 accepts 表示Nginx启动到现在共成功创建 9 次握手</li><li>第三个 handled requests 表示总共处理了 21 次请求</li><li>请求丢失数 = 握手数 - 连接数 ，可以看出目前为止没有丢失请求</li></ul></li><li>Reading: 0 Writing: 1 Waiting: 1<ul><li>Reading：Nginx 读取到客户端的 Header 信息数</li><li>Writing：Nginx 返回给客户端 Header 信息数</li><li>Waiting：Nginx 已经处理完正在等候下一次请求指令的驻留链接（开启keep-alive的情况下，这个值等于Active - (Reading+Writing)）</li></ul></li></ul><h4 id="2-2-4-2-配置Nginx-Module"><a href="#2-2-4-2-配置Nginx-Module" class="headerlink" title="2.2.4.2    配置Nginx Module"></a>2.2.4.2    配置Nginx Module</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#启用redis module</span><br><span class="line">.&#x2F;metricbeat modules enable nginx</span><br><span class="line"></span><br><span class="line">#修改nginx module配置</span><br><span class="line">vim modules.d&#x2F;nginx.yml</span><br><span class="line"></span><br><span class="line"># Module: nginx</span><br><span class="line"># Docs: https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;beats&#x2F;metricbeat&#x2F;6.5&#x2F;metricbeat-module-nginx.html</span><br><span class="line">- module: nginx</span><br><span class="line">    #metricsets:</span><br><span class="line">    # - stubstatus</span><br><span class="line">    period: 10s</span><br><span class="line">     </span><br><span class="line">    # Nginx hosts</span><br><span class="line">    hosts: [&quot;http:&#x2F;&#x2F;192.168.40.133&quot;]</span><br><span class="line">     </span><br><span class="line">    # Path to server status. Default server-status</span><br><span class="line">    server_status_path: &quot;nginx-status&quot;</span><br><span class="line">    </span><br><span class="line">    #username: &quot;user&quot;</span><br><span class="line">    #password: &quot;secret&quot;</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;metricbeat -e</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903185707520.png" alt="image-20200903180801087"></p><p>可以看到，nginx的指标数据已经写入到了Elasticsearch。</p><p>更多的Module使用参见官方文档：</p><p><a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html</a></p><h1 id="3-Kibana"><a href="#3-Kibana" class="headerlink" title="3.    Kibana"></a>3.    Kibana</h1><p><img src="https://img-blog.csdnimg.cn/20200903185727214.png" alt="image-20200903180901698"></p><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><p>官网：<a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/products/kibana</a></p><h2 id="3-1-配置安装"><a href="#3-1-配置安装" class="headerlink" title="3.1    配置安装"></a>3.1    配置安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#解压安装包</span><br><span class="line">tar -xvf kibana-6.5.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">vim config&#x2F;kibana.yml</span><br><span class="line"></span><br><span class="line">server.host: &quot;192.168.40.133&quot;  #对外暴露服务的地址</span><br><span class="line">elasticsearch.url: &quot;http:&#x2F;&#x2F;192.168.40.133:9200&quot;  #配置Elasticsearch</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;kibana</span><br><span class="line"></span><br><span class="line">#通过浏览器进行访问</span><br><span class="line">http:&#x2F;&#x2F;192.168.40.133:5601&#x2F;app&#x2F;kibana</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185744504.png" alt="image-20200903181114126"></p><p>可以看到kibana页面，并且可以看到提示，导入数据到Kibana。</p><h2 id="3-2-功能说明"><a href="#3-2-功能说明" class="headerlink" title="3.2    功能说明"></a>3.2    功能说明</h2><p><img src="https://img-blog.csdnimg.cn/20200903185802181.png" alt="image-20200903181134649"></p><h2 id="3-3-数据探索"><a href="#3-3-数据探索" class="headerlink" title="3.3    数据探索"></a>3.3    数据探索</h2><p>首先先添加索引信息：</p><p><img src="https://img-blog.csdnimg.cn/2020090318582126.png" alt="image-20200903181457622"></p><p>即可查看索引数据：</p><p><img src="https://img-blog.csdnimg.cn/20200903185837249.png" alt="image-20200903181518004"></p><h2 id="3-4-Metricbeat-仪表盘"><a href="#3-4-Metricbeat-仪表盘" class="headerlink" title="3.4    Metricbeat 仪表盘"></a>3.4    Metricbeat 仪表盘</h2><p>可以将Metricbeat的数据在Kibana中展示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#修改metricbeat配置</span><br><span class="line">setup.kibana:</span><br><span class="line">    host: &quot;192.168.40.133:5601&quot;</span><br><span class="line"></span><br><span class="line">#安装仪表盘到Kibana</span><br><span class="line">.&#x2F;metricbeat setup --dashboards</span><br></pre></td></tr></table></figure><p>即可在Kibana中看到仪表盘数据：</p><p><img src="https://img-blog.csdnimg.cn/2020090318585597.png" alt="image-20200903181757756"></p><p>查看系统信息：</p><p><img src="https://img-blog.csdnimg.cn/20200903185915516.png" alt="image-20200903181813949"></p><h2 id="3-5-Nginx-指标仪表盘"><a href="#3-5-Nginx-指标仪表盘" class="headerlink" title="3.5    Nginx 指标仪表盘"></a>3.5    Nginx 指标仪表盘</h2><p><img src="https://img-blog.csdnimg.cn/20200903185934619.png" alt="image-20200903181831725"></p><p><img src="https://img-blog.csdnimg.cn/20200903185951211.png" alt="image-20200903181839630"></p><h2 id="3-6-Nginx-日志仪表盘"><a href="#3-6-Nginx-日志仪表盘" class="headerlink" title="3.6    Nginx 日志仪表盘"></a>3.6    Nginx 日志仪表盘</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#修改配置文件 vim itcast-nginx.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">#- type: log</span><br><span class="line"># enabled: true</span><br><span class="line"># paths:</span><br><span class="line">#  - &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;*.log</span><br><span class="line"># tags: [&quot;nginx&quot;]</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.elasticsearch:</span><br><span class="line">    hosts: [&quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">    path: $&#123;path.config&#125;&#x2F;modules.d&#x2F;*.yml</span><br><span class="line">    reload.enabled: false</span><br><span class="line">setup.kibana:</span><br><span class="line">    host: &quot;192.168.40.133:5601&quot;</span><br><span class="line"></span><br><span class="line">#安装仪表盘到kibana</span><br><span class="line">.&#x2F;filebeat -c itcast-nginx.yml setup</span><br></pre></td></tr></table></figure><p>可以看到nginx的FileBeat的仪表盘了：</p><p><img src="https://img-blog.csdnimg.cn/20200903190016237.png" alt="image-20200903182017071"></p><p><img src="https://img-blog.csdnimg.cn/20200903190036736.png" alt="image-20200903182023969"></p><p><img src="https://img-blog.csdnimg.cn/20200903190055940.png" alt="image-20200903182036698"></p><h2 id="3-7-自定义图表"><a href="#3-7-自定义图表" class="headerlink" title="3.7    自定义图表"></a>3.7    自定义图表</h2><p>在Kibana中，也可以进行自定义图表，如制作柱形图：</p><p><img src="https://img-blog.csdnimg.cn/2020090319011314.png" alt="image-20200903182054642"></p><p>将图表添加到自定义Dashboard中：</p><p><img src="https://img-blog.csdnimg.cn/20200903190134522.png" alt="image-20200903182137844"></p><h2 id="3-8-开发者工具"><a href="#3-8-开发者工具" class="headerlink" title="3.8    开发者工具"></a>3.8    开发者工具</h2><p>在Kibana中，为开发者的测试提供了便捷的工具使用，如下：</p><p><img src="https://img-blog.csdnimg.cn/20200903190152971.png" alt="image-20200903182212864"></p><h1 id="4-Logstash"><a href="#4-Logstash" class="headerlink" title="4.    Logstash"></a>4.    Logstash</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1    简介"></a>4.1    简介</h2><p><img src="https://img-blog.csdnimg.cn/20200903190210198.png" alt="image-20200903182248277"></p><p>用途：</p><p><img src="https://img-blog.csdnimg.cn/20200903190226796.png" alt="image-20200903182304044"></p><h2 id="4-2-部署安装"><a href="#4-2-部署安装" class="headerlink" title="4.2    部署安装"></a>4.2    部署安装</h2><p><img src="https://img-blog.csdnimg.cn/2020090319024343.png" alt="image-20200903182345875"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查jdk环境，要求jdk1.8+</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压安装包</span></span><br><span class="line">tar -xvf logstash-6.5.4.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个logstash示例</span></span><br><span class="line">bin/logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br></pre></td></tr></table></figure><p>执行效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200903190258178.png" alt="image-20200903182431993"></p><h2 id="4-3-配置详解"><a href="#4-3-配置详解" class="headerlink" title="4.3    配置详解"></a>4.3    配置详解</h2><p>Logstash的配置有三部分，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123; #输入</span><br><span class="line">    stdin &#123; ... &#125; #标准输入</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; #过滤，对数据进行分割、截取等处理</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; #输出</span><br><span class="line">    stdout &#123; ... &#125; #标准输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-1-输入"><a href="#4-3-1-输入" class="headerlink" title="4.3.1    输入"></a>4.3.1    输入</h3><ul><li>采集各种样式、大小和来源的数据，数据往往以各种各样的形式，或分散或集中地存在于很多系统中。</li><li>Logstash 支持各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200903190317426.png" alt="image-20200903182600405"></p><h3 id="4-3-2-过滤"><a href="#4-3-2-过滤" class="headerlink" title="4.3.2    过滤"></a>4.3.2    过滤</h3><ul><li>实时解析和转换数据</li><li>数据从源传输到存储库的过程中，Logstash 过滤器能够解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200903190336152.png" alt="image-20200903182653229"></p><h3 id="4-3-3-输出"><a href="#4-3-3-输出" class="headerlink" title="4.3.3    输出"></a>4.3.3    输出</h3><p>Logstash 提供众多输出选择，您可以将数据发送到您要指定的地方，并且能够灵活地解锁众多下游用例。</p><p><img src="https://img-blog.csdnimg.cn/20200903190354717.png" alt="image-20200903182721846"></p><h2 id="4-4-读取自定义日志"><a href="#4-4-读取自定义日志" class="headerlink" title="4.4    读取自定义日志"></a>4.4    读取自定义日志</h2><p>前面我们通过Filebeat读取了nginx的日志，如果是自定义结构的日志，就需要读取处理后才能使用，所以，这个时候就需要使用Logstash了，因为Logstash有着强大的处理能力，可以应对各种各样的场景。</p><h3 id="4-4-1-日志结构"><a href="#4-4-1-日志结构" class="headerlink" title="4.4.1    日志结构"></a>4.4.1    日志结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-03-15 21:21:21|ERROR|读取数据出错|参数：id&#x3D;1002</span><br></pre></td></tr></table></figure><p>可以看到，日志中的内容是使用“|”进行分割的，使用，我们在处理的时候，也需要对数据做分割处理。</p><h3 id="4-4-2-编写配置文件"><a href="#4-4-2-编写配置文件" class="headerlink" title="4.4.2    编写配置文件"></a>4.4.2    编写配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#vim itcast-pipeline.conf</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path &#x3D;&gt; &quot;&#x2F;itcast&#x2F;logstash&#x2F;logs&#x2F;app.log&quot;</span><br><span class="line">        start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">    split &#x3D;&gt; &#123;&quot;message&quot;&#x3D;&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec &#x3D;&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-启动测试"><a href="#4-4-3-启动测试" class="headerlink" title="4.4.3    启动测试"></a>4.4.3    启动测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;logstash -f .&#x2F;itcast-pipeline.conf</span><br><span class="line"></span><br><span class="line">#写日志到文件</span><br><span class="line">echo &quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id&#x3D;1002&quot; &gt;&gt; app.log</span><br><span class="line"></span><br><span class="line">#输出的结果</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot; &#x3D;&gt; 2019-03-15T08:44:04.749Z,</span><br><span class="line">    &quot;path&quot; &#x3D;&gt; &quot;&#x2F;itcast&#x2F;logstash&#x2F;logs&#x2F;app.log&quot;,</span><br><span class="line">    &quot;@version&quot; &#x3D;&gt; &quot;1&quot;,</span><br><span class="line">    &quot;host&quot; &#x3D;&gt; &quot;node01&quot;,</span><br><span class="line">    &quot;message&quot; &#x3D;&gt; [</span><br><span class="line">        [0] &quot;2019-03-15 21:21:21&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;读取数据出错&quot;,</span><br><span class="line">        [3] &quot;参数：id&#x3D;1002&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，数据已经被分割了。</p><h3 id="4-4-4-输出到Elasticsearch"><a href="#4-4-4-输出到Elasticsearch" class="headerlink" title="4.4.4    输出到Elasticsearch"></a>4.4.4    输出到Elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path &#x3D;&gt; &quot;&#x2F;itcast&#x2F;logstash&#x2F;logs&#x2F;app.log&quot;</span><br><span class="line">        #type &#x3D;&gt; &quot;system&quot;</span><br><span class="line">        start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">    split &#x3D;&gt; &#123;&quot;message&quot;&#x3D;&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts &#x3D;&gt; [ &quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;logstash -f .&#x2F;itcast-pipeline.conf</span><br><span class="line"></span><br><span class="line">#写入数据</span><br><span class="line">echo &quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id&#x3D;1003&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903190439712.png" alt="image-20200903183213936"></p><p><img src="https://img-blog.csdnimg.cn/20200903190418290.png" alt="image-20200903183220282"></p><h1 id="5-综合练习"><a href="#5-综合练习" class="headerlink" title="5.    综合练习"></a>5.    综合练习</h1><p>下面我们将前面所学习到的Elasticsearch + Logstash + Beats + Kibana整合起来做一个综合性的练习，目的就是让学生们能够更加深刻的理解Elastic Stack的使用。</p><h2 id="5-1-流程说明"><a href="#5-1-流程说明" class="headerlink" title="5.1    流程说明"></a>5.1    流程说明</h2><p><img src="https://img-blog.csdnimg.cn/20200903190458505.png" alt="image-20200903183300907"></p><ul><li>应用APP生产日志，用来记录用户的操作<ul><li>[INFO] 2019-03-15 22:55:20 [cn.itcast.dashboard.Main] - DAU|5206|使用优惠券|2019-03-15 03:37:20</li><li>[INFO] 2019-03-15 22:55:21 [cn.itcast.dashboard.Main] - DAU|3880|浏览页面|2019-03-15 07:25:09</li></ul></li><li>通过Filebeat读取日志文件中的内容，并且将内容发送给Logstash，原因是需要对内容做处理</li><li>Logstash接收到内容后，进行处理，如分割操作，然后将内容发送到Elasticsearch中</li><li>Kibana会读取Elasticsearch中的数据，并且在Kibana中进行设计Dashboard，最后进行展示</li></ul><blockquote><p>说明：日志格式、图表、Dashboard都是自定义的。</p></blockquote><h2 id="5-2-APP介绍"><a href="#5-2-APP介绍" class="headerlink" title="5.2    APP介绍"></a>5.2    APP介绍</h2><p>APP在生产环境应该是真实的系统，然而，我们现在仅仅的学习，为了简化操作，所以就做数据的模拟生成即可。</p><p>业务代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] VISIT = <span class="keyword">new</span> String[]&#123;<span class="string">"浏览页面"</span>, <span class="string">"评论商品"</span>, <span class="string">"加入收藏"</span>, <span class="string">"加入购物车"</span>, <span class="string">"提交订单"</span>, <span class="string">"使用优惠券"</span>, <span class="string">"领取优惠券"</span>, <span class="string">"搜索"</span>, <span class="string">"查看订单"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Long sleep = RandomUtils.nextLong(<span class="number">200</span>, <span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">            Thread.sleep(sleep);</span><br><span class="line">            Long maxUserId = <span class="number">9999L</span>;</span><br><span class="line">            Long userId = RandomUtils.nextLong(<span class="number">1</span>, maxUserId);</span><br><span class="line">            String visit = VISIT[RandomUtils.nextInt(<span class="number">0</span>, VISIT.length)];</span><br><span class="line">            DateTime now = <span class="keyword">new</span> DateTime();</span><br><span class="line">            <span class="keyword">int</span> maxHour = now.getHourOfDay();</span><br><span class="line">            <span class="keyword">int</span> maxMillis = now.getMinuteOfHour();</span><br><span class="line">            <span class="keyword">int</span> maxSeconds = now.getSecondOfMinute();</span><br><span class="line">            String date = now.plusHours(-(RandomUtils.nextInt(<span class="number">0</span>, maxHour)))</span><br><span class="line">                    .plusMinutes(-(RandomUtils.nextInt(<span class="number">0</span>, maxMillis)))</span><br><span class="line">                    .plusSeconds(-(RandomUtils.nextInt(<span class="number">0</span>, maxSeconds)))</span><br><span class="line">                    .toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">            String result = <span class="string">"DAU|"</span> + userId + <span class="string">"|"</span> + visit + <span class="string">"|"</span> + date;</span><br><span class="line">            LOGGER.info(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[INFO] 2019-03-15 22:54:42 [cn.itcast.dashboard.Main] - DAU|4645|领取优惠券|2019-03-15 07:40:29</span><br><span class="line">[INFO] 2019-03-15 22:54:44 [cn.itcast.dashboard.Main] - DAU|3482|领取优惠券|2019-03-15 18:34:04</span><br><span class="line">[INFO] 2019-03-15 22:54:48 [cn.itcast.dashboard.Main] - DAU|5607|加入收藏|2019-03-15 22:44:09</span><br><span class="line">[INFO] 2019-03-15 22:54:50 [cn.itcast.dashboard.Main] - DAU|9619|加入收藏|2019-03-15 21:39:47</span><br><span class="line">[INFO] 2019-03-15 22:54:53 [cn.itcast.dashboard.Main] - DAU|7666|加入收藏|2019-03-15 17:47:18</span><br><span class="line">[INFO] 2019-03-15 22:54:54 [cn.itcast.dashboard.Main] - DAU|4871|提交订单|2019-03-15 02:36:27</span><br><span class="line">[INFO] 2019-03-15 22:54:55 [cn.itcast.dashboard.Main] - DAU|7126|加入收藏|2019-03-15 16:11:06</span><br><span class="line">[INFO] 2019-03-15 22:55:00 [cn.itcast.dashboard.Main] - DAU|9606|评论商品|2019-03-15 02:12:00</span><br><span class="line">[INFO] 2019-03-15 22:55:02 [cn.itcast.dashboard.Main] - DAU|7698|查看订单|2019-03-15 08:17:02</span><br></pre></td></tr></table></figure><p>代码在资料中可以找到，itcast-dashboard-generate.zip。</p><p>部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#打包成jar包，在linux上运行</span><br><span class="line">java -jar itcast-dashboard-generate-1.0-SNAPSHOT.jar</span><br><span class="line">#运行之后，就可以将日志写入到&#x2F;itcast&#x2F;logs&#x2F;app.log文件中</span><br></pre></td></tr></table></figure><h2 id="5-3-Filebeat"><a href="#5-3-Filebeat" class="headerlink" title="5.3    Filebeat"></a>5.3    Filebeat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#vim itcast-dashboard.yml</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">    enabled: true</span><br><span class="line">    paths:</span><br><span class="line">    - &#x2F;itcast&#x2F;logs&#x2F;*.log</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.logstash:</span><br><span class="line">    hosts: [&quot;192.168.40.133:5044&quot;]</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;filebeat -e -c itcast-dashboard.yml</span><br></pre></td></tr></table></figure><h2 id="5-4-Logstash"><a href="#5-4-Logstash" class="headerlink" title="5.4    Logstash"></a>5.4    Logstash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#vim itcast-dashboard.conf</span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">    port &#x3D;&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123; </span><br><span class="line">    split &#x3D;&gt; &#123;&quot;message&quot;&#x3D;&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        add_field &#x3D;&gt; &#123;</span><br><span class="line">            &quot;userId&quot; &#x3D;&gt; &quot;%&#123;message[1]&#125;&quot;</span><br><span class="line">            &quot;visit&quot; &#x3D;&gt; &quot;%&#123;message[2]&#125;&quot;</span><br><span class="line">            &quot;date&quot; &#x3D;&gt; &quot;%&#123;message[3]&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        convert &#x3D;&gt; &#123;</span><br><span class="line">            &quot;userId&quot; &#x3D;&gt; &quot;integer&quot;</span><br><span class="line">            &quot;visit&quot; &#x3D;&gt; &quot;string&quot;</span><br><span class="line">            &quot;date&quot; &#x3D;&gt; &quot;string&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#output &#123;</span><br><span class="line">#  stdout &#123; codec &#x3D;&gt; rubydebug &#125;</span><br><span class="line">#&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts &#x3D;&gt; [ &quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;logstash -f itcast-dashboard.conf</span><br></pre></td></tr></table></figure><h2 id="5-5-Kibana"><a href="#5-5-Kibana" class="headerlink" title="5.5    Kibana"></a>5.5    Kibana</h2><p>启动Kibana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;kibana</span><br><span class="line"></span><br><span class="line">#通过浏览器进行访问</span><br><span class="line">http:&#x2F;&#x2F;192.168.40.133:5601&#x2F;app&#x2F;kibana</span><br></pre></td></tr></table></figure><p>添加Logstash索引到Kibana中：</p><p><img src="https://img-blog.csdnimg.cn/2020090319051996.png" alt="image-20200903184049472"></p><h3 id="5-5-1-时间间隔的柱形图"><a href="#5-5-1-时间间隔的柱形图" class="headerlink" title="5.5.1    时间间隔的柱形图"></a>5.5.1    时间间隔的柱形图</h3><p><img src="https://img-blog.csdnimg.cn/20200903190536862.png" alt="image-20200903184150143"></p><p>说明：x轴是时间，以天为单位，y轴是count数</p><p>保存：（my-dashboard-时间间隔的柱形图）</p><p><img src="https://img-blog.csdnimg.cn/20200903190602159.png" alt="image-20200903184211005"></p><h3 id="5-5-2-各个操作的饼图分布"><a href="#5-5-2-各个操作的饼图分布" class="headerlink" title="5.5.2    各个操作的饼图分布"></a>5.5.2    各个操作的饼图分布</h3><p><img src="https://img-blog.csdnimg.cn/20200903190618493.png" alt="image-20200903184231635"></p><p>统计各个操作的数量，形成饼图。</p><p>保存：（my-dashboard-各个操作的饼图）</p><p><img src="https://img-blog.csdnimg.cn/2020090319063553.png" alt="image-20200903184253645"></p><h3 id="5-5-3-数据表格"><a href="#5-5-3-数据表格" class="headerlink" title="5.5.3    数据表格"></a>5.5.3    数据表格</h3><p><img src="https://img-blog.csdnimg.cn/20200903190709843.png" alt="image-20200903184309960"></p><p>在数据探索中进行保存，并且保存，将各个操作的数据以表格的形式展现出来。</p><p>保存：（my-dashboard-表格）</p><p><img src="https://img-blog.csdnimg.cn/20200903190650555.png" alt="image-20200903184330119"></p><h2 id="5-6-制作Dashboard"><a href="#5-6-制作Dashboard" class="headerlink" title="5.6    制作Dashboard"></a>5.6    制作Dashboard</h2><p><img src="https://img-blog.csdnimg.cn/20200903190737319.png" alt="image-20200903184343891"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Nginx日志分析系统&quot;&gt;&lt;a href=&quot;#1-Nginx日志分析系统&quot; class=&quot;headerlink&quot; title=&quot;1.    Nginx日志分析系统&quot;&gt;&lt;/a&gt;1.    Nginx日志分析系统&lt;/h1&gt;&lt;h2 id=&quot;1-1-项目需求&quot;&gt;&lt;a href=&quot;#1-1-项目需求&quot; class=&quot;headerlink&quot; title=&quot;1.1    项目需求&quot;&gt;&lt;/a&gt;1.1    项目需求&lt;/h2&gt;&lt;p&gt;Nginx是一款非常优秀的web服务器，往往nginx服务会作为项目的访问入口，那么，nginx的性能保障就变得非常重要了，如果nginx的运行出现了问题就会对项目有较大的影响，所以，我们需要对nginx的运行有监控措施，实时掌握nginx的运行情况，那就需要收集nginx的运行指标和分析nginx的运行日志了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="ElasticStack" scheme="https://wgy1993.gitee.io/tags/ElasticStack/"/>
    
  </entry>
  
  <entry>
    <title>ElasticStack(一)</title>
    <link href="https://wgy1993.gitee.io/archives/b4bf25de.html"/>
    <id>https://wgy1993.gitee.io/archives/b4bf25de.html</id>
    <published>2020-09-01T14:24:37.000Z</published>
    <updated>2020-09-01T15:18:50.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Elastic-Stack简介"><a href="#1-Elastic-Stack简介" class="headerlink" title="1.    Elastic Stack简介"></a>1.    Elastic Stack简介</h1><p>如果你没有听说过Elastic Stack，那你一定听说过ELK，实际上ELK是三款软件的简称，分别是Elasticsearch、Logstash、Kibana组成，在发展的过程中，又有新成员Beats的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200901223646724.png" alt="image-20200901075610228"></p><p>全系的Elastic Stack技术栈包括：</p><p><img src="https://img-blog.csdnimg.cn/20200901223646760.png" alt="image-20200901075637504"></p><p><strong>Elasticsearch</strong></p><p>Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p><strong>Logstash</strong></p><p>Logstash 基于java，是一个开源的用于收集,分析和存储日志的工具。</p><p><strong>Kibana</strong></p><p>Kibana 基于nodejs，也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的Web 界面，可以汇总、分析和搜索重要数据日志。</p><p><strong>Beats</strong></p><p>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch，然后进行后续的数据分析活动。</p><p>Beats由如下组成:</p><ul><li>Packetbeat：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议；</li><li>Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder；</li><li>Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务；</li><li>Winlogbeat：用于监控、收集Windows系统的日志信息；</li></ul><h1 id="2-Elasticsearch"><a href="#2-Elasticsearch" class="headerlink" title="2.    Elasticsearch"></a>2.    Elasticsearch</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1    简介"></a>2.1    简介</h2><p><img src="https://img-blog.csdnimg.cn/20200901223646663.png" alt="image-20200901080306083"></p><p>官网：<a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/products/elasticsearch</a></p><p><img src="https://img-blog.csdnimg.cn/20200901223646704.png" alt="image-20200901080346341"></p><h2 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2    安装"></a>2.2    安装</h2><h3 id="2-2-1-版本说明"><a href="#2-2-1-版本说明" class="headerlink" title="2.2.1    版本说明"></a>2.2.1    版本说明</h3><p>Elasticsearch的发展是非常快速的，所以在ES5.0之前，ELK的各个版本都不统一，出现了版本号混乱的状态，所以从5.0开始，所有Elastic Stack中的项目全部统一版本号。目前最新版本是6.5.4，我们将基于这一版本进行学习。</p><p><img src="https://img-blog.csdnimg.cn/20200901223646722.png" alt="image-20200901080434209"></p><h3 id="2-2-2-下载"><a href="#2-2-2-下载" class="headerlink" title="2.2.2    下载"></a>2.2.2    下载</h3><p>地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p><img src="https://img-blog.csdnimg.cn/20200901223646666.png" alt="image-20200901080459373"></p><p>或者，使用资料中提供的已下载好的安装包。</p><h3 id="2-2-3-单机版安装"><a href="#2-2-3-单机版安装" class="headerlink" title="2.2.3    单机版安装"></a>2.2.3    单机版安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#创建elsearch用户，Elasticsearch不支持root用户运行</span><br><span class="line">useradd elsearch</span><br><span class="line"></span><br><span class="line">#解压安装包</span><br><span class="line">tar -zxvf elasticsearch-6.5.4.tar.gz -C &#x2F;wgy&#x2F;es&#x2F;</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">vim conf&#x2F;elasticsearch.yml</span><br><span class="line">network.host: 0.0.0.0  #设置ip地址，任意网络均可访问</span><br><span class="line"></span><br><span class="line">#说明：在Elasticsearch中如果，network.host不是localhost或者127.0.0.1的话，就会认为是生产环境，</span><br><span class="line">#会对环境的要求比较高，我们的测试环境不一定能够满足，一般情况下需要修改2处配置，如下：</span><br><span class="line">#1：修改jvm启动参数</span><br><span class="line">vim conf&#x2F;jvm.options</span><br><span class="line">-Xms128m #根据自己机器情况修改</span><br><span class="line">-Xmx128m</span><br><span class="line"></span><br><span class="line">#2：一个进程在VMAs(虚拟内存区域)创建内存映射最大数量</span><br><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">vm.max_map_count&#x3D;655360</span><br><span class="line"></span><br><span class="line">sysctl -p #配置生效</span><br><span class="line"></span><br><span class="line">#启动ES服务</span><br><span class="line">su elsearch</span><br><span class="line">cd bin</span><br><span class="line">.&#x2F;elasticsearch 或 .&#x2F;elasticsearch -d #后台启动</span><br><span class="line"></span><br><span class="line">#通过访问进行测试，看到如下信息，就说明ES启动成功了</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;dSQV6I8&quot;,</span><br><span class="line">  &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot;: &quot;v5GPTWAtT5emxFdjigFg-w&quot;,</span><br><span class="line">  &quot;version&quot;: &#123;</span><br><span class="line">    &quot;number&quot;: &quot;6.5.4&quot;,</span><br><span class="line">    &quot;build_flavor&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot;: &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot;: &quot;d2ef93d&quot;,</span><br><span class="line">    &quot;build_date&quot;: &quot;2018-12-17T21:17:40.758843Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot;: false,</span><br><span class="line">    &quot;lucene_version&quot;: &quot;7.5.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot;: &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot;: &quot;5.0.0&quot;</span><br><span class="line"> &#125;,</span><br><span class="line">  &quot;tagline&quot;: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#停止服务</span><br><span class="line">root@itcast:~# jps</span><br><span class="line">68709 Jps</span><br><span class="line">68072 Elasticsearch</span><br><span class="line">kill 68072  #通过kill结束进程</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#启动出错，环境：Centos6</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">#解决：切换到root用户，编辑limits.conf 添加类似如下内容</span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line">添加如下内容:</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line"></span><br><span class="line">[2]: max number of threads [1024] for user [elsearch] is too low, increase to at least [4096]</span><br><span class="line">#解决：切换到root用户，进入limits.d目录下修改配置文件。</span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf</span><br><span class="line">#修改如下内容：</span><br><span class="line">* soft nproc 1024</span><br><span class="line">#修改为</span><br><span class="line">* soft nproc 4096</span><br><span class="line"></span><br><span class="line">[3]: system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</span><br><span class="line">#解决：Centos6不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为true</span><br><span class="line">vim config&#x2F;elasticsearch.yml</span><br><span class="line">添加：</span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure><h3 id="2-2-4-elasticsearch-head"><a href="#2-2-4-elasticsearch-head" class="headerlink" title="2.2.4    elasticsearch-head"></a>2.2.4    elasticsearch-head</h3><p>由于ES官方并没有为ES提供界面管理工具，仅仅是提供了后台的服务。elasticsearch-head是一个为ES开发的一个页面客户端工具，其源码托管于GitHub，地址为：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></p><p>head提供了4种安装方式：</p><ul><li>源码安装，通过npm run start启动（不推荐）</li><li>通过docker安装（推荐）</li><li>通过chrome插件安装（推荐）</li><li>通过ES的plugin方式安装（不推荐）</li></ul><p><strong>通过docker安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker create --name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker start elasticsearch-head</span><br></pre></td></tr></table></figure><p>通过浏览器进行访问：</p><p><img src="https://img-blog.csdnimg.cn/20200901223646686.png" alt="image-20200901081429960"></p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置，如下：</span><br><span class="line">vim elasticsearch.yml</span><br><span class="line">http.cors.enabled: true http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">通过chrome插件的方式安装不存在该问题。</span><br></pre></td></tr></table></figure><p><strong>chrome插件的方式安装</strong></p><p>打开chrome的应用商店，即可安装<a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm</a></p><p><img src="https://img-blog.csdnimg.cn/20200901223646679.png" alt="image-20200901081631006"></p><p>建议：推荐使用chrome插件的方式安装，如果网络环境不允许，就采用其它方式安装。</p><h2 id="2-3-基本概念"><a href="#2-3-基本概念" class="headerlink" title="2.3    基本概念"></a>2.3    基本概念</h2><p><strong>索引</strong></p><ul><li>索引（index）是Elasticsearch对逻辑数据的逻辑存储，所以它可以分为更小的部分。</li><li>可以把索引看成关系型数据库的表，索引的结构是为快速有效的全文索引准备的，特别是它不存储原始值。</li><li>Elasticsearch可以把索引存放在一台机器或者分散在多台服务器上，每个索引有一或多个分片（shard），每个分片可以有多个副本（replica）。</li></ul><p><strong>文档</strong></p><ul><li>存储在Elasticsearch中的主要实体叫文档（document）。用关系型数据库来类比的话，一个文档相当于数据库表中的一行记录。</li><li>Elasticsearch和MongoDB中的文档类似，都可以有不同的结构，但Elasticsearch的文档中，相同字段必须有相同类型。</li><li>文档由多个字段组成，每个字段可能多次出现在一个文档里，这样的字段叫多值字段（multivalued）。</li><li>每个字段的类型，可以是文本、数值、日期等。字段类型也可以是复杂类型，一个字段包含其他子文档或者数组。</li></ul><p><strong>映射</strong></p><ul><li>所有文档写进索引之前都会先进行分析，如何将输入的文本分割为词条、哪些词条又会被过滤，这种行为叫做映射（mapping）。一般由用户自己定义规则。</li></ul><p><strong>文档类型</strong></p><ul><li>在Elasticsearch中，一个索引对象可以存储很多不同用途的对象。例如，一个博客应用程序可以保存文章和评论。</li><li>每个文档可以有不同的结构。</li><li>不同的文档类型不能为相同的属性设置不同的类型。例如，在同一索引中的所有文档类型中，一个叫title的字段必须具有相同的类型。</li></ul><h2 id="2-4-RESTful-API"><a href="#2-4-RESTful-API" class="headerlink" title="2.4    RESTful API"></a>2.4    RESTful API</h2><p>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。</p><h3 id="2-4-1-创建非结构化索引"><a href="#2-4-1-创建非结构化索引" class="headerlink" title="2.4.1    创建非结构化索引"></a>2.4.1    创建非结构化索引</h3><p>在Lucene中，创建索引是需要定义字段名称以及字段的类型的，在Elasticsearch中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在Elasticsearch底层会进行结构化操作，此操作对用户是透明的。</p><p>创建空索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;haoke</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;2&quot;, #分片数</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot; #副本数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#删除索引</span><br><span class="line">DELETE &#x2F;haoke</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901223646673.png" alt="image-20200901082637834"></p><h3 id="2-4-2-插入数据"><a href="#2-4-2-插入数据" class="headerlink" title="2.4.2    插入数据"></a>2.4.2    插入数据</h3><p>URL规则：POST /{索引}/{类型}/{id}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;1001</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;:1001,</span><br><span class="line">    &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;age&quot;:20,</span><br><span class="line">    &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#响应</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 0,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901223646685.png" alt="image-20200901082857440"></p><blockquote><p>说明：非结构化的索引，不需要事先创建，直接插入数据默认创建索引。</p></blockquote><p>不指定id插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;:1002,</span><br><span class="line">    &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;age&quot;:20,</span><br><span class="line">    &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224229231.png" alt="image-20200901083109482"></p><h3 id="2-4-3-更新数据"><a href="#2-4-3-更新数据" class="headerlink" title="2.4.3    更新数据"></a>2.4.3    更新数据</h3><p>在Elasticsearch中，文档数据是不为修改的，但是可以通过覆盖的方式进行更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;haoke&#x2F;user&#x2F;1001</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;:1001,</span><br><span class="line">    &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;age&quot;:21,</span><br><span class="line">    &quot;sex&quot;:&quot;女&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200901224253509.png" alt="image-20200901083307888"></p><p><img src="https://img-blog.csdnimg.cn/20200901224309990.png" alt="image-20200901083314377"></p><p>可以看到数据已经被覆盖了。</p><p>问题来了，可以局部更新吗？ – 可以的。</p><p>前面不是说，文档数据不能更新吗？ 其实是这样的：</p><p>在内部，依然会查询到这个文档数据，然后进行覆盖操作，步骤如下：</p><ul><li>从旧文档中检索JSON</li><li>修改它</li><li>删除旧文档</li><li>索引新文档</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#注意：这里多了_update标识</span><br><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;1001&#x2F;_update</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;:&#123;</span><br><span class="line">        &quot;age&quot;:23</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224330607.png" alt="image-20200901083512106"></p><p><img src="https://img-blog.csdnimg.cn/20200901224349552.png" alt="image-20200901083516956"></p><p>可以看到数据已经被局部更新了。</p><h3 id="2-4-4-删除数据"><a href="#2-4-4-删除数据" class="headerlink" title="2.4.4    删除数据"></a>2.4.4    删除数据</h3><p>在Elasticsearch中，删除文档数据，只需要发起DELETE请求即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;haoke&#x2F;user&#x2F;1001</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224409204.png" alt="image-20200901083557773"></p><p>需要注意的是，result表示已经删除，version也更加了。</p><p>如果删除一条不存在的数据，会响应404：</p><p><img src="https://img-blog.csdnimg.cn/20200901224434971.png" alt="image-20200901083613904"></p><p>说明：</p><blockquote><p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。</p></blockquote><h3 id="2-4-5-搜索数据"><a href="#2-4-5-搜索数据" class="headerlink" title="2.4.5    搜索数据"></a>2.4.5    搜索数据</h3><p><strong>根据id搜索数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;BbPe_WcB9cFOnF3uebvr</span><br><span class="line"></span><br><span class="line">#返回的数据如下</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;BbPe_WcB9cFOnF3uebvr&quot;,</span><br><span class="line">    &quot;_version&quot;: 8,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;  #原始数据在这里</span><br><span class="line">                &quot;id&quot;: 1002,</span><br><span class="line">                &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">                &quot;age&quot;: 40,</span><br><span class="line">                &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">               &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>搜索全部数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;_search </span><br><span class="line"></span><br><span class="line">#响应：（默认返回10条数据）</span><br><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 26,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 2,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 4,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BbPe_WcB9cFOnF3uebvr&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1002,</span><br><span class="line">                    &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">                    &quot;age&quot;: 40,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1001&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1001,</span><br><span class="line">                    &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">                    &quot;age&quot;: 20,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1003&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1003,</span><br><span class="line">                    &quot;name&quot;: &quot;王五&quot;,</span><br><span class="line">                    &quot;age&quot;: 30,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1004&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1004,</span><br><span class="line">                    &quot;name&quot;: &quot;赵六&quot;,</span><br><span class="line">                    &quot;age&quot;: 30,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键字搜素数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询年龄等于20的用户</span><br><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;_search?q&#x3D;age:20</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224507746.png" alt="image-20200901084106303"></p><h3 id="2-4-6-DSL搜索"><a href="#2-4-6-DSL搜索" class="headerlink" title="2.4.6    DSL搜索"></a>2.4.6    DSL搜索</h3><p>Elasticsearch提供丰富且灵活的查询语言叫做<strong>DSL查询(Query DSL)</strong>,它允许你构建更加复杂、强大的查询。</p><p><strong>DSL(Domain Specific Language特定领域语言)</strong>以JSON请求体的形式出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;  #match只是查询的一种</span><br><span class="line">                   &quot;age&quot; : 20</span><br><span class="line">                  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><p><img src="https://img-blog.csdnimg.cn/20200901224527504.png" alt="image-20200901084549255"></p><p><strong>实现：查询年龄大于30岁的男性用户。</strong></p><p>现有数据：</p><p><img src="https://img-blog.csdnimg.cn/20200901224552556.png" alt="image-20200901084631014"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                    &quot;age&quot;: &#123;</span><br><span class="line">                        &quot;gt&quot;: 30</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224618687.png" alt="image-20200901084737578"></p><p><strong>全文搜索</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三 李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224641910.png" alt="image-20200901084937381"></p><h3 id="2-4-7-高亮显示"><a href="#2-4-7-高亮显示" class="headerlink" title="2.4.7    高亮显示"></a>2.4.7    高亮显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三 李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224712488.png" alt="image-20200901085051218"></p><h3 id="2-4-8-聚合"><a href="#2-4-8-聚合" class="headerlink" title="2.4.8    聚合"></a>2.4.8    聚合</h3><p>在Elasticsearch中，支持聚合操作，类似SQL中的group by操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;all_interests&quot;: &#123;</span><br><span class="line">            &quot;terms&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;age&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224743963.png" alt="image-20200901093159274"></p><p>从结果可以看出，年龄30的有2条数据，20的有一条，40的一条。</p><h1 id="3-核心详解"><a href="#3-核心详解" class="headerlink" title="3.    核心详解"></a>3.    核心详解</h1><h2 id="3-1-文档"><a href="#3-1-文档" class="headerlink" title="3.1    文档"></a>3.1    文档</h2><p>在Elasticsearch中，文档以JSON格式进行存储，可以是复杂的结构，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1005"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1005</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"孙七"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">37</span>,</span><br><span class="line">        <span class="attr">"sex"</span>: <span class="string">"女"</span>,</span><br><span class="line">        <span class="attr">"card"</span>: &#123;</span><br><span class="line">            <span class="attr">"card_number"</span>: <span class="string">"123456789"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，card是一个复杂对象，嵌套的Card对象。</p><p><strong>元数据（metadata）</strong></p><p>一个文档不只有数据。它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是：</p><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td>_index</td><td>文档存储的地方</td></tr><tr><td>_type</td><td>文档代表的对象的类</td></tr><tr><td>_id</td><td>文档的唯一标识</td></tr></tbody></table><p><strong>_index</strong></p><p>索引(index)类似于关系型数据库里的“数据库”——它是我们存储和索引关联数据的地方。</p><blockquote><p>提示：<br>事实上，我们的数据被存储和索引在分片(shards)中，索引只是一个把一个或多个分片分组在一起的逻辑空间。然而，这只是一些内部细节——我们的程序完全不用关心分片。对于我们的程序而言，文档存储在索引(index)中。剩下的细节由Elasticsearch关心既可。</p></blockquote><p><strong>_type</strong></p><p>在应用中，我们使用对象表示一些“事物”，例如一个用户、一篇博客、一个评论，或者一封邮件。每个对象都属于一个类(class)，这个类定义了属性或与对象关联的数据。 user 类的对象可能包含姓名、性别、年龄和Email地址。</p><p>在关系型数据库中，我们经常将相同类的对象存储在一个表里，因为它们有着相同的结构。同理，在Elasticsearch中，我们使用相同类型(type)的文档表示相同的“事物”，因为他们的数据结构也是相同的。</p><p>每个类型(type)都有自己的映射(mapping)或者结构定义，就像传统数据库表中的列一样。所有类型下的文档被存储在同一个索引下，但是类型的映射(mapping)会告诉Elasticsearch不同的文档如何被索引。</p><p>_type 的名字可以是大写或小写，不能包含下划线或逗号。我们将使用 blog 做为类型名。</p><p><strong>_id</strong></p><p>id仅仅是一个字符串，它与 _index 和 _type 组合时，就可以在Elasticsearch中唯一标识一个文档。当创建一个文档，你可以自定义 _id ，也可以让Elasticsearch帮你自动生成（32位长度）。</p><h2 id="3-2-查询响应"><a href="#3-2-查询响应" class="headerlink" title="3.2    查询响应"></a>3.2    查询响应</h2><h3 id="3-2-1-pretty"><a href="#3-2-1-pretty" class="headerlink" title="3.2.1    pretty"></a>3.2.1    pretty</h3><p>可以在查询url后面添加pretty参数，使得返回的json更易查看。</p><p><img src="https://img-blog.csdnimg.cn/20200901224807568.png" alt="image-20200901095201071"></p><h3 id="3-2-2-指定响应字段"><a href="#3-2-2-指定响应字段" class="headerlink" title="3.2.2    指定响应字段"></a>3.2.2    指定响应字段</h3><p>在响应的数据中，如果我们不需要全部的字段，可以指定某些需要的字段进行返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;1005?_source&#x3D;id,name</span><br><span class="line"></span><br><span class="line">#响应</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1005&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;孙七&quot;,</span><br><span class="line">        &quot;id&quot;: 1005</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不需要返回元数据，仅仅返回原始数据，可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;1005&#x2F;_source</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224830548.png" alt="image-20200901095416042"></p><p>还可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;1005&#x2F;_source?_source&#x3D;id,name</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224859288.png" alt="image-20200901095436293"></p><h2 id="3-3-判断文档是否存在"><a href="#3-3-判断文档是否存在" class="headerlink" title="3.3    判断文档是否存在"></a>3.3    判断文档是否存在</h2><p>如果我们只需要判断文档是否存在，而不是查询文档内容，那么可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD &#x2F;haoke&#x2F;user&#x2F;1005</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224919533.png" alt="image-20200901095525632"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD &#x2F;haoke&#x2F;user&#x2F;1006</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224936298.png" alt="image-20200901095543845"></p><p>当然，这只表示你在查询的那一刻文档不存在，但并不表示几毫秒后依旧不存在。另一个进程在这期间可能创建新文档。</p><h2 id="3-4-批量操作"><a href="#3-4-批量操作" class="headerlink" title="3.4    批量操作"></a>3.4    批量操作</h2><p>有些情况下可以通过批量操作以减少网络请求。如：批量查询、批量插入数据。</p><h3 id="3-4-1-批量查询"><a href="#3-4-1-批量查询" class="headerlink" title="3.4.1    批量查询"></a>3.4.1    批量查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_mget</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ids&quot; : [ &quot;1001&quot;, &quot;1003&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224956264.png" alt="image-20200901095719268"></p><p>如果，某一条数据不存在，不影响整体响应，需要通过found的值进行判断是否查询到数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_mget</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ids&quot; : [ &quot;1001&quot;, &quot;1006&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225020386.png" alt="image-20200901095816045"></p><h3 id="3-4-2-bulk操作"><a href="#3-4-2-bulk操作" class="headerlink" title="3.4.2    _bulk操作"></a>3.4.2    _bulk操作</h3><p>在Elasticsearch中，支持批量的插入、修改、删除操作，都是通过_bulk的api完成的。</p><p>请求格式如下：（请求格式不同寻常）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body    &#125;\n</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body    &#125;\n</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>批量插入数据：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"create"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2001</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2001</span>,<span class="attr">"name"</span>:<span class="string">"name1"</span>,<span class="attr">"age"</span>: <span class="number">20</span>,<span class="attr">"sex"</span>: <span class="string">"男"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"create"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2002</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2002</span>,<span class="attr">"name"</span>:<span class="string">"name2"</span>,<span class="attr">"age"</span>: <span class="number">20</span>,<span class="attr">"sex"</span>: <span class="string">"男"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"create"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2003</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2003</span>,<span class="attr">"name"</span>:<span class="string">"name3"</span>,<span class="attr">"age"</span>: <span class="number">20</span>,<span class="attr">"sex"</span>: <span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure><p>注意最后一行的回车。</p><p><img src="https://img-blog.csdnimg.cn/20200901225047107.png" alt="image-20200901100005729"></p><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"create"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2001"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">24</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">201</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"create"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2002"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">201</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"create"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2003"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">201</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>批量删除：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"delete"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2001</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"delete"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2002</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"delete"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2003</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>由于delete没有请求体，所以，action的下一行直接就是下一个action。</p><p><img src="https://img-blog.csdnimg.cn/20200901225110908.png" alt="image-20200901100150714"></p><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"delete"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2001"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">25</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"delete"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2002"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"delete"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2003"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他操作就类似了。</p><p>一次请求多少性能最高？</p><ul><li>整个批量请求需要被加载到接受我们请求节点的内存里，所以请求越大，给其它请求可用的内存就越小。有一个最佳的bulk请求大小。超过这个大小，性能不再提升而且可能降低。</li><li>最佳大小，当然并不是一个固定的数字。它完全取决于你的硬件、你文档的大小和复杂度以及索引和搜索的负载。</li><li>幸运的是，这个最佳点(sweetspot)还是容易找到的：试着批量索引标准的文档，随着大小的增长，当性能开始降低，说明你每个批次的大小太大了。开始的数量可以在1000~5000个文档之间，如果你的文档非常大，可以使用较小的批次。</li><li>通常着眼于你请求批次的物理大小是非常有用的。一千个1kB的文档和一千个1MB的文档大不相同。一个好的批次最好保持在5-15MB大小间。</li></ul><h2 id="3-5-分页"><a href="#3-5-分页" class="headerlink" title="3.5    分页"></a>3.5    分页</h2><p>和SQL使用 LIMIT 关键字返回只有一页的结果一样，Elasticsearch接受 from 和 size 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size: 结果数，默认10</span><br><span class="line">from: 跳过开始的结果数，默认0</span><br></pre></td></tr></table></figure><p>如果你想每页显示5个结果，页码从1到3，那请求如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search?size&#x3D;5</span><br><span class="line">GET &#x2F;_search?size&#x3D;5&amp;from&#x3D;5</span><br><span class="line">GET &#x2F;_search?size&#x3D;5&amp;from&#x3D;10</span><br></pre></td></tr></table></figure><p>应该当心分页太深或者一次请求太多的结果。结果在返回前会被排序。但是记住一个搜索请求常常涉及多个分片。每个分片生成自己排好序的结果，它们接着需要集中起来排序以确保整体排序正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;_search?size&#x3D;1&amp;from&#x3D;2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225140388.png" alt="image-20200901102410178"></p><p><strong>在集群系统中深度分页</strong></p><p>为了理解为什么深度分页是有问题的，让我们假设在一个有5个主分片的索引中搜索。当我们请求结果的第一页（结果1到10）时，每个分片产生自己最顶端10个结果然后返回它们给请求节点(requesting node)，它再排序这所有的50个结果以选出顶端的10个结果。</p><p>现在假设我们请求第1000页——结果10001到10010。工作方式都相同，不同的是每个分片都必须产生顶端的10010个结果。然后请求节点排序这50050个结果并丢弃50040个！</p><p>你可以看到在分布式系统中，排序结果的花费随着分页的深入而成倍增长。这也是为什么网络搜索引擎中任何语句不能返回多于1000个结果的原因。</p><h2 id="3-6-映射"><a href="#3-6-映射" class="headerlink" title="3.6    映射"></a>3.6    映射</h2><p>前面我们创建的索引以及插入数据，都是由Elasticsearch进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则，自动判断的类型和实际需求是不相符的。</p><p>自动判断的规则如下：</p><table><thead><tr><th>JSON type</th><th>Field type</th></tr></thead><tbody><tr><td>Boolean:  true or  false</td><td>“boolean”</td></tr><tr><td>Whole number:  123</td><td>“long”</td></tr><tr><td>Floating point:  123.45</td><td>“double”</td></tr><tr><td>String, valid date:  “2014-09-15”</td><td>“date”</td></tr><tr><td>String:  “foo bar”</td><td>“string”</td></tr></tbody></table><p>Elasticsearch中支持的类型如下：</p><table><thead><tr><th>类型</th><th>表示的数据类型</th></tr></thead><tbody><tr><td>String</td><td>string , text , keyword</td></tr><tr><td>Whole number</td><td>byte ,  short ,  integer ,  long</td></tr><tr><td>Floating point</td><td>float ,  double</td></tr><tr><td>Boolean</td><td>boolean</td></tr><tr><td>Date</td><td>date</td></tr></tbody></table><ul><li>string类型在ElasticSearch 旧版本中使用较多，从ElasticSearch 5.x开始不再支持string，由text和keyword类型替代。</li><li>text 类型，当一个字段是要被全文搜索的，比如Email内容、产品描述，应该使用text类型。设置text类型以后，字段内容会被分析，在生成倒排索引以前，字符串会被分析器分成一个一个词项。text类型的字段不用于排序，很少用于聚合。</li><li>keyword类型适用于索引结构化的字段，比如email地址、主机名、状态码和标签。如果字段需要进行过滤(比如查找已发布博客中status属性为published的文章)、排序、聚合。keyword类型的字段只能通过精确值搜索到。</li></ul><p>创建明确类型的索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;itcast</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;2&quot;,</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;person&quot;: &#123;</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;age&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;mail&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;hobby&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;itcast&#x2F;_mapping</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225206892.png" alt="image-20200901103311660"></p><p>插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;_bulk</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;: 20,&quot;mail&quot;: &quot;111@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;: 21,&quot;mail&quot;: &quot;222@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球、篮球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;: 22,&quot;mail&quot;: &quot;333@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、篮球、游泳、听音乐&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;赵六&quot;,&quot;age&quot;: 23,&quot;mail&quot;: &quot;444@qq.com&quot;,&quot;hobby&quot;:&quot;跑步、游泳&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;孙七&quot;,&quot;age&quot;: 24,&quot;mail&quot;: &quot;555@qq.com&quot;,&quot;hobby&quot;:&quot;听音乐、看电影&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225229436.png" alt="image-20200901103400413"></p><p>测试搜索：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match"</span> : &#123; </span><br><span class="line">            <span class="attr">"hobby"</span> : <span class="string">"音乐"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225249801.png" alt="image-20200901103440349"></p><h2 id="3-7-结构化查询"><a href="#3-7-结构化查询" class="headerlink" title="3.7    结构化查询"></a>3.7    结构化查询</h2><h3 id="3-7-1-term查询"><a href="#3-7-1-term查询" class="headerlink" title="3.7.1    term查询"></a>3.7.1    term查询</h3><p>term 主要用于精确匹配哪些值，比如数字，日期，布尔值或  not_analyzed 的字符串(未经分析的文本数据类)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &#123; &quot;term&quot;: &#123; &quot;age&quot;:   26      &#125;&#125;</span><br><span class="line"> &#123; &quot;term&quot;: &#123; &quot;date&quot;:  &quot;2014-09-01&quot; &#125;&#125;</span><br><span class="line"> &#123; &quot;term&quot;: &#123; &quot;public&quot;: true     &#125;&#125;</span><br><span class="line"> &#123; &quot;term&quot;: &#123; &quot;tag&quot;:   &quot;full_text&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;term&quot; : &#123; </span><br><span class="line">            &quot;age&quot; : 20</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225320292.png" alt="image-20200901105024006"></p><h3 id="3-7-2-terms查询"><a href="#3-7-2-terms查询" class="headerlink" title="3.7.2    terms查询"></a>3.7.2    terms查询</h3><p>terms 跟  term 有点类似，但  terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;tag&quot;: [ &quot;search&quot;, &quot;full_text&quot;, &quot;nosql&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;terms&quot; : &#123; </span><br><span class="line">            &quot;age&quot; : [20,21]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225344253.png" alt="image-20200901105329305"></p><h3 id="3-7-3-range查询"><a href="#3-7-3-range查询" class="headerlink" title="3.7.3    range查询"></a>3.7.3    range查询</h3><p>range 过滤允许我们按照指定范围查找一批数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;:  20,</span><br><span class="line">            &quot;lt&quot;:  30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范围操作符包含：</p><p><code>gt</code>  大于<br><code>gte</code>  大于等于<br><code>lt</code>  小于<br><code>lte</code>  小于等于</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">                &quot;gte&quot;: 20,</span><br><span class="line">                &quot;lte&quot;: 22</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020090122540786.png" alt="image-20200901105701894"></p><h3 id="3-7-4-exists-查询"><a href="#3-7-4-exists-查询" class="headerlink" title="3.7.4    exists 查询"></a>3.7.4    exists 查询</h3><p>exists 查询可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的 IS_NULL 条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;exists&quot;:  &#123;</span><br><span class="line">        &quot;field&quot;:   &quot;title&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个查询只是针对已经查出一批数据来，但是想区分出某个字段是否存在的时候使用。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;  #必须包含</span><br><span class="line">                   &quot;field&quot;: &quot;card&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225445746.png" alt="image-20200901105900901"></p><h3 id="3-7-5-match查询"><a href="#3-7-5-match查询" class="headerlink" title="3.7.5    match查询"></a>3.7.5    match查询</h3><p>match 查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。</p><p>如果你使用  match 查询一个全文本字段，它会在真正查询之前用分析器先分析 match 一下查询字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">        &quot;tweet&quot;: &quot;About Search&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用 match 下指定了一个确切值，在遇到数字，日期，布尔值或者 not_analyzed 的字符串时，它将为你搜索你给定的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;match&quot;: &#123; &quot;age&quot;:   26      &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;date&quot;:  &quot;2014-09-01&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;public&quot;: true     &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;tag&quot;:   &quot;full_text&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-6-bool查询"><a href="#3-7-6-bool查询" class="headerlink" title="3.7.6    bool查询"></a>3.7.6    bool查询</h3><p>bool 查询可以用来合并多个条件查询结果的布尔逻辑，它包含一下操作符：</p><p>must  多个查询条件的完全匹配,相当于  and 。</p><p>must_not  多个查询条件的相反匹配，相当于  not 。</p><p>should  至少有一个查询条件匹配, 相当于  or 。</p><p>这些参数可以分别继承一个查询条件或者一个查询条件的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">        &quot;must&quot;:   &#123; &quot;term&quot;: &#123; &quot;folder&quot;: &quot;inbox&quot; &#125;&#125;,</span><br><span class="line">        &quot;must_not&quot;: &#123; &quot;term&quot;: &#123; &quot;tag&quot;:   &quot;spam&quot; &#125;&#125;,</span><br><span class="line">        &quot;should&quot;: [</span><br><span class="line">            &#123; &quot;term&quot;: &#123; &quot;starred&quot;: true  &#125;&#125;,</span><br><span class="line">            &#123; &quot;term&quot;: &#123; &quot;unread&quot;:  true  &#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-过滤查询"><a href="#3-8-过滤查询" class="headerlink" title="3.8    过滤查询"></a>3.8    过滤查询</h2><p>前面讲过结构化查询，Elasticsearch也支持过滤查询，如term、range、match等。</p><p>示例：查询年龄为20岁的用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;term&quot;: &#123;</span><br><span class="line">                    &quot;age&quot;: 20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225512953.png" alt="image-20200901112744756"></p><p><strong>查询和过滤的对比</strong></p><ul><li>一条过滤语句会询问每个文档的字段值是否包含着特定值。</li><li>查询语句会询问每个文档的字段值与特定值的匹配程度如何。<ul><li>一条查询语句会计算每个文档与查询语句的相关性，会给出一个相关性评分 _score，并且按照相关性对匹配到的文档进行排序。 这种评分方式非常适用于一个没有完全配置结果的全文本搜索。</li></ul></li><li>一个简单的文档列表，快速匹配运算并存入内存是十分方便的， 每个文档仅需要1个字节。这些缓存的过滤结果集与后续请求的结合使用是非常高效的。</li><li>查询语句不仅要查找相匹配的文档，还需要计算每个文档的相关性，所以一般来说查询语句要比过滤语句更耗时，并且查询结果也不可缓存。</li></ul><blockquote><p>建议：<br>做精确匹配搜索时，最好用过滤语句，因为过滤语句可以缓存数据。</p></blockquote><h1 id="4-中文分词"><a href="#4-中文分词" class="headerlink" title="4.    中文分词"></a>4.    中文分词</h1><h2 id="4-1-什么是分词"><a href="#4-1-什么是分词" class="headerlink" title="4.1    什么是分词"></a>4.1    什么是分词</h2><p>分词就是指将一个文本转化成一系列单词的过程，也叫文本分析，在Elasticsearch中称之为Analysis。</p><p>举例：我是中国人 –&gt; 我/是/中国人</p><h2 id="4-2-分词api"><a href="#4-2-分词api" class="headerlink" title="4.2    分词api"></a>4.2    分词api</h2><p><strong>指定分词器进行分词</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_analyze</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;:&quot;standard&quot;,</span><br><span class="line">    &quot;text&quot;:&quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225545753.png" alt="image-20200901113211950"></p><p>在结果中不仅可以看出分词的结果，还返回了该词在文本中的位置。</p><p><strong>指定索引分词</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;_analyze</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">    &quot;field&quot;: &quot;hobby&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;听音乐&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225608997.png" alt="image-20200901113340343"></p><h2 id="4-3-中文分词"><a href="#4-3-中文分词" class="headerlink" title="4.3    中文分词"></a>4.3    中文分词</h2><p>中文分词的难点在于，在汉语中没有明显的词汇分界点，如在英语中，空格可以作为分隔符，如果分隔不正确就会造成歧义。</p><p>如：</p><p>我/爱/炒肉丝</p><p>我/爱/炒/肉丝</p><p>常用中文分词器，IK、jieba、THULAC等，推荐使用IK分词器。</p><blockquote><p>IK Analyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出了3个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IK Analyzer 3.0则发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。</p><p>采用了特有的“正向迭代最细粒度切分算法“，具有80万字/秒的高速处理能力 采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。 优化的词典存储，更小的内存占用。</p></blockquote><p>IK分词器 Elasticsearch插件地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#安装方法：将下载到的elasticsearch-analysis-ik-6.5.4.zip解压到&#x2F;elasticsearch&#x2F;plugins&#x2F;ik目录下即可。</span><br><span class="line"></span><br><span class="line">mkdir es&#x2F;plugins&#x2F;ik</span><br><span class="line">cp elasticsearch-analysis-ik-6.5.4.zip .&#x2F;es&#x2F;plugins&#x2F;ik</span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">unzip elasticsearch-analysis-ik-6.5.4.zip</span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line">.&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_analyze</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tokens&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;我&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 0,</span><br><span class="line">            &quot;end_offset&quot;: 1,</span><br><span class="line">            &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">            &quot;position&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;是&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 1,</span><br><span class="line">            &quot;end_offset&quot;: 2,</span><br><span class="line">            &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">            &quot;position&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;中国人&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 2,</span><br><span class="line">            &quot;end_offset&quot;: 5,</span><br><span class="line">            &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">            &quot;position&quot;: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;中国&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 2,</span><br><span class="line">            &quot;end_offset&quot;: 4,</span><br><span class="line">            &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">            &quot;position&quot;: 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;国人&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 3,</span><br><span class="line">            &quot;end_offset&quot;: 5,</span><br><span class="line">            &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">            &quot;position&quot;: 4</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，已经对中文进行了分词。</p><h1 id="5-全文搜索"><a href="#5-全文搜索" class="headerlink" title="5.    全文搜索"></a>5.    全文搜索</h1><p>全文搜索两个最重要的方面是：</p><ul><li>相关性（Relevance） 它是评价查询与其结果间的相关程度，并根据这种相关程度对结果排名的一种能力，这种计算方式可以是 TF/IDF 方法、地理位置邻近、模糊相似，或其他的某些算法。</li><li>分词（Analysis） 它是将文本块转换为有区别的、规范化的 token 的一个过程，目的是为了创建倒排索引以及查询倒排索引。</li></ul><h2 id="5-1-构造数据"><a href="#5-1-构造数据" class="headerlink" title="5.1    构造数据"></a>5.1    构造数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;itcast</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;person&quot;: &#123;</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;age&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;mail&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;hobby&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                    &quot;analyzer&quot;:&quot;ik_max_word&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http:&#x2F;&#x2F;172.16.55.185:9200&#x2F;itcast&#x2F;_bulk</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;: 20,&quot;mail&quot;: &quot;111@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;: 21,&quot;mail&quot;: &quot;222@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球、篮球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;: 22,&quot;mail&quot;: &quot;333@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、篮球、游泳、听音乐&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;赵六&quot;,&quot;age&quot;: 23,&quot;mail&quot;: &quot;444@qq.com&quot;,&quot;hobby&quot;:&quot;跑步、游泳、篮球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;孙七&quot;,&quot;age&quot;: 24,&quot;mail&quot;: &quot;555@qq.com&quot;,&quot;hobby&quot;:&quot;听音乐、看电影、羽毛球&quot;&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225632987.png" alt="image-20200901115151680"></p><h2 id="5-2-单词搜索"><a href="#5-2-单词搜索" class="headerlink" title="5.2    单词搜索"></a>5.2    单词搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&quot;音乐&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 9,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;max_score&quot;: 0.6841192,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Uv0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6841192,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;王五&quot;,</span><br><span class="line">                    &quot;age&quot;: 22,</span><br><span class="line">                    &quot;mail&quot;: &quot;333@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;羽毛球、篮球、游泳、听音乐&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;羽毛球、篮球、游泳、听&lt;em&gt;音乐&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;VP0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6841192,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;孙七&quot;,</span><br><span class="line">                    &quot;age&quot;: 24,</span><br><span class="line">                    &quot;mail&quot;: &quot;555@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;听音乐、看电影、羽毛球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;听&lt;em&gt;音乐&lt;&#x2F;em&gt;、看电影、羽毛球&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程说明：</p><ul><li><p>检查字段类型</p><p>爱好 hobby 字段是一个 text 类型（ 指定了IK分词器），这意味着查询字符串本身也应该被分词。</p></li><li><p>分析查询字符串 。</p><p>将查询的字符串 “音乐” 传入IK分词器中，输出的结果是单个项 音乐。因为只有一个单词项，所以 match 查询执行的是单个底层 term 查询。</p></li><li><p>查找匹配文档 。</p><p>用 term 查询在倒排索引中查找 “音乐” 然后获取一组包含该项的文档，本例的结果是文档：3 、5 。</p></li><li><p>为每个文档评分 。</p><p>用 term 查询计算每个文档相关度评分 _score ，这是种将 词频（term frequency，即词 “音乐” 在相关文档的hobby 字段中出现的频率）和 反向文档频率（inverse document frequency，即词 “音乐” 在所有文档的hobby 字段中出现的频率），以及字段的长度（即字段越短相关度越高）相结合的计算方式。</p></li></ul><h2 id="5-3-多词搜索"><a href="#5-3-多词搜索" class="headerlink" title="5.3    多词搜索"></a>5.3    多词搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&quot;音乐 篮球&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 3,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 4,</span><br><span class="line">        &quot;max_score&quot;: 1.3192271,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Uv0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3192271,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;王五&quot;,</span><br><span class="line">                    &quot;age&quot;: 22,</span><br><span class="line">                    &quot;mail&quot;: &quot;333@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;羽毛球、篮球、游泳、听音乐&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;羽毛球、&lt;em&gt;篮球&lt;&#x2F;em&gt;、游泳、听&lt;em&gt;音乐&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;VP0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.81652206,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;孙七&quot;,</span><br><span class="line">                    &quot;age&quot;: 24,</span><br><span class="line">                    &quot;mail&quot;: &quot;555@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;听音乐、看电影、羽毛球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;听&lt;em&gt;音乐&lt;&#x2F;em&gt;、看电影、羽毛球&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Vf0gDWgBR-bSw8-LOdm_&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6987338,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;赵六&quot;,</span><br><span class="line">                    &quot;age&quot;: 23,</span><br><span class="line">                    &quot;mail&quot;: &quot;444@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;跑步、游泳、篮球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;跑步、游泳、&lt;em&gt;篮球&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Uf0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.50270504,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">                    &quot;age&quot;: 21,</span><br><span class="line">                    &quot;mail&quot;: &quot;222@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;羽毛球、乒乓球、足球、篮球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;羽毛球、乒乓球、足球、&lt;em&gt;篮球&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，包含了“音乐”、“篮球”的数据都已经被搜索到了。</p><p>可是，搜索的结果并不符合我们的预期，因为我们想搜索的是既包含“音乐”又包含“篮球”的用户，显然结果返回的“或”的关系。</p><p>在Elasticsearch中，可以指定词之间的逻辑关系，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;音乐 篮球&quot;,</span><br><span class="line">                &quot;operator&quot;:&quot;and&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225658708.png" alt="image-20200901115953661"></p><p>可以看到结果符合预期。</p><p>前面我们测试了“OR” 和 “AND”搜索，这是两个极端，其实在实际场景中，并不会选取这2个极端，更有可能是选取这种，或者说，只需要符合一定的相似度就可以查询到数据，在Elasticsearch中也支持这样的查询，通过minimum_should_match来指定匹配度，如：70%；</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;游泳 羽毛球&quot;,</span><br><span class="line">                &quot;minimum_should_match&quot;:&quot;80%&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#结果：省略显示</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 4, #相似度为80%的情况下，查询到4条数据</span><br><span class="line">    &quot;max_score&quot;: 1.621458,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设置40%进行测试：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;游泳 羽毛球&quot;,</span><br><span class="line">                &quot;minimum_should_match&quot;:&quot;40%&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#结果：</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,  #相似度为40%的情况下，查询到5条数据</span><br><span class="line">    &quot;max_score&quot;: 1.621458,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相似度应该多少合适，需要在实际的需求中进行反复测试，才可得到合理的值。</p><h2 id="5-4-组合搜索"><a href="#5-4-组合搜索" class="headerlink" title="5.4    组合搜索"></a>5.4    组合搜索</h2><p>在搜索时，也可以使用过滤器中讲过的bool组合查询，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:&#123;</span><br><span class="line">                &quot;match&quot;:&#123;</span><br><span class="line">                    &quot;hobby&quot;:&quot;篮球&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;must_not&quot;:&#123;</span><br><span class="line">                &quot;match&quot;:&#123;</span><br><span class="line">                    &quot;hobby&quot;:&quot;音乐&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;游泳&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面搜索的意思是：搜索结果中必须包含篮球，不能包含音乐，如果包含了游泳，那么它的相似度更高。</p><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225726867.png" alt="image-20200901120419828"></p><blockquote><p><strong>评分的计算规则</strong></p><p>bool 查询会为每个文档计算相关度评分 _score ， 再将所有匹配的 must 和 should 语句的分数 _score 求和，最后除以 must 和 should 语句的总数。</p><p>must_not 语句不会影响评分； 它的作用只是将不相关的文档排除。</p></blockquote><p>默认情况下，should中的内容不是必须匹配的，如果查询语句中没有must，那么就会至少匹配其中一个。当然了，也可以通过minimum_should_match参数进行控制，该值可以是数字也可以的百分比。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;游泳&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;篮球&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;音乐&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;minimum_should_match&quot;:2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>minimum_should_match为2，意思是should中的三个词，至少要满足2个。</p></blockquote><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/2020090122574985.png" alt="image-20200901120846759"></p><h2 id="5-5-权重"><a href="#5-5-权重" class="headerlink" title="5.5    权重"></a>5.5    权重</h2><p>有些时候，我们可能需要对某些词增加权重来影响该条数据的得分。如下：</p><p>搜索关键字为“游泳篮球”，如果结果中包含了“音乐”权重为10，包含了“跑步”权重为2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: &#123;</span><br><span class="line">                        &quot;query&quot;: &quot;游泳篮球&quot;,</span><br><span class="line">                        &quot;operator&quot;: &quot;and&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;should&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;: &#123;</span><br><span class="line">                            &quot;query&quot;: &quot;音乐&quot;,</span><br><span class="line">                            &quot;boost&quot;: 10</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;: &#123;</span><br><span class="line">                            &quot;query&quot;: &quot;跑步&quot;,</span><br><span class="line">                            &quot;boost&quot;: 2</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225819957.png" alt="image-20200901121150556"></p><p>如果不设置权重的查询结果是这样：</p><p><img src="https://img-blog.csdnimg.cn/20200901225838157.png" alt="image-20200901121202334"></p><h1 id="6-Elasticsearch集群"><a href="#6-Elasticsearch集群" class="headerlink" title="6.    Elasticsearch集群"></a>6.    Elasticsearch集群</h1><h2 id="6-1-集群节点"><a href="#6-1-集群节点" class="headerlink" title="6.1    集群节点"></a>6.1    集群节点</h2><p>ELasticsearch的集群是由多个节点组成的，通过cluster.name设置集群名称，并且用于区分其它的集群，每个节点通过node.name指定节点的名称。</p><p>在Elasticsearch中，节点的类型主要有4种：</p><ul><li>master节点<ul><li>配置文件中node.master属性为true(默认为true)，就有资格被选为master节点。</li><li>master节点用于控制整个集群的操作。比如创建或删除索引，管理其它非master节点等。</li></ul></li><li>data节点<ul><li>配置文件中node.data属性为true(默认为true)，就有资格被设置成data节点。</li><li>data节点主要用于执行数据相关的操作。比如文档的CRUD。</li></ul></li><li>客户端节点<ul><li>配置文件中node.master属性和node.data属性均为false。    </li><li>该节点不能作为master节点，也不能作为data节点。</li><li>可以作为客户端节点，用于响应用户的请求，把请求转发到其他节点</li></ul></li><li>部落节点<ul><li>当一个节点配置tribe.*的时候，它是一个特殊的客户端，它可以连接多个集群，在所有连接的集群上执行搜索和其他操作。</li></ul></li></ul><h2 id="6-2-搭建集群"><a href="#6-2-搭建集群" class="headerlink" title="6.2    搭建集群"></a>6.2    搭建集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#启动3个虚拟机，分别在3台虚拟机上部署安装Elasticsearch</span><br><span class="line">mkdir &#x2F;itcast&#x2F;es-cluster</span><br><span class="line"></span><br><span class="line">#分发到其它机器</span><br><span class="line">scp -r es-cluster elsearch@192.168.40.134:&#x2F;itcast</span><br><span class="line"></span><br><span class="line">#node01的配置：</span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node01</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.40.133&quot;,&quot;192.168.40.134&quot;,&quot;192.168.40.135&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">#node02的配置：</span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node02</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.40.133&quot;,&quot;192.168.40.134&quot;,&quot;192.168.40.135&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">#node03的配置：</span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.40.133&quot;,&quot;192.168.40.134&quot;,&quot;192.168.40.135&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">#分别启动3个节点</span><br><span class="line">.&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225859990.png" alt="image-20200901171856903"></p><p>创建索引：</p><p><img src="https://img-blog.csdnimg.cn/20200901225915699.png" alt="image-20200901171911178"></p><p><img src="https://img-blog.csdnimg.cn/2020090122593159.png" alt="image-20200901171918014"></p><p>查询集群状态：/_cluster/health</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    cluster_name: &quot;es-itcast-cluster&quot;</span><br><span class="line">    status: &quot;green&quot;</span><br><span class="line">    timed_out: false</span><br><span class="line">    number_of_nodes: 3</span><br><span class="line">    number_of_data_nodes: 3</span><br><span class="line">    active_primary_shards: 5</span><br><span class="line">    active_shards: 10</span><br><span class="line">    relocating_shards: 0</span><br><span class="line">    initializing_shards: 0</span><br><span class="line">    unassigned_shards: 0</span><br><span class="line">    delayed_unassigned_shards: 0</span><br><span class="line">    number_of_pending_tasks: 0</span><br><span class="line">    number_of_in_flight_fetch: 0</span><br><span class="line">    task_max_waiting_in_queue_millis: 0</span><br><span class="line">    active_shards_percent_as_number: 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集群状态的三种颜色：</p><table><thead><tr><th>颜色</th><th>意义</th></tr></thead><tbody><tr><td>green</td><td>所有主要分片和复制分片都可用</td></tr><tr><td>yellow</td><td>所有主要分片可用，但不是所有复制分片都可用</td></tr><tr><td>red</td><td>不是所有的主要分片都可用</td></tr></tbody></table><h2 id="6-3-分片和副本"><a href="#6-3-分片和副本" class="headerlink" title="6.3    分片和副本"></a>6.3    分片和副本</h2><p>为了将数据添加到Elasticsearch，我们需要索引(index)——一个存储关联数据的地方。实际上，索引只是一个用来指向一个或多个分片(shards)的“逻辑命名空间(logical namespace)”.</p><ul><li>一个分片(shard)是一个最小级别“工作单元(worker unit)”,它只是保存了索引中所有数据的一部分。</li><li>我们需要知道是分片就是一个Lucene实例，并且它本身就是一个完整的搜索引擎。应用程序不会和它直接通信。</li><li>分片可以是主分片(primary shard)或者是复制分片(replica shard)。</li><li>索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。</li><li>复制分片只是主分片的一个副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索或者从别的shard取回文档。</li><li>当索引创建完成的时候，主分片的数量就固定了，但是复制分片的数量可以随时调整。</li></ul><h2 id="6-4-故障转移"><a href="#6-4-故障转移" class="headerlink" title="6.4    故障转移"></a>6.4    故障转移</h2><h3 id="6-4-1-将data节点停止"><a href="#6-4-1-将data节点停止" class="headerlink" title="6.4.1    将data节点停止"></a>6.4.1    将data节点停止</h3><p>这里选择将node02停止：</p><p><img src="https://img-blog.csdnimg.cn/20200901225958456.png" alt="image-20200901172356031"></p><p>说明：</p><p>当前集群状态为黄色，表示主节点可用，副本节点不完全可用</p><p>过一段时间观察，发现节点列表中看不到node02，副本节点分配到了node01和node03，集群状态恢复到绿色。</p><p><img src="https://img-blog.csdnimg.cn/20200901230017461.png" alt="image-20200901172603651"></p><p>将node02恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;node02&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901230037943.png" alt="image-20200901172629130"></p><p>可以看到，node02恢复后，重新加入了集群，并且重新分配了节点信息。</p><h3 id="6-4-2-将master节点停止"><a href="#6-4-2-将master节点停止" class="headerlink" title="6.4.2    将master节点停止"></a>6.4.2    将master节点停止</h3><p>接下来，测试将node01停止，也就是将主节点停止。</p><p><img src="https://img-blog.csdnimg.cn/20200901230100366.png" alt="image-20200901172704741"></p><p>从结果中可以看出，集群对master进行了重新选举，选择node03为master。并且集群状态变成黄色。</p><p>等待一段时间后，集群状态从黄色变为了绿色：</p><p><img src="https://img-blog.csdnimg.cn/2020090123011827.png" alt="image-20200901172722131"></p><p>恢复node01节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;node01&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p>重启之后，发现node01可以正常加入到集群中，集群状态依然为绿色：</p><p><img src="https://img-blog.csdnimg.cn/20200901230136418.png" alt="image-20200901172752045"></p><blockquote><p><strong>特别说明：</strong></p><p>如果在配置文件中discovery.zen.minimum_master_nodes设置的不是N/2+1时，会出现脑裂问题，之前宕机的主节点恢复后不会加入到集群。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200901230156217.png" alt="image-20200901172831509"></p><h2 id="6-5-分布式文档"><a href="#6-5-分布式文档" class="headerlink" title="6.5    分布式文档"></a>6.5    分布式文档</h2><h3 id="6-5-1-路由"><a href="#6-5-1-路由" class="headerlink" title="6.5.1    路由"></a>6.5.1    路由</h3><p>首先，来看个问题：</p><p><img src="https://img-blog.csdnimg.cn/20200901230213690.png" alt="image-20200901172928908"></p><p>如图所示：当我们想一个集群保存文档时，文档该存储到哪个节点呢？ 是随机吗？ 是轮询吗？</p><p>实际上，在ELasticsearch中，会采用计算的方式来确定存储到哪个节点，计算公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard &#x3D; hash(routing) % number_of_primary_shards</span><br></pre></td></tr></table></figure><ul><li>outing值是一个任意字符串，它默认是_id但也可以自定义。</li><li>这个routing字符串通过哈希函数生成一个数字，然后除以主切片的数量得到一个余数(remainder)，余数的范围永远是0到number_of_primary_shards - 1，这个数字就是特定文档所在的分片。</li></ul><p>这就是为什么创建了主分片后，不能修改的原因。</p><h3 id="6-5-2-文档的写操作"><a href="#6-5-2-文档的写操作" class="headerlink" title="6.5.2    文档的写操作"></a>6.5.2    文档的写操作</h3><p>新建索引和删除请求都是写(write)操作，它们必须在主分片上成功完成才能复制到相关的复制分片上。</p><p><img src="https://img-blog.csdnimg.cn/20200901230229616.png" alt="image-20200901173347981"></p><p>下面我们罗列在主分片和复制分片上成功新建索引或删除一个文档必要的顺序步骤：</p><ul><li>客户端给 Node 1 发送新建索引或删除请求。</li><li>节点使用文档的 _id 确定文档属于分片 0 。它转发请求到 Node 3 ，分片 0 位于这个节点上。</li><li>Node 3 在主分片上执行请求，如果成功，它转发请求到相应的位于 Node 1 和 Node 2 的复制节点上。当所有的复制节点报告成功， Node 3 报告成功到请求的节点，请求的节点再报告给客户端。</li><li>客户端接收到成功响应的时候，文档的修改已经被应用于主分片和所有的复制分片。你的修改生效了。</li></ul><h3 id="6-5-3-搜索文档（单个文档）"><a href="#6-5-3-搜索文档（单个文档）" class="headerlink" title="6.5.3    搜索文档（单个文档）"></a>6.5.3    搜索文档（单个文档）</h3><p>文档能够从主分片或任意一个复制分片被检索。</p><p><img src="https://img-blog.csdnimg.cn/20200901230249137.png" alt="image-20200901173639946"></p><p>下面我们罗列在主分片或复制分片上检索一个文档必要的顺序步骤：</p><ul><li>客户端给 Node 1 发送get请求。</li><li>节点使用文档的 _id 确定文档属于分片 0 。分片 0 对应的复制分片在三个节点上都有。此时，它转发请求到Node 2 。</li><li>Node 2 返回文档(document)给 Node 1 然后返回给客户端。</li></ul><p>对于读请求，为了平衡负载，请求节点会为每个请求选择不同的分片——它会循环所有分片副本。</p><p>可能的情况是，一个被索引的文档已经存在于主分片上却还没来得及同步到复制分片上。这时复制分片会报告文档未找到，主分片会成功返回文档。一旦索引请求成功返回给用户，文档则在主分片和复制分片都是可用的。</p><h3 id="6-5-4-全文搜索"><a href="#6-5-4-全文搜索" class="headerlink" title="6.5.4    全文搜索"></a>6.5.4    全文搜索</h3><p>对于全文搜索而言，文档可能分散在各个节点上，那么在分布式的情况下，如何搜索文档呢？</p><p>搜索，分为2个阶段，搜索（query）+取回（fetch）。</p><p><strong>搜索（query）</strong></p><p><img src="https://img-blog.csdnimg.cn/2020090123030738.png" alt="image-20200901173951314"></p><p>查询阶段包含以下三步：</p><ul><li>客户端发送一个 search（搜索） 请求给 Node 3 , Node 3 创建了一个长度为 from+size 的空优先级队</li><li>Node 3 转发这个搜索请求到索引中每个分片的原本或副本。每个分片在本地执行这个查询并且结果将结果到一个大小为 from+size 的有序本地优先队列里去。</li><li>每个分片返回document的ID和它优先队列里的所有document的排序值给协调节点 Node 3 。 Node 3 把这些值合并到自己的优先队列里产生全局排序结果。</li></ul><p><strong>取回（fetch）</strong></p><p><img src="https://img-blog.csdnimg.cn/20200901230325470.png" alt="image-20200901174116151"></p><p>分发阶段由以下步骤构成：</p><ul><li>协调节点辨别出哪个document需要取回，并且向相关分片发出 GET 请求。</li><li>每个分片加载document并且根据需要丰富（enrich）它们，然后再将document返回协调节点。</li><li>一旦所有的document都被取回，协调节点会将结果返回给客户端。</li></ul><h1 id="7-Java客户端"><a href="#7-Java客户端" class="headerlink" title="7.    Java客户端"></a>7.    Java客户端</h1><p>在Elasticsearch中，为java提供了2种客户端，一种是REST风格的客户端，另一种是Java API的客户端。</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200901230342573.png" alt="image-20200901174257058"></p><h2 id="7-1-REST客户端"><a href="#7-1-REST客户端" class="headerlink" title="7.1    REST客户端"></a>7.1    REST客户端</h2><p>Elasticsearch提供了2种REST客户端，一种是低级客户端，一种是高级客户端。</p><ul><li>Java Low Level REST Client：官方提供的低级客户端。该客户端通过http来连接Elasticsearch集群。用户在使用该客户端时需要将请求数据手动拼接成Elasticsearch所需JSON格式进行发送，收到响应时同样也需要将返回的JSON数据手动封装成对象。虽然麻烦，不过该客户端兼容所有的Elasticsearch版本。</li><li>Java High Level REST Client：官方提供的高级客户端。该客户端基于低级客户端实现，它提供了很多便捷的API来解决低级客户端需要手动转换数据格式的问题。</li></ul><h2 id="7-2-构造数据"><a href="#7-2-构造数据" class="headerlink" title="7.2    构造数据"></a>7.2    构造数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;house&#x2F;_bulk</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1001&quot;,&quot;title&quot;:&quot;整租 · 南丹大楼 1居室 7500&quot;,&quot;price&quot;:&quot;7500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1002&quot;,&quot;title&quot;:&quot;陆家嘴板块，精装设计一室一厅，可拎包入住诚意租。&quot;,&quot;price&quot;:&quot;8500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1003&quot;,&quot;title&quot;:&quot;整租 · 健安坊 1居室 4050&quot;,&quot;price&quot;:&quot;7500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1004&quot;,&quot;title&quot;:&quot;整租 · 中凯城市之光+视野开阔+景色秀丽+拎包入住&quot;,&quot;price&quot;:&quot;6500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1005&quot;,&quot;title&quot;:&quot;整租 · 南京西路品质小区 21213三轨交汇 配套齐* 拎包入住&quot;,&quot;price&quot;:&quot;6000&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1006&quot;,&quot;title&quot;:&quot;祥康里 简约风格 *南户型 拎包入住 看房随时&quot;,&quot;price&quot;:&quot;7000&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901230359287.png" alt="image-20200901174510495"></p><h2 id="7-3-REST低级客户端"><a href="#7-3-REST低级客户端" class="headerlink" title="7.3    REST低级客户端"></a>7.3    REST低级客户端</h2><h3 id="7-3-1-创建工程"><a href="#7-3-1-创建工程" class="headerlink" title="7.3.1    创建工程"></a>7.3.1    创建工程</h3><p>创建工程itcast-elasticsearch：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- java编译插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2-编写测试用例"><a href="#7-3-2-编写测试用例" class="headerlink" title="7.3.2    编写测试用例"></a>7.3.2    编写测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestESREST</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">private</span> RestClient restClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(</span><br><span class="line">            <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">            <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9201</span>, <span class="string">"http"</span>),</span><br><span class="line">            <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9202</span>, <span class="string">"http"</span>));</span><br><span class="line">        restClientBuilder.setFailureListener(<span class="keyword">new</span> RestClient.FailureListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"出错了 -&gt; "</span> + node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.restClient = restClientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        restClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询集群状态</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetInfo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/_cluster/state"</span>);</span><br><span class="line">        request.addParameter(<span class="string">"pretty"</span>,<span class="string">"true"</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"POST"</span>, <span class="string">"/haoke/house"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"id"</span>,<span class="string">"2001"</span>);</span><br><span class="line">        data.put(<span class="string">"title"</span>,<span class="string">"张江高科"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>,<span class="string">"3500"</span>);</span><br><span class="line">        request.setJsonEntity(MAPPER.writeValueAsString(data));</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据id查询数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/haoke/house/G0pfE2gBCKv8opxuRz1y"</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"POST"</span>, <span class="string">"/haoke/house/_search"</span>);</span><br><span class="line">        String searchJson = <span class="string">"&#123;\"query\": &#123;\"match\": &#123;\"title\": \"拎包入住\"&#125;&#125;&#125;"</span>;</span><br><span class="line">        request.setJsonEntity(searchJson);</span><br><span class="line">        request.addParameter(<span class="string">"pretty"</span>,<span class="string">"true"</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从使用中，可以看出，基本和我们使用RESTful api使用几乎是一致的。</p><h2 id="7-4-REST高级客户端"><a href="#7-4-REST高级客户端" class="headerlink" title="7.4    REST高级客户端"></a>7.4    REST高级客户端</h2><h3 id="7-4-1-引入依赖"><a href="#7-4-1-引入依赖" class="headerlink" title="7.4.1    引入依赖"></a>7.4.1    引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-2-编写测试用例"><a href="#7-4-2-编写测试用例" class="headerlink" title="7.4.2    编写测试用例"></a>7.4.2    编写测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRestHighLevel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9201</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9202</span>, <span class="string">"http"</span>));</span><br><span class="line">        <span class="keyword">this</span>.client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增文档，同步操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"id"</span>, <span class="string">"2002"</span>);</span><br><span class="line">        data.put(<span class="string">"title"</span>, <span class="string">"南京西路 拎包入住 一室一厅"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>, <span class="string">"4500"</span>);</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>).source(data);</span><br><span class="line">        IndexResponse indexResponse = <span class="keyword">this</span>.client.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"id-&gt;"</span> + indexResponse.getId());</span><br><span class="line">        System.out.println(<span class="string">"index-&gt;"</span> + indexResponse.getIndex());</span><br><span class="line">        System.out.println(<span class="string">"type-&gt;"</span> + indexResponse.getType());</span><br><span class="line">        System.out.println(<span class="string">"version-&gt;"</span> + indexResponse.getVersion());</span><br><span class="line">        System.out.println(<span class="string">"result-&gt;"</span> + indexResponse.getResult());</span><br><span class="line">        System.out.println(<span class="string">"shardInfo-&gt;"</span> + indexResponse.getShardInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增文档，异步操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"id"</span>, <span class="string">"2003"</span>);</span><br><span class="line">        data.put(<span class="string">"title"</span>, <span class="string">"南京东路 最新房源 二室一厅"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>, <span class="string">"5500"</span>);</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>).source(data);</span><br><span class="line">        <span class="keyword">this</span>.client.indexAsync(indexRequest, RequestOptions.DEFAULT, <span class="keyword">new</span></span><br><span class="line">                ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(IndexResponse indexResponse)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"id-&gt;"</span> + indexResponse.getId());</span><br><span class="line">                        System.out.println(<span class="string">"index-&gt;"</span> + indexResponse.getIndex());</span><br><span class="line">                        System.out.println(<span class="string">"type-&gt;"</span> + indexResponse.getType());</span><br><span class="line">                        System.out.println(<span class="string">"version-&gt;"</span> + indexResponse.getVersion());</span><br><span class="line">                        System.out.println(<span class="string">"result-&gt;"</span> + indexResponse.getResult());</span><br><span class="line">                        System.out.println(<span class="string">"shardInfo-&gt;"</span> + indexResponse.getShardInfo());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>,<span class="string">"GkpdE2gBCKv8opxuOj12"</span>);</span><br><span class="line">        <span class="comment">// 指定返回的字段</span></span><br><span class="line">        String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"title"</span>, <span class="string">"id"</span>&#125;;</span><br><span class="line">        String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">        FetchSourceContext fetchSourceContext = <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">        getRequest.fetchSourceContext(fetchSourceContext);</span><br><span class="line">        GetResponse response = <span class="keyword">this</span>.client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"数据 -&gt; "</span> + response.getSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否存在</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExists</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>,<span class="string">"GkpdE2gBCKv8opxuOj12"</span>);</span><br><span class="line">        <span class="comment">// 不返回的字段</span></span><br><span class="line">        getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">boolean</span> exists = <span class="keyword">this</span>.client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"exists -&gt; "</span> + exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>, <span class="string">"GkpdE2gBCKv8opxuOj12"</span>);</span><br><span class="line">        DeleteResponse response = <span class="keyword">this</span>.client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());<span class="comment">// OK or NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>, <span class="string">"G0pfE2gBCKv8opxuRz1y"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"title"</span>, <span class="string">"张江高科2"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>, <span class="string">"5000"</span>);</span><br><span class="line">        updateRequest.doc(data);</span><br><span class="line">        UpdateResponse response = <span class="keyword">this</span>.client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"version -&gt; "</span> + response.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试搜索</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"haoke"</span>);</span><br><span class="line">        searchRequest.types(<span class="string">"house"</span>);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">"title"</span>, <span class="string">"拎包入住"</span>));</span><br><span class="line">        sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">        sourceBuilder.size(<span class="number">5</span>);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        SearchResponse search = <span class="keyword">this</span>.client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"搜索到 "</span> + search.getHits().totalHits + <span class="string">" 条数据."</span>);</span><br><span class="line">        SearchHits hits = search.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Elastic-Stack简介&quot;&gt;&lt;a href=&quot;#1-Elastic-Stack简介&quot; class=&quot;headerlink&quot; title=&quot;1.    Elastic Stack简介&quot;&gt;&lt;/a&gt;1.    Elastic Stack简介&lt;/h1&gt;&lt;p&gt;如果你没有听说过Elastic Stack，那你一定听说过ELK，实际上ELK是三款软件的简称，分别是Elasticsearch、Logstash、Kibana组成，在发展的过程中，又有新成员Beats的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="ElasticStack" scheme="https://wgy1993.gitee.io/tags/ElasticStack/"/>
    
  </entry>
  
  <entry>
    <title>Lucene(二)</title>
    <link href="https://wgy1993.gitee.io/archives/6c0148b0.html"/>
    <id>https://wgy1993.gitee.io/archives/6c0148b0.html</id>
    <published>2020-08-31T04:02:36.000Z</published>
    <updated>2020-08-31T04:03:45.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Lucene高级搜索"><a href="#1-Lucene高级搜索" class="headerlink" title="1.    Lucene高级搜索"></a>1.    Lucene高级搜索</h1><h2 id="1-1-文本搜索"><a href="#1-1-文本搜索" class="headerlink" title="1.1    文本搜索"></a>1.1    文本搜索</h2><p>QueryParser支持默认搜索域, 第一个参数为默认搜索域。</p><p>如果在执行parse方法的时候，查询语法中包含域名则从指定的这个域名中搜索， 如果只有查询的关键字，则从默认搜索域中搜索结果。</p><a id="more"></a><p><strong>需求描述 :</strong> 查询名称中包含华为手机关键字的结果。</p><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建Query搜索对象</span></span><br><span class="line">    <span class="comment">//1.1 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//1.2 创建搜索解析器</span></span><br><span class="line">    <span class="comment">//第一个参数: 默认查询域, 如果查询的关键字中带搜索的域名, 则从指定域中查询, 如果不带域名则从, 默认搜索域中查询</span></span><br><span class="line">    <span class="comment">//queryParser.parse("brandName:华为手机");</span></span><br><span class="line">    <span class="comment">//第二个参数: 使用的分词器</span></span><br><span class="line">    QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">    <span class="comment">//1.3 创建搜索对象</span></span><br><span class="line">    <span class="comment">//华 OR  为   手   机</span></span><br><span class="line">    Query query = queryParser.parse(<span class="string">"华为手机"</span>);</span><br><span class="line">    <span class="comment">//2. 创建Directory流对象,声明索引库位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//3. 创建索引读取对象IndexReader</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//4. 创建索引搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//5. 使用索引搜索对象，执行搜索，返回结果集TopDocs</span></span><br><span class="line">    <span class="comment">// 第一个参数：搜索对象，第二个参数：返回的数据条数，指定查询结果最顶部的n条数据返回</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line">    <span class="comment">//5.1 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">    <span class="comment">//6. 解析结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-数值范围搜索"><a href="#1-2-数值范围搜索" class="headerlink" title="1.2    数值范围搜索"></a>1.2    数值范围搜索</h2><p><strong>需求描述 :</strong> 查询价格大于等于100, 小于等于1000的商品<br>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数值范围查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建查询对象,</span></span><br><span class="line">    Query query = IntPoint.newRangeQuery(<span class="string">"price"</span>, <span class="number">100</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//7. 搜索, 并返回结果</span></span><br><span class="line">    <span class="comment">//第二个参数: 是返回多少条数据用于展示, 分页使用</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. 遍历结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-组合搜索"><a href="#1-3-组合搜索" class="headerlink" title="1.3    组合搜索"></a>1.3    组合搜索</h2><p><strong>需求描述 :</strong> 查询价格大于等于100, 小于等于1000, 并且名称中不包含华为手机关键字的商品</p><p><code>BooleanClause.Occur.MUST</code> 必须 相当于and, 并且</p><p><code>BooleanClause.Occur.MUST_NOT</code> 不必须 相当于not, 非</p><p><code>BooleanClause.Occur.SHOULD</code> 应该 相当于or, 或者</p><p><strong>注意 :</strong> 如果逻辑条件中, 只有MUST_NOT, 或者多个逻辑条件都是MUST_NOT, 无效, 查询不出任何数据.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBooleanQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建查询对象,</span></span><br><span class="line">    Query query1 = IntPoint.newRangeQuery(<span class="string">"price"</span>, <span class="number">100</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">    <span class="comment">//3. 设置搜索关键词</span></span><br><span class="line">    <span class="comment">//华 OR  为   手   机</span></span><br><span class="line">    Query query2 = queryParser.parse(<span class="string">"华为手机"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建布尔查询对象(组合查询对象)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  BooleanClause.Occur.MUST 必须相当于and, 也就是并且的关系</span></span><br><span class="line"><span class="comment">     *  BooleanClause.Occur.SHOULD 应该相当于or, 也就是或者的关系</span></span><br><span class="line"><span class="comment">     *  BooleanClause.Occur.MUST_NOT 不必须, 相当于not, 非</span></span><br><span class="line"><span class="comment">     *  注意: 如果查询条件都是MUST_NOT, 或者只有一个查询条件, 然后这一个查询条件是MUST_NOT则</span></span><br><span class="line"><span class="comment">     *  查询不出任何数据.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BooleanQuery.Builder query = <span class="keyword">new</span> BooleanQuery.Builder();</span><br><span class="line">    query.add(query1, BooleanClause.Occur.MUST);</span><br><span class="line">    query.add(query2, BooleanClause.Occur.MUST);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//7. 搜索, 并返回结果</span></span><br><span class="line">    <span class="comment">//第二个参数: 是返回多少条数据用于展示, 分页使用</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query.build(), <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. 遍历结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-搜索案例"><a href="#2-搜索案例" class="headerlink" title="2.    搜索案例"></a>2.    搜索案例</h1><p>成品效果:</p><p><img src="https://img-blog.csdnimg.cn/20200831115607469.png" alt="image-20200831080552651"></p><h2 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1    引入依赖"></a>2.1    引入依赖</h2><p>在项目的pom.xml中引入依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- IK中文分词器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入thymeleaf --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Json转换工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-项目加入页面和资源"><a href="#2-2-项目加入页面和资源" class="headerlink" title="2.2    项目加入页面和资源"></a>2.2    项目加入页面和资源</h2><p>将Lucene课程资料\资源\页面和静态资源, 下的页面和静态资源拷贝到项目的resources目录下</p><p><img src="https://img-blog.csdnimg.cn/20200831115623539.png" alt="image-20200831080617902"></p><h2 id="2-3-创建包和启动类"><a href="#2-3-创建包和启动类" class="headerlink" title="2.3    创建包和启动类"></a>2.3    创建包和启动类</h2><p>创建目录, 并加入启动类:</p><p><img src="https://img-blog.csdnimg.cn/20200831115639263.png" alt="image-20200831080936303"></p><p>启动类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-配置文件"><a href="#2-4-配置文件" class="headerlink" title="2.4    配置文件"></a>2.4    配置文件</h2><p>项目的resources目录下创建application.yml内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h2 id="2-5-业务代码"><a href="#2-5-业务代码" class="headerlink" title="2.5    业务代码"></a>2.5    业务代码</h2><h3 id="2-5-1-封装pojo"><a href="#2-5-1-封装pojo" class="headerlink" title="2.5.1    封装pojo"></a>2.5.1    封装pojo</h3><p>pojo包下加入ResultModel实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分页实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商品列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Sku&gt; skuList;</span><br><span class="line">    <span class="comment">// 商品总数</span></span><br><span class="line">    <span class="keyword">private</span> Long recordCount;</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> Long pageCount;</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> curPage;</span><br><span class="line">    </span><br><span class="line">    .....get和set方法.......略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-controller代码"><a href="#2-5-2-controller代码" class="headerlink" title="2.5.2    controller代码"></a>2.5.2    controller代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryString 查询的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price       查询价格范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page        当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(String queryString, String price, Integer page, Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理当前页</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(page)) &#123;</span><br><span class="line">            page = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (page &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            page = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用service查询</span></span><br><span class="line">        ResultModel resultModel = searchService.query(queryString, price, page);</span><br><span class="line">        model.addAttribute(<span class="string">"result"</span>, resultModel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询条件回显到页面</span></span><br><span class="line">        model.addAttribute(<span class="string">"queryString"</span>, queryString);</span><br><span class="line">        model.addAttribute(<span class="string">"price"</span>, price);</span><br><span class="line">        model.addAttribute(<span class="string">"page"</span>, page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"search"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-service代码"><a href="#2-5-3-service代码" class="headerlink" title="2.5.3    service代码"></a>2.5.3    service代码</h3><p>service接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel <span class="title">query</span><span class="params">(String queryString, String price, Integer page)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServiceImpl</span> <span class="keyword">implements</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每页查询20条数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Integer PAGE_SIZE = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel <span class="title">query</span><span class="params">(String queryString, String price, Integer page)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 需要使用的对象封装</span></span><br><span class="line">        ResultModel resultModel = <span class="keyword">new</span> ResultModel();</span><br><span class="line">        <span class="comment">//从第几条开始查询</span></span><br><span class="line">        <span class="keyword">int</span> start = (page - <span class="number">1</span>) * PAGE_SIZE;</span><br><span class="line">        <span class="comment">//查询到多少条为止</span></span><br><span class="line">        Integer end = page * PAGE_SIZE;</span><br><span class="line">        <span class="comment">//创建分词器</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</span><br><span class="line">        <span class="comment">//创建组合查询对象</span></span><br><span class="line">        BooleanQuery.Builder builder = <span class="keyword">new</span> BooleanQuery.Builder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 根据查询关键字封装查询对象</span></span><br><span class="line">        QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">        Query query1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断传入的查询关键字是否为空, 如果为空查询所有, 如果不为空, 则根据关键字查询</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(queryString)) &#123;</span><br><span class="line">            query1 = queryParser.parse(<span class="string">"*:*"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            query1 = queryParser.parse(queryString);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将关键字查询对象, 封装到组合查询对象中</span></span><br><span class="line">        builder.add(query1, BooleanClause.Occur.MUST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 根据价格范围封装查询对象</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(price)) &#123;</span><br><span class="line">            String[] split = price.split(<span class="string">"-"</span>);</span><br><span class="line">            Query query2 = IntPoint.newRangeQuery(<span class="string">"price"</span>, Integer.parseInt(split[<span class="number">0</span>]), Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">            <span class="comment">//将价格查询对象, 封装到组合查询对象中</span></span><br><span class="line">            builder.add(query2, BooleanClause.Occur.MUST);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用MMapDirectory消耗的查询时间</span></span><br><span class="line"><span class="comment">         * ====消耗时间为=========324ms</span></span><br><span class="line"><span class="comment">         * ====消耗时间为=========18ms</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">        <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">        IndexReader reader = DirectoryReader.open(directory);</span><br><span class="line">        <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">        IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">        <span class="comment">//7. 搜索并获取搜索结果</span></span><br><span class="line">        TopDocs topDocs = indexSearcher.search(builder.build(), end);</span><br><span class="line">        <span class="comment">//8. 获取查询到的总条数</span></span><br><span class="line">        resultModel.setRecordCount(topDocs.totalHits);</span><br><span class="line">        <span class="comment">//9. 获取查询到的结果集</span></span><br><span class="line">        ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"====消耗时间为========="</span> + (endTime - startTime) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//10. 遍历结果集封装返回的数据</span></span><br><span class="line">        List&lt;Sku&gt; skuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">                <span class="comment">//通过查询到的文档编号, 找到对应的文档对象</span></span><br><span class="line">                Document document = reader.document(scoreDocs[i].doc);</span><br><span class="line">                <span class="comment">//封装Sku对象</span></span><br><span class="line">                Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">                sku.setId(document.get(<span class="string">"id"</span>));</span><br><span class="line">                sku.setPrice(Integer.parseInt(document.get(<span class="string">"price"</span>)));</span><br><span class="line">                sku.setImage(document.get(<span class="string">"image"</span>));</span><br><span class="line">                sku.setName(document.get(<span class="string">"name"</span>));</span><br><span class="line">                sku.setBrandName(document.get(<span class="string">"brandName"</span>));</span><br><span class="line">                sku.setCategoryName(document.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">                skuList.add(sku);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装查询到的结果集</span></span><br><span class="line">        resultModel.setSkuList(skuList);</span><br><span class="line">        <span class="comment">//封装当前页</span></span><br><span class="line">        resultModel.setCurPage(page);</span><br><span class="line">        <span class="comment">//总页数</span></span><br><span class="line">        Long pageCount = topDocs.totalHits % PAGE_SIZE &gt; <span class="number">0</span> ? (topDocs.totalHits / PAGE_SIZE) + <span class="number">1</span> : topDocs.totalHits / PAGE_SIZE;</span><br><span class="line">        resultModel.setPageCount(pageCount);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Lucene-底层储存结构-高级"><a href="#3-Lucene-底层储存结构-高级" class="headerlink" title="3.    Lucene 底层储存结构(高级)"></a>3.    Lucene 底层储存结构(高级)</h1><h2 id="3-1-详细理解lucene存储结构"><a href="#3-1-详细理解lucene存储结构" class="headerlink" title="3.1    详细理解lucene存储结构"></a>3.1    详细理解lucene存储结构</h2><p><strong>存储结构 :</strong></p><p><img src="https://img-blog.csdnimg.cn/20200831115646464.png" alt="image-20200831101308400"></p><p><strong>索引 (Index) ：</strong></p><ul><li>一个目录一个索引，在 Lucene中一个索引是放在一个文件夹中的。</li></ul><p><strong>段(Segment) :</strong></p><ul><li>一个索引 (逻辑索引)由多个段组成, 多个段可以合并, 以减少读取内容时候的磁盘IO.</li><li>Lucene 中的数据写入会先写内存的一个Buffer，当Buffer内数据到一定量后会被flush成一个Segment，每个Segment有自己独立的索引，可独立被查询，但数据永远不能被更改。这种模式避免了随机写，数据写入都是批量追加，能达到很高的吞吐量。Segment中写入的文档不可被修改，但可被删除，删除的方式也不是在文件内部原地更改，而是会由另外一个文件保存需要被删除的文档的DocID，保证数据文件不可被修改。Index的查询需要对多个Segment进行查询并对结果进行合并，还需要处理被删除的文档，为了对查询进行优化，Lucene会有策略对多个Segment进行合并。</li></ul><p><strong>文档(Document) ：</strong></p><ul><li>文档是我们建索引的基本单位，不同的文档是保存在不同的段中的，一个段可以包含多篇文档。</li><li>新添加的文档是单独保存在一个新生成的段中，随着段的合并，不同的文档合并到同一个段中。</li></ul><p><strong>域(Field) ：</strong></p><ul><li>一篇文档包含不同类型的信息，可以分开索引，比如标题，时间，正文，描述等，都可以保存在不同的域里。</li><li>不同域的索引方式可以不同。</li></ul><p><strong>词(Term) ：</strong></p><ul><li>词是索引的最小单位，是经过词法分析和语言处理后的字符串。</li></ul><h2 id="3-2-索引库物理文件"><a href="#3-2-索引库物理文件" class="headerlink" title="3.2    索引库物理文件"></a>3.2    索引库物理文件</h2><p><img src="https://img-blog.csdnimg.cn/20200831115653959.png" alt="image-20200831101323814"></p><h2 id="3-3-索引库文件扩展名对照表"><a href="#3-3-索引库文件扩展名对照表" class="headerlink" title="3.3    索引库文件扩展名对照表"></a>3.3    索引库文件扩展名对照表</h2><table><thead><tr><th>名称</th><th>文件扩展名</th><th>简短描述</th></tr></thead><tbody><tr><td>Segments File</td><td>segments_N</td><td>保存了一个提交点（a commit point）的信息</td></tr><tr><td>Lock File</td><td>write.lock</td><td>防止多个IndexWriter同时写到一份索引文件中</td></tr><tr><td>Segment Info</td><td>.si</td><td>保存了索引段的元数据信息</td></tr><tr><td>Compound File</td><td>.cfs，.cfe</td><td>一个可选的虚拟文件，把所有索引信息都存储到复合索引文件中</td></tr><tr><td>Fields</td><td>.fnm</td><td>保存fields的相关信息</td></tr><tr><td>Field Index</td><td>.fdx</td><td>保存指向field data的指针</td></tr><tr><td>Field Data</td><td>.fdt</td><td>文档存储的字段的值</td></tr><tr><td>Term Dictionary</td><td>.tim</td><td>term词典，存储term信息</td></tr><tr><td>Term Index</td><td>.tip</td><td>到Term Dictionary的索引</td></tr><tr><td>Frequencies</td><td>.doc</td><td>由包含每个term以及频率的docs列表组成</td></tr><tr><td>Positions</td><td>.pos</td><td>存储出现在索引中的term的位置信息</td></tr><tr><td>Payloads</td><td>.pay</td><td>存储额外的per-position元数据信息，例如字符偏移和用户payloads</td></tr><tr><td>Norms</td><td>.nvd，.nvm</td><td>.nvm文件保存索引字段加权因子的元数据，.nvd文件保存索引字段加权数据</td></tr><tr><td>Per-Document Values</td><td>.dvd，.dvm</td><td>.dvm文件保存索引文档评分因子的元数据，.dvd文件保存索引文档评分数据</td></tr><tr><td>Term Vector Index</td><td>.tvx</td><td>将偏移存储到文档数据文件中</td></tr><tr><td>Term Vector Documents</td><td>.tvd</td><td>包含有term vectors的每个文档信息</td></tr><tr><td>Term Vector Fields</td><td>.tvf</td><td>字段级别有关term vectors的信息</td></tr><tr><td>Live Documents</td><td>.liv</td><td>哪些是有效文件的信息</td></tr><tr><td>Point values</td><td>.dii，.dim</td><td>保留索引点，如果有的话</td></tr></tbody></table><h2 id="3-4-词典的构建"><a href="#3-4-词典的构建" class="headerlink" title="3.4    词典的构建"></a>3.4    词典的构建</h2><p><strong>为何Lucene大数据量搜索快, 要分两部分来看 :</strong></p><ul><li>一点是因为底层的倒排索引存储结构 .</li><li>另一点就是查询关键字的时候速度快 , 因为词典的索引结构.</li></ul><h3 id="3-4-1-词典数据结构对比"><a href="#3-4-1-词典数据结构对比" class="headerlink" title="3.4.1    词典数据结构对比"></a>3.4.1    词典数据结构对比</h3><p>倒排索引中的词典位于内存，其结构尤为重要，有很多种词典结构，各有各的优缺点，最简单如排序数组，通过二分查找来检索数据，更快的有哈希表，磁盘查找有B树、B+树，但一个能支持TB级数据的倒排索引结构需要在时间和空间上有个平衡，下图列了一些常见词典的优缺点：</p><table><thead><tr><th>数据结构</th><th>优缺点</th></tr></thead><tbody><tr><td>跳跃表</td><td>占用内存小，且可调，但是对模糊查询支持不好</td></tr><tr><td>排序列表Array/List</td><td>使用二分法查找，不平衡</td></tr><tr><td>字典树</td><td>查询效率跟字符串长度有关，但只适合英文词典</td></tr><tr><td>哈希表</td><td>性能高，内存消耗大，几乎是原始数据的三倍</td></tr><tr><td>双数组字典树</td><td>适合做中文词典，内存占用小，很多分词工具均采用此种算法</td></tr><tr><td>Finite State Transducers (FST)</td><td>一种有限状态转移机，Lucene 4有开源实现，并大量使用</td></tr><tr><td>B树</td><td>磁盘索引，更新方便，但检索速度慢，多用于数据库</td></tr></tbody></table><p>Lucene3.0之前使用的也是跳跃表结构，后换成了FST，但跳跃表在Lucene其他地方还有应用如倒排表合并和文档号索引。</p><h3 id="3-4-2-跳跃表原理"><a href="#3-4-2-跳跃表原理" class="headerlink" title="3.4.2    跳跃表原理"></a>3.4.2    跳跃表原理</h3><p>Lucene3.0版本之前使用的跳跃表结构后换成了FST结构</p><p><strong>优点 ：</strong>结构简单、跳跃间隔、级数可控，Lucene3.0之前使用的也是跳跃表结构，，但跳跃表在Lucene其他地方还有应用如倒排表合并和文档号索引。 缺点 ：模糊查询支持不好.</p><p><strong>单链表 :</strong></p><p>单链表中查询一个元素即使是有序的，我们也不能通过二分查找法的方式缩减查询时间。</p><p><strong>通俗的讲也就是按照链表顺序一个一个找.</strong></p><p>举例: 查找85这个节点, 需要查找7次.</p><p><img src="https://img-blog.csdnimg.cn/20200831115700748.png" alt="image-20200831101346895"></p><p><strong>跳跃表 :</strong></p><p>举例: 查询85这个节点, 一共需要查询6次.</p><ul><li>在level3层, 查询3次, 查询到1结尾, 退回到37节点</li><li>在level2层, 从37节点开始查询, 查询2次, 查询到1结尾, 退回到71节点</li><li>在level1层, 从71节点开始查询, 查询1次, 查询到85节点.</li></ul><p><img src="https://img-blog.csdnimg.cn/2020083111570749.png" alt="image-20200831101353607"></p><h3 id="3-4-3-FST原理简析"><a href="#3-4-3-FST原理简析" class="headerlink" title="3.4.3    FST原理简析"></a>3.4.3    FST原理简析</h3><p>Lucene现在采用的数据结构为FST，它的特点就是： </p><ul><li>优点：内存占用率低，压缩率一般在 3 倍~20倍之间、模糊查询支持好、查询快 </li><li>缺点：结构复杂、输入要求有序、更新不易</li></ul><p>已知FST要求输入有序，所以Lucene会将解析出来的文档单词预先排序，然后构建FST，我们假设输入为abd,abe,acf,acg，那么整个构建过程如下：</p><p><img src="https://img-blog.csdnimg.cn/20200831115713438.png" alt="image-20200831101402124"></p><p><img src="https://img-blog.csdnimg.cn/2020083111572071.png" alt="image-20200831101408735"></p><p>输入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String inputValues[] &#x3D; &#123;&quot;hei&quot;,&quot;ma&quot;,&quot;cheng&quot;,&quot;xu&quot;,&quot;yuan&quot;,&quot;good&quot;&#125;;</span><br><span class="line">long outputValues[] &#x3D; &#123;0,1,2,3,4,5&#125;;</span><br></pre></td></tr></table></figure><p>输入的数据如下 :</p><p>hei/0 ma/1 cheng/2 xu/3 yuan/4 good/5</p><p>存储结果如下:</p><p><img src="https://img-blog.csdnimg.cn/2020083111572678.png" alt="image-20200831101506805"></p><h1 id="4-Lucene-优化-高级"><a href="#4-Lucene-优化-高级" class="headerlink" title="4.    Lucene 优化(高级)"></a>4.    Lucene 优化(高级)</h1><h2 id="4-1-解决大量磁盘IO"><a href="#4-1-解决大量磁盘IO" class="headerlink" title="4.1    解决大量磁盘IO"></a>4.1    解决大量磁盘IO</h2><ul><li><p>config.setMaxBufferedDocs(100000);  控制写入一个新的segment前内存中保存的document的数目，设置较大的数目可以加快建索引速度。</p><p><strong>数值越大索引速度越快, 但是会消耗更多的内存</strong></p></li><li><p>indexWriter.forceMerge( 文档数量); 设置N个文档合并为一个段</p><p><strong>数值越大索引速度越快, 搜索速度越慢; 值越小索引速度越慢, 搜索速度越快</strong></p><p>更高的值意味着索引期间更低的段合并开销，但同时也意味着更慢的搜索速度，因为此时的索引通常会包含更多的段。如果该值设置的过高，能获得更高的索引性能。但若在最后进行索引优化，那么较低的值会带来更快的搜索速度，因为在索引操作期间程序会利用并发机制完成段合并操作。故建议对程序分别进行高低多种值的测试，利用计算机的实际性能来告诉你最优值。</p></li></ul><p>创建索引代码优化测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试创建索引速度优化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexTest2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 采集数据</span></span><br><span class="line">    SkuDao skuDao = <span class="keyword">new</span> SkuDaoImpl();</span><br><span class="line">    List&lt;Sku&gt; skuList = skuDao.querySkuList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文档集合</span></span><br><span class="line">    List&lt;Document&gt; docList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">        <span class="comment">//2. 创建文档对象</span></span><br><span class="line">        Document document = <span class="keyword">new</span> Document();</span><br><span class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>, sku.getId(), Field.Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, sku.getName(), Field.Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> IntPoint(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line">        document.add(<span class="keyword">new</span> StoredField(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line">        document.add(<span class="keyword">new</span> StoredField(<span class="string">"image"</span>, sku.getImage()));</span><br><span class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"categoryName"</span>, sku.getCategoryName(), Field.Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"brandName"</span>, sku.getBrandName(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文档对象放入到文档集合中</span></span><br><span class="line">        docList.add(document);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有优化 小100万条数据, 创建索引需要7725ms</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//设置在内存中多少个文档向磁盘中批量写入一次数据</span></span><br><span class="line">    <span class="comment">//如果设置的数字过大, 会过多消耗内存, 但是会提升写入磁盘的速度</span></span><br><span class="line">    <span class="comment">//config.setMaxBufferedDocs(500000);</span></span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line">    <span class="comment">//设置多少给文档合并成一个段文件,数值越大索引速度越快, 搜索速度越慢;  值越小索引速度越慢, 搜索速度越快</span></span><br><span class="line">    <span class="comment">//indexWriter.forceMerge(1000000);</span></span><br><span class="line">    <span class="comment">//7. 写入文档到索引库</span></span><br><span class="line">    <span class="keyword">for</span> (Document doc : docList) &#123;</span><br><span class="line">        indexWriter.addDocument(doc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"=====消耗的时间为:=========="</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-选择合适的分词器"><a href="#4-2-选择合适的分词器" class="headerlink" title="4.2    选择合适的分词器"></a>4.2    选择合适的分词器</h2><p>不同的分词器分词效果不同, 所用时间也不同</p><p><strong>虽然StandardAnalyzer切分词速度快过IKAnalyzer, 但是由于StandardAnalyzer对中文支持不好, 所以为了追求好的分词效果, 为了追求查询时的准确率, 也只能用IKAnalyzer分词器, IKAnalyzer支持停用词典和扩展词典, 可以通过调整两个词典中的内容, 来提升查询匹配的精度</strong></p><h2 id="4-3-选择合适的位置存放索引库"><a href="#4-3-选择合适的位置存放索引库" class="headerlink" title="4.3    选择合适的位置存放索引库"></a>4.3    选择合适的位置存放索引库</h2><table><thead><tr><th>类</th><th>写操作</th><th>读操作</th><th>特点</th></tr></thead><tbody><tr><td>SimpleFSDirectory</td><td>java.io.RandomAccessFile</td><td>java.io.RandomAccessFile</td><td>简单实现，并发能力差</td></tr><tr><td>NIOFSDirectory</td><td>java.nio.FileChannel</td><td>FSDirectory.FSIndexOutput</td><td>并发能力强,windows平台下有重大bug</td></tr><tr><td>MMapDirectory</td><td>内存映射</td><td>FSDirectory.FSIndexOutput</td><td>读取操作基于内存</td></tr></tbody></table><p>测试代码修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Directory directory = MMapDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br></pre></td></tr></table></figure><h2 id="4-4-搜索api的选择"><a href="#4-4-搜索api的选择" class="headerlink" title="4.4    搜索api的选择"></a>4.4    搜索api的选择</h2><p>1、尽量使用TermQuery代替QueryParser</p><p>2、尽量避免大范围的日期查询</p><h1 id="5-Lucene-相关度排序-高级"><a href="#5-Lucene-相关度排序-高级" class="headerlink" title="5.    Lucene 相关度排序(高级)"></a>5.    Lucene 相关度排序(高级)</h1><h2 id="5-1-什么是相关度排序"><a href="#5-1-什么是相关度排序" class="headerlink" title="5.1    什么是相关度排序"></a>5.1    什么是相关度排序</h2><p>Lucene对查询关键字和索引文档的相关度进行打分，得分高的就排在前边。</p><h3 id="5-1-1-如何打分"><a href="#5-1-1-如何打分" class="headerlink" title="5.1.1    如何打分"></a>5.1.1    如何打分</h3><p>Lucene是在用户进行检索时实时根据搜索的关键字计算出来的，分两步：</p><p>1、计算出词（Term）的权重</p><p>2、根据词的权重值，计算文档相关度得分。</p><h3 id="5-1-2-什么是词的权重"><a href="#5-1-2-什么是词的权重" class="headerlink" title="5.1.2    什么是词的权重"></a>5.1.2    什么是词的权重</h3><p>明确索引的最小单位是一个Term(索引词典中的一个词)，搜索也是要从Term中搜索，再根据Term找到文档，Term对文档的重要性称为权重，影响Term权重有两个因素：</p><ul><li><p>Term Frequency (tf) ： 指此Term在此文档中出现了多少次。tf 越大说明越重要。 词(Term)在文档中出现的次数越多，说明此词(Term)对该文档越重要，如“Lucene”这个词，在文档中出现的次数很多，说明该文档主要就是讲Lucene技术的。</p></li><li><p>Document Frequency (df) ： 指有多少文档包含次Term。df 越大说明越不重要。 比如，在一篇英语文档中，this出现的次数更多，就说明越重要吗？不是的，有越多的文档包含此词(Term), 说明此词(Term)太普通，不足以区分这些文档，因而重要性越低。</p></li></ul><h3 id="5-1-3-怎样影响相关度排序"><a href="#5-1-3-怎样影响相关度排序" class="headerlink" title="5.1.3    怎样影响相关度排序"></a>5.1.3    怎样影响相关度排序</h3><p>boost是一个加权值（默认加权值为1.0f），它可以影响权重的计算。</p><ul><li>在索引时对某个文档中的 field设置加权值高，在搜索时匹配到这个文档就可能排在前边。</li><li>在搜索时对某个域进行加权，在进行组合域查询时，匹配到加权值高的域最后计算的相关度得分就高。</li></ul><p>设置boost是给域（field）或者Document设置的</p><h2 id="5-2-人为影响相关度排序"><a href="#5-2-人为影响相关度排序" class="headerlink" title="5.2    人为影响相关度排序"></a>5.2    人为影响相关度排序</h2><p>查询的时候, 通过设置查询域的权重, 可以人为影响查询结果.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试相关度排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexSearch2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求: 不管是名称域还是品牌域或者是分类域有关于手机关键字的查询出来</span></span><br><span class="line">    <span class="comment">//查询的多个域名</span></span><br><span class="line">    String[] fields = &#123;<span class="string">"name"</span>, <span class="string">"categoryName"</span>, <span class="string">"brandName"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置影响排序的权重, 这里设置域的权重</span></span><br><span class="line">    Map&lt;String, Float&gt; boots = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    boots.put(<span class="string">"categoryName"</span>, <span class="number">10000000000f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从多个域查询对象</span></span><br><span class="line">    MultiFieldQueryParser multiFieldQueryParser = <span class="keyword">new</span> MultiFieldQueryParser(fields, analyzer, boots);</span><br><span class="line">    <span class="comment">//设置查询的关键词</span></span><br><span class="line">    Query query = multiFieldQueryParser.parse(<span class="string">"手机"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//7. 搜索, 并返回结果</span></span><br><span class="line">    <span class="comment">//第二个参数: 是返回多少条数据用于展示, 分页使用</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. 遍历结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-Lucene-使用注意事项-高级"><a href="#6-Lucene-使用注意事项-高级" class="headerlink" title="6.    Lucene 使用注意事项(高级)"></a>6.    Lucene 使用注意事项(高级)</h1><ul><li>关键词区分大小写 OR AND TO等关键词是区分大小写的，lucene只认大写的，小写的当做普通单词。</li><li>读写互斥性 同一时刻只能有一个对索引的写操作，在写的同时可以进行搜索</li><li>文件锁 在写索引的过程中强行退出将在tmp目录留下一个lock文件，使以后的写操作无法进行，可以将其手工删除</li><li>时间格式 lucene只支持一种时间格式yyMMddHHmmss，所以你传一个yy-MM-dd HH:mm:ss的时间给lucene它是不会当作时间来处理的</li><li>设置 boost 有些时候在搜索时某个字段的权重需要大一些，例如你可能认为标题中出现关键词的文章比正文中出现关键词的文章更有价值，你可以把标题的boost设置的更大，那么搜索结果会优先显示标题中出现关键词的文章.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Lucene高级搜索&quot;&gt;&lt;a href=&quot;#1-Lucene高级搜索&quot; class=&quot;headerlink&quot; title=&quot;1.    Lucene高级搜索&quot;&gt;&lt;/a&gt;1.    Lucene高级搜索&lt;/h1&gt;&lt;h2 id=&quot;1-1-文本搜索&quot;&gt;&lt;a href=&quot;#1-1-文本搜索&quot; class=&quot;headerlink&quot; title=&quot;1.1    文本搜索&quot;&gt;&lt;/a&gt;1.1    文本搜索&lt;/h2&gt;&lt;p&gt;QueryParser支持默认搜索域, 第一个参数为默认搜索域。&lt;/p&gt;
&lt;p&gt;如果在执行parse方法的时候，查询语法中包含域名则从指定的这个域名中搜索， 如果只有查询的关键字，则从默认搜索域中搜索结果。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="Lucene" scheme="https://wgy1993.gitee.io/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>Lucene(一)</title>
    <link href="https://wgy1993.gitee.io/archives/c330d3d2.html"/>
    <id>https://wgy1993.gitee.io/archives/c330d3d2.html</id>
    <published>2020-08-15T07:24:06.000Z</published>
    <updated>2020-08-15T08:49:22.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-搜索技术理论基础"><a href="#1-搜索技术理论基础" class="headerlink" title="1.    搜索技术理论基础"></a>1.    搜索技术理论基础</h1><h2 id="1-1-为什么要学习Lucene"><a href="#1-1-为什么要学习Lucene" class="headerlink" title="1.1    为什么要学习Lucene"></a>1.1    为什么要学习Lucene</h2><p>原来的方式实现搜索功能，我们的搜索流程如下图：</p><p><img src="https://img-blog.csdnimg.cn/2020081515031765.png" alt="image-20200815130627095"></p><p>上图就是原始搜索引擎技术，如果用户比较少而且数据库的数据量比较小，那么这种方式实现搜索功能在企业中是比较常见的。</p><p>但是数据量过多时，数据库的压力就会变得很大，查询速度会变得非常慢。我们需要使用更好的解决方案来分担数据库的压力。</p><a id="more"></a><p>现在的方案（使用Lucene），如下图</p><p><img src="https://img-blog.csdnimg.cn/20200815150332900.png" alt="image-20200815130744850"></p><p>为了解决数据库压力和速度的问题，我们的数据库就变成了索引库，我们使用Lucene的API的来操作服务器上的索引库。这样完全和数据库进行了隔离。</p><h2 id="1-2-数据查询方法"><a href="#1-2-数据查询方法" class="headerlink" title="1.2    数据查询方法"></a>1.2    数据查询方法</h2><h3 id="1-2-1-顺序扫描法"><a href="#1-2-1-顺序扫描法" class="headerlink" title="1.2.1    顺序扫描法"></a>1.2.1    顺序扫描法</h3><p><strong>算法描述：</strong></p><p>所谓顺序扫描，例如要找内容包含一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。</p><p><strong>优点：</strong></p><p>查询准确率高</p><p><strong>缺点：</strong></p><p>查询速度会随着查询数据量的增大， 越来越慢</p><p><strong>使用场景：</strong></p><ul><li>数据库中的like关键字模糊查询</li><li>文本编辑器的Ctrl + F 查询功能</li></ul><h3 id="1-2-2-倒排索引"><a href="#1-2-2-倒排索引" class="headerlink" title="1.2.2    倒排索引"></a>1.2.2    倒排索引</h3><p>先举一个栗子：</p><p>例如我们使用新华字典查询汉字，新华字典有偏旁部首的目录（索引），我们查字首先查这个目录，找到这个目录中对应的偏旁部首，就可以通过这个目录中的偏旁部首找到这个字所在的位置（文档）。</p><p>Lucene会对文档建立倒排索引</p><p>1 、 提取资源中关键信息， 建立索引 （目录）</p><p>2 、 搜索时，根据关键字（目录），找到资源的位置</p><p><strong>算法描述：</strong></p><p>查询前会先将查询的内容提取出来组成文档(正文), 对文档进行切分词组成索引(目录), 索引和文档有关联关系, 查询的时候先查询索引, 通过索引找文档的这个过程叫做全文检索。</p><p><strong>切分词 :</strong> </p><p>就是将一句一句话切分成一个一个的词, 去掉停用词(的, 地, 得, a, an, the等)。去掉空格, 去掉标点符号, 大写字母转成小写字母, 去掉重复的词。</p><p><strong>为什么倒排索引比顺序扫描快?</strong></p><p>理解 : 因为索引可以去掉重复的词, 汉语常用的字和词大概等于, 字典加词典, 常用的英文在牛津词典也有收录.如果用计算机的速度查询, 字典+词典+牛津词典这些内容是非常快的. 但是用这些字典, 词典组成的文章却是千千万万不计其数. 索引的大小最多也就是字典+词典. 所以通过查询索引, 再通过索引和文档的关联关系找到文档速度比较快. 顺序扫描法则是直接去逐个查询那些不计其数的文章就算是计算的速度也会很慢.</p><p><strong>优点：</strong></p><p>查询准确率高</p><p>查询速度快， 并且不会因为查询内容量的增加， 而使查询速度逐渐变慢</p><p><strong>缺点：</strong></p><p>索引文件会占用额外的磁盘空间， 也就是占用磁盘量会增大。</p><p><strong>使用场景：</strong></p><p>海量数据查询</p><h2 id="1-3-全文检索技术应用场景"><a href="#1-3-全文检索技术应用场景" class="headerlink" title="1.3    全文检索技术应用场景"></a>1.3    全文检索技术应用场景</h2><p>应用场景 ：</p><p>1 、 站内搜索 （baidu贴吧、论坛、 京东、 taobao）</p><p>2 、 垂直领域的搜索 （ 818 工作网）</p><p>3 、 专业搜索引擎公司 （google、baidu）</p><h1 id="2-Lucene介绍"><a href="#2-Lucene介绍" class="headerlink" title="2.    Lucene介绍"></a>2.    Lucene介绍</h1><h2 id="2-1-什么是全文检索"><a href="#2-1-什么是全文检索" class="headerlink" title="2.1    什么是全文检索"></a>2.1    什么是全文检索</h2><p>计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式</p><h2 id="2-2-什么是Lucene"><a href="#2-2-什么是Lucene" class="headerlink" title="2.2    什么是Lucene"></a>2.2    什么是Lucene</h2><p><img src="https://img-blog.csdnimg.cn/20200815150340362.png" alt="image-20200815130843062"></p><p><strong>他是Lucene、Nutch 、Hadoop等项目的发起人Doug Cutting</strong></p><p>Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。</p><p>Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。</p><p>目前已经有很多应用程序的搜索功能是基于 Lucene 的，比如 Eclipse 的帮助系统的搜索功能。Lucene能够为文本类型的数据建立索引，所以你只要能把你要索引的数据格式转化的文本的，Lucene 就能对你的文档进行索引和搜索。比如你要对一些 HTML 文档，PDF 文档进行索引的话你就首先需要把HTML 文档和 PDF 文档转化成文本格式的，然后将转化后的内容交给 Lucene 进行索引，然后把创建好的索引文件保存到磁盘或者内存中，最后根据用户输入的查询条件在索引文件上进行查询。不指定要索引的文档的格式也使 Lucene 能够几乎适用于所有的搜索应用程序。</p><ul><li>Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供</li><li>Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻， 在Java开发环境里Lucene是一个成熟的免费开放源代码工具</li><li>Lucene并不是现成的搜索引擎产品，但可以用来制作搜索引擎产品</li></ul><h2 id="2-3-Lucene官网"><a href="#2-3-Lucene官网" class="headerlink" title="2.3    Lucene官网"></a>2.3    Lucene官网</h2><p>官网： <a href="http://lucene.apache.org/" target="_blank" rel="noopener">http://lucene.apache.org/</a></p><p><img src="https://img-blog.csdnimg.cn/20200815150351517.png" alt="image-20200815130906273"></p><h1 id="3-Lucene全文检索的流程"><a href="#3-Lucene全文检索的流程" class="headerlink" title="3.    Lucene全文检索的流程"></a>3.    Lucene全文检索的流程</h1><h2 id="3-1-索引和搜索流程图"><a href="#3-1-索引和搜索流程图" class="headerlink" title="3.1    索引和搜索流程图"></a>3.1    索引和搜索流程图</h2><p><img src="https://img-blog.csdnimg.cn/20200815150359937.png" alt="image-20200815130940539"></p><p>1 、绿色表示索引过程，对要搜索的原始内容进行索引构建一个索引库，索引过程包括：</p><p>确定原始内容即要搜索的内容</p><ul><li>获得文档</li><li>创建文档</li><li>分析文档</li><li>索引文档</li></ul><p>2 、红色表示搜索过程，从索引库中搜索内容，搜索过程包括：</p><p>用户通过搜索界面</p><ul><li>创建查询</li><li>执行搜索，从索引库搜索</li><li>渲染搜索结果</li></ul><h2 id="3-2-索引流程"><a href="#3-2-索引流程" class="headerlink" title="3.2    索引流程"></a>3.2    索引流程</h2><p>对文档索引的过程，将用户要搜索的文档内容进行索引，索引存储在索引库（index）中。</p><h3 id="3-2-1-原始内容"><a href="#3-2-1-原始内容" class="headerlink" title="3.2.1    原始内容"></a>3.2.1    原始内容</h3><p>原始内容是指要索引和搜索的内容。</p><p>原始内容包括互联网上的网页、数据库中的数据、磁盘上的文件等。</p><h3 id="3-2-2-获得文档（采集数据）"><a href="#3-2-2-获得文档（采集数据）" class="headerlink" title="3.2.2    获得文档（采集数据）"></a>3.2.2    获得文档（采集数据）</h3><p>从互联网上、数据库、文件系统中等获取需要搜索的原始信息，这个过程就是信息采集，采集数据的目的是为了对原始内容进行索引。</p><p>采集数据分类：</p><p>1 、对于互联网上网页，可以使用工具将网页抓取到本地生成html文件。</p><p>2 、数据库中的数据，可以直接连接数据库读取表中的数据。</p><p>3 、文件系统中的某个文件，可以通过I/O操作读取文件的内容。</p><p>在Internet上采集信息的软件通常称为爬虫或蜘蛛，也称为网络机器人，爬虫访问互联网上的每一个网页，将获取到的网页内容存储起来。</p><h3 id="3-2-3-创建文档"><a href="#3-2-3-创建文档" class="headerlink" title="3.2.3    创建文档"></a>3.2.3    创建文档</h3><p>获取原始内容的目的是为了索引，在索引前需要将原始内容创建成文档（Document），文档中包括一个一个的域（Field），域中存储内容。</p><p>这里我们可以将磁盘上的一个文件当成一个document，Document中包括一些Field，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150408368.png" alt="image-20200815131021214"></p><p>注意：每个Document可以有多个Field，不同的Document可以有不同的Field，同一个Document可以有相同的Field（域名和域值都相同）</p><h3 id="3-2-4-分析文档"><a href="#3-2-4-分析文档" class="headerlink" title="3.2.4    分析文档"></a>3.2.4    分析文档</h3><p>将原始内容创建为包含域（Field）的文档（document），需要再对域中的内容进行分析，分析成为一个一个的单词。</p><p>比如下边的文档经过分析如下：</p><p><strong>原文档内容：</strong></p><p>vivo X23 8GB+128GB 幻夜蓝 全网通4G手机</p><p>华为 HUAWEI 麦芒7 6G+64G 亮黑色 全网通4G手机</p><p><strong>分析后得到的词：</strong></p><p>vivo, x23, 8GB, 128GB, 幻夜, 幻夜蓝, 全网, 全网通, 网通, 4G, 手机, 华为, HUAWEI, 麦芒 7 。。。。</p><h3 id="3-2-5-索引文档"><a href="#3-2-5-索引文档" class="headerlink" title="3.2.5    索引文档"></a>3.2.5    索引文档</h3><p>对所有文档分析得出的语汇单元进行索引，索引的目的是为了搜索，最终要实现只搜索被索引的语汇单元从而找到Document（文档）。</p><p>创建索引是对语汇单元索引，通过词语找文档，这种索引的结构叫倒排索引结构。</p><p>倒排索引结构是根据内容（词汇）找文档，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150415482.png" alt="image-20200815131058163"></p><p><strong>倒排索引结构也叫反向索引结构，包括索引和文档两部分，索引即词汇表，它的规模较小，而文档集合较大。</strong></p><h3 id="3-2-6-Lucene底层存储结构"><a href="#3-2-6-Lucene底层存储结构" class="headerlink" title="3.2.6    Lucene底层存储结构"></a>3.2.6    Lucene底层存储结构</h3><p><img src="https://img-blog.csdnimg.cn/20200815150422408.png" alt="image-20200815131127933"></p><h2 id="3-3-搜索流程"><a href="#3-3-搜索流程" class="headerlink" title="3.3    搜索流程"></a>3.3    搜索流程</h2><p>搜索就是用户输入关键字，从索引中进行搜索的过程。根据关键字搜索索引，根据索引找到对应的文档，从而找到要搜索的内容。</p><h3 id="3-3-1-用户"><a href="#3-3-1-用户" class="headerlink" title="3.3.1    用户"></a>3.3.1    用户</h3><p>就是使用搜索的角色，用户可以是自然人，也可以是远程调用的程序。</p><h3 id="3-3-2-用户搜索界面"><a href="#3-3-2-用户搜索界面" class="headerlink" title="3.3.2    用户搜索界面"></a>3.3.2    用户搜索界面</h3><p>全文检索系统提供用户搜索的界面供用户提交搜索的关键字，搜索完成展示搜索结果。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150429916.png" alt="image-20200815131152718"></p><p>Lucene不提供制作用户搜索界面的功能，需要根据自己的需求开发搜索界面。</p><h3 id="3-3-3-创建查询"><a href="#3-3-3-创建查询" class="headerlink" title="3.3.3    创建查询"></a>3.3.3    创建查询</h3><p>用户输入查询关键字执行搜索之前需要先构建一个查询对象，查询对象中可以指定查询要查询关键字、要搜索的Field文档域等，查询对象会生成具体的查询语法，比如：</p><p><strong>name:手机</strong> : 表示要搜索name这个Field域中，内容为“手机”的文档。</p><p><strong>name:华为 AND 手机</strong> : 表示要搜索即包括关键字“华为” 并且也包括“手机”的文档。</p><h3 id="3-3-4-执行搜索"><a href="#3-3-4-执行搜索" class="headerlink" title="3.3.4    执行搜索"></a>3.3.4    执行搜索</h3><p>搜索索引过程：</p><p>1.根据查询语法在倒排索引词典表中分别找出对应搜索词的索引，从而找到索引所链接的文档链表。</p><p>例如搜索语法为 “<strong>name:华为 AND 手机</strong> ” 表示搜索出的文档中既要包括”华为”也要包括”手机”。</p><p><img src="https://img-blog.csdnimg.cn/20200815150437497.png" alt="image-20200815131224846"></p><p>2 、由于是AND，所以要对包含 华为 和 手机 词语的链表进行交集，得到文档链表应该包括每一个搜索词语</p><p>3 、获取文档中的Field域数据。</p><h3 id="3-3-5-渲染结果"><a href="#3-3-5-渲染结果" class="headerlink" title="3.3.5    渲染结果"></a>3.3.5    渲染结果</h3><p>以一个友好的界面将查询结果展示给用户，用户根据搜索结果找自己想要的信息，为了帮助用户很快找到自己的结果，提供了很多展示的效果，比如搜索结果中将关键字高亮显示，百度提供的快照等。</p><p><img src="https://img-blog.csdnimg.cn/20200815150444171.png" alt="image-20200815131315023"></p><h1 id="4-Lucene入门"><a href="#4-Lucene入门" class="headerlink" title="4.    Lucene入门"></a>4.    Lucene入门</h1><h2 id="4-1-Lucene准备"><a href="#4-1-Lucene准备" class="headerlink" title="4.1    Lucene准备"></a>4.1    Lucene准备</h2><p>Lucene可以在官网上下载。课程已经准备好了Lucene的文件，我们使用的是7.7.2版本，文件位置如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150452424.png" alt="image-20200815131337840"></p><p>解压后的效果：</p><p><img src="https://img-blog.csdnimg.cn/20200815150459178.png" alt="image-20200815131422005"></p><p>使用这三个文件的jar包，就可以实现lucene功能</p><h2 id="4-2-开发环境"><a href="#4-2-开发环境" class="headerlink" title="4.2    开发环境"></a>4.2    开发环境</h2><p>JDK： 1.8 （Lucene7以上，必须使用JDK1.8及以上版本）</p><p>数据库： MySQL</p><p>数据库脚本位置如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150506393.png" alt="image-20200815131448543"></p><p>导入到MySQL效果如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150513780.png" alt="image-20200815131517726"></p><h2 id="4-3-创建Java工程"><a href="#4-3-创建Java工程" class="headerlink" title="4.3    创建Java工程"></a>4.3    创建Java工程</h2><p>创建maven工程不依赖骨架, 测试即可，效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200815150522356.png" alt="image-20200815131537797"></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>luceneDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- IK中文分词器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入thymeleaf --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Json转换工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-4-索引流程"><a href="#4-4-索引流程" class="headerlink" title="4.4    索引流程"></a>4.4    索引流程</h2><h3 id="4-4-1-数据采集"><a href="#4-4-1-数据采集" class="headerlink" title="4.4.1    数据采集"></a>4.4.1    数据采集</h3><p>在电商网站中，全文检索的数据源在数据库中，需要通过jdbc访问数据库中 <strong>sku</strong> 表的内容。</p><h4 id="4-4-1-1-创建pojo"><a href="#4-4-1-1-创建pojo" class="headerlink" title="4.4.1.1    创建pojo"></a>4.4.1.1    创建pojo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sku</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品主键id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="comment">//库存数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">//品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line">    <span class="comment">//规格</span></span><br><span class="line">    <span class="keyword">private</span> String spec;</span><br><span class="line">    <span class="comment">//销量</span></span><br><span class="line">    <span class="keyword">private</span> Integer saleNum;</span><br><span class="line">    </span><br><span class="line">    get/set/toString...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-1-2-创建DAO接口"><a href="#4-4-1-2-创建DAO接口" class="headerlink" title="4.4.1.2    创建DAO接口"></a>4.4.1.2    创建DAO接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的Sku数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">querySkuList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-1-3-创建DAO接口实现类"><a href="#4-4-1-3-创建DAO接口实现类" class="headerlink" title="4.4.1.3    创建DAO接口实现类"></a>4.4.1.3    创建DAO接口实现类</h4><p>使用jdbc实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuDaoImpl</span> <span class="keyword">implements</span> <span class="title">SkuDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">querySkuList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据库链接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 预编译statement</span></span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 结果集</span></span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 商品列表</span></span><br><span class="line">        List&lt;Sku&gt; list = <span class="keyword">new</span> ArrayList&lt;Sku&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">// 连接数据库</span></span><br><span class="line">            connection = (Connection) DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/lucene"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// SQL语句</span></span><br><span class="line">            String sql = <span class="string">"SELECT * FROM tb_sku"</span>;</span><br><span class="line">            <span class="comment">// 创建preparedStatement</span></span><br><span class="line">            preparedStatement = (PreparedStatement) connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 获取结果集</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">// 结果集解析</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">                sku.setId(resultSet.getString(<span class="string">"id"</span>));</span><br><span class="line">                sku.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">                sku.setSpec(resultSet.getString(<span class="string">"spec"</span>));</span><br><span class="line">                sku.setBrandName(resultSet.getString(<span class="string">"brand_name"</span>));</span><br><span class="line">                sku.setCategoryName(resultSet.getString(<span class="string">"category_name"</span>));</span><br><span class="line">                sku.setImage(resultSet.getString(<span class="string">"image"</span>));</span><br><span class="line">                sku.setNum(resultSet.getInt(<span class="string">"num"</span>));</span><br><span class="line">                sku.setPrice(resultSet.getInt(<span class="string">"price"</span>));</span><br><span class="line">                sku.setSaleNum(resultSet.getInt(<span class="string">"sale_num"</span>));</span><br><span class="line">                list.add(sku);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-实现索引流程"><a href="#4-4-2-实现索引流程" class="headerlink" title="4.4.2    实现索引流程"></a>4.4.2    实现索引流程</h3><ol><li>采集数据</li><li>创建Document文档对象</li><li>创建分析器（分词器）</li><li>创建Directory对象，声明索引库存储位置</li><li>创建IndexWriterConfig配置信息类</li><li>创建IndexWriter写入对象</li><li>把Document写入到索引库中</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引库维护</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIndexManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 采集数据</span></span><br><span class="line">        SkuDao skuDao = <span class="keyword">new</span> SkuDaoImpl();</span><br><span class="line">        List&lt;Sku&gt; skuList = skuDao.querySkuList();</span><br><span class="line">        <span class="comment">// 2. 创建Document文档对象</span></span><br><span class="line">        List&lt;Document&gt; documents = <span class="keyword">new</span> ArrayList&lt;Document&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">            Document document = <span class="keyword">new</span> Document();</span><br><span class="line">            <span class="comment">// Document文档中添加Field域</span></span><br><span class="line">            <span class="comment">// 商品Id</span></span><br><span class="line">            <span class="comment">// Store.YES:表示存储到文档域中</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"id"</span>, sku.getId(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 商品名称</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, sku.getName(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 商品价格</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, String.valueOf(sku.getPrice()), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 品牌名称</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"brandName"</span>, sku.getBrandName(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 分类名称</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"categoryName"</span>, sku.getCategoryName(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 图片地址</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"image"</span>, sku.getImage(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 把Document放到list中</span></span><br><span class="line">            documents.add(document);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">//4. 创建Directory目录对象，目录对象表示索引库的位置</span></span><br><span class="line">        Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">        <span class="comment">//5. 创建IndexWriterConfig对象，这个对象中指定切分词使用的分词器</span></span><br><span class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">        <span class="comment">//6. 创建IndexWriter输出流对象，指定输出的位置和使用的config初始化对象</span></span><br><span class="line">        IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line">        <span class="comment">//7. 写入文档到索引库</span></span><br><span class="line">        <span class="keyword">for</span> (Document document : docList) &#123;</span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//8. 释放资源</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果：</p><p>在文件夹中出现了以下文件，表示创建索引成功</p><p><img src="https://img-blog.csdnimg.cn/20200815150529629.png" alt="image-20200815131603652"></p><h2 id="4-5-使用Luke查看索引"><a href="#4-5-使用Luke查看索引" class="headerlink" title="4.5    使用Luke查看索引"></a>4.5    使用Luke查看索引</h2><p>Luke作为Lucene工具包中的一个工具（<a href="http://www.getopt.org/luke/），可以通过界面来进行索引文件的查询、修改" target="_blank" rel="noopener">http://www.getopt.org/luke/），可以通过界面来进行索引文件的查询、修改</a></p><p>luke所在位置如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150536998.png" alt="image-20200815131624673"></p><p><strong>将luke-swing-8.0.0里面的内容, 放到一个硬盘根目录的文件夹下, 不能有空格和中文名称.</strong></p><p>运行luke.bat</p><p><img src="https://img-blog.csdnimg.cn/2020081515054950.png" alt="image-20200815131645625"></p><p>打开后，使用如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150556986.png" alt="image-20200815131706005"></p><p>下图是索引域的展示效果：</p><p><img src="https://img-blog.csdnimg.cn/20200815150604765.png" alt="image-20200815131718235"></p><p>下图是文档域展示效果</p><p><img src="https://img-blog.csdnimg.cn/20200815150611755.png" alt="image-20200815131727551"></p><h2 id="4-6-搜索流程"><a href="#4-6-搜索流程" class="headerlink" title="4.6    搜索流程"></a>4.6    搜索流程</h2><h3 id="4-6-1-输入查询语句"><a href="#4-6-1-输入查询语句" class="headerlink" title="4.6.1    输入查询语句"></a>4.6.1    输入查询语句</h3><p>Lucene可以通过query对象输入查询语句。同数据库的sql一样，lucene也有固定的查询语法：</p><p>最基本的有比如：AND, OR, NOT 等（必须大写）</p><p>举个栗子:</p><p>用户想找一个 <strong>name</strong> 域中包括 <strong>手</strong> 或 <strong>机</strong> 关键字的文档。</p><p>它对应的查询语句：<strong>name:手 OR name:机</strong></p><p>如下图是使用luke搜索的例子：</p><p><img src="https://img-blog.csdnimg.cn/20200815150619367.png" alt="image-20200815131738854"></p><h4 id="4-6-1-1-搜索分词"><a href="#4-6-1-1-搜索分词" class="headerlink" title="4.6.1.1    搜索分词"></a>4.6.1.1    搜索分词</h4><p>和索引过程的分词一样，这里要对用户输入的关键字进行分词，一般情况索引和搜索使用的分词器一致。</p><p>比如：输入搜索关键字“java学习”，分词后为java和学习两个词，与java和学习有关的内容都搜索出来了，如下：</p><p> <img src="https://img-blog.csdnimg.cn/20200815150626582.png" alt="image-20200815131842554"></p><h3 id="4-6-2-代码实现"><a href="#4-6-2-代码实现" class="headerlink" title="4.6.2    代码实现"></a>4.6.2    代码实现</h3><ol><li>创建Query搜索对象</li><li>创建Directory流对象,声明索引库位置</li><li>创建索引读取对象IndexReader</li><li>创建索引搜索对象IndexSearcher</li><li>使用索引搜索对象，执行搜索，返回结果集TopDocs</li><li>解析结果集</li><li>释放资源</li></ol><p>IndexSearcher搜索方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>indexSearcher.search(query, n)</td><td>根据Query搜索，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query, filter, n)</td><td>根据Query搜索，添加过滤策略，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query, n, sort)</td><td>根据Query搜索，添加排序策略，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query,filter, n, sort)</td><td>根据Query搜索，添加过滤策略，添加排序策略，返回评分最高的n条记录</td></tr></tbody></table><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试搜索过程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建Query搜索对象</span></span><br><span class="line">        <span class="comment">//1.1 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">        <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">//1.2 创建搜索解析器</span></span><br><span class="line">        <span class="comment">//第一个参数: 默认查询域, 如果查询的关键字中带搜索的域名, 则从指定域中查询, 如果不带域名则从, 默认搜索域中查询</span></span><br><span class="line">        <span class="comment">//queryParser.parse("brandName:华为手机");</span></span><br><span class="line">        <span class="comment">//第二个参数: 使用的分词器</span></span><br><span class="line">        QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">        <span class="comment">//1.3 创建搜索对象</span></span><br><span class="line">        <span class="comment">//华 OR  为   手   机</span></span><br><span class="line">        Query query = queryParser.parse(<span class="string">"华为手机"</span>);</span><br><span class="line">        <span class="comment">//2. 创建Directory流对象,声明索引库位置</span></span><br><span class="line">        Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">        <span class="comment">//3. 创建索引读取对象IndexReader</span></span><br><span class="line">        IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">        <span class="comment">//4. 创建索引搜索对象</span></span><br><span class="line">        IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">        <span class="comment">//5. 使用索引搜索对象，执行搜索，返回结果集TopDocs</span></span><br><span class="line">        <span class="comment">// 第一个参数：搜索对象，第二个参数：返回的数据条数，指定查询结果最顶部的n条数据返回</span></span><br><span class="line">        TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">        System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line">        <span class="comment">//5.1 获取结果集</span></span><br><span class="line">        ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">        <span class="comment">//6. 解析结果集</span></span><br><span class="line">        <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">                <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">                <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">                <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">                Document doc = indexSearcher.doc(docID);</span><br><span class="line">                System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">                <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">                System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 关闭流</span></span><br><span class="line">        indexReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Field域类型"><a href="#5-Field域类型" class="headerlink" title="5.    Field域类型"></a>5.    Field域类型</h1><h2 id="5-1-Field属性"><a href="#5-1-Field属性" class="headerlink" title="5.1    Field属性"></a>5.1    Field属性</h2><p>Field是文档中的域，包括Field名和Field值两部分，一个文档可以包括多个Field，Document只是Field的一个承载体，Field值即为要索引的内容，也是要搜索的内容。</p><p><strong>是否分词(tokenized)</strong></p><p>是：作分词处理，即将Field值进行分词，分词的目的是为了索引。</p><p>比如：商品名称、商品描述等，这些内容用户要输入关键字搜索，由于搜索的内容格式大、内容多需要分词后将语汇单元建立索引</p><p>否：不作分词处理</p><p>比如：商品id、订单号、身份证号等</p><p><strong>是否索引(indexed)</strong></p><p>是：进行索引。将Field分词后的词或整个Field值进行索引，存储到索引域，索引的目的是为了搜索。</p><p>比如：商品名称、商品描述分析后进行索引，订单号、身份证号不用分词但也要索引，这些将来都要作为查询条件。</p><p>否：不索引。</p><p>比如：图片路径、文件路径等，不用作为查询条件的不用索引。</p><p><strong>是否存储(stored)</strong></p><p>是：将Field值存储在文档域中，存储在文档域中的Field才可以从Document中获取。</p><p>比如：商品名称、订单号，凡是将来要从Document中获取的Field都要存储。</p><p>否：不存储Field值</p><p>比如：商品描述，内容较大不用存储。如果要向用户展示商品描述可以从系统的关系数据库中获取。</p><h2 id="5-2-Field常用类型"><a href="#5-2-Field常用类型" class="headerlink" title="5.2    Field常用类型"></a>5.2    Field常用类型</h2><p>下边列出了开发中常用 的Filed类型，注意Field的属性，根据需求选择：</p><table><thead><tr><th align="left">Field类</th><th>数据类型</th><th>Analyzed是否分词</th><th>Indexed是否索引</th><th>Stored是否存储</th><th>说明</th></tr></thead><tbody><tr><td align="left">StringField(FieldName,FieldValue,Store.YES))</td><td>字符串</td><td>N</td><td>Y</td><td>Y或N</td><td>这个Field用来构建一个字符串Field，但是不会进行分词，会将整个串存储在索引中，比如(订单号,身份证号等)是否存储在文档中用Store.YES或Store.NO决定</td></tr><tr><td align="left">FloatPoint(FieldName, FieldValue)</td><td>Float型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Float数字型Field，进行分词和索引，不存储, 比如(价格) 存储在文档中</td></tr><tr><td align="left">DoublePoint(FieldName,FieldValue)</td><td>Double型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Double数字型Field，进行分词和索引，不存储</td></tr><tr><td align="left">LongPoint(FieldName, FieldValue)</td><td>Long型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Long数字型Field，进行分词和索引，不存储</td></tr><tr><td align="left">IntPoint(FieldName, FieldValue)</td><td>Integer型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Integer数字型Field，进行分词和索引，不存储</td></tr><tr><td align="left">StoredField(FieldName, FieldValue)</td><td>重载方法，支持多种类型</td><td>N</td><td>N</td><td>Y</td><td>这个Field用来构建不同类型Field不分析，不索引，但要Field存储在文档中</td></tr><tr><td align="left">TextField(FieldName, FieldValue,Store.NO) 或 TextField(FieldName,reader)</td><td>字符串或流</td><td>Y</td><td>Y</td><td>Y或N</td><td>如果是一个Reader, lucene猜测内容比较多,会采用Unstored的策略.</td></tr><tr><td align="left">NumericDocValuesField(FieldName,FieldValue)</td><td>数值</td><td>_</td><td>_</td><td>_</td><td>配合其他域排序使用</td></tr></tbody></table><h2 id="5-3-Field修改"><a href="#5-3-Field修改" class="headerlink" title="5.3    Field修改"></a>5.3    Field修改</h2><p>对之前编写的testCreateIndex()方法进行修改。</p><p>代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建域对象并且放入文档对象中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为主键分词后无意义</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 如果根据id主键查询, 就必须索引</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为主键id比较特殊, 可以确定唯一的一条数据, 在业务上一般有重要所用, 所以存储存储后, 才可以获取到id具体的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("id", sku.getId(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>, sku.getId(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 是, 因为名称字段需要查询, 并且分词后有意义所以需要分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 因为需要根据名称字段查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示商品名称, 所以需要存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, sku.getName(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 是(因为lucene底层算法规定, 如果根据价格范围查询, 必须分词)</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 需要根据价格进行范围查询, 所以必须索引</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示价格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("price", String.valueOf(sku.getPrice()), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> IntPoint(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line">document.add(<span class="keyword">new</span> StoredField(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为不查询, 所以不索引, 因为不索引所以不分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 否, 因为不需要根据图片地址路径查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示商品图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("image", sku.getImage(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StoredField(<span class="string">"image"</span>, sku.getImage()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为分类是专有名词, 是一个整体, 所以不分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 因为需要根据分类查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("categoryName", sku.getCategoryName(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StringField(<span class="string">"categoryName"</span>, sku.getCategoryName(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为品牌是专有名词, 是一个整体, 所以不分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 因为需要根据品牌进行查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示品牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("brandName", sku.getBrandName(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StringField(<span class="string">"brandName"</span>, sku.getBrandName(), Field.Store.YES));</span><br></pre></td></tr></table></figure><h1 id="6-索引维护"><a href="#6-索引维护" class="headerlink" title="6.    索引维护"></a>6.    索引维护</h1><h2 id="6-1-需求"><a href="#6-1-需求" class="headerlink" title="6.1    需求"></a>6.1    需求</h2><p>管理人员通过电商系统更改图书信息，这时更新的是关系数据库，如果使用lucene搜索图书信息，需要在数据库表book信息变化时及时更新lucene索引库。</p><h2 id="6-2-添加索引"><a href="#6-2-添加索引" class="headerlink" title="6.2    添加索引"></a>6.2    添加索引</h2><p>调用 indexWriter.addDocument（doc）添加索引。</p><p>参考入门程序的创建索引。</p><h2 id="6-3-修改索引"><a href="#6-3-修改索引" class="headerlink" title="6.3    修改索引"></a>6.3    修改索引</h2><p>更新索引是先删除再添加，建议对更新需求采用此方法并且要保证对已存在的索引执行更新，可以先查询出来，确定更新记录存在执行更新操作。</p><p>如果更新索引的目标文档对象不存在，则执行添加。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引库修改操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//需要变更成的内容</span></span><br><span class="line">    Document document = <span class="keyword">new</span> Document();</span><br><span class="line"></span><br><span class="line">    document.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>, <span class="string">"100000003145"</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"xxxx"</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> IntPoint(<span class="string">"price"</span>, <span class="number">123</span>));</span><br><span class="line">    document.add(<span class="keyword">new</span> StoredField(<span class="string">"price"</span>, <span class="number">123</span>));</span><br><span class="line">    document.add(<span class="keyword">new</span> StoredField(<span class="string">"image"</span>, <span class="string">"xxxx.jpg"</span>));</span><br><span class="line">    document.add(<span class="keyword">new</span> StringField(<span class="string">"categoryName"</span>, <span class="string">"手机"</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> StringField(<span class="string">"brandName"</span>, <span class="string">"华为"</span>, Field.Store.YES));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 修改, 第一个参数: 修改条件, 第二个参数: 修改成的内容</span></span><br><span class="line">    indexWriter.updateDocument(<span class="keyword">new</span> Term(<span class="string">"id"</span>, <span class="string">"100000003145"</span>), document);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-删除索引"><a href="#6-4-删除索引" class="headerlink" title="6.4    删除索引"></a>6.4    删除索引</h2><h3 id="6-4-1-删除指定索引"><a href="#6-4-1-删除指定索引" class="headerlink" title="6.4.1    删除指定索引"></a>6.4.1    删除指定索引</h3><p>根据Term项删除索引，满足条件的将全部删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试根据条件删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 测试根据条件删除</span></span><br><span class="line">    indexWriter.deleteDocuments(<span class="keyword">new</span> Term(<span class="string">"id"</span>, <span class="string">"998188"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下图：索引域没有变化</p><p><img src="https://img-blog.csdnimg.cn/20200815150636544.png" alt="image-20200815142234343"></p><p>文档域数据被删除掉</p><p><img src="https://img-blog.csdnimg.cn/20200815150645283.png" alt="image-20200815142300903"></p><h3 id="6-4-2-删除全部索引（慎用）"><a href="#6-4-2-删除全部索引（慎用）" class="headerlink" title="6.4.2    删除全部索引（慎用）"></a>6.4.2    删除全部索引（慎用）</h3><p>将索引目录的索引信息全部删除，直接彻底删除，无法恢复。</p><p>建议参照关系数据库基于主键删除方式，所以在创建索引时需要创建一个主键Field，删除时根据此主键Field删除。</p><p>索引删除后将放在Lucene的回收站中，Lucene3.X版本可以恢复删除的文档，3.X之后无法恢复。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试根据条件删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试删除所有内容</span></span><br><span class="line">    indexWriter.deleteAll();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引域数据清空</p><p><img src="https://img-blog.csdnimg.cn/20200815150756623.png" alt="image-20200815142540727"></p><p>文档域数据也清空</p><p><img src="https://img-blog.csdnimg.cn/20200815150859956.png" alt="image-20200815142558764"></p><h1 id="7-分词器"><a href="#7-分词器" class="headerlink" title="7.    分词器"></a>7.    分词器</h1><h2 id="7-1-分词理解"><a href="#7-1-分词理解" class="headerlink" title="7.1    分词理解"></a>7.1    分词理解</h2><p>在对Document中的内容进行索引之前，需要使用分词器进行分词 ，分词的目的是为了搜索。分词的主要过程就是先分词后过滤。</p><ul><li>分词：采集到的数据会存储到document对象的Field域中，分词就是将Document中Field的value值切分成一个一个的词。</li><li>过滤：包括去除标点符号过滤、去除停用词过滤（的、是、a、an、the等）、大写转小写、词的形还原（复数形式转成单数形参、过去式转成现在式。。。）等。</li></ul><p>什么是停用词？停用词是为节省存储空间和提高搜索效率，搜索引擎在索引页面或处理搜索请求时会自动忽略某些字或词，这些字或词即被称为Stop Words(停用词)。比如语气助词、副词、介词、连接词等，通常自身并无明确的意义，只有将其放入一个完整的句子中才有一定作用，如常见的“的”、“在”、“是”、“啊”等。</p><p>对于分词来说，不同的语言，分词规则不同。Lucene作为一个工具包提供不同国家的分词器</p><h2 id="7-2-Analyzer使用时机"><a href="#7-2-Analyzer使用时机" class="headerlink" title="7.2    Analyzer使用时机"></a>7.2    Analyzer使用时机</h2><h3 id="7-2-1-索引时使用Analyzer"><a href="#7-2-1-索引时使用Analyzer" class="headerlink" title="7.2.1    索引时使用Analyzer"></a>7.2.1    索引时使用Analyzer</h3><p>输入关键字进行搜索，当需要让该关键字与文档域内容所包含的词进行匹配时需要对文档域内容进行分析，需要经过Analyzer分析器处理生成语汇单元（Token）。分析器分析的对象是文档中的Field域。当Field的属性tokenized（是否分词）为true时会对Field值进行分析，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150909595.png" alt="image-20200815142747012"></p><p>对于一些Field可以不用分析：</p><p>1 、不作为查询条件的内容，比如文件路径</p><p>2 、不是匹配内容中的词而匹配Field的整体内容，比如订单号、身份证号等。</p><h3 id="7-2-2-搜索时使用Analyzer"><a href="#7-2-2-搜索时使用Analyzer" class="headerlink" title="7.2.2    搜索时使用Analyzer"></a>7.2.2    搜索时使用Analyzer</h3><p>对搜索关键字进行分析和索引分析一样，使用Analyzer对搜索关键字进行分析、分词处理，使用分析后每个词语进行搜索。比如：搜索关键字：spring web ，经过分析器进行分词，得出：spring web拿词去索引词典表查找 ，找到索引链接到Document，解析Document内容。</p><p>对于匹配整体Field域的查询可以在搜索时不分析，比如根据订单号、身份证号查询等。</p><p><strong>注意：搜索使用的分析器要和索引使用的分析器一致。</strong></p><h2 id="7-3-Lucene原生分词器"><a href="#7-3-Lucene原生分词器" class="headerlink" title="7.3    Lucene原生分词器"></a>7.3    Lucene原生分词器</h2><p>以下是Lucene中自带的分词器</p><h3 id="7-3-1-StandardAnalyzer"><a href="#7-3-1-StandardAnalyzer" class="headerlink" title="7.3.1    StandardAnalyzer"></a>7.3.1    StandardAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>Lucene提供的标准分词器, 可以对用英文进行分词, 对中文是单字分词, 也就是一个字就认为是一个词.</strong></p><p>如下是org.apache.lucene.analysis.standard.standardAnalyzer的部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TokenStreamComponents <span class="title">createComponents</span><span class="params">(String fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> StandardTokenizer src = <span class="keyword">new</span> StandardTokenizer();</span><br><span class="line">    src.setMaxTokenLength(<span class="keyword">this</span>.maxTokenLength);</span><br><span class="line">    TokenStream tok = <span class="keyword">new</span> LowerCaseFilter(src);</span><br><span class="line">    TokenStream tok = <span class="keyword">new</span> StopFilter(tok, <span class="keyword">this</span>.stopwords);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenStreamComponents(src, tok) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setReader</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">            src.setMaxTokenLength(StandardAnalyzer.<span class="keyword">this</span>.maxTokenLength);</span><br><span class="line">            <span class="keyword">super</span>.setReader(reader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tokenizer就是分词器，负责将reader转换为语汇单元即进行分词处理，Lucene提供了很多的分词器，也可以使用第三方的分词，比如IKAnalyzer一个中文分词器。</p><p>TokenFilter是分词过滤器，负责对语汇单元进行过滤，TokenFilter可以是一个过滤器链儿，Lucene提供了很多的分词器过滤器，比如大小写转换、去除停用词等。</p><p>如下图是语汇单元的生成过程：</p><p><img src="https://img-blog.csdnimg.cn/20200815150916637.png" alt="image-20200815143028559"></p><p>从一个Reader字符流开始，创建一个基于Reader的Tokenizer分词器，经过三个TokenFilter生成语汇单元Token。</p><p>比如下边的文档经过分析器分析如下：</p><p>原文档内容：</p><p><img src="https://img-blog.csdnimg.cn/20200815150924987.png" alt="image-20200815143041788"></p><p>分析后得到的多个语汇单元：</p><p><img src="https://img-blog.csdnimg.cn/20200815150931100.png" alt="image-20200815143051262"></p><h3 id="7-3-2-WhitespaceAnalyzer"><a href="#7-3-2-WhitespaceAnalyzer" class="headerlink" title="7.3.2    WhitespaceAnalyzer"></a>7.3.2    WhitespaceAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>仅仅是去掉了空格，没有其他任何操作，不支持中文。</strong></p><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去掉空格分词器, 不支持中文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestWhitespaceAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> WhitespaceAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo X23 8GB+128GB 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150937730.png" alt="image-20200815143249169"></p><h3 id="7-3-3-SimpleAnalyzer"><a href="#7-3-3-SimpleAnalyzer" class="headerlink" title="7.3.3    SimpleAnalyzer"></a>7.3.3    SimpleAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>将除了字母以外的符号全部去除，并且将所有字母变为小写，需要注意的是这个分词器同样把数字也去除了，同样不支持中文。</strong></p><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单分词器: 不支持中文, 将除了字母之外的所有符号全部取出, 所有大写字母转换成小写字母, 对于数字也会去除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSimpleAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> SimpleAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo，X23。 8GB+128GB； 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150944708.png" alt="image-20200815143515285"></p><h3 id="7-3-4-CJKAnalyzer"><a href="#7-3-4-CJKAnalyzer" class="headerlink" title="7.3.4    CJKAnalyzer"></a>7.3.4    CJKAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>这个支持中日韩文字，前三个字母也就是这三个国家的缩写。对中文是二分法分词, 去掉空格, 去掉标点符号。个人感觉对中文支持依旧很烂。</strong></p><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中日韩分词器: 使用二分法分词, 去掉空格, 去掉标点符号, 所有大写字母转换成小写字母</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestCJKAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> CJKAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo，X23。 8GB+128GB； 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150951573.png" alt="image-20200815143641813"></p><h3 id="7-3-5-SmartChineseAnalyzer"><a href="#7-3-5-SmartChineseAnalyzer" class="headerlink" title="7.3.5    SmartChineseAnalyzer"></a>7.3.5    SmartChineseAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>对中文支持也不是很好，扩展性差，扩展词库，禁用词库和同义词库等不好处理。</strong></p><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSmartChineseAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> SmartChineseAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo，X23。 8GB+128GB； 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150957583.png" alt="image-20200815143911478"></p><h2 id="7-4-第三方中文分词器"><a href="#7-4-第三方中文分词器" class="headerlink" title="7.4    第三方中文分词器"></a>7.4    第三方中文分词器</h2><h3 id="7-4-1-什么是中文分词器"><a href="#7-4-1-什么是中文分词器" class="headerlink" title="7.4.1    什么是中文分词器"></a>7.4.1    什么是中文分词器</h3><p>学过英文的都知道，英文是以单词为单位的，单词与单词之间以空格或者逗号句号隔开。所以对于英文，我们可以简单以空格判断某个字符串是否为一个单词，比如I love China，love 和 China很容易被程序区分开来。</p><p>而中文则以字为单位，字又组成词，字和词再组成句子。中文“我爱中国”就不一样了，电脑不知道“中国”是一个词语还是“爱中”是一个词语。</p><p>把中文的句子切分成有意义的词，就是中文分词，也称切词。我爱中国，分词的结果是：我、爱、中国。</p><h3 id="7-4-2-第三方中文分词器简介"><a href="#7-4-2-第三方中文分词器简介" class="headerlink" title="7.4.2    第三方中文分词器简介"></a>7.4.2    第三方中文分词器简介</h3><ul><li>paoding： 庖丁解牛最新版在 <a href="https://code.google.com/p/paoding/" target="_blank" rel="noopener">https://code.google.com/p/paoding/</a> 中最多支持Lucene 3.0，且最新提交的代码在 2008-06-03，在svn中最新也是 2010 年提交，已经过时，不予考虑。</li><li>mmseg4j：最新版已从 <a href="https://code.google.com/p/mmseg4j/" target="_blank" rel="noopener">https://code.google.com/p/mmseg4j/</a> 移至 <a href="https://github.com/chenlb/mmseg4j-solr，支持Lucene" target="_blank" rel="noopener">https://github.com/chenlb/mmseg4j-solr，支持Lucene</a> 4.10，且在github中最新提交代码是 2014 年 6 月，从 09 年～ 14 年一共有： 18 个版本，也就是一年几乎有 3 个大小版本，有较大的活跃度，用了mmseg算法。</li><li>IK-analyzer： 最新版在<a href="https://code.google.com/p/ik-analyzer/上，支持Lucene" target="_blank" rel="noopener">https://code.google.com/p/ik-analyzer/上，支持Lucene</a> 4.10从 2006 年12 月推出1.0版开始， IKAnalyzer已经推出了 4 个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。从3.0版本开 始，IK发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。在 2012 版本中，IK实现了简单的分词 歧义排除算法，标志着IK分词器从单纯的词典分词向模拟语义分词衍化。 但是也就是2012 年 12 月后没有在更新。</li><li>ansj_seg：最新版本在 <a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="noopener">https://github.com/NLPchina/ansj_seg</a> tags仅有1.1版本，从 2012 年到2014 年更新了大小 6 次，但是作者本人在 2014 年 10 月 10 日说明：“可能我以后没有精力来维护ansj_seg了”，现在由”nlp_china”管理。 2014 年 11 月有更新。并未说明是否支持Lucene，是一个由CRF（条件随机场）算法所做的分词算法。</li><li>imdict-chinese-analyzer：最新版在 <a href="https://code.google.com/p/imdict-chinese-analyzer/" target="_blank" rel="noopener">https://code.google.com/p/imdict-chinese-analyzer/</a> ， 最新更新也在 2009 年 5 月，下载源码，不支持Lucene 4.10 。是利用HMM（隐马尔科夫链）算法。</li><li>Jcseg：最新版本在git.oschina.net/lionsoul/jcseg，支持Lucene 4.10，作者有较高的活跃度。利用mmseg算法。</li></ul><h3 id="7-4-3-使用中文分词器IKAnalyzer"><a href="#7-4-3-使用中文分词器IKAnalyzer" class="headerlink" title="7.4.3    使用中文分词器IKAnalyzer"></a>7.4.3    使用中文分词器IKAnalyzer</h3><p>IKAnalyzer继承Lucene的Analyzer抽象类，使用IKAnalyzer和Lucene自带的分析器方法一样，将Analyzer测试代码改为IKAnalyzer测试中文分词效果。</p><p>如果使用中文分词器ik-analyzer，就需要在索引和搜索程序中使用一致的分词器：IK-analyzer。</p><p>1、添加依赖, pom.xml中加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- IK中文分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、加入配置文件:</p><p><img src="https://img-blog.csdnimg.cn/20200815151004109.png" alt="image-20200815144413628"></p><p>3、测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用第三方分词器(IK分词)</span></span><br><span class="line"><span class="comment"> * 特点: 支持中文语义分析, 提供停用词典, 提供扩展词典, 供程序员扩展使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestIKAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo X23 8GB+128GB 幻夜蓝,水滴屏全面屏,游戏手机.移动联通电信全网通4G手机"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试结果</p><p><img src="https://img-blog.csdnimg.cn/20200815151010320.png" alt="image-20200815144534111"></p><h3 id="7-4-4-扩展中文词库"><a href="#7-4-4-扩展中文词库" class="headerlink" title="7.4.4    扩展中文词库"></a>7.4.4    扩展中文词库</h3><p>如果想配置扩展词和停用词，就创建扩展词的文件和停用词的文件。</p><p>从ikanalyzer包中拷贝配置文件</p><p><img src="https://img-blog.csdnimg.cn/20200815151028230.png" alt="image-20200815144603035"></p><p>拷贝到资源文件夹中</p><p><img src="https://img-blog.csdnimg.cn/20200815151038797.png" alt="image-20200815144637464"></p><p><strong>IKAnalyzer.cfg.xml配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>ext.dic;<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_stopwords"</span>&gt;</span>stopword.dic;<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>停用词典stopword.dic作用 :</strong></p><p>停用词典中的词例如: a, an, the, 的, 地, 得等词汇, 凡是出现在停用词典中的字或者词, 在切分词的时候会被过滤掉.</p><p><strong>扩展词典ext.dic作用 :</strong></p><p>扩展词典中的词例如: 程序员, 贵州茅台等专有名词, 在汉语中一些公司名称, 行业名称, 分类, 品牌等不是汉语中的词汇, 是专有名词. 这些分词器默认不识别, 所以需要放入扩展词典中, 效果是被强制分成一个词.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-搜索技术理论基础&quot;&gt;&lt;a href=&quot;#1-搜索技术理论基础&quot; class=&quot;headerlink&quot; title=&quot;1.    搜索技术理论基础&quot;&gt;&lt;/a&gt;1.    搜索技术理论基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-为什么要学习Lucene&quot;&gt;&lt;a href=&quot;#1-1-为什么要学习Lucene&quot; class=&quot;headerlink&quot; title=&quot;1.1    为什么要学习Lucene&quot;&gt;&lt;/a&gt;1.1    为什么要学习Lucene&lt;/h2&gt;&lt;p&gt;原来的方式实现搜索功能，我们的搜索流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020081515031765.png&quot; alt=&quot;image-20200815130627095&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图就是原始搜索引擎技术，如果用户比较少而且数据库的数据量比较小，那么这种方式实现搜索功能在企业中是比较常见的。&lt;/p&gt;
&lt;p&gt;但是数据量过多时，数据库的压力就会变得很大，查询速度会变得非常慢。我们需要使用更好的解决方案来分担数据库的压力。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="Lucene" scheme="https://wgy1993.gitee.io/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="https://wgy1993.gitee.io/archives/6f2612a2.html"/>
    <id>https://wgy1993.gitee.io/archives/6f2612a2.html</id>
    <published>2020-08-12T06:17:29.000Z</published>
    <updated>2020-08-12T06:37:06.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1.    SpringBoot简介"></a>1.    SpringBoot简介</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化老的Spring 应用开发。该框架使用了自动方式来对开发工程进行配置，减少开发人员定义配置复杂度。</p><a id="more"></a><h2 id="1-1-设计初衷"><a href="#1-1-设计初衷" class="headerlink" title="1.1    设计初衷"></a>1.1    设计初衷</h2><ul><li>为Spring开发者提供一种，更快速、体验更好的Spring应用开发方式。</li><li>开箱即用，同时也可快速扩展，嵌入式的Tomcat。</li><li>绝对没有冗余代码，无需XML配置。</li></ul><h2 id="1-2-核心功能"><a href="#1-2-核心功能" class="headerlink" title="1.2    核心功能"></a>1.2    核心功能</h2><ul><li>核心能力：Spring容器、日志、<strong>自动配置AutoCongfiguration</strong>、<strong>Starters</strong></li><li>web应用的能力：MVC、嵌入式容器</li><li>数据访问(持久化)：关系型数据库、非关系型数据库</li><li>强大的整合其他技术的能力</li><li>测试：强悍的应用测试</li></ul><h3 id="1-2-1-SpringBoot在开发中的地位"><a href="#1-2-1-SpringBoot在开发中的地位" class="headerlink" title="1.2.1    SpringBoot在开发中的地位"></a>1.2.1    SpringBoot在开发中的地位</h3><p>1、农业时代Java开发方式：</p><ul><li>基于Java底层原生API，纯手动去实现，典型技术Html、JavaScript、CSS，JDBC，DBUtils，Socket…..</li><li>框架是拯救者，解放了农业时代的程序猿们，框架为我们做的更多</li></ul><p>2、工业时代Java开发方式：</p><ul><li>各种框架一顿搞：典型代表Spring，SpringMVC，Mybatis，Hibernate，Struts，Freemaker，JBPM…</li><li>微服务是拯救者，解放了工业时代的程序猿们，微服务让我们过上了小康生活</li></ul><p>3、现代化Java开发方式：</p><ul><li>SpringBoot整合并简化一切Spring应用开发中的技术</li><li>各种SpringCloud微服务：服务注册与发现，负载均衡与熔断，网关和集群</li><li>想要学习SpringCloud的整套微服务架构系统，必先学习SpringBoot，它是SpringCloud的基础。SpringCloud项目都是SpringBoot开发出来的。</li></ul><p>4、人工智能化的Java开发方式：</p><ul><li>在未来。智能Ai可以替我们写代码，到时候我们都就做机器人的指挥者，不用干活。闲余时间天天玩游戏…</li></ul><p><img src="https://img-blog.csdnimg.cn/20200812140155328.png" alt="image-20200812101442950"></p><h2 id="1-3-开发环境要求"><a href="#1-3-开发环境要求" class="headerlink" title="1.3    开发环境要求"></a>1.3    开发环境要求</h2><ul><li>Spring Boot 的2.1.7.RELEASES正式发行版</li><li>使用Java8或 Java 11</li><li>Spring版本是5.1.9及以上</li><li>构建工具版本：Maven ，版本要求是3.3及以上。</li><li>Servlet容器版本：Spring Boot应用程序最低支持到Servlet 3.1的容器</li></ul><table><thead><tr><th>Name</th><th>Servlet Version</th></tr></thead><tbody><tr><td>Tomcat 9.0</td><td>4.0</td></tr><tr><td>Jetty 9.4</td><td>3.1</td></tr><tr><td>Undertow 2.0</td><td>4.0</td></tr></tbody></table><h2 id="1-4-Spring怎么做Web开发？"><a href="#1-4-Spring怎么做Web开发？" class="headerlink" title="1.4    Spring怎么做Web开发？"></a>1.4    Spring怎么做Web开发？</h2><p>我们怎么开发一个web项目：</p><ol><li>web.xml配置：SpringMVC核心控制器(DispatchServlet)，Spring容器监听器，编码过滤器….</li><li>Spring 配置：包扫描(service、dao)，配置数据源，配置事务….</li><li>SpringMVC配置：包扫描(controller)，视图解析器，注解驱动，拦截器，静态资源….</li><li>日志配置</li><li>少量业务代码</li><li>…</li><li>部署 Tomcat 调试，每次测试都需要部署</li><li>…</li></ol><p>但是如果用 Spring Boot 呢？</p><p>超简单！无需配置！！无感Tomcat！超迅速搭建功能强大的整套 Web！到底多简单？入门案例揭晓。</p><h1 id="2-SpringBoot快速入门"><a href="#2-SpringBoot快速入门" class="headerlink" title="2.    SpringBoot快速入门"></a>2.    SpringBoot快速入门</h1><h2 id="2-1-Maven搭建SpringBoot工程"><a href="#2-1-Maven搭建SpringBoot工程" class="headerlink" title="2.1    Maven搭建SpringBoot工程"></a>2.1    Maven搭建SpringBoot工程</h2><p>Maven搭建SpringBoot工程，实现web的请求响应。浏览器访问在页面中输出 helloworld 。</p><h3 id="2-1-1-实现步骤"><a href="#2-1-1-实现步骤" class="headerlink" title="2.1.1    实现步骤"></a>2.1.1    实现步骤</h3><ol><li>创建Maven工程</li><li>pom.xml文件中配置起步依赖</li><li>编写SpringBoot启动引导类</li><li>编写Controller</li><li>访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a> 测试</li></ol><h3 id="2-1-2-实现过程"><a href="#2-1-2-实现过程" class="headerlink" title="2.1.2    实现过程"></a>2.1.2    实现过程</h3><h4 id="2-1-2-1-创建Maven工程"><a href="#2-1-2-1-创建Maven工程" class="headerlink" title="2.1.2.1    创建Maven工程"></a>2.1.2.1    创建Maven工程</h4><h4 id="2-1-2-2-配置起步依赖"><a href="#2-1-2-2-配置起步依赖" class="headerlink" title="2.1.2.2    配置起步依赖"></a>2.1.2.2    配置起步依赖</h4><p>在pom.xml文件中配置父坐标和web的起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承SpringBoot父POM文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web 开发的相关依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-3-编写SpringBoot引导类"><a href="#2-1-2-3-编写SpringBoot引导类" class="headerlink" title="2.1.2.3    编写SpringBoot引导类"></a>2.1.2.3    编写SpringBoot引导类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写SpringBoot引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span><span class="comment">//开启自动配置</span></span><br><span class="line"><span class="meta">@ComponentScan</span>()<span class="comment">//包扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-4-编写Controller"><a href="#2-1-2-4-编写Controller" class="headerlink" title="2.1.2.4    编写Controller"></a>2.1.2.4    编写Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-5-访问测试"><a href="#2-1-2-5-访问测试" class="headerlink" title="2.1.2.5    访问测试"></a>2.1.2.5    访问测试</h4><p><img src="https://img-blog.csdnimg.cn/20200812140422623.png" alt="image-20200812103150555"></p><h2 id="2-2-使用IDEA快速创建SpringBoot项目"><a href="#2-2-使用IDEA快速创建SpringBoot项目" class="headerlink" title="2.2    使用IDEA快速创建SpringBoot项目"></a>2.2    使用IDEA快速创建SpringBoot项目</h2><p>使用Spring Initializr 方式创建SpringBoot工程。然后实现入门案例的代码。</p><h3 id="2-2-1-实现步骤"><a href="#2-2-1-实现步骤" class="headerlink" title="2.2.1    实现步骤"></a>2.2.1    实现步骤</h3><ol><li>创建SpringBoot项目：使用Spring Initializr</li><li>配置项目元信息</li><li>勾选起步依赖</li><li>再次编写controller</li><li>访问接口测试：<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></li></ol><h3 id="2-2-2-实现过程"><a href="#2-2-2-实现过程" class="headerlink" title="2.2.2    实现过程"></a>2.2.2    实现过程</h3><h4 id="2-2-2-1-使用Spring-Initializr创建工程"><a href="#2-2-2-1-使用Spring-Initializr创建工程" class="headerlink" title="2.2.2.1    使用Spring Initializr创建工程"></a>2.2.2.1    使用Spring Initializr创建工程</h4><p><img src="https://img-blog.csdnimg.cn/20200812140511500.png" alt="image-20200812103611201"></p><h4 id="2-2-2-2-配置项目信息"><a href="#2-2-2-2-配置项目信息" class="headerlink" title="2.2.2.2    配置项目信息"></a>2.2.2.2    配置项目信息</h4><p><img src="https://img-blog.csdnimg.cn/20200812140554328.png" alt="image-20200812103645650"></p><h4 id="2-2-2-3-勾选起步依赖"><a href="#2-2-2-3-勾选起步依赖" class="headerlink" title="2.2.2.3    勾选起步依赖"></a>2.2.2.3    勾选起步依赖</h4><p><img src="https://img-blog.csdnimg.cn/20200812140617521.png" alt="image-20200812103807655"></p><p>创建完成后工程目录结构</p><p><img src="https://img-blog.csdnimg.cn/20200812140641978.png" alt="image-20200812103852555"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//组合注解，一个顶三个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootFasterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootFasterApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom文件介绍</p><p><img src="https://img-blog.csdnimg.cn/2020081214070931.png" alt="image-20200812103937407"></p><h4 id="2-2-2-4-编写Controller"><a href="#2-2-2-4-编写Controller" class="headerlink" title="2.2.2.4    编写Controller"></a>2.2.2.4    编写Controller</h4><p>同上案例</p><h4 id="2-2-2-5-访问测试"><a href="#2-2-2-5-访问测试" class="headerlink" title="2.2.2.5    访问测试"></a>2.2.2.5    访问测试</h4><p><a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><h2 id="2-3-SpringBoot工程热部署-LiveReload"><a href="#2-3-SpringBoot工程热部署-LiveReload" class="headerlink" title="2.3    SpringBoot工程热部署(LiveReload)"></a>2.3    SpringBoot工程热部署(LiveReload)</h2><p>每次重启服务很麻烦，可以使用热部署方式</p><h3 id="2-3-1-实现步骤"><a href="#2-3-1-实现步骤" class="headerlink" title="2.3.1    实现步骤"></a>2.3.1    实现步骤</h3><h4 id="2-3-1-1-添加热部署支持的依赖坐标"><a href="#2-3-1-1-添加热部署支持的依赖坐标" class="headerlink" title="2.3.1.1    添加热部署支持的依赖坐标"></a>2.3.1.1    添加热部署支持的依赖坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-boot开发工具jar包，支持热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-2-开启自动编译"><a href="#2-3-1-2-开启自动编译" class="headerlink" title="2.3.1.2    开启自动编译"></a>2.3.1.2    开启自动编译</h4><p>默认情况IDEA不会自动编译</p><ul><li><p>如何开启自动编译：需要设置 <code>Build Project Automatically</code></p><p><img src="https://img-blog.csdnimg.cn/20200812140754243.png" alt="image-20200812105539548"></p></li><li><p>如何开启运行时自动编译：快捷键<code>Shift + Ctrl + Alt + /</code> 打开Maintenance维护，选择Registry(注册表)开启运行时自动编译</p><p><img src="https://img-blog.csdnimg.cn/20200812140923160.png" alt="image-20200812105637910"></p></li></ul><p>注意：配置完成之后，IDEA进行热部署，偶尔也会失败。</p><h1 id="3-SpringBoot原理分析"><a href="#3-SpringBoot原理分析" class="headerlink" title="3.    SpringBoot原理分析"></a>3.    SpringBoot原理分析</h1><h2 id="3-1-依赖管理的原理"><a href="#3-1-依赖管理的原理" class="headerlink" title="3.1    依赖管理的原理"></a>3.1    依赖管理的原理</h2><p>继承了SpringBoot的父pom文件，继承了很多东西，其中最重要的要数<code>&lt;dependency management&gt;</code>。</p><ul><li>继承 <code>spring-boot-starter-parent</code> 的<code>&lt;dependency management&gt;</code></li><li><code>spring-boot-denpendencies</code>通过Maven的<code>&lt;dependency management&gt;</code>标签特性实现jar版本管理</li><li>通过<code>spring-boot-denpendencies</code>的pom管理所有公共Starter依赖的版本</li><li>Starter是随用随去，避免一下子继承父类所有的starter依赖</li></ul><h2 id="3-2-starters的原理"><a href="#3-2-starters的原理" class="headerlink" title="3.2    starters的原理"></a>3.2    starters的原理</h2><p><strong>starters是依赖关系的整理和封装</strong>。是一套依赖坐标的整合，可以让导入应用开发的依赖坐标更方便。</p><p>有了这些Starters，你获得Spring和其整合的所有技术的一站式服务。无需配置(自动配置)、无需复制粘贴依赖坐标，一个坐标即可完成所有入门级别操作。举例：JPA or Web开发，只需要导入 <code>spring-boot-starter-data-jpa</code> 或 <code>spring-boot-starter-web</code> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个Starter包含了当前功能下的许多必备依赖坐标，这些依赖坐标是项目开发，上线和运行必须的。同时这些依赖也支持依赖传递。举例： <code>spring-boot-starter-web</code> 包含了所有web开发必须的依赖坐标</p><p><img src="https://img-blog.csdnimg.cn/20200812140955719.png" alt="image-20200812113843440"></p><p>starter的命名规范：官方的starter写法 <code>spring-boot-starter-*</code> ，非官方的starter写法<code>thirdpartyproject-spring-boot-starter</code></p><p><a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter" target="_blank" rel="noopener">常用的starters有哪些？</a></p><p>非常多，一下只列举部分：</p><p><img src="https://img-blog.csdnimg.cn/20200812141025956.png" alt="image-20200812114052518"></p><h2 id="3-3-自动配置-AutoConfiguration-原理"><a href="#3-3-自动配置-AutoConfiguration-原理" class="headerlink" title="3.3    自动配置(AutoConfiguration)原理"></a>3.3    自动配置(AutoConfiguration)原理</h2><ul><li>每个Starter基本都会有自动配置AutoConfiguration</li><li>AutoConfiguration的jar包定义了约定的默认配置信息。</li><li>SpringBoot采用约定大于配置设计思想。</li></ul><p><strong>自动配置的值在哪里？</strong></p><p><img src="https://img-blog.csdnimg.cn/20200812141109607.png" alt="image-20200812114314649"></p><p><strong>自动配置的值怎么才能生效？</strong></p><p>查看启动类注解@SpringBootApplication</p><p>追踪步骤：</p><ol><li>@EnableAutoConfiguration</li><li>@Import({AutoConfigurationImportSelector.class})</li><li>spring.factories</li><li>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</li><li>@EnableConfigurationProperties({ServerProperties.class})</li><li>private final ServerProperties.Tomcat tomcat = new ServerProperties.Tomcat();</li></ol><p><img src="https://img-blog.csdnimg.cn/20200812141133913.png" alt="image-20200812114757734"></p><p>有了自动配置，那么基本全部采用默认配置。当然也可以更改默认配置。</p><h1 id="4-SpringBoot的配置文件"><a href="#4-SpringBoot的配置文件" class="headerlink" title="4.    SpringBoot的配置文件"></a>4.    SpringBoot的配置文件</h1><p>我们知道SpringBoot是<strong>约定大于配置</strong>的，所以很多配置都有默认值。如果想修改默认配置，可以使用application.properties或application.yml(application.yaml)自定义配置。SpringBoot默认从Resource目录加载自定义配置文件。application.properties是键值对类型。application.yml是SpringBoot中一种新的配置文件方式。</p><p><strong>例如：</strong></p><p>application.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">demo</span></span><br></pre></td></tr></table></figure><p>application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">    <span class="comment"># Path路径</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/demo</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">server.servlet.context-path:</span> <span class="string">/demo</span></span><br></pre></td></tr></table></figure><h2 id="4-1-application-yml配置文件"><a href="#4-1-application-yml配置文件" class="headerlink" title="4.1    application.yml配置文件"></a>4.1    application.yml配置文件</h2><p>YML文件格式是YAML(YAML Aint Markup Language)编写的文件格式。可以直观被电脑识别的格式。容易阅读，容易与脚本语言交互。可以支持各种编程语言(C/C++、Ruby、Python、Java、Perl、C#、PHP)。以数据为核心，比XML更简洁。扩展名为.yml或.yaml</p><h3 id="4-1-1-配置普通数据语法"><a href="#4-1-1-配置普通数据语法" class="headerlink" title="4.1.1    配置普通数据语法"></a>4.1.1    配置普通数据语法</h3><p>key: value</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">haohao</span></span><br></pre></td></tr></table></figure><p>注意：Value之前有一个空格</p><h3 id="4-1-2-配置对象数据"><a href="#4-1-2-配置对象数据" class="headerlink" title="4.1.2    配置对象数据"></a>4.1.2    配置对象数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">haohao</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">31</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 行内配置</span></span><br><span class="line"><span class="attr">person:</span> <span class="string">&#123;name:</span> <span class="string">haohao,age:</span> <span class="number">31</span><span class="string">,addr:</span> <span class="string">beijing&#125;</span></span><br></pre></td></tr></table></figure><p>注意：yml语法中，相同缩进代表同一个级别</p><h3 id="4-1-3-配置集合、数组数据语法"><a href="#4-1-3-配置集合、数组数据语法" class="headerlink" title="4.1.3    配置集合、数组数据语法"></a>4.1.3    配置集合、数组数据语法</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="attr">citys:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tianjin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chongqing</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 或者行内注入</span></span><br><span class="line"><span class="attr">citys:</span> <span class="string">[beijing,tianjin,shanghai,chongqing]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合中的元素是对象形式</span></span><br><span class="line"><span class="attr">students:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">      <span class="attr">score:</span> <span class="number">100</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">28</span></span><br><span class="line">      <span class="attr">score:</span> <span class="number">88</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wangwu</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">38</span></span><br><span class="line">      <span class="attr">score:</span> <span class="number">90</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># 或者使用行内注入</span></span><br><span class="line"><span class="attr">student:</span> <span class="string">[&#123;name:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">,score:</span> <span class="number">100</span><span class="string">&#125;,&#123;name:</span> <span class="string">lisi,age:</span> <span class="number">28</span><span class="string">,score:</span> <span class="number">88</span><span class="string">&#125;,&#123;name:</span> <span class="string">wangwu,age:</span> <span class="number">38</span><span class="string">,score:</span> <span class="number">90</span><span class="string">&#125;]</span></span><br></pre></td></tr></table></figure><p>注意：value与-之间存在一个空格</p><h2 id="4-2-SpringBoot配置信息的查询"><a href="#4-2-SpringBoot配置信息的查询" class="headerlink" title="4.2    SpringBoot配置信息的查询"></a>4.2    SpringBoot配置信息的查询</h2><p>修改配置时，配置项目查询方式</p><p>第一种：自动配置jar包中的META-INF文件夹下，spring-configuration-metadata.json文件中</p><p><img src="https://img-blog.csdnimg.cn/20200812141202409.png" alt="image-20200812115920515"></p><p><img src="https://img-blog.csdnimg.cn/20200812141223122.png" alt="image-20200812115939216"></p><p>第二种：官方配置文件地址</p><p>官方查询地址：<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties</a></p><h2 id="4-3-配置文件属性注入Bean"><a href="#4-3-配置文件属性注入Bean" class="headerlink" title="4.3    配置文件属性注入Bean"></a>4.3    配置文件属性注入Bean</h2><h3 id="4-3-1-使用注解-Value映射"><a href="#4-3-1-使用注解-Value映射" class="headerlink" title="4.3.1    使用注解@Value映射"></a>4.3.1    使用注解@Value映射</h3><p>@value注解将配置文件的值映射到Spring管理的Bean属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;persion.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-使用注解-ConfigurationProperties映射"><a href="#4-3-2-使用注解-ConfigurationProperties映射" class="headerlink" title="4.3.2    使用注解@ConfigurationProperties映射"></a>4.3.2    使用注解@ConfigurationProperties映射</h3><p>通过注解@ConfigurationProperties(prefix=’’配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射。</p><p>使用@ConfigurationProperties方式必须提供Setter方法，使用@Value注解不需要Setter方法。</p><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">citys:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">guangzhou</span></span><br><span class="line">    <span class="attr">birthday:</span> <span class="number">2019</span><span class="string">/08/13</span></span><br><span class="line">    <span class="attr">animals:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dog</span></span><br><span class="line">          <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cat</span></span><br><span class="line">          <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String[] citys;</span><br><span class="line">    <span class="keyword">private</span> List&lt;animal&gt; animals;</span><br><span class="line">    </span><br><span class="line">    get/setter方法,toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-SpringBoot集成一切"><a href="#5-SpringBoot集成一切" class="headerlink" title="5.    SpringBoot集成一切"></a>5.    SpringBoot集成一切</h1><h2 id="5-1-集成-Spring-Data-JPA"><a href="#5-1-集成-Spring-Data-JPA" class="headerlink" title="5.1    集成 Spring Data JPA"></a>5.1    集成 Spring Data JPA</h2><p>Spring Data是一个用于<strong>简化数据访问</strong>，并支持云服务的开源框架。其主要目标是<strong>使得对数据的访问变得方便快捷</strong>。Spring Data JPA 是其中之一。</p><p><img src="https://img-blog.csdnimg.cn/20200812141253553.png" alt="image-20200812121504134"></p><p>Spring Data JPA 是Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用简的代码即可实现对数据库的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！</p><p>目标：使用SpringBoot整合SpringDataJPA，完成数据的增删改查基本功能。</p><h3 id="5-1-1-实现步骤"><a href="#5-1-1-实现步骤" class="headerlink" title="5.1.1    实现步骤"></a>5.1.1    实现步骤</h3><ol><li>创建SpringBoot工程</li><li>勾选依赖坐标</li><li>配置：数据库连接、jpa相关</li><li>创建User表、创建实体User配置实体</li><li>编写UserRepository</li><li>编写Controller、Service</li><li>访问测试</li></ol><h3 id="5-1-2-实现过程"><a href="#5-1-2-实现过程" class="headerlink" title="5.1.2    实现过程"></a>5.1.2    实现过程</h3><h4 id="5-1-2-1-创建SpringBoot工程"><a href="#5-1-2-1-创建SpringBoot工程" class="headerlink" title="5.1.2.1    创建SpringBoot工程"></a>5.1.2.1    创建SpringBoot工程</h4><p><img src="https://img-blog.csdnimg.cn/20200812141319955.png" alt="image-20200812121740659"></p><h4 id="5-1-2-2-勾选依赖坐标"><a href="#5-1-2-2-勾选依赖坐标" class="headerlink" title="5.1.2.2    勾选依赖坐标"></a>5.1.2.2    勾选依赖坐标</h4><p><img src="https://img-blog.csdnimg.cn/20200812141341100.png" alt="image-20200812121818334"></p><h4 id="5-1-2-3-配置：数据库连接、jpa相关"><a href="#5-1-2-3-配置：数据库连接、jpa相关" class="headerlink" title="5.1.2.3    配置：数据库连接、jpa相关"></a>5.1.2.3    配置：数据库连接、jpa相关</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="comment"># DB 配置(可以不写，有嵌入式数据库，如果不写必须显示导入嵌入式数据库starter，h2database)</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment">#jpa 相关配置(可以不写，有默认值)</span></span><br><span class="line"><span class="comment"># 数据库类型</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"># 是否显示sql</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># hibernate初始化数据库表策略</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="comment"># 是否生成数据库定义表语句</span></span><br><span class="line"><span class="meta">spring.jpa.generate-ddl</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="5-1-2-4-创建表，创建实体配置实体"><a href="#5-1-2-4-创建表，创建实体配置实体" class="headerlink" title="5.1.2.4    创建表，创建实体配置实体"></a>5.1.2.4    创建表，创建实体配置实体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for &#96;user&#96;</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">    &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;username&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;password&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;name&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;zhangsan&#39;, &#39;123&#39;, &#39;张三&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;lisi&#39;, &#39;123&#39;, &#39;李四&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span><span class="comment">//实体类注解</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)<span class="comment">//关联数据库表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注解设置当前id为注解</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">//注解值生成策略</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="comment">//getter setter</span></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-5-编写UserRepository"><a href="#5-1-2-5-编写UserRepository" class="headerlink" title="5.1.2.5    编写UserRepository"></a>5.1.2.5    编写UserRepository</h4><p>泛型需要实体类，和实体类的ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-6-编写Controller、Service"><a href="#5-1-2-6-编写Controller、Service" class="headerlink" title="5.1.2.6    编写Controller、Service"></a>5.1.2.6    编写Controller、Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        userDao.delete(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-集成MyBatis"><a href="#5-2-集成MyBatis" class="headerlink" title="5.2    集成MyBatis"></a>5.2    集成MyBatis</h2><p>使用SpringBoot整合MyBatis，完成查询所有功能</p><h3 id="5-2-1-实现步骤"><a href="#5-2-1-实现步骤" class="headerlink" title="5.2.1    实现步骤"></a>5.2.1    实现步骤</h3><ol><li>创建SpringBoot工程</li><li>勾选依赖坐标</li><li>数据库连接信息</li><li>创建User表、创建实体User</li><li>编写三层架构：Mapper、Service、controller，编写查询所有的方法</li><li>配置Mapper映射文件</li><li>在application.properties中添加MyBatis配置，扫描mapper.xml和mapper</li><li>访问测试地址<a href="http://localhost:8080/queryUsers" target="_blank" rel="noopener">http://localhost:8080/queryUsers</a></li></ol><h3 id="5-2-2-实现过程"><a href="#5-2-2-实现过程" class="headerlink" title="5.2.2    实现过程"></a>5.2.2    实现过程</h3><h4 id="5-2-2-1-创建SpringBoot工程"><a href="#5-2-2-1-创建SpringBoot工程" class="headerlink" title="5.2.2.1    创建SpringBoot工程"></a>5.2.2.1    创建SpringBoot工程</h4><p><img src="https://img-blog.csdnimg.cn/20200812141408437.png" alt="image-20200812123235526"></p><h4 id="5-2-2-2-勾选依赖坐标"><a href="#5-2-2-2-勾选依赖坐标" class="headerlink" title="5.2.2.2    勾选依赖坐标"></a>5.2.2.2    勾选依赖坐标</h4><p><img src="https://img-blog.csdnimg.cn/20200812141428569.png" alt="image-20200812123304187"></p><h4 id="5-2-2-3-数据库连接信息"><a href="#5-2-2-3-数据库连接信息" class="headerlink" title="5.2.2.3    数据库连接信息"></a>5.2.2.3    数据库连接信息</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="comment"># DB 配置</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure><p>数据库连接地址后加 <code>?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</code> ，不然会报错</p><h4 id="5-2-2-4-创建User表、实体User"><a href="#5-2-2-4-创建User表、实体User" class="headerlink" title="5.2.2.4    创建User表、实体User"></a>5.2.2.4    创建User表、实体User</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for &#96;user&#96;</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">    &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;username&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;password&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;name&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;zhangsan&#39;, &#39;123&#39;, &#39;张三&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;lisi&#39;, &#39;123&#39;, &#39;李四&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="comment">//getter setter...</span></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-5-编写Mapper"><a href="#5-2-2-5-编写Mapper" class="headerlink" title="5.2.2.5    编写Mapper"></a>5.2.2.5    编写Mapper</h4><p>使用@Mapper标记该类是一个Mapper接口，可以被SpringBoot自动扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span><span class="comment">//表明当前接口是一个Mapper，被Mybatis框架扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-6-配置Mapper映射文件"><a href="#5-2-2-6-配置Mapper映射文件" class="headerlink" title="5.2.2.6    配置Mapper映射文件"></a>5.2.2.6    配置Mapper映射文件</h4><p>在src/main/resources/mapper路径下加入UserMapper.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        INSERT into user (username, password, name)</span><br><span class="line">        VALUES (#&#123;username&#125;, #&#123;password&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        set username=#&#123;username&#125;,</span><br><span class="line">            password=#&#123;password&#125;,</span><br><span class="line">            name=#&#123;name&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-7-添加MyBatis信息"><a href="#5-2-2-7-添加MyBatis信息" class="headerlink" title="5.2.2.7    添加MyBatis信息"></a>5.2.2.7    添加MyBatis信息</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描实体</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.wgy.domain</span></span><br><span class="line"><span class="comment"># mapper.xml配置文件路径</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*Mapper.xml</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-8-编写Controller"><a href="#5-2-2-8-编写Controller" class="headerlink" title="5.2.2.8    编写Controller"></a>5.2.2.8    编写Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-集成Spring-Data-Redis"><a href="#5-3-集成Spring-Data-Redis" class="headerlink" title="5.3    集成Spring Data Redis"></a>5.3    集成Spring Data Redis</h2><p>SpringBoot整合了Redis之后，做用户数据查询缓存</p><h3 id="5-3-1-实现步骤"><a href="#5-3-1-实现步骤" class="headerlink" title="5.3.1    实现步骤"></a>5.3.1    实现步骤</h3><ol><li>添加Redis的Starter</li><li>在application.properties中配置redis端口、地址</li><li>注入RedisTemplate操作Redis缓存查询所有用户数据</li><li>测试缓存</li></ol><h3 id="5-3-2-实现过程"><a href="#5-3-2-实现过程" class="headerlink" title="5.3.2    实现过程"></a>5.3.2    实现过程</h3><h4 id="5-3-2-1-添加Redis起步依赖"><a href="#5-3-2-1-添加Redis起步依赖" class="headerlink" title="5.3.2.1    添加Redis起步依赖"></a>5.3.2.1    添加Redis起步依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring data redis 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-2-2-配置Redis连接信息"><a href="#5-3-2-2-配置Redis连接信息" class="headerlink" title="5.3.2.2    配置Redis连接信息"></a>5.3.2.2    配置Redis连接信息</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis 配置(不填也是可以的)</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.142.128</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><h4 id="5-3-2-3-注入RedisTemplate测试Redis操作"><a href="#5-3-2-3-注入RedisTemplate测试Redis操作" class="headerlink" title="5.3.2.3    注入RedisTemplate测试Redis操作"></a>5.3.2.3    注入RedisTemplate测试Redis操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        Object findAllusers = redisTemplate.boundValueOps(<span class="string">"findAllusers"</span>).get();</span><br><span class="line">        <span class="comment">//从缓存取值</span></span><br><span class="line">        <span class="comment">//如果没有，从数据库中查询,放到缓存然后返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(findAllusers)) &#123;</span><br><span class="line">            List&lt;User&gt; all = userService.findAll();</span><br><span class="line">            ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            findAllusers = objectMapper.writeValueAsString(all);<span class="comment">//把对象数据格式转化为json字符串</span></span><br><span class="line">            redisTemplate.boundValueOps(<span class="string">"findAllusers"</span>).set(findAllusers);<span class="comment">//数据存储到缓存中</span></span><br><span class="line">            <span class="keyword">return</span> findAllusers + <span class="string">"从数据库查询"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果有直接返回</span></span><br><span class="line">        <span class="keyword">return</span> findAllusers + <span class="string">"从redis缓存中查询"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-集成定时器"><a href="#5-4-集成定时器" class="headerlink" title="5.4    集成定时器"></a>5.4    集成定时器</h2><p>使用SpringBoot开发定时器，每隔5秒输出一个当前时间。</p><p>实现步骤：</p><h3 id="5-4-1-开启定时器注解"><a href="#5-4-1-开启定时器注解" class="headerlink" title="5.4.1    开启定时器注解"></a>5.4.1    开启定时器注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-配置定时器方法"><a href="#5-4-2-配置定时器方法" class="headerlink" title="5.4.2    配置定时器方法"></a>5.4.2    配置定时器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Timer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0/5 * * * * ?")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initialDelay = 项目启动后，多久执行,fixedRate = 固定的频率执行</span></span><br><span class="line"><span class="comment">     * initialDelay = 项目启动后, 多久执行，fixedDelay = 上一个任务执行完成，多久之后执行下一个任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(initialDelay = <span class="number">1000</span>, fixedRate = <span class="number">5000</span>)</span><br><span class="line"><span class="comment">//    @Scheduled(initialDelay = 1000,fixedDelay = 5000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前系统时间："</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-扩展了解"><a href="#5-5-扩展了解" class="headerlink" title="5.5    扩展了解"></a>5.5    扩展了解</h2><ol><li>集成 MongoDB</li><li>集成 ElasticSearch</li><li>集成 Memcached</li><li>集成邮件服务：普通邮件、模板邮件、验证码、带Html的邮件</li><li>集成RabbitMQ消息中间件</li><li>集成Freemarker或者Thymeleaf</li><li>…………….</li></ol><h1 id="6-SpringBoot如何代码测试"><a href="#6-SpringBoot如何代码测试" class="headerlink" title="6.    SpringBoot如何代码测试"></a>6.    SpringBoot如何代码测试</h1><p>SpringBoot集成JUnit测试功能，进行查询用户接口测试。</p><p>实现步骤：</p><h2 id="6-1-添加Junit起步依赖-默认就有"><a href="#6-1-添加Junit起步依赖-默认就有" class="headerlink" title="6.1    添加Junit起步依赖(默认就有)"></a>6.1    添加Junit起步依赖(默认就有)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring boot测试依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-编写测试类"><a href="#6-2-编写测试类" class="headerlink" title="6.2    编写测试类"></a>6.2    编写测试类</h2><p>SpringRunner继承SpringJUnit4ClassRunner，使用哪一个Spring提供的测试引擎都可以。指定运行测试的引擎</p><p>@SpringBootTest的属性值指的是引导类的字节码对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SpringbootMybatisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-Spring-Boot-如何打包部署"><a href="#7-Spring-Boot-如何打包部署" class="headerlink" title="7.    Spring Boot 如何打包部署"></a>7.    Spring Boot 如何打包部署</h1><p>启动方式有两种，一种是打成jar直接执行，另一种是打包成war包放到Tomcat服务下，启动Tomcat。</p><h2 id="7-1-打成Jar包部署"><a href="#7-1-打成Jar包部署" class="headerlink" title="7.1    打成Jar包部署"></a>7.1    打成Jar包部署</h2><p>执行maven打包命令或者使用IDEA的Maven工具打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 移动至项目根目录，与pom.xml同级</span></span><br><span class="line">mvn clean package</span><br><span class="line"><span class="comment">## 或者执行下面的命令 排除测试代码后进行打包</span></span><br><span class="line">mvn clean package  -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>需要注意项目pom.xml文件中的打包类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动命令：启动之前先检查自己的pom.xml文件中是否有springboot的maven插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/springboot_demo.jar</span><br></pre></td></tr></table></figure><p>启动命令的时候配置jvm参数也是可以的。然后查看一下Java的参数配置结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx80m -Xms20m --server.port=8090  -jar target/springboot_demo.jar</span><br></pre></td></tr></table></figure><h2 id="7-2-打成war包部署"><a href="#7-2-打成war包部署" class="headerlink" title="7.2    打成war包部署"></a>7.2    打成war包部署</h2><p>执行maven打包命令或者使用IDEA的Maven工具打包，需要修改pom.xml文件中的打包类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure><p>注册启动类：</p><p>创建 ServletInitializer.java，继承 SpringBootServletInitializer ，覆盖 configure()，把启动类Application 注册进去。外部 Web 应用服务器构建 Web Application Context 的时候，会把启动类添加进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web.xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(DemoApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行打包操作。同6.1 小节打包是一样的</p><ul><li>拷贝到Tomcat的webapp下，启动Tomcat访问即可</li><li>因为访问地址不再是根目录了，所有路径中需要加入项目名称：<a href="http://localhost:8080/springboot_demo/hello" target="_blank" rel="noopener">http://localhost:8080/springboot_demo/hello</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringBoot简介&quot;&gt;&lt;a href=&quot;#1-SpringBoot简介&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringBoot简介&quot;&gt;&lt;/a&gt;1.    SpringBoot简介&lt;/h1&gt;&lt;p&gt;Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化老的Spring 应用开发。该框架使用了自动方式来对开发工程进行配置，减少开发人员定义配置复杂度。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringBoot" scheme="https://wgy1993.gitee.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper(二)</title>
    <link href="https://wgy1993.gitee.io/archives/4ebc2ef7.html"/>
    <id>https://wgy1993.gitee.io/archives/4ebc2ef7.html</id>
    <published>2020-08-05T08:55:24.000Z</published>
    <updated>2020-08-05T08:59:52.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-zookeeper源码解析"><a href="#1-zookeeper源码解析" class="headerlink" title="1.    zookeeper源码解析"></a>1.    zookeeper源码解析</h1><h2 id="1-1-下载zookeeper源码，导入IDEA中"><a href="#1-1-下载zookeeper源码，导入IDEA中" class="headerlink" title="1.1    下载zookeeper源码，导入IDEA中"></a>1.1    下载zookeeper源码，导入IDEA中</h2><p>下载地址：<a href="https://github.com/apache/zookeeper" target="_blank" rel="noopener">https://github.com/apache/zookeeper</a></p><a id="more"></a><h2 id="1-2-启动"><a href="#1-2-启动" class="headerlink" title="1.2    启动"></a>1.2    启动</h2><p>根据bin目录下的启动脚本zkServer.sh中加载启动类：<code>QuorumPeerMain</code>类</p><p><img src="https://p.pstatp.com/origin/1383e0000188928d52ee3" alt="image-20200803143136525"></p><p><code>QuorumPeerMain</code> 中<code>main</code>方法执行<code>initializeAndRun</code>方法</p><p><img src="https://p.pstatp.com/origin/1373c00013304b76e41b4" alt="image-20200803143219426"></p><p>跟进 <code>initializeAndRun</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initializeAndRun</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ConfigException, IOException, AdminServerException </span>&#123;</span><br><span class="line">    <span class="comment">//1.加载配置文件</span></span><br><span class="line">    QuorumPeerConfig config = <span class="keyword">new</span> QuorumPeerConfig();</span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">        config.parse(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start and schedule the the purge task</span></span><br><span class="line">    <span class="comment">//2.启动清除任务 主要清除旧的快照和日志文件</span></span><br><span class="line">    DatadirCleanupManager purgeMgr = <span class="keyword">new</span> DatadirCleanupManager(config.getDataDir(), config.getDataLogDir(), config.getSnapRetainCount(), config.getPurgeInterval());</span><br><span class="line">    purgeMgr.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 启动zk zookeeper启动方式分为两种：单机启动和集群启动</span></span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">1</span> &amp;&amp; config.isDistributed()) &#123;</span><br><span class="line">        <span class="comment">//启动集群</span></span><br><span class="line">        runFromConfig(config);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Either no config or no quorum defined in config, running "</span></span><br><span class="line">                 + <span class="string">" in standalone mode"</span>);</span><br><span class="line">        <span class="comment">// there is only server in the quorum -- run as standalone</span></span><br><span class="line">        <span class="comment">//启动单机</span></span><br><span class="line">        ZooKeeperServerMain.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>initializeAndRun</code>方法中主要做了三件事</p><ul><li><p>加载解析配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">File configFile = (<span class="keyword">new</span> VerifyingFileFactory.Builder(LOG).warnForRelativePath().failForNonExistingPath().build()).create(path);</span><br><span class="line"></span><br><span class="line">Properties cfg = <span class="keyword">new</span> Properties();</span><br><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(configFile);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    cfg.load(in);</span><br><span class="line">    configFileStr = path;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read entire config file as initial configuration */</span></span><br><span class="line">initialConfig = <span class="keyword">new</span> String(Files.readAllBytes(configFile.toPath()));</span><br><span class="line"></span><br><span class="line">parseProperties(cfg);</span><br></pre></td></tr></table></figure><p>将配置文件加载到 <code>Properties cfg</code>对象中，解析cfg对象。zookeeper所有配置信息封装到一个<code>QuorumPeerConfig</code>对象中</p></li><li><p>启动定时清除任务</p><p><code>PurgeTask</code>继承<code>TimeTask</code>，定时执行<code>run</code>方法中的<code>purge</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PurgeTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File logsDir;</span><br><span class="line">    <span class="keyword">private</span> File snapsDir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> snapRetainCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PurgeTask</span><span class="params">(File dataDir, File snapDir, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        logsDir = dataDir;</span><br><span class="line">        snapsDir = snapDir;</span><br><span class="line">        snapRetainCount = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Purge task started."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PurgeTxnLog.purge(logsDir, snapsDir, snapRetainCount);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Error occurred while purging."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">"Purge task completed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>purge</code> 方法主要清除旧的快照和日志文件</p></li><li><p>启动 zk</p><p>zookeeper启动方式分为两种：单机启动和集群启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.length == <span class="number">1</span> &amp;&amp; config.isDistributed()) &#123;</span><br><span class="line">    <span class="comment">//启动集群</span></span><br><span class="line">    runFromConfig(config);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    LOG.warn(<span class="string">"Either no config or no quorum defined in config, running "</span></span><br><span class="line">             + <span class="string">" in standalone mode"</span>);</span><br><span class="line">    <span class="comment">// there is only server in the quorum -- run as standalone</span></span><br><span class="line">    <span class="comment">//启动单机</span></span><br><span class="line">    ZooKeeperServerMain.main(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们看看单机启动的源码 <code>main</code>方法调用<code>initializeAndRun</code>方法，<code>initializeAndRun</code>首先加载配置文件，然后执行<code>runFromConfig(config)</code>方法，我们看看<code>runFromConfig</code>具体执行了什么操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runFromConfig</span><span class="params">(ServerConfig config)</span> <span class="keyword">throws</span> IOException, AdminServerException </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"Starting server"</span>);</span><br><span class="line">    FileTxnSnapLog txnLog = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.首先开启一下metrics监控</span></span><br><span class="line">            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(config.getMetricsProviderClassName(), config.getMetricsProviderConfiguration());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MetricsProviderLifeCycleException error) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Cannot boot MetricsProvider "</span> + config.getMetricsProviderClassName(), error);</span><br><span class="line">        &#125;</span><br><span class="line">        ServerMetrics.metricsProviderInitialized(metricsProvider);</span><br><span class="line">        <span class="comment">// Note that this thread isn't going to be doing anything else,</span></span><br><span class="line">        <span class="comment">// so rather than spawning another thread, we will just call</span></span><br><span class="line">        <span class="comment">// run() in this thread.</span></span><br><span class="line">        <span class="comment">// create a file logger url from the command line args</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建了FileTxnLog实例和FIleSnap实例，并保存刚启动时候日志数据</span></span><br><span class="line">        txnLog = <span class="keyword">new</span> FileTxnSnapLog(config.dataLogDir, config.dataDir);</span><br><span class="line">        JvmPauseMonitor jvmPauseMonitor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (config.jvmPauseMonitorToRun) &#123;</span><br><span class="line">            jvmPauseMonitor = <span class="keyword">new</span> JvmPauseMonitor(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> ZooKeeperServer zkServer = <span class="keyword">new</span> ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, <span class="keyword">null</span>, config.initialConfig);</span><br><span class="line">        txnLog.setServerStats(zkServer.serverStats());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Registers shutdown handler which will be used to know the</span></span><br><span class="line">        <span class="comment">// server error or shutdown state changes.</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch shutdownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        zkServer.registerServerShutdownHandler(<span class="keyword">new</span> ZooKeeperServerShutdownHandler(shutdownLatch));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start Admin server</span></span><br><span class="line">        <span class="comment">//3. 启动adminServer</span></span><br><span class="line">        adminServer = AdminServerFactory.createAdminServer();</span><br><span class="line">        adminServer.setZooKeeperServer(zkServer);</span><br><span class="line">        adminServer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 启动NIOServerCnxnFactory</span></span><br><span class="line">        <span class="keyword">boolean</span> needStartZKServer = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//4.1从解析出的配置中配置NIOServerCnxnFactory</span></span><br><span class="line">        <span class="keyword">if</span> (config.getClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//4.2启动ZookeeperServer，</span></span><br><span class="line">            cnxnFactory.startup(zkServer);</span><br><span class="line">            <span class="comment">// zkServer has been started. So we don't need to start it again in secureCnxnFactory.</span></span><br><span class="line">            needStartZKServer = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.getSecureClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            secureCnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">true</span>);</span><br><span class="line">            secureCnxnFactory.startup(zkServer, needStartZKServer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        containerManager = <span class="keyword">new</span> ContainerManager(zkServer.getZKDatabase(), zkServer.firstProcessor,</span><br><span class="line">                                                Integer.getInteger(<span class="string">"znode.container.checkIntervalMs"</span>, (<span class="keyword">int</span>) TimeUnit.MINUTES.toMillis(<span class="number">1</span>)),</span><br><span class="line">                                                Integer.getInteger(<span class="string">"znode.container.maxPerMinute"</span>, <span class="number">10000</span>)</span><br><span class="line">                                               );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        containerManager.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Watch status of ZooKeeper server. It will do a graceful shutdown</span></span><br><span class="line">        <span class="comment">// if the server is not running or hits an internal error.</span></span><br><span class="line">        shutdownLatch.await();</span><br><span class="line"></span><br><span class="line">        shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cnxnFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cnxnFactory.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (secureCnxnFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            secureCnxnFactory.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zkServer.canShutdown()) &#123;</span><br><span class="line">            zkServer.shutdown(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// warn, but generally this is ok</span></span><br><span class="line">        LOG.warn(<span class="string">"Server interrupted"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (txnLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">            txnLog.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (metricsProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                metricsProvider.stop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Error while stopping metrics"</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动过程首先开启一下 <code>metrics</code>监控,然后启动<code>admin server</code>,然后启动<code>zk server</code>，我们来看看启动过程</p><p><code>ServerCnxnFactory</code>中<code>startup</code>方法调用<code>NettyServerCnxnFactory</code>实现类启动方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">(ZooKeeperServer zks, <span class="keyword">boolean</span> startServer)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    start();</span><br><span class="line">    setZooKeeperServer(zks);</span><br><span class="line">    <span class="keyword">if</span> (startServer) &#123;</span><br><span class="line">        zks.startdata();</span><br><span class="line">        zks.startup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动方法执行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">        createSessionTracker();</span><br><span class="line">    &#125;</span><br><span class="line">    startSessionTracker();</span><br><span class="line">    setupRequestProcessors();</span><br><span class="line"></span><br><span class="line">    startRequestThrottler();</span><br><span class="line"></span><br><span class="line">    registerJMX();</span><br><span class="line"></span><br><span class="line">    startJvmPauseMonitor();</span><br><span class="line"></span><br><span class="line">    registerMetrics();</span><br><span class="line"></span><br><span class="line">    setState(State.RUNNING);</span><br><span class="line">    requestPathMetricsCollector.start();</span><br><span class="line">    notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们看看集群启动过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runFromConfig</span><span class="params">(QuorumPeerConfig config)</span> <span class="keyword">throws</span> IOException, AdminServerException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ManagedUtil.registerLog4jMBeans();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JMException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Unable to register log4j JMX control"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOG.info(<span class="string">"Starting quorum peer"</span>);</span><br><span class="line">    MetricsProvider metricsProvider;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        metricsProvider = MetricsProviderBootstrap.startMetricsProvider(config.getMetricsProviderClassName(), config.getMetricsProviderConfiguration());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MetricsProviderLifeCycleException error) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Cannot boot MetricsProvider "</span> + config.getMetricsProviderClassName(), error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ServerMetrics.metricsProviderInitialized(metricsProvider);</span><br><span class="line">        ServerCnxnFactory cnxnFactory = <span class="keyword">null</span>;</span><br><span class="line">        ServerCnxnFactory secureCnxnFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.getClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.getSecureClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            secureCnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quorumPeer = getQuorumPeer();</span><br><span class="line">        quorumPeer.setTxnFactory(<span class="keyword">new</span> FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));</span><br><span class="line">        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());</span><br><span class="line">        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());</span><br><span class="line">        <span class="comment">//quorumPeer.setQuorumPeers(config.getAllMembers());</span></span><br><span class="line">        quorumPeer.setElectionType(config.getElectionAlg());</span><br><span class="line">        quorumPeer.setMyid(config.getServerId());</span><br><span class="line">        quorumPeer.setTickTime(config.getTickTime());</span><br><span class="line">        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());</span><br><span class="line">        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());</span><br><span class="line">        quorumPeer.setInitLimit(config.getInitLimit());</span><br><span class="line">        quorumPeer.setSyncLimit(config.getSyncLimit());</span><br><span class="line">        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());</span><br><span class="line">        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());</span><br><span class="line">        quorumPeer.setConfigFileName(config.getConfigFilename());</span><br><span class="line">        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());</span><br><span class="line">        quorumPeer.setZKDatabase(<span class="keyword">new</span> ZKDatabase(quorumPeer.getTxnFactory()));</span><br><span class="line">        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (config.getLastSeenQuorumVerifier() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        quorumPeer.initConfigInZKDatabase();</span><br><span class="line">        quorumPeer.setCnxnFactory(cnxnFactory);</span><br><span class="line">        quorumPeer.setSecureCnxnFactory(secureCnxnFactory);</span><br><span class="line">        quorumPeer.setSslQuorum(config.isSslQuorum());</span><br><span class="line">        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());</span><br><span class="line">        quorumPeer.setLearnerType(config.getPeerType());</span><br><span class="line">        quorumPeer.setSyncEnabled(config.getSyncEnabled());</span><br><span class="line">        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());</span><br><span class="line">        <span class="keyword">if</span> (config.sslQuorumReloadCertFiles) &#123;</span><br><span class="line">            quorumPeer.getX509Util().enableCertFileReloading();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sets quorum sasl authentication configurations</span></span><br><span class="line">        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);</span><br><span class="line">        <span class="keyword">if</span> (quorumPeer.isQuorumSaslAuthEnabled()) &#123;</span><br><span class="line">            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);</span><br><span class="line">            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);</span><br><span class="line">            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);</span><br><span class="line">            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);</span><br><span class="line">            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);</span><br><span class="line">        &#125;</span><br><span class="line">        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);</span><br><span class="line">        quorumPeer.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.jvmPauseMonitorToRun) &#123;</span><br><span class="line">            quorumPeer.setJvmPauseMonitor(<span class="keyword">new</span> JvmPauseMonitor(config));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quorumPeer.start();</span><br><span class="line">        quorumPeer.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// warn, but generally this is ok</span></span><br><span class="line">        LOG.warn(<span class="string">"Quorum Peer interrupted"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (metricsProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                metricsProvider.stop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Error while stopping metrics"</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>runFromConfig</code>执行过程中主要是<code>QuorumPeer</code>对象属性的赋值并执行<code>start</code>方法，通过查看<code>QuorumPeer</code>类的源码，发现<code>QuorumPeer</code>继承了<code>ZooKeeperThread</code>，而<code>ZooKeeperThread</code>继承了<code>Thread</code>,通过<code>start</code>方法启动了<code>QuorumPeer</code>线程，线程运行执行线程的<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Main loop 主循环：集群启动的核心代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (getPeerState()) &#123;</span><br><span class="line">        <span class="keyword">case</span> LOOKING:</span><br><span class="line">            LOG.info(<span class="string">"LOOKING"</span>);</span><br><span class="line">            ServerMetrics.getMetrics().LOOKING_COUNT.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"readonlymode.enabled"</span>)) &#123;</span><br><span class="line">                LOG.info(<span class="string">"Attempting to start ReadOnlyZooKeeperServer"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Create read-only server but don't start it immediately</span></span><br><span class="line">                <span class="keyword">final</span> ReadOnlyZooKeeperServer roZk = <span class="keyword">new</span> ReadOnlyZooKeeperServer(logFactory, <span class="keyword">this</span>, <span class="keyword">this</span>.zkDb);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Instead of starting roZk immediately, wait some grace</span></span><br><span class="line">                <span class="comment">// period before we decide we're partitioned.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// Thread is used here because otherwise it would require</span></span><br><span class="line">                <span class="comment">// changes in each of election strategy classes which is</span></span><br><span class="line">                <span class="comment">// unnecessary code coupling.</span></span><br><span class="line">                Thread roZkMgr = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// lower-bound grace period to 2 secs</span></span><br><span class="line">                            sleep(Math.max(<span class="number">2000</span>, tickTime));</span><br><span class="line">                            <span class="keyword">if</span> (ServerState.LOOKING.equals(getPeerState())) &#123;</span><br><span class="line">                                roZk.startup();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            LOG.info(<span class="string">"Interrupted while attempting to start ReadOnlyZooKeeperServer, not started"</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            LOG.error(<span class="string">"FAILED to start ReadOnlyZooKeeperServer"</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    roZkMgr.start();</span><br><span class="line">                    reconfigFlagClear();</span><br><span class="line">                    <span class="keyword">if</span> (shuttingDownLE) &#123;</span><br><span class="line">                        shuttingDownLE = <span class="keyword">false</span>;</span><br><span class="line">                        startLeaderElection();</span><br><span class="line">                    &#125;</span><br><span class="line">                    setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">                    setPeerState(ServerState.LOOKING);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// If the thread is in the the grace period, interrupt</span></span><br><span class="line">                    <span class="comment">// to come out of waiting.</span></span><br><span class="line">                    roZkMgr.interrupt();</span><br><span class="line">                    roZk.shutdown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reconfigFlagClear();</span><br><span class="line">                    <span class="keyword">if</span> (shuttingDownLE) &#123;</span><br><span class="line">                        shuttingDownLE = <span class="keyword">false</span>;</span><br><span class="line">                        startLeaderElection();</span><br><span class="line">                    &#125;</span><br><span class="line">                    setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">                    setPeerState(ServerState.LOOKING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OBSERVING:</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                LOG.info(<span class="string">"OBSERVING"</span>);</span><br><span class="line">                setObserver(makeObserver(logFactory));</span><br><span class="line">                observer.observeLeader();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                observer.shutdown();</span><br><span class="line">                setObserver(<span class="keyword">null</span>);</span><br><span class="line">                updateServerState();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Add delay jitter before we switch to LOOKING</span></span><br><span class="line">                <span class="comment">// state to reduce the load of ObserverMaster</span></span><br><span class="line">                <span class="keyword">if</span> (isRunning()) &#123;</span><br><span class="line">                    Observer.waitForObserverElectionDelay();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FOLLOWING:</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                LOG.info(<span class="string">"FOLLOWING"</span>);</span><br><span class="line">                setFollower(makeFollower(logFactory));</span><br><span class="line">                follower.followLeader();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                follower.shutdown();</span><br><span class="line">                setFollower(<span class="keyword">null</span>);</span><br><span class="line">                updateServerState();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEADING:</span><br><span class="line">            LOG.info(<span class="string">"LEADING"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                setLeader(makeLeader(logFactory));</span><br><span class="line">                leader.lead();</span><br><span class="line">                setLeader(<span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (leader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    leader.shutdown(<span class="string">"Forcing shutdown"</span>);</span><br><span class="line">                    setLeader(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                updateServerState();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 while循环中，判断节点的状态，分为 <code>LOOKING</code> 、 <code>OBSERVING</code> 、 <code>FOLLOWING</code> 、<code>LEADING</code> ，当某个<code>QuorumPeerq</code>刚启动时，状态为 <code>LOOKING</code> ，启动线程将zk节点启动，然后进行leader选举，这是<code>zookeeper</code>的选举算法的核心，leader的选举在<code>org.apache.zookeeper.server.quorum.FastLeaderElection</code>的<code>lookForLeader</code>方法中</p></li></ul><h2 id="1-3-leader选举"><a href="#1-3-leader选举" class="headerlink" title="1.3    leader选举"></a>1.3    leader选举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录当前server接受其他server的本轮投票信息</span></span><br><span class="line">Map&lt;Long, Vote&gt; recvset = <span class="keyword">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选举结束后法定server的投票信息</span></span><br><span class="line">Map&lt;Long, Vote&gt; outofelection = <span class="keyword">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选举超时时间</span></span><br><span class="line"><span class="keyword">int</span> notTimeout = minNotificationInterval;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑时钟 +1</span></span><br><span class="line">    logicalclock.incrementAndGet();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化选票 给自己投票</span></span><br><span class="line">    updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LOG.info(<span class="string">"New election. My id =  "</span> + self.getId() + <span class="string">", proposed zxid=0x"</span> + Long.toHexString(proposedZxid));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendNotifications();</span><br></pre></td></tr></table></figure><p>此处两个变量，一个 <code>recvset</code>，用来保存当前server的接受其他server的本轮投票信息，<code>key</code>为当前<code>server</code>的<code>id</code>，也即是我们在配置文件中配置的<code>myid</code>，而另外一个变量<code>outofelection</code>保存选举结束以后法定的<code>server</code>的投票信息，这里的法定指的是<code>FOLLOWING</code>和<code>LEADING</code>状态的<code>server</code>，不包活<code>OBSERVING</code>状态的<code>server</code>。</p><p>更新逻辑时钟，此处逻辑时钟是为了在选举<code>leader</code>时比较其他选票中的<code>server</code>中的<code>epoch</code>和本地谁最新，然后将自己的选票<code>proposal</code>发送给其他所有<code>server</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotifications</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> sid : self.getCurrentAndNextConfigVoters()) &#123;</span><br><span class="line">        QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class="line">        ToSend notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification,</span><br><span class="line">                                   proposedLeader,</span><br><span class="line">                                   proposedZxid,</span><br><span class="line">                                   logicalclock.get(),</span><br><span class="line">                                   QuorumPeer.ServerState.LOOKING,</span><br><span class="line">                                   sid,</span><br><span class="line">                                   proposedEpoch, qv.toString().getBytes());</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Sending Notification: "</span> + proposedLeader + <span class="string">" (n.leader), 0x"</span> +</span><br><span class="line">                      Long.toHexString(proposedZxid) + <span class="string">" (n.zxid), 0x"</span> + Long.toHexString(logicalclock.get()) +</span><br><span class="line">                      <span class="string">" (n.round), "</span> + sid + <span class="string">" (recipient), "</span> + self.getId() +</span><br><span class="line">                      <span class="string">" (myid), 0x"</span> + Long.toHexString(proposedEpoch) + <span class="string">" (n.peerEpoch)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sendqueue.offer(notmsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法遍历所有投票参与者集合，将选票信息构造成一个 <code>ToSend</code>对象，分别发送消息放置到队列<code>sendqueue</code>中。同理集群中每一个<code>server</code>节点都会将自己的选票发送给其他<code>server</code>，那么既然有发送选票，肯定存在接受选票信息，并选出<code>leader</code>，接下来我们就来看看每一个<code>server</code>如何接受选票并处理的。</p><p>首先我们应该从队列出取出选票信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从队列中取出选票信息</span></span><br><span class="line">Notification n = recvqueue.poll(notTimeout, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Sends more notifications if haven't received enough.</span></span><br><span class="line"><span class="comment"> * Otherwise processes new notification.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//判断选票信息是否为空 如果为空</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否投递过选票信息</span></span><br><span class="line">    <span class="keyword">if</span> (manager.haveDelivered()) &#123;</span><br><span class="line">        <span class="comment">// 重新发送选票信息</span></span><br><span class="line">        sendNotifications();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//重连所有server</span></span><br><span class="line">        manager.connectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Exponential backoff</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> tmpTimeOut = notTimeout * <span class="number">2</span>;</span><br><span class="line">    notTimeout = (tmpTimeOut &lt; maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);</span><br><span class="line">    LOG.info(<span class="string">"Notification time out: "</span> + notTimeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选出的选票信息封装在一个 <code>Notification</code> 对象中，如果取出的选票为null，我们通过<code>QuorumCnxManager</code>检查发送队列中是否投递过选票，如果投递过说明连接并没有断开，则重新发送选票到其他<code>sever</code>，否则，说明连接断开，重连所有<code>server</code>即可。那么连接没有断开，为什么会收不到选票信息呢，有可能是选票超时时限导致没有收到选票，所有将选票时限延长了一倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//校验选票中选举server和选举的leader sever是否合法       </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(validVoter(n.sid) &amp;&amp; validVoter(n.leader)) &#123;          </span><br><span class="line">    <span class="comment">/*      </span></span><br><span class="line"><span class="comment">    * Only proceed if the vote comes from a replica in the current or next </span></span><br><span class="line"><span class="comment">    * voting view for a replica in the current or next voting view.           </span></span><br><span class="line"><span class="comment">    */</span>          </span><br><span class="line">    <span class="keyword">switch</span> (n.state) &#123;       </span><br><span class="line">        <span class="keyword">case</span> LOOKING:          </span><br><span class="line">            ......            </span><br><span class="line">            <span class="keyword">break</span>;   </span><br><span class="line">        <span class="keyword">case</span> OBSERVING:            </span><br><span class="line">            LOG.debug(<span class="string">"Notification from observer: "</span> + n.sid);            </span><br><span class="line">            <span class="keyword">break</span>;          </span><br><span class="line">        <span class="keyword">case</span> FOLLOWING:          </span><br><span class="line">        <span class="keyword">case</span> LEADING:          </span><br><span class="line">            ......     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果选出的选票 <code>Notification</code>不为<code>null</code>，校验投票<code>server</code>和选举<code>leader</code>是否合法，然后根据选票状态执行<br>不同分支，选举过程走<code>LOOKING</code>分支，接下来比较选票<code>epoch</code>和当前逻辑时钟，如果选票 <code>epoch</code>&gt;逻辑时钟，说明选票是最新的，自己的选票这一轮已经过时，应该更新当前自己<code>server</code>的逻辑时钟，并清空当前收到的其他<code>server</code>的选票，然后比较自己和选票中谁更适合做<code>leader</code>，发送新的投票给其他所有<code>server</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getInitLastLoggedZxid() == -<span class="number">1</span>) &#123;</span><br><span class="line">    LOG.debug(<span class="string">"Ignoring notification as our zxid is -1"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n.zxid == -<span class="number">1</span>) &#123;</span><br><span class="line">    LOG.debug(<span class="string">"Ignoring notification from member with -1 zxid &#123;&#125;"</span>, n.sid);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If notification &gt; current, replace and send messages out</span></span><br><span class="line"><span class="keyword">if</span> (n.electionEpoch &gt; logicalclock.get()) &#123;</span><br><span class="line">    logicalclock.set(n.electionEpoch);</span><br><span class="line">    recvset.clear();</span><br><span class="line">    <span class="comment">//比较选票和自己谁更适合做leader，比较规则epoch&gt;zxid&gt;sid</span></span><br><span class="line">    <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class="line">        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">    &#125;</span><br><span class="line">    sendNotifications();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果选票 <code>epoch</code>&lt;逻辑时钟,zk放弃此次选票，不做任何处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n.electionEpoch &lt; logicalclock.get()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">        LOG.debug(<span class="string">"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x"</span></span><br><span class="line">                  + Long.toHexString(n.electionEpoch)</span><br><span class="line">                  + <span class="string">", logicalclock=0x"</span> + Long.toHexString(logicalclock.get()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果选票 <code>epoch</code>=逻辑时钟,仍然是比较选票和当前自己server谁更适合当<code>leader</code>，并重新更新选票，发送给其他所有的<code>server</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">    updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">    sendNotifications();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来将收到的选票放入 <code>recvset</code>的<code>map</code>中保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recvset.put(n.sid, <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br></pre></td></tr></table></figure><p>接下来是判断本轮选举是否结束，如果超过半数的，则 <code>leader</code>预选举结束，注意此时还要比较其他少半选票中有没有谁更适合做<code>leader</code>？如果在选票找不到任何一个<code>server</code>比当前<code>server</code>更适合做<code>leader</code>，则更新更新<code>server</code>状态，清空<code>recvqueue</code>队列，确定最终选票并返回，否则将更适合做<code>leader</code>的<code>Notification</code>放回队列开始新一轮的选举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">voteSet = getVoteTracker(recvset, <span class="keyword">new</span> Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (voteSet.hasAllQuorums()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verify if there is any change in the proposed leader</span></span><br><span class="line">    <span class="comment">//比较剩下少数的server是否更适合做leader   </span></span><br><span class="line">    <span class="keyword">while</span> ((n = recvqueue.poll(finalizeWait, TimeUnit.MILLISECONDS)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">            recvqueue.put(n);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This predicate is true once we don't read any new</span></span><br><span class="line"><span class="comment">     * relevant message from the reception queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//如果全部比较都没有当前谁比当前server更适合做leader，则更新server状态</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//更新状态</span></span><br><span class="line">        setPeerState(proposedLeader, voteSet);</span><br><span class="line">        <span class="comment">//构建最终选票，便于其他server同步  </span></span><br><span class="line">        Vote endVote = <span class="keyword">new</span> Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);</span><br><span class="line">        leaveInstance(endVote);</span><br><span class="line">        <span class="comment">//清空队列</span></span><br><span class="line">        <span class="keyword">return</span> endVote;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新状态后，若选票中的服务器状态为 <code>FOLLOWING</code>或者<code>LEADING</code>时，其大致步骤会再次判断选举<code>epoch</code>是否等于逻辑时钟.如果相等，再次盘检查选中的leader过半</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n.electionEpoch == logicalclock.get()) &#123;</span><br><span class="line">    recvset.put(n.sid, <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class="line">    voteSet = getVoteTracker(recvset, <span class="keyword">new</span> Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class="line">    <span class="keyword">if</span> (voteSet.hasAllQuorums() &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class="line">        setPeerState(n.leader, voteSet);</span><br><span class="line">        Vote endVote = <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class="line">        leaveInstance(endVote);</span><br><span class="line">        <span class="keyword">return</span> endVote;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Before joining an established ensemble, verify that</span></span><br><span class="line"><span class="comment"> * a majority are following the same leader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">outofelection.put(n.sid, <span class="keyword">new</span> Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class="line">voteSet = getVoteTracker(outofelection, <span class="keyword">new</span> Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (voteSet.hasAllQuorums() &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        logicalclock.set(n.electionEpoch);</span><br><span class="line">        setPeerState(n.leader, voteSet);</span><br><span class="line">    &#125;</span><br><span class="line">    Vote endVote = <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class="line">    leaveInstance(endVote);</span><br><span class="line">    <span class="keyword">return</span> endVote;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-zookeeper应用场景"><a href="#2-zookeeper应用场景" class="headerlink" title="2.    zookeeper应用场景"></a>2.    zookeeper应用场景</h1><h2 id="2-1-配置中心"><a href="#2-1-配置中心" class="headerlink" title="2.1    配置中心"></a>2.1    配置中心</h2><p>在平常的业务开发过程中，我们通常需要将系统的一些通用的全局配置，例如机器列表配置，运行时开关配置，数据库配置信息等统一集中存储，让集群所有机器共享配置信息，系统在启动会首先从配置中心读取配置信息，进行初始化。传统的实现方式将配置存储在本地文件和内存中，一旦机器规模更大，配置变更频繁情况下，本地文件和内存方式的配置维护成本较高，使用zookeeper作为分布式的配置中心就可以解决这个问题。</p><p>我们将配置信息存在zk中的一个节点中，同时给该节点注册一个数据节点变更的watcher监听，一旦节点数据发生变更，所有的订阅该节点的客户端都可以获取数据变更通知。</p><h2 id="2-2-负载均衡"><a href="#2-2-负载均衡" class="headerlink" title="2.2    负载均衡"></a>2.2    负载均衡</h2><p>建立server节点，并建立监听器监视servers子节点的状态（用于在服务器增添时及时同步当前集群中服务器列表）。在每个服务器启动时，在servers节点下建立具体服务器地址的子节点,并在对应的字节点下存入服务器的相关信息。这样，我们在zookeeper服务器上可以获取当前集群中的服务器列表及相关信息，可以自定义一个负载均衡算法，在每个请求过来时从zookeeper服务器中获取当前集群服务器列表，根据算法选出其中一个服务器来处理请求。</p><p><img src="https://p.pstatp.com/origin/137cd00006d7a815eb690" alt="image-20200805144500427"></p><h2 id="2-3-命名服务"><a href="#2-3-命名服务" class="headerlink" title="2.3    命名服务"></a>2.3    命名服务</h2><p>命名服务是分布式系统中的基本功能之一。被命名的实体通常可以是集群中的机器、提供的服务地址或者远程对象，这些都可以称作为名字。常见的就是一些分布式服务框架（RPC、RMI）中的服务地址列表，通过使用名称服务客户端可以获取资源的实体、服务地址和提供者信息。命名服务就是通过一个资源引用的方式来实现对资源的定位和使用。在分布式环境中，上层应用仅仅需要一个全局唯一名称，就像数据库中的主键。</p><p>在单库单表系统中可以通过自增ID来标识每一条记录，但是随着规模变大分库分表很常见，那么自增ID有仅能针对单一表生成ID，所以在这种情况下无法依靠这个来标识唯一ID。UUID就是一种全局唯一标识符。但是长度过长不易识别。</p><p><img src="https://p.pstatp.com/origin/ff550002d3a73938034c" alt="image-20200805144706036"></p><ul><li>在 Zookeeper中通过创建顺序节点就可以实现，所有客户端都会根据自己的任务类型来创建一个顺序节点，例如 job-00000001</li><li>节点创建完毕后， create()接口会返回一个完整的节点名，例如：job-00000002<ul><li>拼接 type类型和完整节点名作为全局唯一的ID</li></ul></li></ul><h2 id="2-4-DNS服务"><a href="#2-4-DNS服务" class="headerlink" title="2.4    DNS服务"></a>2.4    DNS服务</h2><h3 id="2-4-1-域名配置"><a href="#2-4-1-域名配置" class="headerlink" title="2.4.1    域名配置"></a>2.4.1    域名配置</h3><p>在分布式系统应用中，每一个应用都需要分配一个域名，日常开发中，往往使用本地HOST绑定域名解析，开发阶段可以随时修改域名和IP的映射，大大提高开发的调试效率。如果应用的机器规模达到一定程度后，需要频繁更新域名时，需要在规模的集群中变更，无法保证实时性。所有我们在zk上创建一个节点来进行域名配置</p><p><img src="https://p.pstatp.com/origin/fe760002b77afcb137ba" alt="image-20200805145020398"></p><h3 id="2-4-2-域名解析"><a href="#2-4-2-域名解析" class="headerlink" title="2.4.2    域名解析"></a>2.4.2    域名解析</h3><p>应用解析时，首先从zk域名节点中获取域名映射的IP和端口。</p><h3 id="2-4-3-域名变更"><a href="#2-4-3-域名变更" class="headerlink" title="2.4.3    域名变更"></a>2.4.3    域名变更</h3><p>每个应用都会在在对应的域名节点注册一个数据变更的<code>watcher</code>监听，一旦监听的域名节点数据变更，zk会向所有订阅的客户端发送域名变更通知。</p><h2 id="2-5-集群管理"><a href="#2-5-集群管理" class="headerlink" title="2.5    集群管理"></a>2.5    集群管理</h2><p>随着分布式系统规模日益扩大，集群中机器的数量越来越多。有效的集群管理越来越重要了，<code>zookeeper</code>集群管理主要利用了<code>watcher</code>机制和创建临时节点来实现。以机器上下线和机器监控为例：</p><p><img src="https://p.pstatp.com/origin/137d20000b60cf8a6dcd4" alt="image-20200805145807510"></p><h3 id="2-5-1-机器上下线"><a href="#2-5-1-机器上下线" class="headerlink" title="2.5.1    机器上下线"></a>2.5.1    机器上下线</h3><p>新增机器的时候，将Agent部署到新增的机器上，当Agent部署启动时，会向zookeeper指定的节点下创建一个临时子节点，当Agent在zk上创建完这个临时节点后，当关注的节点<code>zookeeper/machines</code>下的子节点新加入新的节点时或删除都会发送通知，这样就对机器的上下线进行监控。</p><p><img src="https://p.pstatp.com/origin/1379f00007439636871cf" alt="image-20200805145839821"></p><h3 id="2-5-2-机器监控"><a href="#2-5-2-机器监控" class="headerlink" title="2.5.2    机器监控"></a>2.5.2    机器监控</h3><p>在机器运行过程中，Agent会定时将主机的的运行状态信息写入到<code>/machines/hostn</code>主机节点，监控中心通过订阅这些节点的数据变化来获取主机的运行信息。</p><h2 id="2-6-分布式锁"><a href="#2-6-分布式锁" class="headerlink" title="2.6    分布式锁"></a>2.6    分布式锁</h2><h3 id="2-6-1-数据库实现分布式锁"><a href="#2-6-1-数据库实现分布式锁" class="headerlink" title="2.6.1    数据库实现分布式锁"></a>2.6.1    数据库实现分布式锁</h3><p><img src="https://p.pstatp.com/origin/1000b0002714c665df7a5" alt="image-20200805150426778"></p><p>首先我们创建一张锁表，锁表中字段设置唯一约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;lock_record&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;, </span><br><span class="line">    &#96;lock_name&#96; varchar(50) DEFAULT NULL COMMENT &#39;锁名称&#39;, </span><br><span class="line">    PRIMARY KEY (&#96;id&#96;), </span><br><span class="line">    UNIQUE KEY &#96;lock_name&#96; (&#96;lock_name&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;38 DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><p>定义锁，实现 <code>Lock</code>接口，<code>tryLock()</code>尝试获取锁，从锁表中查询指定的锁记 录，如果查询到记录，说明已经上锁，不能再上锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试获取锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询lockRecord的记录</span></span><br><span class="line">    Example example = <span class="keyword">new</span> Example(LockRecord<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andEqualTo(<span class="string">"lockName"</span>,LOCK_NAME);</span><br><span class="line">    LockRecord lockRecord = lockRecordMapper.selectOneByExample(example);</span><br><span class="line">    <span class="keyword">if</span>(lockRecord==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>lock</code>方法获取锁之前先调用<code>tryLock()</code>方法尝试获取锁，如果未加锁则向锁表中插入一条锁记录来获取锁，这里我们通过循环，如果上锁我们一致等待锁的释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tryLock())&#123;</span><br><span class="line">            <span class="comment">//向锁表中插入一条记录</span></span><br><span class="line">            LockRecord lockRecord = <span class="keyword">new</span> LockRecord();</span><br><span class="line">            lockRecord.setLockName(LOCK_NAME);</span><br><span class="line">            lockRecordMapper.insertSelective(lockRecord);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"等待锁......."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁，即是将数据库中对应的锁表记录删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//释放锁的操作</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Example example = <span class="keyword">new</span> Example(LockRecord<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andEqualTo(<span class="string">"lockName"</span>,LOCK_NAME);</span><br><span class="line">    lockRecordMapper.deleteByExample(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在尝试获取锁的方法 <code>tryLock</code>中，存在多个线程同时获取锁的情况，可以简单通过<code>synchronized</code>解决</p><h3 id="2-6-2-redis实现分布式锁"><a href="#2-6-2-redis实现分布式锁" class="headerlink" title="2.6.2    redis实现分布式锁"></a>2.6.2    redis实现分布式锁</h3><p>redis分布式锁的实现基于setnx（set if not exists），设置成功，返回1；设置失败，返回0，释放锁的操作通过del指令来完成</p><p>如果设置锁后在执行中间过程时，程序抛出异常，导致del指令没有调用，锁永远无法释放，这样就会陷入死锁。所以我们拿到锁之后会给锁加上一个过期时间，这样即使中间出现异常，过期时间到后会自动释放锁。</p><p>同时在setnx 和 expire 如果进程挂掉，expire不能执行也会死锁。所以要保证setnx和expire是一个原子性操作即可。redis 2.8之后推出了setnx和expire的组合指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value ex 5 nx</span><br></pre></td></tr></table></figure><p>lock获取锁方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//上锁 setnx</span></span><br><span class="line">        <span class="comment">//  Boolean isLock = redisTemplate.opsForValue().setIfAbsent("lockName", LOCK_NAME);</span></span><br><span class="line">        Boolean isLock =  redisTemplate.opsForValue().setIfAbsent(<span class="string">"lockName"</span>,LOCK_NAME,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"等待锁........"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 删除指定的锁的key</span></span><br><span class="line">    redisTemplate.delete(<span class="string">"lockName"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis 实现分布式锁存在的问题，为了解决redis单点问题，我们会部署redis集群，在 Sentinel 集群中，主节点突然挂掉了。同时主节点中有把锁还没有来得及同步到从节点。这样就会导致系统中同样一把锁被两个客户端同时持有，不安全性由此产生。redis官方为了解决这个问题，推出了Redlock 算法解决这个问题。但是带来的网络消耗较大。</p><p>分布式锁的redisson实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取锁释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6379"</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">Redisson redisson = (Redisson) Redisson.create(config);</span><br><span class="line">RLock mylock = redisson.getLock(<span class="string">"redisson_lock"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取锁mylock.lock();</span></span><br><span class="line"><span class="comment">//释放锁mylock.unlock();</span></span><br></pre></td></tr></table></figure><h3 id="2-6-3-zookeeper实现分布式锁"><a href="#2-6-3-zookeeper实现分布式锁" class="headerlink" title="2.6.3    zookeeper实现分布式锁"></a>2.6.3    zookeeper实现分布式锁</h3><p>原理：zookeeper通过创建临时序列节点来实现分布式锁，适用于顺序执行的程序，大体思路就是创建临时序列节点，找出最小的序列节点，获取分布式锁，程序执行完成之后此序列节点消失，通过watch来监控节点的变化，从剩下的节点的找到最小的序列节点，获取分布式锁，执行相应处理，依次类推……</p><p><img src="https://p.pstatp.com/origin/13758000235878cc9c24c" alt="image-20200805154746534"></p><h4 id="2-6-3-1-原生实现"><a href="#2-6-3-1-原生实现" class="headerlink" title="2.6.3.1    原生实现"></a>2.6.3.1    原生实现</h4><p>首先在ZkLock的构造方法中，连接zk,创建lock根节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//zk客户端</span></span><br><span class="line"><span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line"><span class="comment">//zk是一个目录结构，locks</span></span><br><span class="line"><span class="keyword">private</span> String root = <span class="string">"/locks"</span>;</span><br><span class="line"><span class="comment">//锁的名称</span></span><br><span class="line"><span class="keyword">private</span> String lockName;</span><br><span class="line"><span class="comment">//当前线程创建的序列node</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;String&gt; nodeId = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"><span class="comment">//用来同步等待zkclient链接到了服务端</span></span><br><span class="line"><span class="keyword">private</span> CountDownLatch connectedSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] data= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZkLock</span><span class="params">(String config, String lockName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lockName = lockName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        zk = <span class="keyword">new</span> ZooKeeper(config, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 建立连接</span></span><br><span class="line">                <span class="keyword">if</span> (event.getState() == Event.KeeperState.SyncConnected) &#123;</span><br><span class="line">                    connectedSignal.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        connectedSignal.await();</span><br><span class="line">        Stat stat = zk.exists(root, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == stat) &#123;</span><br><span class="line">            <span class="comment">// 创建根节点</span></span><br><span class="line">            zk.create(root, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 watch监听临时顺序节点的删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockWatcher</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event.getType() == Event.EventType.NodeDeleted)</span><br><span class="line">            latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取锁操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建临时子节点</span></span><br><span class="line">        String myNode = zk.create(root + <span class="string">"/"</span> + lockName , data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+myNode+ <span class="string">"created"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出所有子节点</span></span><br><span class="line">        List&lt;String&gt; subNodes = zk.getChildren(root, <span class="keyword">false</span>);</span><br><span class="line">        TreeSet&lt;String&gt; sortedNodes = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String node :subNodes) &#123;</span><br><span class="line">            sortedNodes.add(root +<span class="string">"/"</span> +node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String smallNode = sortedNodes.first();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (myNode.equals( smallNode)) &#123;</span><br><span class="line">            <span class="comment">// 如果是最小的节点,则表示取得锁</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ myNode+<span class="string">"get lock"</span>);</span><br><span class="line">            <span class="keyword">this</span>.nodeId.set(myNode);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String preNode = sortedNodes.lower(myNode);</span><br><span class="line"></span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Stat stat = zk.exists(preNode, <span class="keyword">new</span> LockWatcher(latch));<span class="comment">// 同时注册监听。</span></span><br><span class="line">        <span class="comment">// 判断比自己小一个数的节点是否存在,如果不存在则无需等待锁,同时注册监听</span></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ myNode + <span class="string">" waiting for "</span> + root + <span class="string">"/"</span> + preNode + <span class="string">" released lock"</span>);</span><br><span class="line"></span><br><span class="line">            latch.await();<span class="comment">// 等待，这里应该一直等待其他线程释放锁</span></span><br><span class="line">            nodeId.set(myNode);</span><br><span class="line">            latch = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">"unlock "</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nodeId) &#123;</span><br><span class="line">            zk.delete(nodeId.get(), -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        nodeId.remove();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-3-2-基于-curator实现分布式锁"><a href="#2-6-3-2-基于-curator实现分布式锁" class="headerlink" title="2.6.3.2    基于 curator实现分布式锁"></a>2.6.3.2    基于 curator实现分布式锁</h4><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>锁操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建zookeeper的客户端</span></span><br><span class="line">RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//集群通过，分割</span></span><br><span class="line">CuratorFramework client =CuratorFrameworkFactory.newClient(<span class="string">"127.0.0.1:2181"</span>, retryPolicy);</span><br><span class="line">client.start();</span><br><span class="line"><span class="comment">//创建分布式锁, 锁空间的根节点路径为/curator/lock </span></span><br><span class="line">InterProcessMutex mutex = <span class="keyword">new</span> InterProcessMutex(client, <span class="string">"/curator/lock"</span>); </span><br><span class="line">mutex.acquire();</span><br><span class="line"><span class="comment">//获得了锁, 进行业务流程</span></span><br><span class="line"><span class="comment">//完成业务流程, 释放锁</span></span><br><span class="line">mutex.release();</span><br><span class="line"><span class="comment">//关闭客户端</span></span><br><span class="line">client.close();</span><br></pre></td></tr></table></figure><h2 id="2-7-分布式队列"><a href="#2-7-分布式队列" class="headerlink" title="2.7    分布式队列"></a>2.7    分布式队列</h2><p>队列特性：FIFO（先入先出），zookeeper实现分布式队列的步骤</p><p><img src="https://p.pstatp.com/origin/1383c00001a486232479b" alt="image-20200805154827324"></p><ul><li>在队列节点下创建临时顺序节点 例如/queue_info/192.168.1.1-0000001</li><li>调用 getChildren()接口来获取/queue_info节点下所有子节点，获取队列中所有元素</li><li>比较自己节点是否是序号最小的节点，如果不是，则等待其他节点出队列，在序号最小的节点注册watcher</li><li>获取 watcher通知后，重复步骤</li></ul><p><img src="https://p.pstatp.com/origin/10003000272c3d6417543" alt="image-20200805155040838"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-zookeeper源码解析&quot;&gt;&lt;a href=&quot;#1-zookeeper源码解析&quot; class=&quot;headerlink&quot; title=&quot;1.    zookeeper源码解析&quot;&gt;&lt;/a&gt;1.    zookeeper源码解析&lt;/h1&gt;&lt;h2 id=&quot;1-1-下载zookeeper源码，导入IDEA中&quot;&gt;&lt;a href=&quot;#1-1-下载zookeeper源码，导入IDEA中&quot; class=&quot;headerlink&quot; title=&quot;1.1    下载zookeeper源码，导入IDEA中&quot;&gt;&lt;/a&gt;1.1    下载zookeeper源码，导入IDEA中&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/apache/zookeeper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/apache/zookeeper&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="zookeeper" scheme="https://wgy1993.gitee.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper(一)</title>
    <link href="https://wgy1993.gitee.io/archives/e18db595.html"/>
    <id>https://wgy1993.gitee.io/archives/e18db595.html</id>
    <published>2020-08-01T10:35:22.000Z</published>
    <updated>2020-08-01T10:51:27.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-zookeeper简介"><a href="#1-zookeeper简介" class="headerlink" title="1.    zookeeper简介"></a>1.    zookeeper简介</h1><h2 id="1-1-分布式概述"><a href="#1-1-分布式概述" class="headerlink" title="1.1    分布式概述"></a>1.1    分布式概述</h2><p>早期我们使用单体架构，即所有服务部署在一台服务器的一个进程中，随着互联网的发展，逐步演进为分布式架构，多个服务分别部署在不同机器的不同进程中。</p><a id="more"></a><p><img src="https://p.pstatp.com/origin/1000b00025f3f17d51ce3" alt="image-20200730181013482"></p><h2 id="1-2-zookeeper概述"><a href="#1-2-zookeeper概述" class="headerlink" title="1.2    zookeeper概述"></a>1.2    zookeeper概述</h2><p>zookeeper是一个开源的分布式协调服务，提供分布式数据一致性解决方案，分布式应用程序可以实现数据发布订阅、负载均衡、命名服务、集群管理分布式锁、分布式队列等功能。</p><p>zookeeper提供了分布式数据一致性解决方案，那什么是分布式数据一致性？首先我们谈谈什么叫一致性？</p><p><img src="https://p.pstatp.com/origin/1375b0001b39df25315bb" alt="image-20200730181136559"></p><p>如图在上图中有用户user在DB1中修改balance=900,如果user下一次read请求到DB2数据，此时DB1的数据还没及时更新到DB2中，就会造成整个数据库集群数据不一致。</p><p>数据一致性分为强一致性和最终一致性，强一致性指的如果数据不一致，就不对外提供数据服务，保证用户读取的数据始终是一致的。数据强一致性只需要通过锁机制即可解决，在案例中通过在DB2没有从DB1同步数据之前上锁，不对外提供读操作。只有当同步完成以后才对外提供服务。而最终一致性要求数据最终同步即可，没有实时性要求。</p><h2 id="1-3-CAP原则"><a href="#1-3-CAP原则" class="headerlink" title="1.3    CAP原则"></a>1.3    CAP原则</h2><p>CAP在分布式系统中主要指的是一致性（(Consistency）、可用性（Availability）和分区容错性（Partition tolerance）</p><ul><li><p><strong>一致性</strong></p><p>一致性指的是强一致性</p></li><li><p><strong>可用性</strong></p><p>系统提供的服务一直处于可用状态，用户的操作请求在指定的响应时间内响应请求，超出时间范围，认为系统不可用</p></li><li><p><strong>分区容错性</strong></p><p>分布式系统在遇到任何网络分区故障的时候，仍需要能够保证对外提供一致性和可用性服务，除非是整个网络都发生故障。</p></li></ul><p>在一个分布式系统中不可能同时满足一致性、可用性、分区容错性，最多满足两个，对于分布式互联网应用而言，必须保证P，所以要么满足AP模型、要么满足CP模型</p><p><img src="https://p.pstatp.com/origin/137540000f366f2fc11a7" alt="image-20200730182433524"></p><h2 id="1-4-一致性协议"><a href="#1-4-一致性协议" class="headerlink" title="1.4    一致性协议"></a>1.4    一致性协议</h2><p>事务需要跨多个分布式节点时，为了保证事务的ACID特性，需要选举出一个协调者来协调分布式各个节点的调度，基于这个思想衍生了多种一致性协议:</p><h3 id="1-4-1-2PC-二阶段提交"><a href="#1-4-1-2PC-二阶段提交" class="headerlink" title="1.4.1    2PC 二阶段提交"></a>1.4.1    2PC 二阶段提交</h3><p>顾名思义，二阶段提交叫事务的提交过程分为两个阶段：</p><p><img src="https://p.pstatp.com/origin/138150000534740130827" alt="image-20200730183051786"></p><ul><li><p><strong>阶段一 提交事务请求</strong></p><p>1 、协调者向所有的参与者节点发送事务内容，询问是否可以执行事务操作，并等待其他参与者节点的反馈</p><p>2 、各参与者节点执行事务操作</p><p>3 、各参与者节点反馈给协调者，事务是否可以执行</p></li><li><p><strong>阶段二 事务提交</strong></p><p>根据一阶段各个参与者节点反馈的ack,如果所有参与者节点反馈ack，则执行事务提交，否则中断事务</p><ul><li><p>事务提交：</p><p>1 、协调者向各个参与者节点发送commit请求</p><p>2 、参与者节点接受到commit请求后，执行事务的提交操作</p><p>3 、各参与者节点完成事务提交后，向协调者返送提交commit成功确认消息</p><p>4 、协调者接受各个参与者节点的ack后，完成事务commit</p></li><li><p>中断事务：</p><p>1 、发送回滚请求</p><p>2 、各个参与者节点回滚事务</p><p>3 、反馈给协调者事务回滚结果</p><p>4 、协调者接受各参与者节点ack后回滚事务</p></li></ul></li></ul><p><strong>二阶段提交存在的问题：</strong></p><ul><li><p>同步阻塞</p><p>二阶段提交过程中，所有参与事务操作的节点处于同步阻塞状态，无法进行其他的操作</p></li><li><p>单点问题</p><p>一旦协调者出现单点故障，无法保证事务的一致性操作</p></li><li><p>脑裂导致数据不一致</p><p>如果分布式节点出现网络分区，某些参与者未收到commit提交命令。则出现部分参与者完成数据提交。未收到commit的命令的参与者则无法进行事务提交，整个分布式系统便出现了数据不一致性现象。</p></li></ul><h3 id="1-4-2-3PC-三阶段提交"><a href="#1-4-2-3PC-三阶段提交" class="headerlink" title="1.4.2    3PC 三阶段提交"></a>1.4.2    3PC 三阶段提交</h3><p>3PC是2PC的改进版，实质是将2PC中提交事务请求拆分为两步，形成了CanCommit、PreCommit、doCommit三个阶段的事务一致性协议</p><p><img src="https://p.pstatp.com/origin/137ec000045da5b48768e" alt="image-20200730184255383"></p><ul><li><p><strong>阶段一 : CanCommit</strong></p><p>1 、事务询问</p><p>2 、各参与者节点向协调者反馈事务询问的响应</p></li><li><p><strong>阶段二 : PreCommit</strong></p><p>根据阶段一的反馈结果分为两种情况</p><ul><li><p>执行事务预提交</p><p>1 、发送预提交请求</p><p>协调者向所有参与者节点发送preCommit请求，进入prepared阶段</p><p>2 、事务预提交</p><p>各参与者节点接受到preCommit请求后，执行事务操作</p><p>3 、各参与者节点向协调者反馈事务执行</p></li><li><p>中断事务</p><p>任意一个参与者节点反馈给协调者响应No时，或者在等待超时后，协调者还未收到参与者的反馈，就中断事务，中断事务分为两步：</p><p>1 、协调者向各个参与者节点发送abort请求</p><p>2 、参与者收到abort请求，或者等待超时时间后，中断事务</p></li></ul></li><li><p><strong>阶段三 : doCommit</strong></p><ul><li><p>执行提交</p><p>1 、发送提交请求</p><p>协调者向所有参与者节点发送doCommit请求</p><p>2 、事务提交</p><p>各参与者节点接受到doCommit请求后，执行事务提交操作</p><p>3 、反馈事务提交结果</p><p>各参与者节点完成事务提交以后，向协调者发送ack</p><p>4 、事务完成</p><p>协调者接受各个参与者反馈的ack后，完成事务</p></li><li><p>中断事务</p><p>1 、参与者接受到abort请求后，执行事务回滚</p><p>2 、参与者完成事务回滚以后，向协调者发送ack</p><p>3 、协调者接受回滚ack后，回滚事务</p></li></ul></li></ul><p>3PC相较于2PC而言，解决了协调者挂点后参与者无限阻塞和单点问题，但是仍然无法解决网络分区问题</p><h3 id="1-4-3-Paxos算法"><a href="#1-4-3-Paxos算法" class="headerlink" title="1.4.3    Paxos算法"></a>1.4.3    Paxos算法</h3><p>Paxos算法是Leslie Lamport 1990年提出的一种一致性算法，该算法是一种提高分布式系统容错性的一致性算法，解决了3PC中网络分区的问题，paxos算法可以在节点失效、网络分区、网络延迟等各种异常情况下保证所有节点都处于同一状态，同时paxos算法引入了“过半”理念，即少数服从多数原则。</p><p>paxos有三个版本：</p><ul><li>Basic Paxos</li><li>Multi Paxos</li><li>Fast Paxos</li></ul><p>在paxos算法中，有四种种角色，分别具有三种不同的行为，但多数情况，一个进程可能同时充当多种角色。</p><ul><li>client：系统外部角色，请求发起者，不参与决策</li><li>proposer：提案提议者</li><li>acceptor：提案的表决者，即是否accept该提案，只有超过半数以上的acceptor接受了提案，该提案才被认为被“选定”</li><li>learners：提案的学习者，当提案被选定后，其同步执行提案，不参与决策</li></ul><p><img src="https://p.pstatp.com/origin/ff7d0002770b6369bdd9" alt="image-20200730195421460"></p><p>Paxos算法分为两个阶段：prepare阶段、accept阶段</p><ul><li><p><strong>prepare阶段</strong></p><p>1 、proposer提出一个提案，编号为N,发送给所有的acceptor。</p><p>2 、每个表决者都保存自己的accept的最大提案编号maxN，当表决者收到prepare(N)请求时，会比较N与maxN的值，若N小于maxN,则提案已过时，拒绝prepare(N)请求。若N大于等于maxN，则接受提案，并将该表决者曾经接受过的编号最大的提案Proposal(myid,maxN,value)反馈给提议者：其中myid表示表决者acceptor的标识id，maxN表示接受过的最大提案编号maxN，value表示提案内容。若当前表决者未曾accept任何提议，会将proposal(myid,null,null)反馈给提议者。</p></li><li><p><strong>accept阶段</strong></p><p>1 、提议者proposal发出prepare(N),若收到超过半数表决者acceptor的反馈，proposal将真正的提案内容proposal(N,value)发送给所有表决者。</p><p>2 、表决者acceptor接受提议者发送的proposal(N,value)提案后，会将自己曾经accept过的最大提案编号maxN和反馈过的prepare的最大编号，若N大于这两个编号，则当前表决者accept该提案，并反馈给提议者。否则拒绝该提议。</p><p>3 、若提议者没有收到半数以上的表决者accept反馈，则重新进入prepare阶段，递增提案编号，重新提出prepare请求。若收到半数以上的accept，则其他未向提议者反馈的表决者称为learner，主动同步提议者的提案。</p></li></ul><p><img src="https://p.pstatp.com/origin/ffca00020ddfe5b96304" alt="image-20200730202021534"></p><p>正常流程</p><p><img src="https://p.pstatp.com/origin/137690000b9b05290a342" alt="image-20200730202128379"></p><p>单点故障，部分节点失败</p><p><img src="https://p.pstatp.com/origin/1381c0000253afb5aa4f4" alt="image-20200730202145076"></p><p>proposer失败</p><p><img src="https://p.pstatp.com/origin/1380f00008954fd97898f" alt="image-20200730202159173"></p><p>Basic Paxos算法存在活锁问题（liveness）或dueling，而且较难实现</p><p><img src="https://p.pstatp.com/origin/1382a00001732c0e510af" alt="image-20200730202211999"></p><p>Multi Paxos: 唯一的proposor，即leader</p><p><img src="https://p.pstatp.com/origin/1378c00015414f89150ba" alt="image-20200730202224216"></p><p>简化角色</p><p><img src="https://p.pstatp.com/origin/1382000001441c8ec7909" alt="image-20200730202235533"></p><h3 id="1-4-4-ZAB协议-Fast-Paxos"><a href="#1-4-4-ZAB协议-Fast-Paxos" class="headerlink" title="1.4.4    ZAB协议(Fast Paxos)"></a>1.4.4    ZAB协议(Fast Paxos)</h3><p>由于paxos算法实现起来较难，存在活锁和全序问题（无法保证两次最终提交的顺序），所以zookeeper并没有使用paxos作为一致性协议，而是使用了ZAB协议。</p><p>ZAB（zookeeper atomic broadcast）:是一种支持崩溃恢复的原子广播协议，基于Fast paxos实现</p><p>ZooKeeper使用单一主进程Leader用于处理客户端所有事务请求,，即写请求。当服务器数据发生变更好，集群采用ZAB原子广播协议，以事务提交proposal的形式广播到所有的副本进程，每一个事务分配一个全局的递增的事务编号xid。</p><p>若客户端提交的请求为读请求时，则接受请求的节点直接根据自己保存的数据响应。若是写请求，且当前节点不是leader，那么该节点就会将请求转发给leader，leader会以提案的方式广播此写请求，如果超过半数的节点同意写请求，则该写请求就会提交。leader会通知所有的订阅者同步数据。</p><p><img src="https://p.pstatp.com/origin/1375800021282a8ffb358" alt="image-20200730211313432"></p><p><strong>zookeeper的三种角色：</strong></p><p>为了避免zk的单点问题，zk采用集群方式保证zk高可用</p><ul><li><p>leader</p><p>leader负责处理集群的写请求，并发起投票，只有超过半数的节点同意后才会提交该写请求</p></li><li><p>follower</p><p>处理读请求，响应结果。转发写请求到leader，在选举leader过程中参与投票</p></li><li><p>observer</p><p>observer可以理解为没有投票权的follower，主要职责是协助follower处理读请求。那么当整个zk集群读请求负载很高时，为什么不增加follower节点呢？原因是增加follower节点会让leader在提出写请求提案时，需要半数以上的follower投票节点同意，这样会增加leader和follower的通信通信压力，降低写操作效率。</p></li></ul><p><strong>zookeeper两种模式：</strong></p><ul><li><p>恢复模式</p><p>当服务启动或领导崩溃后，zk进入恢复状态，选举leader，leader选出后，将完成leader和其他机器的数据同步，当大多数server完成和leader的同步后，恢复模式结束</p></li><li><p>广播模式</p><p>一旦Leader已经和多数的Follower进行了状态同步后，进入广播模式。进入广播模式后，如果有新加入的服务器，会自动从leader中同步数据。leader在接收客户端请求后，会生成事务提案广播给其他机器，有超过半数以上的follower同意该提议后，再提交事务。</p><p>注意在ZAB的事务的二阶段提交中，移除了事务中断的逻辑，follower要么ack，要么放弃，leader无需等待所有的follower的ack。</p></li></ul><p><strong>zxid</strong></p><p>zxid是 64 位长度的Long类型，其中高 32 位表示纪元epoch，低 32 位表示事务标识xid。即zxid由两部分构成：epoch和xid</p><p>每个leader都会具有不同的epoch值，表示一个纪元，每一个新的选举开启时都会生成一个新的epoch，新的leader产生，会更新所有的zkServer的zxid的epoch，xid是一个依次递增的事务编号。</p><p><strong>leader选举算法：</strong></p><p><img src="https://p.pstatp.com/origin/fe5100029829d7ff251c" alt="image-20200730212416540"></p><p>启动过程</p><ul><li>每一个server发出一个投票给集群中其他节点</li><li>收到各个服务器的投票后，判断该投票有效性，比如是否是本轮投票，是否是 looking状态</li><li>处理投票，pk别人的投票和自己的投票 比较规则xid&gt;myid “取大原则”</li><li>统计是否超过半数的接受相同的选票</li><li>确认leader，改变服务器状态</li><li>添加新server，leader已经选举出来，只能以follower身份加入集群中</li></ul><p>崩溃恢复过程</p><ul><li>leader挂掉后，集群中其他follower会将状态从FOLLOWING变为LOOKING,重新进入leader选举</li><li>同上启动过程</li></ul><p><img src="https://p.pstatp.com/origin/ff3e0002ad3ef471659b" alt="image-20200730212528662"></p><p><strong>消息广播算法：</strong></p><p>一旦进入广播模式，集群中非leader节点接受到事务请求，首先会将事务请求转发给服务器，leader服务器为其生成对应的事务提案proposal,并发送给集群中其他节点，如果过半则事务提交；</p><p><img src="https://p.pstatp.com/origin/13829000045b102c1680d" alt="image-20200730212939123"></p><ul><li>leader接受到消息后，消息通过全局唯一的 64 位自增事务id，zxid标识</li><li>leader发送给follower的提案是有序的，leader会创建一个FIFO队列，将提案顺序写入队列中发送给follower</li><li>follower接受到提案后，会比较提案zxid和本地事务日志最大的zxid，若提案zxid比本地事务id大，将提案记录到本地日志中，反馈ack给leader，否则拒绝</li><li>leader接收到过半ack后，leader向所有的follower发送commit，通知每个follower执行本地事务</li></ul><h1 id="2-zookeeper环境搭建"><a href="#2-zookeeper环境搭建" class="headerlink" title="2.    zookeeper环境搭建"></a>2.    zookeeper环境搭建</h1><p>zookeeper安装以linux环境为例，windows省略</p><h2 id="2-1-单机环境"><a href="#2-1-单机环境" class="headerlink" title="2.1    单机环境"></a>2.1    单机环境</h2><h3 id="2-1-1-安装jdk"><a href="#2-1-1-安装jdk" class="headerlink" title="2.1.1    安装jdk"></a>2.1.1    安装jdk</h3><p>略……</p><h3 id="2-1-2-zookeeper压缩包上传到linux"><a href="#2-1-2-zookeeper压缩包上传到linux" class="headerlink" title="2.1.2    zookeeper压缩包上传到linux"></a>2.1.2    zookeeper压缩包上传到linux</h3><p>Alt+P 进入SFTP ，输入put d:\zookeeper-3.4.6.tar.gz 上传，d:\zookeeper-3.4.6.tar.gz是本地存放zookeeper的路径或者rz上传</p><h3 id="2-1-3-解压缩压缩包"><a href="#2-1-3-解压缩压缩包" class="headerlink" title="2.1.3    解压缩压缩包"></a>2.1.3    解压缩压缩包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-1-4-创建-data-文件夹"><a href="#2-1-4-创建-data-文件夹" class="headerlink" title="2.1.4    创建 data 文件夹"></a>2.1.4    创建 data 文件夹</h3><p>进入 zookeeper-3.4.13 目录,创建data文件夹并修改conf文件夹下的zoo_sample.cfg为zoo.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><h3 id="2-1-5-修改zoo-cfg中的data属性"><a href="#2-1-5-修改zoo-cfg中的data属性" class="headerlink" title="2.1.5    修改zoo.cfg中的data属性"></a>2.1.5    修改zoo.cfg中的data属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/root/zookeeper-3.4.6/data</span><br></pre></td></tr></table></figure><h3 id="2-1-6-zookeeper服务启动"><a href="#2-1-6-zookeeper服务启动" class="headerlink" title="2.1.6    zookeeper服务启动"></a>2.1.6    zookeeper服务启动</h3><p>进入bin目录，启动服务输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p>输出以下内容表示启动成功</p><p><img src="https://p.pstatp.com/origin/fea700015775c9e1b780" alt="image-20200730214246835"></p><p>关闭服务输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure><p>输出以下提示信息</p><p><img src="https://p.pstatp.com/origin/fe2c000240fe36816318" alt="image-20200730214255293"></p><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><p>如果启动状态，提示</p><p><img src="https://p.pstatp.com/origin/fe7100021ade5650355c" alt="image-20200730214313289"></p><p>如果未启动状态，提示</p><p><img src="https://p.pstatp.com/origin/1000300025ba2a2d125e9" alt="image-20200730214349044"></p><h2 id="2-2-集群环境"><a href="#2-2-集群环境" class="headerlink" title="2.2    集群环境"></a>2.2    集群环境</h2><p>真实的集群是需要部署在不同的服务器上的，但是在我们测试时启动多个虚拟机的内存消耗太大，所以我们通常会搭建<strong>伪集群</strong> ，也就是把所有的服务都搭建在一台虚拟机上，用端口进行区分。</p><h3 id="2-2-1-准备工作"><a href="#2-2-1-准备工作" class="headerlink" title="2.2.1    准备工作"></a>2.2.1    准备工作</h3><p>（ 1 ）安装JDK 【此步骤省略】。</p><p>（ 2 ）Zookeeper压缩包上传到服务器</p><p>（ 3 ）将Zookeeper解压到 /usr/local/zookeeper-cluster，复制三份zookeeper并改名为 zookeeper-1、zookeeper-2、zookeeper-3</p><p>（ 4 ）在解压后的Zookeeper目录下创建data目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper-cluster/zookeeper-1</span><br><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper-cluster/zookeeper-2</span><br><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper-cluster/zookeeper-3</span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure><p>（ 5 ） 配置每一个Zookeeper 的dataDir（zoo.cfg） clientPort 分别为 2181 2182 2183</p><p>修改 /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientPort&#x3D;2181</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-1&#x2F;data</span><br></pre></td></tr></table></figure><p>修改/usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientPort&#x3D;2182</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-2&#x2F;data</span><br></pre></td></tr></table></figure><p>修改/usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientPort&#x3D;2183</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-3&#x2F;data</span><br></pre></td></tr></table></figure><h3 id="2-2-2-配置集群"><a href="#2-2-2-配置集群" class="headerlink" title="2.2.2    配置集群"></a>2.2.2    配置集群</h3><p>（ 1 ）在每个zookeeper的 data 目录下创建一个 myid 文件，内容分别是 1 、 2 、 3 。这个文件就是记录每个服务器的ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch myid</span><br></pre></td></tr></table></figure><p>（ 2 ）在每一个zookeeper 的 zoo.cfg配置客户端访问端口（clientPort）和集群服务器IP列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.1&#x3D;192.168.25.129:2881:3881</span><br><span class="line">server.2&#x3D;192.168.25.129:2882:3882</span><br><span class="line">server.3&#x3D;192.168.25.129:2883:3883</span><br><span class="line">server.服务器ID&#x3D;服务器IP地址：服务器之间通信端口：服务器之间投票选举端口</span><br></pre></td></tr></table></figure><h3 id="2-2-3-启动集群"><a href="#2-2-3-启动集群" class="headerlink" title="2.2.3    启动集群"></a>2.2.3    启动集群</h3><p>依次启动三个zk实例，其中有一个leader和两个follower</p><h1 id="3-zookeeper基本使用"><a href="#3-zookeeper基本使用" class="headerlink" title="3.    zookeeper基本使用"></a>3.    zookeeper基本使用</h1><h2 id="3-1-数据结构"><a href="#3-1-数据结构" class="headerlink" title="3.1    数据结构"></a>3.1    数据结构</h2><p>ZooKeeper数据模型的结构与Unix文件系统很类似，整体上可以看作是一棵树，每个节点称做一个ZNode，每个ZNode都可以通过其路径唯一标识</p><p><img src="https://p.pstatp.com/origin/1374e00008525162474b0" alt="image-20200730220144122"></p><p>Znode节点类型</p><ul><li><p>持久化目录节点（PERSISTENT）</p><p>客户端与zookeeper断开连接后，该节点依旧存在</p></li><li><p>持久化顺序编号目录节点（PERSISTENT_SEQUENTIAL）</p><p>客户端与zookeeper断开连接后，该节点依旧存在，Zookeeper会给该节点按照顺序编号</p></li><li><p>临时目录节点（EPHEMERAL）</p><p>客户端与zookeeper断开连接后，该节点被删除</p></li><li><p>临时顺序编号目录节点（EPHEMERAL_SEQUENTIAL）</p><p>客户端与zookeeper断开连接后，该节点被删除，Zookeeper会给该节点按照顺序编号</p></li></ul><h2 id="3-2-命令行使用"><a href="#3-2-命令行使用" class="headerlink" title="3.2    命令行使用"></a>3.2    命令行使用</h2><p>通过zkClient进入zookeeper客户端命令行，输入help查看zookeeper客户端的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./zkcli.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><img src="https://p.pstatp.com/origin/fec8000254bdb46ac408" alt="image-20200730220426812"></p><p>如上图列出了zookeeper所有的客户端命令行，下面主要讲解常见的几个命令行</p><ul><li><p>使用 ls 命令来查看当前znode中所包含的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls path [watch]</span><br><span class="line"></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure></li><li><p>查看当前节点数据并能看到更新次数等数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls2 path [watch]</span><br><span class="line"></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure></li><li><p>创建节点 -s 含有序列 -e 临时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create</span><br><span class="line"></span><br><span class="line">create /<span class="built_in">test</span> testvalue</span><br></pre></td></tr></table></figure></li><li><p>获得节点的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get path [watch]</span><br><span class="line"></span><br><span class="line">get /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>设置节点的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">get /<span class="built_in">test</span> testvalueupdate</span><br></pre></td></tr></table></figure></li><li><p>查看节点状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stat</span> /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete</span><br><span class="line"></span><br><span class="line">delete /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>递归删除节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create /<span class="built_in">test</span> testvalue</span><br><span class="line"></span><br><span class="line">create /<span class="built_in">test</span>/test001 testvalue001</span><br><span class="line"></span><br><span class="line">rmr /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-api使用"><a href="#3-3-api使用" class="headerlink" title="3.3    api使用"></a>3.3    api使用</h2><p><strong>maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>ZooKeeper zk = new ZooKeeper(String connectString, int sessionTimeout,Watcher watcher)</td><td>创建zookeeper连接，connectString表示连接的zookeeper服务器的地址，sessionTimeOut指定会话的的超时时间，Watcher配置监听</td></tr><tr><td>String create(String path, byte[] data, List acl,CreateMode createMode)</td><td>创建一个给定的目录节点 path, 并给它设置数据，CreateMode 标识有四种形式的目录节点，分别是 PERSISTENT：持久化目录节点，这个目录节点存储的数据不会丢失；PERSISTENT_SEQUENTIAL：顺序自动编号的目录节点，这种目录节点会根据当前已近存在的节点数自动加 1 ，然后返回给客户端已经成功创建的目录节点名；EPHEMERAL：临时目录节点，一旦创建这个节点的客户端与服务器端口也就是 session 超时，这种节点会被自动删除；EPHEMERAL_SEQUENTIAL：临时自动编号节点</td></tr><tr><td>Stat exists(String path, boolean watch)</td><td>判断某个 path 是否存在，并设置是否监控这个目录节点，这里的watcher 是在创建 ZooKeeper 实例时指定的 watcher，exists方法还有一个重载方法，可以指定特定的watcher</td></tr><tr><td>Stat exists(String path,Watcher watcher)</td><td>重载方法，这里给某个目录节点设置特定的 watcher，Watcher 在ZooKeeper 是一个核心功能，Watcher 可以监控目录节点的数据变化以及子目录的变化，一旦这些状态发生变化，服务器就会通知所有设置在这个目录节点上的 Watcher，从而每个客户端都很快知道它所关注的目录节点的状态发生变化，而做出相应的反应</td></tr><tr><td>void delete(String path, int version</td><td>删除 path 对应的目录节点，version 为 -1 可以匹配任何版本，也就删除了这个目录节点所有数据</td></tr><tr><td>List getChildren(String path, boolean watch)</td><td>获取指定 path 下的所有子目录节点，同样 getChildren方法也有一个重载方法可以设置特定的 watcher 监控子节点的状态</td></tr><tr><td>Stat setData(String path, byte[] data, int version)</td><td>给 path 设置数据，可以指定这个数据的版本号，如果 version 为 -1 怎可以匹配任何版本</td></tr><tr><td>byte[] getData(String path, boolean watch,Stat stat)</td><td>获取这个 path 对应的目录节点存储的数据，数据的版本等信息可以通过 stat 来指定，同时还可以设置是否监控这个目录节点数据的状态</td></tr></tbody></table><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * zookeeper API测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkApiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建zookeeper连接</span></span><br><span class="line">        ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.142.128:2181"</span>, <span class="number">30000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"触发了"</span> + watchedEvent.getType() + <span class="string">"的事件"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//2. 创建父节点</span></span><br><span class="line">        String path = zooKeeper.create(<span class="string">"/test"</span>, <span class="string">"testValue"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        <span class="comment">//3. 创建子节点</span></span><br><span class="line">        String childrenPath = zooKeeper.create(<span class="string">"/test/children"</span>, <span class="string">"childrenValue"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        System.out.println(childrenPath);</span><br><span class="line">        <span class="comment">//4. 获取节点的值（父节点和子节点）</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = zooKeeper.getData(<span class="string">"/test"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; children = zooKeeper.getChildren(<span class="string">"/test"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">            System.out.println(child);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//5. 修改节点的值</span></span><br><span class="line">        Stat stat = zooKeeper.setData(<span class="string">"/test"</span>, <span class="string">"testUpdate"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        System.out.println(stat);</span><br><span class="line">        <span class="comment">//6. 判断某个节点是否存在</span></span><br><span class="line">        Stat exists = zooKeeper.exists(<span class="string">"/test/children"</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">        <span class="comment">//7. 删除节点</span></span><br><span class="line">        zooKeeper.delete(<span class="string">"/test/children"</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-zookeeper简介&quot;&gt;&lt;a href=&quot;#1-zookeeper简介&quot; class=&quot;headerlink&quot; title=&quot;1.    zookeeper简介&quot;&gt;&lt;/a&gt;1.    zookeeper简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-分布式概述&quot;&gt;&lt;a href=&quot;#1-1-分布式概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    分布式概述&quot;&gt;&lt;/a&gt;1.1    分布式概述&lt;/h2&gt;&lt;p&gt;早期我们使用单体架构，即所有服务部署在一台服务器的一个进程中，随着互联网的发展，逐步演进为分布式架构，多个服务分别部署在不同机器的不同进程中。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="zookeeper" scheme="https://wgy1993.gitee.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC(三)</title>
    <link href="https://wgy1993.gitee.io/archives/94a25162.html"/>
    <id>https://wgy1993.gitee.io/archives/94a25162.html</id>
    <published>2020-06-26T07:55:56.000Z</published>
    <updated>2020-07-01T07:59:46.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SSM-整合"><a href="#1-SSM-整合" class="headerlink" title="1.    SSM 整合"></a>1.    SSM 整合</h1><h2 id="1-1-搭建整合环境"><a href="#1-1-搭建整合环境" class="headerlink" title="1.1    搭建整合环境"></a>1.1    搭建整合环境</h2><h3 id="1-1-1-整合说明"><a href="#1-1-1-整合说明" class="headerlink" title="1.1.1    整合说明"></a>1.1.1    整合说明</h3><p>SSM整合可以使用多种方式，选择XML + 注解的方式</p><h3 id="1-1-2-整合的思路"><a href="#1-1-2-整合的思路" class="headerlink" title="1.1.2    整合的思路"></a>1.1.2    整合的思路</h3><ul><li>先搭建整合的环境 </li><li>先把Spring的配置搭建完成 </li><li>再使用Spring整合SpringMVC框架 </li><li>最后使用Spring整合MyBatis框架</li></ul><a id="more"></a><h3 id="1-1-3-创建数据库和表结构"><a href="#1-1-3-创建数据库和表结构" class="headerlink" title="1.1.3    创建数据库和表结构"></a>1.1.3    创建数据库和表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database ssm;</span><br><span class="line">use ssm;</span><br><span class="line">create table account(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    money double</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-1-4-创建maven的工程"><a href="#1-1-4-创建maven的工程" class="headerlink" title="1.1.4    创建maven的工程"></a>1.1.4    创建maven的工程</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-5-导入依赖"><a href="#1-1-5-导入依赖" class="headerlink" title="1.1.5    导入依赖"></a>1.1.5    导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-6-编写实体类"><a href="#1-1-6-编写实体类" class="headerlink" title="1.1.6    编写实体类"></a>1.1.6    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-7-编写dao接口"><a href="#1-1-7-编写dao接口" class="headerlink" title="1.1.7    编写dao接口"></a>1.1.7    编写dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存帐户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-8-编写service接口和实现类"><a href="#1-1-8-编写service接口和实现类" class="headerlink" title="1.1.8    编写service接口和实现类"></a>1.1.8    编写service接口和实现类</h3><p><strong>接口:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存帐户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有账户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存帐户..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-整合步骤"><a href="#1-2-整合步骤" class="headerlink" title="1.2    整合步骤"></a>1.2    整合步骤</h2><h3 id="1-2-1-保证-Spring-框架在-web-工程中独立运行"><a href="#1-2-1-保证-Spring-框架在-web-工程中独立运行" class="headerlink" title="1.2.1    保证 Spring 框架在 web 工程中独立运行"></a>1.2.1    保证 Spring 框架在 web 工程中独立运行</h3><h4 id="1-2-1-1-编写-spring-配置文件并导入约束"><a href="#1-2-1-1-编写-spring-配置文件并导入约束" class="headerlink" title="1.2.1.1    编写 spring 配置文件并导入约束"></a>1.2.1.1    编写 spring 配置文件并导入约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些注解不扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-1-2-测试-spring"><a href="#1-2-1-2-测试-spring" class="headerlink" title="1.2.1.2    测试 spring"></a>1.2.1.2    测试 spring</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试spring</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 获取对象</span></span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        as.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-保证-SpringMVC-在-web-工程中独立运行"><a href="#1-2-2-保证-SpringMVC-在-web-工程中独立运行" class="headerlink" title="1.2.2    保证 SpringMVC 在 web 工程中独立运行"></a>1.2.2    保证 SpringMVC 在 web 工程中独立运行</h3><h4 id="1-2-2-1-在-web-xml-中配置核心控制器"><a href="#1-2-2-1-在-web-xml-中配置核心控制器" class="headerlink" title="1.2.2.1    在 web.xml 中配置核心控制器"></a>1.2.2.1    在 web.xml 中配置核心控制器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载springmvc.xml配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动服务器，创建该servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--解决中文乱码的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-2-编写-SpringMVC-的配置文件"><a href="#1-2-2-2-编写-SpringMVC-的配置文件" class="headerlink" title="1.2.2.2    编写 SpringMVC 的配置文件"></a>1.2.2.2    编写 SpringMVC 的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描，只扫描Controller注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置的视图解析器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-3-编写-Controller-和-和-jsp-页面"><a href="#1-2-2-3-编写-Controller-和-和-jsp-页面" class="headerlink" title="1.2.2.3    编写 Controller 和 和 jsp 页面"></a>1.2.2.3    编写 Controller 和 和 jsp 页面</h4><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="account/findAll"&gt;查询所有&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;查询所有的帐户&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">    $&#123;account.name&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>controller:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-整合-Spring-和-SpringMVC"><a href="#1-2-3-整合-Spring-和-SpringMVC" class="headerlink" title="1.2.3    整合 Spring 和 SpringMVC"></a>1.2.3    整合 Spring 和 SpringMVC</h3><p>目的：在controller中能成功的调用service对象中的方法。</p><h4 id="1-2-3-1-配置监听器实现启动服务创建容器"><a href="#1-2-3-1-配置监听器实现启动服务创建容器" class="headerlink" title="1.2.3.1    配置监听器实现启动服务创建容器"></a>1.2.3.1    配置监听器实现启动服务创建容器</h4><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置配置文件的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-2-在controller中注入service对象"><a href="#1-2-3-2-在controller中注入service对象" class="headerlink" title="1.2.3.2    在controller中注入service对象"></a>1.2.3.2    在controller中注入service对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户..."</span>);</span><br><span class="line">        <span class="comment">// 调用service的方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-保证-MyBatis-框架在-web-工程中独立运行"><a href="#1-2-4-保证-MyBatis-框架在-web-工程中独立运行" class="headerlink" title="1.2.4    保证 MyBatis 框架在 web 工程中独立运行"></a>1.2.4    保证 MyBatis 框架在 web 工程中独立运行</h3><h4 id="1-2-4-1-编写SqlMapConfig-xml的配置文件"><a href="#1-2-4-1-编写SqlMapConfig-xml的配置文件" class="headerlink" title="1.2.4.1    编写SqlMapConfig.xml的配置文件"></a>1.2.4.1    编写SqlMapConfig.xml的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用的是注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该包下所有的dao接口都可以使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-2-AccountDao使用注解编写SQL语句"><a href="#1-2-4-2-AccountDao使用注解编写SQL语句" class="headerlink" title="1.2.4.2    AccountDao使用注解编写SQL语句"></a>1.2.4.2    AccountDao使用注解编写SQL语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存帐户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into account (name,money) values (#&#123;name&#125;,#&#123;money&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-3-测试MyBatis"><a href="#1-2-4-3-测试MyBatis" class="headerlink" title="1.2.4.3    测试MyBatis"></a>1.2.4.3    测试MyBatis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试mybatis</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 查询所有数据</span></span><br><span class="line">        List&lt;Account&gt; list = dao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : list) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"熊大"</span>);</span><br><span class="line">        account.setMoney(<span class="number">400</span>d);</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 保存</span></span><br><span class="line">        dao.saveAccount(account);</span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-整合-Spring-和-MyBatis"><a href="#1-2-5-整合-Spring-和-MyBatis" class="headerlink" title="1.2.5    整合 Spring 和 MyBatis"></a>1.2.5    整合 Spring 和 MyBatis</h3><p>目的：把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中，SqlMapConfig.xml文件删除。</p><h4 id="1-2-5-1-Spring-接管-MyBatis-的-Session-工厂"><a href="#1-2-5-1-Spring-接管-MyBatis-的-Session-工厂" class="headerlink" title="1.2.5.1    Spring 接管 MyBatis 的 Session 工厂"></a>1.2.5.1    Spring 接管 MyBatis 的 Session 工厂</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring整合MyBatis框架--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-2-配置自动扫描所有-Mapper-接口"><a href="#1-2-5-2-配置自动扫描所有-Mapper-接口" class="headerlink" title="1.2.5.2    配置自动扫描所有 Mapper  接口"></a>1.2.5.2    配置自动扫描所有 Mapper  接口</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置AccountDao接口所在包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-3-配置-spring-的事务"><a href="#1-2-5-3-配置-spring-的事务" class="headerlink" title="1.2.5.3    配置 spring 的事务"></a>1.2.5.3    配置 spring 的事务</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-4-在service中注入dao对象"><a href="#1-2-5-4-在service中注入dao对象" class="headerlink" title="1.2.5.4    在service中注入dao对象"></a>1.2.5.4    在service中注入dao对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有账户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存帐户..."</span>);</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-6-测试-SSM-整合结果"><a href="#1-2-6-测试-SSM-整合结果" class="headerlink" title="1.2.6    测试 SSM 整合结果"></a>1.2.6    测试 SSM 整合结果</h3><h4 id="1-2-6-1-编写测试-jsp"><a href="#1-2-6-1-编写测试-jsp" class="headerlink" title="1.2.6.1    编写测试 jsp"></a>1.2.6.1    编写测试 jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="account/findAll"&gt;测试查询&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;测试包&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"account/save"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-6-2-修改控制器中的方法"><a href="#1-2-6-2-修改控制器中的方法" class="headerlink" title="1.2.6.2    修改控制器中的方法"></a>1.2.6.2    修改控制器中的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户..."</span>);</span><br><span class="line">        <span class="comment">// 调用service的方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        accountService.saveAccount(account);</span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/account/findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SSM-整合&quot;&gt;&lt;a href=&quot;#1-SSM-整合&quot; class=&quot;headerlink&quot; title=&quot;1.    SSM 整合&quot;&gt;&lt;/a&gt;1.    SSM 整合&lt;/h1&gt;&lt;h2 id=&quot;1-1-搭建整合环境&quot;&gt;&lt;a href=&quot;#1-1-搭建整合环境&quot; class=&quot;headerlink&quot; title=&quot;1.1    搭建整合环境&quot;&gt;&lt;/a&gt;1.1    搭建整合环境&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-整合说明&quot;&gt;&lt;a href=&quot;#1-1-1-整合说明&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    整合说明&quot;&gt;&lt;/a&gt;1.1.1    整合说明&lt;/h3&gt;&lt;p&gt;SSM整合可以使用多种方式，选择XML + 注解的方式&lt;/p&gt;
&lt;h3 id=&quot;1-1-2-整合的思路&quot;&gt;&lt;a href=&quot;#1-1-2-整合的思路&quot; class=&quot;headerlink&quot; title=&quot;1.1.2    整合的思路&quot;&gt;&lt;/a&gt;1.1.2    整合的思路&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先搭建整合的环境 &lt;/li&gt;
&lt;li&gt;先把Spring的配置搭建完成 &lt;/li&gt;
&lt;li&gt;再使用Spring整合SpringMVC框架 &lt;/li&gt;
&lt;li&gt;最后使用Spring整合MyBatis框架&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="https://wgy1993.gitee.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC(二)</title>
    <link href="https://wgy1993.gitee.io/archives/ea517149.html"/>
    <id>https://wgy1993.gitee.io/archives/ea517149.html</id>
    <published>2020-06-25T15:07:54.000Z</published>
    <updated>2020-06-30T15:12:15.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-响应数据和结果视图"><a href="#1-响应数据和结果视图" class="headerlink" title="1.    响应数据和结果视图"></a>1.    响应数据和结果视图</h1><h2 id="1-1-返回值分类"><a href="#1-1-返回值分类" class="headerlink" title="1.1    返回值分类"></a>1.1    返回值分类</h2><h3 id="1-1-1-void"><a href="#1-1-1-void" class="headerlink" title="1.1.1    void"></a>1.1.1    void</h3><p>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。</p><p>默认会跳转到@RequestMapping(value=”/testVoid”) testVoid的页面。</p><p>可以使用请求转发或者重定向跳转到指定的页面</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是void</span></span><br><span class="line"><span class="comment"> * 请求转发一次请求，不用编写项目的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testVoid"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testVoid方法执行了..."</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编写请求转发的程序</span></span><br><span class="line">    <span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="comment">// response.sendRedirect(request.getContextPath()+"/index.jsp");</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置中文乱码</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    <span class="comment">// 直接会进行响应</span></span><br><span class="line">    response.getWriter().print(<span class="string">"你好"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-字符串"><a href="#1-1-2-字符串" class="headerlink" title="1.1.2    字符串"></a>1.1.2    字符串</h3><p>controller 方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回String</span></span><br><span class="line"><span class="comment"> * 指定逻辑视图名，经过视图解析器解析为 jsp 物理路径：/WEB-INF/pages/success.jsp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testString"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testString</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testString方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"美美"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="comment">// model对象</span></span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-ModelAndView"><a href="#1-1-3-ModelAndView" class="headerlink" title="1.1.3    ModelAndView"></a>1.1.3    ModelAndView</h3><p>ModelAndView 是 SpringMVC 为我们提供的一个对象，该对象也可以用作控制器方法的返回值。</p><p>该对象中有两个方法：</p><p><img src="https://ae01.alicdn.com/kf/H54303a332c464179a9d363016cf830bd1.jpg" alt="image-20200630204109739"></p><p><img src="https://ae01.alicdn.com/kf/H1c00593f469a433689c2890440d2c148o.jpg" alt="image-20200630204119952"></p><p><strong>示例代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回ModelAndView</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    System.out.println(<span class="string">"testModelAndView方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"小凤"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"456"</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="comment">// 把user对象存储到mv对象中，也会把user对象存入到request对象</span></span><br><span class="line">    mv.addObject(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="comment">// 跳转到哪个页面</span></span><br><span class="line">    mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;执行成功&lt;/h3&gt;</span><br><span class="line">    $&#123;user.username&#125;</span><br><span class="line">    $&#123;user.password&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-转发和重定向"><a href="#1-2-转发和重定向" class="headerlink" title="1.2    转发和重定向"></a>1.2    转发和重定向</h2><h3 id="1-2-1-forward-转发"><a href="#1-2-1-forward-转发" class="headerlink" title="1.2.1    forward 转发"></a>1.2.1    forward 转发</h3><p>controller 方法在提供了 String 类型的返回值之后，默认就是请求转发。我们也可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用关键字的方式进行转发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testForward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testForward方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 请求的转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果用了 formward ：则路径必须写成实际视图 url，不能写逻辑视图。</p><p>它相当于“request.getRequestDispatcher(“url”).forward(request,response)”。使用请求转发，既可以转发到 jsp，也可以转发到其他的控制器方法。</p><h3 id="1-2-2-Redirect-重定向"><a href="#1-2-2-Redirect-重定向" class="headerlink" title="1.2.2    Redirect 重定向"></a>1.2.2    Redirect 重定向</h3><p>contrller 方法提供了一个 String 类型返回值之后，它需要在返回值里使用redirect:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用关键字的方式进行转发或者重定向</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRedirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testRedirect方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它相当于“response.sendRedirect(url)”。需要注意的是，如果是重定向到 jsp 页面，则 jsp 页面不能写在 WEB-INF 目录中，否则无法找到。</p><h2 id="1-3-ResponseBody-响应-json-数据"><a href="#1-3-ResponseBody-响应-json-数据" class="headerlink" title="1.3    @ResponseBody 响应 json 数据"></a>1.3    @ResponseBody 响应 json 数据</h2><h3 id="1-3-1-lt-mvc-resources-gt"><a href="#1-3-1-lt-mvc-resources-gt" class="headerlink" title="1.3.1    &lt;mvc:resources/&gt;"></a>1.3.1    <code>&lt;mvc:resources/&gt;</code></h3><p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器，哪些静态资源不拦截</span></span><br><span class="line"><span class="comment">    mvc:resources标签配置不过滤</span></span><br><span class="line"><span class="comment">        location元素表示webapp目录下的包下的所有文件</span></span><br><span class="line"><span class="comment">        mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span> <span class="comment">&lt;!-- 样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span> <span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span> <span class="comment">&lt;!-- javascript --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-RequestBody获取请求体数据"><a href="#1-3-2-RequestBody获取请求体数据" class="headerlink" title="1.3.2    @RequestBody获取请求体数据"></a>1.3.2    @RequestBody获取请求体数据</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 页面加载，绑定单击事件</span></span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">"#btn"</span>).click(function () &#123;</span><br><span class="line">                <span class="comment">// alert("hello btn");</span></span><br><span class="line">                <span class="comment">// 发送ajax请求</span></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    <span class="comment">// 编写json格式，设置属性和值</span></span><br><span class="line">                    url: <span class="string">"user/testAjax"</span>,</span><br><span class="line">                    contentType: <span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">                    data: <span class="string">'&#123;"username":"hehe","password":"123","age":30&#125;'</span>,</span><br><span class="line">                    dataType: <span class="string">"json"</span>,</span><br><span class="line">                    type: <span class="string">"post"</span>,</span><br><span class="line">                    success: function (data) &#123;</span><br><span class="line">                        <span class="comment">// data服务器端响应的json的数据，进行解析</span></span><br><span class="line">                        alert(data);</span><br><span class="line">                        alert(data.username);</span><br><span class="line">                        alert(data.password);</span><br><span class="line">                        alert(data.age);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id="btn"&gt;发送ajax的请求&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取请求体的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAjax</span><span class="params">(@RequestBody String body)</span>) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testAjax方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 客户端发送ajax的请求，传的是json字符串</span></span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-json-字符串转换成JavaBean-对象"><a href="#1-3-3-json-字符串转换成JavaBean-对象" class="headerlink" title="1.3.3    json 字符串转换成JavaBean 对象"></a>1.3.3    json 字符串转换成JavaBean 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟异步请求响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAjax</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testAjax方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-ResponseBody响应JSON数据"><a href="#1-3-4-ResponseBody响应JSON数据" class="headerlink" title="1.3.4    @ResponseBody响应JSON数据"></a>1.3.4    @ResponseBody响应JSON数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟异步请求响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">testAjax</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testAjax方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 做响应，模拟查询数据库</span></span><br><span class="line">    user.setUsername(<span class="string">"haha"</span>);</span><br><span class="line">    user.setAge(<span class="number">40</span>);</span><br><span class="line">    <span class="comment">// 做响应</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-SpringMVC实现文件上传"><a href="#2-SpringMVC实现文件上传" class="headerlink" title="2.    SpringMVC实现文件上传"></a>2.    SpringMVC实现文件上传</h1><h2 id="2-1-文件上传的回顾"><a href="#2-1-文件上传的回顾" class="headerlink" title="2.1    文件上传的回顾"></a>2.1    文件上传的回顾</h2><h3 id="2-1-1-文件上传的必要前提"><a href="#2-1-1-文件上传的必要前提" class="headerlink" title="2.1.1    文件上传的必要前提"></a>2.1.1    文件上传的必要前提</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">form 表单的 enctype 取值必须是：multipart&#x2F;form-data</span><br><span class="line">                    (默认值是:application&#x2F;x-www-form-urlencoded)</span><br><span class="line">                    enctype:是表单请求正文的类型</span><br><span class="line"></span><br><span class="line">method 属性取值必须是 Post</span><br><span class="line"></span><br><span class="line">提供一个文件选择域&lt;input type&#x3D;”file” &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-文件上传的原理分析"><a href="#2-1-2-文件上传的原理分析" class="headerlink" title="2.1.2    文件上传的原理分析"></a>2.1.2    文件上传的原理分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">当 form 表单的 enctype 取值不是默认值后，request.getParameter()将失效。</span><br><span class="line"></span><br><span class="line">enctype&#x3D;”application&#x2F;x-www-form-urlencoded”时，form 表单的正文内容是：</span><br><span class="line">    key&#x3D;value&amp;key&#x3D;value&amp;key&#x3D;value</span><br><span class="line"></span><br><span class="line">当 form 表单的 enctype 取值为 Mutilpart&#x2F;form-data 时，请求正文内容就变成：</span><br><span class="line">每一部分都是 MIME 类型描述的正文</span><br><span class="line">-----------------------------7de1a433602ac                   分界符</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;userName&quot;              协议头</span><br><span class="line">aaa                                                          协议的正文</span><br><span class="line">-----------------------------7de1a433602ac</span><br><span class="line">Content-Disposition:  form-data;  name&#x3D;&quot;file&quot;;</span><br><span class="line">filename&#x3D;&quot;C:\Users\zhy\Desktop\fileupload_demofile\b.txt&quot;</span><br><span class="line">Content-Type: text&#x2F;plain                                     协议的类型（MIME  类型）</span><br><span class="line">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="line">-----------------------------7de1a433602ac--</span><br></pre></td></tr></table></figure><h3 id="2-1-3-文件上传"><a href="#2-1-3-文件上传" class="headerlink" title="2.1.3    文件上传"></a>2.1.3    文件上传</h3><h4 id="2-1-3-1-导jar包"><a href="#2-1-3-1-导jar包" class="headerlink" title="2.1.3.1    导jar包"></a>2.1.3.1    导jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-2-编写文件上传的JSP页面"><a href="#2-1-3-2-编写文件上传的JSP页面" class="headerlink" title="2.1.3.2    编写文件上传的JSP页面"></a>2.1.3.2    编写文件上传的JSP页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;传统文件上传&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/user/fileupload1"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-3-Controller控制器"><a href="#2-1-3-3-Controller控制器" class="headerlink" title="2.1.3.3    Controller控制器"></a>2.1.3.3    Controller控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload1</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"文件上传..."</span>);</span><br><span class="line">    <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">    <span class="comment">// 上传的位置</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">    <span class="comment">// 判断，该路径是否存在</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        <span class="comment">// 创建该文件夹</span></span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解析request对象，获取上传文件项</span></span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">// 解析request</span></span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (FileItem item : items) &#123;</span><br><span class="line">        <span class="comment">// 进行判断，当前item对象是否是上传文件项</span></span><br><span class="line">        <span class="keyword">if</span> (item.isFormField()) &#123;</span><br><span class="line">            <span class="comment">// 说明普通表单向</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说明上传文件项</span></span><br><span class="line">            <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">            String filename = item.getName();</span><br><span class="line">            <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">            String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">            filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">            <span class="comment">// 完成文件上传</span></span><br><span class="line">            item.write(<span class="keyword">new</span> File(path, filename));</span><br><span class="line">            <span class="comment">// 删除临时文件</span></span><br><span class="line">            item.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-SpringMVC文件上传"><a href="#2-2-SpringMVC文件上传" class="headerlink" title="2.2    SpringMVC文件上传"></a>2.2    SpringMVC文件上传</h2><p>SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的 name属性名称相同。</p><p><img src="https://ae01.alicdn.com/kf/H575bd77e47b7467fabc9a3a5425101e5x.jpg" alt="image-20200630214642322"></p><h3 id="2-2-1-导jar包"><a href="#2-2-1-导jar包" class="headerlink" title="2.2.1    导jar包"></a>2.2.1    导jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-编写文件上传的JSP页面"><a href="#2-2-2-编写文件上传的JSP页面" class="headerlink" title="2.2.2    编写文件上传的JSP页面"></a>2.2.2    编写文件上传的JSP页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;Springmvc文件上传&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/user/fileupload2"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Controller控制器"><a href="#2-2-3-Controller控制器" class="headerlink" title="2.2.3    Controller控制器"></a>2.2.3    Controller控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringMVC文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload2</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"springmvc文件上传..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">    <span class="comment">// 上传的位置</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">    <span class="comment">// 判断，该路径是否存在</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        <span class="comment">// 创建该文件夹</span></span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 说明上传文件项</span></span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">    filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">    <span class="comment">// 完成文件上传</span></span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> File(path, filename));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-配置文件解析器对象"><a href="#2-2-4-配置文件解析器对象" class="headerlink" title="2.2.4    配置文件解析器对象"></a>2.2.4    配置文件解析器对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件解析器对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id 的值是固定的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为 10MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-SpringMVC跨服务器方式文件上传"><a href="#2-3-SpringMVC跨服务器方式文件上传" class="headerlink" title="2.3    SpringMVC跨服务器方式文件上传"></a>2.3    SpringMVC跨服务器方式文件上传</h2><h3 id="2-3-1-分服务器的目的"><a href="#2-3-1-分服务器的目的" class="headerlink" title="2.3.1    分服务器的目的"></a>2.3.1    分服务器的目的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在实际开发中，我们会有很多处理不同功能的服务器。例如：</span><br><span class="line">    应用服务器：负责部署我们的应用</span><br><span class="line">    数据库服务器：运行我们的数据库</span><br><span class="line">    缓存和消息服务器：负责处理大并发访问的缓存和消息</span><br><span class="line">    文件服务器：负责存储用户上传文件的服务器。</span><br></pre></td></tr></table></figure><p>(注意：此处说的不是服务器集群）</p><p>分服务器处理的目的是让服务器各司其职，从而提高我们项目</p><p><img src="https://ae01.alicdn.com/kf/Ha79d7f774baa4393b8ebae1b7ee52c0dc.jpg" alt="image-20200630214734002"></p><h3 id="2-3-2-搭建图片服务器"><a href="#2-3-2-搭建图片服务器" class="headerlink" title="2.3.2    搭建图片服务器"></a>2.3.2    搭建图片服务器</h3><p>配置端口不同的Tomcat项目</p><h3 id="2-3-3-实现SpringMVC跨服务器方式文件上传"><a href="#2-3-3-实现SpringMVC跨服务器方式文件上传" class="headerlink" title="2.3.3    实现SpringMVC跨服务器方式文件上传"></a>2.3.3    实现SpringMVC跨服务器方式文件上传</h3><h4 id="2-3-3-1-导jar包"><a href="#2-3-3-1-导jar包" class="headerlink" title="2.3.3.1    导jar包"></a>2.3.3.1    导jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-编写文件上传的JSP页面"><a href="#2-3-3-2-编写文件上传的JSP页面" class="headerlink" title="2.3.3.2    编写文件上传的JSP页面"></a>2.3.3.2    编写文件上传的JSP页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;跨服务器文件上传&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/user/fileupload3"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-Controller控制器"><a href="#2-3-3-3-Controller控制器" class="headerlink" title="2.3.3.3    Controller控制器"></a>2.3.3.3    Controller控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨服务器文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"跨服务器文件上传..."</span>);</span><br><span class="line">    <span class="comment">// 定义上传文件服务器路径</span></span><br><span class="line">    String path = <span class="string">"http://localhost:9090/uploads/"</span>;</span><br><span class="line">    <span class="comment">// 说明上传文件项</span></span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">    filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">    <span class="comment">// 创建 sun 公司提供的 jersey 包中的 Client 对象</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">// 和图片服务器进行连接</span></span><br><span class="line">    WebResource webResource = client.resource(path + filename);</span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    webResource.put(upload.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-4-配置文件解析器对象"><a href="#2-3-3-4-配置文件解析器对象" class="headerlink" title="2.3.3.4    配置文件解析器对象"></a>2.3.3.4    配置文件解析器对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件解析器对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id 的值是固定的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为 10MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-SpringMVC的异常处理"><a href="#3-SpringMVC的异常处理" class="headerlink" title="3.    SpringMVC的异常处理"></a>3.    SpringMVC的异常处理</h1><h2 id="3-1-异常处理思路"><a href="#3-1-异常处理思路" class="headerlink" title="3.1    异常处理思路"></a>3.1    异常处理思路</h2><p>系统中异常包括两类：预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p><p>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 springmvc 前端控制器交由异常处理器进行异常处理，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H30792706fe964537bd578e8b108ede3bP.jpg" alt="image-20200630214914784"></p><h2 id="3-2-SpringMVC的异常处理"><a href="#3-2-SpringMVC的异常处理" class="headerlink" title="3.2    SpringMVC的异常处理"></a>3.2    SpringMVC的异常处理</h2><h3 id="3-2-1-自定义异常类"><a href="#3-2-1-自定义异常类" class="headerlink" title="3.2.1    自定义异常类"></a>3.2.1    自定义异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储提示信息的</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-控制器"><a href="#3-2-2-控制器" class="headerlink" title="3.2.2    控制器"></a>3.2.2    控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> <span class="keyword">throws</span> SysException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testException执行了..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟异常</span></span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 打印异常信息</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 抛出自定义异常信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SysException(<span class="string">"查询所有用户出现错误了..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-自定义异常处理器"><a href="#3-2-3-自定义异常处理器" class="headerlink" title="3.2.3    自定义异常处理器"></a>3.2.3    自定义异常处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常业务逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到异常对象</span></span><br><span class="line">        SysException e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SysException) &#123;</span><br><span class="line">            e = (SysException) ex;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = <span class="keyword">new</span> SysException(<span class="string">"系统正在维护...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"errorMsg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-配置异常处理器"><a href="#3-2-4-配置异常处理器" class="headerlink" title="3.2.4    配置异常处理器"></a>3.2.4    配置异常处理器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sysExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"com.wgy.exception.SysExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-SpringMVC框架中的拦截器"><a href="#4-SpringMVC框架中的拦截器" class="headerlink" title="4.    SpringMVC框架中的拦截器"></a>4.    SpringMVC框架中的拦截器</h1><h2 id="4-1-拦截器的概述"><a href="#4-1-拦截器的概述" class="headerlink" title="4.1    拦截器的概述"></a>4.1    拦截器的概述</h2><p>SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术。</p><p>可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行。</p><p>拦截器和过滤器的功能比较类似，有区别</p><ul><li>过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。</li><li>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。</li><li>过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。</li><li>拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的。</li></ul><p>拦截器也是AOP思想的一种实现方式。</p><p>想要自定义拦截器，需要实现HandlerInterceptor接口。</p><h2 id="4-2-自定义拦截器步骤"><a href="#4-2-自定义拦截器步骤" class="headerlink" title="4.2    自定义拦截器步骤"></a>4.2    自定义拦截器步骤</h2><h3 id="4-2-1-实现HandlerInterceptor接口"><a href="#4-2-1-实现HandlerInterceptor接口" class="headerlink" title="4.2.1    实现HandlerInterceptor接口"></a>4.2.1    实现HandlerInterceptor接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预处理，controller方法执行前</span></span><br><span class="line"><span class="comment">     * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法</span></span><br><span class="line"><span class="comment">     * return false不放行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle 拦截器拦截了"</span>);</span><br><span class="line">        <span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后处理方法，controller方法执行后，success.jsp执行之前</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle 方法执行了"</span>);</span><br><span class="line">        <span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * success.jsp页面执行后，该方法会执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion 方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-配置拦截器"><a href="#4-2-2-配置拦截器" class="headerlink" title="4.2.2    配置拦截器"></a>4.2.2    配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.interceptor.MyInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-运行结果"><a href="#4-2-3-运行结果" class="headerlink" title="4.2.3    运行结果"></a>4.2.3    运行结果</h3><p><img src="https://ae01.alicdn.com/kf/H08d98027d232401e991b4826cb535f559.jpg" alt="image-20200630224439010"></p><h2 id="4-3-拦截器的细节"><a href="#4-3-拦截器的细节" class="headerlink" title="4.3    拦截器的细节"></a>4.3    拦截器的细节</h2><h3 id="4-3-1-HandlerInterceptor接口中的方法"><a href="#4-3-1-HandlerInterceptor接口中的方法" class="headerlink" title="4.3.1    HandlerInterceptor接口中的方法"></a>4.3.1    HandlerInterceptor接口中的方法</h3><p>preHandle方法是controller方法执行前拦截的方法 </p><ul><li>可以使用request或者response跳转到指定的页面 </li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。 </li><li>return false不放行，不会执行controller中的方法。 </li></ul><p>postHandle是controller方法执行后执行的方法，在JSP视图执行前。 </p><ul><li>可以使用request或者response跳转到指定的页面 </li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。 </li></ul><p>postHandle方法是在JSP执行后执行 </p><ul><li>request或者response不能再跳转页面了</li></ul><h3 id="4-3-2-多个拦截器的执行顺序"><a href="#4-3-2-多个拦截器的执行顺序" class="headerlink" title="4.3.2    多个拦截器的执行顺序"></a>4.3.2    多个拦截器的执行顺序</h3><p>多个拦截器是按照配置的顺序决定的。先进后出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.interceptor.HandlerInterceptorDemo1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置第二个拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.interceptor.HandlerInterceptorDemo2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Haf3915745a6e4b1db2fc04bf5fa090ef8.jpg" alt="image-20200630225455582"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-响应数据和结果视图&quot;&gt;&lt;a href=&quot;#1-响应数据和结果视图&quot; class=&quot;headerlink&quot; title=&quot;1.    响应数据和结果视图&quot;&gt;&lt;/a&gt;1.    响应数据和结果视图&lt;/h1&gt;&lt;h2 id=&quot;1-1-返回值分类&quot;&gt;&lt;a href=&quot;#1-1-返回值分类&quot; class=&quot;headerlink&quot; title=&quot;1.1    返回值分类&quot;&gt;&lt;/a&gt;1.1    返回值分类&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-void&quot;&gt;&lt;a href=&quot;#1-1-1-void&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    void&quot;&gt;&lt;/a&gt;1.1.1    void&lt;/h3&gt;&lt;p&gt;如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。&lt;/p&gt;
&lt;p&gt;默认会跳转到@RequestMapping(value=”/testVoid”) testVoid的页面。&lt;/p&gt;
&lt;p&gt;可以使用请求转发或者重定向跳转到指定的页面&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="https://wgy1993.gitee.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC(一)</title>
    <link href="https://wgy1993.gitee.io/archives/4560ea2b.html"/>
    <id>https://wgy1993.gitee.io/archives/4560ea2b.html</id>
    <published>2020-06-24T11:53:20.000Z</published>
    <updated>2020-06-29T12:10:27.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringMVC-的基本概念"><a href="#1-SpringMVC-的基本概念" class="headerlink" title="1.    SpringMVC 的基本概念"></a>1.    SpringMVC 的基本概念</h1><h2 id="1-1-三层架构和MVC"><a href="#1-1-三层架构和MVC" class="headerlink" title="1.1    三层架构和MVC"></a>1.1    三层架构和MVC</h2><h3 id="1-1-1-三层架构"><a href="#1-1-1-三层架构" class="headerlink" title="1.1.1    三层架构"></a>1.1.1    三层架构</h3><p>开发服务器端程序，一般都基于两种形式，一种C/S(客户端/服务器)架构程序，一种B/S(浏览器/服务器)架构程序。</p><p>使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构 ：</p><ul><li>表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型 </li><li>业务层：处理公司具体的业务逻辑的</li><li>持久层：用来操作数据库的</li></ul><a id="more"></a><h3 id="1-1-2-MVC模型"><a href="#1-1-2-MVC模型" class="headerlink" title="1.1.2    MVC模型"></a>1.1.2    MVC模型</h3><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职：</p><ul><li><p>Model：数据模型，JavaBean的类，用来进行数据封装。 </p></li><li><p>View：指JSP、HTML用来展示数据给用户 </p></li><li><p>Controller：用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</p></li></ul><h2 id="1-2-SpringMVC-概述"><a href="#1-2-SpringMVC-概述" class="headerlink" title="1.2    SpringMVC 概述"></a>1.2    SpringMVC 概述</h2><h3 id="1-2-1-SpringMVC-是什么"><a href="#1-2-1-SpringMVC-是什么" class="headerlink" title="1.2.1    SpringMVC 是什么"></a>1.2.1    SpringMVC 是什么</h3><ol><li>是一种基于Java实现的MVC设计模型的请求驱动类型的轻量级WEB框架。</li><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建Web 应用程序的全功能 MVC 模块。</li><li>使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的 SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。</li></ol><h3 id="1-2-2-SpringMVC-在三层架构的位置"><a href="#1-2-2-SpringMVC-在三层架构的位置" class="headerlink" title="1.2.2    SpringMVC 在三层架构的位置"></a>1.2.2    SpringMVC 在三层架构的位置</h3><p><img src="https://ae01.alicdn.com/kf/Hd8e6bb6d90534a90bf4819efd6b36825v.jpg" alt="image-20200628204637421"></p><h3 id="1-2-3-SpringMVC-和-Struts2-的优略分析"><a href="#1-2-3-SpringMVC-和-Struts2-的优略分析" class="headerlink" title="1.2.3    SpringMVC 和 Struts2 的优略分析"></a>1.2.3    SpringMVC 和 Struts2 的优略分析</h3><p><strong>共同点：</strong></p><ul><li>它们都是表现层框架，都是基于 MVC 模型编写的。</li><li>它们的底层都离不开原始 ServletAPI。</li><li>它们处理请求的机制都是一个核心控制器。</li></ul><p><strong>区别：</strong></p><ul><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</li><li>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</li><li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li></ul><h1 id="2-SpringMVC-的入门"><a href="#2-SpringMVC-的入门" class="headerlink" title="2.    SpringMVC 的入门"></a>2.    SpringMVC 的入门</h1><h2 id="2-1-SpringMVC-的入门案例"><a href="#2-1-SpringMVC-的入门案例" class="headerlink" title="2.1    SpringMVC 的入门案例"></a>2.1    SpringMVC 的入门案例</h2><h3 id="2-1-1-创建WEB工程，引入jar包"><a href="#2-1-1-创建WEB工程，引入jar包" class="headerlink" title="2.1.1    创建WEB工程，引入jar包"></a>2.1.1    创建WEB工程，引入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC01_start<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 版本锁定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-配置核心的控制器"><a href="#2-1-2-配置核心的控制器" class="headerlink" title="2.1.2    配置核心的控制器"></a>2.1.2    配置核心的控制器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 spring mvc 的核心控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化参数，用于读取 SpringMVC 的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 servlet 的对象的创建时间点：应用加载时创建。取值只能是非 0 正整数，表示启动顺序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-编写springmvc-xml的配置文件"><a href="#2-1-3-编写springmvc-xml的配置文件" class="headerlink" title="2.1.3    编写springmvc.xml的配置文件"></a>2.1.3    编写springmvc.xml的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-编写index-jsp"><a href="#2-1-4-编写index-jsp" class="headerlink" title="2.1.4    编写index.jsp"></a>2.1.4    编写index.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;入门案例&lt;/h3&gt;</span><br><span class="line">    &lt;a href="$&#123; pageContext.request.contextPath &#125;/hello"&gt;入门案例&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-5-编写HelloController控制器类"><a href="#2-1-5-编写HelloController控制器类" class="headerlink" title="2.1.5    编写HelloController控制器类"></a>2.1.5    编写HelloController控制器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello StringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-6-编写success-jsp"><a href="#2-1-6-编写success-jsp" class="headerlink" title="2.1.6    编写success.jsp"></a>2.1.6    编写success.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门成功！！&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-7-测试"><a href="#2-1-7-测试" class="headerlink" title="2.1.7    测试"></a>2.1.7    测试</h3><p>启动Tomcat服务器，进行测试</p><h2 id="2-2-入门案例的执行过程及原理分析"><a href="#2-2-入门案例的执行过程及原理分析" class="headerlink" title="2.2    入门案例的执行过程及原理分析"></a>2.2    入门案例的执行过程及原理分析</h2><h3 id="2-2-1-案例的执行过程"><a href="#2-2-1-案例的执行过程" class="headerlink" title="2.2.1    案例的执行过程"></a>2.2.1    案例的执行过程</h3><p><img src="https://ae01.alicdn.com/kf/H34e475cb663f4258b3b51b5e53e10b79s.jpg" alt="image-20200628211231694"></p><ol><li>服务器启动，应用被加载。读取到 web.xml 中的配置创建 spring 容器并且初始化容器中的对象。</li><li>浏览器发送请求，被 DispatherServlet 捕获，该 Servlet 并不处理请求，而是把请求转发出去。转发的路径是根据请求 URL，匹配@RequestMapping 中的内容。</li><li>匹配到了后，执行对应方法。该方法有一个返回值。</li><li>根据方法的返回值，借助 InternalResourceViewResolver 找到对应的结果视图。</li><li>渲染结果视图，响应浏览器。</li></ol><h3 id="2-2-2-SpringMVC-的请求响应流程"><a href="#2-2-2-SpringMVC-的请求响应流程" class="headerlink" title="2.2.2    SpringMVC 的请求响应流程"></a>2.2.2    SpringMVC 的请求响应流程</h3><p><img src="https://ae01.alicdn.com/kf/Hafdf5445d4c74b1a8acf7cdd6fb49d87I.jpg" alt="image-20200628211851198"></p><h2 id="2-3-入门案例中涉及的组件"><a href="#2-3-入门案例中涉及的组件" class="headerlink" title="2.3    入门案例中涉及的组件"></a>2.3    入门案例中涉及的组件</h2><h3 id="2-3-1-前端控制器（DispatcherServlet）"><a href="#2-3-1-前端控制器（DispatcherServlet）" class="headerlink" title="2.3.1    前端控制器（DispatcherServlet）"></a>2.3.1    前端控制器（DispatcherServlet）</h3><p>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p><h3 id="2-3-2-处理器映射器（HandlerMapping）"><a href="#2-3-2-处理器映射器（HandlerMapping）" class="headerlink" title="2.3.2    处理器映射器（HandlerMapping）"></a>2.3.2    处理器映射器（HandlerMapping）</h3><p>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><h3 id="2-3-3-处理器（Handler）"><a href="#2-3-3-处理器（Handler）" class="headerlink" title="2.3.3    处理器（Handler）"></a>2.3.3    处理器（Handler）</h3><p>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p><h3 id="2-3-4-处理器适配器（HandlAdapter）"><a href="#2-3-4-处理器适配器（HandlAdapter）" class="headerlink" title="2.3.4    处理器适配器（HandlAdapter）"></a>2.3.4    处理器适配器（HandlAdapter）</h3><p>通过 HandlerAdapter 对处理器进行执行</p><h3 id="2-3-5-视图解析器（View-Resolver）"><a href="#2-3-5-视图解析器（View-Resolver）" class="headerlink" title="2.3.5    视图解析器（View Resolver）"></a>2.3.5    视图解析器（View Resolver）</h3><p>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><h3 id="2-3-6-视图（View）"><a href="#2-3-6-视图（View）" class="headerlink" title="2.3.6    视图（View）"></a>2.3.6    视图（View）</h3><p>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。</p><h3 id="2-3-7-lt-mvc-annotation-driven-gt-说明"><a href="#2-3-7-lt-mvc-annotation-driven-gt-说明" class="headerlink" title="2.3.7    &lt;mvc:annotation-driven&gt; 说明"></a>2.3.7    <code>&lt;mvc:annotation-driven&gt;</code> 说明</h3><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p><p>使 用 <code>&lt;mvc:annotation-driven&gt;</code> 自 动加载 RequestMappingHandlerMapping （处理映射器） 和RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用<code>&lt;mvc:annotation-driven&gt;</code>替代注解处理器和适配器的配置。</p><h2 id="2-4-RequestMapping-注解"><a href="#2-4-RequestMapping-注解" class="headerlink" title="2.4    RequestMapping 注解"></a>2.4    RequestMapping 注解</h2><h3 id="2-4-1-使用说明"><a href="#2-4-1-使用说明" class="headerlink" title="2.4.1    使用说明"></a>2.4.1    使用说明</h3><p>RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系 </p><p>RequestMapping注解可以作用在方法和类上 </p><ul><li>作用在类上：第一级的访问目录 </li><li>作用在方法上：第二级的访问目录</li></ul><p>RequestMapping的属性</p><ul><li><p>path：指定请求路径的url </p></li><li><p>value：value属性和path属性是一样的</p></li><li><p>mthod：指定该方法的请求方式</p></li><li><p>params：指定限制请求参数的条件。例如：</p><p>params = {“accountName”}，表示请求参数必须有 accountName</p><p>params = {“moeny!100”}，表示请求参数中 money 不能是 100。</p></li><li><p>headers：发送的请求中必须包含的请求头</p></li></ul><h3 id="2-4-2-使用示例"><a href="#2-4-2-使用示例" class="headerlink" title="2.4.2    使用示例"></a>2.4.2    使用示例</h3><h4 id="2-4-2-1-出现位置的示例"><a href="#2-4-2-1-出现位置的示例" class="headerlink" title="2.4.2.1    出现位置的示例"></a>2.4.2.1    出现位置的示例</h4><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"accountController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RequestMapping注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了账户。。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 第一种访问方式 --&gt;</span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/account/findAccount"&gt;查询账户&lt;/a&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 第二种访问方式 --&gt;</span><br><span class="line">    &lt;a href="account/findAccount"&gt;查询账户&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在 jsp 中第二种写法时，不要在访问 URL 前面加/ ，否则无法找到资源。</p><h4 id="2-4-2-2-method-属性的示例"><a href="#2-4-2-2-method-属性的示例" class="headerlink" title="2.4.2.2    method 属性的示例"></a>2.4.2.2    method 属性的示例</h4><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/saveAccount"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"保存了账户"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 请求方式的示例 --&gt;</span><br><span class="line">&lt;a href="account/saveAccount"&gt;保存账户，get 请求&lt;/a&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"account/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存账户， post 请求 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>当使用 get 请求时，提示错误信息是 405，信息是方法不支持 get 方式请求</p><p><img src="https://ae01.alicdn.com/kf/H2027d3864b65496ca564666008e52f797.jpg" alt="image-20200628221444670"></p><h4 id="2-4-2-3-params-属性的示例"><a href="#2-4-2-3-params-属性的示例" class="headerlink" title="2.4.2.3    params 属性的示例"></a>2.4.2.3    params 属性的示例</h4><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除账户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/removeAccount"</span>,params= &#123;<span class="string">"accountName"</span>,<span class="string">"money&gt;100"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"删除了账户"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 请求参数的示例 --&gt;</span><br><span class="line">&lt;a href="account/removeAccount?accountName=aaa&amp;money&gt;100"&gt;删除账户，金额 100&lt;/a&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="account/removeAccount?accountName=aaa&amp;money&gt;150"&gt;删除账户，金额 150&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>当我们点击第一个超链接时,可以访问成功。当我们点击第二个超链接时，无法访问。如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hbef2abd798a54b6aa747d77733a25358d.jpg" alt="image-20200628221839151"></p><h1 id="3-请求参数的绑定"><a href="#3-请求参数的绑定" class="headerlink" title="3.    请求参数的绑定"></a>3.    请求参数的绑定</h1><h2 id="3-1-绑定说明"><a href="#3-1-绑定说明" class="headerlink" title="3.1    绑定说明"></a>3.1    绑定说明</h2><h3 id="3-1-1-绑定的机制"><a href="#3-1-1-绑定的机制" class="headerlink" title="3.1.1    绑定的机制"></a>3.1.1    绑定的机制</h3><p>表单中请求参数都是基于 key=value 的。SpringMVC 绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法参数进行绑定的。</p><p><strong>JSP:</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="account/findAccount?accountId=10"&gt;查询账户&lt;/a&gt;</span><br><span class="line">请求参数是：</span><br><span class="line">accountId=<span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"查询了账户。。。。"</span>+accountId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-支持的数据类型"><a href="#3-1-2-支持的数据类型" class="headerlink" title="3.1.2    支持的数据类型"></a>3.1.2    支持的数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">基本类型参数 ：</span><br><span class="line">    包括基本类型和 String 类型</span><br><span class="line">POJO 类型参数 ：</span><br><span class="line">    包括实体类，以及关联的实体类</span><br><span class="line">数组和集合类型参数 ：</span><br><span class="line">    包括 List 结构和 Map 结构的集合（包括数组）</span><br><span class="line"></span><br><span class="line">SpringMVC 绑定请求参数是自动实现的，但是要想使用，必须遵循使用要求。</span><br></pre></td></tr></table></figure><h3 id="3-1-3-使用要求"><a href="#3-1-3-使用要求" class="headerlink" title="3.1.3    使用要求"></a>3.1.3    使用要求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">如果是基本类型或者 String  类型：</span><br><span class="line">    要求我们的参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)</span><br><span class="line">如果是 POJO 类型，或者它的关联对象 ：</span><br><span class="line">    要求表单中参数名称和 POJO 类的属性名称保持一致。并且控制器方法的参数类型是 POJO 类型。</span><br><span class="line">如果是集合类型, 有两种方式： </span><br><span class="line">    第一种：</span><br><span class="line">    要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。</span><br><span class="line">    给 List 集合中的元素赋值，使用下标。</span><br><span class="line">    给 Map 集合中的元素赋值，使用键值对。</span><br><span class="line">    第二种：</span><br><span class="line">    接收的请求参数是 json 格式数据。需要借助一个注解实现。</span><br><span class="line"></span><br><span class="line">它可以实现一些数据类型自动转换,如遇特殊类型转换要求，需要我们自己编写自定义类型转换器。</span><br></pre></td></tr></table></figure><h3 id="3-1-4-使用示例"><a href="#3-1-4-使用示例" class="headerlink" title="3.1.4    使用示例"></a>3.1.4    使用示例</h3><h4 id="3-1-4-1-基本类型和-String-类型作为参数"><a href="#3-1-4-1-基本类型和-String-类型作为参数" class="headerlink" title="3.1.4.1    基本类型和 String 类型作为参数"></a>3.1.4.1    基本类型和 String 类型作为参数</h4><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 基本类型示例 --&gt;</span><br><span class="line">&lt;a href="account/findAccount?accountId=10&amp;accountName=zhangsan"&gt;查询账户&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">(Integer accountId,String accountName)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"查询了账户。。。。"</span>+accountId+<span class="string">","</span>+accountName);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="https://ae01.alicdn.com/kf/H86196c6e426244f09dbc54a07637c9cc7.jpg" alt="image-20200628223719703"></p><h4 id="3-1-4-2-POJO-类型作为参数"><a href="#3-1-4-2-POJO-类型作为参数" class="headerlink" title="3.1.4.2    POJO 类型作为参数"></a>3.1.4.2    POJO 类型作为参数</h4><p><strong>实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- pojo 类型演示 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"account/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    账户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户省份：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.provinceName"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户城市：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.cityName"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"保存了账户。。。。"</span>+account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hea3d14d2cfff4843923dae984454fad16.jpg" alt="image-20200628224103232"></p><h4 id="3-1-4-3-POJO-类中包含集合类型参数"><a href="#3-1-4-3-POJO-类中包含集合类型参数" class="headerlink" title="3.1.4.3    POJO 类中包含集合类型参数"></a>3.1.4.3    POJO 类中包含集合类型参数</h4><p><strong>实体类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Account&gt; accountMap;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- POJO 类包含集合类型演示 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"account/updateAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">1</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">1</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">2</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">2</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">3</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">3</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">4</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">4</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateAccount</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"更新了账户。。。。"</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Ha91a093b693841aabd405a9bddf06883F.jpg" alt="image-20200628224630666"></p><h4 id="3-1-4-4-请求参数乱码问题"><a href="#3-1-4-4-请求参数乱码问题" class="headerlink" title="3.1.4.4    请求参数乱码问题"></a>3.1.4.4    请求参数乱码问题</h4><p><strong>post 请求方式：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在 web.xml 中配置一个过滤器</span><br><span class="line"><span class="comment">&lt;!-- 配置 springMVC 编码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置过滤器中的属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>get 请求方式：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tomacat对GET和POST请求处理方式是不同的，GET请求的编码问题，要改tomcat的server.xml配置文件，如下：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">edirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br><span class="line">改为：</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">如果遇到 ajax 请求仍然乱码，请把：useBodyEncodingForURI="true"改为 URIEncoding="UTF-8"即可。</span><br></pre></td></tr></table></figure><h2 id="3-2-特殊情况"><a href="#3-2-特殊情况" class="headerlink" title="3.2    特殊情况"></a>3.2    特殊情况</h2><h3 id="3-2-1-自定义类型转换器"><a href="#3-2-1-自定义类型转换器" class="headerlink" title="3.2.1    自定义类型转换器"></a>3.2.1    自定义类型转换器</h3><p>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明 Spring框架内部会默认进行数据类型转换。</p><p>如果想自定义数据类型转换，可以实现Converter的接口</p><h4 id="3-2-1-1-自定义类型转换器"><a href="#3-2-1-1-自定义类型转换器" class="headerlink" title="3.2.1.1    自定义类型转换器"></a>3.2.1.1    自定义类型转换器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把字符串转换日期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String source    传入进来字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请您传入数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把字符串转换日期</span></span><br><span class="line">            <span class="keyword">return</span> df.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据类型转换出现错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-1-2-注册自定义类型转换器"><a href="#3-2-1-2-注册自定义类型转换器" class="headerlink" title="3.2.1.2    注册自定义类型转换器"></a>3.2.1.2    注册自定义类型转换器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置类型转换器工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给工厂注入一个新的类型转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置自定义类型转换器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.utils.StringToDateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用自定义类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-使用-ServletAPI-对象作为方法参数"><a href="#3-2-2-使用-ServletAPI-对象作为方法参数" class="headerlink" title="3.2.2    使用 ServletAPI 对象作为方法参数"></a>3.2.2    使用 ServletAPI 对象作为方法参数</h3><p>SpringMVC 还支持使用原始 ServletAPI 对象作为控制器方法的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原生的API</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testServlet"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line">    System.out.println(request);</span><br><span class="line"></span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    System.out.println(session);</span><br><span class="line"></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(response);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-常用注解"><a href="#4-常用注解" class="headerlink" title="4.    常用注解"></a>4.    常用注解</h1><h2 id="4-1-RequestParam"><a href="#4-1-RequestParam" class="headerlink" title="4.1    RequestParam"></a>4.1    RequestParam</h2><h3 id="4-1-1-使用说明"><a href="#4-1-1-使用说明" class="headerlink" title="4.1.1    使用说明"></a>4.1.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    把请求中指定名称的参数给控制器中的形参赋值。</span><br><span class="line">属性：</span><br><span class="line">    value：请求参数中的名称。</span><br><span class="line">    required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。</span><br></pre></td></tr></table></figure><h3 id="4-1-2-使用示例"><a href="#4-1-2-使用示例" class="headerlink" title="4.1.2    使用示例"></a>4.1.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- requestParams 注解的使用 --&gt;</span><br><span class="line">&lt;a href="springmvc/useRequestParam?name=test"&gt;requestParam 注解&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * requestParam 注解的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestParam</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String username,@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"age"</span>,required=<span class="keyword">false</span>)</span>Integer age)</span>&#123;</span><br><span class="line">    System.out.println(username+<span class="string">","</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hcfbc98e7acc141e8831a7bf711ece3f5d.jpg" alt="image-20200629164033833"></p><h2 id="4-2-RequestBody"><a href="#4-2-RequestBody" class="headerlink" title="4.2    RequestBody"></a>4.2    RequestBody</h2><h3 id="4-2-1-使用说明"><a href="#4-2-1-使用说明" class="headerlink" title="4.2.1    使用说明"></a>4.2.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于获取请求体内容。直接使用得到是 key&#x3D;value&amp;key&#x3D;value...结构的数据。</span><br><span class="line">    get 请求方式不适用。</span><br><span class="line">属性：</span><br><span class="line">    required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。</span><br></pre></td></tr></table></figure><h3 id="4-2-2-使用示例"><a href="#4-2-2-使用示例" class="headerlink" title="4.2.2    使用示例"></a>4.2.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- request body 注解 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/useRequestBody"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="springmvc/useRequestBody?body=test"&gt;requestBody 注解 get 请求&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestBody 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestBody</span><span class="params">(@RequestBody(required=<span class="keyword">false</span>)</span> String body)</span>&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>post 请求运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hf5a845e9fe5547839a2939089b2d338d9.jpg" alt="image-20200629164426200"></p><p><strong>get 请求运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H37db80e01d6a45058b15ae4dd7d9cd170.jpg" alt="image-20200629164443166"></p><h2 id="4-3-PathVaribale"><a href="#4-3-PathVaribale" class="headerlink" title="4.3    PathVaribale"></a>4.3    PathVaribale</h2><h3 id="4-3-1-使用说明"><a href="#4-3-1-使用说明" class="headerlink" title="4.3.1    使用说明"></a>4.3.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于绑定 url 中的占位符。例如：请求 url 中 &#x2F;delete&#x2F;&#123;id&#125;，这个&#123;id&#125;就是 url 占位符。</span><br><span class="line">    url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。</span><br><span class="line">属性：</span><br><span class="line">    value：用于指定 url 中占位符名称。</span><br><span class="line">    required：是否必须提供占位符。</span><br></pre></td></tr></table></figure><h3 id="4-3-2-使用示例"><a href="#4-3-2-使用示例" class="headerlink" title="4.3.2    使用示例"></a>4.3.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- PathVariable 注解 --&gt;</span><br><span class="line">&lt;a href="springmvc/usePathVariable/100"&gt;pathVariable 注解&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PathVariable 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/usePathVariable/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">usePathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H916d7e908d3c4b83a931a59e6c3886e9E.jpg" alt="image-20200629164932588"></p><h3 id="4-3-3-REST-风格-URL"><a href="#4-3-3-REST-风格-URL" class="headerlink" title="4.3.3    REST 风格 URL"></a>4.3.3    REST 风格 URL</h3><h4 id="4-3-3-1-什么是-rest"><a href="#4-3-3-1-什么是-rest" class="headerlink" title="4.3.3.1    什么是 rest"></a>4.3.3.1    什么是 rest</h4><p>REST（英文：Representational State Transfer，简称 REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种 Web 服务交互方案中，REST 相比于 SOAP（Simple Object Access protocol，简单对象访问协议）以及 XML-RPC 更加简单明了，无论是对 URL 的处理还是对 Payload 的编码，REST 都倾向于用更加简单轻量的方法设计和实现。值得注意的是 REST 并没有一个明确的标准，而更像是一种设计的风格。</p><p>它本身并没有什么实用性，其核心价值在于如何设计出符合 REST 风格的网络接口。</p><h4 id="4-3-3-2-restful-的优点"><a href="#4-3-3-2-restful-的优点" class="headerlink" title="4.3.3.2    restful 的优点"></a>4.3.3.2    restful 的优点</h4><p>它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>请求路径一样，可以根据不同的请求方式去执行后台的不同方法</p><h4 id="4-3-3-3-restful-的特性"><a href="#4-3-3-3-restful-的特性" class="headerlink" title="4.3.3.3    restful 的特性"></a>4.3.3.3    restful 的特性</h4><ul><li><p>资源（ Resources）：网络上的一个实体，或者说是网络上的一个具体信息。</p><p>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个 URI （统一资源定位符）指向它，每种资源对应一个特定的 URI 。要获取这个资源，访问它的 URI 就可以，因此 URI 即为每一个资源的独一无二的识别符。</p></li><li><p>表现层（ Representation）：把资源具体呈现出来的形式，叫做它的表现层 （ Representation）。</p><p>比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</p></li><li><p>状态转化（ State Transfer）：每发出一个请求，就代表了客户端和服务器的一次交互过程。</p><p>HTTP 协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生 “状态转化 ”（ State Tran sfer）。而这种转化是建立在表现层之上的，所以就是  “表现层状态转化 ”。具体说，就是  HTTP 协议里面，四个表示操作方式的动词： GET、 POST、 PUT、DELETE。它们分别对应四种基本操作： GET 用来获取资源， POST 用来新建资源， PUT 用来更新资源， DELETE 用来删除资源。</p></li></ul><h4 id="4-3-3-4-restful-的示例"><a href="#4-3-3-4-restful-的示例" class="headerlink" title="4.3.3.4    restful 的示例"></a>4.3.3.4    restful 的示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;account&#x2F;1 HTTP  GET ：   得到 id &#x3D; 1 的 account</span><br><span class="line">&#x2F;account&#x2F;1 HTTP  DELETE： 删除 id &#x3D; 1 的 account</span><br><span class="line">&#x2F;account&#x2F;1 HTTP  PUT：    更新 id &#x3D; 1 的 account</span><br><span class="line">&#x2F;account   HTTP  POST：   新增 account</span><br></pre></td></tr></table></figure><h2 id="4-4-RequestHeader"><a href="#4-4-RequestHeader" class="headerlink" title="4.4    RequestHeader"></a>4.4    RequestHeader</h2><h3 id="4-4-1-使用说明"><a href="#4-4-1-使用说明" class="headerlink" title="4.4.1    使用说明"></a>4.4.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于获取请求消息头。</span><br><span class="line">属性：</span><br><span class="line">    value：提供消息头名称</span><br><span class="line">    required：是否必须有此消息头</span><br><span class="line">注：</span><br><span class="line">    在实际开发中一般不怎么用。</span><br></pre></td></tr></table></figure><h3 id="4-4-2-使用示例"><a href="#4-4-2-使用示例" class="headerlink" title="4.4.2    使用示例"></a>4.4.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- RequestHeader 注解 --&gt;</span><br><span class="line">&lt;a href="springmvc/useRequestHeader"&gt;获取请求消息头&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestHeader 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestHeader</span><span class="params">(@RequestHeader(value=<span class="string">"Accept-Language"</span>,required=<span class="keyword">false</span>)</span>String requestHeader)</span>&#123;</span><br><span class="line">    System.out.println(requestHeader);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H0054c1837dad443aaa5658e2a79ce671c.jpg" alt="image-20200629170448740"></p><h2 id="4-5-CookieValue"><a href="#4-5-CookieValue" class="headerlink" title="4.5    CookieValue"></a>4.5    CookieValue</h2><h3 id="4-5-1-使用说明"><a href="#4-5-1-使用说明" class="headerlink" title="4.5.1    使用说明"></a>4.5.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于把指定 cookie 名称的值传入控制器方法参数。</span><br><span class="line">属性：</span><br><span class="line">    value：指定 cookie 的名称。</span><br><span class="line">    required：是否必须有此 cookie。</span><br></pre></td></tr></table></figure><h3 id="4-5-2-使用示例"><a href="#4-5-2-使用示例" class="headerlink" title="4.5.2    使用示例"></a>4.5.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- CookieValue 注解 --&gt;</span><br><span class="line">&lt;a href="springmvc/useCookieValue"&gt;绑定 cookie 的值&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cookie 注解注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useCookieValue</span><span class="params">(@CookieValue(value=<span class="string">"JSESSIONID"</span>,required=<span class="keyword">false</span>)</span> String cookieValue)</span>&#123;</span><br><span class="line">    System.out.println(cookieValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hc13779ebafcd4a9db18f59124ca603152.jpg" alt="image-20200629170910637"></p><h2 id="4-6-ModelAttribute"><a href="#4-6-ModelAttribute" class="headerlink" title="4.6    ModelAttribute"></a>4.6    ModelAttribute</h2><h3 id="4-6-1-使用说明"><a href="#4-6-1-使用说明" class="headerlink" title="4.6.1    使用说明"></a>4.6.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    该注解是 SpringMVC4.3 版本以后新加入的。它可以用于修饰方法和参数。</span><br><span class="line">    出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。</span><br><span class="line">    出现在参数上，获取指定的数据给参数赋值。</span><br><span class="line">属性：</span><br><span class="line">    value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。</span><br><span class="line">应用场景：</span><br><span class="line">    当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</span><br><span class="line">    例如：</span><br><span class="line">    我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容置为 null，此时就可以使用此注解解决问题。</span><br></pre></td></tr></table></figure><h3 id="4-6-2-使用示例"><a href="#4-6-2-使用示例" class="headerlink" title="4.6.2    使用示例"></a>4.6.2    使用示例</h3><h4 id="4-6-2-1-基于-POJO-属性的基本使用"><a href="#4-6-2-1-基于-POJO-属性的基本使用" class="headerlink" title="4.6.2.1    基于 POJO 属性的基本使用"></a>4.6.2.1    基于 POJO 属性的基本使用</h4><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ModelAttribute 注解的基本使用 --&gt;</span><br><span class="line">&lt;a href="springmvc/testModelAttribute?username=test"&gt;测试 modelattribute&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被 ModelAttribute 修饰的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+user.getUsername());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收请求的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了控制器的方法"</span>+user.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H307fbe1d4de144bf973e27f04f81706fI.jpg" alt="image-20200629171419981"></p><h4 id="4-6-2-2-基于-Map-的应用场景1"><a href="#4-6-2-2-基于-Map-的应用场景1" class="headerlink" title="4.6.2.2    基于 Map  的应用场景1"></a>4.6.2.2    基于 Map  的应用场景1</h4><p>ModelAttribute 修饰方法带返回值</p><p>修改用户信息，要求用户的密码不能修改</p><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改用户信息 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/updateUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询数据库中用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showModel</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟去数据库查询</span></span><br><span class="line">    User abc = findUserByName(username);</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+abc);</span><br><span class="line">    <span class="keyword">return</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟修改用户方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"控制器中处理请求的方法：修改用户："</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟去数据库查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hf2e05516864f43369d864a0cc9dc685fQ.jpg" alt="image-20200629171811865"></p><h4 id="4-6-2-3-基于-Map-的应用场景2"><a href="#4-6-2-3-基于-Map-的应用场景2" class="headerlink" title="4.6.2.3    基于 Map 的应用场景2"></a>4.6.2.3    基于 Map 的应用场景2</h4><p>ModelAttribute 修饰方法不带返回值</p><p>修改用户信息，要求用户的密码不能修改</p><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改用户信息 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/updateUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询数据库中用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(String username,Map&lt;String,User&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟去数据库查询</span></span><br><span class="line">    User user = findUserByName(username);</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+user);</span><br><span class="line">    map.put(<span class="string">"abc"</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟修改用户方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(@ModelAttribute(<span class="string">"abc"</span>)</span>User user) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"控制器中处理请求的方法：修改用户："</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟去数据库查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H17a7d0d1e8d6488ca9ed778bfad0f489E.jpg" alt="image-20200629172223975"></p><h2 id="4-7-SessionAttribute"><a href="#4-7-SessionAttribute" class="headerlink" title="4.7    SessionAttribute"></a>4.7    SessionAttribute</h2><h3 id="4-7-1-使用说明"><a href="#4-7-1-使用说明" class="headerlink" title="4.7.1    使用说明"></a>4.7.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于多次执行控制器方法间的参数共享。</span><br><span class="line">属性：</span><br><span class="line">    value：用于指定存入的属性名称</span><br><span class="line">    type：用于指定存入的数据类型。</span><br></pre></td></tr></table></figure><h3 id="4-7-2-使用示例"><a href="#4-7-2-使用示例" class="headerlink" title="4.7.2    使用示例"></a>4.7.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SessionAttribute 注解的使用 --&gt;</span><br><span class="line">&lt;a href="springmvc/testPut"&gt;存入 SessionAttribute&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="springmvc/testGet"&gt;取出 SessionAttribute&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="springmvc/testClean"&gt;清除 SessionAttribute&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"sessionAttributeController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/springmvc"</span>)</span><br><span class="line"><span class="comment">// 把数据存入到session域对象中</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value =&#123;<span class="string">"username"</span>,<span class="string">"password"</span>&#125;,types=&#123;Integer<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SessionAttributeController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把数据存入 SessionAttribute</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * Model 是 spring 提供的一个接口，该接口有一个实现类 ExtendedModelMap</span></span><br><span class="line"><span class="comment">     * 该类继承了 ModelMap，而 ModelMap 就是 LinkedHashMap 子类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testPut"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPut</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"存入了数据"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>, <span class="string">"泰斯特"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"age"</span>, <span class="number">31</span>);</span><br><span class="line">        <span class="comment">//跳转之前将数据保存到 username、password 和 age 中，因为注解@SessionAttribute 中有        这几个参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testGet"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"获取了数据:"</span>);</span><br><span class="line">        System.out.println(model.get(<span class="string">"username"</span>)+<span class="string">";"</span>+model.get(<span class="string">"password"</span>)+<span class="string">";"</span>+model.get(<span class="string">"age"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testClean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">complete</span><span class="params">(SessionStatus sessionStatus)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"清除了数据"</span>);</span><br><span class="line">        sessionStatus.setComplete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H7e2c66ff04eb464d8883a9cceb7250618.jpg" alt="image-20200629172909646"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringMVC-的基本概念&quot;&gt;&lt;a href=&quot;#1-SpringMVC-的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringMVC 的基本概念&quot;&gt;&lt;/a&gt;1.    SpringMVC 的基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-三层架构和MVC&quot;&gt;&lt;a href=&quot;#1-1-三层架构和MVC&quot; class=&quot;headerlink&quot; title=&quot;1.1    三层架构和MVC&quot;&gt;&lt;/a&gt;1.1    三层架构和MVC&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-三层架构&quot;&gt;&lt;a href=&quot;#1-1-1-三层架构&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    三层架构&quot;&gt;&lt;/a&gt;1.1.1    三层架构&lt;/h3&gt;&lt;p&gt;开发服务器端程序，一般都基于两种形式，一种C/S(客户端/服务器)架构程序，一种B/S(浏览器/服务器)架构程序。&lt;/p&gt;
&lt;p&gt;使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型 &lt;/li&gt;
&lt;li&gt;业务层：处理公司具体的业务逻辑的&lt;/li&gt;
&lt;li&gt;持久层：用来操作数据库的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="https://wgy1993.gitee.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(四)</title>
    <link href="https://wgy1993.gitee.io/archives/bf2fe2d.html"/>
    <id>https://wgy1993.gitee.io/archives/bf2fe2d.html</id>
    <published>2020-06-23T14:38:54.000Z</published>
    <updated>2020-06-27T14:44:28.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis-延迟加载策略"><a href="#1-Mybatis-延迟加载策略" class="headerlink" title="1.    Mybatis 延迟加载策略"></a>1.    Mybatis 延迟加载策略</h1><h2 id="1-1-何为延迟加载"><a href="#1-1-何为延迟加载" class="headerlink" title="1.1    何为延迟加载"></a>1.1    何为延迟加载</h2><p>就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。</p><ul><li>好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</li><li>坏处 ：因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。</li></ul><a id="more"></a><h2 id="1-2-实现需求"><a href="#1-2-实现需求" class="headerlink" title="1.2    实现需求"></a>1.2    实现需求</h2><p>查询账户(Account)信息并且关联查询用户(User)信息。如果先查询账户(Account)信息即可满足要求，当我们需要查询用户(User)信息时再查询用户(User)信息。把对用户(User)信息的按需去查询就是延迟加载。</p><h2 id="1-3-使用-assocation-实现延迟加载"><a href="#1-3-使用-assocation-实现延迟加载" class="headerlink" title="1.3    使用 assocation 实现延迟加载"></a>1.3    使用 assocation 实现延迟加载</h2><h3 id="1-3-1-在-Account-实体类中加入-user-属性"><a href="#1-3-1-在-Account-实体类中加入-user-属性" class="headerlink" title="1.3.1    在 Account 实体类中加入 user 属性"></a>1.3.1    在 Account 实体类中加入 user 属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-账户的持久层-DAO-接口"><a href="#1-3-2-账户的持久层-DAO-接口" class="headerlink" title="1.3.2    账户的持久层 DAO 接口"></a>1.3.2    账户的持久层 DAO 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，同时还要获取到当前账户的所属用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-账户的持久层映射文件"><a href="#1-3-3-账户的持久层映射文件" class="headerlink" title="1.3.3    账户的持久层映射文件"></a>1.3.3    账户的持久层映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IAccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容</span></span><br><span class="line"><span class="comment">            select属性指定的内容：查询用户的唯一标识：</span></span><br><span class="line"><span class="comment">            column属性指定的内容：用户根据id查询时，所需要的参数的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span> <span class="attr">select</span>=<span class="string">"com.wgy.dao.IUserDao.findById"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-用户的持久层接口和映射文件"><a href="#1-3-4-用户的持久层接口和映射文件" class="headerlink" title="1.3.4    用户的持久层接口和映射文件"></a>1.3.4    用户的持久层接口和映射文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-5-开启-Mybatis-的延迟加载策略"><a href="#1-3-5-开启-Mybatis-的延迟加载策略" class="headerlink" title="1.3.5    开启 Mybatis 的延迟加载策略"></a>1.3.5    开启 Mybatis 的延迟加载策略</h3><p>进入 Mybaits 的官方文档，找到 settings 的说明信息：</p><p><img src="https://ae01.alicdn.com/kf/Hd79e37b130ea4a41b26b39aad1b3957eN.jpg" alt="image-20200627204827381"></p><p>我们需要在 Mybatis 的配置文件 SqlMapConfig.xml 文件中添加延迟加载的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启Mybatis支持延迟加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-6-编写测试只查账户信息不查用户信息"><a href="#1-3-6-编写测试只查账户信息不查用户信息" class="headerlink" title="1.3.6    编写测试只查账户信息不查用户信息"></a>1.3.6    编写测试只查账户信息不查用户信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行操作</span></span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://ae01.alicdn.com/kf/Hcf303a9569694f3f80c80e12224843dfU.jpg" alt="image-20200627205230689"></p><p>我们发现，因为本次只是将Account对象查询出来放入List集合中，并没有涉及到User对象，所以就没有发出 SQL 语句查询账户所关联的 User 对象的查询。</p><h2 id="1-4-使用-Collection-实现延迟加载"><a href="#1-4-使用-Collection-实现延迟加载" class="headerlink" title="1.4    使用 Collection 实现延迟加载"></a>1.4    使用 Collection 实现延迟加载</h2><h3 id="1-4-1-在-User-实体类中加入List-lt-Account-gt-属性"><a href="#1-4-1-在-User-实体类中加入List-lt-Account-gt-属性" class="headerlink" title="1.4.1    在 User 实体类中加入List&lt;Account&gt;属性"></a>1.4.1    在 User 实体类中加入<code>List&lt;Account&gt;</code>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-用户的持久层-DAO-接口"><a href="#1-4-2-用户的持久层-DAO-接口" class="headerlink" title="1.4.2    用户的持久层 DAO 接口"></a>1.4.2    用户的持久层 DAO 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-用户的持久层映射文件"><a href="#1-4-3-用户的持久层映射文件" class="headerlink" title="1.4.3    用户的持久层映射文件"></a>1.4.3    用户的持久层映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span> <span class="attr">select</span>=<span class="string">"com.wgy.dao.IAccountDao.findAccountByUid"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-4-账户的持久层接口和映射文件"><a href="#1-4-4-账户的持久层接口和映射文件" class="headerlink" title="1.4.4    账户的持久层接口和映射文件"></a>1.4.4    账户的持久层接口和映射文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询账户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户id查询账户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAccountByUid"</span> <span class="attr">resultType</span>=<span class="string">"account"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from account</span><br><span class="line">    where uid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-5-编写测试只查用户信息不查账户信息"><a href="#1-4-5-编写测试只查用户信息不查账户信息" class="headerlink" title="1.4.5    编写测试只查用户信息不查账户信息"></a>1.4.5    编写测试只查用户信息不查账户信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行操作</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://ae01.alicdn.com/kf/H13bff4d3ae514ae18b85bb57358540ebZ.jpg" alt="image-20200627210657513"></p><p>我们发现并没有加载 Account 账户信息。</p><h1 id="2-Mybatis-缓存"><a href="#2-Mybatis-缓存" class="headerlink" title="2.    Mybatis 缓存"></a>2.    Mybatis 缓存</h1><p>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提高性能。</p><p>Mybatis 中缓存分为一级缓存，二级缓存。</p><p><img src="https://ae01.alicdn.com/kf/H4735cf3b628d4fa6b2fb19932579250bK.jpg" alt="image-20200627210818514"></p><h2 id="2-1-Mybatis-一级缓存"><a href="#2-1-Mybatis-一级缓存" class="headerlink" title="2.1    Mybatis 一级缓存"></a>2.1    Mybatis 一级缓存</h2><h3 id="2-1-1-证明一级缓存的存在"><a href="#2-1-1-证明一级缓存的存在" class="headerlink" title="2.1.1    证明一级缓存的存在"></a>2.1.1    证明一级缓存的存在</h3><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close或clearCache，它就存在。</p><h4 id="2-1-1-1-编写用户持久层-Dao-接口"><a href="#2-1-1-1-编写用户持久层-Dao-接口" class="headerlink" title="2.1.1.1    编写用户持久层 Dao 接口"></a>2.1.1.1    编写用户持久层 Dao 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-1-2-编写用户持久层映射文件"><a href="#2-1-1-2-编写用户持久层映射文件" class="headerlink" title="2.1.1.2    编写用户持久层映射文件"></a>2.1.1.2    编写用户持久层映射文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-3-编写测试方法"><a href="#2-1-1-3-编写测试方法" class="headerlink" title="2.1.1.3    编写测试方法"></a>2.1.1.3    编写测试方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试一级缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行操作</span></span><br><span class="line">    User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://ae01.alicdn.com/kf/H9f680502be5d4a6a8b267a9e850dd787V.jpg" alt="image-20200627211639140"></p><p>我们可以发现，虽然在上面的代码中我们查询了两次，但最后只执行了一次数据库操作，这就是 Mybatis 提供给我们的一级缓存在起作用了。因为一级缓存的存在，导致第二次查询 id为41的记录时，并没有发出sql语句从数据库中查询数据，而是从一级缓存中查询。</p><h3 id="2-1-2-一级缓存的分析"><a href="#2-1-2-一级缓存的分析" class="headerlink" title="2.1.2    一级缓存的分析"></a>2.1.2    一级缓存的分析</h3><p>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p><p><img src="https://ae01.alicdn.com/kf/H1db855c1762f4ee6b5ce8c332934323cv.jpg" alt="image-20200627211834463"></p><p>第一次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，如果没有，从数据库查询用户信息。</p><p>得到用户信息，将用户信息存储到一级缓存中。</p><p>如果 sqlSession 去执行 commit 操作（执行插入、更新、删除），清空 SqlSession 中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</p><p>第二次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，缓存中有，直接从缓存中获取用户信息。</p><h3 id="2-1-3-测试一级缓存的清空"><a href="#2-1-3-测试一级缓存的清空" class="headerlink" title="2.1.3    测试一级缓存的清空"></a>2.1.3    测试一级缓存的清空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试一级缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"><span class="comment">//     sqlSession.close();</span></span><br><span class="line">    <span class="comment">//再次获取SqlSession对象</span></span><br><span class="line"><span class="comment">//     sqlSession = factory.openSession();</span></span><br><span class="line">    sqlSession.clearCache();<span class="comment">//此方法也可以清空缓存</span></span><br><span class="line">    userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试缓存的同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClearlCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.根据id查询用户</span></span><br><span class="line">    User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.更新用户信息</span></span><br><span class="line">    user1.setUsername(<span class="string">"update user clear cache"</span>);</span><br><span class="line">    user1.setAddress(<span class="string">"北京市海淀区"</span>);</span><br><span class="line">    userDao.updateUser(user1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.再次查询id为41的用户</span></span><br><span class="line">    User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行sqlSession.close()后，再次获取sqlSession并查询id=41的User对象时，又重新执行了sql语句，从数据库进行了查询操作。</p><h2 id="2-2-Mybatis-二级缓存"><a href="#2-2-Mybatis-二级缓存" class="headerlink" title="2.2    Mybatis  二级缓存"></a>2.2    Mybatis  二级缓存</h2><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p><h3 id="2-2-1-二级缓存结构图"><a href="#2-2-1-二级缓存结构图" class="headerlink" title="2.2.1    二级缓存结构图"></a>2.2.1    二级缓存结构图</h3><p><img src="https://ae01.alicdn.com/kf/H73ce496120784f7bafee6a19452879998.jpg" alt="image-20200627212241101"></p><p>首先开启 mybatis 的二级缓存。</p><p>sqlSession1 去查询用户信息，查询到用户信息会将查询数据存储到二级缓存中。</p><p>如果 SqlSession3 去执行相同 mapper 映射下 sql，执行 commit 提交，将会清空该 mapper 映射下的二级缓存区域的数据。</p><p>sqlSession2 去查询与 sqlSession1 相同的用户信息，首先会去缓存中找是否存在数据，如果存在直接从缓存中取出数据。</p><h3 id="2-2-2-二级缓存的开启与关闭"><a href="#2-2-2-二级缓存的开启与关闭" class="headerlink" title="2.2.2    二级缓存的开启与关闭"></a>2.2.2    二级缓存的开启与关闭</h3><h4 id="2-2-2-1-在-SqlMapConfig-xml-文件开启二级缓存"><a href="#2-2-2-1-在-SqlMapConfig-xml-文件开启二级缓存" class="headerlink" title="2.2.2.1    在 SqlMapConfig.xml 文件开启二级缓存"></a>2.2.2.1    在 SqlMapConfig.xml 文件开启二级缓存</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为false 代表不开启二级缓存。</span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-配置相关的-Mapper-映射文件"><a href="#2-2-2-2-配置相关的-Mapper-映射文件" class="headerlink" title="2.2.2.2    配置相关的 Mapper 映射文件"></a>2.2.2.2    配置相关的 Mapper 映射文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启user支持二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-配置-statement-上面的-useCache"><a href="#2-2-2-3-配置-statement-上面的-useCache" class="headerlink" title="2.2.2.3    配置 statement 上面的 useCache"></a>2.2.2.3    配置 statement 上面的 useCache</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>标签中设置 useCache=”true”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 false。</span><br></pre></td></tr></table></figure><h3 id="2-2-3-二级缓存测试"><a href="#2-2-3-二级缓存测试" class="headerlink" title="2.2.3    二级缓存测试"></a>2.2.3    二级缓存测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试二级缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession1 = factory.openSession();</span><br><span class="line">    IUserDao dao1 = sqlSession1.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = dao1.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    sqlSession1.close();<span class="comment">//一级缓存消失</span></span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession2 = factory.openSession();</span><br><span class="line">    IUserDao dao2 = sqlSession2.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = dao2.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    sqlSession2.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的测试，我们发现执行了两次查询，并且在执行第一次查询后，我们关闭了一级缓存，再去执行第二次查询时，我们发现并没有对数据库发出 sql 语句，所以此时的数据就只能是来自于我们所说的二级缓存。</p><h3 id="2-2-4-二级缓存注意事项"><a href="#2-2-4-二级缓存注意事项" class="headerlink" title="2.2.4    二级缓存注意事项"></a>2.2.4    二级缓存注意事项</h3><p>当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化方式来保存对象。</p><h1 id="3-Mybatis-注解开发"><a href="#3-Mybatis-注解开发" class="headerlink" title="3.    Mybatis  注解开发"></a>3.    Mybatis  注解开发</h1><h2 id="3-1-mybatis-的常用注解说明"><a href="#3-1-mybatis-的常用注解说明" class="headerlink" title="3.1    mybatis 的常用注解说明"></a>3.1    mybatis 的常用注解说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Insert:实现新增</span><br><span class="line">@Update:实现更新</span><br><span class="line">@Delete:实现删除</span><br><span class="line">@Select:实现查询</span><br><span class="line">@Result:实现结果集封装</span><br><span class="line">@Results:可以与@Result 一起使用，封装多个结果集</span><br><span class="line">@ResultMap:实现引用@Results 定义的封装</span><br><span class="line">@One:实现一对一结果集封装</span><br><span class="line">@Many:实现一对多结果集封装</span><br><span class="line">@SelectProvider: 实现动态 SQL 映射</span><br><span class="line">@CacheNamespace:实现注解二级缓存的使用</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-Mybatis-注解实现基本-CRUD"><a href="#3-2-使用-Mybatis-注解实现基本-CRUD" class="headerlink" title="3.2    使用 Mybatis 注解实现基本 CRUD"></a>3.2    使用 Mybatis 注解实现基本 CRUD</h2><h3 id="3-2-1-编写实体类"><a href="#3-2-1-编写实体类" class="headerlink" title="3.2.1    编写实体类"></a>3.2.1    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-使用注解方式开发持久层接口"><a href="#3-2-2-使用注解方式开发持久层接口" class="headerlink" title="3.2.2    使用注解方式开发持久层接口"></a>3.2.2    使用注解方式开发持久层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(username,address,sex,birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;username&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125; "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user  where id=#&#123;id&#125; "</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名称模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;username&#125; "</span>)</span><br><span class="line"><span class="comment">//    @Select("select * from user where username like '%$&#123;value&#125;%' ")</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总用户数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select count(*) from user "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotalUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-编写-SqlMapConfig-配置文件"><a href="#3-2-3-编写-SqlMapConfig-配置文件" class="headerlink" title="3.2.3    编写 SqlMapConfig  配置文件"></a>3.2.3    编写 SqlMapConfig  配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbcConfig.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用typeAliases配置别名，它只能配置domain中类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置映射文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置 dao 接口的位置，它有两种方式</span></span><br><span class="line"><span class="comment">        第一种：使用 mapper 标签配置 class 属性</span></span><br><span class="line"><span class="comment">        第二种：使用 package 标签，直接指定 dao 接口所在的包</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写测试方法"><a href="#3-2-4-编写测试方法" class="headerlink" title="3.2.4    编写测试方法"></a>3.2.4    编写测试方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationCRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"mybatis annotation"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市昌平区"</span>);</span><br><span class="line"></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">57</span>);</span><br><span class="line">        user.setUsername(<span class="string">"mybatis annotation update"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市海淀区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">51</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userDao.findById(<span class="number">57</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findUserByName(<span class="string">"%mybatis%"</span>);</span><br><span class="line"><span class="comment">//        List&lt;User&gt; users = userDao.findUserByName("mybatis");</span></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = userDao.findTotalUser();</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-使用注解实现复杂关系映射开发"><a href="#3-3-使用注解实现复杂关系映射开发" class="headerlink" title="3.3    使用注解实现复杂关系映射开发"></a>3.3    使用注解实现复杂关系映射开发</h2><p>实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，在使用注解开发时我们需要借助@Results 注解，@Result 注解，@One 注解，@Many 注解。</p><h3 id="3-3-1-复杂关系映射的注解说明"><a href="#3-3-1-复杂关系映射的注解说明" class="headerlink" title="3.3.1    复杂关系映射的注解说明"></a>3.3.1    复杂关系映射的注解说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Results  注解</span><br><span class="line">代替的是标签&lt;resultMap&gt;</span><br><span class="line">该注解中可以使用单个@Result 注解，也可以使用@Result 集合</span><br><span class="line">@Results（&#123;@Result（），@Result（）&#125;）或@Results（@Result（））</span><br><span class="line"></span><br><span class="line">@Resutl 注解</span><br><span class="line">代替了 &lt;id&gt; 标签和&lt;result&gt; 标签</span><br><span class="line">@Result  中  属性介绍：</span><br><span class="line">    id 是否是主键字段</span><br><span class="line">    column 数据库的列名</span><br><span class="line">    property 需要装配的属性名</span><br><span class="line">    one 需要使用的@One 注解（@Result（one&#x3D;@One）（）））</span><br><span class="line">    many 需要使用的@Many 注解（@Result（many&#x3D;@many）（）））</span><br><span class="line"></span><br><span class="line">@One  注解（一对一）</span><br><span class="line">    代替了&lt;assocation&gt; 标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。</span><br><span class="line">@One  注解属性介绍：</span><br><span class="line">    select 指定用的 来多表查询的 sqlmapper</span><br><span class="line">    fetchType 会覆盖全局的配置参数 lazyLoadingEnabled。。</span><br><span class="line">    使用格式：</span><br><span class="line">        @Result(column&#x3D;&quot; &quot;,property&#x3D;&quot;&quot;,one&#x3D;@One(select&#x3D;&quot;&quot;))</span><br><span class="line"></span><br><span class="line">@Many  注解（多对一）</span><br><span class="line">    代替了&lt;Collection&gt; 标签, 是是多表查询的关键，在注解中用来指定子查询返回对象集合。</span><br><span class="line">    注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType（一般为 ArrayList）但是注解中可以不定义；</span><br><span class="line">    使用格式：</span><br><span class="line">    @Result(property&#x3D;&quot;&quot;,column&#x3D;&quot;&quot;,many&#x3D;@Many(select&#x3D;&quot;&quot;))</span><br></pre></td></tr></table></figure><h3 id="3-3-2-使用注解实现一对一-复杂关系映射及延迟加载"><a href="#3-3-2-使用注解实现一对一-复杂关系映射及延迟加载" class="headerlink" title="3.3.2    使用注解实现一对一 复杂关系映射及延迟加载"></a>3.3.2    使用注解实现一对一 复杂关系映射及延迟加载</h3><p>加载账户信息时并且加载该账户的用户信息，根据情况可实现延迟加载。（注解方式实现）</p><h4 id="3-3-2-1-添加-User-实体类及-Account-实体类"><a href="#3-3-2-1-添加-User-实体类及-Account-实体类" class="headerlink" title="3.3.2.1    添加 User 实体类及 Account 实体类"></a>3.3.2.1    添加 User 实体类及 Account 实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//多对一（mybatis中称之为一对一）的映射：一个账户只能属于一个用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-2-添加账户的持久层接口并使用注解配置"><a href="#3-3-2-2-添加账户的持久层接口并使用注解配置" class="headerlink" title="3.3.2.2    添加账户的持久层接口并使用注解配置"></a>3.3.2.2    添加账户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，并且获取每个账户所属的用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"accountMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>, property = <span class="string">"money"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"user"</span>, column = <span class="string">"uid"</span>, one = <span class="meta">@One</span>(select = <span class="string">"com.wgy.dao.IUserDao.findById"</span>, fetchType = FetchType.EAGER))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-3-添加用户的持久层接口并使用注解配置"><a href="#3-3-2-3-添加用户的持久层接口并使用注解配置" class="headerlink" title="3.3.2.3    添加用户的持久层接口并使用注解配置"></a>3.3.2.3    添加用户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"userMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"userName"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"userAddress"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"userSex"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"userBirthday"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user  where id=#&#123;id&#125; "</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-4-测试一对一关联及延迟加载"><a href="#3-3-2-4-测试一对一关联及延迟加载" class="headerlink" title="3.3.2.4    测试一对一关联及延迟加载"></a>3.3.2.4    测试一对一关联及延迟加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-使用注解实现一对多复杂关系映射"><a href="#3-3-3-使用注解实现一对多复杂关系映射" class="headerlink" title="3.3.3    使用注解实现一对多复杂关系映射"></a>3.3.3    使用注解实现一对多复杂关系映射</h3><p>查询用户信息时，也要查询他的账户列表。使用注解方式实现。</p><h4 id="3-3-3-1-User-实体类加入List-lt-Account-gt"><a href="#3-3-3-1-User-实体类加入List-lt-Account-gt" class="headerlink" title="3.3.3.1    User 实体类加入List&lt;Account&gt;"></a>3.3.3.1    User 实体类加入<code>List&lt;Account&gt;</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    <span class="comment">//一对多关系映射：一个用户对应多个账户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-2-编写用户的持久层接口并使用注解配置"><a href="#3-3-3-2-编写用户的持久层接口并使用注解配置" class="headerlink" title="3.3.3.2    编写用户的持久层接口并使用注解配置"></a>3.3.3.2    编写用户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id = <span class="string">"userMap"</span>, value = &#123;</span><br><span class="line">    <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"userName"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"userAddress"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"userSex"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"userBirthday"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"accounts"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"com.wgy.dao.IAccountDao.findAccountByUid"</span>, fetchType = FetchType.LAZY))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-3-编写账户的持久层接口并使用注解配置"><a href="#3-3-3-3-编写账户的持久层接口并使用注解配置" class="headerlink" title="3.3.3.3    编写账户的持久层接口并使用注解配置"></a>3.3.3.3    编写账户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询账户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account where uid = #&#123;userId&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-4-测试一对多关联及延迟加载"><a href="#3-3-3-4-测试一对多关联及延迟加载" class="headerlink" title="3.3.3.4    测试一对多关联及延迟加载"></a>3.3.3.4    测试一对多关联及延迟加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-mybatis-基于注解的二级缓存"><a href="#3-4-mybatis-基于注解的二级缓存" class="headerlink" title="3.4    mybatis 基于注解的二级缓存"></a>3.4    mybatis 基于注解的二级缓存</h2><h3 id="3-4-1-在-SqlMapConfig-中开启二级缓存支持"><a href="#3-4-1-在-SqlMapConfig-中开启二级缓存支持" class="headerlink" title="3.4.1    在 SqlMapConfig 中开启二级缓存支持"></a>3.4.1    在 SqlMapConfig 中开启二级缓存支持</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-在持久层接口中使用注解配置二级缓存"><a href="#3-4-2-在持久层接口中使用注解配置二级缓存" class="headerlink" title="3.4.2    在持久层接口中使用注解配置二级缓存"></a>3.4.2    在持久层接口中使用注解配置二级缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CacheNamespace</span>(blocking = <span class="keyword">true</span>)<span class="comment">//mybatis 基于注解方式实现配置二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Mybatis-延迟加载策略&quot;&gt;&lt;a href=&quot;#1-Mybatis-延迟加载策略&quot; class=&quot;headerlink&quot; title=&quot;1.    Mybatis 延迟加载策略&quot;&gt;&lt;/a&gt;1.    Mybatis 延迟加载策略&lt;/h1&gt;&lt;h2 id=&quot;1-1-何为延迟加载&quot;&gt;&lt;a href=&quot;#1-1-何为延迟加载&quot; class=&quot;headerlink&quot; title=&quot;1.1    何为延迟加载&quot;&gt;&lt;/a&gt;1.1    何为延迟加载&lt;/h2&gt;&lt;p&gt;就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。&lt;/li&gt;
&lt;li&gt;坏处 ：因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(三)</title>
    <link href="https://wgy1993.gitee.io/archives/f1b11122.html"/>
    <id>https://wgy1993.gitee.io/archives/f1b11122.html</id>
    <published>2020-06-22T04:21:01.000Z</published>
    <updated>2020-06-27T04:30:36.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis-连接池与事务深入"><a href="#1-Mybatis-连接池与事务深入" class="headerlink" title="1.    Mybatis  连接池与事务深入"></a>1.    Mybatis  连接池与事务深入</h1><h2 id="1-1-Mybatis-的连接池技术"><a href="#1-1-Mybatis-的连接池技术" class="headerlink" title="1.1    Mybatis 的连接池技术"></a>1.1    Mybatis 的连接池技术</h2><p>在 Mybatis 的 SqlMapConfig.xml 配置文件中，通过<code>&lt;dataSource type=&quot;pooled&quot;&gt;</code>来实现 Mybatis 中连接池的配置。</p><a id="more"></a><h3 id="1-1-1-Mybatis-连接池的分类"><a href="#1-1-1-Mybatis-连接池的分类" class="headerlink" title="1.1.1    Mybatis 连接池的分类"></a>1.1.1    Mybatis 连接池的分类</h3><p>在 Mybatis 中我们将它的数据源 dataSource 分为以下几类：</p><ol><li>UNPOOLED：不使用连接池的数据源</li><li>POOLED：使用连接池的数据源</li><li>JNDI：使用 JNDI 实现的数据源</li></ol><p>在这三种数据源中，我们一般采用的是 POOLED 数据源（很多时候我们所说的数据源就是为了更好的管理数据库连接，也就是我们所说的连接池技术）。</p><p><img src="https://ae01.alicdn.com/kf/H5fd3d68018fb47e79d9155d4c88aceafE.jpg" alt="image-20200627121640571"></p><h3 id="1-1-2-Mybatis-中数据源的配置"><a href="#1-1-2-Mybatis-中数据源的配置" class="headerlink" title="1.1.2    Mybatis 中数据源的配置"></a>1.1.2    Mybatis 中数据源的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源（连接池）信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis 在初始化时，根据<code>&lt;dataSource&gt;</code>的 type 属性来创建相应类型的的数据源 DataSource。</p><h3 id="1-1-3-Mybatis-中-DataSource-的存取"><a href="#1-1-3-Mybatis-中-DataSource-的存取" class="headerlink" title="1.1.3    Mybatis  中 DataSource 的存取"></a>1.1.3    Mybatis  中 DataSource 的存取</h3><p>MyBatis 是通过工厂模式来创建数据源 DataSource 对象的， MyBatis 定义了抽象的工厂接口:org.apache.ibatis.datasource.DataSourceFactory,通过其 getDataSource()方法返回数据源DataSource。</p><p>MyBatis 创建了 DataSource 实例后，会将其放到 Configuration 对象内的 Environment 对象中， 供以后使用。</p><h3 id="1-1-4-Mybatis-中连接的获取过程分析"><a href="#1-1-4-Mybatis-中连接的获取过程分析" class="headerlink" title="1.1.4    Mybatis 中连接的获取过程分析"></a>1.1.4    Mybatis 中连接的获取过程分析</h3><p>当我们需要创建 SqlSession 对象并需要执行 SQL 语句时，这时候 MyBatis 才会去调用 dataSource 对象来创建java.sql.Connection对象。也就是说，java.sql.Connection对象的创建一直延迟到执行SQL语句的时候。当我们用完了就再立即将数据库连接归还到连接池中。</p><h2 id="1-2-Mybatis-的事务控制"><a href="#1-2-Mybatis-的事务控制" class="headerlink" title="1.2    Mybatis 的事务控制"></a>1.2    Mybatis 的事务控制</h2><h3 id="1-2-1-JDBC-中事务的回顾"><a href="#1-2-1-JDBC-中事务的回顾" class="headerlink" title="1.2.1    JDBC  中事务的回顾"></a>1.2.1    JDBC  中事务的回顾</h3><p>在 JDBC 中我们可以将事务的提交改为自动方式，通过 setAutoCommit()方法就可以调整。</p><h3 id="1-2-2-Mybatis-中事务提交方式"><a href="#1-2-2-Mybatis-中事务提交方式" class="headerlink" title="1.2.2    Mybatis  中事务提交方式"></a>1.2.2    Mybatis  中事务提交方式</h3><p>Mybatis 中事务的提交方式，本质上就是调用 JDBC 的 setAutoCommit()来实现事务控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"mybatis user09"</span>);</span><br><span class="line">    <span class="comment">//6.执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = userDao.saveUser(user);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Before</span><span class="comment">//在测试方法执行之前执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.读取配置文件</span></span><br><span class="line">    in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">//2.创建构建者对象</span></span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    <span class="comment">//3.创建 SqlSession 工厂对象</span></span><br><span class="line">    factory = builder.build(in);</span><br><span class="line">    <span class="comment">//4.创建 SqlSession 对象</span></span><br><span class="line">    session = factory.openSession();</span><br><span class="line">    <span class="comment">//5.创建 Dao 的代理对象</span></span><br><span class="line">    userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span><span class="comment">//在测试方法执行完成之后执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//7.提交事务</span></span><br><span class="line">    session.commit();</span><br><span class="line">    <span class="comment">//8.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出的结果：</p><p><img src="https://ae01.alicdn.com/kf/H4a6dcffb01784b6f918a604ba1b505b2t.jpg" alt="image-20200627103140191"></p><p> Connection 的整个变化过程，通过分析我们能够发现之前的 CUD 操作过程中，我们都要手动进行事务的提交，原因是 setAutoCommit()方法，在执行时它的值被设置为 false 了，所以我们在 CUD 操作中，必须通过sqlSession.commit()方法来执行提交操作。</p><h3 id="1-2-3-Mybatis-自动提交事务的设置"><a href="#1-2-3-Mybatis-自动提交事务的设置" class="headerlink" title="1.2.3    Mybatis 自动提交事务的设置"></a>1.2.3    Mybatis 自动提交事务的设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.创建 SqlSession 对象</span></span><br><span class="line">session = factory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>所对应的 DefaultSqlSessionFactory 类的源代码：</p><p><img src="https://ae01.alicdn.com/kf/H3c97a6e731a747ae8a13b29b773d896ar.jpg" alt="image-20200627103700367"></p><h1 id="2-Mybatis-的动态-SQL-语句"><a href="#2-Mybatis-的动态-SQL-语句" class="headerlink" title="2.    Mybatis 的动态 SQL 语句"></a>2.    Mybatis 的动态 SQL 语句</h1><h2 id="2-1-lt-if-gt-标签"><a href="#2-1-lt-if-gt-标签" class="headerlink" title="2.1    &lt;if&gt;标签"></a>2.1    <code>&lt;if&gt;</code>标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据条件查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * </span><br><span class="line">    from user </span><br><span class="line">    where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username != '' "</span>&gt;</span></span><br><span class="line">    and username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">    and address like #&#123;address&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-lt-where-gt-标签"><a href="#2-2-lt-where-gt-标签" class="headerlink" title="2.2    &lt;where&gt;标签"></a>2.2    <code>&lt;where&gt;</code>标签</h2><p>为了简化上面 where 1=1 的条件拼装，我们可以采用<code>&lt;where&gt;</code>标签来简化开发。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByCondition"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span></span><br><span class="line">            and username = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userSex != null"</span>&gt;</span></span><br><span class="line">            and sex = #&#123;userSex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-lt-foreach-gt-标签"><a href="#2-3-lt-foreach-gt-标签" class="headerlink" title="2.3    &lt;foreach&gt; 标签"></a>2.3    <code>&lt;foreach&gt;</code> 标签</h2><h3 id="2-3-1-需求"><a href="#2-3-1-需求" class="headerlink" title="2.3.1    需求"></a>2.3.1    需求</h3><p>传入多个 id 查询用户信息，用下边两个 sql 实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USERS</span> <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%张%'</span> <span class="keyword">AND</span> (<span class="keyword">id</span> =<span class="number">10</span> <span class="keyword">OR</span> <span class="keyword">id</span> =<span class="number">89</span> <span class="keyword">OR</span> <span class="keyword">id</span>=<span class="number">16</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USERS</span> <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%张%'</span> <span class="keyword">AND</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">89</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来。</p><h3 id="2-3-2-在-QueryVo-中加入一个-List-集合用于封装参数"><a href="#2-3-2-在-QueryVo-中加入一个-List-集合用于封装参数" class="headerlink" title="2.3.2    在 QueryVo 中加入一个 List 集合用于封装参数"></a>2.3.2    在 QueryVo 中加入一个 List 集合用于封装参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-映射配置"><a href="#2-3-3-映射配置" class="headerlink" title="2.3.3    映射配置"></a>2.3.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据queryvo中的Id集合实现查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserInIds"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">parameterType</span>=<span class="string">"queryvo"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids != null and ids.size()&gt;0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"and id in ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">item</span>=<span class="string">"uid"</span>&gt;</span></span><br><span class="line">                #&#123;uid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">SQL 语句：</span><br><span class="line">select 字段 from user where id in (?)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span>&gt;</span>标签用于遍历集合，它的属性：</span><br><span class="line">    collection:代表要遍历的集合元素，注意编写时不要写#&#123;&#125;</span><br><span class="line">    open:代表语句的开始部分</span><br><span class="line">    close:代表结束部分</span><br><span class="line">    item:代表遍历集合的每个元素，生成的变量名</span><br><span class="line">    sperator:代表分隔符</span><br></pre></td></tr></table></figure><h2 id="2-4-简化编写的-SQL-片段"><a href="#2-4-简化编写的-SQL-片段" class="headerlink" title="2.4    简化编写的 SQL 片段"></a>2.4    简化编写的 SQL 片段</h2><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的。</p><h3 id="2-4-1-定义代码片段"><a href="#2-4-1-定义代码片段" class="headerlink" title="2.4.1    定义代码片段"></a>2.4.1    定义代码片段</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 了解的内容：抽取重复的sql语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"defaultUser"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-引用代码片段"><a href="#2-4-2-引用代码片段" class="headerlink" title="2.4.2    引用代码片段"></a>2.4.2    引用代码片段</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultUser"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-Mybatis-多表查询之一对多"><a href="#3-Mybatis-多表查询之一对多" class="headerlink" title="3.    Mybatis 多表查询之一对多"></a>3.    Mybatis 多表查询之一对多</h1><p>用户为User 表，账户为Account表。一个用户（User）可以有多个账户（Account）。</p><h2 id="3-1-一对一查询-多对一"><a href="#3-1-一对一查询-多对一" class="headerlink" title="3.1    一对一查询( 多对一)"></a>3.1    一对一查询( 多对一)</h2><p>查询所有账户信息，关联查询下单用户信息。</p><h3 id="3-1-1-方式一"><a href="#3-1-1-方式一" class="headerlink" title="3.1.1    方式一"></a>3.1.1    方式一</h3><h4 id="3-1-1-1-定义账户信息的实体类"><a href="#3-1-1-1-定义账户信息的实体类" class="headerlink" title="3.1.1.1    定义账户信息的实体类"></a>3.1.1.1    定义账户信息的实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-2-编写-Sql-语句"><a href="#3-1-1-2-编写-Sql-语句" class="headerlink" title="3.1.1.2    编写 Sql 语句"></a>3.1.1.2    编写 Sql 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select a.*, u.username, u.address</span><br><span class="line">from account a,</span><br><span class="line">user u</span><br><span class="line">where u.id &#x3D; a.uid;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-3-定义-AccountUser-类"><a href="#3-1-1-3-定义-AccountUser-类" class="headerlink" title="3.1.1.3    定义 AccountUser 类"></a>3.1.1.3    定义 AccountUser 类</h4><p>为了能够封装上面 SQL 语句的查询结果，定义 AccountUser 类中要包含账户信息同时还要包含用户信息，所以我们要在定义 AccountUser 类时可以继承 User 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-4-映射配置"><a href="#3-1-1-4-映射配置" class="headerlink" title="3.1.1.4    映射配置"></a>3.1.1.4    映射配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询所有账户同时包含用户名和地址信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccount"</span> <span class="attr">resultType</span>=<span class="string">"accountuser"</span>&gt;</span></span><br><span class="line">    select a.*, u.username, u.address</span><br><span class="line">    from account a,</span><br><span class="line">    user u</span><br><span class="line">    where u.id = a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义专门的 po 类作为输出类型，其中定义了 sql 查询结果集所有的字段。此方法较为简单，企业中使用普遍。</p><h3 id="3-1-2-方式二"><a href="#3-1-2-方式二" class="headerlink" title="3.1.2    方式二"></a>3.1.2    方式二</h3><p>使用 resultMap，定义专门的 resultMap 用于映射一对一查询结果。</p><p>通过面向对象的(has a)关系可以得知，我们可以在 Account 类中加入一个 User 类的对象来代表这个账户是哪个用户的。</p><h4 id="3-1-2-1-修改-Account-类"><a href="#3-1-2-1-修改-Account-类" class="headerlink" title="3.1.2.1    修改 Account 类"></a>3.1.2.1    修改 Account 类</h4><p>在 Account 类中加入 User 类的对象作为 Account 类的一个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-2-映射配置"><a href="#3-1-2-2-映射配置" class="headerlink" title="3.1.2.2    映射配置"></a>3.1.2.2    映射配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">    select u.*, a.id as aid, a.uid, a.money</span><br><span class="line">    from account a,</span><br><span class="line">    user u</span><br><span class="line">    where u.id = a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-一对多查询"><a href="#3-2-一对多查询" class="headerlink" title="3.2    一对多查询"></a>3.2    一对多查询</h2><p>查询所有用户信息及用户关联的账户信息。</p><h3 id="3-2-1-编写-SQL-语句"><a href="#3-2-1-编写-SQL-语句" class="headerlink" title="3.2.1    编写 SQL 语句"></a>3.2.1    编写 SQL 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECTu.*, </span><br><span class="line">        acc.id id,</span><br><span class="line">    acc.uid,</span><br><span class="line">    acc.money</span><br><span class="line">FROM user u</span><br><span class="line">    LEFT JOIN account acc ON u.id &#x3D; acc.uid</span><br></pre></td></tr></table></figure><h3 id="3-2-2-User类加入-List-lt-Account-gt"><a href="#3-2-2-User类加入-List-lt-Account-gt" class="headerlink" title="3.2.2    User类加入 List&lt;Account&gt;"></a>3.2.2    User类加入 <code>List&lt;Account&gt;</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-映射配置"><a href="#3-2-3-映射配置" class="headerlink" title="3.2.3    映射配置"></a>3.2.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user u</span><br><span class="line">    left outer join account a on u.id = a.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">collection</span><br><span class="line">    部分定义了用户关联的账户信息。表示关联查询结果集</span><br><span class="line">property="accounts" ：</span><br><span class="line">    关联查询的结果集存储在 User 对象的上哪个属性。</span><br><span class="line">ofType="account" ：</span><br><span class="line">    指定关联查询的结果集中的对象类型即List中的对象类型。此处可以使用别名，也可以使用全限定名。</span><br></pre></td></tr></table></figure><h1 id="4-Mybatis-多表查询之多对多"><a href="#4-Mybatis-多表查询之多对多" class="headerlink" title="4.    Mybatis 多表查询之多对多"></a>4.    Mybatis 多表查询之多对多</h1><p>多对多关系其实是双向的一对多关系。一个用户可以有多个角色，一个角色可以赋予多个用户。</p><h2 id="4-1-实现-Role-到-User-多对多"><a href="#4-1-实现-Role-到-User-多对多" class="headerlink" title="4.1    实现 Role 到 User 多对多"></a>4.1    实现 Role 到 User 多对多</h2><p>实现查询所有角色并且加载它所分配的用户信息。</p><h3 id="4-1-1-编写-SQL-语句"><a href="#4-1-1-编写-SQL-语句" class="headerlink" title="4.1.1    编写 SQL 语句"></a>4.1.1    编写 SQL 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">from role r</span><br><span class="line">    left outer join user_role ur on r.id &#x3D; ur.rid</span><br><span class="line">    left outer join user u on u.id &#x3D; ur.uid</span><br></pre></td></tr></table></figure><h3 id="4-1-2-编写角色实体类"><a href="#4-1-2-编写角色实体类" class="headerlink" title="4.1.2    编写角色实体类"></a>4.1.2    编写角色实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line">    <span class="comment">//多对多的关系映射：一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-映射配置"><a href="#4-1-3-映射配置" class="headerlink" title="4.1.3    映射配置"></a>4.1.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义role表的ResultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleMap"</span> <span class="attr">type</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"roleMap"</span>&gt;</span></span><br><span class="line">    select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">    from role r</span><br><span class="line">    left outer join user_role ur on r.id = ur.rid</span><br><span class="line">    left outer join user u on u.id = ur.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-实现-User-到-Role-的多对多"><a href="#4-2-实现-User-到-Role-的多对多" class="headerlink" title="4.2    实现 User 到 Role 的多对多"></a>4.2    实现 User 到 Role 的多对多</h2><h3 id="4-2-1-编写-SQL-语句"><a href="#4-2-1-编写-SQL-语句" class="headerlink" title="4.2.1    编写 SQL 语句"></a>4.2.1    编写 SQL 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">from user u</span><br><span class="line">    left outer join user_role ur on u.id &#x3D; ur.uid</span><br><span class="line">    left outer join role r on r.id &#x3D; ur.rid</span><br></pre></td></tr></table></figure><h3 id="4-2-2-编写用户实体类"><a href="#4-2-2-编写用户实体类" class="headerlink" title="4.2.2    编写用户实体类"></a>4.2.2    编写用户实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//多对多的关系映射：一个用户可以具备多个角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-映射配置"><a href="#4-2-3-映射配置" class="headerlink" title="4.2.3    映射配置"></a>4.2.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置角色集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">    from user u</span><br><span class="line">    left outer join user_role ur on u.id = ur.uid</span><br><span class="line">    left outer join role r on r.id = ur.rid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-JNDI数据源"><a href="#5-JNDI数据源" class="headerlink" title="5.    JNDI数据源"></a>5.    JNDI数据源</h1><p>JNDI：Java Naming and Directory Interface。是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。在服务器中注册数据源</p><p><img src="https://ae01.alicdn.com/kf/Hc5dd2be66f70431d895271eecd3ccc42t.jpg" alt="image-20200627121531954"></p><h2 id="5-1-创建Maven的war工程并导入坐标"><a href="#5-1-创建Maven的war工程并导入坐标" class="headerlink" title="5.1    创建Maven的war工程并导入坐标"></a>5.1    创建Maven的war工程并导入坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBatis10_JNDI<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2-在webapp文件下创建META-INF目录"><a href="#5-2-在webapp文件下创建META-INF目录" class="headerlink" title="5.2    在webapp文件下创建META-INF目录"></a>5.2    在webapp文件下创建META-INF目录</h2><p><img src="https://ae01.alicdn.com/kf/H3427d3a13fda4416854d94f51c2a4b15w.jpg" alt="image-20200627121032767"></p><h2 id="5-3-在META-INF目录中建立一个名为context-xml的配置文件"><a href="#5-3-在META-INF目录中建立一个名为context-xml的配置文件" class="headerlink" title="5.3    在META-INF目录中建立一个名为context.xml的配置文件"></a>5.3    在META-INF目录中建立一个名为context.xml的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Resource</span></span><br><span class="line"><span class="comment">        name="jdbc/mybatis"                             数据源的名称</span></span><br><span class="line"><span class="comment">        type="javax.sql.DataSource"                     数据源类型</span></span><br><span class="line"><span class="comment">        auth="Container"                                数据源提供者</span></span><br><span class="line"><span class="comment">        maxActive="20"                                  最大活动数</span></span><br><span class="line"><span class="comment">        maxWait="10000"                                 最大等待时间</span></span><br><span class="line"><span class="comment">        maxIdle="5"                                     最大空闲数</span></span><br><span class="line"><span class="comment">        username="root"                                 用户名</span></span><br><span class="line"><span class="comment">        password="root"                                 密码</span></span><br><span class="line"><span class="comment">        driverClassName="com.mysql.jdbc.Driver"         驱动类</span></span><br><span class="line"><span class="comment">        url="jdbc:mysql://localhost:3306/mybatis"       连接url字符串</span></span><br><span class="line"><span class="comment">    /&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"jdbc/mybatis"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxActive</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxWait</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxIdle</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-4-修改SqlMapConfig-xml中的配置"><a href="#5-4-修改SqlMapConfig-xml中的配置" class="headerlink" title="5.4    修改SqlMapConfig.xml中的配置"></a>5.4    修改SqlMapConfig.xml中的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置dev的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务控制的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接数据库的必备信息  type属性表示是否使用数据源（连接池）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JNDI"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"data_source"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/mybatis"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">java:comp/env/为固定写法，后面为context.xml中设置的数据源的名称jdbc/mybatis</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Mybatis-连接池与事务深入&quot;&gt;&lt;a href=&quot;#1-Mybatis-连接池与事务深入&quot; class=&quot;headerlink&quot; title=&quot;1.    Mybatis  连接池与事务深入&quot;&gt;&lt;/a&gt;1.    Mybatis  连接池与事务深入&lt;/h1&gt;&lt;h2 id=&quot;1-1-Mybatis-的连接池技术&quot;&gt;&lt;a href=&quot;#1-1-Mybatis-的连接池技术&quot; class=&quot;headerlink&quot; title=&quot;1.1    Mybatis 的连接池技术&quot;&gt;&lt;/a&gt;1.1    Mybatis 的连接池技术&lt;/h2&gt;&lt;p&gt;在 Mybatis 的 SqlMapConfig.xml 配置文件中，通过&lt;code&gt;&amp;lt;dataSource type=&amp;quot;pooled&amp;quot;&amp;gt;&lt;/code&gt;来实现 Mybatis 中连接池的配置。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(二)</title>
    <link href="https://wgy1993.gitee.io/archives/8f423109.html"/>
    <id>https://wgy1993.gitee.io/archives/8f423109.html</id>
    <published>2020-06-21T14:11:23.000Z</published>
    <updated>2020-06-25T14:18:28.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基于代理-Dao-实现-CRUD-操作"><a href="#1-基于代理-Dao-实现-CRUD-操作" class="headerlink" title="1.    基于代理 Dao 实现 CRUD 操作"></a>1.    基于代理 Dao 实现 CRUD 操作</h1><p>使用要求：</p><ol><li>持久层接口和持久层接口的映射配置必须在相同的包下</li><li>持久层映射配置中 mapper 标签的 namespace 属性取值必须是持久层接口的全限定类名</li><li>SQL 语句的配置标签<code>&lt;select&gt;</code>,<code>&lt;insert&gt;</code>,<code>&lt;delete&gt;</code>,<code>&lt;update&gt;</code>的 id 属性必须和持久层接口的方法名相同。</li></ol><a id="more"></a><h2 id="1-1-根据-ID-查询"><a href="#1-1-根据-ID-查询" class="headerlink" title="1.1    根据 ID 查询"></a>1.1    根据 ID 查询</h2><h3 id="1-1-1-在持久层接口中添加查询方法"><a href="#1-1-1-在持久层接口中添加查询方法" class="headerlink" title="1.1.1    在持久层接口中添加查询方法"></a>1.1.1    在持久层接口中添加查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-在用户的映射配置文件中配置"><a href="#1-1-2-在用户的映射配置文件中配置" class="headerlink" title="1.1.2    在用户的映射配置文件中配置"></a>1.1.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>细节：</p><ul><li><p>resultType  属性：</p><p>用于指定结果集的类型。</p></li><li><p>parameterType  属性：</p><p>用于指定传入参数的类型。</p></li><li><p>sql  语句中使用#{} 字符 ：</p><p>它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。</p><p>具体的数据是由#{}里面的内容决定的。</p></li><li><p><code>#{}</code> 中内容的写法：</p><p>由于数据类型是基本类型，所以此处可以随意写。</p></li></ul><h3 id="1-1-3-在测试类添加测试"><a href="#1-1-3-在测试类添加测试" class="headerlink" title="1.1.3    在测试类添加测试"></a>1.1.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试mybatis的crud操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span><span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3.获取SqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.获取dao的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询一个操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        User user = userDao.findById(<span class="number">49</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-保存操作"><a href="#1-2-保存操作" class="headerlink" title="1.2    保存操作"></a>1.2    保存操作</h2><h3 id="1-2-1-在持久层接口中添加新增方法"><a href="#1-2-1-在持久层接口中添加新增方法" class="headerlink" title="1.2.1    在持久层接口中添加新增方法"></a>1.2.1    在持久层接口中添加新增方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-在用户的映射配置文件中配置"><a href="#1-2-2-在用户的映射配置文件中配置" class="headerlink" title="1.2.2    在用户的映射配置文件中配置"></a>1.2.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    insert into user(username, address, sex, birthday)</span><br><span class="line">    values (#&#123;userName&#125;, #&#123;userAddress&#125;, #&#123;userSex&#125;, #&#123;userBirthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>细节：</p><ul><li><p>parameterType 属性：</p><p>代表参数的类型，因为我们要传入的是一个类的对象，所以类型就写类的全名称。</p></li><li><p>sql 语句中使用#{}字符：</p><p>它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。</p><p>具体的数据是由#{}里面的内容决定的。</p></li><li><p><code>#{}</code>中内容的写法：</p><p>由于我们保存方法的参数是 一个 User 对象，此处要写 User 对象中的属性名称。</p><p>它用的是 ognl 表达式。</p></li><li><p>ognl 表达式：</p><p>它是 apache 提供的一种表达式语言，全称是：Object Graphic Navigation Language 对象图导航语言</p><p>它是按照一定的语法格式来获取数据的。</p><p>语法格式就是使用 #{对象.对象}的方式</p><p><code>#{user.username}</code>它会先去找 user 对象，然后在 user 对象中找到 username 属性，并调用getUsername()方法把值取出来。但是我们在 parameterType 属性上指定了实体类名称，所以可以省略 user.而直接写 username。</p></li></ul><h3 id="1-2-3-在测试类添加测试"><a href="#1-2-3-在测试类添加测试" class="headerlink" title="1.2.3    在测试类添加测试"></a>1.2.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试保存操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"insert User property"</span>);</span><br><span class="line">    user.setUserAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">    user.setUserSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setUserBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    System.out.println(<span class="string">"保存操作之前："</span> + user);</span><br><span class="line">    <span class="comment">//5.执行保存方法</span></span><br><span class="line">    userDao.saveUser(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"保存操作之后："</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开 Mysql 数据库发现并没有添加任何记录，原因是什么？</p><p>这一点和 jdbc 是一样的，我们在实现增删改时一定要去控制事务的提交，那么在 mybatis 中如何控制事务提交呢？</p><p>可以使用:session.commit();来实现事务提交。加入事务提交后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//6.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-问题扩展：新增用户-id-的返回值"><a href="#1-2-4-问题扩展：新增用户-id-的返回值" class="headerlink" title="1.2.4    问题扩展：新增用户 id 的返回值"></a>1.2.4    问题扩展：新增用户 id 的返回值</h3><p>新增用户后，同时还要返回当前新增用户的 id 值，因为 id 是由数据库的自动增长来实现的，所以就相当于我们要在新增后将自动增长 auto_increment 的值返回。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        select last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user(username, address, sex, birthday)</span><br><span class="line">    values (#&#123;userName&#125;, #&#123;userAddress&#125;, #&#123;userSex&#125;, #&#123;userBirthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-用户更新"><a href="#1-3-用户更新" class="headerlink" title="1.3    用户更新"></a>1.3    用户更新</h2><h3 id="1-3-1-在持久层接口中添加更新方法"><a href="#1-3-1-在持久层接口中添加更新方法" class="headerlink" title="1.3.1    在持久层接口中添加更新方法"></a>1.3.1    在持久层接口中添加更新方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-在用户的映射配置文件中配置"><a href="#1-3-2-在用户的映射配置文件中配置" class="headerlink" title="1.3.2    在用户的映射配置文件中配置"></a>1.3.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    set username=#&#123;userName&#125;,</span><br><span class="line">    address=#&#123;userAddress&#125;,</span><br><span class="line">    sex=#&#123;userSex&#125;,</span><br><span class="line">    birthday=#&#123;userBirthday&#125;</span><br><span class="line">    where id = #&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-在测试类添加测试"><a href="#1-3-3-在测试类添加测试" class="headerlink" title="1.3.3    在测试类添加测试"></a>1.3.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试更新操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserId(<span class="number">49</span>);</span><br><span class="line">    user.setUserName(<span class="string">"mybastis update user"</span>);</span><br><span class="line">    user.setUserAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">    user.setUserSex(<span class="string">"女"</span>);</span><br><span class="line">    user.setUserBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.执行保存方法</span></span><br><span class="line">    userDao.updateUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-用户删除"><a href="#1-4-用户删除" class="headerlink" title="1.4    用户删除"></a>1.4    用户删除</h2><h3 id="1-4-1-在持久层接口中添加删除方法"><a href="#1-4-1-在持久层接口中添加删除方法" class="headerlink" title="1.4.1    在持久层接口中添加删除方法"></a>1.4.1    在持久层接口中添加删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据Id删除用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-在用户的映射配置文件中配置"><a href="#1-4-2-在用户的映射配置文件中配置" class="headerlink" title="1.4.2    在用户的映射配置文件中配置"></a>1.4.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-3-在测试类添加测试"><a href="#1-4-3-在测试类添加测试" class="headerlink" title="1.4.3    在测试类添加测试"></a>1.4.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行删除方法</span></span><br><span class="line">    userDao.deleteUser(<span class="number">48</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-用户模糊查询"><a href="#1-5-用户模糊查询" class="headerlink" title="1.5    用户模糊查询"></a>1.5    用户模糊查询</h2><h3 id="1-5-1-在持久层接口中添加模糊查询方法"><a href="#1-5-1-在持久层接口中添加模糊查询方法" class="headerlink" title="1.5.1    在持久层接口中添加模糊查询方法"></a>1.5.1    在持久层接口中添加模糊查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据名称模糊查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-在用户的映射配置文件中配置"><a href="#1-5-2-在用户的映射配置文件中配置" class="headerlink" title="1.5.2    在用户的映射配置文件中配置"></a>1.5.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-在测试类添加测试"><a href="#1-5-3-在测试类添加测试" class="headerlink" title="1.5.3    在测试类添加测试"></a>1.5.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试模糊查询操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台输出的执行 SQL 语句如下：</p><p><img src="https://ae01.alicdn.com/kf/H0650dcbbb85b417cb74c52fe54d9ed3bu.jpg" alt="image-20200625202650932"></p><p>我们在配置文件中没有加入%来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标识%。配置文件中的#{username}也只是一个占位符，所以 SQL 语句显示为“？”。</p><h3 id="1-5-4-模糊查询的另一种配置方式"><a href="#1-5-4-模糊查询的另一种配置方式" class="headerlink" title="1.5.4    模糊查询的另一种配置方式"></a>1.5.4    模糊查询的另一种配置方式</h3><p>第一步：修改 SQL 语句的配置，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like '%$&#123;value&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在上面将原来的#{}占位符，改成了${value}。注意如果用模糊查询的这种写法，那么${value}的写法就是固定的，不能写成其它名字。</p><p>第二步：测试，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试模糊查询操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findByName(<span class="string">"王"</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台输出的执行 SQL 语句如下：</p><p><img src="https://ae01.alicdn.com/kf/Hda911e6364f94c95a923bc4f6471e49dC.jpg" alt="image-20200625203027705"></p><p>可以发现，我们在程序代码中就不需要加入模糊查询的匹配符%了，这两种方式的实现效果是一样的，但执行的语句是不一样的。</p><h3 id="1-5-5-与-的区别"><a href="#1-5-5-与-的区别" class="headerlink" title="1.5.5    #{} 与${} 的区别"></a>1.5.5    <code>#{}</code> 与<code>${}</code> 的区别</h3><ul><li><p><code>#{}</code> 表示一个占位符号</p><p>通过#{}可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，#{}可以有效防止 sql 注入。 #{}可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类型值，#{}括号中可以是 value 或其它名称。</p></li><li><p><code>${}</code> 表示拼接 sql  串</p><p>通过${}可以将 parameterType 传入的内容拼接在 sql中且不进行 jdbc 类型转换， ${}可以接收简单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，${}括号中只能是 value。</p></li></ul><h3 id="1-5-6-模糊查询的-value-源码分析"><a href="#1-5-6-模糊查询的-value-源码分析" class="headerlink" title="1.5.6    模糊查询的${value} 源码分析"></a>1.5.6    模糊查询的<code>${value}</code> 源码分析</h3><p><img src="https://ae01.alicdn.com/kf/H70e74dd556154de6838a5509629d8995Z.jpg" alt="image-20200625203437404"></p><p>这就说明了源码中指定了读取的 key 的名字就是”value”，所以我们在绑定参数时就只能叫 value 的名字了。</p><h2 id="1-6-查询使用聚合函数"><a href="#1-6-查询使用聚合函数" class="headerlink" title="1.6    查询使用聚合函数"></a>1.6    查询使用聚合函数</h2><h3 id="1-6-1-在持久层接口中添加聚合函数查询方法"><a href="#1-6-1-在持久层接口中添加聚合函数查询方法" class="headerlink" title="1.6.1    在持久层接口中添加聚合函数查询方法"></a>1.6.1    在持久层接口中添加聚合函数查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询总用户数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-在用户的映射配置文件中配置"><a href="#1-6-2-在用户的映射配置文件中配置" class="headerlink" title="1.6.2    在用户的映射配置文件中配置"></a>1.6.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 获取用户的总记录条数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select count(id)</span><br><span class="line">    from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-3-在测试类添加测试"><a href="#1-6-3-在测试类添加测试" class="headerlink" title="1.6.3    在测试类添加测试"></a>1.6.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询总记录条数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    <span class="keyword">int</span> count = userDao.findTotal();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Mybatis-的参数深入"><a href="#2-Mybatis-的参数深入" class="headerlink" title="2.    Mybatis 的参数深入"></a>2.    Mybatis 的参数深入</h1><h2 id="2-1-parameterType-配置参数"><a href="#2-1-parameterType-配置参数" class="headerlink" title="2.1    parameterType 配置参数"></a>2.1    parameterType 配置参数</h2><h3 id="2-1-1-使用说明"><a href="#2-1-1-使用说明" class="headerlink" title="2.1.1    使用说明"></a>2.1.1    使用说明</h3><p> SQL 语句传参，使用标签的 parameterType 属性来设定。该属性的取值可以是基本类型，引用类型（例如:String 类型），还可以是实体类类型（POJO 类）。同时也可以使用实体类的包装类</p><h3 id="2-1-2-注意事项"><a href="#2-1-2-注意事项" class="headerlink" title="2.1.2    注意事项"></a>2.1.2    注意事项</h3><p>基本类 型和 String 我们可以直接写类型名称 ，也可以使用包名 . 类名的方式 ，例如 ：java.lang.String。实体类类型，目前我们只能使用全限定类名。</p><p><img src="https://ae01.alicdn.com/kf/H66b44a9259694d9d945d912037de5a27w.jpg" alt="image-20200625210722651"></p><h2 id="2-2-传递-pojo-包装对象"><a href="#2-2-传递-pojo-包装对象" class="headerlink" title="2.2    传递 pojo 包装对象"></a>2.2    传递 pojo 包装对象</h2><p>开发中通过 pojo 传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。Pojo 类中包含 pojo。</p><p>需求：根据用户名查询用户信息，查询条件放到 QueryVo 的 user 属性中。</p><h3 id="2-2-1-编写-QueryVo"><a href="#2-2-1-编写-QueryVo" class="headerlink" title="2.2.1    编写 QueryVo"></a>2.2.1    编写 QueryVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-在持久层接口中添加查询方法"><a href="#2-2-2-在持久层接口中添加查询方法" class="headerlink" title="2.2.2    在持久层接口中添加查询方法"></a>2.2.2    在持久层接口中添加查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据queryVo中的条件查询用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByVo</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-在用户的映射配置文件中配置"><a href="#2-2-3-在用户的映射配置文件中配置" class="headerlink" title="2.2.3    在用户的映射配置文件中配置"></a>2.2.3    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据queryVo的条件查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByVo"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like #&#123;user.userName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-在测试类添加测试"><a href="#2-2-4-在测试类添加测试" class="headerlink" title="2.2.4    在测试类添加测试"></a>2.2.4    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试使用QueryVo作为查询条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByVo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"%王%"</span>);</span><br><span class="line">    vo.setUser(user);</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findUserByVo(vo);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Mybatis-的输出结果封装"><a href="#3-Mybatis-的输出结果封装" class="headerlink" title="3.    Mybatis 的输出结果封装"></a>3.    Mybatis 的输出结果封装</h1><h2 id="3-1-resultType-配置结果类型"><a href="#3-1-resultType-配置结果类型" class="headerlink" title="3.1    resultType 配置结果类型"></a>3.1    resultType 配置结果类型</h2><p>resultType 属性可以指定结果集的类型，它支持基本类型和实体类类型。</p><p>它和 parameterType 一样，如果注册过类型别名的，可以直接使用别名。没有注册过的必须使用全限定类名。</p><h3 id="3-1-1-基本类型示例"><a href="#3-1-1-基本类型示例" class="headerlink" title="3.1.1    基本类型示例"></a>3.1.1    基本类型示例</h3><p>案例1.6</p><h3 id="3-1-2-实体类类型示例"><a href="#3-1-2-实体类类型示例" class="headerlink" title="3.1.2    实体类类型示例"></a>3.1.2    实体类类型示例</h3><p>案例1.1</p><h3 id="3-1-3-特殊情况示例"><a href="#3-1-3-特殊情况示例" class="headerlink" title="3.1.3    特殊情况示例"></a>3.1.3    特殊情况示例</h3><h4 id="3-1-3-1-修改实体类"><a href="#3-1-3-1-修改实体类" class="headerlink" title="3.1.3.1    修改实体类"></a>3.1.3.1    修改实体类</h4><p>实体类属性和数据库表的列名已经不一致</p><h4 id="3-1-3-2-修改映射配置"><a href="#3-1-3-2-修改映射配置" class="headerlink" title="3.1.3.2    修改映射配置"></a>3.1.3.2    修改映射配置</h4><p>使用别名查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select id as userId, username as userName, address as userAddress, sex as userSex, birthday as userBirthday</span><br><span class="line">    from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-resultMap-结果类型"><a href="#3-2-resultMap-结果类型" class="headerlink" title="3.2    resultMap 结果类型"></a>3.2    resultMap 结果类型</h2><p>resultMap 标签可以建立查询的列名和实体类的属性名称不一致时建立对应关系。从而实现封装。</p><p>在 select 标签中使用 resultMap 属性指定引用即可。同时 resultMap 可以实现将查询结果映射为复杂类型的 pojo，比如在查询结果映射对象中包括 pojo 和 list 实现一对一查询和一对多查询。</p><h3 id="3-2-1-定义-resultMap"><a href="#3-2-1-定义-resultMap" class="headerlink" title="3.2.1    定义 resultMap"></a>3.2.1    定义 resultMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 建立 User 实体和数据库表的对应关系</span><br><span class="line">    type 属性：指定实体类的全限定类名</span><br><span class="line">    id 属性：给定一个唯一标识，是给查询 select 标签引用用的。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;resultMap type&#x3D;&quot;com.wgy.domain.User&quot; id&#x3D;&quot;userMap&quot;&gt;</span><br><span class="line">    &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;userId&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;username&quot; property&#x3D;&quot;userName&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;sex&quot; property&#x3D;&quot;userSex&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;address&quot; property&#x3D;&quot;userAddress&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;birthday&quot; property&#x3D;&quot;userBirthday&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">id 标签：用于指定主键字段</span><br><span class="line">result 标签：用于指定非主键字段</span><br><span class="line">column 属性：用于指定数据库列名</span><br><span class="line">property 属性：用于指定实体类属性名称</span><br></pre></td></tr></table></figure><h3 id="3-2-2-映射配置"><a href="#3-2-2-映射配置" class="headerlink" title="3.2.2    映射配置"></a>3.2.2    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-Mybatis-传统-DAO-层开发"><a href="#4-Mybatis-传统-DAO-层开发" class="headerlink" title="4.    Mybatis 传统 DAO 层开发"></a>4.    Mybatis 传统 DAO 层开发</h1><p>使用 Mybatis 开发 Dao，通常有两个方法，即原始 Dao开发方式和 Mapper 接口代理开发方式。而现在主流的开发方式是接口代理开发方式，这种方式总体上更加简便。</p><h2 id="4-1-Mybatis-实现-DAO-的传统开发方式"><a href="#4-1-Mybatis-实现-DAO-的传统开发方式" class="headerlink" title="4.1    Mybatis 实现 DAO 的传统开发方式"></a>4.1    Mybatis 实现 DAO 的传统开发方式</h2><h3 id="4-1-1-持久层-Dao-接口"><a href="#4-1-1-持久层-Dao-接口" class="headerlink" title="4.1.1    持久层 Dao 接口"></a>4.1.1    持久层 Dao 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Id删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称模糊查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总用户数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-持久层-Dao-实现类"><a href="#4-1-2-持久层-Dao-实现类" class="headerlink" title="4.1.2    持久层 Dao 实现类"></a>4.1.2    持久层 Dao 实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询列表</span></span><br><span class="line">        <span class="comment">//参数就是能获取配置信息的key</span></span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">"com.wgy.dao.IUserDao.findAll"</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用方法实现保存</span></span><br><span class="line">        session.insert(<span class="string">"com.wgy.dao.IUserDao.saveUser"</span>, user);</span><br><span class="line">        <span class="comment">//3.提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用方法实现更新</span></span><br><span class="line">        session.update(<span class="string">"com.wgy.dao.IUserDao.updateUser"</span>, user);</span><br><span class="line">        <span class="comment">//3.提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用方法实现更新</span></span><br><span class="line">        session.update(<span class="string">"com.wgy.dao.IUserDao.deleteUser"</span>, userId);</span><br><span class="line">        <span class="comment">//3.提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询一个</span></span><br><span class="line">        User user = session.selectOne(<span class="string">"com.wgy.dao.IUserDao.findById"</span>, userId);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询列表</span></span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">"com.wgy.dao.IUserDao.findByName"</span>, username);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询一个</span></span><br><span class="line">        Integer count = session.selectOne(<span class="string">"com.wgy.dao.IUserDao.findTotal"</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-持久层映射配置"><a href="#4-1-3-持久层映射配置" class="headerlink" title="4.1.3    持久层映射配置"></a>4.1.3    持久层映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">            select last_insert_id();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username, address, sex, birthday)</span><br><span class="line">        values (#&#123;username&#125;, #&#123;address&#125;, #&#123;sex&#125;, #&#123;birthday&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        set username=#&#123;username&#125;,</span><br><span class="line">            address=#&#123;address&#125;,</span><br><span class="line">            sex=#&#123;sex&#125;,</span><br><span class="line">            birthday=#&#123;birthday&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where username like #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 获取用户的总记录条数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select count(id)</span><br><span class="line">        from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-4-测试类"><a href="#4-1-4-测试类" class="headerlink" title="4.1.4    测试类"></a>4.1.4    测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试mybatis的crud操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span><span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂对象，创建dao对象</span></span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询所有方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试保存操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"dao impl user"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">"保存操作之前："</span> + user);</span><br><span class="line">        <span class="comment">//5.执行保存方法</span></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"保存操作之后："</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试更新操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">50</span>);</span><br><span class="line">        user.setUsername(<span class="string">"userdaoimpl update user"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"女"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行保存方法</span></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行删除方法</span></span><br><span class="line">        userDao.deleteUser(<span class="number">54</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        User user = userDao.findById(<span class="number">50</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模糊查询操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询总记录条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        <span class="keyword">int</span> count = userDao.findTotal();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-SqlMapConfig-xml-配置文件"><a href="#5-SqlMapConfig-xml-配置文件" class="headerlink" title="5.    SqlMapConfig.xml 配置文件"></a>5.    SqlMapConfig.xml 配置文件</h1><h2 id="5-1-配置内容"><a href="#5-1-配置内容" class="headerlink" title="5.1    配置内容"></a>5.1    配置内容</h2><h3 id="5-1-1-SqlMapConfig-xml-中配置的内容和顺序"><a href="#5-1-1-SqlMapConfig-xml-中配置的内容和顺序" class="headerlink" title="5.1.1    SqlMapConfig.xml 中配置的内容和顺序"></a>5.1.1    SqlMapConfig.xml 中配置的内容和顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-properties （属性）</span><br><span class="line">    --property</span><br><span class="line">-settings（全局配置参数）</span><br><span class="line">    --setting</span><br><span class="line">-typeAliases （类型别名）</span><br><span class="line">    --typeAliase</span><br><span class="line">    --package</span><br><span class="line">-typeHandlers（类型处理器）</span><br><span class="line">-objectFactory（对象工厂）</span><br><span class="line">-plugins（插件）</span><br><span class="line">-environments（环境集合属性对象）</span><br><span class="line">    --environment（环境子属性对象）</span><br><span class="line">    ---transactionManager（事务管理）</span><br><span class="line">    ---dataSource（数据源）</span><br><span class="line">-mappers （映射器）</span><br><span class="line">    --mapper</span><br><span class="line">    --package</span><br></pre></td></tr></table></figure><h2 id="5-2-properties（属性）"><a href="#5-2-properties（属性）" class="headerlink" title="5.2    properties（属性）"></a>5.2    properties（属性）</h2><p>在使用 properties 标签配置时，我们可以采用两种方式指定属性配置。</p><h3 id="5-2-1-第一种"><a href="#5-2-1-第一种" class="headerlink" title="5.2.1    第一种"></a>5.2.1    第一种</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-第二种"><a href="#5-2-2-第二种" class="headerlink" title="5.2.2    第二种"></a>5.2.2    第二种</h3><h4 id="5-2-2-1-在-classpath-下定义-db-properties"><a href="#5-2-2-1-在-classpath-下定义-db-properties" class="headerlink" title="5.2.2.1    在 classpath 下定义 db.properties"></a>5.2.2.1    在 classpath 下定义 db.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-2-properties-标签配置"><a href="#5-2-2-2-properties-标签配置" class="headerlink" title="5.2.2.2    properties 标签配置"></a>5.2.2.2    properties 标签配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置properties</span></span><br><span class="line"><span class="comment">    可以在标签内部配置连接数据库的信息。也可以通过属性引用外部配置文件信息</span></span><br><span class="line"><span class="comment">    resource属性： 常用的</span></span><br><span class="line"><span class="comment">    用于指定配置文件的位置，是按照类路径的写法来写，并且必须存在于类路径下。</span></span><br><span class="line"><span class="comment">        resource="db.properties"</span></span><br><span class="line"><span class="comment">    url属性：</span></span><br><span class="line"><span class="comment">    是要求按照Url的写法来写地址</span></span><br><span class="line"><span class="comment">    URL：Uniform Resource Locator 统一资源定位符。它是可以唯一标识一个资源的位置。</span></span><br><span class="line"><span class="comment">    它的写法：</span></span><br><span class="line"><span class="comment">            http://localhost:8080/mybatisserver/demo1Servlet</span></span><br><span class="line"><span class="comment">            协议      主机     端口       URI</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    URI:Uniform Resource Identifier 统一资源标识符。它是在应用中可以唯一定位一个资源的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">"file:///E:\MyIDEAWorkSpace\MyBatis\MyBatis05_CRUD\src\main\resources\db.properties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-dataSource-标签引用配置"><a href="#5-2-3-dataSource-标签引用配置" class="headerlink" title="5.2.3    dataSource  标签引用配置"></a>5.2.3    dataSource  标签引用配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-typeAliases（类型别名）"><a href="#5-3-typeAliases（类型别名）" class="headerlink" title="5.3    typeAliases（类型别名）"></a>5.3    typeAliases（类型别名）</h2><p>除了前面 Mybatis 支持的默认别名，也可以采用自定义别名方式来开发。</p><h3 id="5-3-1-自定义别名"><a href="#5-3-1-自定义别名" class="headerlink" title="5.3.1    自定义别名"></a>5.3.1    自定义别名</h3><p>在 SqlMapConfig.xml 中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.wgy.domain.User"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-4-mappers（映射器）"><a href="#5-4-mappers（映射器）" class="headerlink" title="5.4    mappers（映射器）"></a>5.4    mappers（映射器）</h2><h3 id="5-4-1-lt-mapper-resource-quot-quot-gt"><a href="#5-4-1-lt-mapper-resource-quot-quot-gt" class="headerlink" title="5.4.1    &lt;mapper resource=&quot; &quot; /&gt;"></a>5.4.1    <code>&lt;mapper resource=&quot; &quot; /&gt;</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用相对于类路径的资源</span><br><span class="line">如：<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/wgy/dao/IUserDao.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-2-lt-mapper-class-quot-quot-gt"><a href="#5-4-2-lt-mapper-class-quot-quot-gt" class="headerlink" title="5.4.2    &lt;mapper class=&quot; &quot; /&gt;"></a>5.4.2    <code>&lt;mapper class=&quot; &quot; /&gt;</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 mapper 接口类路径</span><br><span class="line">如：<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.UserDao"</span>/&gt;</span></span><br><span class="line">注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</span><br></pre></td></tr></table></figure><h3 id="5-4-3-lt-package-name-quot-quot-gt"><a href="#5-4-3-lt-package-name-quot-quot-gt" class="headerlink" title="5.4.3    &lt;package name=&quot;&quot;/&gt;"></a>5.4.3    <code>&lt;package name=&quot;&quot;/&gt;</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注册指定包下的所有 mapper 接口</span><br><span class="line">如：<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基于代理-Dao-实现-CRUD-操作&quot;&gt;&lt;a href=&quot;#1-基于代理-Dao-实现-CRUD-操作&quot; class=&quot;headerlink&quot; title=&quot;1.    基于代理 Dao 实现 CRUD 操作&quot;&gt;&lt;/a&gt;1.    基于代理 Dao 实现 CRUD 操作&lt;/h1&gt;&lt;p&gt;使用要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;持久层接口和持久层接口的映射配置必须在相同的包下&lt;/li&gt;
&lt;li&gt;持久层映射配置中 mapper 标签的 namespace 属性取值必须是持久层接口的全限定类名&lt;/li&gt;
&lt;li&gt;SQL 语句的配置标签&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;insert&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;delete&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;update&amp;gt;&lt;/code&gt;的 id 属性必须和持久层接口的方法名相同。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(一)</title>
    <link href="https://wgy1993.gitee.io/archives/2073aa6b.html"/>
    <id>https://wgy1993.gitee.io/archives/2073aa6b.html</id>
    <published>2020-06-20T07:25:51.000Z</published>
    <updated>2020-06-25T07:35:22.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-单独使用jdbc编程问题总结"><a href="#1-单独使用jdbc编程问题总结" class="headerlink" title="1.    单独使用jdbc编程问题总结"></a>1.    单独使用jdbc编程问题总结</h1><h2 id="1-1-jdbc编程步骤"><a href="#1-1-jdbc编程步骤" class="headerlink" title="1.1    jdbc编程步骤"></a>1.1    jdbc编程步骤</h2><ol><li>加载数据库驱动</li><li>创建并获取数据库链接</li><li>创建jdbc statement对象</li><li>设置sql语句</li><li>设置sql语句中的参数(使用preparedStatement)</li><li>通过statement执行sql并获取结果</li><li>对sql执行结果进行解析处理</li><li>释放资源(resultSet、preparedstatement、connection)</li></ol><a id="more"></a><h2 id="1-2-jdbc程序"><a href="#1-2-jdbc程序" class="headerlink" title="1.2    jdbc程序"></a>1.2    jdbc程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//加载数据库驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">        connection =  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">//定义sql语句 ?表示占位符</span></span><br><span class="line">        String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line">        <span class="comment">//获取预处理statement</span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">//向数据库发出sql执行查询，查询出结果集</span></span><br><span class="line">        resultSet =  preparedStatement.executeQuery();</span><br><span class="line">        <span class="comment">//遍历查询结果集</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"  "</span>+resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preparedStatement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边使用jdbc的原始方法（未经封装）实现了查询数据库表记录的操作。</p><h2 id="1-3-jdbc问题总结如下"><a href="#1-3-jdbc问题总结如下" class="headerlink" title="1.3    jdbc问题总结如下"></a>1.3    jdbc问题总结如下</h2><p>1、数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</p><p>设想：使用数据库连接池管理数据库连接。</p><p>2、将sql语句硬编码到java代码中，如果sql 语句修改，需要重新编译java代码，不利于系统维护。</p><p>设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。</p><p>3、向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护。</p><p>设想：将sql语句及占位符号和参数全部配置在xml中。</p><p>4、从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，，不利于系统维护。</p><p>设想：将查询的结果集，自动映射成java对象。</p><h1 id="2-MyBatis框架"><a href="#2-MyBatis框架" class="headerlink" title="2.    MyBatis框架"></a>2.    MyBatis框架</h1><h2 id="2-1-MyBatis是什么？"><a href="#2-1-MyBatis是什么？" class="headerlink" title="2.1    MyBatis是什么？"></a>2.1    MyBatis是什么？</h2><p>mybatis是一个持久层的框架，它对jdbc的操作数据库的过程进行封装，不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。是apache下的顶级项目。</p><p>mybatis托管到goolecode下，再后来托管到github下(<a href="https://github.com/mybatis/mybatis-3/releases)。" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases)。</a></p><p>mybatis让程序将主要精力放在sql上，通过mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql）满足需要sql语句。</p><p>mybatis可以将向 preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象。（输出映射）</p><h2 id="2-2-MyBatis框架"><a href="#2-2-MyBatis框架" class="headerlink" title="2.2    MyBatis框架"></a>2.2    MyBatis框架</h2><p><img src="https://ae01.alicdn.com/kf/Hc8547b18c502449d9e9605ef5eecb945M.jpg" alt="image-20200625112335030"></p><h2 id="2-3-与hibernate不同"><a href="#2-3-与hibernate不同" class="headerlink" title="2.3    与hibernate不同"></a>2.3    与hibernate不同</h2><p>Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句，不过mybatis可以通过XML或注解方式灵活配置要运行的sql语句，并将java对象和sql语句映射生成最终执行的sql，最后将sql执行的结果再映射生成java对象。</p><p>Mybatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一但需求变化要求成果输出迅速。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大。</p><p>Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的学习门槛高，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。</p><p>总之，按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好的软件架构都是好架构，所以框架只有适合才是最好。 </p><h2 id="2-4-Mybatis与iBatis的主要差异对比"><a href="#2-4-Mybatis与iBatis的主要差异对比" class="headerlink" title="2.4    Mybatis与iBatis的主要差异对比"></a>2.4    Mybatis与iBatis的主要差异对比</h2><p>他们都是优秀的持久层框架，MyBatis是现在最常用的持久层框架，可以动态地拼接sql语句，非常人性化，更适合编辑复杂的sql；iBatis就是MyBatis前身，他们有很多相似的地方</p><p>1、传入参数</p><p>iBatis是parameterClass，而MyBatis是可以不写的，也可以用parameterType,parameterClass</p><p>iBatis的传出参数关键字是resultClass，而MyBatis是resultMap</p><p>2、判断语句</p><p>对于MyBatis的很简单，只要在where或者if标签里面添加test=“”就可以了，里面写判断条件。</p><p>但是iBatis的就麻烦了许多了，它将每个方法都进行了封装。例如isNull：判断字段是否为null</p><p>3、循环的使用</p><p>iBatis是使用Iterate，而MyBatis使用的是ForEach方法</p><p>4、MyBatis实现了DAO接口与xml映射文件的绑定，使用更加方便</p><h1 id="3-MyBatis-框架快速入门"><a href="#3-MyBatis-框架快速入门" class="headerlink" title="3.    MyBatis 框架快速入门"></a>3.    MyBatis 框架快速入门</h1><h2 id="3-1-Mybatis-框架开发的准备"><a href="#3-1-Mybatis-框架开发的准备" class="headerlink" title="3.1    Mybatis  框架开发的准备"></a>3.1    Mybatis  框架开发的准备</h2><h3 id="3-1-1-官网下载-Mybatis-框架"><a href="#3-1-1-官网下载-Mybatis-框架" class="headerlink" title="3.1.1    官网下载 Mybatis  框架"></a>3.1.1    官网下载 Mybatis  框架</h3><p>从百度中“mybatis download”可以下载最新的 Mybatis 开发包。<a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/</a></p><p><img src="https://ae01.alicdn.com/kf/H5c24786d0038462ea19ae8dbc650be088.jpg" alt="image-20200625113946413"></p><p>进入选择语言的界面，进入中文版本的开发文档。</p><p><img src="https://ae01.alicdn.com/kf/H24d2713884b74dcd93d65664b22faa56t.jpg" alt="image-20200625114008670"></p><p>下载相关的 jar 包或 maven 开发的坐标。</p><p><img src="https://ae01.alicdn.com/kf/H399072c1d6c64ee09b52c553df5d3b27y.jpg" alt="image-20200625114028795"></p><h2 id="3-2-搭建-Mybatis-开发环境"><a href="#3-2-搭建-Mybatis-开发环境" class="headerlink" title="3.2    搭建 Mybatis 开发环境"></a>3.2    搭建 Mybatis 开发环境</h2><h3 id="3-2-1-创建-maven-工程"><a href="#3-2-1-创建-maven-工程" class="headerlink" title="3.2.1     创建 maven  工程"></a>3.2.1     创建 maven  工程</h3><p>创建 MyBatis01 的工程，工程信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBatis01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-添加-Mybatis3-4-5-的坐标"><a href="#3-2-2-添加-Mybatis3-4-5-的坐标" class="headerlink" title="3.2.2    添加 Mybatis3.4.5 的坐标"></a>3.2.2    添加 Mybatis3.4.5 的坐标</h3><p>在 pom.xml 文件中添加 Mybatis3.4.5 的坐标，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-log4j-properties"><a href="#3-2-3-log4j-properties" class="headerlink" title="3.2.3    log4j.properties"></a>3.2.3    log4j.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console</span></span><br><span class="line"><span class="meta">log4j.additivity.org.apache</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 控制台(console)</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.ImmediateFlush</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写-User-实体类"><a href="#3-2-4-编写-User-实体类" class="headerlink" title="3.2.4    编写 User  实体类"></a>3.2.4    编写 User  实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-编写持久层口接口-IUserDao"><a href="#3-2-5-编写持久层口接口-IUserDao" class="headerlink" title="3.2.5    编写持久层口接口 IUserDao"></a>3.2.5    编写持久层口接口 IUserDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-编写持久层接口的件映射文件-IUserDao-xml"><a href="#3-2-6-编写持久层接口的件映射文件-IUserDao-xml" class="headerlink" title="3.2.6    编写持久层接口的件映射文件 IUserDao.xml"></a>3.2.6    编写持久层接口的件映射文件 IUserDao.xml</h3><p>创建位置：必须和持久层接口在相同的包中。<br>名称：必须以持久层接口名称命名文件名，扩展名是.xml</p><p><img src="https://ae01.alicdn.com/kf/H5bae1d80c12045eaab7a85fb20f77a90v.jpg" alt="image-20200625115818888"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.wgy.dao.IUserDao&quot;&gt;</span><br><span class="line">    &lt;!--配置查询所有--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;com.wgy.domain.User&quot;&gt;</span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-7-编写-SqlMapConfig-xml"><a href="#3-2-7-编写-SqlMapConfig-xml" class="headerlink" title="3.2.7    编写 SqlMapConfig.xml"></a>3.2.7    编写 SqlMapConfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!-- mybatis的主配置文件 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 配置环境 --&gt;</span><br><span class="line">    &lt;environments default&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">        &lt;!-- 配置mysql的环境--&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型--&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!-- 配置数据源（连接池） --&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;!-- 配置连接数据库的4个基本信息 --&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;com&#x2F;wgy&#x2F;dao&#x2F;IUserDao.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-8-编写测试类"><a href="#3-2-8-编写测试类" class="headerlink" title="3.2.8    编写测试类"></a>3.2.8    编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis的入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-基于注解的-mybatis-使用"><a href="#3-3-基于注解的-mybatis-使用" class="headerlink" title="3.3    基于注解的 mybatis 使用"></a>3.3    基于注解的 mybatis 使用</h2><h3 id="3-3-1-在持久层接口中添加注解"><a href="#3-3-1-在持久层接口中添加注解" class="headerlink" title="3.3.1    在持久层接口中添加注解"></a>3.3.1    在持久层接口中添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-修改-SqlMapConfig-xml"><a href="#3-3-2-修改-SqlMapConfig-xml" class="headerlink" title="3.3.2    修改 SqlMapConfig.xml"></a>3.3.2    修改 SqlMapConfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件</span><br><span class="line">    如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class&#x3D;&quot;com.wgy.dao.IUserDao&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>注意事项：在使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（IUserDao.xml） 。</p><h1 id="4-自定义-Mybatis-框架"><a href="#4-自定义-Mybatis-框架" class="headerlink" title="4.    自定义 Mybatis 框架"></a>4.    自定义 Mybatis 框架</h1><h2 id="4-1-自定义-Mybatis-框架的分析"><a href="#4-1-自定义-Mybatis-框架的分析" class="headerlink" title="4.1    自定义 Mybatis  框架的分析"></a>4.1    自定义 Mybatis  框架的分析</h2><h3 id="4-1-1-涉及知识点介绍"><a href="#4-1-1-涉及知识点介绍" class="headerlink" title="4.1.1    涉及知识点介绍"></a>4.1.1    涉及知识点介绍</h3><p>构建一个属于自己的持久层框架，将会涉及到的一些知识点：工厂模式（Factory 工厂模式） 、构造者模式（Builder 模式）、代理模式，反射，自定义注解，注解的反射，xml 解析，数据库元数据，元数据的反射等。</p><h3 id="4-1-2-分析流程"><a href="#4-1-2-分析流程" class="headerlink" title="4.1.2    分析流程"></a>4.1.2    分析流程</h3><p><img src="https://ae01.alicdn.com/kf/He454d414dab74f23acb0d9004a07f56ar.jpg" alt="image-20200625143454304"></p><p><img src="https://ae01.alicdn.com/kf/H400748eb4d05476bbcc2d124504b0be53.jpg" alt="image-20200625143533102"></p><p><img src="https://ae01.alicdn.com/kf/H5fe9323241ef46e7892f90d87a41302aT.jpg" alt="image-20200625143552725"></p><h2 id="4-2-前期准备"><a href="#4-2-前期准备" class="headerlink" title="4.2    前期准备"></a>4.2    前期准备</h2><h3 id="4-2-1-创建-Maven-工程"><a href="#4-2-1-创建-Maven-工程" class="headerlink" title="4.2.1    创建 Maven 工程"></a>4.2.1    创建 Maven 工程</h3><p>创建 MyBatis04_Design 的工程，工程信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBatis04_Design<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-引入相关坐标"><a href="#4-2-2-引入相关坐标" class="headerlink" title="4.2.2    引入相关坐标"></a>4.2.2    引入相关坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解析 xml 的 dom4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dom4j 的依赖包 jaxen --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-引入-工具类到项目中"><a href="#4-2-3-引入-工具类到项目中" class="headerlink" title="4.2.3    引入 工具类到项目中"></a>4.2.3    引入 工具类到项目中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于解析配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLConfigBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析主配置文件，把里面的内容填充到DefaultSqlSession所需要的地方</span></span><br><span class="line"><span class="comment">     * 使用的技术：</span></span><br><span class="line"><span class="comment">     * dom4j+xpath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Configuration <span class="title">loadConfiguration</span><span class="params">(InputStream config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//定义封装连接信息的配置对象（mybatis的配置对象）</span></span><br><span class="line">            Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取SAXReader对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取Document对象</span></span><br><span class="line">            Document document = reader.read(config);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.使用xpath中选择指定节点的方式，获取所有property节点</span></span><br><span class="line">            List&lt;Element&gt; propertyElements = root.selectNodes(<span class="string">"//property"</span>);</span><br><span class="line">            <span class="comment">//5.遍历节点</span></span><br><span class="line">            <span class="keyword">for</span> (Element propertyElement : propertyElements) &#123;</span><br><span class="line">                <span class="comment">//判断节点是连接数据库的哪部分信息</span></span><br><span class="line">                <span class="comment">//取出name属性的值</span></span><br><span class="line">                String name = propertyElement.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"driver"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示驱动</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String driver = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setDriver(driver);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"url"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示连接字符串</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String url = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setUrl(url);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"username"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示用户名</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String username = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setUsername(username);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"password"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示密码</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String password = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setPassword(password);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出mappers中的所有mapper标签，判断他们使用了resource还是class属性</span></span><br><span class="line">            List&lt;Element&gt; mapperElements = root.selectNodes(<span class="string">"//mappers/mapper"</span>);</span><br><span class="line">            <span class="comment">//遍历集合</span></span><br><span class="line">            <span class="keyword">for</span> (Element mapperElement : mapperElements) &#123;</span><br><span class="line">                <span class="comment">//判断mapperElement使用的是哪个属性</span></span><br><span class="line">                Attribute attribute = mapperElement.attribute(<span class="string">"resource"</span>);</span><br><span class="line">                <span class="keyword">if</span> (attribute != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"使用的是XML"</span>);</span><br><span class="line">                    <span class="comment">//表示有resource属性，用的是XML</span></span><br><span class="line">                    <span class="comment">//取出属性的值</span></span><br><span class="line">                    <span class="comment">//获取属性的值"com/wgy/dao/IUserDao.xml"</span></span><br><span class="line">                    String mapperPath = attribute.getValue();</span><br><span class="line">                    <span class="comment">//把映射配置文件的内容获取出来，封装成一个map</span></span><br><span class="line">                    Map&lt;String, Mapper&gt; mappers = loadMapperConfiguration(mapperPath);</span><br><span class="line">                    <span class="comment">//给configuration中的mappers赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"使用的是注解"</span>);</span><br><span class="line">                    <span class="comment">//表示没有resource属性，用的是注解</span></span><br><span class="line">                    <span class="comment">//获取class属性的值</span></span><br><span class="line">                    String daoClassPath = mapperElement.attributeValue(<span class="string">"class"</span>);</span><br><span class="line">                    <span class="comment">//根据daoClassPath获取封装的必要信息</span></span><br><span class="line">                    Map&lt;String, Mapper&gt; mappers = loadMapperAnnotation(daoClassPath);</span><br><span class="line">                    <span class="comment">//给configuration中的mappers赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回Configuration</span></span><br><span class="line">            <span class="keyword">return</span> cfg;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                config.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，解析XML，并且封装到Map中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapperPath 映射配置文件的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map中包含了获取的唯一标识（key是由dao的全限定类名和方法名组成）</span></span><br><span class="line"><span class="comment">     * 以及执行所需的必要信息（value是一个Mapper对象，里面存放的是执行的SQL语句和要封装的实体类全限定类名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Mapper&gt; <span class="title">loadMapperConfiguration</span><span class="params">(String mapperPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//定义返回值对象</span></span><br><span class="line">            Map&lt;String, Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line">            <span class="comment">//1.根据路径获取字节输入流</span></span><br><span class="line">            in = Resources.getResourceAsStream(mapperPath);</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取Document对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(in);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.获取根节点的namespace属性取值</span></span><br><span class="line">            <span class="comment">//是组成map中key的部分</span></span><br><span class="line">            String namespace = root.attributeValue(<span class="string">"namespace"</span>);</span><br><span class="line">            <span class="comment">//5.获取所有的select节点</span></span><br><span class="line">            List&lt;Element&gt; selectElements = root.selectNodes(<span class="string">"//select"</span>);</span><br><span class="line">            <span class="comment">//6.遍历select节点集合</span></span><br><span class="line">            <span class="keyword">for</span> (Element selectElement : selectElements) &#123;</span><br><span class="line">                <span class="comment">//取出id属性的值      组成map中key的部分</span></span><br><span class="line">                String id = selectElement.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                <span class="comment">//取出resultType属性的值  组成map中value的部分</span></span><br><span class="line">                String resultType = selectElement.attributeValue(<span class="string">"resultType"</span>);</span><br><span class="line">                <span class="comment">//取出文本内容            组成map中value的部分</span></span><br><span class="line">                String queryString = selectElement.getText();</span><br><span class="line">                <span class="comment">//创建Key</span></span><br><span class="line">                String key = namespace + <span class="string">"."</span> + id;</span><br><span class="line">                <span class="comment">//创建Value</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                mapper.setResultType(resultType);</span><br><span class="line">                <span class="comment">//把key和value存入mappers中</span></span><br><span class="line">                mappers.put(key, mapper);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mappers;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，得到dao中所有被select注解标注的方法。</span></span><br><span class="line"><span class="comment">     * 根据方法名称和类名，以及方法上注解value属性的值，组成Mapper的必要信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoClassPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Mapper&gt; <span class="title">loadMapperAnnotation</span><span class="params">(String daoClassPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义返回值对象</span></span><br><span class="line">        Map&lt;String, Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.得到dao接口的字节码对象</span></span><br><span class="line">        Class daoClass = Class.forName(daoClassPath);</span><br><span class="line">        <span class="comment">//2.得到dao接口中的方法数组</span></span><br><span class="line">        Method[] methods = daoClass.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历Method数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//取出每一个方法，判断是否有select注解</span></span><br><span class="line">            <span class="keyword">boolean</span> isAnnotated = method.isAnnotationPresent(Select<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (isAnnotated) &#123;</span><br><span class="line">                <span class="comment">//创建Mapper对象</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                <span class="comment">//取出注解的value属性值</span></span><br><span class="line">                Select selectAnno = method.getAnnotation(Select<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String queryString = selectAnno.value();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                <span class="comment">//获取当前方法的返回值，还要求必须带有泛型信息</span></span><br><span class="line">                <span class="comment">//List&lt;User&gt;</span></span><br><span class="line">                Type type = method.getGenericReturnType();</span><br><span class="line">                <span class="comment">//判断type是不是参数化的类型</span></span><br><span class="line">                <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                    <span class="comment">//强转</span></span><br><span class="line">                    ParameterizedType ptype = (ParameterizedType) type;</span><br><span class="line">                    <span class="comment">//得到参数化类型中的实际类型参数</span></span><br><span class="line">                    Type[] types = ptype.getActualTypeArguments();</span><br><span class="line">                    <span class="comment">//取出第一个</span></span><br><span class="line">                    Class domainClass = (Class) types[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">//获取domainClass的类名</span></span><br><span class="line">                    String resultType = domainClass.getName();</span><br><span class="line">                    <span class="comment">//给Mapper赋值</span></span><br><span class="line">                    mapper.setResultType(resultType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//组装key的信息</span></span><br><span class="line">                <span class="comment">//获取方法的名称</span></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                String className = method.getDeclaringClass().getName();</span><br><span class="line">                String key = className + <span class="string">"."</span> + methodName;</span><br><span class="line">                <span class="comment">//给map赋值</span></span><br><span class="line">                mappers.put(key, mapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 责执行SQL语句，并且封装结果集</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(Mapper mapper, Connection conn)</span> </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.取出mapper中的数据</span></span><br><span class="line">            <span class="comment">//select * from user</span></span><br><span class="line">            String queryString = mapper.getQueryString();</span><br><span class="line">            <span class="comment">//com.wgy.domain.User</span></span><br><span class="line">            String resultType = mapper.getResultType();</span><br><span class="line">            Class domainClass = Class.forName(resultType);</span><br><span class="line">            <span class="comment">//2.获取PreparedStatement对象</span></span><br><span class="line">            pstm = conn.prepareStatement(queryString);</span><br><span class="line">            <span class="comment">//3.执行SQL语句，获取结果集</span></span><br><span class="line">            rs = pstm.executeQuery();</span><br><span class="line">            <span class="comment">//4.封装结果集</span></span><br><span class="line">            <span class="comment">//定义返回值</span></span><br><span class="line">            List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">//实例化要封装的实体类对象</span></span><br><span class="line">                E obj = (E) domainClass.newInstance();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//取出结果集的元信息：ResultSetMetaData</span></span><br><span class="line">                ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">                <span class="comment">//取出总列数</span></span><br><span class="line">                <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">                <span class="comment">//遍历总列数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">//获取每列的名称，列名的序号是从1开始的</span></span><br><span class="line">                    String columnName = rsmd.getColumnName(i);</span><br><span class="line">                    <span class="comment">//根据得到列名，获取每列的值</span></span><br><span class="line">                    Object columnValue = rs.getObject(columnName);</span><br><span class="line">                    <span class="comment">//给obj赋值：使用Java内省机制（借助PropertyDescriptor实现属性的封装）</span></span><br><span class="line">                    <span class="comment">//要求：实体类的属性和数据库表的列名保持一种</span></span><br><span class="line">                    PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(columnName, domainClass);</span><br><span class="line">                    <span class="comment">//获取它的写入方法</span></span><br><span class="line">                    Method writeMethod = pd.getWriteMethod();</span><br><span class="line">                    <span class="comment">//把获取的列的值，给对象赋值</span></span><br><span class="line">                    writeMethod.invoke(obj, columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//把赋好值的对象加入到集合中</span></span><br><span class="line">                list.add(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            release(pstm, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(PreparedStatement pstm, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pstm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pstm.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建数据源的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于获取一个连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(cfg.getDriver());</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(cfg.getUrl(), cfg.getUsername(), cfg.getPassword());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-4-编写-SqlMapConfig-xml"><a href="#4-2-4-编写-SqlMapConfig-xml" class="headerlink" title="4.2.4    编写 SqlMapConfig.xml"></a>4.2.4    编写 SqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/wgy/dao/IUserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：此处我们直接使用的是 mybatis 的配置文件，但是由于我们没有使用 mybatis 的 jar 包，所以要把配置文件的约束删掉否则会报错（如果电脑能接入互联网，不删也行）</p><h3 id="4-2-5-编写读取配置文件类"><a href="#4-2-5-编写读取配置文件类" class="headerlink" title="4.2.5    编写读取配置文件类"></a>4.2.5    编写读取配置文件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用类加载器读取配置文件的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resources</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，获取一个字节输入流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Resources<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResourceAsStream</span>(<span class="title">filePath</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-6-编写-Mapper-类"><a href="#4-2-6-编写-Mapper-类" class="headerlink" title="4.2.6    编写 Mapper 类"></a>4.2.6    编写 Mapper 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于封装执行的SQL语句和结果类型的全限定类名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL</span></span><br><span class="line">    <span class="keyword">private</span> String queryString;</span><br><span class="line">    <span class="comment">//实体类的全限定类名</span></span><br><span class="line">    <span class="keyword">private</span> String resultType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQueryString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queryString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryString</span><span class="params">(String queryString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queryString = queryString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultType</span><span class="params">(String resultType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultType = resultType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-7-编写-Configuration-配置类"><a href="#4-2-7-编写-Configuration-配置类" class="headerlink" title="4.2.7    编写 Configuration 配置类"></a>4.2.7    编写 Configuration 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义mybatis的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Mapper&gt; <span class="title">getMappers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMappers</span><span class="params">(Map&lt;String, Mapper&gt; mappers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处需要使用追加的方式</span></span><br><span class="line">        <span class="keyword">this</span>.mappers.putAll(mappers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-8-编写-User-实体类"><a href="#4-2-8-编写-User-实体类" class="headerlink" title="4.2.8    编写 User  实体类"></a>4.2.8    编写 User  实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-基于-XML-的自定义-mybatis-框架"><a href="#4-3-基于-XML-的自定义-mybatis-框架" class="headerlink" title="4.3    基于 XML  的自定义 mybatis  框架"></a>4.3    基于 XML  的自定义 mybatis  框架</h2><h3 id="4-3-1-编写持久层接口和-IUserDao-xml"><a href="#4-3-1-编写持久层接口和-IUserDao-xml" class="headerlink" title="4.3.1    编写持久层接口和 IUserDao.xml"></a>4.3.1    编写持久层接口和 IUserDao.xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：此处我们使用的也是 mybatis 的配置文件，所以也要把约束删除了</p><h3 id="4-3-2-编写构建者类"><a href="#4-3-2-编写构建者类" class="headerlink" title="4.3.2    编写构建者类"></a>4.3.2    编写构建者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建一个SqlSessionFactory对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数的字节输入流来构建一个SqlSessionFactory工厂</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream config)</span> </span>&#123;</span><br><span class="line">        Configuration cfg = XMLConfigBuilder.loadConfiguration(config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-编写-SqlSessionFactory-接口和实现类"><a href="#4-3-3-编写-SqlSessionFactory-接口和实现类" class="headerlink" title="4.3.3    编写 SqlSessionFactory 接口和实现类"></a>4.3.3    编写 SqlSessionFactory 接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于打开一个新的SqlSession对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSessionFactory接口的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSessionFactory</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建一个新的操作数据库对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-编写-SqlSession-接口和实现类"><a href="#4-3-4-编写-SqlSession-接口和实现类" class="headerlink" title="4.3.4    编写 SqlSession  接口和实现类"></a>4.3.4    编写 SqlSession  接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Mybatis中和数据库交互的核心类</span></span><br><span class="line"><span class="comment"> * 它里面可以创建dao接口的代理对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数创建一个代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoInterfaceClass dao的接口字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoInterfaceClass)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSession接口的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSession</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">        connection = DataSourceUtil.getConnection(cfg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoInterfaceClass dao的接口字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoInterfaceClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(daoInterfaceClass.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;daoInterfaceClass&#125;, <span class="keyword">new</span> MapperProxy(cfg.getMappers(), connection));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-编写用于创建-Dao-接口代理对象的类"><a href="#4-3-5-编写用于创建-Dao-接口代理对象的类" class="headerlink" title="4.3.5    编写用于创建 Dao 接口代理对象的类"></a>4.3.5    编写用于创建 Dao 接口代理对象的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map的key是全限定类名+方法名</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Mapper&gt; mappers;</span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperProxy</span><span class="params">(Map&lt;String, Mapper&gt; mappers, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappers = mappers;</span><br><span class="line">        <span class="keyword">this</span>.conn = conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于对方法进行增强的，我们的增强其实就是调用selectList方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取方法名</span></span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="comment">//2.获取方法所在类的名称</span></span><br><span class="line">        String className = method.getDeclaringClass().getName();</span><br><span class="line">        <span class="comment">//3.组合key</span></span><br><span class="line">        String key = className + <span class="string">"."</span> + methodName;</span><br><span class="line">        <span class="comment">//4.获取mappers中的Mapper对象</span></span><br><span class="line">        Mapper mapper = mappers.get(key);</span><br><span class="line">        <span class="comment">//5.判断是否有mapper</span></span><br><span class="line">        <span class="keyword">if</span> (mapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"传入的参数有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.调用工具类执行查询所有</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Executor().selectList(mapper, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-6-运行测试类"><a href="#4-3-6-运行测试类" class="headerlink" title="4.3.6    运行测试类"></a>4.3.6    运行测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis的入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-基于注解方式定义-Mybatis-框架"><a href="#4-4-基于注解方式定义-Mybatis-框架" class="headerlink" title="4.4    基于注解方式定义 Mybatis  框架"></a>4.4    基于注解方式定义 Mybatis  框架</h2><h3 id="4-4-1-自定义-Select-注解"><a href="#4-4-1-自定义-Select-注解" class="headerlink" title="4.4.1    自定义@Select 注解"></a>4.4.1    自定义@Select 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询的注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Select &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置SQL语句的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-修改持久层接口"><a href="#4-4-2-修改持久层接口" class="headerlink" title="4.4.2    修改持久层接口"></a>4.4.2    修改持久层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-修改-SqlMapConfig-xml"><a href="#4-4-3-修改-SqlMapConfig-xml" class="headerlink" title="4.4.3    修改 SqlMapConfig.xml"></a>4.4.3    修改 SqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.IUserDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-单独使用jdbc编程问题总结&quot;&gt;&lt;a href=&quot;#1-单独使用jdbc编程问题总结&quot; class=&quot;headerlink&quot; title=&quot;1.    单独使用jdbc编程问题总结&quot;&gt;&lt;/a&gt;1.    单独使用jdbc编程问题总结&lt;/h1&gt;&lt;h2 id=&quot;1-1-jdbc编程步骤&quot;&gt;&lt;a href=&quot;#1-1-jdbc编程步骤&quot; class=&quot;headerlink&quot; title=&quot;1.1    jdbc编程步骤&quot;&gt;&lt;/a&gt;1.1    jdbc编程步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;加载数据库驱动&lt;/li&gt;
&lt;li&gt;创建并获取数据库链接&lt;/li&gt;
&lt;li&gt;创建jdbc statement对象&lt;/li&gt;
&lt;li&gt;设置sql语句&lt;/li&gt;
&lt;li&gt;设置sql语句中的参数(使用preparedStatement)&lt;/li&gt;
&lt;li&gt;通过statement执行sql并获取结果&lt;/li&gt;
&lt;li&gt;对sql执行结果进行解析处理&lt;/li&gt;
&lt;li&gt;释放资源(resultSet、preparedstatement、connection)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Maven(三)</title>
    <link href="https://wgy1993.gitee.io/archives/898b4292.html"/>
    <id>https://wgy1993.gitee.io/archives/898b4292.html</id>
    <published>2020-06-18T16:03:44.000Z</published>
    <updated>2020-06-22T16:07:14.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-maven-私服"><a href="#1-maven-私服" class="headerlink" title="1.    maven  私服"></a>1.    maven  私服</h1><h2 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1    需求"></a>1.1    需求</h2><p>正式开发，不同的项目组开发不同的工程。</p><p>ssm_dao  工程开发完毕，发布到私服。</p><p>ssm_service 从私服下载 dao</p><a id="more"></a><h2 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2    分析"></a>1.2    分析</h2><p>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服，私服服务器即是公司内部的 maven 远程仓库，每个员工的电脑上安装 maven 软件并且连接私服服务器，员工将自己开发的项目打成 jar 并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（jar）。</p><p>私服还充当一个代理服务器，当私服上没有 jar 包会从互联网中央仓库自动下载，如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hf6d137d93d4243d98b03b5f4454979c4f.jpg" alt="image-20200622223516203"></p><h2 id="1-3-搭建私服环境"><a href="#1-3-搭建私服环境" class="headerlink" title="1.3    搭建私服环境"></a>1.3    搭建私服环境</h2><h3 id="1-3-1-下载-nexus"><a href="#1-3-1-下载-nexus" class="headerlink" title="1.3.1    下载 nexus"></a>1.3.1    下载 nexus</h3><p>Nexus 是 Maven 仓库管理器，通过 nexus 可以搭建 maven 仓库，同时 nexus 还提供强 大的仓库管理功能，构件搜索功能等。</p><p>下载 Nexus， 下载地址：<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">https://www.sonatype.com/download-oss-sonatype</a></p><p><img src="https://ae01.alicdn.com/kf/He85e1b83621c45bbb4988ccb9e7acd732.jpg" alt="image-20200622224900614"></p><h3 id="1-3-2-安装-nexus"><a href="#1-3-2-安装-nexus" class="headerlink" title="1.3.2     安装 nexus"></a>1.3.2     安装 nexus</h3><p>解压 nexus-2.12.0-01-bundle.zip，本教程将它解压在 F 盘，进入 bin 目录：</p><p><img src="https://ae01.alicdn.com/kf/He7a3e8baa92b4560bd0b1c9ff2bf041bS.jpg" alt="image-20200622224951199"></p><p>cmd进入 bin目录，执行 nexus.bat install</p><p><img src="https://ae01.alicdn.com/kf/Hf263300d9af8427bb76c1bb871c6e52aE.jpg" alt="image-20200622225009545"></p><p>安装成功在服务中查看有 nexus 服务：</p><p><img src="https://ae01.alicdn.com/kf/H71b88be8899b439daa5c6bec45d7f0a4T.jpg" alt="image-20200622225019659"></p><h3 id="1-3-3-卸载-nexus"><a href="#1-3-3-卸载-nexus" class="headerlink" title="1.3.3    卸载 nexus"></a>1.3.3    卸载 nexus</h3><p>cmd 进入 nexus 的 bin 目录，执行：nexus.bat uninstall</p><p><img src="https://ae01.alicdn.com/kf/H84ddd283496c4114a93469da2f6d539aY.jpg" alt="image-20200622225057654"></p><p>查看 window 服务列表 nexus 已被删除。</p><h3 id="1-3-4-启动-nexus"><a href="#1-3-4-启动-nexus" class="headerlink" title="1.3.4    启动 nexus"></a>1.3.4    启动 nexus</h3><p>方法 1：cmd 进入 bin 目录，执行 nexus.bat start</p><p>方法 2：直接启动 nexus 服务</p><p><img src="https://ae01.alicdn.com/kf/H64bae123c3a249c6949a394ccca8e692H.jpg" alt="image-20200622225149127"></p><h4 id="1-3-4-1-查看-nexus-的配置文件"><a href="#1-3-4-1-查看-nexus-的配置文件" class="headerlink" title="1.3.4.1    查看 nexus 的配置文件"></a>1.3.4.1    查看 nexus 的配置文件</h4><p>conf/nexus.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jetty section</span></span><br><span class="line"><span class="meta">application-port</span>=<span class="string">8081# nexus 的访问端口配置 </span></span><br><span class="line"><span class="meta">application-host</span>=<span class="string">0.0.0.0# nexus 主机监听配置(不用修改) </span></span><br><span class="line"><span class="meta">nexus-webapp</span>=<span class="string">$&#123;bundleBasedir&#125;/nexus# nexus 工程目录 </span></span><br><span class="line"><span class="meta">nexus-webapp-context-path</span>=<span class="string">/nexus# nexus 的 web 访问路径</span></span><br><span class="line"><span class="comment"># Nexus section</span></span><br><span class="line"><span class="meta">nexus-work</span>=<span class="string">$&#123;bundleBasedir&#125;/../sonatype-work/nexus# nexus 仓库目录</span></span><br><span class="line"><span class="attr">runtime</span>=<span class="string">$&#123;bundleBasedir&#125;/nexus/WEB-INF# nexus 运行程序目录</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-2-访问"><a href="#1-3-4-2-访问" class="headerlink" title="1.3.4.2    访问"></a>1.3.4.2    访问</h4><p><a href="http://localhost:8081/nexus/" target="_blank" rel="noopener">http://localhost:8081/nexus/</a></p><p><img src="https://ae01.alicdn.com/kf/H4bad14b907d642cf9063f9995438431aU.jpg" alt="image-20200622225644507"></p><h4 id="1-3-4-3-使用-Nexus-内置账户登陆"><a href="#1-3-4-3-使用-Nexus-内置账户登陆" class="headerlink" title="1.3.4.3    使用 Nexus 内置账户登陆"></a>1.3.4.3    使用 Nexus 内置账户登陆</h4><p>点击右上角的 Log in，输入账号和密码登陆 admin/admin123</p><p><img src="https://ae01.alicdn.com/kf/H7af81e99f3a2417dbed4747a46b05630y.jpg" alt="image-20200622225720362"></p><p>登陆成功：</p><p><img src="https://ae01.alicdn.com/kf/H0cd66fb1258f4642a954072a9db9f48ep.jpg" alt="image-20200622225729597"></p><h3 id="1-3-5-仓库类型"><a href="#1-3-5-仓库类型" class="headerlink" title="1.3.5    仓库类型"></a>1.3.5    仓库类型</h3><h4 id="1-3-5-1-查看-nexus-的仓库"><a href="#1-3-5-1-查看-nexus-的仓库" class="headerlink" title="1.3.5.1    查看 nexus 的仓库"></a>1.3.5.1    查看 nexus 的仓库</h4><p><img src="https://ae01.alicdn.com/kf/H98941c25972f4a869ed7ebf71dcd7bf4w.jpg" alt="image-20200622225811553"></p><h4 id="1-3-5-2-nexus-的仓库有-4-种类型"><a href="#1-3-5-2-nexus-的仓库有-4-种类型" class="headerlink" title="1.3.5.2    nexus 的仓库有 4 种类型"></a>1.3.5.2    nexus 的仓库有 4 种类型</h4><p><img src="https://ae01.alicdn.com/kf/Hea19109a788d4a29923f6b69ea308a7bo.jpg" alt="image-20200622225902586"></p><p>1、hosted，宿主仓库，部署自己的 jar 到这个类型的仓库，包括 releases 和 snapshot 两部 分，Releases 公司内部发布版本仓库、 Snapshots 公司内部测试版本仓库</p><p>2、proxy，代理仓库，用于代理远程的公共仓库，如 maven  中央仓库，用户连接私服，私服自动去中央仓库下载 jar  包或者插件。</p><p>3、group，仓库组，用来合并多个 hosted/proxy 仓库，通常我们配置自己的 maven  连接仓库组。</p><p>4、virtual(虚拟)：兼容 Maven1 版本的 jar 或者插件</p><h4 id="1-3-5-3-nexus-仓库目录"><a href="#1-3-5-3-nexus-仓库目录" class="headerlink" title="1.3.5.3    nexus 仓库目录"></a>1.3.5.3    nexus 仓库目录</h4><p>默认在 sonatype-work 目录中：</p><p><img src="https://ae01.alicdn.com/kf/H08919fdf104e4a6a87ed4c3ef82841f9y.jpg" alt="image-20200622230218638"></p><ul><li><p>central：代理仓库，代理中央仓库</p><p><img src="https://ae01.alicdn.com/kf/H03cbe9db027f498088c414da89557c921.jpg" alt="image-20200622231040336"></p></li><li><p>apache-snapshots：代理仓库，存储 snapshots  构件，代理地址 <a href="https://repository.apache.org/snapshots/" target="_blank" rel="noopener">https://repository.apache.org/snapshots/</a></p></li><li><p>central-m1：virtual 类型仓库，兼容 Maven1 版本的 jar 或者插件</p></li><li><p>releases：本地仓库，存储 releases  构件。</p></li><li><p>snapshots：本地仓库，存储snapshots  构件。</p></li><li><p>thirdparty：第三方仓库</p></li><li><p>public：仓库组</p></li></ul><h2 id="1-4-将项目发布到私服"><a href="#1-4-将项目发布到私服" class="headerlink" title="1.4    将项目发布到私服"></a>1.4    将项目发布到私服</h2><h3 id="1-4-1-需求"><a href="#1-4-1-需求" class="headerlink" title="1.4.1    需求"></a>1.4.1    需求</h3><p>企业中多个团队协作开发通常会将一些公用的组件、开发模块等发布到私服供其它团队 或模块开发人员使用。</p><p>本例子假设多团队分别开发 ssm_dao、ssm_service、ssm_web，某个团队开发完在 ssm_dao 会将 ssm_dao 发布到私服供 ssm_service 团队使用，本例子会将 ssm_dao 工程打成 jar 包发布到私服。</p><p><img src="https://ae01.alicdn.com/kf/H95d4b6a81fbd42c28ffbaa26a3a8c0c9g.jpg" alt="image-20200622231358045"></p><h3 id="1-4-2-配置"><a href="#1-4-2-配置" class="headerlink" title="1.4.2    配置"></a>1.4.2    配置</h3><h4 id="1-4-2-1-修改-settings-xml文件"><a href="#1-4-2-1-修改-settings-xml文件" class="headerlink" title="1.4.2.1    修改 settings.xml文件"></a>1.4.2.1    修改 settings.xml文件</h4><p>需要在客户端即部署 ssm_dao 工程的电脑上配置 maven 环境，并修改 settings.xml文件，配置连接私服的用户和密码 。 此用户名和密码用于私服校验，因为私服需要知道上传的账号和密码是否和私服中的账号和 密码一致。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    releases   连接发布版本项目仓库</span></span><br><span class="line"><span class="comment">    snapshots 连接测试版本项目仓库</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-2-配置项目-pom-xml"><a href="#1-4-2-2-配置项目-pom-xml" class="headerlink" title="1.4.2.2    配置项目 pom.xml"></a>1.4.2.2    配置项目 pom.xml</h4><p>配置私服仓库的地址，本公司的自己的 jar 包会上传到私服的宿主仓库，根据工程的版本号决定上传到哪个宿主仓库，如果版本为 release 则上传到私服的 release 仓库，如果版本为 snapshot 则上传到私服的 snapshot 仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：pom.xml 这里<code>&lt;id&gt;</code> 和 settings.xml 配置 <code>&lt;id&gt;</code> 对应！</p><h3 id="1-4-3-测试"><a href="#1-4-3-测试" class="headerlink" title="1.4.3    测试"></a>1.4.3    测试</h3><p>将项目 dao 工程打成 jar 包发布到私服：</p><p>1、首先启动 nexus</p><p>2、对 ssm_dao 工程执行 deploy 命令</p><p>根据本项目pom.xml中version定义决定发布到哪个仓库，如果 version定义为 snapshot， 执行 deploy 后查看 nexus 的 snapshot 仓库，如果 version 定义为 release 则项目将发布到 nexus 的 release 仓库。</p><h2 id="1-5-从私服下载-jar-包"><a href="#1-5-从私服下载-jar-包" class="headerlink" title="1.5    从私服下载 jar 包"></a>1.5    从私服下载 jar 包</h2><h3 id="1-5-1-需求"><a href="#1-5-1-需求" class="headerlink" title="1.5.1    需求"></a>1.5.1    需求</h3><p>没有配置 nexus 之前，如果本地仓库没有，去中央仓库下载，通常在企业中会在局域网 内部署一台私服服务器，有了私服本地项目首先去本地仓库找 jar，如果没有找到则连接私 服从私服下载 jar 包，如果私服没有 jar 包私服同时作为代理服务器从中央仓库下载 jar 包， 这样做的好处是一方面由私服对公司项目的依赖 jar 包统一管理，一方面提高下载速度，项 目连接私服下载 jar  包的速度要比项目连接中央仓库的速度快的多。</p><p>本例子测试从私服下载 ssm_dao 工程 jar 包。</p><h3 id="1-5-2-管理仓库组"><a href="#1-5-2-管理仓库组" class="headerlink" title="1.5.2    管理仓库组"></a>1.5.2    管理仓库组</h3><p>nexus中包括很多仓库，hosted 中存放的是企业自己发布的jar包及第三方公司的 jar包， proxy 中存放的是中央仓库的 jar，为了方便从私服下载 jar 包可以将多个仓库组成一个仓库 组，每个工程需要连接私服的仓库组下载 jar  包。</p><p>打开 nexus 配置仓库组，如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hdd4727e3157141049a5196d18ac2400c0.jpg" alt="image-20200622233057735"></p><p>上图中仓库组包括了本地仓库、代理仓库等。</p><h3 id="1-5-3-在-settings-xml-中配置仓库"><a href="#1-5-3-在-settings-xml-中配置仓库" class="headerlink" title="1.5.3    在 settings.xml 中配置仓库"></a>1.5.3    在 settings.xml 中配置仓库</h3><p>在客户端的 settings.xml 中配置私服的仓库，由于 settings.xml 中没有 repositories 的配置标签需要使用 profile 定义仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--profile 的 id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--仓库 id，repositories 可以配置多个仓库，保证 id 不重复--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--仓库地址，即 nexus 仓库组的地址--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否下载 releases 构件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否下载 snapshots 构件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件仓库，maven 的运行依赖插件，也需要从私服下载插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件仓库的 id 不允许重复，如果重复后边配置会覆盖前边 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 profile  定义仓库需要激活才可生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-把第三方-jar-包放入本地仓库或私服"><a href="#2-把第三方-jar-包放入本地仓库或私服" class="headerlink" title="2.    把第三方 jar 包放入本地仓库或私服"></a>2.    把第三方 jar 包放入本地仓库或私服</h1><h2 id="2-1-导入本地库"><a href="#2-1-导入本地库" class="headerlink" title="2.1    导入本地库"></a>2.1    导入本地库</h2><p>随便找一个 jar 包测试，可以先 CMD 进入到 jar 包所在位置，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dfile&#x3D;fastjson-1.1.37.jar -Dpackaging&#x3D;jar</span><br></pre></td></tr></table></figure><h2 id="2-2-导入私服"><a href="#2-2-导入私服" class="headerlink" title="2.2    导入私服"></a>2.2    导入私服</h2><p>需要在 maven 软件的核心配置文件 settings.xml 中配置第三方仓库的 server 信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CMD执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dpackaging&#x3D;jar -Dfile&#x3D;fastjson-1.1.37.jar -Durl&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;thirdparty&#x2F; -DrepositoryId&#x3D;thirdparty</span><br></pre></td></tr></table></figure><h2 id="2-3-参数说明"><a href="#2-3-参数说明" class="headerlink" title="2.3    参数说明"></a>2.3    参数说明</h2><ul><li>DgroupId 和 DartifactId 构成了该 jar 包在 pom.xml 的坐标，项目就是依靠这两个属性定位。 自己起名字也行。</li><li>Dfile 表示需要上传的 jar 包的绝对路径。</li><li>Durl  私服上仓库的位置，打开 nexus——&gt;repositories  菜单，可以看到该路径。</li><li>DrepositoryId 服务器的表示 id，在 nexus 的 configuration 可以看到。</li><li>Dversion  表示版本信息。</li></ul><p>关于 jar  包准确的版本： 包的名字上一般会带版本号，如果没有那可以解压该包，会发现一个叫 MANIFEST.MF  的文件，这个文件就有描述该包的版本信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-maven-私服&quot;&gt;&lt;a href=&quot;#1-maven-私服&quot; class=&quot;headerlink&quot; title=&quot;1.    maven  私服&quot;&gt;&lt;/a&gt;1.    maven  私服&lt;/h1&gt;&lt;h2 id=&quot;1-1-需求&quot;&gt;&lt;a href=&quot;#1-1-需求&quot; class=&quot;headerlink&quot; title=&quot;1.1    需求&quot;&gt;&lt;/a&gt;1.1    需求&lt;/h2&gt;&lt;p&gt;正式开发，不同的项目组开发不同的工程。&lt;/p&gt;
&lt;p&gt;ssm_dao  工程开发完毕，发布到私服。&lt;/p&gt;
&lt;p&gt;ssm_service 从私服下载 dao&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Maven" scheme="https://wgy1993.gitee.io/tags/Maven/"/>
    
      <category term="项目管理" scheme="https://wgy1993.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Maven(二)</title>
    <link href="https://wgy1993.gitee.io/archives/f77862b9.html"/>
    <id>https://wgy1993.gitee.io/archives/f77862b9.html</id>
    <published>2020-06-18T14:07:00.000Z</published>
    <updated>2020-06-22T14:18:38.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-maven-构建-SSM-工程"><a href="#1-maven-构建-SSM-工程" class="headerlink" title="1.    maven 构建 SSM 工程"></a>1.    maven 构建 SSM 工程</h1><h2 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1    需求"></a>1.1    需求</h2><p>实现 SSM 工程构建，规范依赖管理。场景：根据 id 展示商品信息</p><a id="more"></a><h2 id="1-2-准备数据库"><a href="#1-2-准备数据库" class="headerlink" title="1.2    准备数据库"></a>1.2    准备数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS&#x3D;0;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for &#96;items&#96;</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;items&#96;;</span><br><span class="line">CREATE TABLE &#96;items&#96; (</span><br><span class="line">  &#96;id&#96; int(10) NOT NULL auto_increment,</span><br><span class="line">  &#96;name&#96; varchar(20) default NULL,</span><br><span class="line">  &#96;price&#96; float(10,0) default NULL,</span><br><span class="line">  &#96;pic&#96; varchar(40) default NULL,</span><br><span class="line">  &#96;createtime&#96; datetime default NULL,</span><br><span class="line">  &#96;detail&#96; varchar(200) default NULL,</span><br><span class="line">  PRIMARY KEY  (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;9 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of items</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;1&#39;, &#39;插入测试1&#39;, &#39;1000&#39;, null, &#39;2018-03-13 09:29:30&#39;, &#39;插入测试&#39;);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;2&#39;, &#39;插入测试2&#39;, null, null, &#39;2018-03-28 10:05:52&#39;, &#39;插入测试&#39;);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;3&#39;, &#39;插入测试3&#39;, &#39;199&#39;, null, &#39;2018-03-07 10:08:04&#39;, &#39;插入测试&#39;);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;4&#39;, &#39;插入测试4&#39;, null, null, null, null);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;5&#39;, &#39;插入测试5&#39;, null, null, null, null);</span><br></pre></td></tr></table></figure><h2 id="1-3-创建一个-maven-工程"><a href="#1-3-创建一个-maven-工程" class="headerlink" title="1.3    创建一个 maven 工程"></a>1.3    创建一个 maven 工程</h2><h3 id="1-3-1-新建-ssm-maven-项目-使用下图选中的骨架"><a href="#1-3-1-新建-ssm-maven-项目-使用下图选中的骨架" class="headerlink" title="1.3.1    新建 ssm_maven  项目,使用下图选中的骨架"></a>1.3.1    新建 ssm_maven  项目,使用下图选中的骨架</h3><p><img src="https://ae01.alicdn.com/kf/Hce52b84e87424381a1e221d07d3cef1cU.jpg" alt="image-20200622175249490"></p><h3 id="1-3-2-填写坐标"><a href="#1-3-2-填写坐标" class="headerlink" title="1.3.2    填写坐标"></a>1.3.2    填写坐标</h3><p><img src="https://ae01.alicdn.com/kf/Hdd18d3ecf8ee4278b3bd3cf96b6b56e5m.jpg" alt="image-20200622175420655"></p><h3 id="1-3-3-查看是否使用的自己的私服"><a href="#1-3-3-查看是否使用的自己的私服" class="headerlink" title="1.3.3    查看是否使用的自己的私服"></a>1.3.3    查看是否使用的自己的私服</h3><p><img src="https://ae01.alicdn.com/kf/Haffc087b48b3490f99140e5d1c57a5e4b.jpg" alt="image-20200622175532329"></p><h3 id="1-3-4-在-main-目录下新建-java-和-resources-文件夹"><a href="#1-3-4-在-main-目录下新建-java-和-resources-文件夹" class="headerlink" title="1.3.4    在 main 目录下新建 java 和 resources 文件夹"></a>1.3.4    在 main 目录下新建 java 和 resources 文件夹</h3><p>把 java 和 resources 文件夹转成 Sources Root和Resources Root</p><p><img src="https://ae01.alicdn.com/kf/H54a874c862714ecaaf48e8d10075ea2cg.jpg" alt="image-20200622180044272"></p><h3 id="1-3-5-修改编译版本，在-pom-xml-文件中添加"><a href="#1-3-5-修改编译版本，在-pom-xml-文件中添加" class="headerlink" title="1.3.5    修改编译版本，在 pom.xml 文件中添加"></a>1.3.5    修改编译版本，在 pom.xml 文件中添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编译版本为1.8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-知识点准备"><a href="#1-4-知识点准备" class="headerlink" title="1.4    知识点准备"></a>1.4    知识点准备</h2><h3 id="1-4-1-什么是依赖传递"><a href="#1-4-1-什么是依赖传递" class="headerlink" title="1.4.1    什么是依赖传递"></a>1.4.1    什么是依赖传递</h3><p>先添加 springmvc 的核心依赖的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会发现出现除了 spring-webmvc 以外的其他 jar。因为我们的项目依赖 spring-webmv.jar，而 spring-webmv.jar 会依赖 spring-beans.jar 等等，所以 spring-beans.jar 这些 jar 包也出现在了我 们的 maven 工程中，这种现象我们称为依赖传递。从下图中可看到他们的关系：（请注意 spring-beans 的版本）</p><p><img src="https://ae01.alicdn.com/kf/H0197f63b0d5e4149976a20fea3f8a46fX.jpg" alt="image-20200622180909581"></p><h3 id="1-4-2-依赖冲突的解决"><a href="#1-4-2-依赖冲突的解决" class="headerlink" title="1.4.2    依赖冲突的解决"></a>1.4.2    依赖冲突的解决</h3><p>接着添加一个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们会发现这两个 jar 包同时都依赖了 spring-beans</p><p>spring-webmvc 依赖 spirng-beans-4.2.4，spring-context 依赖 spring-beans-5.0.2，但是发现 spirng-beans-4.2.4  加入到工程中。而我们希望 spring-beans-5.0.2  加入工程。这就造成了依赖冲突。</p><h4 id="1-4-2-1-依赖调解原则"><a href="#1-4-2-1-依赖调解原则" class="headerlink" title="1.4.2.1    依赖调解原则"></a>1.4.2.1    依赖调解原则</h4><p>maven  自动按照下边的原则调解：</p><ul><li><p>第一声明者优先原则：</p><p> 在 pom 文件定义依赖，先声明的依赖为准。 测试：</p><p> 如果将上边 spring-webmvc 和 spring-context 顺序颠倒，系统将导入 spring-beans-5.0.2。 分析：由于 spring-webmvc 在前边以 spring-webmvc 依赖的 spring-beans-5.0.2 为准，所以最终spring-beans-5.0.2  添加到了工程中。</p></li><li><p>路径近者优先原则：</p><p> 例如：还是上述情况，spring-contex 和 spring-webmvc 都会传递过来 spirng-beans，那 如果直接把 spring-beans 的依赖直接写到 pom 文件中，那么项目就不会再使用其他依赖传 递来的 spring-beans，因为自己直接在 pom 中定义 spring-beans 要比其他依赖传递过来的路径要近。在本工程中的 pom 中加入 spirng-beans-5.0.2 的依赖，根据路径近者优先原则，系统将导入spirng-beans-5.0.2：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-2-排除依赖"><a href="#1-4-2-2-排除依赖" class="headerlink" title="1.4.2.2    排除依赖"></a>1.4.2.2    排除依赖</h4><p>上边的问题也可以通过排除依赖方法辅助依赖调解，如下：</p><p>比如在依赖 spring-webmvc 的设置中添加排除依赖，排除 spring-beans， 下边的配置表示：依赖 spring-webmvc，但排除 spring-webmvc 所依赖的 spring-beans。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-3-锁定版本"><a href="#1-4-2-3-锁定版本" class="headerlink" title="1.4.2.3    锁定版本"></a>1.4.2.3    锁定版本</h4><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优化等因素可以采用直接锁定版 本的方法确定依赖构件的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本的为准添加到工程中，此方法在企业开发中常用。</p><p>如下的配置是锁定了 spring-beans 和 spring-context 的版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以把版本号提取出来，使用<code>&lt;properties&gt;</code>标签设置成变量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在工程中锁定依赖的版本并不代表在工程中添加了依赖，如果工程需要添加锁定版本的依赖则需要单独添加<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>标签，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上边添加的依赖并没有指定版本，原因是已在<code>&lt;dependencyManagement&gt;</code>中锁定了版本， 所以在<code>&lt;dependency&gt;</code>下不需要再指定版本。</p><h2 id="1-5-定义-pom-xml"><a href="#1-5-定义-pom-xml" class="headerlink" title="1.5    定义 pom.xml"></a>1.5    定义 pom.xml</h2><p>maven 工程首先要识别依赖，web 工程实现 SSM 整合，需要依赖 spring-webmvc5.0.2、 spring5.0.2、mybatis3.4.5 等，在 pom.xml  添加工程如下依赖：</p><p>（在实际企业开发中会有架构师专门来编写 pom.xml） 分两步：</p><ol><li>锁定依赖版本</li><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.security.version</span>&gt;</span>5.0.1.RELEASE<span class="tag">&lt;/<span class="name">spring.security.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加tomcat7插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编译版本为1.8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-Dao-层"><a href="#1-6-Dao-层" class="headerlink" title="1.6    Dao 层"></a>1.6    Dao 层</h2><p>在 src/main/java 中定义 dao 接口，实现根据 id 查询商品信息：</p><h3 id="1-6-1-pojo-模型类"><a href="#1-6-1-pojo-模型类" class="headerlink" title="1.6.1    pojo 模型类"></a>1.6.1    pojo 模型类</h3><p>在 src/main/java 创建模型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-dao-层代码"><a href="#1-6-2-dao-层代码" class="headerlink" title="1.6.2    dao 层代码"></a>1.6.2    dao 层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemsDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-配置文件"><a href="#1-6-3-配置文件" class="headerlink" title="1.6.3    配置文件"></a>1.6.3    配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.ItemsDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from items</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意配置文件位置（resources下创建目录/com/wgy/dao）：</p><p><img src="https://ae01.alicdn.com/kf/Hd02581ae7ab04da9a6605f237d4c5bcbx.jpg" alt="image-20200622191738694"></p><p>在 src/main/resources 配置 log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### direct log messages to stdout ###</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5 p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"><span class="comment">### set log levels - for more verbose logging change 'info' to 'debug' ###</span></span><br><span class="line"><span class="comment">#在开发阶段日志级别使用 debug</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug, stdout</span></span><br></pre></td></tr></table></figure><p>在 src/main/resources 创建 applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件开始--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///maven"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置生产SqlSession对象的工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描pojo包，给包下所有pojo对象起别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-4-单元测试"><a href="#1-6-4-单元测试" class="headerlink" title="1.6.4    单元测试"></a>1.6.4    单元测试</h3><p>在 src/test/java 创建单元测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//dao测试</span></span><br><span class="line">        <span class="comment">//从容器中拿到所需的dao的代理对象</span></span><br><span class="line">        ItemsDao itemsDao = ac.getBean(ItemsDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        Items items = itemsDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(items.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-Service-层"><a href="#1-7-Service-层" class="headerlink" title="1.7    Service 层"></a>1.7    Service 层</h2><h3 id="1-7-1-代码"><a href="#1-7-1-代码" class="headerlink" title="1.7.1    代码"></a>1.7.1    代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemsDao itemsDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemsDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-2-配置文件"><a href="#1-7-2-配置文件" class="headerlink" title="1.7.2    配置文件"></a>1.7.2    配置文件</h3><p>在 applicationContext.xml 中配置 service</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--service层配置文件开始--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件扫描配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop面向切面编程，切面就是切入点和通知的组合--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"advice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"advice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--service层配置文件结束--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-3-单元测试"><a href="#1-7-3-单元测试" class="headerlink" title="1.7.3    单元测试"></a>1.7.3    单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//service测试</span></span><br><span class="line">        ItemsService itemsService = ac.getBean(ItemsService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        Items items = itemsService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(items.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-Web-层"><a href="#1-8-Web-层" class="headerlink" title="1.8    Web 层"></a>1.8    Web 层</h2><h3 id="1-8-1-代码"><a href="#1-8-1-代码" class="headerlink" title="1.8.1    代码"></a>1.8.1    代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/items"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemsService itemsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findDetail"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findDetail</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Items items = itemsService.findById(<span class="number">1</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"item"</span>, items);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"itemDetail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-2-配置文件"><a href="#1-8-2-配置文件" class="headerlink" title="1.8.2    配置文件"></a>1.8.2    配置文件</h3><p>在 src/main/resources 创建 springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器，处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--释放静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置web.xml，加载 spring 容器，配置 springmvc 前端控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置spring核心监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--重新指定spring配置文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc的核心servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-9-Jsp"><a href="#1-9-Jsp" class="headerlink" title="1.9    Jsp"></a>1.9    Jsp</h2><p>/WEB-INF/pages/itemDetail.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> prefix=<span class="string">"fmt"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;table width=<span class="string">"100%"</span> border=<span class="number">1</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品名称&lt;/td&gt;</span><br><span class="line">            &lt;td&gt; $&#123;item.name &#125; &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品价格&lt;/td&gt;</span><br><span class="line">            &lt;td&gt; $&#123;item.price &#125; &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;生成日期&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;fmt:formatDate value="$&#123;item.createtime&#125;" pattern="yyyy-MM-dd HH:mm:ss"/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品简介&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;item.detail&#125; &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="1-10-运行与调试"><a href="#1-10-运行与调试" class="headerlink" title="1.10    运行与调试"></a>1.10    运行与调试</h2><p>添加 tomcat7 插件，双击右侧 tomcat7 运行</p><p><img src="https://ae01.alicdn.com/kf/H1104ff0d42924829a5883accd6216c9bp.jpg" alt="image-20200622194146222"></p><p>运行结果如下：</p><p><img src="https://ae01.alicdn.com/kf/H4f38a150fe964858a9963672011104e9L.jpg" alt="image-20200622194530703"></p><h1 id="2-分模块构建工程"><a href="#2-分模块构建工程" class="headerlink" title="2.    分模块构建工程"></a>2.    分模块构建工程</h1><p>基于上边的三个工程分析</p><p>继承：创建一个 parent 工程将所需的依赖都配置在 pom 中 聚合：聚合多个模块运行。</p><h2 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1    需求"></a>2.1    需求</h2><h3 id="2-1-1-需求描述"><a href="#2-1-1-需求描述" class="headerlink" title="2.1.1    需求描述"></a>2.1.1    需求描述</h3><p>将 SSM 工程拆分为多个模块开发： ssm_dao、ssm_service、ssm_web</p><p><img src="https://ae01.alicdn.com/kf/Hd2f6b831c4764eaba1f6206212e1478fJ.jpg" alt="image-20200622194909971"></p><h3 id="2-1-2-理解继承和聚合"><a href="#2-1-2-理解继承和聚合" class="headerlink" title="2.1.2    理解继承和聚合"></a>2.1.2    理解继承和聚合</h3><p>通常继承和聚合同时使用</p><ul><li><p>何为继承？</p><p>继承是为了消除重复，如果将 dao、service、web 分开创建独立的工程则每个工程的 pom.xml 文件中的内容存在重复，比如：设置编译版本、锁定 spring 的版本的等，可以将这些重复的配置提取出来在父工程的 pom.xml  中定义。</p></li><li><p>何为聚合？</p><p>项目开发通常是分组分模块开发，每个模块开发完成要运行整个工程需要将每个模块聚合在 一起运行，比如：dao、service、web  三个工程最终会打一个独立的 war  运行。</p></li></ul><h2 id="2-2-案例实现"><a href="#2-2-案例实现" class="headerlink" title="2.2    案例实现"></a>2.2    案例实现</h2><h3 id="2-2-1-maven-parent-父模块"><a href="#2-2-1-maven-parent-父模块" class="headerlink" title="2.2.1    maven-parent  父模块"></a>2.2.1    maven-parent  父模块</h3><h4 id="2-2-1-1-创建父工程"><a href="#2-2-1-1-创建父工程" class="headerlink" title="2.2.1.1    创建父工程"></a>2.2.1.1    创建父工程</h4><p>工程只有pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置项目的打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-2-定义-pom-xml"><a href="#2-2-1-2-定义-pom-xml" class="headerlink" title="2.2.1.2    定义 pom.xml"></a>2.2.1.2    定义 pom.xml</h4><p>在父工程的 pom.xml 中抽取一些重复的配置的， 比如： 锁定 jar 包的版本、 设置编译版本等。</p><p>具体配置同上1.5</p><h3 id="2-2-2-ssm-dao-子模块"><a href="#2-2-2-ssm-dao-子模块" class="headerlink" title="2.2.2    ssm_dao 子模块"></a>2.2.2    ssm_dao 子模块</h3><h4 id="2-2-2-1-创建-dao-子模块"><a href="#2-2-2-1-创建-dao-子模块" class="headerlink" title="2.2.2.1    创建 dao  子模块"></a>2.2.2.1    创建 dao  子模块</h4><p>在父工程上右击创建 maven 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-dao-代码"><a href="#2-2-2-2-dao-代码" class="headerlink" title="2.2.2.2    dao 代码"></a>2.2.2.2    dao 代码</h4><p>将 ssm_maven 工程中的 dao接口、映射文件及 pojo 类拷贝到 src/main/java 中：</p><p><img src="https://ae01.alicdn.com/kf/Ha4e84b3f56d14fd4bce852672d3207bfS.jpg" alt="image-20200622203352917"></p><h4 id="2-2-2-3-配置文件"><a href="#2-2-2-3-配置文件" class="headerlink" title="2.2.2.3    配置文件"></a>2.2.2.3    配置文件</h4><p>将 applicationContext.xml拆分出一个applicationContext-dao.xml，此文件中只配置 dao 相关内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件开始--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///maven"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置生产SqlSession对象的工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描pojo包，给包下所有pojo对象起别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件结束--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-ssm-service-子模块"><a href="#2-2-3-ssm-service-子模块" class="headerlink" title="2.2.3    ssm_service  子模块"></a>2.2.3    ssm_service  子模块</h3><h4 id="2-2-3-1-创建-service-子模块"><a href="#2-2-3-1-创建-service-子模块" class="headerlink" title="2.2.3.1    创建 service 子模块"></a>2.2.3.1    创建 service 子模块</h4><p>方法同 ssm_dao 模块创建方法。ssm_service 依赖 ssm_dao 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-2-service-代码"><a href="#2-2-3-2-service-代码" class="headerlink" title="2.2.3.2    service 代码"></a>2.2.3.2    service 代码</h4><p>将 ssm_maven 工程中的service接口、实现类拷贝到 src/main/java中：</p><p><img src="https://ae01.alicdn.com/kf/Hd56b2024d4554e4980dcc13325af0c80a.jpg" alt="image-20200622204035505"></p><h4 id="2-2-3-3-配置文件"><a href="#2-2-3-3-配置文件" class="headerlink" title="2.2.3.3    配置文件"></a>2.2.3.3    配置文件</h4><p>将 applicationContext.xml拆分出一个applicationContext-service.xml，此文件中只配置 service相关内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--service层配置文件开始--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件扫描配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop面向切面编程，切面就是切入点和通知的组合--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"advice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"advice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service层配置文件结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-ssm-web-子模块"><a href="#2-2-4-ssm-web-子模块" class="headerlink" title="2.2.4    ssm_web  子模块"></a>2.2.4    ssm_web  子模块</h3><h4 id="2-2-4-1-创建-web-子模块"><a href="#2-2-4-1-创建-web-子模块" class="headerlink" title="2.2.4.1    创建 web  子模块"></a>2.2.4.1    创建 web  子模块</h4><p><img src="https://ae01.alicdn.com/kf/Hb2dfe45e54a64209a5aecaa709809176f.jpg" alt="image-20200622205548315"></p><p>ssm_web 依赖 ssm_service 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-2-controller-代码"><a href="#2-2-4-2-controller-代码" class="headerlink" title="2.2.4.2    controller 代码"></a>2.2.4.2    controller 代码</h4><p>将 ssm_web 工程中的controller 代码拷贝到src/main/java 中：</p><p><img src="https://ae01.alicdn.com/kf/H4fd9f63307f84d27af821ed1138d8421M.jpg" alt="image-20200622210122101"></p><h4 id="2-2-4-3-配置文件"><a href="#2-2-4-3-配置文件" class="headerlink" title="2.2.4.3    配置文件"></a>2.2.4.3    配置文件</h4><p>拷贝 ssm_web 工程中配置文件</p><p>将 applicationContext.xml引入server、dao配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring/applicationContext-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring/applicationContext-service.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-运行调试"><a href="#2-2-5-运行调试" class="headerlink" title="2.2.5    运行调试"></a>2.2.5    运行调试</h3><ul><li><p>方法 1：在 ssm_web 工程的 pom.xml 中配置 tomcat 插件运行</p><p>运行 ssm_web 工程它会从本地仓库下载依赖的 jar 包，所以当 ssm_web 依赖的 jar 包内容修改了必须及时发布到本地仓库，比如：ssm_web 依赖的 ssm_service 修改了，需要及时将ssm_service  发布到本地仓库。</p></li><li><p>方法 2：在父工程的 pom.xml 中配置 tomcat 插件运行，自动聚合并执行</p><p>推荐方法 2，如果子工程都在本地，采用方法 2 则不需要子工程修改就立即发布到本地仓库， 父工程会自动聚合并使用最新代码执行。</p></li></ul><p>注意：如果子工程和父工程中都配置了 tomcat  插件，运行的端口和路径以子工程为准。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-maven-构建-SSM-工程&quot;&gt;&lt;a href=&quot;#1-maven-构建-SSM-工程&quot; class=&quot;headerlink&quot; title=&quot;1.    maven 构建 SSM 工程&quot;&gt;&lt;/a&gt;1.    maven 构建 SSM 工程&lt;/h1&gt;&lt;h2 id=&quot;1-1-需求&quot;&gt;&lt;a href=&quot;#1-1-需求&quot; class=&quot;headerlink&quot; title=&quot;1.1    需求&quot;&gt;&lt;/a&gt;1.1    需求&lt;/h2&gt;&lt;p&gt;实现 SSM 工程构建，规范依赖管理。场景：根据 id 展示商品信息&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Maven" scheme="https://wgy1993.gitee.io/tags/Maven/"/>
    
      <category term="项目管理" scheme="https://wgy1993.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Maven(一)</title>
    <link href="https://wgy1993.gitee.io/archives/5849f9db.html"/>
    <id>https://wgy1993.gitee.io/archives/5849f9db.html</id>
    <published>2020-06-17T08:21:58.000Z</published>
    <updated>2020-06-21T08:28:26.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Maven-介绍"><a href="#1-Maven-介绍" class="headerlink" title="1.    Maven  介绍"></a>1.    Maven  介绍</h1><h2 id="1-1-什么是-Maven"><a href="#1-1-什么是-Maven" class="headerlink" title="1.1    什么是 Maven"></a>1.1    什么是 Maven</h2><h3 id="1-1-1-什么是-Maven"><a href="#1-1-1-什么是-Maven" class="headerlink" title="1.1.1    什么是 Maven"></a>1.1.1    什么是 Maven</h3><p>Maven 是一个项目管理工具，它包含了一个<strong>项目对象模型 (POM：Project Object Model)</strong>，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)， 和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><a id="more"></a><h3 id="1-1-2-Maven能解决什么问题"><a href="#1-1-2-Maven能解决什么问题" class="headerlink" title="1.1.2    Maven能解决什么问题"></a>1.1.2    Maven能解决什么问题</h3><p>用更通俗的方式来说明，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，下面列举几个感受一下：</p><ol><li>我们需要引用各种 jar包，尤其是比较大的工程，引用的 jar 包往往有几十个乃至上百个， 每用到一种 jar包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的jar 包冲突，版本冲突。</li><li>我们辛辛苦苦写好了 Java文件，可是只懂 0 和 1 的白痴电脑却完全读不懂，需要将它编译成二进制字节码。好歹现在这项工作可以由各种集成开发工具帮我们完成，Eclipse、IDEA 等都可以将代码即时编译。当然，如果你嫌生命漫长，何不铺张，也可以用记事本来敲代码，然后用 javac 命令一个个地去编译，逗电脑玩。</li><li>世界上没有不存在 bug的代码，为了减少 bug，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量。</li><li>再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，定型打包，如果是 web项目，还需要将之发布到服务器，供人蹂躏。</li></ol><p>试想，如果现在有一种工具，可以把你从上面的繁琐工作中解放出来，能帮你构建工程，管理 jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成 Web 站点，你会心动吗？Maven 就可以解决上面所提到的这些问题。</p><h3 id="1-1-3-Maven-的优势举例"><a href="#1-1-3-Maven-的优势举例" class="headerlink" title="1.1.3    Maven  的优势举例"></a>1.1.3    Maven  的优势举例</h3><p>我们通过 Web 阶段项目，要能够将项目运行起来，就必须将该项目所依赖的一些 jar 包添加到工程中，否则项目就不能运行。试想如果具有相同架构的项目有十个，那么我们就需要将这一份 jar包复制到十个不同的工程中。我们一起来看一个CRM项目的工程大小。</p><p>使用传统 Web 项目构建的 CRM 项目如下：</p><p><img src="https://ae01.alicdn.com/kf/Hec7029731d8d4f1cb02dbd54c612f945G.jpg" alt="image-20200621122813559"></p><p>原因主要是因为上面的 WEB 程序要运行，我们必须将项目运行所需的 Jar 包复制到工程目录中，从而导致了工程很大。</p><p>同样的项目，如果我们使用Maven 工程来构建，会发现总体上工程的大小会少很多。如下图:</p><p><img src="https://ae01.alicdn.com/kf/H31d37fe062b7418f9a5debed80e649919.jpg" alt="image-20200621123529874"></p><p>小结：可以初步推断它里面一定没有 jar 包，继续思考，没有 jar 包的项目怎么可能运行呢？</p><h2 id="1-2-Maven的两个精典作用"><a href="#1-2-Maven的两个精典作用" class="headerlink" title="1.2    Maven的两个精典作用"></a>1.2    Maven的两个精典作用</h2><h3 id="1-2-1-Maven的依赖管理"><a href="#1-2-1-Maven的依赖管理" class="headerlink" title="1.2.1    Maven的依赖管理"></a>1.2.1    Maven的依赖管理</h3><p>Maven的一个核心特性就是依赖管理。当我们涉及到多模块的项目（包含成百个模块或者子项目），管理依赖就变成一项困难的任务。Maven展示出了它对处理这种情形的高度控制。</p><p>传统的WEB项目中，我们必须将工程所依赖的jar包复制到工程中，导致了工程的变得很大。那么maven工程是如何使得工程变得很少呢？</p><p>分析如下：</p><p><img src="https://ae01.alicdn.com/kf/Hc29c73c6c20646a4834943f2cde3943eL.jpg" alt="image-20200621123853513"></p><p>通过分析发现：maven工程中不直接将jar包导入到工程中，而是通过在pom.xml文件中添加所需jar包的坐标，这样就很好的避免了jar直接引入进来，在需要用到jar包的时候，只要查找pom.xml文件，再通过pom.xml文件中的坐标，到一个专门用于”存放jar包的仓库”(maven仓库)中根据坐标从而找到这些jar包，再把这些jar包拿去运行。</p><p>那么问题来了<br>第一：”存放jar包的仓库”长什么样？<br>第二：通过读取pom.xml 文件中的坐标，再到仓库中找到jar包，会不会很慢？从而导致这种方式不可行！</p><p>第一个问题：存放jar包的仓库长什么样，这一点我们后期会分析仓库的分类，也会带大家去看我们的本地的仓库长什么样。<br>第二个问题：通过pom.xml文件配置要引入的jar包的坐标，再读取坐标并到仓库中加载jar包，这样我们就可以直接使用jar包了，为了解决这个过程中速度慢的问题，maven中也有索引的概念，通过建立索引，可以大大提高加载jar包的速度，使得我们认为jar包基本跟放在本地的工程文件中再读取出来的速度是一样的。这个过程就好比我们查阅字典时，为了能够加快查找到内容，书前面的目录就好比是索引，有了这个目录我们就可以方便找到内容了，一样的在maven仓库中有了索引我们就可以认为可以快速找到jar包。</p><h3 id="1-2-2-项目的一键构建"><a href="#1-2-2-项目的一键构建" class="headerlink" title="1.2.2    项目的一键构建"></a>1.2.2    项目的一键构建</h3><p>我们的项目，往往都要经历编译、测试、运行、打包、安装 ，部署等一系列过程。</p><p>什么是构建：指的是项目从编译、测试、运行、打包、安装 ，部署整个过程都交给maven进行管理，这个过程称为构建。</p><p>一键构建：指的是整个构建过程，使用maven一个命令可以轻松完成整个工作。</p><p>Maven规范化构建流程如下：</p><p><img src="https://ae01.alicdn.com/kf/H40ec6b93b53f427f871bbad4851f1fd4S.jpg" alt="image-20200621124541442"></p><h1 id="2-Maven-的使用"><a href="#2-Maven-的使用" class="headerlink" title="2.    Maven 的使用"></a>2.    Maven 的使用</h1><h2 id="2-1-Maven的安装"><a href="#2-1-Maven的安装" class="headerlink" title="2.1    Maven的安装"></a>2.1    Maven的安装</h2><h3 id="2-1-1-Maven软件的下载"><a href="#2-1-1-Maven软件的下载" class="headerlink" title="2.1.1    Maven软件的下载"></a>2.1.1    Maven软件的下载</h3><p>为了使用Maven管理工具，我们首先要到官网去下载它的安装软件。通过百度搜索“Maven“如下：</p><p><img src="https://ae01.alicdn.com/kf/Ha3ddfcf40744403f82bb9203391d9456q.jpg" alt="image-20200621130311092"></p><p>点击 Download 链接，就可以直接进入到 Maven 软件的下载页面：</p><p><img src="https://ae01.alicdn.com/kf/H6956319d6f1148d6b561aaa97b3dd026V.jpg" alt="image-20200621130324421"></p><h3 id="2-1-2-Maven软件的安装"><a href="#2-1-2-Maven软件的安装" class="headerlink" title="2.1.2    Maven软件的安装"></a>2.1.2    Maven软件的安装</h3><p>Maven下载后，将Maven解压到一个没有中文没有空格的路径下，比如D:\software\maven下面。解压后目录结构如下：</p><p><img src="https://ae01.alicdn.com/kf/H072595d2eb7345f5a06085bafa637107N.jpg" alt="image-20200621130556426"></p><p>bin:存放了maven的命令，比如我们前面用到的mvn tomcat:run<br>boot:存放了一些maven本身的引导程序，如类加载器等<br>conf:存放了maven的一些配置文件，如setting.xml文件<br>lib:存放了maven本身运行所需的一些jar包</p><p>至此我们的maven软件就可以使用了，前提是你的电脑上之前已经安装并配置好了JDK。</p><h3 id="2-1-3-JDK的准备"><a href="#2-1-3-JDK的准备" class="headerlink" title="2.1.3    JDK的准备"></a>2.1.3    JDK的准备</h3><p>JDK 使用 JDK8版本</p><p><img src="https://ae01.alicdn.com/kf/Hc9ea0cca103a419fbc065ab064e4d450I.jpg" alt="image-20200621131055805"></p><h3 id="2-1-4-Maven及JDK配置"><a href="#2-1-4-Maven及JDK配置" class="headerlink" title="2.1.4    Maven及JDK配置"></a>2.1.4    Maven及JDK配置</h3><p>配置 MAVEN_HOME （bin目录之前一级目录）：</p><p><img src="https://ae01.alicdn.com/kf/Hf7ef4f686ee2442995ad555a9c5d146cp.jpg" alt="image-20200621131220389"></p><p>配置JAVA_HOME：</p><p><img src="https://ae01.alicdn.com/kf/H017a381f466f4c78b4e48e6d851abd11w.jpg" alt="image-20200621131303599"></p><p>添加%MAVEN_HOME%/bin;%JAVA_HOME%/bin;到patch中。</p><h3 id="2-1-5-Maven软件版本测试"><a href="#2-1-5-Maven软件版本测试" class="headerlink" title="2.1.5    Maven软件版本测试"></a>2.1.5    Maven软件版本测试</h3><p>通过 mvn -v命令检查 maven是否安装成功，看到maven的版本为3.5.2及java版本为1. 8 即为安装成功。</p><p>找开cmd命令，输入mvn –v命令，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H33fe75b42be941e99dda55913c61b44cJ.jpg" alt="image-20200621131858275"></p><h2 id="2-2-Maven仓库"><a href="#2-2-Maven仓库" class="headerlink" title="2.2    Maven仓库"></a>2.2    Maven仓库</h2><h3 id="2-2-1-Maven仓库的分类"><a href="#2-2-1-Maven仓库的分类" class="headerlink" title="2.2.1    Maven仓库的分类"></a>2.2.1    Maven仓库的分类</h3><p>maven的工作需要从仓库下载一些jar包，如下图所示，本地的项目A、项目B等都会通过maven软件从远程仓库（可以理解为互联网上的仓库）下载jar包并存在本地仓库，本地仓库就是本地文件夹，当第二次需要此jar包时则不再从远程仓库下载，因为本地仓库已经存在了，可以将本地仓库理解为缓存，有了本地仓库就不用每次从远程仓库下载了。</p><p>下图描述了maven中仓库的类型：</p><p><img src="https://ae01.alicdn.com/kf/H7ad87fe25d1344558f4fd672c09788f5G.jpg" alt="image-20200621132030284"></p><ul><li><p>本地仓库 ：用来存储从远程仓库或中央仓库下载的插件和 jar 包，项目使用一些插件或 jar 包，优先从本地仓库查找。默认本地仓库位置在 ${user.dir}/.m2/repository，${user.dir}表示windows 用户目录</p><p><img src="https://ae01.alicdn.com/kf/H506833173fec4b78a7b459e4e8fb2946R.jpg" alt="image-20200621132206258"></p></li><li><p>远程仓库：如果本地需要插件或者 jar 包，本地仓库没有，默认去远程仓库下载。远程仓库可以在互联网内也可以在局域网内。</p></li><li><p>中央仓库 ：在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a> ，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包含了世界上大部分流行的开源项目构件。</p></li></ul><h3 id="2-2-2-Maven本地仓库的配置"><a href="#2-2-2-Maven本地仓库的配置" class="headerlink" title="2.2.2    Maven本地仓库的配置"></a>2.2.2    Maven本地仓库的配置</h3><p>在MAVE_HOME/conf/settings.xml文件中配置本地仓库位置（maven的安装目录下）：</p><p><img src="https://ae01.alicdn.com/kf/Hc0dd409dd9704acc959987e4c5a5c38bi.jpg" alt="image-20200621132505396"></p><p>打开settings.xml文件，配置如下：</p><p><img src="https://ae01.alicdn.com/kf/H8e5cda30b8124c14b21aed769dde6a6cl.jpg" alt="image-20200621132516975"></p><h3 id="2-2-3-全局setting与用户setting"><a href="#2-2-3-全局setting与用户setting" class="headerlink" title="2.2.3    全局setting与用户setting"></a>2.2.3    全局setting与用户setting</h3><p>maven仓库地址、私服等配置信息需要在setting.xml文件中配置，分为全局配置和用户配置。</p><p>在maven安装目录下的有 conf/setting.xml文件，此setting.xml文件用于maven的所有project项目，它作为maven的全局配置。</p><p>如需要个性配置则需要在用户配置中设置，用户配置的setting.xml文件默认的位置在：${user.dir}/.m2/settings.xml目录中,${user.dir} 指windows 中的用户目录。</p><p>maven会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</p><p><img src="https://ae01.alicdn.com/kf/Hddbb14adfacb44d28d30cd08765e5e303.jpg" alt="image-20200621132640919"></p><h2 id="2-3-Maven工程的认识"><a href="#2-3-Maven工程的认识" class="headerlink" title="2.3    Maven工程的认识"></a>2.3    Maven工程的认识</h2><h3 id="2-3-1-Maven工程的目录结构"><a href="#2-3-1-Maven工程的目录结构" class="headerlink" title="2.3.1    Maven工程的目录结构"></a>2.3.1    Maven工程的目录结构</h3><p><img src="https://ae01.alicdn.com/kf/Hde33470c9eef4df0881ee8dd231baadaT.jpg" alt="image-20200621132857765"></p><p>作为一个maven工程，它的src目录和pom.xml是必备的。</p><p>进入src目录后，我们发现它里面的目录结构如下：</p><p><img src="https://ae01.alicdn.com/kf/Hdd83e53d04b74aa0a25ca17fa844e294M.jpg" alt="image-20200621132930866"></p><p>src/main/java —— 存放项目的.java文件<br>src/main/resources —— 存放项目资源文件，如spring, hibernate配置文件<br>src/test/java —— 存放所有单元测试.java文件，如JUnit测试类<br>src/test/resources —— 测试资源文件<br>target —— 项目输出位置，编译后的class文件会输出到此目录<br>pom.xml——maven项目核心配置文件</p><p>注意：如果是普通的java项目，那么就没有webapp目录。</p><h3 id="2-3-2-Maven工程的运行"><a href="#2-3-2-Maven工程的运行" class="headerlink" title="2.3.2    Maven工程的运行"></a>2.3.2    Maven工程的运行</h3><p>进入maven工程目录（当前目录有pom.xml文件），运行tomcat:run命令。</p><p><img src="https://ae01.alicdn.com/kf/H161f9ef9fa224d59a2baf569c8a673f4j.jpg" alt="image-20200621133220266"></p><p>根据上边的提示信息，通过浏览器访问：<a href="http://localhost:8080/maven-helloworld/" target="_blank" rel="noopener">http://localhost:8080/maven-helloworld/</a></p><p><img src="https://ae01.alicdn.com/kf/H6d1ed1f789f243fcaca20b7219dcbfa5h.jpg" alt="image-20200621133236602"></p><h1 id="3-Maven常用命令"><a href="#3-Maven常用命令" class="headerlink" title="3.    Maven常用命令"></a>3.    Maven常用命令</h1><p>我们可以在cmd中通过一系列的maven命令来对我们的maven-helloworld工程进行编译、测试、运行、打包、安装、部署。</p><h2 id="3-1-compile"><a href="#3-1-compile" class="headerlink" title="3.1    compile"></a>3.1    compile</h2><p>compile是maven工程的编译命令，作用是将src/main/java下的文件编译为class文件输出到target目录下。</p><p>cmd进入命令状态，执行mvn compile，如下图提示成功：</p><p><img src="https://ae01.alicdn.com/kf/H91ab7a2cd10943bca57e756a01f0e3ebv.jpg" alt="image-20200621133429555"></p><p>查看 target目录，class文件已生成，编译完成。</p><p><img src="https://ae01.alicdn.com/kf/Hc5def3d233704454b40a183dd294a041c.jpg" alt="image-20200621133534501"></p><h2 id="3-2-test"><a href="#3-2-test" class="headerlink" title="3.2    test"></a>3.2    test</h2><p>test是maven工程的测试命令 mvn test，会执行src/test/java下的单元测试类。</p><p>cmd执行mvn test执行src/test/java下单元测试类，下图为测试结果，运行 1 个测试用例，全部成功。</p><p><img src="https://ae01.alicdn.com/kf/H2b22378a6f224dc8a97651a2c62dc891s.jpg" alt="image-20200621133701275"></p><h2 id="3-3-clean"><a href="#3-3-clean" class="headerlink" title="3.3    clean"></a>3.3    clean</h2><p>clean是maven工程的清理命令，执行 clean会删除target目录及内容。</p><h2 id="3-4-package"><a href="#3-4-package" class="headerlink" title="3.4    package"></a>3.4    package</h2><p>package是maven工程的打包命令，对于java工程执行package打成jar包，对于web工程打成war包。</p><h2 id="3-5-install"><a href="#3-5-install" class="headerlink" title="3.5    install"></a>3.5    install</h2><p>install是maven工程的安装命令，执行install将maven打成jar包或war包发布到本地仓库。</p><h2 id="3-6-Maven指令的生命周期"><a href="#3-6-Maven指令的生命周期" class="headerlink" title="3.6    Maven指令的生命周期"></a>3.6    Maven指令的生命周期</h2><p>maven对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：</p><p>Clean Lifecycle ：在进行真正的构建之前进行一些清理工作。<br>Default Lifecycle ：构建的核心部分，编译，测试，打包，部署等等。<br>Site Lifecycle ：生成项目报告，站点，发布站点。</p><h2 id="3-7-maven的概念模型"><a href="#3-7-maven的概念模型" class="headerlink" title="3.7    maven的概念模型"></a>3.7    maven的概念模型</h2><p>Maven包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><p><img src="https://ae01.alicdn.com/kf/Hc90d7d8098ef470fa71b154b25b3508fy.jpg" alt="image-20200621160302792"></p><ul><li><p>项目对象模型 (Project Object Model)</p><p>一个maven工程都有一个pom.xml文件，通过pom.xml文件定义项目的坐标、项目依赖、项目信息、插件目标等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt; ：文件的根节点 .</span><br><span class="line">&lt;modelversion&gt; ： pom.xml 使用的对象模型版本</span><br><span class="line">&lt;groupId&gt; ：项目名称，一般写项目的域名</span><br><span class="line">&lt;artifactId&gt; ：模块名称，子项目名或模块名称</span><br><span class="line">&lt;version&gt; ：产品的版本号 .</span><br><span class="line">&lt;packaging&gt; ：打包类型，一般有 jar、war、pom 等</span><br><span class="line">&lt;name&gt; ：项目的显示名，常用于 Maven 生成的文档。</span><br><span class="line">&lt;description&gt; ：项目描述，常用于 Maven 生成的文档</span><br><span class="line">&lt;dependencies&gt; ：项目依赖构件配置，配置项目依赖构件的坐标</span><br><span class="line">&lt;build&gt; ：项目构建配置，配置编译、运行插件等。</span><br></pre></td></tr></table></figure></li><li><p>依赖管理系统(Dependency Management System)</p><p>通过maven的依赖管理对项目所依赖的jar 包进行统一管理。</p><p>比如：项目依赖junit4.9，通过在pom.xml中定义junit4.9的依赖即使用junit4.9，如下所示是junit4.9的依赖定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此项目运行使用 junit，所以此项目依赖 junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit 的项目名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit 的模块名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit 版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围：单元测试时使用 junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个项目生命周期(Project Lifecycle)</p><p>使用maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven将这些过程规范为一个生命周期，如下所示是生命周期的各各阶段：</p><p><img src="https://ae01.alicdn.com/kf/Hb2e9de1a33ad45d3af105b498c13bf68p.jpg" alt="image-20200621134613943"></p><p>maven通过执行一些简单命令即可实现上边生命周期的各各过程，比如执行mvn compile执行编译、执行mvn clean执行清理。</p></li><li><p>一组标准集合</p><p>maven将整个项目管理过程定义一组标准，比如：通过maven构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p></li><li><p>插件(plugin)目标(goal)</p><p>maven 管理项目生命周期过程都是基于插件完成的。</p></li></ul><h1 id="4-idea开发maven项目"><a href="#4-idea开发maven项目" class="headerlink" title="4.    idea开发maven项目"></a>4.    idea开发maven项目</h1><p>在实战的环境中，我们都会使用流行的工具来开发项目。</p><h2 id="4-1-idea的maven配置"><a href="#4-1-idea的maven配置" class="headerlink" title="4.1    idea的maven配置"></a>4.1    idea的maven配置</h2><p>依据图片指示，选择本地maven安装目录，指定maven安装目录下conf文件夹中settings配置文件。</p><p><img src="https://ae01.alicdn.com/kf/Hbf3cdc7a52274076bd0f92d2037e56ec1.jpg" alt="image-20200621142532492"></p><h2 id="4-2-idea中创建maven的web工程"><a href="#4-2-idea中创建maven的web工程" class="headerlink" title="4.2    idea中创建maven的web工程"></a>4.2    idea中创建maven的web工程</h2><p>打开idea，选择创建一个新工程</p><p><img src="https://ae01.alicdn.com/kf/H9e18b633fc764fbf81fe5d0e077c5609y.jpg" alt="image-20200621142602374"></p><p>选择idea提供好的maven的web工程模板</p><p><img src="https://ae01.alicdn.com/kf/He57aacc4d1fb4736af757608a01b4a51L.jpg" alt="image-20200621142610390"></p><p>点击Next填写项目信息</p><p><img src="https://ae01.alicdn.com/kf/H3e4c3004a85a477cba63345331df2318p.jpg" alt="image-20200621142623969"></p><p>点击Next，此处不做改动。</p><p><img src="https://ae01.alicdn.com/kf/H15786a30733541e5a567f2345190feefg.jpg" alt="image-20200621142630857"></p><p>点击Next选择项目所在目录</p><p><img src="https://ae01.alicdn.com/kf/Hc01abba56f944e84b5c6cc1026f3f8506.jpg" alt="image-20200621142639497"></p><p>点击Finish后开始创建工程，耐心等待，直到出现如下界面。</p><p><img src="https://ae01.alicdn.com/kf/H2e834f209f964963b151dbb223a9d67bt.jpg" alt="image-20200621142647305"></p><p>手动添加src/main/java目录，如下图右键main文件夹&gt;New&gt;Directory</p><p><img src="https://ae01.alicdn.com/kf/H527d94142f2b4fcda0e613f1573d6636q.jpg" alt="image-20200621142701687"></p><p>创建一个新的文件夹命名为java</p><p><img src="https://ae01.alicdn.com/kf/Hd9d54ac2818e45faad706ab98f918d7f4.jpg" alt="image-20200621142735168"></p><p>点击OK后，在新的文件夹java上右键&gt;Make Directory as&gt;Sources Root</p><p><img src="https://ae01.alicdn.com/kf/Hf4d7e11985c14849a6933dd238b6ed783.jpg" alt="image-20200621142754043"></p><h3 id="4-2-1-创建一个Servlet"><a href="#4-2-1-创建一个Servlet" class="headerlink" title="4.2.1    创建一个Servlet"></a>4.2.1    创建一个Servlet</h3><p>src/java/main创建了一个Servlet，但报错</p><p><img src="https://ae01.alicdn.com/kf/H86acf08cdf16404f9c25fb43b096f018j.jpg" alt="image-20200621142809544"></p><p>要解决问题，就是要将servlet-api-xxx.jar包放进来，作为maven工程应当添加servlet的坐标，从而导入它的jar</p><h3 id="4-2-2-在pom-xml文件添加坐标"><a href="#4-2-2-在pom-xml文件添加坐标" class="headerlink" title="4.2.2    在pom.xml文件添加坐标"></a>4.2.2    在pom.xml文件添加坐标</h3><p>直接打开hello_maven工程的pom.xml文件，再添加坐标</p><p><img src="https://ae01.alicdn.com/kf/Hf47391050ccf446b9dbeddb15f17e104Z.jpg" alt="image-20200621142915684"></p><p>添加jar包的坐标时，还可以指定这个jar包将来的作用范围。</p><p>每个maven工程都需要定义本工程的坐标，坐标是maven对jar包的身份定义，比如：入门程序的坐标定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;</span><br><span class="line">&lt;groupId&gt;com.wgy&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;!-- 模块名称 --&gt;</span><br><span class="line">&lt;artifactId&gt;hello_maven&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;!-- 当前项目版本号，snapshot 为快照版本即非正式版本，release为正式发布版本 --&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;packaging&gt; ：打包类型</span><br><span class="line">    jar：执行 package 会打成 jar 包</span><br><span class="line">    war：执行 package 会打成 war 包</span><br><span class="line">    pom ：用于 maven 工程的继承，通常父工程设置为 pom</span><br></pre></td></tr></table></figure><h3 id="4-2-3-坐标的来源方式"><a href="#4-2-3-坐标的来源方式" class="headerlink" title="4.2.3    坐标的来源方式"></a>4.2.3    坐标的来源方式</h3><p>添加依赖需要指定依赖jar包的坐标，但是很多情况我们是不知道jar包的的坐标，可以通过如下方式查询：</p><p><a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a><br><a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a><br><img src="https://ae01.alicdn.com/kf/H3da4e0c3262340978b13ed7c9d4466d7V.jpg" alt="image-20200621143247590"></p><p><img src="https://ae01.alicdn.com/kf/H93bef3abcfa34ed88fa84a03fd8c827fj.jpg" alt="image-20200621143300435"></p><h2 id="4-3-依赖范围"><a href="#4-3-依赖范围" class="headerlink" title="4.3    依赖范围"></a>4.3    依赖范围</h2><p>A依赖B，需要在A的pom.xml文件中添加B的坐标，添加坐标时需要指定依赖范围，依赖范围包括：</p><ul><li><p>compile：编译范围，指A在编译时依赖B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</p></li><li><p>provided：provided依赖只有在当JDK或者一个容器已提供该依赖之后才使用， provided依赖在编译和测试时需要，在运行时不需要，比如：servlet api被tomcat容器提供。</p></li><li><p>runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc的驱动包。由于运行时需要所以runtime范围的依赖会被打包。</p></li><li><p>test：test范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如：junit。由于运行时不需要所以test范围依赖不会被打包。</p></li></ul><ul><li><p>system：system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中JAR文件的路径，需要指定systemPath磁盘路径，system依赖不推荐使用。</p><p><img src="https://ae01.alicdn.com/kf/H0ee4beb64aec43a1900816d05f7b7f8bq.jpg" alt="image-20200621143537961"></p></li></ul><p>在maven-web工程中测试各各scop。</p><p>测试总结：</p><ul><li><p>默认引入 的jar包 ——- compile 【默认范围 可以不写】（编译、测试、运行 都有效 ）</p></li><li><p>servlet-api 、jsp-api ——- provided （编译、测试 有效， 运行时无效，防止和tomcat下jar冲突）</p></li><li><p>jdbc驱动jar包 —- runtime （测试、运行 有效 ）</p></li><li><p>junit —– test （测试有效）</p><p>依赖范围由强到弱的顺序是：compile&gt;provided&gt;runtime&gt;test</p></li></ul><h2 id="4-4-项目中添加的坐标"><a href="#4-4-项目中添加的坐标" class="headerlink" title="4.4    项目中添加的坐标"></a>4.4    项目中添加的坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5-设置jdk编译版本"><a href="#4-5-设置jdk编译版本" class="headerlink" title="4.5    设置jdk编译版本"></a>4.5    设置jdk编译版本</h2><p>本教程使用jdk1. 8 ，需要设置编译版本为1. 8 ，这里需要使用maven的插件来设置，在pom.xml中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-6-编写servlet"><a href="#4-6-编写servlet" class="headerlink" title="4.6    编写servlet"></a>4.6    编写servlet</h2><p>在src/main/java中创建ServletTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/hello.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-编写jsp"><a href="#4-7-编写jsp" class="headerlink" title="4.7    编写jsp"></a>4.7    编写jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    hello maven</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-8-在web-xml中配置servlet访问路径"><a href="#4-8-在web-xml中配置servlet访问路径" class="headerlink" title="4.8    在web.xml中配置servlet访问路径"></a>4.8    在web.xml中配置servlet访问路径</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.wgy.servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-9-添加tomcat7插件"><a href="#4-9-添加tomcat7插件" class="headerlink" title="4.9 添加tomcat7插件"></a>4.9 添加tomcat7插件</h2><p>在pom文件中添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时点击idea最右侧Maven Projects，就可以看到我们新添加的tomcat7插件双击tomcat7插件下tomcat7:run命令直接运行项目</p><p><img src="https://ae01.alicdn.com/kf/H129b2f5826b3487190158b533cb6aa40Q.jpg" alt="image-20200621144941506"></p><p>也可以直接点击如图按钮，手动输入tomc7:run命令运行项目</p><p><img src="https://ae01.alicdn.com/kf/H401cb92b17b446228cc6885d8dc84dc5z.jpg" alt="image-20200621145031382"></p><h1 id="5-maven工程运行调试"><a href="#5-maven工程运行调试" class="headerlink" title="5.    maven工程运行调试"></a>5.    maven工程运行调试</h1><h2 id="5-1-端口占用处理"><a href="#5-1-端口占用处理" class="headerlink" title="5.1    端口占用处理"></a>5.1    端口占用处理</h2><p>重新执行tomcat:run命令重启工程，重启之前需手动停止 tomcat，否则报下边的错误：</p><p><img src="https://ae01.alicdn.com/kf/H7f73449532f44d7eabf076ea5ffa67ed3.jpg" alt="image-20200621145157103"></p><h2 id="5-2-断点调试"><a href="#5-2-断点调试" class="headerlink" title="5.2    断点调试"></a>5.2    断点调试</h2><p>点击如图所示选项</p><p><img src="https://ae01.alicdn.com/kf/H04099ade9c7e43c88dbc62b85cd15c76g.jpg" alt="image-20200621145215824"></p><p>在弹出框中点击如图加号按钮找到maven选项</p><p><img src="https://ae01.alicdn.com/kf/H434cdb9462524a228f7dc2c56e6cbdc4P.jpg" alt="image-20200621145227073"></p><p>在弹出窗口中填写如下信息</p><p><img src="https://ae01.alicdn.com/kf/Hf0b34f0b723640348286ef8eb0a216f4A.jpg" alt="image-20200621145239941"></p><p>完成后先Apply再OK结束配置后，可以在主界面找到我们刚才配置的操作名称。</p><p><img src="https://ae01.alicdn.com/kf/H553058f278084e3490ced50ca7dca178W.jpg" alt="image-20200621145257198"></p><p>如上图红框选中的两个按钮，左侧是正常启动，右侧是debug启动。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Maven-介绍&quot;&gt;&lt;a href=&quot;#1-Maven-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.    Maven  介绍&quot;&gt;&lt;/a&gt;1.    Maven  介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是-Maven&quot;&gt;&lt;a href=&quot;#1-1-什么是-Maven&quot; class=&quot;headerlink&quot; title=&quot;1.1    什么是 Maven&quot;&gt;&lt;/a&gt;1.1    什么是 Maven&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是-Maven&quot;&gt;&lt;a href=&quot;#1-1-1-什么是-Maven&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是 Maven&quot;&gt;&lt;/a&gt;1.1.1    什么是 Maven&lt;/h3&gt;&lt;p&gt;Maven 是一个项目管理工具，它包含了一个&lt;strong&gt;项目对象模型 (POM：Project Object Model)&lt;/strong&gt;，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)， 和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Maven" scheme="https://wgy1993.gitee.io/tags/Maven/"/>
    
      <category term="项目管理" scheme="https://wgy1993.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SSH</title>
    <link href="https://wgy1993.gitee.io/archives/782a8ece.html"/>
    <id>https://wgy1993.gitee.io/archives/782a8ece.html</id>
    <published>2020-06-16T05:58:26.000Z</published>
    <updated>2020-06-16T06:37:14.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SSH三大框架整合"><a href="#1-SSH三大框架整合" class="headerlink" title="1.    SSH三大框架整合"></a>1.    SSH三大框架整合</h1><h2 id="1-1-整合说明"><a href="#1-1-整合说明" class="headerlink" title="1.1    整合说明"></a>1.1    整合说明</h2><ul><li>独立式整合指的是三个框架都使用自己的配置文件。</li><li>引入式整合指的是hibernate主配置文件中的内容都配置到spring配置文件中</li><li>在整合过程中，确保每步都运行成功，然后在继续往下做。</li><li>整合中使用的案例是客户的保存和列表查询操作。</li><li>后面的三种整合方式都基于1.2中的环境准备。</li></ul><a id="more"></a><h2 id="1-2-环境准备"><a href="#1-2-环境准备" class="headerlink" title="1.2    环境准备"></a>1.2    环境准备</h2><h3 id="1-2-1-创建java-web工程"><a href="#1-2-1-创建java-web工程" class="headerlink" title="1.2.1    创建java web工程"></a>1.2.1    创建java web工程</h3><h3 id="1-2-2-创建数据库和表结构"><a href="#1-2-2-创建数据库和表结构" class="headerlink" title="1.2.2    创建数据库和表结构"></a>1.2.2    创建数据库和表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create database ssh;</span><br><span class="line">use ssh;</span><br><span class="line"></span><br><span class="line">&#x2F;*创建客户表*&#x2F;</span><br><span class="line">CREATE TABLE &#96;cst_customer&#96; (</span><br><span class="line">  &#96;cust_id&#96; bigint(32) NOT NULL AUTO_INCREMENT COMMENT &#39;客户编号(主键)&#39;,</span><br><span class="line">  &#96;cust_name&#96; varchar(32) NOT NULL COMMENT &#39;客户名称(公司名称)&#39;,</span><br><span class="line">  &#96;cust_source&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户信息来源&#39;,</span><br><span class="line">  &#96;cust_industry&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户所属行业&#39;,</span><br><span class="line">  &#96;cust_level&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户级别&#39;,</span><br><span class="line">  &#96;cust_address&#96; varchar(128) DEFAULT NULL COMMENT &#39;客户联系地址&#39;,</span><br><span class="line">  &#96;cust_phone&#96; varchar(64) DEFAULT NULL COMMENT &#39;客户联系电话&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;cust_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-编写实体类"><a href="#1-2-3-编写实体类" class="headerlink" title="1.2.3    编写实体类"></a>1.2.3    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类（数据模型）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-编写业务层接口和实现类"><a href="#1-2-4-编写业务层接口和实现类" class="headerlink" title="1.2.4    编写业务层接口和实现类"></a>1.2.4    编写业务层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(ICustomerDao customerDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        customerDao.saveCustomer(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-编写持久层接口和实现类"><a href="#1-2-5-编写持久层接口和实现类" class="headerlink" title="1.2.5    编写持久层接口和实现类"></a>1.2.5    编写持久层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了所有用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"保存了用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-基于XML的独立式整合"><a href="#2-基于XML的独立式整合" class="headerlink" title="2.    基于XML的独立式整合"></a>2.    基于XML的独立式整合</h1><h2 id="2-1-保证spring框架在web工程中独立运行"><a href="#2-1-保证spring框架在web工程中独立运行" class="headerlink" title="2.1    保证spring框架在web工程中独立运行"></a>2.1    保证spring框架在web工程中独立运行</h2><h3 id="2-1-1-拷贝spring的ioc-aop和事务控制三组jar包"><a href="#2-1-1-拷贝spring的ioc-aop和事务控制三组jar包" class="headerlink" title="2.1.1    拷贝spring的ioc,aop和事务控制三组jar包"></a>2.1.1    拷贝spring的ioc,aop和事务控制三组jar包</h3><p><strong>ioc:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hb8ccc7c3ec0140b988c381995704ece78.jpg" alt="image-20200616101447459"></p><p><strong>aop:</strong></p><p><img src="https://ae01.alicdn.com/kf/H718fdd692a914188afd9b4591ee8bb47n.jpg" alt="image-20200616101517358"></p><p><strong>事务控制:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hec0f71d474664ac7a8397235ee8a155aX.jpg" alt="image-20200616101545929"></p><h3 id="2-1-2-编写spring配置文件并导入约束"><a href="#2-1-2-编写spring配置文件并导入约束" class="headerlink" title="2.1.2    编写spring配置文件并导入约束"></a>2.1.2    编写spring配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-把业务层和持久层配置到文件中"><a href="#2-1-3-把业务层和持久层配置到文件中" class="headerlink" title="2.1.3    把业务层和持久层配置到文件中"></a>2.1.3    把业务层和持久层配置到文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把资源交给spring来管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-测试spring能否独立运行"><a href="#2-1-4-测试spring能否独立运行" class="headerlink" title="2.1.4    测试spring能否独立运行"></a>2.1.4    测试spring能否独立运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类，测试spring框架可以独立运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.跟Id获取bean对象</span></span><br><span class="line">        ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">        cs.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-保证hibernate框架能够在web工程中独立运行"><a href="#2-2-保证hibernate框架能够在web工程中独立运行" class="headerlink" title="2.2    保证hibernate框架能够在web工程中独立运行"></a>2.2    保证hibernate框架能够在web工程中独立运行</h2><h3 id="2-2-1-拷贝hibernate必备jar包"><a href="#2-2-1-拷贝hibernate必备jar包" class="headerlink" title="2.2.1    拷贝hibernate必备jar包"></a>2.2.1    拷贝hibernate必备jar包</h3><p><strong>hibernate基本jar包:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hbe298bdd7e744651883d050a1237a1391.jpg" alt="image-20200616102231802"></p><p><strong>c3p0:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hc97e4b6d7de74976b88ae91ad54fe088A.jpg" alt="image-20200616102253693"></p><h3 id="2-2-2-编写实体类的映射文件"><a href="#2-2-2-编写实体类的映射文件" class="headerlink" title="2.2.2    编写实体类的映射文件"></a>2.2.2    编写实体类的映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.wgy.domain"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"custId"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custName"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custSource"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custIndustry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custLevel"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custAddress"</span> <span class="attr">column</span>=<span class="string">"cust_address"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custPhone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-编写hibernate主配置文件"><a href="#2-2-3-编写hibernate主配置文件" class="headerlink" title="2.2.3    编写hibernate主配置文件"></a>2.2.3    编写hibernate主配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Hibernate/Hibernate Configuration DTD//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一部分：连接数据库的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的方言 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.c3p0.internal.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 第三部分：映射配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/wgy/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-编写测试类-测试保存客户"><a href="#2-2-4-编写测试类-测试保存客户" class="headerlink" title="2.2.4    编写测试类-测试保存客户"></a>2.2.4    编写测试类-测试保存客户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保证hibernate框架能够独立在web工程中运行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">        c.setCustName(<span class="string">"ssh整合Customer"</span>);</span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        cfg.configure();</span><br><span class="line">        <span class="comment">//2.根据配置文件创建SessionFactory</span></span><br><span class="line">        SessionFactory factory = cfg.buildSessionFactory();</span><br><span class="line">        <span class="comment">//3.获取session</span></span><br><span class="line">        Session session = factory.getCurrentSession();</span><br><span class="line">        <span class="comment">//4.开启事务</span></span><br><span class="line">        Transaction tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//5.执行操作</span></span><br><span class="line">        session.save(c);</span><br><span class="line">        <span class="comment">//6.提交/回滚事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        factory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-整合spring和hibernate框架"><a href="#2-3-整合spring和hibernate框架" class="headerlink" title="2.3    整合spring和hibernate框架"></a>2.3    整合spring和hibernate框架</h2><h3 id="2-3-1-明确"><a href="#2-3-1-明确" class="headerlink" title="2.3.1    明确"></a>2.3.1    明确</h3><ul><li>Spring和Hibernate的整合就是spring接管SessionFactory的创建</li><li>Spring针对Hiberante的操作有一个封装的对象HibernateTemplate</li><li>和JdbcTemplate一样，HibernateTemplate也有一个HibernateDaoSupport</li><li>HibernateTemplate和HibernateDaoSupport都在spring-orm-4.2.4.RELEASE.jar中</li><li>我们Dao采用继承HiberanteDaoSupport的方式编写，它一样不能用于注解配置。</li></ul><h3 id="2-3-2-整合步骤"><a href="#2-3-2-整合步骤" class="headerlink" title="2.3.2    整合步骤"></a>2.3.2    整合步骤</h3><h4 id="2-3-2-1-在spring配置文件中配置SessionFactory"><a href="#2-3-2-1-在spring配置文件中配置SessionFactory" class="headerlink" title="2.3.2.1    在spring配置文件中配置SessionFactory"></a>2.3.2.1    在spring配置文件中配置SessionFactory</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置sessionFactory：让spring接管sessionFactory的创建</span></span><br><span class="line"><span class="comment">        用spring提供的一个SessionFactory：LocalSessionFactoryBean</span></span><br><span class="line"><span class="comment">        创建SessionFactory有三部分必不可少的信息。三部分信息在hibernate主配置文件中都有</span></span><br><span class="line"><span class="comment">        把hibernate主配置文件的位置注入进来</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-改造Dao继承HibernateDaoSupport"><a href="#2-3-2-2-改造Dao继承HibernateDaoSupport" class="headerlink" title="2.3.2.2    改造Dao继承HibernateDaoSupport"></a>2.3.2.2    改造Dao继承HibernateDaoSupport</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;Customer&gt;) getHibernateTemplate().find(<span class="string">"from Customer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        getHibernateTemplate().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-在spring配置文件中给Dao注入SessionFactory"><a href="#2-3-2-3-在spring配置文件中给Dao注入SessionFactory" class="headerlink" title="2.3.2.3    在spring配置文件中给Dao注入SessionFactory"></a>2.3.2.3    在spring配置文件中给Dao注入SessionFactory</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-测试"><a href="#2-3-2-4-测试" class="headerlink" title="2.3.2.4    测试"></a>2.3.2.4    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合spring和hibernate的测试类</span></span><br><span class="line"><span class="comment"> * spring整合Junit</span></span><br><span class="line"><span class="comment"> * 第一步：拷贝jar包</span></span><br><span class="line"><span class="comment"> * spring-junit-4.2.4.jar</span></span><br><span class="line"><span class="comment"> *  第二步：使用注解替换运行器（原来junit的main方法）</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@RunWith</span>(支持spring的main方法)</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ContextConfiguration</span>(指定spring的配置文件位置)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=&#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringHibernateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService cs;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">        c.setCustName(<span class="string">"spring hibernate customer123"</span>);</span><br><span class="line">        cs.saveCustomer(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List list = cs.findAllCustomer();</span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试结果：</span><br><span class="line">    无论保存还是查询都运行失败！</span><br><span class="line">    按常理来说，我们没有配置事务，保存失败是可以理解的。为什么查询也会失败呢？</span><br><span class="line">分析原因：</span><br><span class="line">    是由于spring的HibernateTemplate对象在使用Session时，spring创建了Session的代理对象，在这个过程中，spring对hibernate绑定Session到当前线程的配置不认识了，所以运行失败。</span><br></pre></td></tr></table></figure><h4 id="2-3-2-5-修改把Session绑定到当前线程上"><a href="#2-3-2-5-修改把Session绑定到当前线程上" class="headerlink" title="2.3.2.5    修改把Session绑定到当前线程上"></a>2.3.2.5    修改把Session绑定到当前线程上</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是hibernate把session绑定到当前线程上的配置 </span></span><br><span class="line"><span class="comment">&lt;property name="hibernate.current_session_context_class"&gt;thread&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是spring把sesion绑定到当前线程上的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span></span><br><span class="line">    org.springframework.orm.hibernate5.SpringSessionContext</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">此时再运行刚才的测试：</span><br><span class="line">    查询可以使用了。保存不能使用，原因是没有事务。</span><br></pre></td></tr></table></figure><h3 id="2-3-3-配置Spring的事务"><a href="#2-3-3-配置Spring的事务" class="headerlink" title="2.3.3    配置Spring的事务"></a>2.3.3    配置Spring的事务</h3><h4 id="2-3-3-1-配置事务管理器并注入SessionFactory"><a href="#2-3-3-1-配置事务管理器并注入SessionFactory" class="headerlink" title="2.3.3.1    配置事务管理器并注入SessionFactory"></a>2.3.3.1    配置事务管理器并注入SessionFactory</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-配置事务的通知及通知的属性"><a href="#2-3-3-2-配置事务的通知及通知的属性" class="headerlink" title="2.3.3.2    配置事务的通知及通知的属性"></a>2.3.3.2    配置事务的通知及通知的属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-配置AOP建立切入点表达式和事务通知的关系"><a href="#2-3-3-3-配置AOP建立切入点表达式和事务通知的关系" class="headerlink" title="2.3.3.3    配置AOP建立切入点表达式和事务通知的关系"></a>2.3.3.3    配置AOP建立切入点表达式和事务通知的关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 建立切入点表达式和事务通知的关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">再次测试：</span><br><span class="line">此时保存和查询都可以正常使用了。</span><br></pre></td></tr></table></figure><h2 id="2-4-保证struts2框架能够在web工程中独立运行"><a href="#2-4-保证struts2框架能够在web工程中独立运行" class="headerlink" title="2.4    保证struts2框架能够在web工程中独立运行"></a>2.4    保证struts2框架能够在web工程中独立运行</h2><h3 id="2-4-1-拷贝struts2的必备jar包"><a href="#2-4-1-拷贝struts2的必备jar包" class="headerlink" title="2.4.1    拷贝struts2的必备jar包"></a>2.4.1    拷贝struts2的必备jar包</h3><p><img src="https://ae01.alicdn.com/kf/H40fad21272de44bb9a15b08155c9b183e.jpg" alt="image-20200616104541711"></p><h3 id="2-4-2-编写struts-xml文件并导入约束"><a href="#2-4-2-编写struts-xml文件并导入约束" class="headerlink" title="2.4.2    编写struts.xml文件并导入约束"></a>2.4.2    编写struts.xml文件并导入约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;!-- 开启开发者模式 --&gt;</span><br><span class="line">    &lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-在web-xml中配置struts2的核心过滤器"><a href="#2-4-3-在web-xml中配置struts2的核心过滤器" class="headerlink" title="2.4.3    在web.xml中配置struts2的核心过滤器"></a>2.4.3    在web.xml中配置struts2的核心过滤器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-4-导入jsp页面"><a href="#2-4-4-导入jsp页面" class="headerlink" title="2.4.4    导入jsp页面"></a>2.4.4    导入jsp页面</h3><p><img src="https://ae01.alicdn.com/kf/Hb04957b5453a425e92b7c843811eac6ap.jpg" alt="image-20200616105035639"></p><h3 id="2-4-5-修改menu-jsp"><a href="#2-4-5-修改menu-jsp" class="headerlink" title="2.4.5    修改menu.jsp"></a>2.4.5    修改menu.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;A class=style2 href="$&#123;pageContext.request.contextPath&#125;/customer/addUICustomer.action"  target=main&gt;－ 新增客户&lt;/A&gt;</span><br><span class="line"></span><br><span class="line">&lt;A class=style2 href="$&#123;pageContext.request.contextPath&#125;/customer/findAllCustomer.action" target=main&gt;－ 客户列表&lt;/A&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-6-在struts-xml中配置action"><a href="#2-4-6-在struts-xml中配置action" class="headerlink" title="2.4.6    在struts.xml中配置action"></a>2.4.6    在struts.xml中配置action</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置动作 --&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;customer&quot; extends&#x3D;&quot;struts-default&quot; namespace&#x3D;&quot;&#x2F;customer&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;addUICustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;addUICustomer&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;addUICustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;findAllCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;findAllCustomer&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;findAllCustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;list.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-7-编写动作类和方法"><a href="#2-4-7-编写动作类和方法" class="headerlink" title="2.4.7    编写动作类和方法"></a>2.4.7    编写动作类和方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-8-测试"><a href="#2-4-8-测试" class="headerlink" title="2.4.8    测试"></a>2.4.8    测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：通过点击【新增客户】可以跳转到客户添加页面</span><br></pre></td></tr></table></figure><h2 id="2-5-整合spring和struts2"><a href="#2-5-整合spring和struts2" class="headerlink" title="2.5    整合spring和struts2"></a>2.5    整合spring和struts2</h2><h3 id="2-5-1-明确"><a href="#2-5-1-明确" class="headerlink" title="2.5.1    明确"></a>2.5.1    明确</h3><ul><li>spring整合struts2就是让spring接管action的创建</li><li>action是多例的，配置到spring中需要设置scope属性为多例</li></ul><h3 id="2-5-2-整合步骤"><a href="#2-5-2-整合步骤" class="headerlink" title="2.5.2    整合步骤"></a>2.5.2    整合步骤</h3><h4 id="2-5-2-1-拷贝spring整合struts的jar包"><a href="#2-5-2-1-拷贝spring整合struts的jar包" class="headerlink" title="2.5.2.1    拷贝spring整合struts的jar包"></a>2.5.2.1    拷贝spring整合struts的jar包</h4><p><img src="https://ae01.alicdn.com/kf/H2ac7eff489b74702a2f9ad7eb8c547e5U.jpg" alt="image-20200616105845398"></p><h4 id="2-5-2-2-在action中使用构造函数获取Service对象"><a href="#2-5-2-2-在action中使用构造函数获取Service对象" class="headerlink" title="2.5.2.2    在action中使用构造函数获取Service对象"></a>2.5.2.2    在action中使用构造函数获取Service对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerService</span><span class="params">(ICustomerService customerService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerService = customerService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此种方式根本不能用，因为由于动作类是多例的，每次都会创建新的容器，导致容器中的bean也会创建新的。</span></span><br><span class="line"><span class="comment">//public CustomerAction()&#123;</span></span><br><span class="line"><span class="comment">//ApplicationContext ac = new  ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line"><span class="comment">//System.out.println(ac);</span></span><br><span class="line"><span class="comment">//ICustomerService cs = (ICustomerService) ac.getBean("customerService");</span></span><br><span class="line"><span class="comment">//this.setCustomerService(cs);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此种方式解决了容器多例的问题，保证了容器一个应用只有一个，但是我们的代码边臃肿了，每个action都需要这么写一下。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerAction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletContext application = ServletActionContext.getServletContext();</span><br><span class="line">        ApplicationContext ac = WebApplicationContextUtils.getWebApplicationContext(application);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">        ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">        <span class="keyword">this</span>.setCustomerService(cs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">        customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customers = customers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-3-测试"><a href="#2-5-2-3-测试" class="headerlink" title="2.5.2.3    测试"></a>2.5.2.3    测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：查询客户列表测试通过。</span><br></pre></td></tr></table></figure><h2 id="2-6-优化配置"><a href="#2-6-优化配置" class="headerlink" title="2.6    优化配置"></a>2.6    优化配置</h2><h3 id="2-6-1-配置spring的监听器"><a href="#2-6-1-配置spring的监听器" class="headerlink" title="2.6.1    配置spring的监听器"></a>2.6.1    配置spring的监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在上面2.5.2.2小节中有这么一句：</span><br><span class="line">    由于动作类是多例的，每次都会创建容器，导致资源的浪费。一个应用应该只有一个容器</span><br><span class="line">问题：</span><br><span class="line">    如何解决呢？</span><br><span class="line">答案：</span><br><span class="line">    只要让容器在应用加载时创建，应用卸载时销毁就可以。</span><br><span class="line">问题：</span><br><span class="line">    我们怎么知道应用何时加载了呢？</span><br><span class="line">答案：</span><br><span class="line">    ServletContext对象创建了，就表示当前应用已经被服务器加载了。</span><br><span class="line">问题：</span><br><span class="line">    我们怎么知道ServletContext对象创建了呢？</span><br><span class="line">答案：</span><br><span class="line">    ServletContextListener监听器可以监听到ServletContext对象的创建和销毁。</span><br><span class="line"></span><br><span class="line">Spring框架为我们提供了一个监听器：ContextLoaderListener。</span><br><span class="line">它是ServletContextListener接口的实现类，负责监听ServletContext对象的创建，为我们创建容器，监听ServletContext对象的销毁，销毁容器。</span><br><span class="line">我们只需要配置上即可。</span><br><span class="line">ContextLoaderListener在spring-web-4.2.4.RELEASE.jar中</span><br></pre></td></tr></table></figure><p><strong>在web.xml中配置监听器：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">当配置了此监听器后，就不需要使用Action的构造函数了，可以把构造函数那段删除了。</span><br><span class="line">此监听器只能读取WEB-INF目录中的名称为applicationContext.xml的配置文件。这显然限制了我们的配置。</span><br><span class="line">我们可以通过配置全局初始化参数的方式，指定spring配置文件的位置.</span><br></pre></td></tr></table></figure><h3 id="2-6-2-配置指定spring配置文件的位置"><a href="#2-6-2-配置指定spring配置文件的位置" class="headerlink" title="2.6.2    配置指定spring配置文件的位置"></a>2.6.2    配置指定spring配置文件的位置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 手动指定spring的配置文件位置，需要使用ServletContext的初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-3-分文件编写spring配置"><a href="#2-6-3-分文件编写spring配置" class="headerlink" title="2.6.3    分文件编写spring配置"></a>2.6.3    分文件编写spring配置</h3><p>我们写到这里，其实搭建环境已经基本结束了，但是发现spring的配置文件杂乱无章，使我们在找配置的时候，很难一下找到。所以我们采用分配置文件编写的方式。</p><h4 id="2-6-3-1-编写主配置文件引入其他配置文件"><a href="#2-6-3-1-编写主配置文件引入其他配置文件" class="headerlink" title="2.6.3.1    编写主配置文件引入其他配置文件"></a>2.6.3.1    编写主配置文件引入其他配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入其他spring配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-customer.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-jdbc.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-tx.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-3-2-编写针对需求的配置文件applicationContext-customer-xml"><a href="#2-6-3-2-编写针对需求的配置文件applicationContext-customer-xml" class="headerlink" title="2.6.3.2    编写针对需求的配置文件applicationContext-customer.xml"></a>2.6.3.2    编写针对需求的配置文件applicationContext-customer.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-3-3-编写数据库连接的配置文件applicationContext-jdbc-xml"><a href="#2-6-3-3-编写数据库连接的配置文件applicationContext-jdbc-xml" class="headerlink" title="2.6.3.3    编写数据库连接的配置文件applicationContext-jdbc.xml"></a>2.6.3.3    编写数据库连接的配置文件applicationContext-jdbc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用的是hibernate主配置文件中的内容，我们只需要指定hibernate配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:config/hibernate/hibernate.cfg.xml"</span>&gt;</span>/&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-3-4-编写事务控制的配置文件applicationContext-tx-xml"><a href="#2-6-3-4-编写事务控制的配置文件applicationContext-tx-xml" class="headerlink" title="2.6.3.4    编写事务控制的配置文件applicationContext-tx.xml"></a>2.6.3.4    编写事务控制的配置文件applicationContext-tx.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和事务相关的配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务的属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 建立切入点表达式和事务通知的关联 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-4-配置指定struts2配置文件位置"><a href="#2-6-4-配置指定struts2配置文件位置" class="headerlink" title="2.6.4    配置指定struts2配置文件位置"></a>2.6.4    配置指定struts2配置文件位置</h3><p>我们的spring和hibernate配置文件都存到了src/config/的对应包中了，只有struts2配置文件还在类的根路径下，它也可以通过配置的方式指定struts.xml的位置。配置的是过滤器的初始化参数。初始化参数的name和value都是固定写法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 手动指定struts2配置文件的位置：此处的配置绝大多数都是固定的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>struts-default.xml,struts-plugin.xml,config/struts/struts.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-5-分文件编写struts2配置文件"><a href="#2-6-5-分文件编写struts2配置文件" class="headerlink" title="2.6.5    分文件编写struts2配置文件"></a>2.6.5    分文件编写struts2配置文件</h3><p>当我们后面做的模块越来越多，struts2一个配置文件写起来也会杂乱无章，所以我们也可以把struts2的配置文件分开编写。</p><h4 id="2-6-5-1-编写struts2的主配置文件struts-xml"><a href="#2-6-5-1-编写struts2的主配置文件struts-xml" class="headerlink" title="2.6.5.1    编写struts2的主配置文件struts.xml"></a>2.6.5.1    编写struts2的主配置文件struts.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启开发者模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置公共包，有公共的配置就写在此处--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"myDefault"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入其他struts2配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"config/struts/struts-customer.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-5-2-针对不同模块编写不同的配置文件struts-customer-xml"><a href="#2-6-5-2-针对不同模块编写不同的配置文件struts-customer-xml" class="headerlink" title="2.6.5.2    针对不同模块编写不同的配置文件struts-customer.xml"></a>2.6.5.2    针对不同模块编写不同的配置文件struts-customer.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置和客户管理相关的动作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">extends</span>=<span class="string">"myDefault"</span> <span class="attr">namespace</span>=<span class="string">"/customer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/jsp/customer/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"findAllCustomer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span>&gt;</span>/jsp/customer/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-6-管理Action的两种方式"><a href="#2-6-6-管理Action的两种方式" class="headerlink" title="2.6.6    管理Action的两种方式"></a>2.6.6    管理Action的两种方式</h3><h4 id="2-6-6-1-让struts2自己来管理"><a href="#2-6-6-1-让struts2自己来管理" class="headerlink" title="2.6.6.1    让struts2自己来管理"></a>2.6.6.1    让struts2自己来管理</h4><p>此种方式就是在action标签的class属性中提供动作类的全限定类名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/jsp/customer/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-6-2-让spring来管理（实际开发中采用的方式）"><a href="#2-6-6-2-让spring来管理（实际开发中采用的方式）" class="headerlink" title="2.6.6.2    让spring来管理（实际开发中采用的方式）"></a>2.6.6.2    让spring来管理（实际开发中采用的方式）</h4><p>此种方式就是在spring配置文件中配置Action，在struts2配置文件action标签的class属性里写bean的id。</p><p><strong>spring配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>struts2配置文件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;addUICustomer&quot; class&#x3D;&quot;customerAction&quot; method&#x3D;&quot;addUICustomer&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;addUICustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h1 id="3-基于XML的引入式整合"><a href="#3-基于XML的引入式整合" class="headerlink" title="3.    基于XML的引入式整合"></a>3.    基于XML的引入式整合</h1><h2 id="3-1-明确"><a href="#3-1-明确" class="headerlink" title="3.1    明确"></a>3.1    明确</h2><p>引入式整合就是把hibernate.cfg.xml中的配置都挪到spring的配置文件中</p><h2 id="3-2-配置方式"><a href="#3-2-配置方式" class="headerlink" title="3.2    配置方式"></a>3.2    配置方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 和jdbc配置相关的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一部分：连接数据库的  用连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库的方言 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span></span><br><span class="line">                org.springframework.orm.hibernate5.SpringSessionContext</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第三部分：映射文件的位置</span></span><br><span class="line"><span class="comment">    mappingResources：它是一个注入string数组类型的数据。提供的是映射文件的位置。有几个映射文件，就需要写几个。</span></span><br><span class="line"><span class="comment">    mappingDirectoryLocations：它是注入一个Resource类型的数组。提供的是映射文件所在的目录。此属性一般多用于一个项目有多个地方存放映射配置。</span></span><br><span class="line"><span class="comment">            //服务端</span></span><br><span class="line"><span class="comment">                server_domain</span></span><br><span class="line"><span class="comment">            //移动端</span></span><br><span class="line"><span class="comment">                mobile_domain</span></span><br><span class="line"><span class="comment">    mappingLocations：它是注入一个Resource类型的数组。提供的映射文件的位置。它可以使用通配符。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/wgy/domain/*.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssh"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-基于注解的整合"><a href="#4-基于注解的整合" class="headerlink" title="4.    基于注解的整合"></a>4.    基于注解的整合</h1><h2 id="4-1-明确"><a href="#4-1-明确" class="headerlink" title="4.1    明确"></a>4.1    明确</h2><ul><li>注解整合仍然使用上面的环境，就是把xml的配置全部换成注解</li><li>spring的注解整合有两种方式，一种是用xml文件，一种是纯注解。</li><li>hibernate注解整合是把实体类映射改为JPA注解映射</li></ul><h2 id="4-2-整合步骤-spring使用xml文件"><a href="#4-2-整合步骤-spring使用xml文件" class="headerlink" title="4.2    整合步骤-spring使用xml文件"></a>4.2    整合步骤-spring使用xml文件</h2><h3 id="4-2-1-spring配置使用注解实现"><a href="#4-2-1-spring配置使用注解实现" class="headerlink" title="4.2.1    spring配置使用注解实现"></a>4.2.1    spring配置使用注解实现</h3><h4 id="4-2-1-1-在spring配置文件中配置要扫描的包"><a href="#4-2-1-1-在spring配置文件中配置要扫描的包" class="headerlink" title="4.2.1.1    在spring配置文件中配置要扫描的包"></a>4.2.1.1    在spring配置文件中配置要扫描的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring运行要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-2-把action-service和dao都用注解配置"><a href="#4-2-1-2-把action-service和dao都用注解配置" class="headerlink" title="4.2.1.2    把action,service和dao都用注解配置"></a>4.2.1.2    把action,service和dao都用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"customerAction"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    <span class="comment">//action中的方法不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    <span class="comment">//service中的方法不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//dao中必须自己定义HibernateTemplate，不能继承HibernateDaoSupport了</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HibernateTemplate hibernateTemplate;</span><br><span class="line">    <span class="comment">//dao中的方法不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-1-3-在spring配置文件中配置HiernateTemplate"><a href="#4-2-1-3-在spring配置文件中配置HiernateTemplate" class="headerlink" title="4.2.1.3    在spring配置文件中配置HiernateTemplate"></a>4.2.1.3    在spring配置文件中配置HiernateTemplate</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-4-在spring配置文件中配置事务管理器"><a href="#4-2-1-4-在spring配置文件中配置事务管理器" class="headerlink" title="4.2.1.4    在spring配置文件中配置事务管理器"></a>4.2.1.4    在spring配置文件中配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-5-在spring配置文件中开启spring对注解事务的支持"><a href="#4-2-1-5-在spring配置文件中开启spring对注解事务的支持" class="headerlink" title="4.2.1.5    在spring配置文件中开启spring对注解事务的支持"></a>4.2.1.5    在spring配置文件中开启spring对注解事务的支持</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-6-在客户的业务层实现类上使用-Transactional注解"><a href="#4-2-1-6-在客户的业务层实现类上使用-Transactional注解" class="headerlink" title="4.2.1.6    在客户的业务层实现类上使用@Transactional注解"></a>4.2.1.6    在客户的业务层实现类上使用@Transactional注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>, propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"customerDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>, propagation = Propagation.SUPPORTS)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        customerDao.saveCustomer(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-hibernate映射使用注解配置实现"><a href="#4-2-2-hibernate映射使用注解配置实现" class="headerlink" title="4.2.2    hibernate映射使用注解配置实现"></a>4.2.2    hibernate映射使用注解配置实现</h3><h4 id="4-2-2-1-实体类映射注解配置"><a href="#4-2-2-1-实体类映射注解配置" class="headerlink" title="4.2.2.1    实体类映射注解配置"></a>4.2.2.1    实体类映射注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> *  JPA规范：java 持久化规范</span></span><br><span class="line"><span class="comment"> *  注解全都是JPA规范的。</span></span><br><span class="line"><span class="comment"> *  导包都需要导入javax.persistence包下的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-2-spring中SessionFactory配置修改"><a href="#4-2-2-2-spring中SessionFactory配置修改" class="headerlink" title="4.2.2.2    spring中SessionFactory配置修改"></a>4.2.2.2    spring中SessionFactory配置修改</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一部分：连接数据库的  用连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库的方言 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span></span><br><span class="line">                org.springframework.orm.hibernate5.SpringSessionContext</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第三部分：指定实体类所在的包，当创建SessionFactory,会去该包中扫描实体类上的注解，从而生成映射配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.wgy.domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-struts2配置使用注解实现"><a href="#4-2-3-struts2配置使用注解实现" class="headerlink" title="4.2.3    struts2配置使用注解实现"></a>4.2.3    struts2配置使用注解实现</h3><h4 id="4-2-3-1-导入struts2注解的jar包"><a href="#4-2-3-1-导入struts2注解的jar包" class="headerlink" title="4.2.3.1    导入struts2注解的jar包"></a>4.2.3.1    导入struts2注解的jar包</h4><p><img src="https://ae01.alicdn.com/kf/H06baf8545a2f453690b05db1353cd31cG.jpg" alt="image-20200616123024972"></p><h4 id="4-2-3-2-使用注解配置Action"><a href="#4-2-3-2-使用注解配置Action" class="headerlink" title="4.2.3.2    使用注解配置Action"></a>4.2.3.2    使用注解配置Action</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"customerAction"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="comment">//-------以下都是struts2的注解-----------</span></span><br><span class="line"><span class="meta">@ParentPackage</span>(<span class="string">"struts-default"</span>)<span class="comment">//指定当前包的父包</span></span><br><span class="line"><span class="meta">@Namespace</span>(<span class="string">"/customer"</span>)<span class="comment">//指定名称空间，访问当前action的所有方法都需要有名称空间</span></span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(name = <span class="string">"addUICustomer"</span>, type = <span class="string">"dispatcher"</span>, location = <span class="string">"/jsp/customer/add.jsp"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(name = <span class="string">"findAllCustomer"</span>, type = <span class="string">"dispatcher"</span>, location = <span class="string">"/jsp/customer/list.jsp"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(name = <span class="string">"listCustomer"</span>, type = <span class="string">"redirectAction"</span>, location = <span class="string">"findAllCustomer"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"customerService"</span>)</span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"findAllCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">        customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addUICustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.saveCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"listCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customers = customers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-3-指定struts2开发模式"><a href="#4-2-3-3-指定struts2开发模式" class="headerlink" title="4.2.3.3    指定struts2开发模式"></a>4.2.3.3    指定struts2开发模式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>struts.devMode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SSH三大框架整合&quot;&gt;&lt;a href=&quot;#1-SSH三大框架整合&quot; class=&quot;headerlink&quot; title=&quot;1.    SSH三大框架整合&quot;&gt;&lt;/a&gt;1.    SSH三大框架整合&lt;/h1&gt;&lt;h2 id=&quot;1-1-整合说明&quot;&gt;&lt;a href=&quot;#1-1-整合说明&quot; class=&quot;headerlink&quot; title=&quot;1.1    整合说明&quot;&gt;&lt;/a&gt;1.1    整合说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;独立式整合指的是三个框架都使用自己的配置文件。&lt;/li&gt;
&lt;li&gt;引入式整合指的是hibernate主配置文件中的内容都配置到spring配置文件中&lt;/li&gt;
&lt;li&gt;在整合过程中，确保每步都运行成功，然后在继续往下做。&lt;/li&gt;
&lt;li&gt;整合中使用的案例是客户的保存和列表查询操作。&lt;/li&gt;
&lt;li&gt;后面的三种整合方式都基于1.2中的环境准备。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Hibernate" scheme="https://wgy1993.gitee.io/tags/Hibernate/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Spring(四)</title>
    <link href="https://wgy1993.gitee.io/archives/924a9eab.html"/>
    <id>https://wgy1993.gitee.io/archives/924a9eab.html</id>
    <published>2020-06-14T09:18:35.000Z</published>
    <updated>2020-06-14T09:43:21.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring中的JdbcTemplate"><a href="#1-Spring中的JdbcTemplate" class="headerlink" title="1.    Spring中的JdbcTemplate"></a>1.    Spring中的JdbcTemplate</h1><h2 id="1-1-JdbcTemplate概述"><a href="#1-1-JdbcTemplate概述" class="headerlink" title="1.1    JdbcTemplate概述"></a>1.1    JdbcTemplate概述</h2><p>它是spring框架中提供的一个对象，是对原始Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类，入下图所示：</p><p><img src="https://ae01.alicdn.com/kf/Hf09002ccceea433f99d07c8167dfe272U.jpg" alt="img"></p><a id="more"></a><p>我们今天的主角在<strong>spring-jdbc-4.24.RELEASE.jar</strong>中，我们在导包的时候，除了要导入这个jar包外，还需要导入一个<strong>spring-tx-4.2.4.RELEASE.jar</strong>（它是和事务相关的）。</p><h2 id="1-2-JdbcTemplate对象的创建"><a href="#1-2-JdbcTemplate对象的创建" class="headerlink" title="1.2    JdbcTemplate对象的创建"></a>1.2    JdbcTemplate对象的创建</h2><p>我们可以参考它的源码，来一探究竟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    setDataSource(dataSource);</span><br><span class="line">    afterPropertiesSet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">(DataSource dataSource, <span class="keyword">boolean</span> lazyInit)</span> </span>&#123;</span><br><span class="line">    setDataSource(dataSource);</span><br><span class="line">    setLazyInit(lazyInit);</span><br><span class="line">    afterPropertiesSet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了默认构造函数之外，都需要提供一个数据源。既然有set方法，依据我们之前学过的依赖注入，我们可不可以在配置文件中配置呢？</p><p>答案是肯定的。</p><h2 id="1-3-Spring中配置数据源"><a href="#1-3-Spring中配置数据源" class="headerlink" title="1.3    Spring中配置数据源"></a>1.3    Spring中配置数据源</h2><h3 id="1-3-1-环境搭建"><a href="#1-3-1-环境搭建" class="headerlink" title="1.3.1    环境搭建"></a>1.3.1    环境搭建</h3><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h3 id="1-3-2-编写Spring的配置文件"><a href="#1-3-2-编写Spring的配置文件" class="headerlink" title="1.3.2    编写Spring的配置文件"></a>1.3.2    编写Spring的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-配置数据源"><a href="#1-3-3-配置数据源" class="headerlink" title="1.3.3    配置数据源"></a>1.3.3    配置数据源</h3><p>我们之前已经接触过了两个数据源，一个是C3P0，一个是DBCP。要想使用这两数据源都需要导入对应的jar包。</p><h4 id="1-3-3-1-配置C3P0数据源"><a href="#1-3-3-1-配置C3P0数据源" class="headerlink" title="1.3.3.1    配置C3P0数据源"></a>1.3.3.1    配置C3P0数据源</h4><p><strong>导包:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hff80e0fe555c4f3c83c7dfbc09891e8eZ.jpg" alt="image-20200614142943344"></p><p><strong>在Spring的配置文件中配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-2-配置DBCP数据源"><a href="#1-3-3-2-配置DBCP数据源" class="headerlink" title="1.3.3.2    配置DBCP数据源"></a>1.3.3.2    配置DBCP数据源</h4><p><strong>导包:</strong></p><p><img src="https://ae01.alicdn.com/kf/H444aa6751fa84eadab7c19c25f7f60411.jpg" alt="image-20200614143326520"></p><p><strong>在Spring的配置文件中配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-3-配置spring内置数据源"><a href="#1-3-3-3-配置spring内置数据源" class="headerlink" title="1.3.3.3    配置spring内置数据源"></a>1.3.3.3    配置spring内置数据源</h4><p>spring框架也提供了一个内置数据源，我们也可以使用spring的内置数据源，它就在<code>spring-jdbc-4.2.4.REEASE.jar</code>包中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-将数据库连接的信息配置到属性文件中"><a href="#1-3-4-将数据库连接的信息配置到属性文件中" class="headerlink" title="1.3.4    将数据库连接的信息配置到属性文件中:"></a>1.3.4    将数据库连接的信息配置到属性文件中:</h3><p><strong>定义属性文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>引入外部的属性文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一种方式:</span><br><span class="line">&lt;!-- 引入外部属性文件： --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;location&quot; value&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">二种方式:</span><br><span class="line">&lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="1-4-JdbcTemplate的增删改查操作"><a href="#1-4-JdbcTemplate的增删改查操作" class="headerlink" title="1.4    JdbcTemplate的增删改查操作"></a>1.4    JdbcTemplate的增删改查操作</h2><h3 id="1-4-1-前期准备"><a href="#1-4-1-前期准备" class="headerlink" title="1.4.1    前期准备"></a>1.4.1    前期准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">创建数据库：</span><br><span class="line">create database spring;</span><br><span class="line">use spring;</span><br><span class="line"></span><br><span class="line">创建表：</span><br><span class="line">create table account(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(40),</span><br><span class="line">    money float</span><br><span class="line">)character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-在spring配置文件中配置JdbcTemplate"><a href="#1-4-2-在spring配置文件中配置JdbcTemplate" class="headerlink" title="1.4.2    在spring配置文件中配置JdbcTemplate"></a>1.4.2    在spring配置文件中配置JdbcTemplate</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-3-最基本使用"><a href="#1-4-3-最基本使用" class="headerlink" title="1.4.3    最基本使用"></a>1.4.3    最基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        jt.execute(<span class="string">"insert into account(name,money)values('eee',500)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-4-保存操作"><a href="#1-4-4-保存操作" class="headerlink" title="1.4.4    保存操作"></a>1.4.4    保存操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        jt.update(<span class="string">"insert into account(name,money)values(?,?)"</span>,<span class="string">"fff"</span>,<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-5-更新操作"><a href="#1-4-5-更新操作" class="headerlink" title="1.4.5    更新操作"></a>1.4.5    更新操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        jt.update(<span class="string">"update account set money = money-? where id = ?"</span>,<span class="number">300</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-6-删除操作"><a href="#1-4-6-删除操作" class="headerlink" title="1.4.6    删除操作"></a>1.4.6    删除操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        jt.update(<span class="string">"delete from account where id = ?"</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-7-查询所有操作"><a href="#1-4-7-查询所有操作" class="headerlink" title="1.4.7    查询所有操作"></a>1.4.7    查询所有操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ? "</span>,<span class="keyword">new</span> AccountRowMapper(), <span class="number">500</span>);</span><br><span class="line">        <span class="keyword">for</span>(Account o : accounts)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.跟id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),1000)</span>;</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-8-查询一个操作"><a href="#1-4-8-查询一个操作" class="headerlink" title="1.4.8    查询一个操作"></a>1.4.8    查询一个操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用RowMapper的方式：常用的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        List&lt;Account&gt; as = jt.query(<span class="string">"select * from account where id = ? "</span>, <span class="keyword">new</span> AccountRowMapper(), <span class="number">55</span>);</span><br><span class="line">        System.out.println(as.isEmpty()?<span class="string">"没有结果"</span>:as.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ResultSetExtractor的方式:不常用的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        Account account = jt.query(<span class="string">"select * from account where id = ?"</span>,<span class="keyword">new</span> AccountResultSetExtractor(),<span class="number">3</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-9-查询返回一行一列操作"><a href="#1-4-9-查询返回一行一列操作" class="headerlink" title="1.4.9    查询返回一行一列操作"></a>1.4.9    查询返回一行一列操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询返回一行一列：使用聚合函数，在不使用group by字句时，都是返回一行一列。最长用的就是分页中获取总记录条数</span></span><br><span class="line">        <span class="comment">//queryForObject是spring 3.x之后的新方法，在spring2.x的时候，它的方法是多个：queryForInt  queryForLong queryForShort</span></span><br><span class="line">        Integer total = jt.queryForObject(<span class="string">"select count(*) from account where money &gt; ? "</span>,Integer<span class="class">.<span class="keyword">class</span>,500)</span>;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-在dao中使用JdbcTemplate"><a href="#1-5-在dao中使用JdbcTemplate" class="headerlink" title="1.5    在dao中使用JdbcTemplate"></a>1.5    在dao中使用JdbcTemplate</h2><h3 id="1-5-1-准备实体类"><a href="#1-5-1-准备实体类" class="headerlink" title="1.5.1    准备实体类"></a>1.5.1    准备实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-第一种方式：在dao中定义JdbcTemplate"><a href="#1-5-2-第一种方式：在dao中定义JdbcTemplate" class="headerlink" title="1.5.2    第一种方式：在dao中定义JdbcTemplate"></a>1.5.2    第一种方式：在dao中定义JdbcTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> * 此版本的dao，需要给dao注入JdbcTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =  jdbcTemplate.query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =  jdbcTemplate.query(<span class="string">"select * from account where name = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set money = ? where id = ? "</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入jdbcTemplate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-第二种方式：让dao继承JdbcDaoSupport"><a href="#1-5-3-第二种方式：让dao继承JdbcDaoSupport" class="headerlink" title="1.5.3    第二种方式：让dao继承JdbcDaoSupport"></a>1.5.3    第二种方式：让dao继承JdbcDaoSupport</h3><p>JdbcDaoSupport是spring框架为我们提供的一个类，该类中定义了一个JdbcTemplate对象，我们可以直接获取使用，但是要想创建该对象，需要为其提供一个数据源：具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">extends</span> <span class="title">DaoSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate; </span><br><span class="line">    <span class="comment">//set方法注入数据源，判断是否注入了，注入了就创建JdbcTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.jdbcTemplate == <span class="keyword">null</span> || dataSource != <span class="keyword">this</span>.jdbcTemplate.getDataSource()) &#123;<span class="comment">//如果提供了数据源就创建JdbcTemplate</span></span><br><span class="line">            <span class="keyword">this</span>.jdbcTemplate = createJdbcTemplate(dataSource);</span><br><span class="line">            initTemplateConfig();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用数据源创建JdcbTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当然，我们也可以通过注入JdbcTemplate对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">        initTemplateConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用getJdbcTmeplate方法获取操作模板对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> * 此版本dao，只需要给它的父类注入一个数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl2</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        List&lt;Account&gt; list =  getJdbcTemplate().query(<span class="string">"select * from account where name = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ? "</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置dao2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao2"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl2"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-4-两种方式有什么区别呢？"><a href="#1-5-4-两种方式有什么区别呢？" class="headerlink" title="1.5.4    两种方式有什么区别呢？"></a>1.5.4    两种方式有什么区别呢？</h3><ul><li><p>第一种在Dao类中定义JdbcTemplate的方式，适用于所有配置方式（xml和注解都可以）。</p></li><li><p>第二种让Dao继承JdbcDaoSupport的方式，只能用于基于XML的方式，注解用不了。</p></li></ul><h1 id="2-Spring中的事务控制"><a href="#2-Spring中的事务控制" class="headerlink" title="2.    Spring中的事务控制"></a>2.    Spring中的事务控制</h1><h2 id="2-1-Spring中事务控制的API介绍"><a href="#2-1-Spring中事务控制的API介绍" class="headerlink" title="2.1    Spring中事务控制的API介绍"></a>2.1    Spring中事务控制的API介绍</h2><h3 id="2-1-1-PlatformTransactionManager"><a href="#2-1-1-PlatformTransactionManager" class="headerlink" title="2.1.1    PlatformTransactionManager"></a>2.1.1    <code>PlatformTransactionManager</code></h3><p>此接口是spring的事务管理器，它里面提供了我们常用的操作事务的方法，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H0f9aa6efc8be47fab0818bd43da1656fb.jpg" alt="img"></p><p>我们在开发中都是使用它的实现类，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H1a51ab25240f4c97aea81673cd0c7723f.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">真正管理事务的对象</span><br><span class="line">    org.springframework.jdbc.datasource.DataSourceTransactionManager使用Spring JDBC或iBatis 进行持久化数据时使用</span><br><span class="line">    org.springframework.orm.hibernate3.HibernateTransactionManager使用Hibernate版本进行持久化数据时使用</span><br></pre></td></tr></table></figure><h3 id="2-1-2-TransactionDefinition"><a href="#2-1-2-TransactionDefinition" class="headerlink" title="2.1.2    TransactionDefinition"></a>2.1.2    <code>TransactionDefinition</code></h3><p>它是事务的定义信息对象，里面有如下方法：</p><p><img src="https://ae01.alicdn.com/kf/Hbcc523b82b82441fa1149ce6b1e6f947e.jpg" alt="img"></p><h4 id="2-1-2-1-事务的隔离级别"><a href="#2-1-2-1-事务的隔离级别" class="headerlink" title="2.1.2.1    事务的隔离级别"></a>2.1.2.1    事务的隔离级别</h4><p><img src="https://ae01.alicdn.com/kf/H69719094b80344b0a9c19a2b7e369477m.jpg" alt="img"></p><h4 id="2-1-2-2-事务的传播行为"><a href="#2-1-2-2-事务的传播行为" class="headerlink" title="2.1.2.2    事务的传播行为"></a>2.1.2.2    事务的传播行为</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REQUIRED:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</span><br><span class="line">SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</span><br><span class="line">MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常</span><br><span class="line">REQUERS_NEW:新建事务，如果当前在事务中，把当前事务挂起。</span><br><span class="line">NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</span><br><span class="line">NEVER:以非事务方式运行，如果当前存在事务，抛出异常</span><br><span class="line">NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行REQUIRED类似的操作。</span><br></pre></td></tr></table></figure><h4 id="2-1-2-3-超时时间"><a href="#2-1-2-3-超时时间" class="headerlink" title="2.1.2.3    超时时间"></a>2.1.2.3    超时时间</h4><p>默认值是-1，没有超时限制。如果有，以秒为单位进行设置。</p><h4 id="2-1-2-4-是否是只读事务"><a href="#2-1-2-4-是否是只读事务" class="headerlink" title="2.1.2.4    是否是只读事务"></a>2.1.2.4    是否是只读事务</h4><p>建议查询时设置为只读</p><h3 id="2-1-3-TransactionStatus"><a href="#2-1-3-TransactionStatus" class="headerlink" title="2.1.3    TransactionStatus"></a>2.1.3    <code>TransactionStatus</code></h3><p>此接口提供的是事务具体的运行状态，方法介绍如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hb9f80860a64c459ea48687e8ee5a8ae5s.jpg" alt="img"></p><h2 id="2-2-基于XML的声明式事务控制（配置方式）"><a href="#2-2-基于XML的声明式事务控制（配置方式）" class="headerlink" title="2.2    基于XML的声明式事务控制（配置方式）"></a>2.2    基于XML的声明式事务控制（配置方式）</h2><h3 id="2-2-1-环境搭建"><a href="#2-2-1-环境搭建" class="headerlink" title="2.2.1    环境搭建"></a>2.2.1    环境搭建</h3><h4 id="2-2-1-1-拷贝必要的jar"><a href="#2-2-1-1-拷贝必要的jar" class="headerlink" title="2.2.1.1    拷贝必要的jar"></a>2.2.1.1    拷贝必要的jar</h4><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h4 id="2-2-1-2-创建spring的配置文件并导入约束"><a href="#2-2-1-2-创建spring的配置文件并导入约束" class="headerlink" title="2.2.1.2    创建spring的配置文件并导入约束"></a>2.2.1.2    创建spring的配置文件并导入约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-3-准备实体类"><a href="#2-2-1-3-准备实体类" class="headerlink" title="2.2.1.3    准备实体类"></a>2.2.1.3    准备实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-4-编写业务层接口和实现类"><a href="#2-2-1-4-编写业务层接口和实现类" class="headerlink" title="2.2.1.4    编写业务层接口和实现类"></a>2.2.1.4    编写业务层接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;<span class="comment">//查</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceName转出账户名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targeName转入账户名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName,String targeName,Float money)</span></span>;<span class="comment">//增删改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName);</span><br><span class="line">        <span class="comment">//2.修改两个账户的金额</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);<span class="comment">//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱</span></span><br><span class="line">        <span class="comment">//3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-5-编写Dao接口和实现类"><a href="#2-2-1-5-编写Dao接口和实现类" class="headerlink" title="2.2.1.5    编写Dao接口和实现类"></a>2.2.1.5    编写Dao接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> * 此版本dao，只需要给它的父类注入一个数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =  getJdbcTemplate().query(<span class="string">"select * from account where name = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ? "</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的封装类RowMapper的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-6-在配置文件中配置业务层和持久层"><a href="#2-2-1-6-在配置文件中配置业务层和持久层" class="headerlink" title="2.2.1.6    在配置文件中配置业务层和持久层"></a>2.2.1.6    在配置文件中配置业务层和持久层</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-配置步骤"><a href="#2-2-2-配置步骤" class="headerlink" title="2.2.2    配置步骤"></a>2.2.2    配置步骤</h3><h4 id="2-2-2-1-配置事务管理器"><a href="#2-2-2-1-配置事务管理器" class="headerlink" title="2.2.2.1    配置事务管理器"></a>2.2.2.1    配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-配置事务的通知引用事务管理器"><a href="#2-2-2-2-配置事务的通知引用事务管理器" class="headerlink" title="2.2.2.2    配置事务的通知引用事务管理器"></a>2.2.2.2    配置事务的通知引用事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-配置事务的属性"><a href="#2-2-2-3-配置事务的属性" class="headerlink" title="2.2.2.3    配置事务的属性"></a>2.2.2.3    配置事务的属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在tx:advice标签内部 配置事务的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定方法名称：是业务核心方法 </span></span><br><span class="line"><span class="comment">        read-only：是否是只读事务。默认false，不只读。</span></span><br><span class="line"><span class="comment">        isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。 </span></span><br><span class="line"><span class="comment">        propagation：指定事务的传播行为。</span></span><br><span class="line"><span class="comment">        timeout：指定超时时间。默认值为：-1。永不超时。</span></span><br><span class="line"><span class="comment">        rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">        no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-4-配置AOP-切入点表达式"><a href="#2-2-2-4-配置AOP-切入点表达式" class="headerlink" title="2.2.2.4    配置AOP-切入点表达式"></a>2.2.2.4    配置AOP-切入点表达式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-5-配置切入点表达式和事务通知的对应关系"><a href="#2-2-2-5-配置切入点表达式和事务通知的对应关系" class="headerlink" title="2.2.2.5    配置切入点表达式和事务通知的对应关系"></a>2.2.2.5    配置切入点表达式和事务通知的对应关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在aop:config标签内部：建立事务的通知和切入点表达式的关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-6-完整配置"><a href="#2-2-2-6-完整配置" class="headerlink" title="2.2.2.6    完整配置"></a>2.2.2.6    完整配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SPRING内置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring基于XML的声明式事务控制 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一步：配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二步：配置事务的通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第四步：配置事务的属性</span></span><br><span class="line"><span class="comment">            isolation：配置事务的隔离级别。默认值：DEFAULT，使用数据库的默认隔离级别。mysql是REPEATABLE_READ</span></span><br><span class="line"><span class="comment">            propagation：配置事务的传播行为。默认值是：REQUIRED。 一般的选择。（增删改方法）。当是查询方法时，选择SUPPORTS</span></span><br><span class="line"><span class="comment">            timeout：指定事务的超时时间。默认值是：-1，永不超时。当指定其他值时，以秒为单位</span></span><br><span class="line"><span class="comment">            read-only：配置是否只读事务。默认值是：false，读写型事务。   当指定为true时，表示只读，只能用于查询方法。</span></span><br><span class="line"><span class="comment">            rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常时，事务不回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">            no-rollback-for：用于指定一个异常，当执行产生该异常时，事务不回滚。产生其他异常时，事务回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第三步：配置aop</span></span><br><span class="line"><span class="comment">        要配的是：切入点表达式</span></span><br><span class="line"><span class="comment">                通知和切入点表达式的关联</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务通知和切入点表达式的关联 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-基于XML和注解组合使用的整合方式"><a href="#2-3-基于XML和注解组合使用的整合方式" class="headerlink" title="2.3    基于XML和注解组合使用的整合方式"></a>2.3    基于XML和注解组合使用的整合方式</h2><h3 id="2-3-1-环境搭建"><a href="#2-3-1-环境搭建" class="headerlink" title="2.3.1    环境搭建"></a>2.3.1    环境搭建</h3><h4 id="2-3-1-1-拷贝必备的jar"><a href="#2-3-1-1-拷贝必备的jar" class="headerlink" title="2.3.1.1    拷贝必备的jar"></a>2.3.1.1    拷贝必备的jar</h4><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h4 id="2-3-1-2-spring的配置文件导入约束并配置扫描的包"><a href="#2-3-1-2-spring的配置文件导入约束并配置扫描的包" class="headerlink" title="2.3.1.2    spring的配置文件导入约束并配置扫描的包"></a>2.3.1.2    spring的配置文件导入约束并配置扫描的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-3-准备实体类"><a href="#2-3-1-3-准备实体类" class="headerlink" title="2.3.1.3    准备实体类"></a>2.3.1.3    准备实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-4-业务层实现类使用注解让spring管理"><a href="#2-3-1-4-业务层实现类使用注解让spring管理" class="headerlink" title="2.3.1.4    业务层实现类使用注解让spring管理"></a>2.3.1.4    业务层实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName);</span><br><span class="line">        <span class="comment">//2.修改两个账户的金额</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);<span class="comment">//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱</span></span><br><span class="line">        <span class="comment">//3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-5-Dao实现类使用注解让spring管理"><a href="#2-3-1-5-Dao实现类使用注解让spring管理" class="headerlink" title="2.3.1.5    Dao实现类使用注解让spring管理"></a>2.3.1.5    Dao实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where id = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountId</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty() ? <span class="keyword">null</span> : list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where name = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//没有这个名称的账户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//结果集不唯一，不符合我们的约定</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，请检查数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set name=?,money=? where id=?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-配置步骤"><a href="#2-3-2-配置步骤" class="headerlink" title="2.3.2    配置步骤"></a>2.3.2    配置步骤</h3><h4 id="2-3-2-1-配置数据源和JdbcTemplate"><a href="#2-3-2-1-配置数据源和JdbcTemplate" class="headerlink" title="2.3.2.1    配置数据源和JdbcTemplate"></a>2.3.2.1    配置数据源和JdbcTemplate</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置jdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SPRING内置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-配置事务管理器并注入数据源"><a href="#2-3-2-2-配置事务管理器并注入数据源" class="headerlink" title="2.3.2.2    配置事务管理器并注入数据源"></a>2.3.2.2    配置事务管理器并注入数据源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-在业务层使用-Transactional注解"><a href="#2-3-2-3-在业务层使用-Transactional注解" class="headerlink" title="2.3.2.3    在业务层使用@Transactional注解"></a>2.3.2.3    在业务层使用@Transactional注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在需要事务的地方使用@Transactional注解</span><br><span class="line">    该注解可以写在接口上，类上和方法上。</span><br><span class="line">    写在接口上，表示该接口的所有实现类都有事务。</span><br><span class="line">    写在类上，表示该类中所有方法都有事务。</span><br><span class="line">    写在方法，表示该方法有事务。</span><br><span class="line">    优先级：就近原则。方法&gt;类&gt;接口</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS,readOnly = <span class="keyword">true</span>)<span class="comment">//只读型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED,readOnly=<span class="keyword">false</span>)<span class="comment">//读写型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询账户信息</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targetName);</span><br><span class="line">        <span class="comment">//2.转出账户减钱，转入账户加钱</span></span><br><span class="line">        source.setMoney(source.getMoney() - money);</span><br><span class="line">        target.setMoney(target.getMoney() + money);</span><br><span class="line">        <span class="comment">//3.更新账户信息</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-在配置文件中开启spring对注解事务的支持"><a href="#2-3-2-4-在配置文件中开启spring对注解事务的支持" class="headerlink" title="2.3.2.4    在配置文件中开启spring对注解事务的支持"></a>2.3.2.4    在配置文件中开启spring对注解事务的支持</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-基于纯注解的声明式事务控制（配置方式）"><a href="#2-4-基于纯注解的声明式事务控制（配置方式）" class="headerlink" title="2.4    基于纯注解的声明式事务控制（配置方式）"></a>2.4    基于纯注解的声明式事务控制（配置方式）</h2><h3 id="2-4-1-环境搭建"><a href="#2-4-1-环境搭建" class="headerlink" title="2.4.1    环境搭建"></a>2.4.1    环境搭建</h3><h4 id="2-4-1-1-拷贝必备的jar包"><a href="#2-4-1-1-拷贝必备的jar包" class="headerlink" title="2.4.1.1    拷贝必备的jar包"></a>2.4.1.1    拷贝必备的jar包</h4><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h4 id="2-4-1-2-创建一个类用于加载spring的配置并指定要扫描的包"><a href="#2-4-1-2-创建一个类用于加载spring的配置并指定要扫描的包" class="headerlink" title="2.4.1.2    创建一个类用于加载spring的配置并指定要扫描的包"></a>2.4.1.2    创建一个类用于加载spring的配置并指定要扫描的包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于初始化spring容器的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.wgy"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-3-准备实体类"><a href="#2-4-1-3-准备实体类" class="headerlink" title="2.4.1.3    准备实体类"></a>2.4.1.3    准备实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-4-业务层实现类使用注解让spring管理"><a href="#2-4-1-4-业务层实现类使用注解让spring管理" class="headerlink" title="2.4.1.4    业务层实现类使用注解让spring管理"></a>2.4.1.4    业务层实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName);</span><br><span class="line">        <span class="comment">//2.修改两个账户的金额</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);<span class="comment">//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱</span></span><br><span class="line">        <span class="comment">//3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-5-Dao实现类使用注解让spring管理"><a href="#2-4-1-5-Dao实现类使用注解让spring管理" class="headerlink" title="2.4.1.5    Dao实现类使用注解让spring管理"></a>2.4.1.5    Dao实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where id = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountId</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty() ? <span class="keyword">null</span> : list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where name = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//没有这个名称的账户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//结果集不唯一，不符合我们的约定</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，请检查数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set name=?,money=? where id=?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-配置步骤"><a href="#2-4-2-配置步骤" class="headerlink" title="2.4.2    配置步骤"></a>2.4.2    配置步骤</h3><h4 id="2-4-2-1-使用-Bean注解配置数据源和JdbcTemplate"><a href="#2-4-2-1-使用-Bean注解配置数据源和JdbcTemplate" class="headerlink" title="2.4.2.1    使用@Bean注解配置数据源和JdbcTemplate"></a>2.4.2.1    使用@Bean注解配置数据源和JdbcTemplate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接数据库的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/spring"</span>);</span><br><span class="line">        ds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        ds.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-2-使用-Bean注解配置配置事务管理器"><a href="#2-4-2-2-使用-Bean注解配置配置事务管理器" class="headerlink" title="2.4.2.2    使用@Bean注解配置配置事务管理器"></a>2.4.2.2    使用@Bean注解配置配置事务管理器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务控制的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-3-在业务层使用-Transactional注解"><a href="#2-4-2-3-在业务层使用-Transactional注解" class="headerlink" title="2.4.2.3    在业务层使用@Transactional注解"></a>2.4.2.3    在业务层使用@Transactional注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在需要事务的地方使用@Transactional注解</span><br><span class="line">    该注解可以写在接口上，类上和方法上。</span><br><span class="line">    写在接口上，表示该接口的所有实现类都有事务。</span><br><span class="line">    写在类上，表示该类中所有方法都有事务。</span><br><span class="line">    写在方法，表示该方法有事务。</span><br><span class="line">    优先级：就近原则。方法&gt;类&gt;接口</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS,readOnly = <span class="keyword">true</span>)<span class="comment">//只读型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED,readOnly=<span class="keyword">false</span>)<span class="comment">//读写型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询账户信息</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targetName);</span><br><span class="line">        <span class="comment">//2.转出账户减钱，转入账户加钱</span></span><br><span class="line">        source.setMoney(source.getMoney() - money);</span><br><span class="line">        target.setMoney(target.getMoney() + money);</span><br><span class="line">        <span class="comment">//3.更新账户信息</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-4-使用-EnableTransactionManagement开启spring对注解事务的的支持"><a href="#2-4-2-4-使用-EnableTransactionManagement开启spring对注解事务的的支持" class="headerlink" title="2.4.2.4    使用@EnableTransactionManagement开启spring对注解事务的的支持"></a>2.4.2.4    使用@EnableTransactionManagement开启spring对注解事务的的支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring的配置类，作用就是当bean.xml用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wgy"</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>, <span class="title">TransactionManager</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableTransactionManagement</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Spring中的JdbcTemplate&quot;&gt;&lt;a href=&quot;#1-Spring中的JdbcTemplate&quot; class=&quot;headerlink&quot; title=&quot;1.    Spring中的JdbcTemplate&quot;&gt;&lt;/a&gt;1.    Spring中的JdbcTemplate&lt;/h1&gt;&lt;h2 id=&quot;1-1-JdbcTemplate概述&quot;&gt;&lt;a href=&quot;#1-1-JdbcTemplate概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    JdbcTemplate概述&quot;&gt;&lt;/a&gt;1.1    JdbcTemplate概述&lt;/h2&gt;&lt;p&gt;它是spring框架中提供的一个对象，是对原始Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类，入下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/Hf09002ccceea433f99d07c8167dfe272U.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(三)</title>
    <link href="https://wgy1993.gitee.io/archives/680971a4.html"/>
    <id>https://wgy1993.gitee.io/archives/680971a4.html</id>
    <published>2020-06-13T10:27:26.000Z</published>
    <updated>2020-06-13T11:04:24.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-AOP的相关概念"><a href="#1-AOP的相关概念" class="headerlink" title="1.    AOP的相关概念"></a>1.    AOP的相关概念</h1><h2 id="1-1-AOP概述"><a href="#1-1-AOP概述" class="headerlink" title="1.1    AOP概述"></a>1.1    AOP概述</h2><h3 id="1-1-1-什么是AOP"><a href="#1-1-1-什么是AOP" class="headerlink" title="1.1.1    什么是AOP"></a>1.1.1    什么是AOP</h3><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/面向切面编程/6016335" target="_blank" rel="noopener">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/预编译/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><a id="more"></a><h3 id="1-1-2-AOP的作用及优势"><a href="#1-1-2-AOP的作用及优势" class="headerlink" title="1.1.2    AOP的作用及优势"></a>1.1.2    AOP的作用及优势</h3><p><strong>作用：</strong></p><p>在程序运行期间，不修改源码对已有方法进行增强。</p><p><strong>优势：</strong></p><p>减少重复代码    提高开发效率     维护方便</p><h3 id="1-1-3-AOP的实现方式"><a href="#1-1-3-AOP的实现方式" class="headerlink" title="1.1.3    AOP的实现方式"></a>1.1.3    AOP的实现方式</h3><p>使用动态代理技术</p><h2 id="1-2-AOP的具体应用"><a href="#1-2-AOP的具体应用" class="headerlink" title="1.2    AOP的具体应用"></a>1.2    AOP的具体应用</h2><h3 id="1-2-1-案例中问题"><a href="#1-2-1-案例中问题" class="headerlink" title="1.2.1    案例中问题"></a>1.2.1    案例中问题</h3><p>这是我们之前在struts2课程中做的一个完整的增删改查例子。下面是客户的业务层接口和实现类。</p><p>通过下面的代码，我们能看出什么问题吗?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> * 事务必须在此控制</span></span><br><span class="line"><span class="comment"> * 业务层都是调用持久层的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            customerDao.saveCustomer(customer);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            List&lt;Customer&gt; customers = customerDao.findAllCustomer();</span><br><span class="line">            tx.commit();</span><br><span class="line">            <span class="keyword">return</span> customers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面代码的问题就是：我们的事务控制是重复性的代码。这还只是一个业务类，如果有多个业务了，每个业务类中都会有这些重复性的代码。</strong></p><h3 id="1-2-2-动态代理回顾"><a href="#1-2-2-动态代理回顾" class="headerlink" title="1.2.2    动态代理回顾"></a>1.2.2    动态代理回顾</h3><h4 id="1-2-2-1-动态代理的特点"><a href="#1-2-2-1-动态代理的特点" class="headerlink" title="1.2.2.1    动态代理的特点"></a>1.2.2.1    动态代理的特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字节码随用随创建，随用随加载。</span><br><span class="line">它与静态代理的区别也在于此。因为静态代理是字节码一上来就创建好，并完成加载。</span><br><span class="line">装饰者模式就是静态代理的一种体现。</span><br></pre></td></tr></table></figure><h4 id="1-2-2-2-动态代理常用的有两种方式"><a href="#1-2-2-2-动态代理常用的有两种方式" class="headerlink" title="1.2.2.2    动态代理常用的有两种方式"></a>1.2.2.2    动态代理常用的有两种方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">基于接口的动态代理</span><br><span class="line">    提供者：JDK官方的Proxy类。</span><br><span class="line">    要求：被代理类最少实现一个接口。</span><br><span class="line">基于子类的动态代理</span><br><span class="line">    提供者：第三方的CGLib，如果报asmxxxx异常，需要导入asm.jar。</span><br><span class="line">    要求：被代理类不能用final修饰的类（最终类）。</span><br></pre></td></tr></table></figure><h4 id="1-2-2-3-使用JDK官方的Proxy类创建代理对象"><a href="#1-2-2-3-使用JDK官方的Proxy类创建代理对象" class="headerlink" title="1.2.2.3    使用JDK官方的Proxy类创建代理对象"></a>1.2.2.3    使用JDK官方的Proxy类创建代理对象</h4><p> 此处我们使用的是一个演员的例子：</p><p>在很久以前，演员和剧组都是直接见面联系的。没有中间人环节。</p><p>而随着时间的推移，产生了一个新兴职业：经纪人（中间人），这个时候剧组再想找演员就需要通过经纪人来找了。下面我们就用代码演示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个经纪公司的要求:</span></span><br><span class="line"><span class="comment"> *      能做基本的表演和危险的表演</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IActor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本演出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 危险演出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个演员</span></span><br><span class="line"><span class="comment"> * 实现了接口，就表示具有接口中的方法实现。即：符合经纪公司的要求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">implements</span> <span class="title">IActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿到钱，开始基本的表演："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿到钱，开始危险的表演："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个剧组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一个剧组找演员</span></span><br><span class="line">        <span class="keyword">final</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         * 作用：不改变源码的基础上，对已有方法增强。（它是AOP思想的实现技术）</span></span><br><span class="line"><span class="comment">         * 分类：</span></span><br><span class="line"><span class="comment">         *    基于接口的动态代理：</span></span><br><span class="line"><span class="comment">         *            要求：被代理类最少实现一个接口</span></span><br><span class="line"><span class="comment">         *            提供者：JDK官方</span></span><br><span class="line"><span class="comment">         *            涉及的类：Proxy</span></span><br><span class="line"><span class="comment">         *    创建代理对象的方法：newProxyInstance(ClassLoader,Class[],InvocationHandler)</span></span><br><span class="line"><span class="comment">         *            参数的含义：</span></span><br><span class="line"><span class="comment">         *            ClassLoader：类加载器。和被代理对象使用相同的类加载器。一般都是固定写法。</span></span><br><span class="line"><span class="comment">         *                Class[]：字节码数组。被代理类实现的接口。（要求代理对象和被代理对象具有相同的行为）。一般都是固定写法。</span></span><br><span class="line"><span class="comment">         *      InvocationHandler：它是一个接口，就是用于我们提供增强代码的。我们一般都是些一个该接口的实现类。实现类可以是匿名内部类。</span></span><br><span class="line"><span class="comment">         *                         它的含义就是：如何代理。此处的代码只能是谁用谁提供。</span></span><br><span class="line"><span class="comment">         *                策略模式：</span></span><br><span class="line"><span class="comment">         *                    使用要求：数据已经有了</span></span><br><span class="line"><span class="comment">         *                            目的明确</span></span><br><span class="line"><span class="comment">         *                            达成目标的过程就是策略。</span></span><br><span class="line"><span class="comment">         *                在dbutils中的ResultSetHandler就是策略模式的具体应用。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *基于子类的动态代理</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        IActor proxyActor = (IActor) Proxy.newProxyInstance(actor.getClass().getClassLoader(),</span><br><span class="line">                actor.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 执行被代理对象的任何方法都会经过该方法，该方法有拦截的功能</span></span><br><span class="line"><span class="comment">                     * 方法的参数</span></span><br><span class="line"><span class="comment">                     *   Object proxy：代理对象的引用。不一定每次都会有。</span></span><br><span class="line"><span class="comment">                     *   Method method：当前执行的方法</span></span><br><span class="line"><span class="comment">                     *   Object[] args：当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * 返回值：</span></span><br><span class="line"><span class="comment">                     *   当前执行方法的返回值</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//1.取出执行方法中的参数：给的多少钱</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//2.判断当前执行的是什么方法：每个经纪公司对不同演出收费不一样，此处开始判断</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"basicAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="comment">//基本演出，没有10000不演</span></span><br><span class="line">                            <span class="keyword">if</span>(money &gt; <span class="number">10000</span>)&#123;</span><br><span class="line">                                <span class="comment">//执行方法（开始表演）</span></span><br><span class="line">                                <span class="comment">//看上去剧组是给了20000，实际到演员手里只有10000</span></span><br><span class="line">                                <span class="comment">//这就是我们没有修改原来basicAct方法源码，对方法进行了增强</span></span><br><span class="line">                                rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"dangerAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="comment">//危险演出，没有50000不演</span></span><br><span class="line">                            <span class="keyword">if</span>(money &gt; <span class="number">50000</span>)&#123;</span><br><span class="line">                                <span class="comment">//执行方法</span></span><br><span class="line">                                <span class="comment">//看上去剧组是给了60000，实际到演员手里只有30000</span></span><br><span class="line">                                <span class="comment">//这就是我们没有修改原来dangerAct方法源码，对方法进行了增强</span></span><br><span class="line">                                rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> rtValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="comment">//      没有经纪公司的时候，直接找演员。</span></span><br><span class="line"><span class="comment">//      actor.basicAct(1000f);</span></span><br><span class="line"><span class="comment">//      actor.dangerAct(5000f);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      剧组无法直接联系演员，而是由经纪公司找的演员</span></span><br><span class="line">        proxyActor.basicAct(<span class="number">20000</span>);</span><br><span class="line">        proxyActor.dangerAct(<span class="number">60000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-4-使用CGLib的Enhancer类创建代理对象"><a href="#1-2-2-4-使用CGLib的Enhancer类创建代理对象" class="headerlink" title="1.2.2.4    使用CGLib的Enhancer类创建代理对象"></a>1.2.2.4    使用CGLib的Enhancer类创建代理对象</h4><p>还是那个演员的例子，只不过不让他实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个演员</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本的演出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CGLIB拿到钱，开始基本的表演："</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 危险的表演</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CGLIB拿到钱，开始危险的表演："</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个剧组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         *  作用：不改变源码的基础上，对已有方法增强。（它是AOP思想的实现技术）</span></span><br><span class="line"><span class="comment">         *  分类：</span></span><br><span class="line"><span class="comment">         *      基于接口的动态代理：</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *      基于子类的动态代理：</span></span><br><span class="line"><span class="comment">         *          要求：被代理类不能是最终类。不能被final修饰</span></span><br><span class="line"><span class="comment">         *          提供者：第三方CGLib</span></span><br><span class="line"><span class="comment">         *          涉及的类：Enhancer</span></span><br><span class="line"><span class="comment">         *          创建代理对象的方法：create(Class,Callback);</span></span><br><span class="line"><span class="comment">         *          参数的含义：</span></span><br><span class="line"><span class="comment">         *              Class：被代理对象的字节码</span></span><br><span class="line"><span class="comment">         *              Callback：如何代理。它和InvocationHandler的作用是一样的。它也是一个接口，我们一般使用该接口的子接口MethodInterceptor</span></span><br><span class="line"><span class="comment">         *                          在使用时我们也是创建该接口的匿名内部类。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Actor cglibActor = (Actor) Enhancer.create(actor.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法，都会经过该方法。它和基于接口动态代理的invoke方法的作用是一模一样的。</span></span><br><span class="line"><span class="comment">             * 方法的参数;</span></span><br><span class="line"><span class="comment">             *   前面三个和invoke方法的参数含义和作用都一样。</span></span><br><span class="line"><span class="comment">             *   MethodProxy methodProxy：当前执行方法的代理对象。一般不用</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//1.取出执行方法中的参数：给的多少钱</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前执行的是什么方法</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"basicAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    <span class="comment">//基本演出</span></span><br><span class="line">                    <span class="keyword">if</span>(money &gt; <span class="number">10000</span>)&#123;</span><br><span class="line">                        <span class="comment">//执行方法（开始表演）</span></span><br><span class="line">                        rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"dangerAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    <span class="comment">//危险演出</span></span><br><span class="line">                    <span class="keyword">if</span>(money &gt; <span class="number">50000</span>)&#123;</span><br><span class="line">                        <span class="comment">//执行方法</span></span><br><span class="line">                        rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> rtValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibActor.basicAct(<span class="number">50000</span>);</span><br><span class="line">        cglibActor.dangerAct(<span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-解决案例中的问题"><a href="#1-2-3-解决案例中的问题" class="headerlink" title="1.2.3    解决案例中的问题"></a>1.2.3    解决案例中的问题</h3><p>思路只有一个：使用动态代理技术创建客户业务层的代理对象，在执行CustomerServiceImpl时，对里面的方法进行增强，加入事务的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建客户业务层对象工厂（当然也可以创建其他业务层对象，只不过我们此处不做那么繁琐）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取客户业务层对象的代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICustomerService <span class="title">getCustomerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义客户业务层对象</span></span><br><span class="line">        <span class="keyword">final</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">        <span class="comment">//生成它的代理对象</span></span><br><span class="line">        ICustomerService proxyCustomerService = (ICustomerService) </span><br><span class="line">            Proxy.newProxyInstance(customerService.getClass().getClassLoader()</span><br><span class="line">            ,customerService.getClass().getInterfaces(), </span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">//执行客户业务层任何方法，都会在此处被拦截，我们对那些方法增强，加入事务。</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                String name = method.getName();</span><br><span class="line">                Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//开启事务</span></span><br><span class="line">                    HibernateUtil.beginTransaction();</span><br><span class="line">                    <span class="comment">//执行操作</span></span><br><span class="line">                    rtValue = method.invoke(customerService, args);</span><br><span class="line">                    <span class="comment">//提交事务</span></span><br><span class="line">                    HibernateUtil.commit();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    <span class="comment">//回滚事务</span></span><br><span class="line">                    HibernateUtil.rollback();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    <span class="comment">//释放资源.hibernate在我们事务操作（提交/回滚）之后，已经帮我们关了。</span></span><br><span class="line">                    <span class="comment">//如果他没关，我们在此处关</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> rtValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxyCustomerService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-Spring中的AOP"><a href="#1-3-Spring中的AOP" class="headerlink" title="1.3    Spring中的AOP"></a>1.3    Spring中的AOP</h2><h3 id="1-3-1-关于代理的选择"><a href="#1-3-1-关于代理的选择" class="headerlink" title="1.3.1    关于代理的选择"></a>1.3.1    关于代理的选择</h3><p>在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p><h3 id="1-3-2-AOP相关术语"><a href="#1-3-2-AOP相关术语" class="headerlink" title="1.3.2    AOP相关术语"></a>1.3.2    AOP相关术语</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Joinpoint(连接点):</span><br><span class="line">    所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。</span><br><span class="line">Pointcut(切入点):</span><br><span class="line">    所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。</span><br><span class="line">Advice(通知&#x2F;增强):</span><br><span class="line">    所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。</span><br><span class="line">    通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</span><br><span class="line">Introduction(引介):</span><br><span class="line">    引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。</span><br><span class="line">Target(目标对象):</span><br><span class="line">    代理的目标对象。</span><br><span class="line">Weaving(织入):</span><br><span class="line">    是指把增强应用到目标对象来创建新的代理对象的过程。</span><br><span class="line">    spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</span><br><span class="line">Proxy（代理）:</span><br><span class="line">    一个类被AOP织入增强后，就产生一个结果代理类。</span><br><span class="line">Aspect(切面):</span><br><span class="line">    是切入点和通知（引介）的结合。</span><br></pre></td></tr></table></figure><h3 id="1-3-3-学习spring中的AOP要明确的事"><a href="#1-3-3-学习spring中的AOP要明确的事" class="headerlink" title="1.3.3    学习spring中的AOP要明确的事"></a>1.3.3    学习spring中的AOP要明确的事</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a、开发阶段（我们做的）</span><br><span class="line">    编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。</span><br><span class="line">    把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP编程人员来做。</span><br><span class="line">    在配置文件中，声明切入点与通知间的关系，即切面。：AOP编程人员来做。</span><br><span class="line">b、运行阶段（Spring框架完成的）</span><br><span class="line">    Spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</span><br></pre></td></tr></table></figure><h1 id="2-基于XML的AOP配置"><a href="#2-基于XML的AOP配置" class="headerlink" title="2.    基于XML的AOP配置"></a>2.    基于XML的AOP配置</h1><h2 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1    环境搭建"></a>2.1    环境搭建</h2><h3 id="2-1-1-准备客户的业务层和接口（需要增强的类）"><a href="#2-1-1-准备客户的业务层和接口（需要增强的类）" class="headerlink" title="2.1.1    准备客户的业务层和接口（需要增强的类）"></a>2.1.1    准备客户的业务层和接口（需要增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-拷贝必备的jar包"><a href="#2-1-2-拷贝必备的jar包" class="headerlink" title="2.1.2    拷贝必备的jar包"></a>2.1.2    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/H6e871f3153dc4618a3cce47f417067955.jpg" alt="img"></p><h3 id="2-1-3-创建spring的配置文件并导入约束"><a href="#2-1-3-创建spring的配置文件并导入约束" class="headerlink" title="2.1.3    创建spring的配置文件并导入约束"></a>2.1.3    创建spring的配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-把客户的业务层配置到spring容器中"><a href="#2-1-4-把客户的业务层配置到spring容器中" class="headerlink" title="2.1.4    把客户的业务层配置到spring容器中"></a>2.1.4    把客户的业务层配置到spring容器中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把资源交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-制作通知（增强的类）"><a href="#2-1-5-制作通知（增强的类）" class="headerlink" title="2.1.5    制作通知（增强的类）"></a>2.1.5    制作通知（增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于记录日志的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录日志的操作</span></span><br><span class="line"><span class="comment">     * 计划让其在业务核心方法（切入点方法）执行之前执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的printLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-配置步骤"><a href="#2-2-配置步骤" class="headerlink" title="2.2    配置步骤"></a>2.2    配置步骤</h2><h3 id="2-2-1-把通知类用bean标签配置起来"><a href="#2-2-1-把通知类用bean标签配置起来" class="headerlink" title="2.2.1    把通知类用bean标签配置起来"></a>2.2.1    把通知类用bean标签配置起来</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把通知类也交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.wgy.util.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-使用aop-config声明aop配置"><a href="#2-2-2-使用aop-config声明aop配置" class="headerlink" title="2.2.2    使用aop:config声明aop配置"></a>2.2.2    使用aop:config声明aop配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- aop的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置的代码都写在此处 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-使用aop-aspect配置切面"><a href="#2-2-3-使用aop-aspect配置切面" class="headerlink" title="2.2.3    使用aop:aspect配置切面"></a>2.2.3    使用aop:aspect配置切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置切面 ：此标签要出现在aop:config内部</span></span><br><span class="line"><span class="comment">    id：给切面提供一个唯一标识</span></span><br><span class="line"><span class="comment">    ref：引用的是通知类的bean的id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通知的类型要写在此处--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-使用aop-before配置前置通知"><a href="#2-2-4-使用aop-before配置前置通知" class="headerlink" title="2.2.4    使用aop:before配置前置通知"></a>2.2.4    使用aop:before配置前置通知</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于配置前置通知：指定增强的方法在切入点方法之前执行 </span></span><br><span class="line"><span class="comment">            method:用于指定通知类中的增强方法名称</span></span><br><span class="line"><span class="comment">            ponitcut-ref：用于指定切入点的表达式的引用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-使用aop-pointcut配置切入点表达式"><a href="#2-2-5-使用aop-pointcut配置切入点表达式" class="headerlink" title="2.2.5    使用aop:pointcut配置切入点表达式"></a>2.2.5    使用aop:pointcut配置切入点表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public void com.wgy.service.impl.CustomerServiceImpl.saveCustomer())"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-切入点表达式说明"><a href="#2-3-切入点表达式说明" class="headerlink" title="2.3    切入点表达式说明"></a>2.3    切入点表达式说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">execution:</span><br><span class="line">        匹配方法的执行(常用)</span><br><span class="line">        execution(表达式)</span><br><span class="line">表达式语法：execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br><span class="line">写法说明：</span><br><span class="line">    全匹配方式：</span><br><span class="line">        public void com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    访问修饰符可以省略</span><br><span class="line">        void com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    返回值可以使用*号，表示任意返回值</span><br><span class="line">        * com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    包名可以使用*号，表示任意包，但是有几级包，需要写几个*</span><br><span class="line">        * *.*.*.*.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    使用..来表示当前包，及其子包</span><br><span class="line">        * com..CustomerServiceImpl.saveCustomer()</span><br><span class="line">    类名可以使用*号，表示任意类</span><br><span class="line">        * com..*.saveCustomer()</span><br><span class="line">    方法名可以使用*号，表示任意方法</span><br><span class="line">        * com..*.*()</span><br><span class="line">    参数列表可以使用*，表示参数可以是任意数据类型，但是必须有参数</span><br><span class="line">        * com..*.*(*)</span><br><span class="line">    参数列表可以使用..表示有无参数均可，有参数可以是任意类型</span><br><span class="line">        * com..*.*(..)</span><br><span class="line">    全通配方式：</span><br><span class="line">        * *..*.*(..)</span><br><span class="line">    实际开发中，我们一般情况下，我们都是对业务层方法进行增强：</span><br><span class="line">        所以写法：* com.wgy.service.impl.*.*(..)</span><br></pre></td></tr></table></figure><h2 id="2-4-完整配置"><a href="#2-4-完整配置" class="headerlink" title="2.4    完整配置"></a>2.4    完整配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 基于xml的aop配置步骤 ：要想使用spring的aop，必须导入aop的jar包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一步：把通知类交给spring来管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.wgy.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二步：导入aop名称空间，并且使用aop:config开始aop的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义通用的切入点表达式，如果写在aop:aspct标签外部，则表示所有切面可用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 第三步：使用aop:aspect配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第四步：配置通知的类型，指定增强的方法何时执行。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义通用的切入点表达式：如果是写在了aop:aspect标签内部，则表示只有当前切面可用</span></span><br><span class="line"><span class="comment">            &lt;aop:pointcut expression="execution(* com.wgy.service.impl.*.*(..))" id="pt1"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-通知的类型"><a href="#2-5-通知的类型" class="headerlink" title="2.5    通知的类型"></a>2.5    通知的类型</h2><h3 id="2-5-1-类型说明"><a href="#2-5-1-类型说明" class="headerlink" title="2.5.1    类型说明"></a>2.5.1    类型说明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置通知的类型</span></span><br><span class="line"><span class="comment">    aop:before：</span></span><br><span class="line"><span class="comment">        用于配置前置通知。前置通知的执行时间点：切入点方法执行之前执行</span></span><br><span class="line"><span class="comment">    aop:after-returning：</span></span><br><span class="line"><span class="comment">        用于配置后置通知。后置通知的执行时间点：切入点方法正常执行之后。它和异常通知只能有一个执行</span></span><br><span class="line"><span class="comment">    aop:after-throwing</span></span><br><span class="line"><span class="comment">        用于配置异常通知。异常通知的执行时间点：切入点方法执行产生异常后执行。它和后置通知只能执行一个。</span></span><br><span class="line"><span class="comment">    aop:after</span></span><br><span class="line"><span class="comment">        用于配置最终通知。最终通知的执行时间点：无论切入点方法执行时是否有异常，它都会在其后面执行。</span></span><br><span class="line"><span class="comment">    aop:around</span></span><br><span class="line"><span class="comment">        用于配置环绕通知。他和前面四个不一样，他不是用于指定通知方法何时执行的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundPringLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-环绕通知的特殊说明"><a href="#2-5-2-环绕通知的特殊说明" class="headerlink" title="2.5.2    环绕通知的特殊说明"></a>2.5.2    环绕通知的特殊说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环绕通知</span></span><br><span class="line"><span class="comment"> * 问题：</span></span><br><span class="line"><span class="comment"> *  当我们配置了环绕通知之后，切入点方法没有执行，而环绕通知里的代码执行了。</span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> *  由动态代理可知，环绕通知指的是invoke方法，并且里面有明确的切入点方法调用。而我们现在的环绕通知没有明确切入点方法调用。</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> *  spring为我们提供了一个接口：ProceedingJoinPoint。该接口可以作为环绕通知的方法参数来使用。</span></span><br><span class="line"><span class="comment"> *  在程序运行时，spring框架会为我们提供该接口的实现类，供我们使用。</span></span><br><span class="line"><span class="comment"> *  该接口中有一个方法，proceed()，它的作用就等同于method.invoke方法，就是明确调用业务层核心方法（切入点方法）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 环绕通知：</span></span><br><span class="line"><span class="comment"> *  它是spring框架为我们提供的一种可以在代码中手动控制通知方法什么时候执行的方式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。前置"</span>);</span><br><span class="line">        rtValue = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。后置"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。异常"</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。最终"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rtValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-基于注解的AOP配置"><a href="#3-基于注解的AOP配置" class="headerlink" title="3.    基于注解的AOP配置"></a>3.    基于注解的AOP配置</h1><h2 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1    环境搭建"></a>3.1    环境搭建</h2><h3 id="3-1-1-准备客户的业务层和接口（需要增强的类）"><a href="#3-1-1-准备客户的业务层和接口（需要增强的类）" class="headerlink" title="3.1.1    准备客户的业务层和接口（需要增强的类）"></a>3.1.1    准备客户的业务层和接口（需要增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-拷贝必备的jar包"><a href="#3-1-2-拷贝必备的jar包" class="headerlink" title="3.1.2    拷贝必备的jar包"></a>3.1.2    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/H6e871f3153dc4618a3cce47f417067955.jpg" alt="img"></p><h3 id="3-1-3-创建spring的配置文件并导入约束"><a href="#3-1-3-创建spring的配置文件并导入约束" class="headerlink" title="3.1.3    创建spring的配置文件并导入约束"></a>3.1.3    创建spring的配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-4-把资源使用注解让spring来管理"><a href="#3-1-4-把资源使用注解让spring来管理" class="headerlink" title="3.1.4    把资源使用注解让spring来管理"></a>3.1.4    把资源使用注解让spring来管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-5-在配置文件中指定spring要扫描的包"><a href="#3-1-5-在配置文件中指定spring要扫描的包" class="headerlink" title="3.1.5    在配置文件中指定spring要扫描的包"></a>3.1.5    在配置文件中指定spring要扫描的包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知spring，在创建容器时要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-配置步骤"><a href="#3-2-配置步骤" class="headerlink" title="3.2    配置步骤"></a>3.2    配置步骤</h2><h3 id="3-2-1-把通知类也使用注解配置"><a href="#3-2-1-把通知类也使用注解配置" class="headerlink" title="3.2.1    把通知类也使用注解配置"></a>3.2.1    把通知类也使用注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个记录日志的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-在通知类上使用-Aspect注解声明为切面"><a href="#3-2-2-在通知类上使用-Aspect注解声明为切面" class="headerlink" title="3.2.2    在通知类上使用@Aspect注解声明为切面"></a>3.2.2    在通知类上使用@Aspect注解声明为切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个记录日志的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-在增强的方法上使用注解配置通知"><a href="#3-2-3-在增强的方法上使用注解配置通知" class="headerlink" title="3.2.3    在增强的方法上使用注解配置通知"></a>3.2.3    在增强的方法上使用注解配置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于记录日志的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//配置了切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定切入点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @Before("execution(* com.wgy.service.impl.*.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置：Logger中的beforePrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @AfterReturning("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置：Logger中的afterReturningPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @AfterThrowing("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowingPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常：Logger中的afterThrowingPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @After("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终：Logger中的afterPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。前置"</span>);</span><br><span class="line">            rtValue = pjp.proceed();</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。后置"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。异常"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。最终"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-在spring配置文件中开启spring对注解AOP的支持"><a href="#3-2-4-在spring配置文件中开启spring对注解AOP的支持" class="headerlink" title="3.2.4    在spring配置文件中开启spring对注解AOP的支持"></a>3.2.4    在spring配置文件中开启spring对注解AOP的支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启spring对注解AOP的支持 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-不使用XML的配置方式"><a href="#3-3-不使用XML的配置方式" class="headerlink" title="3.3    不使用XML的配置方式"></a>3.3    不使用XML的配置方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.wgy"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-AOP的相关概念&quot;&gt;&lt;a href=&quot;#1-AOP的相关概念&quot; class=&quot;headerlink&quot; title=&quot;1.    AOP的相关概念&quot;&gt;&lt;/a&gt;1.    AOP的相关概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-AOP概述&quot;&gt;&lt;a href=&quot;#1-1-AOP概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    AOP概述&quot;&gt;&lt;/a&gt;1.1    AOP概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是AOP&quot;&gt;&lt;a href=&quot;#1-1-1-什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是AOP&quot;&gt;&lt;/a&gt;1.1.1    什么是AOP&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：&lt;a href=&quot;https://baike.baidu.com/item/面向切面编程/6016335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向切面编程&lt;/a&gt;，通过&lt;a href=&quot;https://baike.baidu.com/item/预编译/3191547&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;预编译&lt;/a&gt;方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是&lt;a href=&quot;https://baike.baidu.com/item/OOP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OOP&lt;/a&gt;的延续，是软件开发中的一个热点，也是&lt;a href=&quot;https://baike.baidu.com/item/Spring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring&lt;/a&gt;框架中的一个重要内容，是&lt;a href=&quot;https://baike.baidu.com/item/函数式编程/4035031&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数式编程&lt;/a&gt;的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的&lt;a href=&quot;https://baike.baidu.com/item/耦合度/2603938&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;耦合度&lt;/a&gt;降低，提高程序的可重用性，同时提高了开发的效率。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
</feed>
