<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wgy的博客</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wgy1993.gitee.io/"/>
  <updated>2020-08-05T08:59:52.816Z</updated>
  <id>https://wgy1993.gitee.io/</id>
  
  <author>
    <name>Wgy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zookeeper(二)</title>
    <link href="https://wgy1993.gitee.io/archives/4ebc2ef7.html"/>
    <id>https://wgy1993.gitee.io/archives/4ebc2ef7.html</id>
    <published>2020-08-05T08:55:24.000Z</published>
    <updated>2020-08-05T08:59:52.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-zookeeper源码解析"><a href="#1-zookeeper源码解析" class="headerlink" title="1.    zookeeper源码解析"></a>1.    zookeeper源码解析</h1><h2 id="1-1-下载zookeeper源码，导入IDEA中"><a href="#1-1-下载zookeeper源码，导入IDEA中" class="headerlink" title="1.1    下载zookeeper源码，导入IDEA中"></a>1.1    下载zookeeper源码，导入IDEA中</h2><p>下载地址：<a href="https://github.com/apache/zookeeper" target="_blank" rel="noopener">https://github.com/apache/zookeeper</a></p><a id="more"></a><h2 id="1-2-启动"><a href="#1-2-启动" class="headerlink" title="1.2    启动"></a>1.2    启动</h2><p>根据bin目录下的启动脚本zkServer.sh中加载启动类：<code>QuorumPeerMain</code>类</p><p><img src="https://p.pstatp.com/origin/1383e0000188928d52ee3" alt="image-20200803143136525"></p><p><code>QuorumPeerMain</code> 中<code>main</code>方法执行<code>initializeAndRun</code>方法</p><p><img src="https://p.pstatp.com/origin/1373c00013304b76e41b4" alt="image-20200803143219426"></p><p>跟进 <code>initializeAndRun</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initializeAndRun</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ConfigException, IOException, AdminServerException </span>&#123;</span><br><span class="line">    <span class="comment">//1.加载配置文件</span></span><br><span class="line">    QuorumPeerConfig config = <span class="keyword">new</span> QuorumPeerConfig();</span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">        config.parse(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start and schedule the the purge task</span></span><br><span class="line">    <span class="comment">//2.启动清除任务 主要清除旧的快照和日志文件</span></span><br><span class="line">    DatadirCleanupManager purgeMgr = <span class="keyword">new</span> DatadirCleanupManager(config.getDataDir(), config.getDataLogDir(), config.getSnapRetainCount(), config.getPurgeInterval());</span><br><span class="line">    purgeMgr.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 启动zk zookeeper启动方式分为两种：单机启动和集群启动</span></span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">1</span> &amp;&amp; config.isDistributed()) &#123;</span><br><span class="line">        <span class="comment">//启动集群</span></span><br><span class="line">        runFromConfig(config);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Either no config or no quorum defined in config, running "</span></span><br><span class="line">                 + <span class="string">" in standalone mode"</span>);</span><br><span class="line">        <span class="comment">// there is only server in the quorum -- run as standalone</span></span><br><span class="line">        <span class="comment">//启动单机</span></span><br><span class="line">        ZooKeeperServerMain.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>initializeAndRun</code>方法中主要做了三件事</p><ul><li><p>加载解析配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">File configFile = (<span class="keyword">new</span> VerifyingFileFactory.Builder(LOG).warnForRelativePath().failForNonExistingPath().build()).create(path);</span><br><span class="line"></span><br><span class="line">Properties cfg = <span class="keyword">new</span> Properties();</span><br><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(configFile);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    cfg.load(in);</span><br><span class="line">    configFileStr = path;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read entire config file as initial configuration */</span></span><br><span class="line">initialConfig = <span class="keyword">new</span> String(Files.readAllBytes(configFile.toPath()));</span><br><span class="line"></span><br><span class="line">parseProperties(cfg);</span><br></pre></td></tr></table></figure><p>将配置文件加载到 <code>Properties cfg</code>对象中，解析cfg对象。zookeeper所有配置信息封装到一个<code>QuorumPeerConfig</code>对象中</p></li><li><p>启动定时清除任务</p><p><code>PurgeTask</code>继承<code>TimeTask</code>，定时执行<code>run</code>方法中的<code>purge</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PurgeTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File logsDir;</span><br><span class="line">    <span class="keyword">private</span> File snapsDir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> snapRetainCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PurgeTask</span><span class="params">(File dataDir, File snapDir, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        logsDir = dataDir;</span><br><span class="line">        snapsDir = snapDir;</span><br><span class="line">        snapRetainCount = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Purge task started."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PurgeTxnLog.purge(logsDir, snapsDir, snapRetainCount);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Error occurred while purging."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">"Purge task completed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>purge</code> 方法主要清除旧的快照和日志文件</p></li><li><p>启动 zk</p><p>zookeeper启动方式分为两种：单机启动和集群启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.length == <span class="number">1</span> &amp;&amp; config.isDistributed()) &#123;</span><br><span class="line">    <span class="comment">//启动集群</span></span><br><span class="line">    runFromConfig(config);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    LOG.warn(<span class="string">"Either no config or no quorum defined in config, running "</span></span><br><span class="line">             + <span class="string">" in standalone mode"</span>);</span><br><span class="line">    <span class="comment">// there is only server in the quorum -- run as standalone</span></span><br><span class="line">    <span class="comment">//启动单机</span></span><br><span class="line">    ZooKeeperServerMain.main(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们看看单机启动的源码 <code>main</code>方法调用<code>initializeAndRun</code>方法，<code>initializeAndRun</code>首先加载配置文件，然后执行<code>runFromConfig(config)</code>方法，我们看看<code>runFromConfig</code>具体执行了什么操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runFromConfig</span><span class="params">(ServerConfig config)</span> <span class="keyword">throws</span> IOException, AdminServerException </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"Starting server"</span>);</span><br><span class="line">    FileTxnSnapLog txnLog = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.首先开启一下metrics监控</span></span><br><span class="line">            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(config.getMetricsProviderClassName(), config.getMetricsProviderConfiguration());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MetricsProviderLifeCycleException error) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Cannot boot MetricsProvider "</span> + config.getMetricsProviderClassName(), error);</span><br><span class="line">        &#125;</span><br><span class="line">        ServerMetrics.metricsProviderInitialized(metricsProvider);</span><br><span class="line">        <span class="comment">// Note that this thread isn't going to be doing anything else,</span></span><br><span class="line">        <span class="comment">// so rather than spawning another thread, we will just call</span></span><br><span class="line">        <span class="comment">// run() in this thread.</span></span><br><span class="line">        <span class="comment">// create a file logger url from the command line args</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建了FileTxnLog实例和FIleSnap实例，并保存刚启动时候日志数据</span></span><br><span class="line">        txnLog = <span class="keyword">new</span> FileTxnSnapLog(config.dataLogDir, config.dataDir);</span><br><span class="line">        JvmPauseMonitor jvmPauseMonitor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (config.jvmPauseMonitorToRun) &#123;</span><br><span class="line">            jvmPauseMonitor = <span class="keyword">new</span> JvmPauseMonitor(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> ZooKeeperServer zkServer = <span class="keyword">new</span> ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, <span class="keyword">null</span>, config.initialConfig);</span><br><span class="line">        txnLog.setServerStats(zkServer.serverStats());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Registers shutdown handler which will be used to know the</span></span><br><span class="line">        <span class="comment">// server error or shutdown state changes.</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch shutdownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        zkServer.registerServerShutdownHandler(<span class="keyword">new</span> ZooKeeperServerShutdownHandler(shutdownLatch));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start Admin server</span></span><br><span class="line">        <span class="comment">//3. 启动adminServer</span></span><br><span class="line">        adminServer = AdminServerFactory.createAdminServer();</span><br><span class="line">        adminServer.setZooKeeperServer(zkServer);</span><br><span class="line">        adminServer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 启动NIOServerCnxnFactory</span></span><br><span class="line">        <span class="keyword">boolean</span> needStartZKServer = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//4.1从解析出的配置中配置NIOServerCnxnFactory</span></span><br><span class="line">        <span class="keyword">if</span> (config.getClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//4.2启动ZookeeperServer，</span></span><br><span class="line">            cnxnFactory.startup(zkServer);</span><br><span class="line">            <span class="comment">// zkServer has been started. So we don't need to start it again in secureCnxnFactory.</span></span><br><span class="line">            needStartZKServer = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.getSecureClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            secureCnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">true</span>);</span><br><span class="line">            secureCnxnFactory.startup(zkServer, needStartZKServer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        containerManager = <span class="keyword">new</span> ContainerManager(zkServer.getZKDatabase(), zkServer.firstProcessor,</span><br><span class="line">                                                Integer.getInteger(<span class="string">"znode.container.checkIntervalMs"</span>, (<span class="keyword">int</span>) TimeUnit.MINUTES.toMillis(<span class="number">1</span>)),</span><br><span class="line">                                                Integer.getInteger(<span class="string">"znode.container.maxPerMinute"</span>, <span class="number">10000</span>)</span><br><span class="line">                                               );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        containerManager.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Watch status of ZooKeeper server. It will do a graceful shutdown</span></span><br><span class="line">        <span class="comment">// if the server is not running or hits an internal error.</span></span><br><span class="line">        shutdownLatch.await();</span><br><span class="line"></span><br><span class="line">        shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cnxnFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cnxnFactory.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (secureCnxnFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            secureCnxnFactory.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zkServer.canShutdown()) &#123;</span><br><span class="line">            zkServer.shutdown(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// warn, but generally this is ok</span></span><br><span class="line">        LOG.warn(<span class="string">"Server interrupted"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (txnLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">            txnLog.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (metricsProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                metricsProvider.stop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Error while stopping metrics"</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动过程首先开启一下 <code>metrics</code>监控,然后启动<code>admin server</code>,然后启动<code>zk server</code>，我们来看看启动过程</p><p><code>ServerCnxnFactory</code>中<code>startup</code>方法调用<code>NettyServerCnxnFactory</code>实现类启动方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">(ZooKeeperServer zks, <span class="keyword">boolean</span> startServer)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    start();</span><br><span class="line">    setZooKeeperServer(zks);</span><br><span class="line">    <span class="keyword">if</span> (startServer) &#123;</span><br><span class="line">        zks.startdata();</span><br><span class="line">        zks.startup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动方法执行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">        createSessionTracker();</span><br><span class="line">    &#125;</span><br><span class="line">    startSessionTracker();</span><br><span class="line">    setupRequestProcessors();</span><br><span class="line"></span><br><span class="line">    startRequestThrottler();</span><br><span class="line"></span><br><span class="line">    registerJMX();</span><br><span class="line"></span><br><span class="line">    startJvmPauseMonitor();</span><br><span class="line"></span><br><span class="line">    registerMetrics();</span><br><span class="line"></span><br><span class="line">    setState(State.RUNNING);</span><br><span class="line">    requestPathMetricsCollector.start();</span><br><span class="line">    notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们看看集群启动过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runFromConfig</span><span class="params">(QuorumPeerConfig config)</span> <span class="keyword">throws</span> IOException, AdminServerException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ManagedUtil.registerLog4jMBeans();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JMException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">"Unable to register log4j JMX control"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOG.info(<span class="string">"Starting quorum peer"</span>);</span><br><span class="line">    MetricsProvider metricsProvider;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        metricsProvider = MetricsProviderBootstrap.startMetricsProvider(config.getMetricsProviderClassName(), config.getMetricsProviderConfiguration());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MetricsProviderLifeCycleException error) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Cannot boot MetricsProvider "</span> + config.getMetricsProviderClassName(), error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ServerMetrics.metricsProviderInitialized(metricsProvider);</span><br><span class="line">        ServerCnxnFactory cnxnFactory = <span class="keyword">null</span>;</span><br><span class="line">        ServerCnxnFactory secureCnxnFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.getClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.getSecureClientPortAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            secureCnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quorumPeer = getQuorumPeer();</span><br><span class="line">        quorumPeer.setTxnFactory(<span class="keyword">new</span> FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));</span><br><span class="line">        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());</span><br><span class="line">        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());</span><br><span class="line">        <span class="comment">//quorumPeer.setQuorumPeers(config.getAllMembers());</span></span><br><span class="line">        quorumPeer.setElectionType(config.getElectionAlg());</span><br><span class="line">        quorumPeer.setMyid(config.getServerId());</span><br><span class="line">        quorumPeer.setTickTime(config.getTickTime());</span><br><span class="line">        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());</span><br><span class="line">        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());</span><br><span class="line">        quorumPeer.setInitLimit(config.getInitLimit());</span><br><span class="line">        quorumPeer.setSyncLimit(config.getSyncLimit());</span><br><span class="line">        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());</span><br><span class="line">        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());</span><br><span class="line">        quorumPeer.setConfigFileName(config.getConfigFilename());</span><br><span class="line">        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());</span><br><span class="line">        quorumPeer.setZKDatabase(<span class="keyword">new</span> ZKDatabase(quorumPeer.getTxnFactory()));</span><br><span class="line">        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (config.getLastSeenQuorumVerifier() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        quorumPeer.initConfigInZKDatabase();</span><br><span class="line">        quorumPeer.setCnxnFactory(cnxnFactory);</span><br><span class="line">        quorumPeer.setSecureCnxnFactory(secureCnxnFactory);</span><br><span class="line">        quorumPeer.setSslQuorum(config.isSslQuorum());</span><br><span class="line">        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());</span><br><span class="line">        quorumPeer.setLearnerType(config.getPeerType());</span><br><span class="line">        quorumPeer.setSyncEnabled(config.getSyncEnabled());</span><br><span class="line">        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());</span><br><span class="line">        <span class="keyword">if</span> (config.sslQuorumReloadCertFiles) &#123;</span><br><span class="line">            quorumPeer.getX509Util().enableCertFileReloading();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sets quorum sasl authentication configurations</span></span><br><span class="line">        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);</span><br><span class="line">        <span class="keyword">if</span> (quorumPeer.isQuorumSaslAuthEnabled()) &#123;</span><br><span class="line">            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);</span><br><span class="line">            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);</span><br><span class="line">            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);</span><br><span class="line">            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);</span><br><span class="line">            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);</span><br><span class="line">        &#125;</span><br><span class="line">        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);</span><br><span class="line">        quorumPeer.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (config.jvmPauseMonitorToRun) &#123;</span><br><span class="line">            quorumPeer.setJvmPauseMonitor(<span class="keyword">new</span> JvmPauseMonitor(config));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quorumPeer.start();</span><br><span class="line">        quorumPeer.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// warn, but generally this is ok</span></span><br><span class="line">        LOG.warn(<span class="string">"Quorum Peer interrupted"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (metricsProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                metricsProvider.stop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Error while stopping metrics"</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>runFromConfig</code>执行过程中主要是<code>QuorumPeer</code>对象属性的赋值并执行<code>start</code>方法，通过查看<code>QuorumPeer</code>类的源码，发现<code>QuorumPeer</code>继承了<code>ZooKeeperThread</code>，而<code>ZooKeeperThread</code>继承了<code>Thread</code>,通过<code>start</code>方法启动了<code>QuorumPeer</code>线程，线程运行执行线程的<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Main loop 主循环：集群启动的核心代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (getPeerState()) &#123;</span><br><span class="line">        <span class="keyword">case</span> LOOKING:</span><br><span class="line">            LOG.info(<span class="string">"LOOKING"</span>);</span><br><span class="line">            ServerMetrics.getMetrics().LOOKING_COUNT.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"readonlymode.enabled"</span>)) &#123;</span><br><span class="line">                LOG.info(<span class="string">"Attempting to start ReadOnlyZooKeeperServer"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Create read-only server but don't start it immediately</span></span><br><span class="line">                <span class="keyword">final</span> ReadOnlyZooKeeperServer roZk = <span class="keyword">new</span> ReadOnlyZooKeeperServer(logFactory, <span class="keyword">this</span>, <span class="keyword">this</span>.zkDb);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Instead of starting roZk immediately, wait some grace</span></span><br><span class="line">                <span class="comment">// period before we decide we're partitioned.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// Thread is used here because otherwise it would require</span></span><br><span class="line">                <span class="comment">// changes in each of election strategy classes which is</span></span><br><span class="line">                <span class="comment">// unnecessary code coupling.</span></span><br><span class="line">                Thread roZkMgr = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// lower-bound grace period to 2 secs</span></span><br><span class="line">                            sleep(Math.max(<span class="number">2000</span>, tickTime));</span><br><span class="line">                            <span class="keyword">if</span> (ServerState.LOOKING.equals(getPeerState())) &#123;</span><br><span class="line">                                roZk.startup();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            LOG.info(<span class="string">"Interrupted while attempting to start ReadOnlyZooKeeperServer, not started"</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            LOG.error(<span class="string">"FAILED to start ReadOnlyZooKeeperServer"</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    roZkMgr.start();</span><br><span class="line">                    reconfigFlagClear();</span><br><span class="line">                    <span class="keyword">if</span> (shuttingDownLE) &#123;</span><br><span class="line">                        shuttingDownLE = <span class="keyword">false</span>;</span><br><span class="line">                        startLeaderElection();</span><br><span class="line">                    &#125;</span><br><span class="line">                    setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">                    setPeerState(ServerState.LOOKING);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// If the thread is in the the grace period, interrupt</span></span><br><span class="line">                    <span class="comment">// to come out of waiting.</span></span><br><span class="line">                    roZkMgr.interrupt();</span><br><span class="line">                    roZk.shutdown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reconfigFlagClear();</span><br><span class="line">                    <span class="keyword">if</span> (shuttingDownLE) &#123;</span><br><span class="line">                        shuttingDownLE = <span class="keyword">false</span>;</span><br><span class="line">                        startLeaderElection();</span><br><span class="line">                    &#125;</span><br><span class="line">                    setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">                    setPeerState(ServerState.LOOKING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OBSERVING:</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                LOG.info(<span class="string">"OBSERVING"</span>);</span><br><span class="line">                setObserver(makeObserver(logFactory));</span><br><span class="line">                observer.observeLeader();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                observer.shutdown();</span><br><span class="line">                setObserver(<span class="keyword">null</span>);</span><br><span class="line">                updateServerState();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Add delay jitter before we switch to LOOKING</span></span><br><span class="line">                <span class="comment">// state to reduce the load of ObserverMaster</span></span><br><span class="line">                <span class="keyword">if</span> (isRunning()) &#123;</span><br><span class="line">                    Observer.waitForObserverElectionDelay();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FOLLOWING:</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                LOG.info(<span class="string">"FOLLOWING"</span>);</span><br><span class="line">                setFollower(makeFollower(logFactory));</span><br><span class="line">                follower.followLeader();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                follower.shutdown();</span><br><span class="line">                setFollower(<span class="keyword">null</span>);</span><br><span class="line">                updateServerState();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEADING:</span><br><span class="line">            LOG.info(<span class="string">"LEADING"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                setLeader(makeLeader(logFactory));</span><br><span class="line">                leader.lead();</span><br><span class="line">                setLeader(<span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (leader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    leader.shutdown(<span class="string">"Forcing shutdown"</span>);</span><br><span class="line">                    setLeader(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                updateServerState();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 while循环中，判断节点的状态，分为 <code>LOOKING</code> 、 <code>OBSERVING</code> 、 <code>FOLLOWING</code> 、<code>LEADING</code> ，当某个<code>QuorumPeerq</code>刚启动时，状态为 <code>LOOKING</code> ，启动线程将zk节点启动，然后进行leader选举，这是<code>zookeeper</code>的选举算法的核心，leader的选举在<code>org.apache.zookeeper.server.quorum.FastLeaderElection</code>的<code>lookForLeader</code>方法中</p></li></ul><h2 id="1-3-leader选举"><a href="#1-3-leader选举" class="headerlink" title="1.3    leader选举"></a>1.3    leader选举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录当前server接受其他server的本轮投票信息</span></span><br><span class="line">Map&lt;Long, Vote&gt; recvset = <span class="keyword">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选举结束后法定server的投票信息</span></span><br><span class="line">Map&lt;Long, Vote&gt; outofelection = <span class="keyword">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选举超时时间</span></span><br><span class="line"><span class="keyword">int</span> notTimeout = minNotificationInterval;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑时钟 +1</span></span><br><span class="line">    logicalclock.incrementAndGet();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化选票 给自己投票</span></span><br><span class="line">    updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LOG.info(<span class="string">"New election. My id =  "</span> + self.getId() + <span class="string">", proposed zxid=0x"</span> + Long.toHexString(proposedZxid));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendNotifications();</span><br></pre></td></tr></table></figure><p>此处两个变量，一个 <code>recvset</code>，用来保存当前server的接受其他server的本轮投票信息，<code>key</code>为当前<code>server</code>的<code>id</code>，也即是我们在配置文件中配置的<code>myid</code>，而另外一个变量<code>outofelection</code>保存选举结束以后法定的<code>server</code>的投票信息，这里的法定指的是<code>FOLLOWING</code>和<code>LEADING</code>状态的<code>server</code>，不包活<code>OBSERVING</code>状态的<code>server</code>。</p><p>更新逻辑时钟，此处逻辑时钟是为了在选举<code>leader</code>时比较其他选票中的<code>server</code>中的<code>epoch</code>和本地谁最新，然后将自己的选票<code>proposal</code>发送给其他所有<code>server</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotifications</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> sid : self.getCurrentAndNextConfigVoters()) &#123;</span><br><span class="line">        QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class="line">        ToSend notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification,</span><br><span class="line">                                   proposedLeader,</span><br><span class="line">                                   proposedZxid,</span><br><span class="line">                                   logicalclock.get(),</span><br><span class="line">                                   QuorumPeer.ServerState.LOOKING,</span><br><span class="line">                                   sid,</span><br><span class="line">                                   proposedEpoch, qv.toString().getBytes());</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Sending Notification: "</span> + proposedLeader + <span class="string">" (n.leader), 0x"</span> +</span><br><span class="line">                      Long.toHexString(proposedZxid) + <span class="string">" (n.zxid), 0x"</span> + Long.toHexString(logicalclock.get()) +</span><br><span class="line">                      <span class="string">" (n.round), "</span> + sid + <span class="string">" (recipient), "</span> + self.getId() +</span><br><span class="line">                      <span class="string">" (myid), 0x"</span> + Long.toHexString(proposedEpoch) + <span class="string">" (n.peerEpoch)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sendqueue.offer(notmsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法遍历所有投票参与者集合，将选票信息构造成一个 <code>ToSend</code>对象，分别发送消息放置到队列<code>sendqueue</code>中。同理集群中每一个<code>server</code>节点都会将自己的选票发送给其他<code>server</code>，那么既然有发送选票，肯定存在接受选票信息，并选出<code>leader</code>，接下来我们就来看看每一个<code>server</code>如何接受选票并处理的。</p><p>首先我们应该从队列出取出选票信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从队列中取出选票信息</span></span><br><span class="line">Notification n = recvqueue.poll(notTimeout, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Sends more notifications if haven't received enough.</span></span><br><span class="line"><span class="comment"> * Otherwise processes new notification.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//判断选票信息是否为空 如果为空</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否投递过选票信息</span></span><br><span class="line">    <span class="keyword">if</span> (manager.haveDelivered()) &#123;</span><br><span class="line">        <span class="comment">// 重新发送选票信息</span></span><br><span class="line">        sendNotifications();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//重连所有server</span></span><br><span class="line">        manager.connectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Exponential backoff</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> tmpTimeOut = notTimeout * <span class="number">2</span>;</span><br><span class="line">    notTimeout = (tmpTimeOut &lt; maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);</span><br><span class="line">    LOG.info(<span class="string">"Notification time out: "</span> + notTimeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选出的选票信息封装在一个 <code>Notification</code> 对象中，如果取出的选票为null，我们通过<code>QuorumCnxManager</code>检查发送队列中是否投递过选票，如果投递过说明连接并没有断开，则重新发送选票到其他<code>sever</code>，否则，说明连接断开，重连所有<code>server</code>即可。那么连接没有断开，为什么会收不到选票信息呢，有可能是选票超时时限导致没有收到选票，所有将选票时限延长了一倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//校验选票中选举server和选举的leader sever是否合法       </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(validVoter(n.sid) &amp;&amp; validVoter(n.leader)) &#123;          </span><br><span class="line">    <span class="comment">/*      </span></span><br><span class="line"><span class="comment">    * Only proceed if the vote comes from a replica in the current or next </span></span><br><span class="line"><span class="comment">    * voting view for a replica in the current or next voting view.           </span></span><br><span class="line"><span class="comment">    */</span>          </span><br><span class="line">    <span class="keyword">switch</span> (n.state) &#123;       </span><br><span class="line">        <span class="keyword">case</span> LOOKING:          </span><br><span class="line">            ......            </span><br><span class="line">            <span class="keyword">break</span>;   </span><br><span class="line">        <span class="keyword">case</span> OBSERVING:            </span><br><span class="line">            LOG.debug(<span class="string">"Notification from observer: "</span> + n.sid);            </span><br><span class="line">            <span class="keyword">break</span>;          </span><br><span class="line">        <span class="keyword">case</span> FOLLOWING:          </span><br><span class="line">        <span class="keyword">case</span> LEADING:          </span><br><span class="line">            ......     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果选出的选票 <code>Notification</code>不为<code>null</code>，校验投票<code>server</code>和选举<code>leader</code>是否合法，然后根据选票状态执行<br>不同分支，选举过程走<code>LOOKING</code>分支，接下来比较选票<code>epoch</code>和当前逻辑时钟，如果选票 <code>epoch</code>&gt;逻辑时钟，说明选票是最新的，自己的选票这一轮已经过时，应该更新当前自己<code>server</code>的逻辑时钟，并清空当前收到的其他<code>server</code>的选票，然后比较自己和选票中谁更适合做<code>leader</code>，发送新的投票给其他所有<code>server</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getInitLastLoggedZxid() == -<span class="number">1</span>) &#123;</span><br><span class="line">    LOG.debug(<span class="string">"Ignoring notification as our zxid is -1"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n.zxid == -<span class="number">1</span>) &#123;</span><br><span class="line">    LOG.debug(<span class="string">"Ignoring notification from member with -1 zxid &#123;&#125;"</span>, n.sid);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If notification &gt; current, replace and send messages out</span></span><br><span class="line"><span class="keyword">if</span> (n.electionEpoch &gt; logicalclock.get()) &#123;</span><br><span class="line">    logicalclock.set(n.electionEpoch);</span><br><span class="line">    recvset.clear();</span><br><span class="line">    <span class="comment">//比较选票和自己谁更适合做leader，比较规则epoch&gt;zxid&gt;sid</span></span><br><span class="line">    <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class="line">        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">    &#125;</span><br><span class="line">    sendNotifications();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果选票 <code>epoch</code>&lt;逻辑时钟,zk放弃此次选票，不做任何处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n.electionEpoch &lt; logicalclock.get()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">        LOG.debug(<span class="string">"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x"</span></span><br><span class="line">                  + Long.toHexString(n.electionEpoch)</span><br><span class="line">                  + <span class="string">", logicalclock=0x"</span> + Long.toHexString(logicalclock.get()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果选票 <code>epoch</code>=逻辑时钟,仍然是比较选票和当前自己server谁更适合当<code>leader</code>，并重新更新选票，发送给其他所有的<code>server</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">    updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">    sendNotifications();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来将收到的选票放入 <code>recvset</code>的<code>map</code>中保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recvset.put(n.sid, <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br></pre></td></tr></table></figure><p>接下来是判断本轮选举是否结束，如果超过半数的，则 <code>leader</code>预选举结束，注意此时还要比较其他少半选票中有没有谁更适合做<code>leader</code>？如果在选票找不到任何一个<code>server</code>比当前<code>server</code>更适合做<code>leader</code>，则更新更新<code>server</code>状态，清空<code>recvqueue</code>队列，确定最终选票并返回，否则将更适合做<code>leader</code>的<code>Notification</code>放回队列开始新一轮的选举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">voteSet = getVoteTracker(recvset, <span class="keyword">new</span> Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (voteSet.hasAllQuorums()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verify if there is any change in the proposed leader</span></span><br><span class="line">    <span class="comment">//比较剩下少数的server是否更适合做leader   </span></span><br><span class="line">    <span class="keyword">while</span> ((n = recvqueue.poll(finalizeWait, TimeUnit.MILLISECONDS)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">            recvqueue.put(n);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This predicate is true once we don't read any new</span></span><br><span class="line"><span class="comment">     * relevant message from the reception queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//如果全部比较都没有当前谁比当前server更适合做leader，则更新server状态</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//更新状态</span></span><br><span class="line">        setPeerState(proposedLeader, voteSet);</span><br><span class="line">        <span class="comment">//构建最终选票，便于其他server同步  </span></span><br><span class="line">        Vote endVote = <span class="keyword">new</span> Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);</span><br><span class="line">        leaveInstance(endVote);</span><br><span class="line">        <span class="comment">//清空队列</span></span><br><span class="line">        <span class="keyword">return</span> endVote;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新状态后，若选票中的服务器状态为 <code>FOLLOWING</code>或者<code>LEADING</code>时，其大致步骤会再次判断选举<code>epoch</code>是否等于逻辑时钟.如果相等，再次盘检查选中的leader过半</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n.electionEpoch == logicalclock.get()) &#123;</span><br><span class="line">    recvset.put(n.sid, <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class="line">    voteSet = getVoteTracker(recvset, <span class="keyword">new</span> Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class="line">    <span class="keyword">if</span> (voteSet.hasAllQuorums() &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class="line">        setPeerState(n.leader, voteSet);</span><br><span class="line">        Vote endVote = <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class="line">        leaveInstance(endVote);</span><br><span class="line">        <span class="keyword">return</span> endVote;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Before joining an established ensemble, verify that</span></span><br><span class="line"><span class="comment"> * a majority are following the same leader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">outofelection.put(n.sid, <span class="keyword">new</span> Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class="line">voteSet = getVoteTracker(outofelection, <span class="keyword">new</span> Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (voteSet.hasAllQuorums() &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        logicalclock.set(n.electionEpoch);</span><br><span class="line">        setPeerState(n.leader, voteSet);</span><br><span class="line">    &#125;</span><br><span class="line">    Vote endVote = <span class="keyword">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class="line">    leaveInstance(endVote);</span><br><span class="line">    <span class="keyword">return</span> endVote;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-zookeeper应用场景"><a href="#2-zookeeper应用场景" class="headerlink" title="2.    zookeeper应用场景"></a>2.    zookeeper应用场景</h1><h2 id="2-1-配置中心"><a href="#2-1-配置中心" class="headerlink" title="2.1    配置中心"></a>2.1    配置中心</h2><p>在平常的业务开发过程中，我们通常需要将系统的一些通用的全局配置，例如机器列表配置，运行时开关配置，数据库配置信息等统一集中存储，让集群所有机器共享配置信息，系统在启动会首先从配置中心读取配置信息，进行初始化。传统的实现方式将配置存储在本地文件和内存中，一旦机器规模更大，配置变更频繁情况下，本地文件和内存方式的配置维护成本较高，使用zookeeper作为分布式的配置中心就可以解决这个问题。</p><p>我们将配置信息存在zk中的一个节点中，同时给该节点注册一个数据节点变更的watcher监听，一旦节点数据发生变更，所有的订阅该节点的客户端都可以获取数据变更通知。</p><h2 id="2-2-负载均衡"><a href="#2-2-负载均衡" class="headerlink" title="2.2    负载均衡"></a>2.2    负载均衡</h2><p>建立server节点，并建立监听器监视servers子节点的状态（用于在服务器增添时及时同步当前集群中服务器列表）。在每个服务器启动时，在servers节点下建立具体服务器地址的子节点,并在对应的字节点下存入服务器的相关信息。这样，我们在zookeeper服务器上可以获取当前集群中的服务器列表及相关信息，可以自定义一个负载均衡算法，在每个请求过来时从zookeeper服务器中获取当前集群服务器列表，根据算法选出其中一个服务器来处理请求。</p><p><img src="https://p.pstatp.com/origin/137cd00006d7a815eb690" alt="image-20200805144500427"></p><h2 id="2-3-命名服务"><a href="#2-3-命名服务" class="headerlink" title="2.3    命名服务"></a>2.3    命名服务</h2><p>命名服务是分布式系统中的基本功能之一。被命名的实体通常可以是集群中的机器、提供的服务地址或者远程对象，这些都可以称作为名字。常见的就是一些分布式服务框架（RPC、RMI）中的服务地址列表，通过使用名称服务客户端可以获取资源的实体、服务地址和提供者信息。命名服务就是通过一个资源引用的方式来实现对资源的定位和使用。在分布式环境中，上层应用仅仅需要一个全局唯一名称，就像数据库中的主键。</p><p>在单库单表系统中可以通过自增ID来标识每一条记录，但是随着规模变大分库分表很常见，那么自增ID有仅能针对单一表生成ID，所以在这种情况下无法依靠这个来标识唯一ID。UUID就是一种全局唯一标识符。但是长度过长不易识别。</p><p><img src="https://p.pstatp.com/origin/ff550002d3a73938034c" alt="image-20200805144706036"></p><ul><li>在 Zookeeper中通过创建顺序节点就可以实现，所有客户端都会根据自己的任务类型来创建一个顺序节点，例如 job-00000001</li><li>节点创建完毕后， create()接口会返回一个完整的节点名，例如：job-00000002<ul><li>拼接 type类型和完整节点名作为全局唯一的ID</li></ul></li></ul><h2 id="2-4-DNS服务"><a href="#2-4-DNS服务" class="headerlink" title="2.4    DNS服务"></a>2.4    DNS服务</h2><h3 id="2-4-1-域名配置"><a href="#2-4-1-域名配置" class="headerlink" title="2.4.1    域名配置"></a>2.4.1    域名配置</h3><p>在分布式系统应用中，每一个应用都需要分配一个域名，日常开发中，往往使用本地HOST绑定域名解析，开发阶段可以随时修改域名和IP的映射，大大提高开发的调试效率。如果应用的机器规模达到一定程度后，需要频繁更新域名时，需要在规模的集群中变更，无法保证实时性。所有我们在zk上创建一个节点来进行域名配置</p><p><img src="https://p.pstatp.com/origin/fe760002b77afcb137ba" alt="image-20200805145020398"></p><h3 id="2-4-2-域名解析"><a href="#2-4-2-域名解析" class="headerlink" title="2.4.2    域名解析"></a>2.4.2    域名解析</h3><p>应用解析时，首先从zk域名节点中获取域名映射的IP和端口。</p><h3 id="2-4-3-域名变更"><a href="#2-4-3-域名变更" class="headerlink" title="2.4.3    域名变更"></a>2.4.3    域名变更</h3><p>每个应用都会在在对应的域名节点注册一个数据变更的<code>watcher</code>监听，一旦监听的域名节点数据变更，zk会向所有订阅的客户端发送域名变更通知。</p><h2 id="2-5-集群管理"><a href="#2-5-集群管理" class="headerlink" title="2.5    集群管理"></a>2.5    集群管理</h2><p>随着分布式系统规模日益扩大，集群中机器的数量越来越多。有效的集群管理越来越重要了，<code>zookeeper</code>集群管理主要利用了<code>watcher</code>机制和创建临时节点来实现。以机器上下线和机器监控为例：</p><p><img src="https://p.pstatp.com/origin/137d20000b60cf8a6dcd4" alt="image-20200805145807510"></p><h3 id="2-5-1-机器上下线"><a href="#2-5-1-机器上下线" class="headerlink" title="2.5.1    机器上下线"></a>2.5.1    机器上下线</h3><p>新增机器的时候，将Agent部署到新增的机器上，当Agent部署启动时，会向zookeeper指定的节点下创建一个临时子节点，当Agent在zk上创建完这个临时节点后，当关注的节点<code>zookeeper/machines</code>下的子节点新加入新的节点时或删除都会发送通知，这样就对机器的上下线进行监控。</p><p><img src="https://p.pstatp.com/origin/1379f00007439636871cf" alt="image-20200805145839821"></p><h3 id="2-5-2-机器监控"><a href="#2-5-2-机器监控" class="headerlink" title="2.5.2    机器监控"></a>2.5.2    机器监控</h3><p>在机器运行过程中，Agent会定时将主机的的运行状态信息写入到<code>/machines/hostn</code>主机节点，监控中心通过订阅这些节点的数据变化来获取主机的运行信息。</p><h2 id="2-6-分布式锁"><a href="#2-6-分布式锁" class="headerlink" title="2.6    分布式锁"></a>2.6    分布式锁</h2><h3 id="2-6-1-数据库实现分布式锁"><a href="#2-6-1-数据库实现分布式锁" class="headerlink" title="2.6.1    数据库实现分布式锁"></a>2.6.1    数据库实现分布式锁</h3><p><img src="https://p.pstatp.com/origin/1000b0002714c665df7a5" alt="image-20200805150426778"></p><p>首先我们创建一张锁表，锁表中字段设置唯一约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;lock_record&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;, </span><br><span class="line">    &#96;lock_name&#96; varchar(50) DEFAULT NULL COMMENT &#39;锁名称&#39;, </span><br><span class="line">    PRIMARY KEY (&#96;id&#96;), </span><br><span class="line">    UNIQUE KEY &#96;lock_name&#96; (&#96;lock_name&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;38 DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><p>定义锁，实现 <code>Lock</code>接口，<code>tryLock()</code>尝试获取锁，从锁表中查询指定的锁记 录，如果查询到记录，说明已经上锁，不能再上锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试获取锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询lockRecord的记录</span></span><br><span class="line">    Example example = <span class="keyword">new</span> Example(LockRecord<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andEqualTo(<span class="string">"lockName"</span>,LOCK_NAME);</span><br><span class="line">    LockRecord lockRecord = lockRecordMapper.selectOneByExample(example);</span><br><span class="line">    <span class="keyword">if</span>(lockRecord==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>lock</code>方法获取锁之前先调用<code>tryLock()</code>方法尝试获取锁，如果未加锁则向锁表中插入一条锁记录来获取锁，这里我们通过循环，如果上锁我们一致等待锁的释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tryLock())&#123;</span><br><span class="line">            <span class="comment">//向锁表中插入一条记录</span></span><br><span class="line">            LockRecord lockRecord = <span class="keyword">new</span> LockRecord();</span><br><span class="line">            lockRecord.setLockName(LOCK_NAME);</span><br><span class="line">            lockRecordMapper.insertSelective(lockRecord);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"等待锁......."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁，即是将数据库中对应的锁表记录删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//释放锁的操作</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Example example = <span class="keyword">new</span> Example(LockRecord<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andEqualTo(<span class="string">"lockName"</span>,LOCK_NAME);</span><br><span class="line">    lockRecordMapper.deleteByExample(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在尝试获取锁的方法 <code>tryLock</code>中，存在多个线程同时获取锁的情况，可以简单通过<code>synchronized</code>解决</p><h3 id="2-6-2-redis实现分布式锁"><a href="#2-6-2-redis实现分布式锁" class="headerlink" title="2.6.2    redis实现分布式锁"></a>2.6.2    redis实现分布式锁</h3><p>redis分布式锁的实现基于setnx（set if not exists），设置成功，返回1；设置失败，返回0，释放锁的操作通过del指令来完成</p><p>如果设置锁后在执行中间过程时，程序抛出异常，导致del指令没有调用，锁永远无法释放，这样就会陷入死锁。所以我们拿到锁之后会给锁加上一个过期时间，这样即使中间出现异常，过期时间到后会自动释放锁。</p><p>同时在setnx 和 expire 如果进程挂掉，expire不能执行也会死锁。所以要保证setnx和expire是一个原子性操作即可。redis 2.8之后推出了setnx和expire的组合指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value ex 5 nx</span><br></pre></td></tr></table></figure><p>lock获取锁方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//上锁 setnx</span></span><br><span class="line">        <span class="comment">//  Boolean isLock = redisTemplate.opsForValue().setIfAbsent("lockName", LOCK_NAME);</span></span><br><span class="line">        Boolean isLock =  redisTemplate.opsForValue().setIfAbsent(<span class="string">"lockName"</span>,LOCK_NAME,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"等待锁........"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 删除指定的锁的key</span></span><br><span class="line">    redisTemplate.delete(<span class="string">"lockName"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis 实现分布式锁存在的问题，为了解决redis单点问题，我们会部署redis集群，在 Sentinel 集群中，主节点突然挂掉了。同时主节点中有把锁还没有来得及同步到从节点。这样就会导致系统中同样一把锁被两个客户端同时持有，不安全性由此产生。redis官方为了解决这个问题，推出了Redlock 算法解决这个问题。但是带来的网络消耗较大。</p><p>分布式锁的redisson实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取锁释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6379"</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">Redisson redisson = (Redisson) Redisson.create(config);</span><br><span class="line">RLock mylock = redisson.getLock(<span class="string">"redisson_lock"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取锁mylock.lock();</span></span><br><span class="line"><span class="comment">//释放锁mylock.unlock();</span></span><br></pre></td></tr></table></figure><h3 id="2-6-3-zookeeper实现分布式锁"><a href="#2-6-3-zookeeper实现分布式锁" class="headerlink" title="2.6.3    zookeeper实现分布式锁"></a>2.6.3    zookeeper实现分布式锁</h3><p>原理：zookeeper通过创建临时序列节点来实现分布式锁，适用于顺序执行的程序，大体思路就是创建临时序列节点，找出最小的序列节点，获取分布式锁，程序执行完成之后此序列节点消失，通过watch来监控节点的变化，从剩下的节点的找到最小的序列节点，获取分布式锁，执行相应处理，依次类推……</p><p><img src="https://p.pstatp.com/origin/13758000235878cc9c24c" alt="image-20200805154746534"></p><h4 id="2-6-3-1-原生实现"><a href="#2-6-3-1-原生实现" class="headerlink" title="2.6.3.1    原生实现"></a>2.6.3.1    原生实现</h4><p>首先在ZkLock的构造方法中，连接zk,创建lock根节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//zk客户端</span></span><br><span class="line"><span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line"><span class="comment">//zk是一个目录结构，locks</span></span><br><span class="line"><span class="keyword">private</span> String root = <span class="string">"/locks"</span>;</span><br><span class="line"><span class="comment">//锁的名称</span></span><br><span class="line"><span class="keyword">private</span> String lockName;</span><br><span class="line"><span class="comment">//当前线程创建的序列node</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;String&gt; nodeId = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"><span class="comment">//用来同步等待zkclient链接到了服务端</span></span><br><span class="line"><span class="keyword">private</span> CountDownLatch connectedSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] data= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZkLock</span><span class="params">(String config, String lockName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lockName = lockName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        zk = <span class="keyword">new</span> ZooKeeper(config, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 建立连接</span></span><br><span class="line">                <span class="keyword">if</span> (event.getState() == Event.KeeperState.SyncConnected) &#123;</span><br><span class="line">                    connectedSignal.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        connectedSignal.await();</span><br><span class="line">        Stat stat = zk.exists(root, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == stat) &#123;</span><br><span class="line">            <span class="comment">// 创建根节点</span></span><br><span class="line">            zk.create(root, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 watch监听临时顺序节点的删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockWatcher</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event.getType() == Event.EventType.NodeDeleted)</span><br><span class="line">            latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取锁操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建临时子节点</span></span><br><span class="line">        String myNode = zk.create(root + <span class="string">"/"</span> + lockName , data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+myNode+ <span class="string">"created"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出所有子节点</span></span><br><span class="line">        List&lt;String&gt; subNodes = zk.getChildren(root, <span class="keyword">false</span>);</span><br><span class="line">        TreeSet&lt;String&gt; sortedNodes = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String node :subNodes) &#123;</span><br><span class="line">            sortedNodes.add(root +<span class="string">"/"</span> +node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String smallNode = sortedNodes.first();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (myNode.equals( smallNode)) &#123;</span><br><span class="line">            <span class="comment">// 如果是最小的节点,则表示取得锁</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ myNode+<span class="string">"get lock"</span>);</span><br><span class="line">            <span class="keyword">this</span>.nodeId.set(myNode);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String preNode = sortedNodes.lower(myNode);</span><br><span class="line"></span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Stat stat = zk.exists(preNode, <span class="keyword">new</span> LockWatcher(latch));<span class="comment">// 同时注册监听。</span></span><br><span class="line">        <span class="comment">// 判断比自己小一个数的节点是否存在,如果不存在则无需等待锁,同时注册监听</span></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ myNode + <span class="string">" waiting for "</span> + root + <span class="string">"/"</span> + preNode + <span class="string">" released lock"</span>);</span><br><span class="line"></span><br><span class="line">            latch.await();<span class="comment">// 等待，这里应该一直等待其他线程释放锁</span></span><br><span class="line">            nodeId.set(myNode);</span><br><span class="line">            latch = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">"unlock "</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != nodeId) &#123;</span><br><span class="line">            zk.delete(nodeId.get(), -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        nodeId.remove();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-3-2-基于-curator实现分布式锁"><a href="#2-6-3-2-基于-curator实现分布式锁" class="headerlink" title="2.6.3.2    基于 curator实现分布式锁"></a>2.6.3.2    基于 curator实现分布式锁</h4><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>锁操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建zookeeper的客户端</span></span><br><span class="line">RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//集群通过，分割</span></span><br><span class="line">CuratorFramework client =CuratorFrameworkFactory.newClient(<span class="string">"127.0.0.1:2181"</span>, retryPolicy);</span><br><span class="line">client.start();</span><br><span class="line"><span class="comment">//创建分布式锁, 锁空间的根节点路径为/curator/lock </span></span><br><span class="line">InterProcessMutex mutex = <span class="keyword">new</span> InterProcessMutex(client, <span class="string">"/curator/lock"</span>); </span><br><span class="line">mutex.acquire();</span><br><span class="line"><span class="comment">//获得了锁, 进行业务流程</span></span><br><span class="line"><span class="comment">//完成业务流程, 释放锁</span></span><br><span class="line">mutex.release();</span><br><span class="line"><span class="comment">//关闭客户端</span></span><br><span class="line">client.close();</span><br></pre></td></tr></table></figure><h2 id="2-7-分布式队列"><a href="#2-7-分布式队列" class="headerlink" title="2.7    分布式队列"></a>2.7    分布式队列</h2><p>队列特性：FIFO（先入先出），zookeeper实现分布式队列的步骤</p><p><img src="https://p.pstatp.com/origin/1383c00001a486232479b" alt="image-20200805154827324"></p><ul><li>在队列节点下创建临时顺序节点 例如/queue_info/192.168.1.1-0000001</li><li>调用 getChildren()接口来获取/queue_info节点下所有子节点，获取队列中所有元素</li><li>比较自己节点是否是序号最小的节点，如果不是，则等待其他节点出队列，在序号最小的节点注册watcher</li><li>获取 watcher通知后，重复步骤</li></ul><p><img src="https://p.pstatp.com/origin/10003000272c3d6417543" alt="image-20200805155040838"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-zookeeper源码解析&quot;&gt;&lt;a href=&quot;#1-zookeeper源码解析&quot; class=&quot;headerlink&quot; title=&quot;1.    zookeeper源码解析&quot;&gt;&lt;/a&gt;1.    zookeeper源码解析&lt;/h1&gt;&lt;h2 id=&quot;1-1-下载zookeeper源码，导入IDEA中&quot;&gt;&lt;a href=&quot;#1-1-下载zookeeper源码，导入IDEA中&quot; class=&quot;headerlink&quot; title=&quot;1.1    下载zookeeper源码，导入IDEA中&quot;&gt;&lt;/a&gt;1.1    下载zookeeper源码，导入IDEA中&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/apache/zookeeper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/apache/zookeeper&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="zookeeper" scheme="https://wgy1993.gitee.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper(一)</title>
    <link href="https://wgy1993.gitee.io/archives/e18db595.html"/>
    <id>https://wgy1993.gitee.io/archives/e18db595.html</id>
    <published>2020-08-01T10:35:22.000Z</published>
    <updated>2020-08-01T10:51:27.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-zookeeper简介"><a href="#1-zookeeper简介" class="headerlink" title="1.    zookeeper简介"></a>1.    zookeeper简介</h1><h2 id="1-1-分布式概述"><a href="#1-1-分布式概述" class="headerlink" title="1.1    分布式概述"></a>1.1    分布式概述</h2><p>早期我们使用单体架构，即所有服务部署在一台服务器的一个进程中，随着互联网的发展，逐步演进为分布式架构，多个服务分别部署在不同机器的不同进程中。</p><a id="more"></a><p><img src="https://p.pstatp.com/origin/1000b00025f3f17d51ce3" alt="image-20200730181013482"></p><h2 id="1-2-zookeeper概述"><a href="#1-2-zookeeper概述" class="headerlink" title="1.2    zookeeper概述"></a>1.2    zookeeper概述</h2><p>zookeeper是一个开源的分布式协调服务，提供分布式数据一致性解决方案，分布式应用程序可以实现数据发布订阅、负载均衡、命名服务、集群管理分布式锁、分布式队列等功能。</p><p>zookeeper提供了分布式数据一致性解决方案，那什么是分布式数据一致性？首先我们谈谈什么叫一致性？</p><p><img src="https://p.pstatp.com/origin/1375b0001b39df25315bb" alt="image-20200730181136559"></p><p>如图在上图中有用户user在DB1中修改balance=900,如果user下一次read请求到DB2数据，此时DB1的数据还没及时更新到DB2中，就会造成整个数据库集群数据不一致。</p><p>数据一致性分为强一致性和最终一致性，强一致性指的如果数据不一致，就不对外提供数据服务，保证用户读取的数据始终是一致的。数据强一致性只需要通过锁机制即可解决，在案例中通过在DB2没有从DB1同步数据之前上锁，不对外提供读操作。只有当同步完成以后才对外提供服务。而最终一致性要求数据最终同步即可，没有实时性要求。</p><h2 id="1-3-CAP原则"><a href="#1-3-CAP原则" class="headerlink" title="1.3    CAP原则"></a>1.3    CAP原则</h2><p>CAP在分布式系统中主要指的是一致性（(Consistency）、可用性（Availability）和分区容错性（Partition tolerance）</p><ul><li><p><strong>一致性</strong></p><p>一致性指的是强一致性</p></li><li><p><strong>可用性</strong></p><p>系统提供的服务一直处于可用状态，用户的操作请求在指定的响应时间内响应请求，超出时间范围，认为系统不可用</p></li><li><p><strong>分区容错性</strong></p><p>分布式系统在遇到任何网络分区故障的时候，仍需要能够保证对外提供一致性和可用性服务，除非是整个网络都发生故障。</p></li></ul><p>在一个分布式系统中不可能同时满足一致性、可用性、分区容错性，最多满足两个，对于分布式互联网应用而言，必须保证P，所以要么满足AP模型、要么满足CP模型</p><p><img src="https://p.pstatp.com/origin/137540000f366f2fc11a7" alt="image-20200730182433524"></p><h2 id="1-4-一致性协议"><a href="#1-4-一致性协议" class="headerlink" title="1.4    一致性协议"></a>1.4    一致性协议</h2><p>事务需要跨多个分布式节点时，为了保证事务的ACID特性，需要选举出一个协调者来协调分布式各个节点的调度，基于这个思想衍生了多种一致性协议:</p><h3 id="1-4-1-2PC-二阶段提交"><a href="#1-4-1-2PC-二阶段提交" class="headerlink" title="1.4.1    2PC 二阶段提交"></a>1.4.1    2PC 二阶段提交</h3><p>顾名思义，二阶段提交叫事务的提交过程分为两个阶段：</p><p><img src="https://p.pstatp.com/origin/138150000534740130827" alt="image-20200730183051786"></p><ul><li><p><strong>阶段一 提交事务请求</strong></p><p>1 、协调者向所有的参与者节点发送事务内容，询问是否可以执行事务操作，并等待其他参与者节点的反馈</p><p>2 、各参与者节点执行事务操作</p><p>3 、各参与者节点反馈给协调者，事务是否可以执行</p></li><li><p><strong>阶段二 事务提交</strong></p><p>根据一阶段各个参与者节点反馈的ack,如果所有参与者节点反馈ack，则执行事务提交，否则中断事务</p><ul><li><p>事务提交：</p><p>1 、协调者向各个参与者节点发送commit请求</p><p>2 、参与者节点接受到commit请求后，执行事务的提交操作</p><p>3 、各参与者节点完成事务提交后，向协调者返送提交commit成功确认消息</p><p>4 、协调者接受各个参与者节点的ack后，完成事务commit</p></li><li><p>中断事务：</p><p>1 、发送回滚请求</p><p>2 、各个参与者节点回滚事务</p><p>3 、反馈给协调者事务回滚结果</p><p>4 、协调者接受各参与者节点ack后回滚事务</p></li></ul></li></ul><p><strong>二阶段提交存在的问题：</strong></p><ul><li><p>同步阻塞</p><p>二阶段提交过程中，所有参与事务操作的节点处于同步阻塞状态，无法进行其他的操作</p></li><li><p>单点问题</p><p>一旦协调者出现单点故障，无法保证事务的一致性操作</p></li><li><p>脑裂导致数据不一致</p><p>如果分布式节点出现网络分区，某些参与者未收到commit提交命令。则出现部分参与者完成数据提交。未收到commit的命令的参与者则无法进行事务提交，整个分布式系统便出现了数据不一致性现象。</p></li></ul><h3 id="1-4-2-3PC-三阶段提交"><a href="#1-4-2-3PC-三阶段提交" class="headerlink" title="1.4.2    3PC 三阶段提交"></a>1.4.2    3PC 三阶段提交</h3><p>3PC是2PC的改进版，实质是将2PC中提交事务请求拆分为两步，形成了CanCommit、PreCommit、doCommit三个阶段的事务一致性协议</p><p><img src="https://p.pstatp.com/origin/137ec000045da5b48768e" alt="image-20200730184255383"></p><ul><li><p><strong>阶段一 : CanCommit</strong></p><p>1 、事务询问</p><p>2 、各参与者节点向协调者反馈事务询问的响应</p></li><li><p><strong>阶段二 : PreCommit</strong></p><p>根据阶段一的反馈结果分为两种情况</p><ul><li><p>执行事务预提交</p><p>1 、发送预提交请求</p><p>协调者向所有参与者节点发送preCommit请求，进入prepared阶段</p><p>2 、事务预提交</p><p>各参与者节点接受到preCommit请求后，执行事务操作</p><p>3 、各参与者节点向协调者反馈事务执行</p></li><li><p>中断事务</p><p>任意一个参与者节点反馈给协调者响应No时，或者在等待超时后，协调者还未收到参与者的反馈，就中断事务，中断事务分为两步：</p><p>1 、协调者向各个参与者节点发送abort请求</p><p>2 、参与者收到abort请求，或者等待超时时间后，中断事务</p></li></ul></li><li><p><strong>阶段三 : doCommit</strong></p><ul><li><p>执行提交</p><p>1 、发送提交请求</p><p>协调者向所有参与者节点发送doCommit请求</p><p>2 、事务提交</p><p>各参与者节点接受到doCommit请求后，执行事务提交操作</p><p>3 、反馈事务提交结果</p><p>各参与者节点完成事务提交以后，向协调者发送ack</p><p>4 、事务完成</p><p>协调者接受各个参与者反馈的ack后，完成事务</p></li><li><p>中断事务</p><p>1 、参与者接受到abort请求后，执行事务回滚</p><p>2 、参与者完成事务回滚以后，向协调者发送ack</p><p>3 、协调者接受回滚ack后，回滚事务</p></li></ul></li></ul><p>3PC相较于2PC而言，解决了协调者挂点后参与者无限阻塞和单点问题，但是仍然无法解决网络分区问题</p><h3 id="1-4-3-Paxos算法"><a href="#1-4-3-Paxos算法" class="headerlink" title="1.4.3    Paxos算法"></a>1.4.3    Paxos算法</h3><p>Paxos算法是Leslie Lamport 1990年提出的一种一致性算法，该算法是一种提高分布式系统容错性的一致性算法，解决了3PC中网络分区的问题，paxos算法可以在节点失效、网络分区、网络延迟等各种异常情况下保证所有节点都处于同一状态，同时paxos算法引入了“过半”理念，即少数服从多数原则。</p><p>paxos有三个版本：</p><ul><li>Basic Paxos</li><li>Multi Paxos</li><li>Fast Paxos</li></ul><p>在paxos算法中，有四种种角色，分别具有三种不同的行为，但多数情况，一个进程可能同时充当多种角色。</p><ul><li>client：系统外部角色，请求发起者，不参与决策</li><li>proposer：提案提议者</li><li>acceptor：提案的表决者，即是否accept该提案，只有超过半数以上的acceptor接受了提案，该提案才被认为被“选定”</li><li>learners：提案的学习者，当提案被选定后，其同步执行提案，不参与决策</li></ul><p><img src="https://p.pstatp.com/origin/ff7d0002770b6369bdd9" alt="image-20200730195421460"></p><p>Paxos算法分为两个阶段：prepare阶段、accept阶段</p><ul><li><p><strong>prepare阶段</strong></p><p>1 、proposer提出一个提案，编号为N,发送给所有的acceptor。</p><p>2 、每个表决者都保存自己的accept的最大提案编号maxN，当表决者收到prepare(N)请求时，会比较N与maxN的值，若N小于maxN,则提案已过时，拒绝prepare(N)请求。若N大于等于maxN，则接受提案，并将该表决者曾经接受过的编号最大的提案Proposal(myid,maxN,value)反馈给提议者：其中myid表示表决者acceptor的标识id，maxN表示接受过的最大提案编号maxN，value表示提案内容。若当前表决者未曾accept任何提议，会将proposal(myid,null,null)反馈给提议者。</p></li><li><p><strong>accept阶段</strong></p><p>1 、提议者proposal发出prepare(N),若收到超过半数表决者acceptor的反馈，proposal将真正的提案内容proposal(N,value)发送给所有表决者。</p><p>2 、表决者acceptor接受提议者发送的proposal(N,value)提案后，会将自己曾经accept过的最大提案编号maxN和反馈过的prepare的最大编号，若N大于这两个编号，则当前表决者accept该提案，并反馈给提议者。否则拒绝该提议。</p><p>3 、若提议者没有收到半数以上的表决者accept反馈，则重新进入prepare阶段，递增提案编号，重新提出prepare请求。若收到半数以上的accept，则其他未向提议者反馈的表决者称为learner，主动同步提议者的提案。</p></li></ul><p><img src="https://p.pstatp.com/origin/ffca00020ddfe5b96304" alt="image-20200730202021534"></p><p>正常流程</p><p><img src="https://p.pstatp.com/origin/137690000b9b05290a342" alt="image-20200730202128379"></p><p>单点故障，部分节点失败</p><p><img src="https://p.pstatp.com/origin/1381c0000253afb5aa4f4" alt="image-20200730202145076"></p><p>proposer失败</p><p><img src="https://p.pstatp.com/origin/1380f00008954fd97898f" alt="image-20200730202159173"></p><p>Basic Paxos算法存在活锁问题（liveness）或dueling，而且较难实现</p><p><img src="https://p.pstatp.com/origin/1382a00001732c0e510af" alt="image-20200730202211999"></p><p>Multi Paxos: 唯一的proposor，即leader</p><p><img src="https://p.pstatp.com/origin/1378c00015414f89150ba" alt="image-20200730202224216"></p><p>简化角色</p><p><img src="https://p.pstatp.com/origin/1382000001441c8ec7909" alt="image-20200730202235533"></p><h3 id="1-4-4-ZAB协议-Fast-Paxos"><a href="#1-4-4-ZAB协议-Fast-Paxos" class="headerlink" title="1.4.4    ZAB协议(Fast Paxos)"></a>1.4.4    ZAB协议(Fast Paxos)</h3><p>由于paxos算法实现起来较难，存在活锁和全序问题（无法保证两次最终提交的顺序），所以zookeeper并没有使用paxos作为一致性协议，而是使用了ZAB协议。</p><p>ZAB（zookeeper atomic broadcast）:是一种支持崩溃恢复的原子广播协议，基于Fast paxos实现</p><p>ZooKeeper使用单一主进程Leader用于处理客户端所有事务请求,，即写请求。当服务器数据发生变更好，集群采用ZAB原子广播协议，以事务提交proposal的形式广播到所有的副本进程，每一个事务分配一个全局的递增的事务编号xid。</p><p>若客户端提交的请求为读请求时，则接受请求的节点直接根据自己保存的数据响应。若是写请求，且当前节点不是leader，那么该节点就会将请求转发给leader，leader会以提案的方式广播此写请求，如果超过半数的节点同意写请求，则该写请求就会提交。leader会通知所有的订阅者同步数据。</p><p><img src="https://p.pstatp.com/origin/1375800021282a8ffb358" alt="image-20200730211313432"></p><p><strong>zookeeper的三种角色：</strong></p><p>为了避免zk的单点问题，zk采用集群方式保证zk高可用</p><ul><li><p>leader</p><p>leader负责处理集群的写请求，并发起投票，只有超过半数的节点同意后才会提交该写请求</p></li><li><p>follower</p><p>处理读请求，响应结果。转发写请求到leader，在选举leader过程中参与投票</p></li><li><p>observer</p><p>observer可以理解为没有投票权的follower，主要职责是协助follower处理读请求。那么当整个zk集群读请求负载很高时，为什么不增加follower节点呢？原因是增加follower节点会让leader在提出写请求提案时，需要半数以上的follower投票节点同意，这样会增加leader和follower的通信通信压力，降低写操作效率。</p></li></ul><p><strong>zookeeper两种模式：</strong></p><ul><li><p>恢复模式</p><p>当服务启动或领导崩溃后，zk进入恢复状态，选举leader，leader选出后，将完成leader和其他机器的数据同步，当大多数server完成和leader的同步后，恢复模式结束</p></li><li><p>广播模式</p><p>一旦Leader已经和多数的Follower进行了状态同步后，进入广播模式。进入广播模式后，如果有新加入的服务器，会自动从leader中同步数据。leader在接收客户端请求后，会生成事务提案广播给其他机器，有超过半数以上的follower同意该提议后，再提交事务。</p><p>注意在ZAB的事务的二阶段提交中，移除了事务中断的逻辑，follower要么ack，要么放弃，leader无需等待所有的follower的ack。</p></li></ul><p><strong>zxid</strong></p><p>zxid是 64 位长度的Long类型，其中高 32 位表示纪元epoch，低 32 位表示事务标识xid。即zxid由两部分构成：epoch和xid</p><p>每个leader都会具有不同的epoch值，表示一个纪元，每一个新的选举开启时都会生成一个新的epoch，新的leader产生，会更新所有的zkServer的zxid的epoch，xid是一个依次递增的事务编号。</p><p><strong>leader选举算法：</strong></p><p><img src="https://p.pstatp.com/origin/fe5100029829d7ff251c" alt="image-20200730212416540"></p><p>启动过程</p><ul><li>每一个server发出一个投票给集群中其他节点</li><li>收到各个服务器的投票后，判断该投票有效性，比如是否是本轮投票，是否是 looking状态</li><li>处理投票，pk别人的投票和自己的投票 比较规则xid&gt;myid “取大原则”</li><li>统计是否超过半数的接受相同的选票</li><li>确认leader，改变服务器状态</li><li>添加新server，leader已经选举出来，只能以follower身份加入集群中</li></ul><p>崩溃恢复过程</p><ul><li>leader挂掉后，集群中其他follower会将状态从FOLLOWING变为LOOKING,重新进入leader选举</li><li>同上启动过程</li></ul><p><img src="https://p.pstatp.com/origin/ff3e0002ad3ef471659b" alt="image-20200730212528662"></p><p><strong>消息广播算法：</strong></p><p>一旦进入广播模式，集群中非leader节点接受到事务请求，首先会将事务请求转发给服务器，leader服务器为其生成对应的事务提案proposal,并发送给集群中其他节点，如果过半则事务提交；</p><p><img src="https://p.pstatp.com/origin/13829000045b102c1680d" alt="image-20200730212939123"></p><ul><li>leader接受到消息后，消息通过全局唯一的 64 位自增事务id，zxid标识</li><li>leader发送给follower的提案是有序的，leader会创建一个FIFO队列，将提案顺序写入队列中发送给follower</li><li>follower接受到提案后，会比较提案zxid和本地事务日志最大的zxid，若提案zxid比本地事务id大，将提案记录到本地日志中，反馈ack给leader，否则拒绝</li><li>leader接收到过半ack后，leader向所有的follower发送commit，通知每个follower执行本地事务</li></ul><h1 id="2-zookeeper环境搭建"><a href="#2-zookeeper环境搭建" class="headerlink" title="2.    zookeeper环境搭建"></a>2.    zookeeper环境搭建</h1><p>zookeeper安装以linux环境为例，windows省略</p><h2 id="2-1-单机环境"><a href="#2-1-单机环境" class="headerlink" title="2.1    单机环境"></a>2.1    单机环境</h2><h3 id="2-1-1-安装jdk"><a href="#2-1-1-安装jdk" class="headerlink" title="2.1.1    安装jdk"></a>2.1.1    安装jdk</h3><p>略……</p><h3 id="2-1-2-zookeeper压缩包上传到linux"><a href="#2-1-2-zookeeper压缩包上传到linux" class="headerlink" title="2.1.2    zookeeper压缩包上传到linux"></a>2.1.2    zookeeper压缩包上传到linux</h3><p>Alt+P 进入SFTP ，输入put d:\zookeeper-3.4.6.tar.gz 上传，d:\zookeeper-3.4.6.tar.gz是本地存放zookeeper的路径或者rz上传</p><h3 id="2-1-3-解压缩压缩包"><a href="#2-1-3-解压缩压缩包" class="headerlink" title="2.1.3    解压缩压缩包"></a>2.1.3    解压缩压缩包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-1-4-创建-data-文件夹"><a href="#2-1-4-创建-data-文件夹" class="headerlink" title="2.1.4    创建 data 文件夹"></a>2.1.4    创建 data 文件夹</h3><p>进入 zookeeper-3.4.13 目录,创建data文件夹并修改conf文件夹下的zoo_sample.cfg为zoo.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><h3 id="2-1-5-修改zoo-cfg中的data属性"><a href="#2-1-5-修改zoo-cfg中的data属性" class="headerlink" title="2.1.5    修改zoo.cfg中的data属性"></a>2.1.5    修改zoo.cfg中的data属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/root/zookeeper-3.4.6/data</span><br></pre></td></tr></table></figure><h3 id="2-1-6-zookeeper服务启动"><a href="#2-1-6-zookeeper服务启动" class="headerlink" title="2.1.6    zookeeper服务启动"></a>2.1.6    zookeeper服务启动</h3><p>进入bin目录，启动服务输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p>输出以下内容表示启动成功</p><p><img src="https://p.pstatp.com/origin/fea700015775c9e1b780" alt="image-20200730214246835"></p><p>关闭服务输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure><p>输出以下提示信息</p><p><img src="https://p.pstatp.com/origin/fe2c000240fe36816318" alt="image-20200730214255293"></p><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><p>如果启动状态，提示</p><p><img src="https://p.pstatp.com/origin/fe7100021ade5650355c" alt="image-20200730214313289"></p><p>如果未启动状态，提示</p><p><img src="https://p.pstatp.com/origin/1000300025ba2a2d125e9" alt="image-20200730214349044"></p><h2 id="2-2-集群环境"><a href="#2-2-集群环境" class="headerlink" title="2.2    集群环境"></a>2.2    集群环境</h2><p>真实的集群是需要部署在不同的服务器上的，但是在我们测试时启动多个虚拟机的内存消耗太大，所以我们通常会搭建<strong>伪集群</strong> ，也就是把所有的服务都搭建在一台虚拟机上，用端口进行区分。</p><h3 id="2-2-1-准备工作"><a href="#2-2-1-准备工作" class="headerlink" title="2.2.1    准备工作"></a>2.2.1    准备工作</h3><p>（ 1 ）安装JDK 【此步骤省略】。</p><p>（ 2 ）Zookeeper压缩包上传到服务器</p><p>（ 3 ）将Zookeeper解压到 /usr/local/zookeeper-cluster，复制三份zookeeper并改名为 zookeeper-1、zookeeper-2、zookeeper-3</p><p>（ 4 ）在解压后的Zookeeper目录下创建data目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper-cluster/zookeeper-1</span><br><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper-cluster/zookeeper-2</span><br><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper-cluster/zookeeper-3</span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure><p>（ 5 ） 配置每一个Zookeeper 的dataDir（zoo.cfg） clientPort 分别为 2181 2182 2183</p><p>修改 /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientPort&#x3D;2181</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-1&#x2F;data</span><br></pre></td></tr></table></figure><p>修改/usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientPort&#x3D;2182</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-2&#x2F;data</span><br></pre></td></tr></table></figure><p>修改/usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientPort&#x3D;2183</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-3&#x2F;data</span><br></pre></td></tr></table></figure><h3 id="2-2-2-配置集群"><a href="#2-2-2-配置集群" class="headerlink" title="2.2.2    配置集群"></a>2.2.2    配置集群</h3><p>（ 1 ）在每个zookeeper的 data 目录下创建一个 myid 文件，内容分别是 1 、 2 、 3 。这个文件就是记录每个服务器的ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch myid</span><br></pre></td></tr></table></figure><p>（ 2 ）在每一个zookeeper 的 zoo.cfg配置客户端访问端口（clientPort）和集群服务器IP列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.1&#x3D;192.168.25.129:2881:3881</span><br><span class="line">server.2&#x3D;192.168.25.129:2882:3882</span><br><span class="line">server.3&#x3D;192.168.25.129:2883:3883</span><br><span class="line">server.服务器ID&#x3D;服务器IP地址：服务器之间通信端口：服务器之间投票选举端口</span><br></pre></td></tr></table></figure><h3 id="2-2-3-启动集群"><a href="#2-2-3-启动集群" class="headerlink" title="2.2.3    启动集群"></a>2.2.3    启动集群</h3><p>依次启动三个zk实例，其中有一个leader和两个follower</p><h1 id="3-zookeeper基本使用"><a href="#3-zookeeper基本使用" class="headerlink" title="3.    zookeeper基本使用"></a>3.    zookeeper基本使用</h1><h2 id="3-1-数据结构"><a href="#3-1-数据结构" class="headerlink" title="3.1    数据结构"></a>3.1    数据结构</h2><p>ZooKeeper数据模型的结构与Unix文件系统很类似，整体上可以看作是一棵树，每个节点称做一个ZNode，每个ZNode都可以通过其路径唯一标识</p><p><img src="https://p.pstatp.com/origin/1374e00008525162474b0" alt="image-20200730220144122"></p><p>Znode节点类型</p><ul><li><p>持久化目录节点（PERSISTENT）</p><p>客户端与zookeeper断开连接后，该节点依旧存在</p></li><li><p>持久化顺序编号目录节点（PERSISTENT_SEQUENTIAL）</p><p>客户端与zookeeper断开连接后，该节点依旧存在，Zookeeper会给该节点按照顺序编号</p></li><li><p>临时目录节点（EPHEMERAL）</p><p>客户端与zookeeper断开连接后，该节点被删除</p></li><li><p>临时顺序编号目录节点（EPHEMERAL_SEQUENTIAL）</p><p>客户端与zookeeper断开连接后，该节点被删除，Zookeeper会给该节点按照顺序编号</p></li></ul><h2 id="3-2-命令行使用"><a href="#3-2-命令行使用" class="headerlink" title="3.2    命令行使用"></a>3.2    命令行使用</h2><p>通过zkClient进入zookeeper客户端命令行，输入help查看zookeeper客户端的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./zkcli.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><img src="https://p.pstatp.com/origin/fec8000254bdb46ac408" alt="image-20200730220426812"></p><p>如上图列出了zookeeper所有的客户端命令行，下面主要讲解常见的几个命令行</p><ul><li><p>使用 ls 命令来查看当前znode中所包含的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls path [watch]</span><br><span class="line"></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure></li><li><p>查看当前节点数据并能看到更新次数等数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls2 path [watch]</span><br><span class="line"></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure></li><li><p>创建节点 -s 含有序列 -e 临时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create</span><br><span class="line"></span><br><span class="line">create /<span class="built_in">test</span> testvalue</span><br></pre></td></tr></table></figure></li><li><p>获得节点的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get path [watch]</span><br><span class="line"></span><br><span class="line">get /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>设置节点的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">get /<span class="built_in">test</span> testvalueupdate</span><br></pre></td></tr></table></figure></li><li><p>查看节点状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stat</span> /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete</span><br><span class="line"></span><br><span class="line">delete /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>递归删除节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create /<span class="built_in">test</span> testvalue</span><br><span class="line"></span><br><span class="line">create /<span class="built_in">test</span>/test001 testvalue001</span><br><span class="line"></span><br><span class="line">rmr /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-api使用"><a href="#3-3-api使用" class="headerlink" title="3.3    api使用"></a>3.3    api使用</h2><p><strong>maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>ZooKeeper zk = new ZooKeeper(String connectString, int sessionTimeout,Watcher watcher)</td><td>创建zookeeper连接，connectString表示连接的zookeeper服务器的地址，sessionTimeOut指定会话的的超时时间，Watcher配置监听</td></tr><tr><td>String create(String path, byte[] data, List acl,CreateMode createMode)</td><td>创建一个给定的目录节点 path, 并给它设置数据，CreateMode 标识有四种形式的目录节点，分别是 PERSISTENT：持久化目录节点，这个目录节点存储的数据不会丢失；PERSISTENT_SEQUENTIAL：顺序自动编号的目录节点，这种目录节点会根据当前已近存在的节点数自动加 1 ，然后返回给客户端已经成功创建的目录节点名；EPHEMERAL：临时目录节点，一旦创建这个节点的客户端与服务器端口也就是 session 超时，这种节点会被自动删除；EPHEMERAL_SEQUENTIAL：临时自动编号节点</td></tr><tr><td>Stat exists(String path, boolean watch)</td><td>判断某个 path 是否存在，并设置是否监控这个目录节点，这里的watcher 是在创建 ZooKeeper 实例时指定的 watcher，exists方法还有一个重载方法，可以指定特定的watcher</td></tr><tr><td>Stat exists(String path,Watcher watcher)</td><td>重载方法，这里给某个目录节点设置特定的 watcher，Watcher 在ZooKeeper 是一个核心功能，Watcher 可以监控目录节点的数据变化以及子目录的变化，一旦这些状态发生变化，服务器就会通知所有设置在这个目录节点上的 Watcher，从而每个客户端都很快知道它所关注的目录节点的状态发生变化，而做出相应的反应</td></tr><tr><td>void delete(String path, int version</td><td>删除 path 对应的目录节点，version 为 -1 可以匹配任何版本，也就删除了这个目录节点所有数据</td></tr><tr><td>List getChildren(String path, boolean watch)</td><td>获取指定 path 下的所有子目录节点，同样 getChildren方法也有一个重载方法可以设置特定的 watcher 监控子节点的状态</td></tr><tr><td>Stat setData(String path, byte[] data, int version)</td><td>给 path 设置数据，可以指定这个数据的版本号，如果 version 为 -1 怎可以匹配任何版本</td></tr><tr><td>byte[] getData(String path, boolean watch,Stat stat)</td><td>获取这个 path 对应的目录节点存储的数据，数据的版本等信息可以通过 stat 来指定，同时还可以设置是否监控这个目录节点数据的状态</td></tr></tbody></table><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * zookeeper API测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkApiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建zookeeper连接</span></span><br><span class="line">        ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.142.128:2181"</span>, <span class="number">30000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"触发了"</span> + watchedEvent.getType() + <span class="string">"的事件"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//2. 创建父节点</span></span><br><span class="line">        String path = zooKeeper.create(<span class="string">"/test"</span>, <span class="string">"testValue"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        <span class="comment">//3. 创建子节点</span></span><br><span class="line">        String childrenPath = zooKeeper.create(<span class="string">"/test/children"</span>, <span class="string">"childrenValue"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        System.out.println(childrenPath);</span><br><span class="line">        <span class="comment">//4. 获取节点的值（父节点和子节点）</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = zooKeeper.getData(<span class="string">"/test"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; children = zooKeeper.getChildren(<span class="string">"/test"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">            System.out.println(child);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//5. 修改节点的值</span></span><br><span class="line">        Stat stat = zooKeeper.setData(<span class="string">"/test"</span>, <span class="string">"testUpdate"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        System.out.println(stat);</span><br><span class="line">        <span class="comment">//6. 判断某个节点是否存在</span></span><br><span class="line">        Stat exists = zooKeeper.exists(<span class="string">"/test/children"</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">        <span class="comment">//7. 删除节点</span></span><br><span class="line">        zooKeeper.delete(<span class="string">"/test/children"</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-zookeeper简介&quot;&gt;&lt;a href=&quot;#1-zookeeper简介&quot; class=&quot;headerlink&quot; title=&quot;1.    zookeeper简介&quot;&gt;&lt;/a&gt;1.    zookeeper简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-分布式概述&quot;&gt;&lt;a href=&quot;#1-1-分布式概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    分布式概述&quot;&gt;&lt;/a&gt;1.1    分布式概述&lt;/h2&gt;&lt;p&gt;早期我们使用单体架构，即所有服务部署在一台服务器的一个进程中，随着互联网的发展，逐步演进为分布式架构，多个服务分别部署在不同机器的不同进程中。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="zookeeper" scheme="https://wgy1993.gitee.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC(三)</title>
    <link href="https://wgy1993.gitee.io/archives/94a25162.html"/>
    <id>https://wgy1993.gitee.io/archives/94a25162.html</id>
    <published>2020-06-26T07:55:56.000Z</published>
    <updated>2020-07-01T07:59:46.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SSM-整合"><a href="#1-SSM-整合" class="headerlink" title="1.    SSM 整合"></a>1.    SSM 整合</h1><h2 id="1-1-搭建整合环境"><a href="#1-1-搭建整合环境" class="headerlink" title="1.1    搭建整合环境"></a>1.1    搭建整合环境</h2><h3 id="1-1-1-整合说明"><a href="#1-1-1-整合说明" class="headerlink" title="1.1.1    整合说明"></a>1.1.1    整合说明</h3><p>SSM整合可以使用多种方式，选择XML + 注解的方式</p><h3 id="1-1-2-整合的思路"><a href="#1-1-2-整合的思路" class="headerlink" title="1.1.2    整合的思路"></a>1.1.2    整合的思路</h3><ul><li>先搭建整合的环境 </li><li>先把Spring的配置搭建完成 </li><li>再使用Spring整合SpringMVC框架 </li><li>最后使用Spring整合MyBatis框架</li></ul><a id="more"></a><h3 id="1-1-3-创建数据库和表结构"><a href="#1-1-3-创建数据库和表结构" class="headerlink" title="1.1.3    创建数据库和表结构"></a>1.1.3    创建数据库和表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database ssm;</span><br><span class="line">use ssm;</span><br><span class="line">create table account(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    money double</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-1-4-创建maven的工程"><a href="#1-1-4-创建maven的工程" class="headerlink" title="1.1.4    创建maven的工程"></a>1.1.4    创建maven的工程</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-5-导入依赖"><a href="#1-1-5-导入依赖" class="headerlink" title="1.1.5    导入依赖"></a>1.1.5    导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-6-编写实体类"><a href="#1-1-6-编写实体类" class="headerlink" title="1.1.6    编写实体类"></a>1.1.6    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-7-编写dao接口"><a href="#1-1-7-编写dao接口" class="headerlink" title="1.1.7    编写dao接口"></a>1.1.7    编写dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存帐户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-8-编写service接口和实现类"><a href="#1-1-8-编写service接口和实现类" class="headerlink" title="1.1.8    编写service接口和实现类"></a>1.1.8    编写service接口和实现类</h3><p><strong>接口:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存帐户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有账户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存帐户..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-整合步骤"><a href="#1-2-整合步骤" class="headerlink" title="1.2    整合步骤"></a>1.2    整合步骤</h2><h3 id="1-2-1-保证-Spring-框架在-web-工程中独立运行"><a href="#1-2-1-保证-Spring-框架在-web-工程中独立运行" class="headerlink" title="1.2.1    保证 Spring 框架在 web 工程中独立运行"></a>1.2.1    保证 Spring 框架在 web 工程中独立运行</h3><h4 id="1-2-1-1-编写-spring-配置文件并导入约束"><a href="#1-2-1-1-编写-spring-配置文件并导入约束" class="headerlink" title="1.2.1.1    编写 spring 配置文件并导入约束"></a>1.2.1.1    编写 spring 配置文件并导入约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些注解不扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-1-2-测试-spring"><a href="#1-2-1-2-测试-spring" class="headerlink" title="1.2.1.2    测试 spring"></a>1.2.1.2    测试 spring</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试spring</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 获取对象</span></span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        as.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-保证-SpringMVC-在-web-工程中独立运行"><a href="#1-2-2-保证-SpringMVC-在-web-工程中独立运行" class="headerlink" title="1.2.2    保证 SpringMVC 在 web 工程中独立运行"></a>1.2.2    保证 SpringMVC 在 web 工程中独立运行</h3><h4 id="1-2-2-1-在-web-xml-中配置核心控制器"><a href="#1-2-2-1-在-web-xml-中配置核心控制器" class="headerlink" title="1.2.2.1    在 web.xml 中配置核心控制器"></a>1.2.2.1    在 web.xml 中配置核心控制器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载springmvc.xml配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动服务器，创建该servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--解决中文乱码的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-2-编写-SpringMVC-的配置文件"><a href="#1-2-2-2-编写-SpringMVC-的配置文件" class="headerlink" title="1.2.2.2    编写 SpringMVC 的配置文件"></a>1.2.2.2    编写 SpringMVC 的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描，只扫描Controller注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置的视图解析器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-3-编写-Controller-和-和-jsp-页面"><a href="#1-2-2-3-编写-Controller-和-和-jsp-页面" class="headerlink" title="1.2.2.3    编写 Controller 和 和 jsp 页面"></a>1.2.2.3    编写 Controller 和 和 jsp 页面</h4><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="account/findAll"&gt;查询所有&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;查询所有的帐户&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">    $&#123;account.name&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>controller:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-整合-Spring-和-SpringMVC"><a href="#1-2-3-整合-Spring-和-SpringMVC" class="headerlink" title="1.2.3    整合 Spring 和 SpringMVC"></a>1.2.3    整合 Spring 和 SpringMVC</h3><p>目的：在controller中能成功的调用service对象中的方法。</p><h4 id="1-2-3-1-配置监听器实现启动服务创建容器"><a href="#1-2-3-1-配置监听器实现启动服务创建容器" class="headerlink" title="1.2.3.1    配置监听器实现启动服务创建容器"></a>1.2.3.1    配置监听器实现启动服务创建容器</h4><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置配置文件的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-2-在controller中注入service对象"><a href="#1-2-3-2-在controller中注入service对象" class="headerlink" title="1.2.3.2    在controller中注入service对象"></a>1.2.3.2    在controller中注入service对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户..."</span>);</span><br><span class="line">        <span class="comment">// 调用service的方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-保证-MyBatis-框架在-web-工程中独立运行"><a href="#1-2-4-保证-MyBatis-框架在-web-工程中独立运行" class="headerlink" title="1.2.4    保证 MyBatis 框架在 web 工程中独立运行"></a>1.2.4    保证 MyBatis 框架在 web 工程中独立运行</h3><h4 id="1-2-4-1-编写SqlMapConfig-xml的配置文件"><a href="#1-2-4-1-编写SqlMapConfig-xml的配置文件" class="headerlink" title="1.2.4.1    编写SqlMapConfig.xml的配置文件"></a>1.2.4.1    编写SqlMapConfig.xml的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用的是注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该包下所有的dao接口都可以使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-2-AccountDao使用注解编写SQL语句"><a href="#1-2-4-2-AccountDao使用注解编写SQL语句" class="headerlink" title="1.2.4.2    AccountDao使用注解编写SQL语句"></a>1.2.4.2    AccountDao使用注解编写SQL语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存帐户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into account (name,money) values (#&#123;name&#125;,#&#123;money&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-3-测试MyBatis"><a href="#1-2-4-3-测试MyBatis" class="headerlink" title="1.2.4.3    测试MyBatis"></a>1.2.4.3    测试MyBatis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试mybatis</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 查询所有数据</span></span><br><span class="line">        List&lt;Account&gt; list = dao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : list) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"熊大"</span>);</span><br><span class="line">        account.setMoney(<span class="number">400</span>d);</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 保存</span></span><br><span class="line">        dao.saveAccount(account);</span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-整合-Spring-和-MyBatis"><a href="#1-2-5-整合-Spring-和-MyBatis" class="headerlink" title="1.2.5    整合 Spring 和 MyBatis"></a>1.2.5    整合 Spring 和 MyBatis</h3><p>目的：把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中，SqlMapConfig.xml文件删除。</p><h4 id="1-2-5-1-Spring-接管-MyBatis-的-Session-工厂"><a href="#1-2-5-1-Spring-接管-MyBatis-的-Session-工厂" class="headerlink" title="1.2.5.1    Spring 接管 MyBatis 的 Session 工厂"></a>1.2.5.1    Spring 接管 MyBatis 的 Session 工厂</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring整合MyBatis框架--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-2-配置自动扫描所有-Mapper-接口"><a href="#1-2-5-2-配置自动扫描所有-Mapper-接口" class="headerlink" title="1.2.5.2    配置自动扫描所有 Mapper  接口"></a>1.2.5.2    配置自动扫描所有 Mapper  接口</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置AccountDao接口所在包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-3-配置-spring-的事务"><a href="#1-2-5-3-配置-spring-的事务" class="headerlink" title="1.2.5.3    配置 spring 的事务"></a>1.2.5.3    配置 spring 的事务</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-4-在service中注入dao对象"><a href="#1-2-5-4-在service中注入dao对象" class="headerlink" title="1.2.5.4    在service中注入dao对象"></a>1.2.5.4    在service中注入dao对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有账户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存帐户..."</span>);</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-6-测试-SSM-整合结果"><a href="#1-2-6-测试-SSM-整合结果" class="headerlink" title="1.2.6    测试 SSM 整合结果"></a>1.2.6    测试 SSM 整合结果</h3><h4 id="1-2-6-1-编写测试-jsp"><a href="#1-2-6-1-编写测试-jsp" class="headerlink" title="1.2.6.1    编写测试 jsp"></a>1.2.6.1    编写测试 jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="account/findAll"&gt;测试查询&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;测试包&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"account/save"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-6-2-修改控制器中的方法"><a href="#1-2-6-2-修改控制器中的方法" class="headerlink" title="1.2.6.2    修改控制器中的方法"></a>1.2.6.2    修改控制器中的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帐户控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户..."</span>);</span><br><span class="line">        <span class="comment">// 调用service的方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        accountService.saveAccount(account);</span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/account/findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SSM-整合&quot;&gt;&lt;a href=&quot;#1-SSM-整合&quot; class=&quot;headerlink&quot; title=&quot;1.    SSM 整合&quot;&gt;&lt;/a&gt;1.    SSM 整合&lt;/h1&gt;&lt;h2 id=&quot;1-1-搭建整合环境&quot;&gt;&lt;a href=&quot;#1-1-搭建整合环境&quot; class=&quot;headerlink&quot; title=&quot;1.1    搭建整合环境&quot;&gt;&lt;/a&gt;1.1    搭建整合环境&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-整合说明&quot;&gt;&lt;a href=&quot;#1-1-1-整合说明&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    整合说明&quot;&gt;&lt;/a&gt;1.1.1    整合说明&lt;/h3&gt;&lt;p&gt;SSM整合可以使用多种方式，选择XML + 注解的方式&lt;/p&gt;
&lt;h3 id=&quot;1-1-2-整合的思路&quot;&gt;&lt;a href=&quot;#1-1-2-整合的思路&quot; class=&quot;headerlink&quot; title=&quot;1.1.2    整合的思路&quot;&gt;&lt;/a&gt;1.1.2    整合的思路&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先搭建整合的环境 &lt;/li&gt;
&lt;li&gt;先把Spring的配置搭建完成 &lt;/li&gt;
&lt;li&gt;再使用Spring整合SpringMVC框架 &lt;/li&gt;
&lt;li&gt;最后使用Spring整合MyBatis框架&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="https://wgy1993.gitee.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC(二)</title>
    <link href="https://wgy1993.gitee.io/archives/ea517149.html"/>
    <id>https://wgy1993.gitee.io/archives/ea517149.html</id>
    <published>2020-06-25T15:07:54.000Z</published>
    <updated>2020-06-30T15:12:15.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-响应数据和结果视图"><a href="#1-响应数据和结果视图" class="headerlink" title="1.    响应数据和结果视图"></a>1.    响应数据和结果视图</h1><h2 id="1-1-返回值分类"><a href="#1-1-返回值分类" class="headerlink" title="1.1    返回值分类"></a>1.1    返回值分类</h2><h3 id="1-1-1-void"><a href="#1-1-1-void" class="headerlink" title="1.1.1    void"></a>1.1.1    void</h3><p>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。</p><p>默认会跳转到@RequestMapping(value=”/testVoid”) testVoid的页面。</p><p>可以使用请求转发或者重定向跳转到指定的页面</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是void</span></span><br><span class="line"><span class="comment"> * 请求转发一次请求，不用编写项目的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testVoid"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testVoid方法执行了..."</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编写请求转发的程序</span></span><br><span class="line">    <span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="comment">// response.sendRedirect(request.getContextPath()+"/index.jsp");</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置中文乱码</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    <span class="comment">// 直接会进行响应</span></span><br><span class="line">    response.getWriter().print(<span class="string">"你好"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-字符串"><a href="#1-1-2-字符串" class="headerlink" title="1.1.2    字符串"></a>1.1.2    字符串</h3><p>controller 方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回String</span></span><br><span class="line"><span class="comment"> * 指定逻辑视图名，经过视图解析器解析为 jsp 物理路径：/WEB-INF/pages/success.jsp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testString"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testString</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testString方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"美美"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="comment">// model对象</span></span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-ModelAndView"><a href="#1-1-3-ModelAndView" class="headerlink" title="1.1.3    ModelAndView"></a>1.1.3    ModelAndView</h3><p>ModelAndView 是 SpringMVC 为我们提供的一个对象，该对象也可以用作控制器方法的返回值。</p><p>该对象中有两个方法：</p><p><img src="https://ae01.alicdn.com/kf/H54303a332c464179a9d363016cf830bd1.jpg" alt="image-20200630204109739"></p><p><img src="https://ae01.alicdn.com/kf/H1c00593f469a433689c2890440d2c148o.jpg" alt="image-20200630204119952"></p><p><strong>示例代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回ModelAndView</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    System.out.println(<span class="string">"testModelAndView方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"小凤"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"456"</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="comment">// 把user对象存储到mv对象中，也会把user对象存入到request对象</span></span><br><span class="line">    mv.addObject(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="comment">// 跳转到哪个页面</span></span><br><span class="line">    mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;执行成功&lt;/h3&gt;</span><br><span class="line">    $&#123;user.username&#125;</span><br><span class="line">    $&#123;user.password&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-转发和重定向"><a href="#1-2-转发和重定向" class="headerlink" title="1.2    转发和重定向"></a>1.2    转发和重定向</h2><h3 id="1-2-1-forward-转发"><a href="#1-2-1-forward-转发" class="headerlink" title="1.2.1    forward 转发"></a>1.2.1    forward 转发</h3><p>controller 方法在提供了 String 类型的返回值之后，默认就是请求转发。我们也可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用关键字的方式进行转发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testForward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testForward方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 请求的转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果用了 formward ：则路径必须写成实际视图 url，不能写逻辑视图。</p><p>它相当于“request.getRequestDispatcher(“url”).forward(request,response)”。使用请求转发，既可以转发到 jsp，也可以转发到其他的控制器方法。</p><h3 id="1-2-2-Redirect-重定向"><a href="#1-2-2-Redirect-重定向" class="headerlink" title="1.2.2    Redirect 重定向"></a>1.2.2    Redirect 重定向</h3><p>contrller 方法提供了一个 String 类型返回值之后，它需要在返回值里使用redirect:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用关键字的方式进行转发或者重定向</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRedirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testRedirect方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它相当于“response.sendRedirect(url)”。需要注意的是，如果是重定向到 jsp 页面，则 jsp 页面不能写在 WEB-INF 目录中，否则无法找到。</p><h2 id="1-3-ResponseBody-响应-json-数据"><a href="#1-3-ResponseBody-响应-json-数据" class="headerlink" title="1.3    @ResponseBody 响应 json 数据"></a>1.3    @ResponseBody 响应 json 数据</h2><h3 id="1-3-1-lt-mvc-resources-gt"><a href="#1-3-1-lt-mvc-resources-gt" class="headerlink" title="1.3.1    &lt;mvc:resources/&gt;"></a>1.3.1    <code>&lt;mvc:resources/&gt;</code></h3><p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器，哪些静态资源不拦截</span></span><br><span class="line"><span class="comment">    mvc:resources标签配置不过滤</span></span><br><span class="line"><span class="comment">        location元素表示webapp目录下的包下的所有文件</span></span><br><span class="line"><span class="comment">        mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span> <span class="comment">&lt;!-- 样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span> <span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span> <span class="comment">&lt;!-- javascript --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-RequestBody获取请求体数据"><a href="#1-3-2-RequestBody获取请求体数据" class="headerlink" title="1.3.2    @RequestBody获取请求体数据"></a>1.3.2    @RequestBody获取请求体数据</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 页面加载，绑定单击事件</span></span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">"#btn"</span>).click(function () &#123;</span><br><span class="line">                <span class="comment">// alert("hello btn");</span></span><br><span class="line">                <span class="comment">// 发送ajax请求</span></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    <span class="comment">// 编写json格式，设置属性和值</span></span><br><span class="line">                    url: <span class="string">"user/testAjax"</span>,</span><br><span class="line">                    contentType: <span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">                    data: <span class="string">'&#123;"username":"hehe","password":"123","age":30&#125;'</span>,</span><br><span class="line">                    dataType: <span class="string">"json"</span>,</span><br><span class="line">                    type: <span class="string">"post"</span>,</span><br><span class="line">                    success: function (data) &#123;</span><br><span class="line">                        <span class="comment">// data服务器端响应的json的数据，进行解析</span></span><br><span class="line">                        alert(data);</span><br><span class="line">                        alert(data.username);</span><br><span class="line">                        alert(data.password);</span><br><span class="line">                        alert(data.age);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id="btn"&gt;发送ajax的请求&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取请求体的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAjax</span><span class="params">(@RequestBody String body)</span>) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testAjax方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 客户端发送ajax的请求，传的是json字符串</span></span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-json-字符串转换成JavaBean-对象"><a href="#1-3-3-json-字符串转换成JavaBean-对象" class="headerlink" title="1.3.3    json 字符串转换成JavaBean 对象"></a>1.3.3    json 字符串转换成JavaBean 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟异步请求响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAjax</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testAjax方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-ResponseBody响应JSON数据"><a href="#1-3-4-ResponseBody响应JSON数据" class="headerlink" title="1.3.4    @ResponseBody响应JSON数据"></a>1.3.4    @ResponseBody响应JSON数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟异步请求响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">testAjax</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testAjax方法执行了..."</span>);</span><br><span class="line">    <span class="comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 做响应，模拟查询数据库</span></span><br><span class="line">    user.setUsername(<span class="string">"haha"</span>);</span><br><span class="line">    user.setAge(<span class="number">40</span>);</span><br><span class="line">    <span class="comment">// 做响应</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-SpringMVC实现文件上传"><a href="#2-SpringMVC实现文件上传" class="headerlink" title="2.    SpringMVC实现文件上传"></a>2.    SpringMVC实现文件上传</h1><h2 id="2-1-文件上传的回顾"><a href="#2-1-文件上传的回顾" class="headerlink" title="2.1    文件上传的回顾"></a>2.1    文件上传的回顾</h2><h3 id="2-1-1-文件上传的必要前提"><a href="#2-1-1-文件上传的必要前提" class="headerlink" title="2.1.1    文件上传的必要前提"></a>2.1.1    文件上传的必要前提</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">form 表单的 enctype 取值必须是：multipart&#x2F;form-data</span><br><span class="line">                    (默认值是:application&#x2F;x-www-form-urlencoded)</span><br><span class="line">                    enctype:是表单请求正文的类型</span><br><span class="line"></span><br><span class="line">method 属性取值必须是 Post</span><br><span class="line"></span><br><span class="line">提供一个文件选择域&lt;input type&#x3D;”file” &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-文件上传的原理分析"><a href="#2-1-2-文件上传的原理分析" class="headerlink" title="2.1.2    文件上传的原理分析"></a>2.1.2    文件上传的原理分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">当 form 表单的 enctype 取值不是默认值后，request.getParameter()将失效。</span><br><span class="line"></span><br><span class="line">enctype&#x3D;”application&#x2F;x-www-form-urlencoded”时，form 表单的正文内容是：</span><br><span class="line">    key&#x3D;value&amp;key&#x3D;value&amp;key&#x3D;value</span><br><span class="line"></span><br><span class="line">当 form 表单的 enctype 取值为 Mutilpart&#x2F;form-data 时，请求正文内容就变成：</span><br><span class="line">每一部分都是 MIME 类型描述的正文</span><br><span class="line">-----------------------------7de1a433602ac                   分界符</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;userName&quot;              协议头</span><br><span class="line">aaa                                                          协议的正文</span><br><span class="line">-----------------------------7de1a433602ac</span><br><span class="line">Content-Disposition:  form-data;  name&#x3D;&quot;file&quot;;</span><br><span class="line">filename&#x3D;&quot;C:\Users\zhy\Desktop\fileupload_demofile\b.txt&quot;</span><br><span class="line">Content-Type: text&#x2F;plain                                     协议的类型（MIME  类型）</span><br><span class="line">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="line">-----------------------------7de1a433602ac--</span><br></pre></td></tr></table></figure><h3 id="2-1-3-文件上传"><a href="#2-1-3-文件上传" class="headerlink" title="2.1.3    文件上传"></a>2.1.3    文件上传</h3><h4 id="2-1-3-1-导jar包"><a href="#2-1-3-1-导jar包" class="headerlink" title="2.1.3.1    导jar包"></a>2.1.3.1    导jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-2-编写文件上传的JSP页面"><a href="#2-1-3-2-编写文件上传的JSP页面" class="headerlink" title="2.1.3.2    编写文件上传的JSP页面"></a>2.1.3.2    编写文件上传的JSP页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;传统文件上传&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/user/fileupload1"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-3-Controller控制器"><a href="#2-1-3-3-Controller控制器" class="headerlink" title="2.1.3.3    Controller控制器"></a>2.1.3.3    Controller控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload1</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"文件上传..."</span>);</span><br><span class="line">    <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">    <span class="comment">// 上传的位置</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">    <span class="comment">// 判断，该路径是否存在</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        <span class="comment">// 创建该文件夹</span></span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解析request对象，获取上传文件项</span></span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">// 解析request</span></span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (FileItem item : items) &#123;</span><br><span class="line">        <span class="comment">// 进行判断，当前item对象是否是上传文件项</span></span><br><span class="line">        <span class="keyword">if</span> (item.isFormField()) &#123;</span><br><span class="line">            <span class="comment">// 说明普通表单向</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说明上传文件项</span></span><br><span class="line">            <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">            String filename = item.getName();</span><br><span class="line">            <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">            String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">            filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">            <span class="comment">// 完成文件上传</span></span><br><span class="line">            item.write(<span class="keyword">new</span> File(path, filename));</span><br><span class="line">            <span class="comment">// 删除临时文件</span></span><br><span class="line">            item.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-SpringMVC文件上传"><a href="#2-2-SpringMVC文件上传" class="headerlink" title="2.2    SpringMVC文件上传"></a>2.2    SpringMVC文件上传</h2><p>SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的 name属性名称相同。</p><p><img src="https://ae01.alicdn.com/kf/H575bd77e47b7467fabc9a3a5425101e5x.jpg" alt="image-20200630214642322"></p><h3 id="2-2-1-导jar包"><a href="#2-2-1-导jar包" class="headerlink" title="2.2.1    导jar包"></a>2.2.1    导jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-编写文件上传的JSP页面"><a href="#2-2-2-编写文件上传的JSP页面" class="headerlink" title="2.2.2    编写文件上传的JSP页面"></a>2.2.2    编写文件上传的JSP页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;Springmvc文件上传&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/user/fileupload2"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Controller控制器"><a href="#2-2-3-Controller控制器" class="headerlink" title="2.2.3    Controller控制器"></a>2.2.3    Controller控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringMVC文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload2</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"springmvc文件上传..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">    <span class="comment">// 上传的位置</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">    <span class="comment">// 判断，该路径是否存在</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        <span class="comment">// 创建该文件夹</span></span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 说明上传文件项</span></span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">    filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">    <span class="comment">// 完成文件上传</span></span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> File(path, filename));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-配置文件解析器对象"><a href="#2-2-4-配置文件解析器对象" class="headerlink" title="2.2.4    配置文件解析器对象"></a>2.2.4    配置文件解析器对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件解析器对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id 的值是固定的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为 10MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-SpringMVC跨服务器方式文件上传"><a href="#2-3-SpringMVC跨服务器方式文件上传" class="headerlink" title="2.3    SpringMVC跨服务器方式文件上传"></a>2.3    SpringMVC跨服务器方式文件上传</h2><h3 id="2-3-1-分服务器的目的"><a href="#2-3-1-分服务器的目的" class="headerlink" title="2.3.1    分服务器的目的"></a>2.3.1    分服务器的目的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在实际开发中，我们会有很多处理不同功能的服务器。例如：</span><br><span class="line">    应用服务器：负责部署我们的应用</span><br><span class="line">    数据库服务器：运行我们的数据库</span><br><span class="line">    缓存和消息服务器：负责处理大并发访问的缓存和消息</span><br><span class="line">    文件服务器：负责存储用户上传文件的服务器。</span><br></pre></td></tr></table></figure><p>(注意：此处说的不是服务器集群）</p><p>分服务器处理的目的是让服务器各司其职，从而提高我们项目</p><p><img src="https://ae01.alicdn.com/kf/Ha79d7f774baa4393b8ebae1b7ee52c0dc.jpg" alt="image-20200630214734002"></p><h3 id="2-3-2-搭建图片服务器"><a href="#2-3-2-搭建图片服务器" class="headerlink" title="2.3.2    搭建图片服务器"></a>2.3.2    搭建图片服务器</h3><p>配置端口不同的Tomcat项目</p><h3 id="2-3-3-实现SpringMVC跨服务器方式文件上传"><a href="#2-3-3-实现SpringMVC跨服务器方式文件上传" class="headerlink" title="2.3.3    实现SpringMVC跨服务器方式文件上传"></a>2.3.3    实现SpringMVC跨服务器方式文件上传</h3><h4 id="2-3-3-1-导jar包"><a href="#2-3-3-1-导jar包" class="headerlink" title="2.3.3.1    导jar包"></a>2.3.3.1    导jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-编写文件上传的JSP页面"><a href="#2-3-3-2-编写文件上传的JSP页面" class="headerlink" title="2.3.3.2    编写文件上传的JSP页面"></a>2.3.3.2    编写文件上传的JSP页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;跨服务器文件上传&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"/user/fileupload3"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-Controller控制器"><a href="#2-3-3-3-Controller控制器" class="headerlink" title="2.3.3.3    Controller控制器"></a>2.3.3.3    Controller控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨服务器文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"跨服务器文件上传..."</span>);</span><br><span class="line">    <span class="comment">// 定义上传文件服务器路径</span></span><br><span class="line">    String path = <span class="string">"http://localhost:9090/uploads/"</span>;</span><br><span class="line">    <span class="comment">// 说明上传文件项</span></span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">    filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">    <span class="comment">// 创建 sun 公司提供的 jersey 包中的 Client 对象</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">// 和图片服务器进行连接</span></span><br><span class="line">    WebResource webResource = client.resource(path + filename);</span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    webResource.put(upload.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-4-配置文件解析器对象"><a href="#2-3-3-4-配置文件解析器对象" class="headerlink" title="2.3.3.4    配置文件解析器对象"></a>2.3.3.4    配置文件解析器对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件解析器对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id 的值是固定的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为 10MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-SpringMVC的异常处理"><a href="#3-SpringMVC的异常处理" class="headerlink" title="3.    SpringMVC的异常处理"></a>3.    SpringMVC的异常处理</h1><h2 id="3-1-异常处理思路"><a href="#3-1-异常处理思路" class="headerlink" title="3.1    异常处理思路"></a>3.1    异常处理思路</h2><p>系统中异常包括两类：预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p><p>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 springmvc 前端控制器交由异常处理器进行异常处理，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H30792706fe964537bd578e8b108ede3bP.jpg" alt="image-20200630214914784"></p><h2 id="3-2-SpringMVC的异常处理"><a href="#3-2-SpringMVC的异常处理" class="headerlink" title="3.2    SpringMVC的异常处理"></a>3.2    SpringMVC的异常处理</h2><h3 id="3-2-1-自定义异常类"><a href="#3-2-1-自定义异常类" class="headerlink" title="3.2.1    自定义异常类"></a>3.2.1    自定义异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储提示信息的</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-控制器"><a href="#3-2-2-控制器" class="headerlink" title="3.2.2    控制器"></a>3.2.2    控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> <span class="keyword">throws</span> SysException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testException执行了..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟异常</span></span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 打印异常信息</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 抛出自定义异常信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SysException(<span class="string">"查询所有用户出现错误了..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-自定义异常处理器"><a href="#3-2-3-自定义异常处理器" class="headerlink" title="3.2.3    自定义异常处理器"></a>3.2.3    自定义异常处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常业务逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到异常对象</span></span><br><span class="line">        SysException e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SysException) &#123;</span><br><span class="line">            e = (SysException) ex;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = <span class="keyword">new</span> SysException(<span class="string">"系统正在维护...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"errorMsg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-配置异常处理器"><a href="#3-2-4-配置异常处理器" class="headerlink" title="3.2.4    配置异常处理器"></a>3.2.4    配置异常处理器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sysExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"com.wgy.exception.SysExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-SpringMVC框架中的拦截器"><a href="#4-SpringMVC框架中的拦截器" class="headerlink" title="4.    SpringMVC框架中的拦截器"></a>4.    SpringMVC框架中的拦截器</h1><h2 id="4-1-拦截器的概述"><a href="#4-1-拦截器的概述" class="headerlink" title="4.1    拦截器的概述"></a>4.1    拦截器的概述</h2><p>SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术。</p><p>可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行。</p><p>拦截器和过滤器的功能比较类似，有区别</p><ul><li>过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。</li><li>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。</li><li>过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。</li><li>拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的。</li></ul><p>拦截器也是AOP思想的一种实现方式。</p><p>想要自定义拦截器，需要实现HandlerInterceptor接口。</p><h2 id="4-2-自定义拦截器步骤"><a href="#4-2-自定义拦截器步骤" class="headerlink" title="4.2    自定义拦截器步骤"></a>4.2    自定义拦截器步骤</h2><h3 id="4-2-1-实现HandlerInterceptor接口"><a href="#4-2-1-实现HandlerInterceptor接口" class="headerlink" title="4.2.1    实现HandlerInterceptor接口"></a>4.2.1    实现HandlerInterceptor接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预处理，controller方法执行前</span></span><br><span class="line"><span class="comment">     * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法</span></span><br><span class="line"><span class="comment">     * return false不放行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle 拦截器拦截了"</span>);</span><br><span class="line">        <span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后处理方法，controller方法执行后，success.jsp执行之前</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle 方法执行了"</span>);</span><br><span class="line">        <span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * success.jsp页面执行后，该方法会执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion 方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-配置拦截器"><a href="#4-2-2-配置拦截器" class="headerlink" title="4.2.2    配置拦截器"></a>4.2.2    配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.interceptor.MyInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-运行结果"><a href="#4-2-3-运行结果" class="headerlink" title="4.2.3    运行结果"></a>4.2.3    运行结果</h3><p><img src="https://ae01.alicdn.com/kf/H08d98027d232401e991b4826cb535f559.jpg" alt="image-20200630224439010"></p><h2 id="4-3-拦截器的细节"><a href="#4-3-拦截器的细节" class="headerlink" title="4.3    拦截器的细节"></a>4.3    拦截器的细节</h2><h3 id="4-3-1-HandlerInterceptor接口中的方法"><a href="#4-3-1-HandlerInterceptor接口中的方法" class="headerlink" title="4.3.1    HandlerInterceptor接口中的方法"></a>4.3.1    HandlerInterceptor接口中的方法</h3><p>preHandle方法是controller方法执行前拦截的方法 </p><ul><li>可以使用request或者response跳转到指定的页面 </li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。 </li><li>return false不放行，不会执行controller中的方法。 </li></ul><p>postHandle是controller方法执行后执行的方法，在JSP视图执行前。 </p><ul><li>可以使用request或者response跳转到指定的页面 </li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。 </li></ul><p>postHandle方法是在JSP执行后执行 </p><ul><li>request或者response不能再跳转页面了</li></ul><h3 id="4-3-2-多个拦截器的执行顺序"><a href="#4-3-2-多个拦截器的执行顺序" class="headerlink" title="4.3.2    多个拦截器的执行顺序"></a>4.3.2    多个拦截器的执行顺序</h3><p>多个拦截器是按照配置的顺序决定的。先进后出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.interceptor.HandlerInterceptorDemo1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置第二个拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.interceptor.HandlerInterceptorDemo2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Haf3915745a6e4b1db2fc04bf5fa090ef8.jpg" alt="image-20200630225455582"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-响应数据和结果视图&quot;&gt;&lt;a href=&quot;#1-响应数据和结果视图&quot; class=&quot;headerlink&quot; title=&quot;1.    响应数据和结果视图&quot;&gt;&lt;/a&gt;1.    响应数据和结果视图&lt;/h1&gt;&lt;h2 id=&quot;1-1-返回值分类&quot;&gt;&lt;a href=&quot;#1-1-返回值分类&quot; class=&quot;headerlink&quot; title=&quot;1.1    返回值分类&quot;&gt;&lt;/a&gt;1.1    返回值分类&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-void&quot;&gt;&lt;a href=&quot;#1-1-1-void&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    void&quot;&gt;&lt;/a&gt;1.1.1    void&lt;/h3&gt;&lt;p&gt;如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。&lt;/p&gt;
&lt;p&gt;默认会跳转到@RequestMapping(value=”/testVoid”) testVoid的页面。&lt;/p&gt;
&lt;p&gt;可以使用请求转发或者重定向跳转到指定的页面&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="https://wgy1993.gitee.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC(一)</title>
    <link href="https://wgy1993.gitee.io/archives/4560ea2b.html"/>
    <id>https://wgy1993.gitee.io/archives/4560ea2b.html</id>
    <published>2020-06-24T11:53:20.000Z</published>
    <updated>2020-06-29T12:10:27.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringMVC-的基本概念"><a href="#1-SpringMVC-的基本概念" class="headerlink" title="1.    SpringMVC 的基本概念"></a>1.    SpringMVC 的基本概念</h1><h2 id="1-1-三层架构和MVC"><a href="#1-1-三层架构和MVC" class="headerlink" title="1.1    三层架构和MVC"></a>1.1    三层架构和MVC</h2><h3 id="1-1-1-三层架构"><a href="#1-1-1-三层架构" class="headerlink" title="1.1.1    三层架构"></a>1.1.1    三层架构</h3><p>开发服务器端程序，一般都基于两种形式，一种C/S(客户端/服务器)架构程序，一种B/S(浏览器/服务器)架构程序。</p><p>使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构 ：</p><ul><li>表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型 </li><li>业务层：处理公司具体的业务逻辑的</li><li>持久层：用来操作数据库的</li></ul><a id="more"></a><h3 id="1-1-2-MVC模型"><a href="#1-1-2-MVC模型" class="headerlink" title="1.1.2    MVC模型"></a>1.1.2    MVC模型</h3><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职：</p><ul><li><p>Model：数据模型，JavaBean的类，用来进行数据封装。 </p></li><li><p>View：指JSP、HTML用来展示数据给用户 </p></li><li><p>Controller：用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</p></li></ul><h2 id="1-2-SpringMVC-概述"><a href="#1-2-SpringMVC-概述" class="headerlink" title="1.2    SpringMVC 概述"></a>1.2    SpringMVC 概述</h2><h3 id="1-2-1-SpringMVC-是什么"><a href="#1-2-1-SpringMVC-是什么" class="headerlink" title="1.2.1    SpringMVC 是什么"></a>1.2.1    SpringMVC 是什么</h3><ol><li>是一种基于Java实现的MVC设计模型的请求驱动类型的轻量级WEB框架。</li><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建Web 应用程序的全功能 MVC 模块。</li><li>使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的 SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。</li></ol><h3 id="1-2-2-SpringMVC-在三层架构的位置"><a href="#1-2-2-SpringMVC-在三层架构的位置" class="headerlink" title="1.2.2    SpringMVC 在三层架构的位置"></a>1.2.2    SpringMVC 在三层架构的位置</h3><p><img src="https://ae01.alicdn.com/kf/Hd8e6bb6d90534a90bf4819efd6b36825v.jpg" alt="image-20200628204637421"></p><h3 id="1-2-3-SpringMVC-和-Struts2-的优略分析"><a href="#1-2-3-SpringMVC-和-Struts2-的优略分析" class="headerlink" title="1.2.3    SpringMVC 和 Struts2 的优略分析"></a>1.2.3    SpringMVC 和 Struts2 的优略分析</h3><p><strong>共同点：</strong></p><ul><li>它们都是表现层框架，都是基于 MVC 模型编写的。</li><li>它们的底层都离不开原始 ServletAPI。</li><li>它们处理请求的机制都是一个核心控制器。</li></ul><p><strong>区别：</strong></p><ul><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</li><li>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</li><li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li></ul><h1 id="2-SpringMVC-的入门"><a href="#2-SpringMVC-的入门" class="headerlink" title="2.    SpringMVC 的入门"></a>2.    SpringMVC 的入门</h1><h2 id="2-1-SpringMVC-的入门案例"><a href="#2-1-SpringMVC-的入门案例" class="headerlink" title="2.1    SpringMVC 的入门案例"></a>2.1    SpringMVC 的入门案例</h2><h3 id="2-1-1-创建WEB工程，引入jar包"><a href="#2-1-1-创建WEB工程，引入jar包" class="headerlink" title="2.1.1    创建WEB工程，引入jar包"></a>2.1.1    创建WEB工程，引入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC01_start<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 版本锁定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-配置核心的控制器"><a href="#2-1-2-配置核心的控制器" class="headerlink" title="2.1.2    配置核心的控制器"></a>2.1.2    配置核心的控制器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 spring mvc 的核心控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化参数，用于读取 SpringMVC 的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 servlet 的对象的创建时间点：应用加载时创建。取值只能是非 0 正整数，表示启动顺序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-编写springmvc-xml的配置文件"><a href="#2-1-3-编写springmvc-xml的配置文件" class="headerlink" title="2.1.3    编写springmvc.xml的配置文件"></a>2.1.3    编写springmvc.xml的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-编写index-jsp"><a href="#2-1-4-编写index-jsp" class="headerlink" title="2.1.4    编写index.jsp"></a>2.1.4    编写index.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;入门案例&lt;/h3&gt;</span><br><span class="line">    &lt;a href="$&#123; pageContext.request.contextPath &#125;/hello"&gt;入门案例&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-5-编写HelloController控制器类"><a href="#2-1-5-编写HelloController控制器类" class="headerlink" title="2.1.5    编写HelloController控制器类"></a>2.1.5    编写HelloController控制器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello StringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-6-编写success-jsp"><a href="#2-1-6-编写success-jsp" class="headerlink" title="2.1.6    编写success.jsp"></a>2.1.6    编写success.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门成功！！&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-7-测试"><a href="#2-1-7-测试" class="headerlink" title="2.1.7    测试"></a>2.1.7    测试</h3><p>启动Tomcat服务器，进行测试</p><h2 id="2-2-入门案例的执行过程及原理分析"><a href="#2-2-入门案例的执行过程及原理分析" class="headerlink" title="2.2    入门案例的执行过程及原理分析"></a>2.2    入门案例的执行过程及原理分析</h2><h3 id="2-2-1-案例的执行过程"><a href="#2-2-1-案例的执行过程" class="headerlink" title="2.2.1    案例的执行过程"></a>2.2.1    案例的执行过程</h3><p><img src="https://ae01.alicdn.com/kf/H34e475cb663f4258b3b51b5e53e10b79s.jpg" alt="image-20200628211231694"></p><ol><li>服务器启动，应用被加载。读取到 web.xml 中的配置创建 spring 容器并且初始化容器中的对象。</li><li>浏览器发送请求，被 DispatherServlet 捕获，该 Servlet 并不处理请求，而是把请求转发出去。转发的路径是根据请求 URL，匹配@RequestMapping 中的内容。</li><li>匹配到了后，执行对应方法。该方法有一个返回值。</li><li>根据方法的返回值，借助 InternalResourceViewResolver 找到对应的结果视图。</li><li>渲染结果视图，响应浏览器。</li></ol><h3 id="2-2-2-SpringMVC-的请求响应流程"><a href="#2-2-2-SpringMVC-的请求响应流程" class="headerlink" title="2.2.2    SpringMVC 的请求响应流程"></a>2.2.2    SpringMVC 的请求响应流程</h3><p><img src="https://ae01.alicdn.com/kf/Hafdf5445d4c74b1a8acf7cdd6fb49d87I.jpg" alt="image-20200628211851198"></p><h2 id="2-3-入门案例中涉及的组件"><a href="#2-3-入门案例中涉及的组件" class="headerlink" title="2.3    入门案例中涉及的组件"></a>2.3    入门案例中涉及的组件</h2><h3 id="2-3-1-前端控制器（DispatcherServlet）"><a href="#2-3-1-前端控制器（DispatcherServlet）" class="headerlink" title="2.3.1    前端控制器（DispatcherServlet）"></a>2.3.1    前端控制器（DispatcherServlet）</h3><p>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p><h3 id="2-3-2-处理器映射器（HandlerMapping）"><a href="#2-3-2-处理器映射器（HandlerMapping）" class="headerlink" title="2.3.2    处理器映射器（HandlerMapping）"></a>2.3.2    处理器映射器（HandlerMapping）</h3><p>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><h3 id="2-3-3-处理器（Handler）"><a href="#2-3-3-处理器（Handler）" class="headerlink" title="2.3.3    处理器（Handler）"></a>2.3.3    处理器（Handler）</h3><p>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p><h3 id="2-3-4-处理器适配器（HandlAdapter）"><a href="#2-3-4-处理器适配器（HandlAdapter）" class="headerlink" title="2.3.4    处理器适配器（HandlAdapter）"></a>2.3.4    处理器适配器（HandlAdapter）</h3><p>通过 HandlerAdapter 对处理器进行执行</p><h3 id="2-3-5-视图解析器（View-Resolver）"><a href="#2-3-5-视图解析器（View-Resolver）" class="headerlink" title="2.3.5    视图解析器（View Resolver）"></a>2.3.5    视图解析器（View Resolver）</h3><p>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><h3 id="2-3-6-视图（View）"><a href="#2-3-6-视图（View）" class="headerlink" title="2.3.6    视图（View）"></a>2.3.6    视图（View）</h3><p>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。</p><h3 id="2-3-7-lt-mvc-annotation-driven-gt-说明"><a href="#2-3-7-lt-mvc-annotation-driven-gt-说明" class="headerlink" title="2.3.7    &lt;mvc:annotation-driven&gt; 说明"></a>2.3.7    <code>&lt;mvc:annotation-driven&gt;</code> 说明</h3><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p><p>使 用 <code>&lt;mvc:annotation-driven&gt;</code> 自 动加载 RequestMappingHandlerMapping （处理映射器） 和RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用<code>&lt;mvc:annotation-driven&gt;</code>替代注解处理器和适配器的配置。</p><h2 id="2-4-RequestMapping-注解"><a href="#2-4-RequestMapping-注解" class="headerlink" title="2.4    RequestMapping 注解"></a>2.4    RequestMapping 注解</h2><h3 id="2-4-1-使用说明"><a href="#2-4-1-使用说明" class="headerlink" title="2.4.1    使用说明"></a>2.4.1    使用说明</h3><p>RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系 </p><p>RequestMapping注解可以作用在方法和类上 </p><ul><li>作用在类上：第一级的访问目录 </li><li>作用在方法上：第二级的访问目录</li></ul><p>RequestMapping的属性</p><ul><li><p>path：指定请求路径的url </p></li><li><p>value：value属性和path属性是一样的</p></li><li><p>mthod：指定该方法的请求方式</p></li><li><p>params：指定限制请求参数的条件。例如：</p><p>params = {“accountName”}，表示请求参数必须有 accountName</p><p>params = {“moeny!100”}，表示请求参数中 money 不能是 100。</p></li><li><p>headers：发送的请求中必须包含的请求头</p></li></ul><h3 id="2-4-2-使用示例"><a href="#2-4-2-使用示例" class="headerlink" title="2.4.2    使用示例"></a>2.4.2    使用示例</h3><h4 id="2-4-2-1-出现位置的示例"><a href="#2-4-2-1-出现位置的示例" class="headerlink" title="2.4.2.1    出现位置的示例"></a>2.4.2.1    出现位置的示例</h4><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"accountController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RequestMapping注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了账户。。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 第一种访问方式 --&gt;</span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/account/findAccount"&gt;查询账户&lt;/a&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 第二种访问方式 --&gt;</span><br><span class="line">    &lt;a href="account/findAccount"&gt;查询账户&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在 jsp 中第二种写法时，不要在访问 URL 前面加/ ，否则无法找到资源。</p><h4 id="2-4-2-2-method-属性的示例"><a href="#2-4-2-2-method-属性的示例" class="headerlink" title="2.4.2.2    method 属性的示例"></a>2.4.2.2    method 属性的示例</h4><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/saveAccount"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"保存了账户"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 请求方式的示例 --&gt;</span><br><span class="line">&lt;a href="account/saveAccount"&gt;保存账户，get 请求&lt;/a&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"account/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存账户， post 请求 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>当使用 get 请求时，提示错误信息是 405，信息是方法不支持 get 方式请求</p><p><img src="https://ae01.alicdn.com/kf/H2027d3864b65496ca564666008e52f797.jpg" alt="image-20200628221444670"></p><h4 id="2-4-2-3-params-属性的示例"><a href="#2-4-2-3-params-属性的示例" class="headerlink" title="2.4.2.3    params 属性的示例"></a>2.4.2.3    params 属性的示例</h4><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除账户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/removeAccount"</span>,params= &#123;<span class="string">"accountName"</span>,<span class="string">"money&gt;100"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"删除了账户"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 请求参数的示例 --&gt;</span><br><span class="line">&lt;a href="account/removeAccount?accountName=aaa&amp;money&gt;100"&gt;删除账户，金额 100&lt;/a&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="account/removeAccount?accountName=aaa&amp;money&gt;150"&gt;删除账户，金额 150&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>当我们点击第一个超链接时,可以访问成功。当我们点击第二个超链接时，无法访问。如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hbef2abd798a54b6aa747d77733a25358d.jpg" alt="image-20200628221839151"></p><h1 id="3-请求参数的绑定"><a href="#3-请求参数的绑定" class="headerlink" title="3.    请求参数的绑定"></a>3.    请求参数的绑定</h1><h2 id="3-1-绑定说明"><a href="#3-1-绑定说明" class="headerlink" title="3.1    绑定说明"></a>3.1    绑定说明</h2><h3 id="3-1-1-绑定的机制"><a href="#3-1-1-绑定的机制" class="headerlink" title="3.1.1    绑定的机制"></a>3.1.1    绑定的机制</h3><p>表单中请求参数都是基于 key=value 的。SpringMVC 绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法参数进行绑定的。</p><p><strong>JSP:</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="account/findAccount?accountId=10"&gt;查询账户&lt;/a&gt;</span><br><span class="line">请求参数是：</span><br><span class="line">accountId=<span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"查询了账户。。。。"</span>+accountId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-支持的数据类型"><a href="#3-1-2-支持的数据类型" class="headerlink" title="3.1.2    支持的数据类型"></a>3.1.2    支持的数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">基本类型参数 ：</span><br><span class="line">    包括基本类型和 String 类型</span><br><span class="line">POJO 类型参数 ：</span><br><span class="line">    包括实体类，以及关联的实体类</span><br><span class="line">数组和集合类型参数 ：</span><br><span class="line">    包括 List 结构和 Map 结构的集合（包括数组）</span><br><span class="line"></span><br><span class="line">SpringMVC 绑定请求参数是自动实现的，但是要想使用，必须遵循使用要求。</span><br></pre></td></tr></table></figure><h3 id="3-1-3-使用要求"><a href="#3-1-3-使用要求" class="headerlink" title="3.1.3    使用要求"></a>3.1.3    使用要求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">如果是基本类型或者 String  类型：</span><br><span class="line">    要求我们的参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)</span><br><span class="line">如果是 POJO 类型，或者它的关联对象 ：</span><br><span class="line">    要求表单中参数名称和 POJO 类的属性名称保持一致。并且控制器方法的参数类型是 POJO 类型。</span><br><span class="line">如果是集合类型, 有两种方式： </span><br><span class="line">    第一种：</span><br><span class="line">    要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。</span><br><span class="line">    给 List 集合中的元素赋值，使用下标。</span><br><span class="line">    给 Map 集合中的元素赋值，使用键值对。</span><br><span class="line">    第二种：</span><br><span class="line">    接收的请求参数是 json 格式数据。需要借助一个注解实现。</span><br><span class="line"></span><br><span class="line">它可以实现一些数据类型自动转换,如遇特殊类型转换要求，需要我们自己编写自定义类型转换器。</span><br></pre></td></tr></table></figure><h3 id="3-1-4-使用示例"><a href="#3-1-4-使用示例" class="headerlink" title="3.1.4    使用示例"></a>3.1.4    使用示例</h3><h4 id="3-1-4-1-基本类型和-String-类型作为参数"><a href="#3-1-4-1-基本类型和-String-类型作为参数" class="headerlink" title="3.1.4.1    基本类型和 String 类型作为参数"></a>3.1.4.1    基本类型和 String 类型作为参数</h4><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 基本类型示例 --&gt;</span><br><span class="line">&lt;a href="account/findAccount?accountId=10&amp;accountName=zhangsan"&gt;查询账户&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">(Integer accountId,String accountName)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"查询了账户。。。。"</span>+accountId+<span class="string">","</span>+accountName);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="https://ae01.alicdn.com/kf/H86196c6e426244f09dbc54a07637c9cc7.jpg" alt="image-20200628223719703"></p><h4 id="3-1-4-2-POJO-类型作为参数"><a href="#3-1-4-2-POJO-类型作为参数" class="headerlink" title="3.1.4.2    POJO 类型作为参数"></a>3.1.4.2    POJO 类型作为参数</h4><p><strong>实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- pojo 类型演示 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"account/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    账户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户省份：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.provinceName"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户城市：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.cityName"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"保存了账户。。。。"</span>+account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hea3d14d2cfff4843923dae984454fad16.jpg" alt="image-20200628224103232"></p><h4 id="3-1-4-3-POJO-类中包含集合类型参数"><a href="#3-1-4-3-POJO-类中包含集合类型参数" class="headerlink" title="3.1.4.3    POJO 类中包含集合类型参数"></a>3.1.4.3    POJO 类中包含集合类型参数</h4><p><strong>实体类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Account&gt; accountMap;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- POJO 类包含集合类型演示 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"account/updateAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">1</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">1</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">2</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">2</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">3</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">3</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">4</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">4</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新账户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateAccount</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"更新了账户。。。。"</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Ha91a093b693841aabd405a9bddf06883F.jpg" alt="image-20200628224630666"></p><h4 id="3-1-4-4-请求参数乱码问题"><a href="#3-1-4-4-请求参数乱码问题" class="headerlink" title="3.1.4.4    请求参数乱码问题"></a>3.1.4.4    请求参数乱码问题</h4><p><strong>post 请求方式：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在 web.xml 中配置一个过滤器</span><br><span class="line"><span class="comment">&lt;!-- 配置 springMVC 编码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置过滤器中的属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>get 请求方式：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tomacat对GET和POST请求处理方式是不同的，GET请求的编码问题，要改tomcat的server.xml配置文件，如下：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">edirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br><span class="line">改为：</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">如果遇到 ajax 请求仍然乱码，请把：useBodyEncodingForURI="true"改为 URIEncoding="UTF-8"即可。</span><br></pre></td></tr></table></figure><h2 id="3-2-特殊情况"><a href="#3-2-特殊情况" class="headerlink" title="3.2    特殊情况"></a>3.2    特殊情况</h2><h3 id="3-2-1-自定义类型转换器"><a href="#3-2-1-自定义类型转换器" class="headerlink" title="3.2.1    自定义类型转换器"></a>3.2.1    自定义类型转换器</h3><p>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明 Spring框架内部会默认进行数据类型转换。</p><p>如果想自定义数据类型转换，可以实现Converter的接口</p><h4 id="3-2-1-1-自定义类型转换器"><a href="#3-2-1-1-自定义类型转换器" class="headerlink" title="3.2.1.1    自定义类型转换器"></a>3.2.1.1    自定义类型转换器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把字符串转换日期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String source    传入进来字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请您传入数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把字符串转换日期</span></span><br><span class="line">            <span class="keyword">return</span> df.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据类型转换出现错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-1-2-注册自定义类型转换器"><a href="#3-2-1-2-注册自定义类型转换器" class="headerlink" title="3.2.1.2    注册自定义类型转换器"></a>3.2.1.2    注册自定义类型转换器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置类型转换器工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给工厂注入一个新的类型转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置自定义类型转换器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wgy.utils.StringToDateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用自定义类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-使用-ServletAPI-对象作为方法参数"><a href="#3-2-2-使用-ServletAPI-对象作为方法参数" class="headerlink" title="3.2.2    使用 ServletAPI 对象作为方法参数"></a>3.2.2    使用 ServletAPI 对象作为方法参数</h3><p>SpringMVC 还支持使用原始 ServletAPI 对象作为控制器方法的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原生的API</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testServlet"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line">    System.out.println(request);</span><br><span class="line"></span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    System.out.println(session);</span><br><span class="line"></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(response);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-常用注解"><a href="#4-常用注解" class="headerlink" title="4.    常用注解"></a>4.    常用注解</h1><h2 id="4-1-RequestParam"><a href="#4-1-RequestParam" class="headerlink" title="4.1    RequestParam"></a>4.1    RequestParam</h2><h3 id="4-1-1-使用说明"><a href="#4-1-1-使用说明" class="headerlink" title="4.1.1    使用说明"></a>4.1.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    把请求中指定名称的参数给控制器中的形参赋值。</span><br><span class="line">属性：</span><br><span class="line">    value：请求参数中的名称。</span><br><span class="line">    required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。</span><br></pre></td></tr></table></figure><h3 id="4-1-2-使用示例"><a href="#4-1-2-使用示例" class="headerlink" title="4.1.2    使用示例"></a>4.1.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- requestParams 注解的使用 --&gt;</span><br><span class="line">&lt;a href="springmvc/useRequestParam?name=test"&gt;requestParam 注解&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * requestParam 注解的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestParam</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String username,@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"age"</span>,required=<span class="keyword">false</span>)</span>Integer age)</span>&#123;</span><br><span class="line">    System.out.println(username+<span class="string">","</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hcfbc98e7acc141e8831a7bf711ece3f5d.jpg" alt="image-20200629164033833"></p><h2 id="4-2-RequestBody"><a href="#4-2-RequestBody" class="headerlink" title="4.2    RequestBody"></a>4.2    RequestBody</h2><h3 id="4-2-1-使用说明"><a href="#4-2-1-使用说明" class="headerlink" title="4.2.1    使用说明"></a>4.2.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于获取请求体内容。直接使用得到是 key&#x3D;value&amp;key&#x3D;value...结构的数据。</span><br><span class="line">    get 请求方式不适用。</span><br><span class="line">属性：</span><br><span class="line">    required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。</span><br></pre></td></tr></table></figure><h3 id="4-2-2-使用示例"><a href="#4-2-2-使用示例" class="headerlink" title="4.2.2    使用示例"></a>4.2.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- request body 注解 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/useRequestBody"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="springmvc/useRequestBody?body=test"&gt;requestBody 注解 get 请求&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestBody 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestBody</span><span class="params">(@RequestBody(required=<span class="keyword">false</span>)</span> String body)</span>&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>post 请求运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hf5a845e9fe5547839a2939089b2d338d9.jpg" alt="image-20200629164426200"></p><p><strong>get 请求运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H37db80e01d6a45058b15ae4dd7d9cd170.jpg" alt="image-20200629164443166"></p><h2 id="4-3-PathVaribale"><a href="#4-3-PathVaribale" class="headerlink" title="4.3    PathVaribale"></a>4.3    PathVaribale</h2><h3 id="4-3-1-使用说明"><a href="#4-3-1-使用说明" class="headerlink" title="4.3.1    使用说明"></a>4.3.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于绑定 url 中的占位符。例如：请求 url 中 &#x2F;delete&#x2F;&#123;id&#125;，这个&#123;id&#125;就是 url 占位符。</span><br><span class="line">    url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。</span><br><span class="line">属性：</span><br><span class="line">    value：用于指定 url 中占位符名称。</span><br><span class="line">    required：是否必须提供占位符。</span><br></pre></td></tr></table></figure><h3 id="4-3-2-使用示例"><a href="#4-3-2-使用示例" class="headerlink" title="4.3.2    使用示例"></a>4.3.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- PathVariable 注解 --&gt;</span><br><span class="line">&lt;a href="springmvc/usePathVariable/100"&gt;pathVariable 注解&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PathVariable 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/usePathVariable/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">usePathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H916d7e908d3c4b83a931a59e6c3886e9E.jpg" alt="image-20200629164932588"></p><h3 id="4-3-3-REST-风格-URL"><a href="#4-3-3-REST-风格-URL" class="headerlink" title="4.3.3    REST 风格 URL"></a>4.3.3    REST 风格 URL</h3><h4 id="4-3-3-1-什么是-rest"><a href="#4-3-3-1-什么是-rest" class="headerlink" title="4.3.3.1    什么是 rest"></a>4.3.3.1    什么是 rest</h4><p>REST（英文：Representational State Transfer，简称 REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种 Web 服务交互方案中，REST 相比于 SOAP（Simple Object Access protocol，简单对象访问协议）以及 XML-RPC 更加简单明了，无论是对 URL 的处理还是对 Payload 的编码，REST 都倾向于用更加简单轻量的方法设计和实现。值得注意的是 REST 并没有一个明确的标准，而更像是一种设计的风格。</p><p>它本身并没有什么实用性，其核心价值在于如何设计出符合 REST 风格的网络接口。</p><h4 id="4-3-3-2-restful-的优点"><a href="#4-3-3-2-restful-的优点" class="headerlink" title="4.3.3.2    restful 的优点"></a>4.3.3.2    restful 的优点</h4><p>它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>请求路径一样，可以根据不同的请求方式去执行后台的不同方法</p><h4 id="4-3-3-3-restful-的特性"><a href="#4-3-3-3-restful-的特性" class="headerlink" title="4.3.3.3    restful 的特性"></a>4.3.3.3    restful 的特性</h4><ul><li><p>资源（ Resources）：网络上的一个实体，或者说是网络上的一个具体信息。</p><p>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个 URI （统一资源定位符）指向它，每种资源对应一个特定的 URI 。要获取这个资源，访问它的 URI 就可以，因此 URI 即为每一个资源的独一无二的识别符。</p></li><li><p>表现层（ Representation）：把资源具体呈现出来的形式，叫做它的表现层 （ Representation）。</p><p>比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</p></li><li><p>状态转化（ State Transfer）：每发出一个请求，就代表了客户端和服务器的一次交互过程。</p><p>HTTP 协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生 “状态转化 ”（ State Tran sfer）。而这种转化是建立在表现层之上的，所以就是  “表现层状态转化 ”。具体说，就是  HTTP 协议里面，四个表示操作方式的动词： GET、 POST、 PUT、DELETE。它们分别对应四种基本操作： GET 用来获取资源， POST 用来新建资源， PUT 用来更新资源， DELETE 用来删除资源。</p></li></ul><h4 id="4-3-3-4-restful-的示例"><a href="#4-3-3-4-restful-的示例" class="headerlink" title="4.3.3.4    restful 的示例"></a>4.3.3.4    restful 的示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;account&#x2F;1 HTTP  GET ：   得到 id &#x3D; 1 的 account</span><br><span class="line">&#x2F;account&#x2F;1 HTTP  DELETE： 删除 id &#x3D; 1 的 account</span><br><span class="line">&#x2F;account&#x2F;1 HTTP  PUT：    更新 id &#x3D; 1 的 account</span><br><span class="line">&#x2F;account   HTTP  POST：   新增 account</span><br></pre></td></tr></table></figure><h2 id="4-4-RequestHeader"><a href="#4-4-RequestHeader" class="headerlink" title="4.4    RequestHeader"></a>4.4    RequestHeader</h2><h3 id="4-4-1-使用说明"><a href="#4-4-1-使用说明" class="headerlink" title="4.4.1    使用说明"></a>4.4.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于获取请求消息头。</span><br><span class="line">属性：</span><br><span class="line">    value：提供消息头名称</span><br><span class="line">    required：是否必须有此消息头</span><br><span class="line">注：</span><br><span class="line">    在实际开发中一般不怎么用。</span><br></pre></td></tr></table></figure><h3 id="4-4-2-使用示例"><a href="#4-4-2-使用示例" class="headerlink" title="4.4.2    使用示例"></a>4.4.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- RequestHeader 注解 --&gt;</span><br><span class="line">&lt;a href="springmvc/useRequestHeader"&gt;获取请求消息头&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestHeader 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestHeader</span><span class="params">(@RequestHeader(value=<span class="string">"Accept-Language"</span>,required=<span class="keyword">false</span>)</span>String requestHeader)</span>&#123;</span><br><span class="line">    System.out.println(requestHeader);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H0054c1837dad443aaa5658e2a79ce671c.jpg" alt="image-20200629170448740"></p><h2 id="4-5-CookieValue"><a href="#4-5-CookieValue" class="headerlink" title="4.5    CookieValue"></a>4.5    CookieValue</h2><h3 id="4-5-1-使用说明"><a href="#4-5-1-使用说明" class="headerlink" title="4.5.1    使用说明"></a>4.5.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于把指定 cookie 名称的值传入控制器方法参数。</span><br><span class="line">属性：</span><br><span class="line">    value：指定 cookie 的名称。</span><br><span class="line">    required：是否必须有此 cookie。</span><br></pre></td></tr></table></figure><h3 id="4-5-2-使用示例"><a href="#4-5-2-使用示例" class="headerlink" title="4.5.2    使用示例"></a>4.5.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- CookieValue 注解 --&gt;</span><br><span class="line">&lt;a href="springmvc/useCookieValue"&gt;绑定 cookie 的值&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cookie 注解注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useCookieValue</span><span class="params">(@CookieValue(value=<span class="string">"JSESSIONID"</span>,required=<span class="keyword">false</span>)</span> String cookieValue)</span>&#123;</span><br><span class="line">    System.out.println(cookieValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hc13779ebafcd4a9db18f59124ca603152.jpg" alt="image-20200629170910637"></p><h2 id="4-6-ModelAttribute"><a href="#4-6-ModelAttribute" class="headerlink" title="4.6    ModelAttribute"></a>4.6    ModelAttribute</h2><h3 id="4-6-1-使用说明"><a href="#4-6-1-使用说明" class="headerlink" title="4.6.1    使用说明"></a>4.6.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    该注解是 SpringMVC4.3 版本以后新加入的。它可以用于修饰方法和参数。</span><br><span class="line">    出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。</span><br><span class="line">    出现在参数上，获取指定的数据给参数赋值。</span><br><span class="line">属性：</span><br><span class="line">    value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。</span><br><span class="line">应用场景：</span><br><span class="line">    当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</span><br><span class="line">    例如：</span><br><span class="line">    我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容置为 null，此时就可以使用此注解解决问题。</span><br></pre></td></tr></table></figure><h3 id="4-6-2-使用示例"><a href="#4-6-2-使用示例" class="headerlink" title="4.6.2    使用示例"></a>4.6.2    使用示例</h3><h4 id="4-6-2-1-基于-POJO-属性的基本使用"><a href="#4-6-2-1-基于-POJO-属性的基本使用" class="headerlink" title="4.6.2.1    基于 POJO 属性的基本使用"></a>4.6.2.1    基于 POJO 属性的基本使用</h4><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ModelAttribute 注解的基本使用 --&gt;</span><br><span class="line">&lt;a href="springmvc/testModelAttribute?username=test"&gt;测试 modelattribute&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被 ModelAttribute 修饰的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+user.getUsername());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收请求的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了控制器的方法"</span>+user.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H307fbe1d4de144bf973e27f04f81706fI.jpg" alt="image-20200629171419981"></p><h4 id="4-6-2-2-基于-Map-的应用场景1"><a href="#4-6-2-2-基于-Map-的应用场景1" class="headerlink" title="4.6.2.2    基于 Map  的应用场景1"></a>4.6.2.2    基于 Map  的应用场景1</h4><p>ModelAttribute 修饰方法带返回值</p><p>修改用户信息，要求用户的密码不能修改</p><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改用户信息 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/updateUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询数据库中用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showModel</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟去数据库查询</span></span><br><span class="line">    User abc = findUserByName(username);</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+abc);</span><br><span class="line">    <span class="keyword">return</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟修改用户方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"控制器中处理请求的方法：修改用户："</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟去数据库查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hf2e05516864f43369d864a0cc9dc685fQ.jpg" alt="image-20200629171811865"></p><h4 id="4-6-2-3-基于-Map-的应用场景2"><a href="#4-6-2-3-基于-Map-的应用场景2" class="headerlink" title="4.6.2.3    基于 Map 的应用场景2"></a>4.6.2.3    基于 Map 的应用场景2</h4><p>ModelAttribute 修饰方法不带返回值</p><p>修改用户信息，要求用户的密码不能修改</p><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改用户信息 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/updateUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询数据库中用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(String username,Map&lt;String,User&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟去数据库查询</span></span><br><span class="line">    User user = findUserByName(username);</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+user);</span><br><span class="line">    map.put(<span class="string">"abc"</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟修改用户方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(@ModelAttribute(<span class="string">"abc"</span>)</span>User user) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"控制器中处理请求的方法：修改用户："</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟去数据库查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H17a7d0d1e8d6488ca9ed778bfad0f489E.jpg" alt="image-20200629172223975"></p><h2 id="4-7-SessionAttribute"><a href="#4-7-SessionAttribute" class="headerlink" title="4.7    SessionAttribute"></a>4.7    SessionAttribute</h2><h3 id="4-7-1-使用说明"><a href="#4-7-1-使用说明" class="headerlink" title="4.7.1    使用说明"></a>4.7.1    使用说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于多次执行控制器方法间的参数共享。</span><br><span class="line">属性：</span><br><span class="line">    value：用于指定存入的属性名称</span><br><span class="line">    type：用于指定存入的数据类型。</span><br></pre></td></tr></table></figure><h3 id="4-7-2-使用示例"><a href="#4-7-2-使用示例" class="headerlink" title="4.7.2    使用示例"></a>4.7.2    使用示例</h3><p><strong>JSP:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SessionAttribute 注解的使用 --&gt;</span><br><span class="line">&lt;a href="springmvc/testPut"&gt;存入 SessionAttribute&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="springmvc/testGet"&gt;取出 SessionAttribute&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="springmvc/testClean"&gt;清除 SessionAttribute&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>控制器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"sessionAttributeController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/springmvc"</span>)</span><br><span class="line"><span class="comment">// 把数据存入到session域对象中</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value =&#123;<span class="string">"username"</span>,<span class="string">"password"</span>&#125;,types=&#123;Integer<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SessionAttributeController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把数据存入 SessionAttribute</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * Model 是 spring 提供的一个接口，该接口有一个实现类 ExtendedModelMap</span></span><br><span class="line"><span class="comment">     * 该类继承了 ModelMap，而 ModelMap 就是 LinkedHashMap 子类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testPut"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPut</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"存入了数据"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>, <span class="string">"泰斯特"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"age"</span>, <span class="number">31</span>);</span><br><span class="line">        <span class="comment">//跳转之前将数据保存到 username、password 和 age 中，因为注解@SessionAttribute 中有        这几个参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testGet"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"获取了数据:"</span>);</span><br><span class="line">        System.out.println(model.get(<span class="string">"username"</span>)+<span class="string">";"</span>+model.get(<span class="string">"password"</span>)+<span class="string">";"</span>+model.get(<span class="string">"age"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testClean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">complete</span><span class="params">(SessionStatus sessionStatus)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"清除了数据"</span>);</span><br><span class="line">        sessionStatus.setComplete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://ae01.alicdn.com/kf/H7e2c66ff04eb464d8883a9cceb7250618.jpg" alt="image-20200629172909646"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringMVC-的基本概念&quot;&gt;&lt;a href=&quot;#1-SpringMVC-的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringMVC 的基本概念&quot;&gt;&lt;/a&gt;1.    SpringMVC 的基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-三层架构和MVC&quot;&gt;&lt;a href=&quot;#1-1-三层架构和MVC&quot; class=&quot;headerlink&quot; title=&quot;1.1    三层架构和MVC&quot;&gt;&lt;/a&gt;1.1    三层架构和MVC&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-三层架构&quot;&gt;&lt;a href=&quot;#1-1-1-三层架构&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    三层架构&quot;&gt;&lt;/a&gt;1.1.1    三层架构&lt;/h3&gt;&lt;p&gt;开发服务器端程序，一般都基于两种形式，一种C/S(客户端/服务器)架构程序，一种B/S(浏览器/服务器)架构程序。&lt;/p&gt;
&lt;p&gt;使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型 &lt;/li&gt;
&lt;li&gt;业务层：处理公司具体的业务逻辑的&lt;/li&gt;
&lt;li&gt;持久层：用来操作数据库的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="https://wgy1993.gitee.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(四)</title>
    <link href="https://wgy1993.gitee.io/archives/bf2fe2d.html"/>
    <id>https://wgy1993.gitee.io/archives/bf2fe2d.html</id>
    <published>2020-06-23T14:38:54.000Z</published>
    <updated>2020-06-27T14:44:28.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis-延迟加载策略"><a href="#1-Mybatis-延迟加载策略" class="headerlink" title="1.    Mybatis 延迟加载策略"></a>1.    Mybatis 延迟加载策略</h1><h2 id="1-1-何为延迟加载"><a href="#1-1-何为延迟加载" class="headerlink" title="1.1    何为延迟加载"></a>1.1    何为延迟加载</h2><p>就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。</p><ul><li>好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</li><li>坏处 ：因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。</li></ul><a id="more"></a><h2 id="1-2-实现需求"><a href="#1-2-实现需求" class="headerlink" title="1.2    实现需求"></a>1.2    实现需求</h2><p>查询账户(Account)信息并且关联查询用户(User)信息。如果先查询账户(Account)信息即可满足要求，当我们需要查询用户(User)信息时再查询用户(User)信息。把对用户(User)信息的按需去查询就是延迟加载。</p><h2 id="1-3-使用-assocation-实现延迟加载"><a href="#1-3-使用-assocation-实现延迟加载" class="headerlink" title="1.3    使用 assocation 实现延迟加载"></a>1.3    使用 assocation 实现延迟加载</h2><h3 id="1-3-1-在-Account-实体类中加入-user-属性"><a href="#1-3-1-在-Account-实体类中加入-user-属性" class="headerlink" title="1.3.1    在 Account 实体类中加入 user 属性"></a>1.3.1    在 Account 实体类中加入 user 属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-账户的持久层-DAO-接口"><a href="#1-3-2-账户的持久层-DAO-接口" class="headerlink" title="1.3.2    账户的持久层 DAO 接口"></a>1.3.2    账户的持久层 DAO 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，同时还要获取到当前账户的所属用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-账户的持久层映射文件"><a href="#1-3-3-账户的持久层映射文件" class="headerlink" title="1.3.3    账户的持久层映射文件"></a>1.3.3    账户的持久层映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IAccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容</span></span><br><span class="line"><span class="comment">            select属性指定的内容：查询用户的唯一标识：</span></span><br><span class="line"><span class="comment">            column属性指定的内容：用户根据id查询时，所需要的参数的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span> <span class="attr">select</span>=<span class="string">"com.wgy.dao.IUserDao.findById"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-用户的持久层接口和映射文件"><a href="#1-3-4-用户的持久层接口和映射文件" class="headerlink" title="1.3.4    用户的持久层接口和映射文件"></a>1.3.4    用户的持久层接口和映射文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-5-开启-Mybatis-的延迟加载策略"><a href="#1-3-5-开启-Mybatis-的延迟加载策略" class="headerlink" title="1.3.5    开启 Mybatis 的延迟加载策略"></a>1.3.5    开启 Mybatis 的延迟加载策略</h3><p>进入 Mybaits 的官方文档，找到 settings 的说明信息：</p><p><img src="https://ae01.alicdn.com/kf/Hd79e37b130ea4a41b26b39aad1b3957eN.jpg" alt="image-20200627204827381"></p><p>我们需要在 Mybatis 的配置文件 SqlMapConfig.xml 文件中添加延迟加载的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启Mybatis支持延迟加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-6-编写测试只查账户信息不查用户信息"><a href="#1-3-6-编写测试只查账户信息不查用户信息" class="headerlink" title="1.3.6    编写测试只查账户信息不查用户信息"></a>1.3.6    编写测试只查账户信息不查用户信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行操作</span></span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://ae01.alicdn.com/kf/Hcf303a9569694f3f80c80e12224843dfU.jpg" alt="image-20200627205230689"></p><p>我们发现，因为本次只是将Account对象查询出来放入List集合中，并没有涉及到User对象，所以就没有发出 SQL 语句查询账户所关联的 User 对象的查询。</p><h2 id="1-4-使用-Collection-实现延迟加载"><a href="#1-4-使用-Collection-实现延迟加载" class="headerlink" title="1.4    使用 Collection 实现延迟加载"></a>1.4    使用 Collection 实现延迟加载</h2><h3 id="1-4-1-在-User-实体类中加入List-lt-Account-gt-属性"><a href="#1-4-1-在-User-实体类中加入List-lt-Account-gt-属性" class="headerlink" title="1.4.1    在 User 实体类中加入List&lt;Account&gt;属性"></a>1.4.1    在 User 实体类中加入<code>List&lt;Account&gt;</code>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-用户的持久层-DAO-接口"><a href="#1-4-2-用户的持久层-DAO-接口" class="headerlink" title="1.4.2    用户的持久层 DAO 接口"></a>1.4.2    用户的持久层 DAO 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-用户的持久层映射文件"><a href="#1-4-3-用户的持久层映射文件" class="headerlink" title="1.4.3    用户的持久层映射文件"></a>1.4.3    用户的持久层映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span> <span class="attr">select</span>=<span class="string">"com.wgy.dao.IAccountDao.findAccountByUid"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-4-账户的持久层接口和映射文件"><a href="#1-4-4-账户的持久层接口和映射文件" class="headerlink" title="1.4.4    账户的持久层接口和映射文件"></a>1.4.4    账户的持久层接口和映射文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询账户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户id查询账户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAccountByUid"</span> <span class="attr">resultType</span>=<span class="string">"account"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from account</span><br><span class="line">    where uid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-5-编写测试只查用户信息不查账户信息"><a href="#1-4-5-编写测试只查用户信息不查账户信息" class="headerlink" title="1.4.5    编写测试只查用户信息不查账户信息"></a>1.4.5    编写测试只查用户信息不查账户信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行操作</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://ae01.alicdn.com/kf/H13bff4d3ae514ae18b85bb57358540ebZ.jpg" alt="image-20200627210657513"></p><p>我们发现并没有加载 Account 账户信息。</p><h1 id="2-Mybatis-缓存"><a href="#2-Mybatis-缓存" class="headerlink" title="2.    Mybatis 缓存"></a>2.    Mybatis 缓存</h1><p>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提高性能。</p><p>Mybatis 中缓存分为一级缓存，二级缓存。</p><p><img src="https://ae01.alicdn.com/kf/H4735cf3b628d4fa6b2fb19932579250bK.jpg" alt="image-20200627210818514"></p><h2 id="2-1-Mybatis-一级缓存"><a href="#2-1-Mybatis-一级缓存" class="headerlink" title="2.1    Mybatis 一级缓存"></a>2.1    Mybatis 一级缓存</h2><h3 id="2-1-1-证明一级缓存的存在"><a href="#2-1-1-证明一级缓存的存在" class="headerlink" title="2.1.1    证明一级缓存的存在"></a>2.1.1    证明一级缓存的存在</h3><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close或clearCache，它就存在。</p><h4 id="2-1-1-1-编写用户持久层-Dao-接口"><a href="#2-1-1-1-编写用户持久层-Dao-接口" class="headerlink" title="2.1.1.1    编写用户持久层 Dao 接口"></a>2.1.1.1    编写用户持久层 Dao 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-1-2-编写用户持久层映射文件"><a href="#2-1-1-2-编写用户持久层映射文件" class="headerlink" title="2.1.1.2    编写用户持久层映射文件"></a>2.1.1.2    编写用户持久层映射文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-3-编写测试方法"><a href="#2-1-1-3-编写测试方法" class="headerlink" title="2.1.1.3    编写测试方法"></a>2.1.1.3    编写测试方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试一级缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行操作</span></span><br><span class="line">    User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://ae01.alicdn.com/kf/H9f680502be5d4a6a8b267a9e850dd787V.jpg" alt="image-20200627211639140"></p><p>我们可以发现，虽然在上面的代码中我们查询了两次，但最后只执行了一次数据库操作，这就是 Mybatis 提供给我们的一级缓存在起作用了。因为一级缓存的存在，导致第二次查询 id为41的记录时，并没有发出sql语句从数据库中查询数据，而是从一级缓存中查询。</p><h3 id="2-1-2-一级缓存的分析"><a href="#2-1-2-一级缓存的分析" class="headerlink" title="2.1.2    一级缓存的分析"></a>2.1.2    一级缓存的分析</h3><p>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p><p><img src="https://ae01.alicdn.com/kf/H1db855c1762f4ee6b5ce8c332934323cv.jpg" alt="image-20200627211834463"></p><p>第一次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，如果没有，从数据库查询用户信息。</p><p>得到用户信息，将用户信息存储到一级缓存中。</p><p>如果 sqlSession 去执行 commit 操作（执行插入、更新、删除），清空 SqlSession 中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</p><p>第二次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，缓存中有，直接从缓存中获取用户信息。</p><h3 id="2-1-3-测试一级缓存的清空"><a href="#2-1-3-测试一级缓存的清空" class="headerlink" title="2.1.3    测试一级缓存的清空"></a>2.1.3    测试一级缓存的清空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试一级缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"><span class="comment">//     sqlSession.close();</span></span><br><span class="line">    <span class="comment">//再次获取SqlSession对象</span></span><br><span class="line"><span class="comment">//     sqlSession = factory.openSession();</span></span><br><span class="line">    sqlSession.clearCache();<span class="comment">//此方法也可以清空缓存</span></span><br><span class="line">    userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试缓存的同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClearlCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.根据id查询用户</span></span><br><span class="line">    User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.更新用户信息</span></span><br><span class="line">    user1.setUsername(<span class="string">"update user clear cache"</span>);</span><br><span class="line">    user1.setAddress(<span class="string">"北京市海淀区"</span>);</span><br><span class="line">    userDao.updateUser(user1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.再次查询id为41的用户</span></span><br><span class="line">    User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行sqlSession.close()后，再次获取sqlSession并查询id=41的User对象时，又重新执行了sql语句，从数据库进行了查询操作。</p><h2 id="2-2-Mybatis-二级缓存"><a href="#2-2-Mybatis-二级缓存" class="headerlink" title="2.2    Mybatis  二级缓存"></a>2.2    Mybatis  二级缓存</h2><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p><h3 id="2-2-1-二级缓存结构图"><a href="#2-2-1-二级缓存结构图" class="headerlink" title="2.2.1    二级缓存结构图"></a>2.2.1    二级缓存结构图</h3><p><img src="https://ae01.alicdn.com/kf/H73ce496120784f7bafee6a19452879998.jpg" alt="image-20200627212241101"></p><p>首先开启 mybatis 的二级缓存。</p><p>sqlSession1 去查询用户信息，查询到用户信息会将查询数据存储到二级缓存中。</p><p>如果 SqlSession3 去执行相同 mapper 映射下 sql，执行 commit 提交，将会清空该 mapper 映射下的二级缓存区域的数据。</p><p>sqlSession2 去查询与 sqlSession1 相同的用户信息，首先会去缓存中找是否存在数据，如果存在直接从缓存中取出数据。</p><h3 id="2-2-2-二级缓存的开启与关闭"><a href="#2-2-2-二级缓存的开启与关闭" class="headerlink" title="2.2.2    二级缓存的开启与关闭"></a>2.2.2    二级缓存的开启与关闭</h3><h4 id="2-2-2-1-在-SqlMapConfig-xml-文件开启二级缓存"><a href="#2-2-2-1-在-SqlMapConfig-xml-文件开启二级缓存" class="headerlink" title="2.2.2.1    在 SqlMapConfig.xml 文件开启二级缓存"></a>2.2.2.1    在 SqlMapConfig.xml 文件开启二级缓存</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为false 代表不开启二级缓存。</span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-配置相关的-Mapper-映射文件"><a href="#2-2-2-2-配置相关的-Mapper-映射文件" class="headerlink" title="2.2.2.2    配置相关的 Mapper 映射文件"></a>2.2.2.2    配置相关的 Mapper 映射文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启user支持二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-配置-statement-上面的-useCache"><a href="#2-2-2-3-配置-statement-上面的-useCache" class="headerlink" title="2.2.2.3    配置 statement 上面的 useCache"></a>2.2.2.3    配置 statement 上面的 useCache</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>标签中设置 useCache=”true”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 false。</span><br></pre></td></tr></table></figure><h3 id="2-2-3-二级缓存测试"><a href="#2-2-3-二级缓存测试" class="headerlink" title="2.2.3    二级缓存测试"></a>2.2.3    二级缓存测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试二级缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession1 = factory.openSession();</span><br><span class="line">    IUserDao dao1 = sqlSession1.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = dao1.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    sqlSession1.close();<span class="comment">//一级缓存消失</span></span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession2 = factory.openSession();</span><br><span class="line">    IUserDao dao2 = sqlSession2.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = dao2.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    sqlSession2.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的测试，我们发现执行了两次查询，并且在执行第一次查询后，我们关闭了一级缓存，再去执行第二次查询时，我们发现并没有对数据库发出 sql 语句，所以此时的数据就只能是来自于我们所说的二级缓存。</p><h3 id="2-2-4-二级缓存注意事项"><a href="#2-2-4-二级缓存注意事项" class="headerlink" title="2.2.4    二级缓存注意事项"></a>2.2.4    二级缓存注意事项</h3><p>当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化方式来保存对象。</p><h1 id="3-Mybatis-注解开发"><a href="#3-Mybatis-注解开发" class="headerlink" title="3.    Mybatis  注解开发"></a>3.    Mybatis  注解开发</h1><h2 id="3-1-mybatis-的常用注解说明"><a href="#3-1-mybatis-的常用注解说明" class="headerlink" title="3.1    mybatis 的常用注解说明"></a>3.1    mybatis 的常用注解说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Insert:实现新增</span><br><span class="line">@Update:实现更新</span><br><span class="line">@Delete:实现删除</span><br><span class="line">@Select:实现查询</span><br><span class="line">@Result:实现结果集封装</span><br><span class="line">@Results:可以与@Result 一起使用，封装多个结果集</span><br><span class="line">@ResultMap:实现引用@Results 定义的封装</span><br><span class="line">@One:实现一对一结果集封装</span><br><span class="line">@Many:实现一对多结果集封装</span><br><span class="line">@SelectProvider: 实现动态 SQL 映射</span><br><span class="line">@CacheNamespace:实现注解二级缓存的使用</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-Mybatis-注解实现基本-CRUD"><a href="#3-2-使用-Mybatis-注解实现基本-CRUD" class="headerlink" title="3.2    使用 Mybatis 注解实现基本 CRUD"></a>3.2    使用 Mybatis 注解实现基本 CRUD</h2><h3 id="3-2-1-编写实体类"><a href="#3-2-1-编写实体类" class="headerlink" title="3.2.1    编写实体类"></a>3.2.1    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-使用注解方式开发持久层接口"><a href="#3-2-2-使用注解方式开发持久层接口" class="headerlink" title="3.2.2    使用注解方式开发持久层接口"></a>3.2.2    使用注解方式开发持久层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(username,address,sex,birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;username&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125; "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user  where id=#&#123;id&#125; "</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名称模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;username&#125; "</span>)</span><br><span class="line"><span class="comment">//    @Select("select * from user where username like '%$&#123;value&#125;%' ")</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总用户数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select count(*) from user "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotalUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-编写-SqlMapConfig-配置文件"><a href="#3-2-3-编写-SqlMapConfig-配置文件" class="headerlink" title="3.2.3    编写 SqlMapConfig  配置文件"></a>3.2.3    编写 SqlMapConfig  配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbcConfig.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用typeAliases配置别名，它只能配置domain中类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置映射文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置 dao 接口的位置，它有两种方式</span></span><br><span class="line"><span class="comment">        第一种：使用 mapper 标签配置 class 属性</span></span><br><span class="line"><span class="comment">        第二种：使用 package 标签，直接指定 dao 接口所在的包</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写测试方法"><a href="#3-2-4-编写测试方法" class="headerlink" title="3.2.4    编写测试方法"></a>3.2.4    编写测试方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationCRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"mybatis annotation"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市昌平区"</span>);</span><br><span class="line"></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">57</span>);</span><br><span class="line">        user.setUsername(<span class="string">"mybatis annotation update"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市海淀区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">51</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userDao.findById(<span class="number">57</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findUserByName(<span class="string">"%mybatis%"</span>);</span><br><span class="line"><span class="comment">//        List&lt;User&gt; users = userDao.findUserByName("mybatis");</span></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = userDao.findTotalUser();</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-使用注解实现复杂关系映射开发"><a href="#3-3-使用注解实现复杂关系映射开发" class="headerlink" title="3.3    使用注解实现复杂关系映射开发"></a>3.3    使用注解实现复杂关系映射开发</h2><p>实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，在使用注解开发时我们需要借助@Results 注解，@Result 注解，@One 注解，@Many 注解。</p><h3 id="3-3-1-复杂关系映射的注解说明"><a href="#3-3-1-复杂关系映射的注解说明" class="headerlink" title="3.3.1    复杂关系映射的注解说明"></a>3.3.1    复杂关系映射的注解说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Results  注解</span><br><span class="line">代替的是标签&lt;resultMap&gt;</span><br><span class="line">该注解中可以使用单个@Result 注解，也可以使用@Result 集合</span><br><span class="line">@Results（&#123;@Result（），@Result（）&#125;）或@Results（@Result（））</span><br><span class="line"></span><br><span class="line">@Resutl 注解</span><br><span class="line">代替了 &lt;id&gt; 标签和&lt;result&gt; 标签</span><br><span class="line">@Result  中  属性介绍：</span><br><span class="line">    id 是否是主键字段</span><br><span class="line">    column 数据库的列名</span><br><span class="line">    property 需要装配的属性名</span><br><span class="line">    one 需要使用的@One 注解（@Result（one&#x3D;@One）（）））</span><br><span class="line">    many 需要使用的@Many 注解（@Result（many&#x3D;@many）（）））</span><br><span class="line"></span><br><span class="line">@One  注解（一对一）</span><br><span class="line">    代替了&lt;assocation&gt; 标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。</span><br><span class="line">@One  注解属性介绍：</span><br><span class="line">    select 指定用的 来多表查询的 sqlmapper</span><br><span class="line">    fetchType 会覆盖全局的配置参数 lazyLoadingEnabled。。</span><br><span class="line">    使用格式：</span><br><span class="line">        @Result(column&#x3D;&quot; &quot;,property&#x3D;&quot;&quot;,one&#x3D;@One(select&#x3D;&quot;&quot;))</span><br><span class="line"></span><br><span class="line">@Many  注解（多对一）</span><br><span class="line">    代替了&lt;Collection&gt; 标签, 是是多表查询的关键，在注解中用来指定子查询返回对象集合。</span><br><span class="line">    注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType（一般为 ArrayList）但是注解中可以不定义；</span><br><span class="line">    使用格式：</span><br><span class="line">    @Result(property&#x3D;&quot;&quot;,column&#x3D;&quot;&quot;,many&#x3D;@Many(select&#x3D;&quot;&quot;))</span><br></pre></td></tr></table></figure><h3 id="3-3-2-使用注解实现一对一-复杂关系映射及延迟加载"><a href="#3-3-2-使用注解实现一对一-复杂关系映射及延迟加载" class="headerlink" title="3.3.2    使用注解实现一对一 复杂关系映射及延迟加载"></a>3.3.2    使用注解实现一对一 复杂关系映射及延迟加载</h3><p>加载账户信息时并且加载该账户的用户信息，根据情况可实现延迟加载。（注解方式实现）</p><h4 id="3-3-2-1-添加-User-实体类及-Account-实体类"><a href="#3-3-2-1-添加-User-实体类及-Account-实体类" class="headerlink" title="3.3.2.1    添加 User 实体类及 Account 实体类"></a>3.3.2.1    添加 User 实体类及 Account 实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//多对一（mybatis中称之为一对一）的映射：一个账户只能属于一个用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-2-添加账户的持久层接口并使用注解配置"><a href="#3-3-2-2-添加账户的持久层接口并使用注解配置" class="headerlink" title="3.3.2.2    添加账户的持久层接口并使用注解配置"></a>3.3.2.2    添加账户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，并且获取每个账户所属的用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"accountMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>, property = <span class="string">"money"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"user"</span>, column = <span class="string">"uid"</span>, one = <span class="meta">@One</span>(select = <span class="string">"com.wgy.dao.IUserDao.findById"</span>, fetchType = FetchType.EAGER))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-3-添加用户的持久层接口并使用注解配置"><a href="#3-3-2-3-添加用户的持久层接口并使用注解配置" class="headerlink" title="3.3.2.3    添加用户的持久层接口并使用注解配置"></a>3.3.2.3    添加用户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis中针对CRUD一共有四个注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Select</span> <span class="doctag">@Insert</span> <span class="doctag">@Update</span> <span class="doctag">@Delete</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"userMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"userName"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"userAddress"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"userSex"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"userBirthday"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user  where id=#&#123;id&#125; "</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-4-测试一对一关联及延迟加载"><a href="#3-3-2-4-测试一对一关联及延迟加载" class="headerlink" title="3.3.2.4    测试一对一关联及延迟加载"></a>3.3.2.4    测试一对一关联及延迟加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-使用注解实现一对多复杂关系映射"><a href="#3-3-3-使用注解实现一对多复杂关系映射" class="headerlink" title="3.3.3    使用注解实现一对多复杂关系映射"></a>3.3.3    使用注解实现一对多复杂关系映射</h3><p>查询用户信息时，也要查询他的账户列表。使用注解方式实现。</p><h4 id="3-3-3-1-User-实体类加入List-lt-Account-gt"><a href="#3-3-3-1-User-实体类加入List-lt-Account-gt" class="headerlink" title="3.3.3.1    User 实体类加入List&lt;Account&gt;"></a>3.3.3.1    User 实体类加入<code>List&lt;Account&gt;</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    <span class="comment">//一对多关系映射：一个用户对应多个账户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-2-编写用户的持久层接口并使用注解配置"><a href="#3-3-3-2-编写用户的持久层接口并使用注解配置" class="headerlink" title="3.3.3.2    编写用户的持久层接口并使用注解配置"></a>3.3.3.2    编写用户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id = <span class="string">"userMap"</span>, value = &#123;</span><br><span class="line">    <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"userName"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"userAddress"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"userSex"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"userBirthday"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"accounts"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"com.wgy.dao.IAccountDao.findAccountByUid"</span>, fetchType = FetchType.LAZY))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-3-编写账户的持久层接口并使用注解配置"><a href="#3-3-3-3-编写账户的持久层接口并使用注解配置" class="headerlink" title="3.3.3.3    编写账户的持久层接口并使用注解配置"></a>3.3.3.3    编写账户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询账户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account where uid = #&#123;userId&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-4-测试一对多关联及延迟加载"><a href="#3-3-3-4-测试一对多关联及延迟加载" class="headerlink" title="3.3.3.4    测试一对多关联及延迟加载"></a>3.3.3.4    测试一对多关联及延迟加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-mybatis-基于注解的二级缓存"><a href="#3-4-mybatis-基于注解的二级缓存" class="headerlink" title="3.4    mybatis 基于注解的二级缓存"></a>3.4    mybatis 基于注解的二级缓存</h2><h3 id="3-4-1-在-SqlMapConfig-中开启二级缓存支持"><a href="#3-4-1-在-SqlMapConfig-中开启二级缓存支持" class="headerlink" title="3.4.1    在 SqlMapConfig 中开启二级缓存支持"></a>3.4.1    在 SqlMapConfig 中开启二级缓存支持</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-在持久层接口中使用注解配置二级缓存"><a href="#3-4-2-在持久层接口中使用注解配置二级缓存" class="headerlink" title="3.4.2    在持久层接口中使用注解配置二级缓存"></a>3.4.2    在持久层接口中使用注解配置二级缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CacheNamespace</span>(blocking = <span class="keyword">true</span>)<span class="comment">//mybatis 基于注解方式实现配置二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Mybatis-延迟加载策略&quot;&gt;&lt;a href=&quot;#1-Mybatis-延迟加载策略&quot; class=&quot;headerlink&quot; title=&quot;1.    Mybatis 延迟加载策略&quot;&gt;&lt;/a&gt;1.    Mybatis 延迟加载策略&lt;/h1&gt;&lt;h2 id=&quot;1-1-何为延迟加载&quot;&gt;&lt;a href=&quot;#1-1-何为延迟加载&quot; class=&quot;headerlink&quot; title=&quot;1.1    何为延迟加载&quot;&gt;&lt;/a&gt;1.1    何为延迟加载&lt;/h2&gt;&lt;p&gt;就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。&lt;/li&gt;
&lt;li&gt;坏处 ：因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(三)</title>
    <link href="https://wgy1993.gitee.io/archives/f1b11122.html"/>
    <id>https://wgy1993.gitee.io/archives/f1b11122.html</id>
    <published>2020-06-22T04:21:01.000Z</published>
    <updated>2020-06-27T04:30:36.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis-连接池与事务深入"><a href="#1-Mybatis-连接池与事务深入" class="headerlink" title="1.    Mybatis  连接池与事务深入"></a>1.    Mybatis  连接池与事务深入</h1><h2 id="1-1-Mybatis-的连接池技术"><a href="#1-1-Mybatis-的连接池技术" class="headerlink" title="1.1    Mybatis 的连接池技术"></a>1.1    Mybatis 的连接池技术</h2><p>在 Mybatis 的 SqlMapConfig.xml 配置文件中，通过<code>&lt;dataSource type=&quot;pooled&quot;&gt;</code>来实现 Mybatis 中连接池的配置。</p><a id="more"></a><h3 id="1-1-1-Mybatis-连接池的分类"><a href="#1-1-1-Mybatis-连接池的分类" class="headerlink" title="1.1.1    Mybatis 连接池的分类"></a>1.1.1    Mybatis 连接池的分类</h3><p>在 Mybatis 中我们将它的数据源 dataSource 分为以下几类：</p><ol><li>UNPOOLED：不使用连接池的数据源</li><li>POOLED：使用连接池的数据源</li><li>JNDI：使用 JNDI 实现的数据源</li></ol><p>在这三种数据源中，我们一般采用的是 POOLED 数据源（很多时候我们所说的数据源就是为了更好的管理数据库连接，也就是我们所说的连接池技术）。</p><p><img src="https://ae01.alicdn.com/kf/H5fd3d68018fb47e79d9155d4c88aceafE.jpg" alt="image-20200627121640571"></p><h3 id="1-1-2-Mybatis-中数据源的配置"><a href="#1-1-2-Mybatis-中数据源的配置" class="headerlink" title="1.1.2    Mybatis 中数据源的配置"></a>1.1.2    Mybatis 中数据源的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源（连接池）信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis 在初始化时，根据<code>&lt;dataSource&gt;</code>的 type 属性来创建相应类型的的数据源 DataSource。</p><h3 id="1-1-3-Mybatis-中-DataSource-的存取"><a href="#1-1-3-Mybatis-中-DataSource-的存取" class="headerlink" title="1.1.3    Mybatis  中 DataSource 的存取"></a>1.1.3    Mybatis  中 DataSource 的存取</h3><p>MyBatis 是通过工厂模式来创建数据源 DataSource 对象的， MyBatis 定义了抽象的工厂接口:org.apache.ibatis.datasource.DataSourceFactory,通过其 getDataSource()方法返回数据源DataSource。</p><p>MyBatis 创建了 DataSource 实例后，会将其放到 Configuration 对象内的 Environment 对象中， 供以后使用。</p><h3 id="1-1-4-Mybatis-中连接的获取过程分析"><a href="#1-1-4-Mybatis-中连接的获取过程分析" class="headerlink" title="1.1.4    Mybatis 中连接的获取过程分析"></a>1.1.4    Mybatis 中连接的获取过程分析</h3><p>当我们需要创建 SqlSession 对象并需要执行 SQL 语句时，这时候 MyBatis 才会去调用 dataSource 对象来创建java.sql.Connection对象。也就是说，java.sql.Connection对象的创建一直延迟到执行SQL语句的时候。当我们用完了就再立即将数据库连接归还到连接池中。</p><h2 id="1-2-Mybatis-的事务控制"><a href="#1-2-Mybatis-的事务控制" class="headerlink" title="1.2    Mybatis 的事务控制"></a>1.2    Mybatis 的事务控制</h2><h3 id="1-2-1-JDBC-中事务的回顾"><a href="#1-2-1-JDBC-中事务的回顾" class="headerlink" title="1.2.1    JDBC  中事务的回顾"></a>1.2.1    JDBC  中事务的回顾</h3><p>在 JDBC 中我们可以将事务的提交改为自动方式，通过 setAutoCommit()方法就可以调整。</p><h3 id="1-2-2-Mybatis-中事务提交方式"><a href="#1-2-2-Mybatis-中事务提交方式" class="headerlink" title="1.2.2    Mybatis  中事务提交方式"></a>1.2.2    Mybatis  中事务提交方式</h3><p>Mybatis 中事务的提交方式，本质上就是调用 JDBC 的 setAutoCommit()来实现事务控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"mybatis user09"</span>);</span><br><span class="line">    <span class="comment">//6.执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = userDao.saveUser(user);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Before</span><span class="comment">//在测试方法执行之前执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.读取配置文件</span></span><br><span class="line">    in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">//2.创建构建者对象</span></span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    <span class="comment">//3.创建 SqlSession 工厂对象</span></span><br><span class="line">    factory = builder.build(in);</span><br><span class="line">    <span class="comment">//4.创建 SqlSession 对象</span></span><br><span class="line">    session = factory.openSession();</span><br><span class="line">    <span class="comment">//5.创建 Dao 的代理对象</span></span><br><span class="line">    userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span><span class="comment">//在测试方法执行完成之后执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//7.提交事务</span></span><br><span class="line">    session.commit();</span><br><span class="line">    <span class="comment">//8.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出的结果：</p><p><img src="https://ae01.alicdn.com/kf/H4a6dcffb01784b6f918a604ba1b505b2t.jpg" alt="image-20200627103140191"></p><p> Connection 的整个变化过程，通过分析我们能够发现之前的 CUD 操作过程中，我们都要手动进行事务的提交，原因是 setAutoCommit()方法，在执行时它的值被设置为 false 了，所以我们在 CUD 操作中，必须通过sqlSession.commit()方法来执行提交操作。</p><h3 id="1-2-3-Mybatis-自动提交事务的设置"><a href="#1-2-3-Mybatis-自动提交事务的设置" class="headerlink" title="1.2.3    Mybatis 自动提交事务的设置"></a>1.2.3    Mybatis 自动提交事务的设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.创建 SqlSession 对象</span></span><br><span class="line">session = factory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>所对应的 DefaultSqlSessionFactory 类的源代码：</p><p><img src="https://ae01.alicdn.com/kf/H3c97a6e731a747ae8a13b29b773d896ar.jpg" alt="image-20200627103700367"></p><h1 id="2-Mybatis-的动态-SQL-语句"><a href="#2-Mybatis-的动态-SQL-语句" class="headerlink" title="2.    Mybatis 的动态 SQL 语句"></a>2.    Mybatis 的动态 SQL 语句</h1><h2 id="2-1-lt-if-gt-标签"><a href="#2-1-lt-if-gt-标签" class="headerlink" title="2.1    &lt;if&gt;标签"></a>2.1    <code>&lt;if&gt;</code>标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据条件查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * </span><br><span class="line">    from user </span><br><span class="line">    where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username != '' "</span>&gt;</span></span><br><span class="line">    and username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">    and address like #&#123;address&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-lt-where-gt-标签"><a href="#2-2-lt-where-gt-标签" class="headerlink" title="2.2    &lt;where&gt;标签"></a>2.2    <code>&lt;where&gt;</code>标签</h2><p>为了简化上面 where 1=1 的条件拼装，我们可以采用<code>&lt;where&gt;</code>标签来简化开发。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByCondition"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span></span><br><span class="line">            and username = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userSex != null"</span>&gt;</span></span><br><span class="line">            and sex = #&#123;userSex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-lt-foreach-gt-标签"><a href="#2-3-lt-foreach-gt-标签" class="headerlink" title="2.3    &lt;foreach&gt; 标签"></a>2.3    <code>&lt;foreach&gt;</code> 标签</h2><h3 id="2-3-1-需求"><a href="#2-3-1-需求" class="headerlink" title="2.3.1    需求"></a>2.3.1    需求</h3><p>传入多个 id 查询用户信息，用下边两个 sql 实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USERS</span> <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%张%'</span> <span class="keyword">AND</span> (<span class="keyword">id</span> =<span class="number">10</span> <span class="keyword">OR</span> <span class="keyword">id</span> =<span class="number">89</span> <span class="keyword">OR</span> <span class="keyword">id</span>=<span class="number">16</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USERS</span> <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%张%'</span> <span class="keyword">AND</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">89</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来。</p><h3 id="2-3-2-在-QueryVo-中加入一个-List-集合用于封装参数"><a href="#2-3-2-在-QueryVo-中加入一个-List-集合用于封装参数" class="headerlink" title="2.3.2    在 QueryVo 中加入一个 List 集合用于封装参数"></a>2.3.2    在 QueryVo 中加入一个 List 集合用于封装参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-映射配置"><a href="#2-3-3-映射配置" class="headerlink" title="2.3.3    映射配置"></a>2.3.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据queryvo中的Id集合实现查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserInIds"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">parameterType</span>=<span class="string">"queryvo"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids != null and ids.size()&gt;0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"and id in ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">item</span>=<span class="string">"uid"</span>&gt;</span></span><br><span class="line">                #&#123;uid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">SQL 语句：</span><br><span class="line">select 字段 from user where id in (?)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span>&gt;</span>标签用于遍历集合，它的属性：</span><br><span class="line">    collection:代表要遍历的集合元素，注意编写时不要写#&#123;&#125;</span><br><span class="line">    open:代表语句的开始部分</span><br><span class="line">    close:代表结束部分</span><br><span class="line">    item:代表遍历集合的每个元素，生成的变量名</span><br><span class="line">    sperator:代表分隔符</span><br></pre></td></tr></table></figure><h2 id="2-4-简化编写的-SQL-片段"><a href="#2-4-简化编写的-SQL-片段" class="headerlink" title="2.4    简化编写的 SQL 片段"></a>2.4    简化编写的 SQL 片段</h2><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的。</p><h3 id="2-4-1-定义代码片段"><a href="#2-4-1-定义代码片段" class="headerlink" title="2.4.1    定义代码片段"></a>2.4.1    定义代码片段</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 了解的内容：抽取重复的sql语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"defaultUser"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-引用代码片段"><a href="#2-4-2-引用代码片段" class="headerlink" title="2.4.2    引用代码片段"></a>2.4.2    引用代码片段</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultUser"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-Mybatis-多表查询之一对多"><a href="#3-Mybatis-多表查询之一对多" class="headerlink" title="3.    Mybatis 多表查询之一对多"></a>3.    Mybatis 多表查询之一对多</h1><p>用户为User 表，账户为Account表。一个用户（User）可以有多个账户（Account）。</p><h2 id="3-1-一对一查询-多对一"><a href="#3-1-一对一查询-多对一" class="headerlink" title="3.1    一对一查询( 多对一)"></a>3.1    一对一查询( 多对一)</h2><p>查询所有账户信息，关联查询下单用户信息。</p><h3 id="3-1-1-方式一"><a href="#3-1-1-方式一" class="headerlink" title="3.1.1    方式一"></a>3.1.1    方式一</h3><h4 id="3-1-1-1-定义账户信息的实体类"><a href="#3-1-1-1-定义账户信息的实体类" class="headerlink" title="3.1.1.1    定义账户信息的实体类"></a>3.1.1.1    定义账户信息的实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-2-编写-Sql-语句"><a href="#3-1-1-2-编写-Sql-语句" class="headerlink" title="3.1.1.2    编写 Sql 语句"></a>3.1.1.2    编写 Sql 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select a.*, u.username, u.address</span><br><span class="line">from account a,</span><br><span class="line">user u</span><br><span class="line">where u.id &#x3D; a.uid;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-3-定义-AccountUser-类"><a href="#3-1-1-3-定义-AccountUser-类" class="headerlink" title="3.1.1.3    定义 AccountUser 类"></a>3.1.1.3    定义 AccountUser 类</h4><p>为了能够封装上面 SQL 语句的查询结果，定义 AccountUser 类中要包含账户信息同时还要包含用户信息，所以我们要在定义 AccountUser 类时可以继承 User 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-4-映射配置"><a href="#3-1-1-4-映射配置" class="headerlink" title="3.1.1.4    映射配置"></a>3.1.1.4    映射配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询所有账户同时包含用户名和地址信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccount"</span> <span class="attr">resultType</span>=<span class="string">"accountuser"</span>&gt;</span></span><br><span class="line">    select a.*, u.username, u.address</span><br><span class="line">    from account a,</span><br><span class="line">    user u</span><br><span class="line">    where u.id = a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义专门的 po 类作为输出类型，其中定义了 sql 查询结果集所有的字段。此方法较为简单，企业中使用普遍。</p><h3 id="3-1-2-方式二"><a href="#3-1-2-方式二" class="headerlink" title="3.1.2    方式二"></a>3.1.2    方式二</h3><p>使用 resultMap，定义专门的 resultMap 用于映射一对一查询结果。</p><p>通过面向对象的(has a)关系可以得知，我们可以在 Account 类中加入一个 User 类的对象来代表这个账户是哪个用户的。</p><h4 id="3-1-2-1-修改-Account-类"><a href="#3-1-2-1-修改-Account-类" class="headerlink" title="3.1.2.1    修改 Account 类"></a>3.1.2.1    修改 Account 类</h4><p>在 Account 类中加入 User 类的对象作为 Account 类的一个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-2-映射配置"><a href="#3-1-2-2-映射配置" class="headerlink" title="3.1.2.2    映射配置"></a>3.1.2.2    映射配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">    select u.*, a.id as aid, a.uid, a.money</span><br><span class="line">    from account a,</span><br><span class="line">    user u</span><br><span class="line">    where u.id = a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-一对多查询"><a href="#3-2-一对多查询" class="headerlink" title="3.2    一对多查询"></a>3.2    一对多查询</h2><p>查询所有用户信息及用户关联的账户信息。</p><h3 id="3-2-1-编写-SQL-语句"><a href="#3-2-1-编写-SQL-语句" class="headerlink" title="3.2.1    编写 SQL 语句"></a>3.2.1    编写 SQL 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECTu.*, </span><br><span class="line">        acc.id id,</span><br><span class="line">    acc.uid,</span><br><span class="line">    acc.money</span><br><span class="line">FROM user u</span><br><span class="line">    LEFT JOIN account acc ON u.id &#x3D; acc.uid</span><br></pre></td></tr></table></figure><h3 id="3-2-2-User类加入-List-lt-Account-gt"><a href="#3-2-2-User类加入-List-lt-Account-gt" class="headerlink" title="3.2.2    User类加入 List&lt;Account&gt;"></a>3.2.2    User类加入 <code>List&lt;Account&gt;</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-映射配置"><a href="#3-2-3-映射配置" class="headerlink" title="3.2.3    映射配置"></a>3.2.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user u</span><br><span class="line">    left outer join account a on u.id = a.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">collection</span><br><span class="line">    部分定义了用户关联的账户信息。表示关联查询结果集</span><br><span class="line">property="accounts" ：</span><br><span class="line">    关联查询的结果集存储在 User 对象的上哪个属性。</span><br><span class="line">ofType="account" ：</span><br><span class="line">    指定关联查询的结果集中的对象类型即List中的对象类型。此处可以使用别名，也可以使用全限定名。</span><br></pre></td></tr></table></figure><h1 id="4-Mybatis-多表查询之多对多"><a href="#4-Mybatis-多表查询之多对多" class="headerlink" title="4.    Mybatis 多表查询之多对多"></a>4.    Mybatis 多表查询之多对多</h1><p>多对多关系其实是双向的一对多关系。一个用户可以有多个角色，一个角色可以赋予多个用户。</p><h2 id="4-1-实现-Role-到-User-多对多"><a href="#4-1-实现-Role-到-User-多对多" class="headerlink" title="4.1    实现 Role 到 User 多对多"></a>4.1    实现 Role 到 User 多对多</h2><p>实现查询所有角色并且加载它所分配的用户信息。</p><h3 id="4-1-1-编写-SQL-语句"><a href="#4-1-1-编写-SQL-语句" class="headerlink" title="4.1.1    编写 SQL 语句"></a>4.1.1    编写 SQL 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">from role r</span><br><span class="line">    left outer join user_role ur on r.id &#x3D; ur.rid</span><br><span class="line">    left outer join user u on u.id &#x3D; ur.uid</span><br></pre></td></tr></table></figure><h3 id="4-1-2-编写角色实体类"><a href="#4-1-2-编写角色实体类" class="headerlink" title="4.1.2    编写角色实体类"></a>4.1.2    编写角色实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line">    <span class="comment">//多对多的关系映射：一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-映射配置"><a href="#4-1-3-映射配置" class="headerlink" title="4.1.3    映射配置"></a>4.1.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义role表的ResultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleMap"</span> <span class="attr">type</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"roleMap"</span>&gt;</span></span><br><span class="line">    select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">    from role r</span><br><span class="line">    left outer join user_role ur on r.id = ur.rid</span><br><span class="line">    left outer join user u on u.id = ur.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-实现-User-到-Role-的多对多"><a href="#4-2-实现-User-到-Role-的多对多" class="headerlink" title="4.2    实现 User 到 Role 的多对多"></a>4.2    实现 User 到 Role 的多对多</h2><h3 id="4-2-1-编写-SQL-语句"><a href="#4-2-1-编写-SQL-语句" class="headerlink" title="4.2.1    编写 SQL 语句"></a>4.2.1    编写 SQL 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">from user u</span><br><span class="line">    left outer join user_role ur on u.id &#x3D; ur.uid</span><br><span class="line">    left outer join role r on r.id &#x3D; ur.rid</span><br></pre></td></tr></table></figure><h3 id="4-2-2-编写用户实体类"><a href="#4-2-2-编写用户实体类" class="headerlink" title="4.2.2    编写用户实体类"></a>4.2.2    编写用户实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//多对多的关系映射：一个用户可以具备多个角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-映射配置"><a href="#4-2-3-映射配置" class="headerlink" title="4.2.3    映射配置"></a>4.2.3    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置角色集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select u.*, r.id as rid, r.role_name, r.role_desc</span><br><span class="line">    from user u</span><br><span class="line">    left outer join user_role ur on u.id = ur.uid</span><br><span class="line">    left outer join role r on r.id = ur.rid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-JNDI数据源"><a href="#5-JNDI数据源" class="headerlink" title="5.    JNDI数据源"></a>5.    JNDI数据源</h1><p>JNDI：Java Naming and Directory Interface。是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。在服务器中注册数据源</p><p><img src="https://ae01.alicdn.com/kf/Hc5dd2be66f70431d895271eecd3ccc42t.jpg" alt="image-20200627121531954"></p><h2 id="5-1-创建Maven的war工程并导入坐标"><a href="#5-1-创建Maven的war工程并导入坐标" class="headerlink" title="5.1    创建Maven的war工程并导入坐标"></a>5.1    创建Maven的war工程并导入坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBatis10_JNDI<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2-在webapp文件下创建META-INF目录"><a href="#5-2-在webapp文件下创建META-INF目录" class="headerlink" title="5.2    在webapp文件下创建META-INF目录"></a>5.2    在webapp文件下创建META-INF目录</h2><p><img src="https://ae01.alicdn.com/kf/H3427d3a13fda4416854d94f51c2a4b15w.jpg" alt="image-20200627121032767"></p><h2 id="5-3-在META-INF目录中建立一个名为context-xml的配置文件"><a href="#5-3-在META-INF目录中建立一个名为context-xml的配置文件" class="headerlink" title="5.3    在META-INF目录中建立一个名为context.xml的配置文件"></a>5.3    在META-INF目录中建立一个名为context.xml的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Resource</span></span><br><span class="line"><span class="comment">        name="jdbc/mybatis"                             数据源的名称</span></span><br><span class="line"><span class="comment">        type="javax.sql.DataSource"                     数据源类型</span></span><br><span class="line"><span class="comment">        auth="Container"                                数据源提供者</span></span><br><span class="line"><span class="comment">        maxActive="20"                                  最大活动数</span></span><br><span class="line"><span class="comment">        maxWait="10000"                                 最大等待时间</span></span><br><span class="line"><span class="comment">        maxIdle="5"                                     最大空闲数</span></span><br><span class="line"><span class="comment">        username="root"                                 用户名</span></span><br><span class="line"><span class="comment">        password="root"                                 密码</span></span><br><span class="line"><span class="comment">        driverClassName="com.mysql.jdbc.Driver"         驱动类</span></span><br><span class="line"><span class="comment">        url="jdbc:mysql://localhost:3306/mybatis"       连接url字符串</span></span><br><span class="line"><span class="comment">    /&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"jdbc/mybatis"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxActive</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxWait</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxIdle</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-4-修改SqlMapConfig-xml中的配置"><a href="#5-4-修改SqlMapConfig-xml中的配置" class="headerlink" title="5.4    修改SqlMapConfig.xml中的配置"></a>5.4    修改SqlMapConfig.xml中的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置dev的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务控制的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接数据库的必备信息  type属性表示是否使用数据源（连接池）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JNDI"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"data_source"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/mybatis"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">java:comp/env/为固定写法，后面为context.xml中设置的数据源的名称jdbc/mybatis</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Mybatis-连接池与事务深入&quot;&gt;&lt;a href=&quot;#1-Mybatis-连接池与事务深入&quot; class=&quot;headerlink&quot; title=&quot;1.    Mybatis  连接池与事务深入&quot;&gt;&lt;/a&gt;1.    Mybatis  连接池与事务深入&lt;/h1&gt;&lt;h2 id=&quot;1-1-Mybatis-的连接池技术&quot;&gt;&lt;a href=&quot;#1-1-Mybatis-的连接池技术&quot; class=&quot;headerlink&quot; title=&quot;1.1    Mybatis 的连接池技术&quot;&gt;&lt;/a&gt;1.1    Mybatis 的连接池技术&lt;/h2&gt;&lt;p&gt;在 Mybatis 的 SqlMapConfig.xml 配置文件中，通过&lt;code&gt;&amp;lt;dataSource type=&amp;quot;pooled&amp;quot;&amp;gt;&lt;/code&gt;来实现 Mybatis 中连接池的配置。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(二)</title>
    <link href="https://wgy1993.gitee.io/archives/8f423109.html"/>
    <id>https://wgy1993.gitee.io/archives/8f423109.html</id>
    <published>2020-06-21T14:11:23.000Z</published>
    <updated>2020-06-25T14:18:28.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基于代理-Dao-实现-CRUD-操作"><a href="#1-基于代理-Dao-实现-CRUD-操作" class="headerlink" title="1.    基于代理 Dao 实现 CRUD 操作"></a>1.    基于代理 Dao 实现 CRUD 操作</h1><p>使用要求：</p><ol><li>持久层接口和持久层接口的映射配置必须在相同的包下</li><li>持久层映射配置中 mapper 标签的 namespace 属性取值必须是持久层接口的全限定类名</li><li>SQL 语句的配置标签<code>&lt;select&gt;</code>,<code>&lt;insert&gt;</code>,<code>&lt;delete&gt;</code>,<code>&lt;update&gt;</code>的 id 属性必须和持久层接口的方法名相同。</li></ol><a id="more"></a><h2 id="1-1-根据-ID-查询"><a href="#1-1-根据-ID-查询" class="headerlink" title="1.1    根据 ID 查询"></a>1.1    根据 ID 查询</h2><h3 id="1-1-1-在持久层接口中添加查询方法"><a href="#1-1-1-在持久层接口中添加查询方法" class="headerlink" title="1.1.1    在持久层接口中添加查询方法"></a>1.1.1    在持久层接口中添加查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-在用户的映射配置文件中配置"><a href="#1-1-2-在用户的映射配置文件中配置" class="headerlink" title="1.1.2    在用户的映射配置文件中配置"></a>1.1.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>细节：</p><ul><li><p>resultType  属性：</p><p>用于指定结果集的类型。</p></li><li><p>parameterType  属性：</p><p>用于指定传入参数的类型。</p></li><li><p>sql  语句中使用#{} 字符 ：</p><p>它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。</p><p>具体的数据是由#{}里面的内容决定的。</p></li><li><p><code>#{}</code> 中内容的写法：</p><p>由于数据类型是基本类型，所以此处可以随意写。</p></li></ul><h3 id="1-1-3-在测试类添加测试"><a href="#1-1-3-在测试类添加测试" class="headerlink" title="1.1.3    在测试类添加测试"></a>1.1.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试mybatis的crud操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span><span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3.获取SqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.获取dao的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询一个操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        User user = userDao.findById(<span class="number">49</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-保存操作"><a href="#1-2-保存操作" class="headerlink" title="1.2    保存操作"></a>1.2    保存操作</h2><h3 id="1-2-1-在持久层接口中添加新增方法"><a href="#1-2-1-在持久层接口中添加新增方法" class="headerlink" title="1.2.1    在持久层接口中添加新增方法"></a>1.2.1    在持久层接口中添加新增方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-在用户的映射配置文件中配置"><a href="#1-2-2-在用户的映射配置文件中配置" class="headerlink" title="1.2.2    在用户的映射配置文件中配置"></a>1.2.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    insert into user(username, address, sex, birthday)</span><br><span class="line">    values (#&#123;userName&#125;, #&#123;userAddress&#125;, #&#123;userSex&#125;, #&#123;userBirthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>细节：</p><ul><li><p>parameterType 属性：</p><p>代表参数的类型，因为我们要传入的是一个类的对象，所以类型就写类的全名称。</p></li><li><p>sql 语句中使用#{}字符：</p><p>它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。</p><p>具体的数据是由#{}里面的内容决定的。</p></li><li><p><code>#{}</code>中内容的写法：</p><p>由于我们保存方法的参数是 一个 User 对象，此处要写 User 对象中的属性名称。</p><p>它用的是 ognl 表达式。</p></li><li><p>ognl 表达式：</p><p>它是 apache 提供的一种表达式语言，全称是：Object Graphic Navigation Language 对象图导航语言</p><p>它是按照一定的语法格式来获取数据的。</p><p>语法格式就是使用 #{对象.对象}的方式</p><p><code>#{user.username}</code>它会先去找 user 对象，然后在 user 对象中找到 username 属性，并调用getUsername()方法把值取出来。但是我们在 parameterType 属性上指定了实体类名称，所以可以省略 user.而直接写 username。</p></li></ul><h3 id="1-2-3-在测试类添加测试"><a href="#1-2-3-在测试类添加测试" class="headerlink" title="1.2.3    在测试类添加测试"></a>1.2.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试保存操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"insert User property"</span>);</span><br><span class="line">    user.setUserAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">    user.setUserSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setUserBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    System.out.println(<span class="string">"保存操作之前："</span> + user);</span><br><span class="line">    <span class="comment">//5.执行保存方法</span></span><br><span class="line">    userDao.saveUser(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"保存操作之后："</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开 Mysql 数据库发现并没有添加任何记录，原因是什么？</p><p>这一点和 jdbc 是一样的，我们在实现增删改时一定要去控制事务的提交，那么在 mybatis 中如何控制事务提交呢？</p><p>可以使用:session.commit();来实现事务提交。加入事务提交后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//6.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-问题扩展：新增用户-id-的返回值"><a href="#1-2-4-问题扩展：新增用户-id-的返回值" class="headerlink" title="1.2.4    问题扩展：新增用户 id 的返回值"></a>1.2.4    问题扩展：新增用户 id 的返回值</h3><p>新增用户后，同时还要返回当前新增用户的 id 值，因为 id 是由数据库的自动增长来实现的，所以就相当于我们要在新增后将自动增长 auto_increment 的值返回。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        select last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user(username, address, sex, birthday)</span><br><span class="line">    values (#&#123;userName&#125;, #&#123;userAddress&#125;, #&#123;userSex&#125;, #&#123;userBirthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-用户更新"><a href="#1-3-用户更新" class="headerlink" title="1.3    用户更新"></a>1.3    用户更新</h2><h3 id="1-3-1-在持久层接口中添加更新方法"><a href="#1-3-1-在持久层接口中添加更新方法" class="headerlink" title="1.3.1    在持久层接口中添加更新方法"></a>1.3.1    在持久层接口中添加更新方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-在用户的映射配置文件中配置"><a href="#1-3-2-在用户的映射配置文件中配置" class="headerlink" title="1.3.2    在用户的映射配置文件中配置"></a>1.3.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    set username=#&#123;userName&#125;,</span><br><span class="line">    address=#&#123;userAddress&#125;,</span><br><span class="line">    sex=#&#123;userSex&#125;,</span><br><span class="line">    birthday=#&#123;userBirthday&#125;</span><br><span class="line">    where id = #&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-在测试类添加测试"><a href="#1-3-3-在测试类添加测试" class="headerlink" title="1.3.3    在测试类添加测试"></a>1.3.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试更新操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserId(<span class="number">49</span>);</span><br><span class="line">    user.setUserName(<span class="string">"mybastis update user"</span>);</span><br><span class="line">    user.setUserAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">    user.setUserSex(<span class="string">"女"</span>);</span><br><span class="line">    user.setUserBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.执行保存方法</span></span><br><span class="line">    userDao.updateUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-用户删除"><a href="#1-4-用户删除" class="headerlink" title="1.4    用户删除"></a>1.4    用户删除</h2><h3 id="1-4-1-在持久层接口中添加删除方法"><a href="#1-4-1-在持久层接口中添加删除方法" class="headerlink" title="1.4.1    在持久层接口中添加删除方法"></a>1.4.1    在持久层接口中添加删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据Id删除用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-在用户的映射配置文件中配置"><a href="#1-4-2-在用户的映射配置文件中配置" class="headerlink" title="1.4.2    在用户的映射配置文件中配置"></a>1.4.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-3-在测试类添加测试"><a href="#1-4-3-在测试类添加测试" class="headerlink" title="1.4.3    在测试类添加测试"></a>1.4.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行删除方法</span></span><br><span class="line">    userDao.deleteUser(<span class="number">48</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-用户模糊查询"><a href="#1-5-用户模糊查询" class="headerlink" title="1.5    用户模糊查询"></a>1.5    用户模糊查询</h2><h3 id="1-5-1-在持久层接口中添加模糊查询方法"><a href="#1-5-1-在持久层接口中添加模糊查询方法" class="headerlink" title="1.5.1    在持久层接口中添加模糊查询方法"></a>1.5.1    在持久层接口中添加模糊查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据名称模糊查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-在用户的映射配置文件中配置"><a href="#1-5-2-在用户的映射配置文件中配置" class="headerlink" title="1.5.2    在用户的映射配置文件中配置"></a>1.5.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-在测试类添加测试"><a href="#1-5-3-在测试类添加测试" class="headerlink" title="1.5.3    在测试类添加测试"></a>1.5.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试模糊查询操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台输出的执行 SQL 语句如下：</p><p><img src="https://ae01.alicdn.com/kf/H0650dcbbb85b417cb74c52fe54d9ed3bu.jpg" alt="image-20200625202650932"></p><p>我们在配置文件中没有加入%来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标识%。配置文件中的#{username}也只是一个占位符，所以 SQL 语句显示为“？”。</p><h3 id="1-5-4-模糊查询的另一种配置方式"><a href="#1-5-4-模糊查询的另一种配置方式" class="headerlink" title="1.5.4    模糊查询的另一种配置方式"></a>1.5.4    模糊查询的另一种配置方式</h3><p>第一步：修改 SQL 语句的配置，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like '%$&#123;value&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在上面将原来的#{}占位符，改成了${value}。注意如果用模糊查询的这种写法，那么${value}的写法就是固定的，不能写成其它名字。</p><p>第二步：测试，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试模糊查询操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findByName(<span class="string">"王"</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台输出的执行 SQL 语句如下：</p><p><img src="https://ae01.alicdn.com/kf/Hda911e6364f94c95a923bc4f6471e49dC.jpg" alt="image-20200625203027705"></p><p>可以发现，我们在程序代码中就不需要加入模糊查询的匹配符%了，这两种方式的实现效果是一样的，但执行的语句是不一样的。</p><h3 id="1-5-5-与-的区别"><a href="#1-5-5-与-的区别" class="headerlink" title="1.5.5    #{} 与${} 的区别"></a>1.5.5    <code>#{}</code> 与<code>${}</code> 的区别</h3><ul><li><p><code>#{}</code> 表示一个占位符号</p><p>通过#{}可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，#{}可以有效防止 sql 注入。 #{}可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类型值，#{}括号中可以是 value 或其它名称。</p></li><li><p><code>${}</code> 表示拼接 sql  串</p><p>通过${}可以将 parameterType 传入的内容拼接在 sql中且不进行 jdbc 类型转换， ${}可以接收简单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，${}括号中只能是 value。</p></li></ul><h3 id="1-5-6-模糊查询的-value-源码分析"><a href="#1-5-6-模糊查询的-value-源码分析" class="headerlink" title="1.5.6    模糊查询的${value} 源码分析"></a>1.5.6    模糊查询的<code>${value}</code> 源码分析</h3><p><img src="https://ae01.alicdn.com/kf/H70e74dd556154de6838a5509629d8995Z.jpg" alt="image-20200625203437404"></p><p>这就说明了源码中指定了读取的 key 的名字就是”value”，所以我们在绑定参数时就只能叫 value 的名字了。</p><h2 id="1-6-查询使用聚合函数"><a href="#1-6-查询使用聚合函数" class="headerlink" title="1.6    查询使用聚合函数"></a>1.6    查询使用聚合函数</h2><h3 id="1-6-1-在持久层接口中添加聚合函数查询方法"><a href="#1-6-1-在持久层接口中添加聚合函数查询方法" class="headerlink" title="1.6.1    在持久层接口中添加聚合函数查询方法"></a>1.6.1    在持久层接口中添加聚合函数查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询总用户数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-在用户的映射配置文件中配置"><a href="#1-6-2-在用户的映射配置文件中配置" class="headerlink" title="1.6.2    在用户的映射配置文件中配置"></a>1.6.2    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 获取用户的总记录条数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select count(id)</span><br><span class="line">    from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-3-在测试类添加测试"><a href="#1-6-3-在测试类添加测试" class="headerlink" title="1.6.3    在测试类添加测试"></a>1.6.3    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询总记录条数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    <span class="keyword">int</span> count = userDao.findTotal();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Mybatis-的参数深入"><a href="#2-Mybatis-的参数深入" class="headerlink" title="2.    Mybatis 的参数深入"></a>2.    Mybatis 的参数深入</h1><h2 id="2-1-parameterType-配置参数"><a href="#2-1-parameterType-配置参数" class="headerlink" title="2.1    parameterType 配置参数"></a>2.1    parameterType 配置参数</h2><h3 id="2-1-1-使用说明"><a href="#2-1-1-使用说明" class="headerlink" title="2.1.1    使用说明"></a>2.1.1    使用说明</h3><p> SQL 语句传参，使用标签的 parameterType 属性来设定。该属性的取值可以是基本类型，引用类型（例如:String 类型），还可以是实体类类型（POJO 类）。同时也可以使用实体类的包装类</p><h3 id="2-1-2-注意事项"><a href="#2-1-2-注意事项" class="headerlink" title="2.1.2    注意事项"></a>2.1.2    注意事项</h3><p>基本类 型和 String 我们可以直接写类型名称 ，也可以使用包名 . 类名的方式 ，例如 ：java.lang.String。实体类类型，目前我们只能使用全限定类名。</p><p><img src="https://ae01.alicdn.com/kf/H66b44a9259694d9d945d912037de5a27w.jpg" alt="image-20200625210722651"></p><h2 id="2-2-传递-pojo-包装对象"><a href="#2-2-传递-pojo-包装对象" class="headerlink" title="2.2    传递 pojo 包装对象"></a>2.2    传递 pojo 包装对象</h2><p>开发中通过 pojo 传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。Pojo 类中包含 pojo。</p><p>需求：根据用户名查询用户信息，查询条件放到 QueryVo 的 user 属性中。</p><h3 id="2-2-1-编写-QueryVo"><a href="#2-2-1-编写-QueryVo" class="headerlink" title="2.2.1    编写 QueryVo"></a>2.2.1    编写 QueryVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-在持久层接口中添加查询方法"><a href="#2-2-2-在持久层接口中添加查询方法" class="headerlink" title="2.2.2    在持久层接口中添加查询方法"></a>2.2.2    在持久层接口中添加查询方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据queryVo中的条件查询用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByVo</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-在用户的映射配置文件中配置"><a href="#2-2-3-在用户的映射配置文件中配置" class="headerlink" title="2.2.3    在用户的映射配置文件中配置"></a>2.2.3    在用户的映射配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据queryVo的条件查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByVo"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    where username like #&#123;user.userName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-在测试类添加测试"><a href="#2-2-4-在测试类添加测试" class="headerlink" title="2.2.4    在测试类添加测试"></a>2.2.4    在测试类添加测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试使用QueryVo作为查询条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByVo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"%王%"</span>);</span><br><span class="line">    vo.setUser(user);</span><br><span class="line">    <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findUserByVo(vo);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Mybatis-的输出结果封装"><a href="#3-Mybatis-的输出结果封装" class="headerlink" title="3.    Mybatis 的输出结果封装"></a>3.    Mybatis 的输出结果封装</h1><h2 id="3-1-resultType-配置结果类型"><a href="#3-1-resultType-配置结果类型" class="headerlink" title="3.1    resultType 配置结果类型"></a>3.1    resultType 配置结果类型</h2><p>resultType 属性可以指定结果集的类型，它支持基本类型和实体类类型。</p><p>它和 parameterType 一样，如果注册过类型别名的，可以直接使用别名。没有注册过的必须使用全限定类名。</p><h3 id="3-1-1-基本类型示例"><a href="#3-1-1-基本类型示例" class="headerlink" title="3.1.1    基本类型示例"></a>3.1.1    基本类型示例</h3><p>案例1.6</p><h3 id="3-1-2-实体类类型示例"><a href="#3-1-2-实体类类型示例" class="headerlink" title="3.1.2    实体类类型示例"></a>3.1.2    实体类类型示例</h3><p>案例1.1</p><h3 id="3-1-3-特殊情况示例"><a href="#3-1-3-特殊情况示例" class="headerlink" title="3.1.3    特殊情况示例"></a>3.1.3    特殊情况示例</h3><h4 id="3-1-3-1-修改实体类"><a href="#3-1-3-1-修改实体类" class="headerlink" title="3.1.3.1    修改实体类"></a>3.1.3.1    修改实体类</h4><p>实体类属性和数据库表的列名已经不一致</p><h4 id="3-1-3-2-修改映射配置"><a href="#3-1-3-2-修改映射配置" class="headerlink" title="3.1.3.2    修改映射配置"></a>3.1.3.2    修改映射配置</h4><p>使用别名查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">    select id as userId, username as userName, address as userAddress, sex as userSex, birthday as userBirthday</span><br><span class="line">    from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-resultMap-结果类型"><a href="#3-2-resultMap-结果类型" class="headerlink" title="3.2    resultMap 结果类型"></a>3.2    resultMap 结果类型</h2><p>resultMap 标签可以建立查询的列名和实体类的属性名称不一致时建立对应关系。从而实现封装。</p><p>在 select 标签中使用 resultMap 属性指定引用即可。同时 resultMap 可以实现将查询结果映射为复杂类型的 pojo，比如在查询结果映射对象中包括 pojo 和 list 实现一对一查询和一对多查询。</p><h3 id="3-2-1-定义-resultMap"><a href="#3-2-1-定义-resultMap" class="headerlink" title="3.2.1    定义 resultMap"></a>3.2.1    定义 resultMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 建立 User 实体和数据库表的对应关系</span><br><span class="line">    type 属性：指定实体类的全限定类名</span><br><span class="line">    id 属性：给定一个唯一标识，是给查询 select 标签引用用的。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;resultMap type&#x3D;&quot;com.wgy.domain.User&quot; id&#x3D;&quot;userMap&quot;&gt;</span><br><span class="line">    &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;userId&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;username&quot; property&#x3D;&quot;userName&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;sex&quot; property&#x3D;&quot;userSex&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;address&quot; property&#x3D;&quot;userAddress&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;birthday&quot; property&#x3D;&quot;userBirthday&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">id 标签：用于指定主键字段</span><br><span class="line">result 标签：用于指定非主键字段</span><br><span class="line">column 属性：用于指定数据库列名</span><br><span class="line">property 属性：用于指定实体类属性名称</span><br></pre></td></tr></table></figure><h3 id="3-2-2-映射配置"><a href="#3-2-2-映射配置" class="headerlink" title="3.2.2    映射配置"></a>3.2.2    映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-Mybatis-传统-DAO-层开发"><a href="#4-Mybatis-传统-DAO-层开发" class="headerlink" title="4.    Mybatis 传统 DAO 层开发"></a>4.    Mybatis 传统 DAO 层开发</h1><p>使用 Mybatis 开发 Dao，通常有两个方法，即原始 Dao开发方式和 Mapper 接口代理开发方式。而现在主流的开发方式是接口代理开发方式，这种方式总体上更加简便。</p><h2 id="4-1-Mybatis-实现-DAO-的传统开发方式"><a href="#4-1-Mybatis-实现-DAO-的传统开发方式" class="headerlink" title="4.1    Mybatis 实现 DAO 的传统开发方式"></a>4.1    Mybatis 实现 DAO 的传统开发方式</h2><h3 id="4-1-1-持久层-Dao-接口"><a href="#4-1-1-持久层-Dao-接口" class="headerlink" title="4.1.1    持久层 Dao 接口"></a>4.1.1    持久层 Dao 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Id删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称模糊查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总用户数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-持久层-Dao-实现类"><a href="#4-1-2-持久层-Dao-实现类" class="headerlink" title="4.1.2    持久层 Dao 实现类"></a>4.1.2    持久层 Dao 实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询列表</span></span><br><span class="line">        <span class="comment">//参数就是能获取配置信息的key</span></span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">"com.wgy.dao.IUserDao.findAll"</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用方法实现保存</span></span><br><span class="line">        session.insert(<span class="string">"com.wgy.dao.IUserDao.saveUser"</span>, user);</span><br><span class="line">        <span class="comment">//3.提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用方法实现更新</span></span><br><span class="line">        session.update(<span class="string">"com.wgy.dao.IUserDao.updateUser"</span>, user);</span><br><span class="line">        <span class="comment">//3.提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用方法实现更新</span></span><br><span class="line">        session.update(<span class="string">"com.wgy.dao.IUserDao.deleteUser"</span>, userId);</span><br><span class="line">        <span class="comment">//3.提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询一个</span></span><br><span class="line">        User user = session.selectOne(<span class="string">"com.wgy.dao.IUserDao.findById"</span>, userId);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询列表</span></span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">"com.wgy.dao.IUserDao.findByName"</span>, username);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据factory获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2.调用SqlSession中的方法，实现查询一个</span></span><br><span class="line">        Integer count = session.selectOne(<span class="string">"com.wgy.dao.IUserDao.findTotal"</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-持久层映射配置"><a href="#4-1-3-持久层映射配置" class="headerlink" title="4.1.3    持久层映射配置"></a>4.1.3    持久层映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">            select last_insert_id();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username, address, sex, birthday)</span><br><span class="line">        values (#&#123;username&#125;, #&#123;address&#125;, #&#123;sex&#125;, #&#123;birthday&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        set username=#&#123;username&#125;,</span><br><span class="line">            address=#&#123;address&#125;,</span><br><span class="line">            sex=#&#123;sex&#125;,</span><br><span class="line">            birthday=#&#123;birthday&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where username like #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 获取用户的总记录条数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select count(id)</span><br><span class="line">        from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-4-测试类"><a href="#4-1-4-测试类" class="headerlink" title="4.1.4    测试类"></a>4.1.4    测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试mybatis的crud操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span><span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂对象，创建dao对象</span></span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询所有方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试保存操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"dao impl user"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">"保存操作之前："</span> + user);</span><br><span class="line">        <span class="comment">//5.执行保存方法</span></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"保存操作之后："</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试更新操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">50</span>);</span><br><span class="line">        user.setUsername(<span class="string">"userdaoimpl update user"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"女"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行保存方法</span></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行删除方法</span></span><br><span class="line">        userDao.deleteUser(<span class="number">54</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        User user = userDao.findById(<span class="number">50</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模糊查询操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询总记录条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        <span class="keyword">int</span> count = userDao.findTotal();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-SqlMapConfig-xml-配置文件"><a href="#5-SqlMapConfig-xml-配置文件" class="headerlink" title="5.    SqlMapConfig.xml 配置文件"></a>5.    SqlMapConfig.xml 配置文件</h1><h2 id="5-1-配置内容"><a href="#5-1-配置内容" class="headerlink" title="5.1    配置内容"></a>5.1    配置内容</h2><h3 id="5-1-1-SqlMapConfig-xml-中配置的内容和顺序"><a href="#5-1-1-SqlMapConfig-xml-中配置的内容和顺序" class="headerlink" title="5.1.1    SqlMapConfig.xml 中配置的内容和顺序"></a>5.1.1    SqlMapConfig.xml 中配置的内容和顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-properties （属性）</span><br><span class="line">    --property</span><br><span class="line">-settings（全局配置参数）</span><br><span class="line">    --setting</span><br><span class="line">-typeAliases （类型别名）</span><br><span class="line">    --typeAliase</span><br><span class="line">    --package</span><br><span class="line">-typeHandlers（类型处理器）</span><br><span class="line">-objectFactory（对象工厂）</span><br><span class="line">-plugins（插件）</span><br><span class="line">-environments（环境集合属性对象）</span><br><span class="line">    --environment（环境子属性对象）</span><br><span class="line">    ---transactionManager（事务管理）</span><br><span class="line">    ---dataSource（数据源）</span><br><span class="line">-mappers （映射器）</span><br><span class="line">    --mapper</span><br><span class="line">    --package</span><br></pre></td></tr></table></figure><h2 id="5-2-properties（属性）"><a href="#5-2-properties（属性）" class="headerlink" title="5.2    properties（属性）"></a>5.2    properties（属性）</h2><p>在使用 properties 标签配置时，我们可以采用两种方式指定属性配置。</p><h3 id="5-2-1-第一种"><a href="#5-2-1-第一种" class="headerlink" title="5.2.1    第一种"></a>5.2.1    第一种</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-第二种"><a href="#5-2-2-第二种" class="headerlink" title="5.2.2    第二种"></a>5.2.2    第二种</h3><h4 id="5-2-2-1-在-classpath-下定义-db-properties"><a href="#5-2-2-1-在-classpath-下定义-db-properties" class="headerlink" title="5.2.2.1    在 classpath 下定义 db.properties"></a>5.2.2.1    在 classpath 下定义 db.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-2-properties-标签配置"><a href="#5-2-2-2-properties-标签配置" class="headerlink" title="5.2.2.2    properties 标签配置"></a>5.2.2.2    properties 标签配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置properties</span></span><br><span class="line"><span class="comment">    可以在标签内部配置连接数据库的信息。也可以通过属性引用外部配置文件信息</span></span><br><span class="line"><span class="comment">    resource属性： 常用的</span></span><br><span class="line"><span class="comment">    用于指定配置文件的位置，是按照类路径的写法来写，并且必须存在于类路径下。</span></span><br><span class="line"><span class="comment">        resource="db.properties"</span></span><br><span class="line"><span class="comment">    url属性：</span></span><br><span class="line"><span class="comment">    是要求按照Url的写法来写地址</span></span><br><span class="line"><span class="comment">    URL：Uniform Resource Locator 统一资源定位符。它是可以唯一标识一个资源的位置。</span></span><br><span class="line"><span class="comment">    它的写法：</span></span><br><span class="line"><span class="comment">            http://localhost:8080/mybatisserver/demo1Servlet</span></span><br><span class="line"><span class="comment">            协议      主机     端口       URI</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    URI:Uniform Resource Identifier 统一资源标识符。它是在应用中可以唯一定位一个资源的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">"file:///E:\MyIDEAWorkSpace\MyBatis\MyBatis05_CRUD\src\main\resources\db.properties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-dataSource-标签引用配置"><a href="#5-2-3-dataSource-标签引用配置" class="headerlink" title="5.2.3    dataSource  标签引用配置"></a>5.2.3    dataSource  标签引用配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-typeAliases（类型别名）"><a href="#5-3-typeAliases（类型别名）" class="headerlink" title="5.3    typeAliases（类型别名）"></a>5.3    typeAliases（类型别名）</h2><p>除了前面 Mybatis 支持的默认别名，也可以采用自定义别名方式来开发。</p><h3 id="5-3-1-自定义别名"><a href="#5-3-1-自定义别名" class="headerlink" title="5.3.1    自定义别名"></a>5.3.1    自定义别名</h3><p>在 SqlMapConfig.xml 中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.wgy.domain.User"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-4-mappers（映射器）"><a href="#5-4-mappers（映射器）" class="headerlink" title="5.4    mappers（映射器）"></a>5.4    mappers（映射器）</h2><h3 id="5-4-1-lt-mapper-resource-quot-quot-gt"><a href="#5-4-1-lt-mapper-resource-quot-quot-gt" class="headerlink" title="5.4.1    &lt;mapper resource=&quot; &quot; /&gt;"></a>5.4.1    <code>&lt;mapper resource=&quot; &quot; /&gt;</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用相对于类路径的资源</span><br><span class="line">如：<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/wgy/dao/IUserDao.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-2-lt-mapper-class-quot-quot-gt"><a href="#5-4-2-lt-mapper-class-quot-quot-gt" class="headerlink" title="5.4.2    &lt;mapper class=&quot; &quot; /&gt;"></a>5.4.2    <code>&lt;mapper class=&quot; &quot; /&gt;</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 mapper 接口类路径</span><br><span class="line">如：<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.UserDao"</span>/&gt;</span></span><br><span class="line">注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</span><br></pre></td></tr></table></figure><h3 id="5-4-3-lt-package-name-quot-quot-gt"><a href="#5-4-3-lt-package-name-quot-quot-gt" class="headerlink" title="5.4.3    &lt;package name=&quot;&quot;/&gt;"></a>5.4.3    <code>&lt;package name=&quot;&quot;/&gt;</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注册指定包下的所有 mapper 接口</span><br><span class="line">如：<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基于代理-Dao-实现-CRUD-操作&quot;&gt;&lt;a href=&quot;#1-基于代理-Dao-实现-CRUD-操作&quot; class=&quot;headerlink&quot; title=&quot;1.    基于代理 Dao 实现 CRUD 操作&quot;&gt;&lt;/a&gt;1.    基于代理 Dao 实现 CRUD 操作&lt;/h1&gt;&lt;p&gt;使用要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;持久层接口和持久层接口的映射配置必须在相同的包下&lt;/li&gt;
&lt;li&gt;持久层映射配置中 mapper 标签的 namespace 属性取值必须是持久层接口的全限定类名&lt;/li&gt;
&lt;li&gt;SQL 语句的配置标签&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;insert&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;delete&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;update&amp;gt;&lt;/code&gt;的 id 属性必须和持久层接口的方法名相同。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(一)</title>
    <link href="https://wgy1993.gitee.io/archives/2073aa6b.html"/>
    <id>https://wgy1993.gitee.io/archives/2073aa6b.html</id>
    <published>2020-06-20T07:25:51.000Z</published>
    <updated>2020-06-25T07:35:22.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-单独使用jdbc编程问题总结"><a href="#1-单独使用jdbc编程问题总结" class="headerlink" title="1.    单独使用jdbc编程问题总结"></a>1.    单独使用jdbc编程问题总结</h1><h2 id="1-1-jdbc编程步骤"><a href="#1-1-jdbc编程步骤" class="headerlink" title="1.1    jdbc编程步骤"></a>1.1    jdbc编程步骤</h2><ol><li>加载数据库驱动</li><li>创建并获取数据库链接</li><li>创建jdbc statement对象</li><li>设置sql语句</li><li>设置sql语句中的参数(使用preparedStatement)</li><li>通过statement执行sql并获取结果</li><li>对sql执行结果进行解析处理</li><li>释放资源(resultSet、preparedstatement、connection)</li></ol><a id="more"></a><h2 id="1-2-jdbc程序"><a href="#1-2-jdbc程序" class="headerlink" title="1.2    jdbc程序"></a>1.2    jdbc程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//加载数据库驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">        connection =  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">//定义sql语句 ?表示占位符</span></span><br><span class="line">        String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line">        <span class="comment">//获取预处理statement</span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">//向数据库发出sql执行查询，查询出结果集</span></span><br><span class="line">        resultSet =  preparedStatement.executeQuery();</span><br><span class="line">        <span class="comment">//遍历查询结果集</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"  "</span>+resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preparedStatement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边使用jdbc的原始方法（未经封装）实现了查询数据库表记录的操作。</p><h2 id="1-3-jdbc问题总结如下"><a href="#1-3-jdbc问题总结如下" class="headerlink" title="1.3    jdbc问题总结如下"></a>1.3    jdbc问题总结如下</h2><p>1、数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</p><p>设想：使用数据库连接池管理数据库连接。</p><p>2、将sql语句硬编码到java代码中，如果sql 语句修改，需要重新编译java代码，不利于系统维护。</p><p>设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。</p><p>3、向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护。</p><p>设想：将sql语句及占位符号和参数全部配置在xml中。</p><p>4、从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，，不利于系统维护。</p><p>设想：将查询的结果集，自动映射成java对象。</p><h1 id="2-MyBatis框架"><a href="#2-MyBatis框架" class="headerlink" title="2.    MyBatis框架"></a>2.    MyBatis框架</h1><h2 id="2-1-MyBatis是什么？"><a href="#2-1-MyBatis是什么？" class="headerlink" title="2.1    MyBatis是什么？"></a>2.1    MyBatis是什么？</h2><p>mybatis是一个持久层的框架，它对jdbc的操作数据库的过程进行封装，不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。是apache下的顶级项目。</p><p>mybatis托管到goolecode下，再后来托管到github下(<a href="https://github.com/mybatis/mybatis-3/releases)。" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases)。</a></p><p>mybatis让程序将主要精力放在sql上，通过mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql）满足需要sql语句。</p><p>mybatis可以将向 preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象。（输出映射）</p><h2 id="2-2-MyBatis框架"><a href="#2-2-MyBatis框架" class="headerlink" title="2.2    MyBatis框架"></a>2.2    MyBatis框架</h2><p><img src="https://ae01.alicdn.com/kf/Hc8547b18c502449d9e9605ef5eecb945M.jpg" alt="image-20200625112335030"></p><h2 id="2-3-与hibernate不同"><a href="#2-3-与hibernate不同" class="headerlink" title="2.3    与hibernate不同"></a>2.3    与hibernate不同</h2><p>Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句，不过mybatis可以通过XML或注解方式灵活配置要运行的sql语句，并将java对象和sql语句映射生成最终执行的sql，最后将sql执行的结果再映射生成java对象。</p><p>Mybatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一但需求变化要求成果输出迅速。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大。</p><p>Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的学习门槛高，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。</p><p>总之，按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好的软件架构都是好架构，所以框架只有适合才是最好。 </p><h2 id="2-4-Mybatis与iBatis的主要差异对比"><a href="#2-4-Mybatis与iBatis的主要差异对比" class="headerlink" title="2.4    Mybatis与iBatis的主要差异对比"></a>2.4    Mybatis与iBatis的主要差异对比</h2><p>他们都是优秀的持久层框架，MyBatis是现在最常用的持久层框架，可以动态地拼接sql语句，非常人性化，更适合编辑复杂的sql；iBatis就是MyBatis前身，他们有很多相似的地方</p><p>1、传入参数</p><p>iBatis是parameterClass，而MyBatis是可以不写的，也可以用parameterType,parameterClass</p><p>iBatis的传出参数关键字是resultClass，而MyBatis是resultMap</p><p>2、判断语句</p><p>对于MyBatis的很简单，只要在where或者if标签里面添加test=“”就可以了，里面写判断条件。</p><p>但是iBatis的就麻烦了许多了，它将每个方法都进行了封装。例如isNull：判断字段是否为null</p><p>3、循环的使用</p><p>iBatis是使用Iterate，而MyBatis使用的是ForEach方法</p><p>4、MyBatis实现了DAO接口与xml映射文件的绑定，使用更加方便</p><h1 id="3-MyBatis-框架快速入门"><a href="#3-MyBatis-框架快速入门" class="headerlink" title="3.    MyBatis 框架快速入门"></a>3.    MyBatis 框架快速入门</h1><h2 id="3-1-Mybatis-框架开发的准备"><a href="#3-1-Mybatis-框架开发的准备" class="headerlink" title="3.1    Mybatis  框架开发的准备"></a>3.1    Mybatis  框架开发的准备</h2><h3 id="3-1-1-官网下载-Mybatis-框架"><a href="#3-1-1-官网下载-Mybatis-框架" class="headerlink" title="3.1.1    官网下载 Mybatis  框架"></a>3.1.1    官网下载 Mybatis  框架</h3><p>从百度中“mybatis download”可以下载最新的 Mybatis 开发包。<a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/</a></p><p><img src="https://ae01.alicdn.com/kf/H5c24786d0038462ea19ae8dbc650be088.jpg" alt="image-20200625113946413"></p><p>进入选择语言的界面，进入中文版本的开发文档。</p><p><img src="https://ae01.alicdn.com/kf/H24d2713884b74dcd93d65664b22faa56t.jpg" alt="image-20200625114008670"></p><p>下载相关的 jar 包或 maven 开发的坐标。</p><p><img src="https://ae01.alicdn.com/kf/H399072c1d6c64ee09b52c553df5d3b27y.jpg" alt="image-20200625114028795"></p><h2 id="3-2-搭建-Mybatis-开发环境"><a href="#3-2-搭建-Mybatis-开发环境" class="headerlink" title="3.2    搭建 Mybatis 开发环境"></a>3.2    搭建 Mybatis 开发环境</h2><h3 id="3-2-1-创建-maven-工程"><a href="#3-2-1-创建-maven-工程" class="headerlink" title="3.2.1     创建 maven  工程"></a>3.2.1     创建 maven  工程</h3><p>创建 MyBatis01 的工程，工程信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBatis01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-添加-Mybatis3-4-5-的坐标"><a href="#3-2-2-添加-Mybatis3-4-5-的坐标" class="headerlink" title="3.2.2    添加 Mybatis3.4.5 的坐标"></a>3.2.2    添加 Mybatis3.4.5 的坐标</h3><p>在 pom.xml 文件中添加 Mybatis3.4.5 的坐标，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-log4j-properties"><a href="#3-2-3-log4j-properties" class="headerlink" title="3.2.3    log4j.properties"></a>3.2.3    log4j.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console</span></span><br><span class="line"><span class="meta">log4j.additivity.org.apache</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 控制台(console)</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.ImmediateFlush</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写-User-实体类"><a href="#3-2-4-编写-User-实体类" class="headerlink" title="3.2.4    编写 User  实体类"></a>3.2.4    编写 User  实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-编写持久层口接口-IUserDao"><a href="#3-2-5-编写持久层口接口-IUserDao" class="headerlink" title="3.2.5    编写持久层口接口 IUserDao"></a>3.2.5    编写持久层口接口 IUserDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-编写持久层接口的件映射文件-IUserDao-xml"><a href="#3-2-6-编写持久层接口的件映射文件-IUserDao-xml" class="headerlink" title="3.2.6    编写持久层接口的件映射文件 IUserDao.xml"></a>3.2.6    编写持久层接口的件映射文件 IUserDao.xml</h3><p>创建位置：必须和持久层接口在相同的包中。<br>名称：必须以持久层接口名称命名文件名，扩展名是.xml</p><p><img src="https://ae01.alicdn.com/kf/H5bae1d80c12045eaab7a85fb20f77a90v.jpg" alt="image-20200625115818888"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.wgy.dao.IUserDao&quot;&gt;</span><br><span class="line">    &lt;!--配置查询所有--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;com.wgy.domain.User&quot;&gt;</span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-7-编写-SqlMapConfig-xml"><a href="#3-2-7-编写-SqlMapConfig-xml" class="headerlink" title="3.2.7    编写 SqlMapConfig.xml"></a>3.2.7    编写 SqlMapConfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!-- mybatis的主配置文件 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 配置环境 --&gt;</span><br><span class="line">    &lt;environments default&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">        &lt;!-- 配置mysql的环境--&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">            &lt;!-- 配置事务的类型--&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!-- 配置数据源（连接池） --&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;!-- 配置连接数据库的4个基本信息 --&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;com&#x2F;wgy&#x2F;dao&#x2F;IUserDao.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-8-编写测试类"><a href="#3-2-8-编写测试类" class="headerlink" title="3.2.8    编写测试类"></a>3.2.8    编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis的入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-基于注解的-mybatis-使用"><a href="#3-3-基于注解的-mybatis-使用" class="headerlink" title="3.3    基于注解的 mybatis 使用"></a>3.3    基于注解的 mybatis 使用</h2><h3 id="3-3-1-在持久层接口中添加注解"><a href="#3-3-1-在持久层接口中添加注解" class="headerlink" title="3.3.1    在持久层接口中添加注解"></a>3.3.1    在持久层接口中添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-修改-SqlMapConfig-xml"><a href="#3-3-2-修改-SqlMapConfig-xml" class="headerlink" title="3.3.2    修改 SqlMapConfig.xml"></a>3.3.2    修改 SqlMapConfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件</span><br><span class="line">    如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class&#x3D;&quot;com.wgy.dao.IUserDao&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>注意事项：在使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（IUserDao.xml） 。</p><h1 id="4-自定义-Mybatis-框架"><a href="#4-自定义-Mybatis-框架" class="headerlink" title="4.    自定义 Mybatis 框架"></a>4.    自定义 Mybatis 框架</h1><h2 id="4-1-自定义-Mybatis-框架的分析"><a href="#4-1-自定义-Mybatis-框架的分析" class="headerlink" title="4.1    自定义 Mybatis  框架的分析"></a>4.1    自定义 Mybatis  框架的分析</h2><h3 id="4-1-1-涉及知识点介绍"><a href="#4-1-1-涉及知识点介绍" class="headerlink" title="4.1.1    涉及知识点介绍"></a>4.1.1    涉及知识点介绍</h3><p>构建一个属于自己的持久层框架，将会涉及到的一些知识点：工厂模式（Factory 工厂模式） 、构造者模式（Builder 模式）、代理模式，反射，自定义注解，注解的反射，xml 解析，数据库元数据，元数据的反射等。</p><h3 id="4-1-2-分析流程"><a href="#4-1-2-分析流程" class="headerlink" title="4.1.2    分析流程"></a>4.1.2    分析流程</h3><p><img src="https://ae01.alicdn.com/kf/He454d414dab74f23acb0d9004a07f56ar.jpg" alt="image-20200625143454304"></p><p><img src="https://ae01.alicdn.com/kf/H400748eb4d05476bbcc2d124504b0be53.jpg" alt="image-20200625143533102"></p><p><img src="https://ae01.alicdn.com/kf/H5fe9323241ef46e7892f90d87a41302aT.jpg" alt="image-20200625143552725"></p><h2 id="4-2-前期准备"><a href="#4-2-前期准备" class="headerlink" title="4.2    前期准备"></a>4.2    前期准备</h2><h3 id="4-2-1-创建-Maven-工程"><a href="#4-2-1-创建-Maven-工程" class="headerlink" title="4.2.1    创建 Maven 工程"></a>4.2.1    创建 Maven 工程</h3><p>创建 MyBatis04_Design 的工程，工程信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBatis04_Design<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-引入相关坐标"><a href="#4-2-2-引入相关坐标" class="headerlink" title="4.2.2    引入相关坐标"></a>4.2.2    引入相关坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解析 xml 的 dom4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dom4j 的依赖包 jaxen --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-引入-工具类到项目中"><a href="#4-2-3-引入-工具类到项目中" class="headerlink" title="4.2.3    引入 工具类到项目中"></a>4.2.3    引入 工具类到项目中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于解析配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLConfigBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析主配置文件，把里面的内容填充到DefaultSqlSession所需要的地方</span></span><br><span class="line"><span class="comment">     * 使用的技术：</span></span><br><span class="line"><span class="comment">     * dom4j+xpath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Configuration <span class="title">loadConfiguration</span><span class="params">(InputStream config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//定义封装连接信息的配置对象（mybatis的配置对象）</span></span><br><span class="line">            Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取SAXReader对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取Document对象</span></span><br><span class="line">            Document document = reader.read(config);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.使用xpath中选择指定节点的方式，获取所有property节点</span></span><br><span class="line">            List&lt;Element&gt; propertyElements = root.selectNodes(<span class="string">"//property"</span>);</span><br><span class="line">            <span class="comment">//5.遍历节点</span></span><br><span class="line">            <span class="keyword">for</span> (Element propertyElement : propertyElements) &#123;</span><br><span class="line">                <span class="comment">//判断节点是连接数据库的哪部分信息</span></span><br><span class="line">                <span class="comment">//取出name属性的值</span></span><br><span class="line">                String name = propertyElement.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"driver"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示驱动</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String driver = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setDriver(driver);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"url"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示连接字符串</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String url = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setUrl(url);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"username"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示用户名</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String username = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setUsername(username);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"password"</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示密码</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String password = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setPassword(password);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出mappers中的所有mapper标签，判断他们使用了resource还是class属性</span></span><br><span class="line">            List&lt;Element&gt; mapperElements = root.selectNodes(<span class="string">"//mappers/mapper"</span>);</span><br><span class="line">            <span class="comment">//遍历集合</span></span><br><span class="line">            <span class="keyword">for</span> (Element mapperElement : mapperElements) &#123;</span><br><span class="line">                <span class="comment">//判断mapperElement使用的是哪个属性</span></span><br><span class="line">                Attribute attribute = mapperElement.attribute(<span class="string">"resource"</span>);</span><br><span class="line">                <span class="keyword">if</span> (attribute != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"使用的是XML"</span>);</span><br><span class="line">                    <span class="comment">//表示有resource属性，用的是XML</span></span><br><span class="line">                    <span class="comment">//取出属性的值</span></span><br><span class="line">                    <span class="comment">//获取属性的值"com/wgy/dao/IUserDao.xml"</span></span><br><span class="line">                    String mapperPath = attribute.getValue();</span><br><span class="line">                    <span class="comment">//把映射配置文件的内容获取出来，封装成一个map</span></span><br><span class="line">                    Map&lt;String, Mapper&gt; mappers = loadMapperConfiguration(mapperPath);</span><br><span class="line">                    <span class="comment">//给configuration中的mappers赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"使用的是注解"</span>);</span><br><span class="line">                    <span class="comment">//表示没有resource属性，用的是注解</span></span><br><span class="line">                    <span class="comment">//获取class属性的值</span></span><br><span class="line">                    String daoClassPath = mapperElement.attributeValue(<span class="string">"class"</span>);</span><br><span class="line">                    <span class="comment">//根据daoClassPath获取封装的必要信息</span></span><br><span class="line">                    Map&lt;String, Mapper&gt; mappers = loadMapperAnnotation(daoClassPath);</span><br><span class="line">                    <span class="comment">//给configuration中的mappers赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回Configuration</span></span><br><span class="line">            <span class="keyword">return</span> cfg;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                config.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，解析XML，并且封装到Map中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapperPath 映射配置文件的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map中包含了获取的唯一标识（key是由dao的全限定类名和方法名组成）</span></span><br><span class="line"><span class="comment">     * 以及执行所需的必要信息（value是一个Mapper对象，里面存放的是执行的SQL语句和要封装的实体类全限定类名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Mapper&gt; <span class="title">loadMapperConfiguration</span><span class="params">(String mapperPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//定义返回值对象</span></span><br><span class="line">            Map&lt;String, Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line">            <span class="comment">//1.根据路径获取字节输入流</span></span><br><span class="line">            in = Resources.getResourceAsStream(mapperPath);</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取Document对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(in);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.获取根节点的namespace属性取值</span></span><br><span class="line">            <span class="comment">//是组成map中key的部分</span></span><br><span class="line">            String namespace = root.attributeValue(<span class="string">"namespace"</span>);</span><br><span class="line">            <span class="comment">//5.获取所有的select节点</span></span><br><span class="line">            List&lt;Element&gt; selectElements = root.selectNodes(<span class="string">"//select"</span>);</span><br><span class="line">            <span class="comment">//6.遍历select节点集合</span></span><br><span class="line">            <span class="keyword">for</span> (Element selectElement : selectElements) &#123;</span><br><span class="line">                <span class="comment">//取出id属性的值      组成map中key的部分</span></span><br><span class="line">                String id = selectElement.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                <span class="comment">//取出resultType属性的值  组成map中value的部分</span></span><br><span class="line">                String resultType = selectElement.attributeValue(<span class="string">"resultType"</span>);</span><br><span class="line">                <span class="comment">//取出文本内容            组成map中value的部分</span></span><br><span class="line">                String queryString = selectElement.getText();</span><br><span class="line">                <span class="comment">//创建Key</span></span><br><span class="line">                String key = namespace + <span class="string">"."</span> + id;</span><br><span class="line">                <span class="comment">//创建Value</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                mapper.setResultType(resultType);</span><br><span class="line">                <span class="comment">//把key和value存入mappers中</span></span><br><span class="line">                mappers.put(key, mapper);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mappers;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，得到dao中所有被select注解标注的方法。</span></span><br><span class="line"><span class="comment">     * 根据方法名称和类名，以及方法上注解value属性的值，组成Mapper的必要信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoClassPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Mapper&gt; <span class="title">loadMapperAnnotation</span><span class="params">(String daoClassPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义返回值对象</span></span><br><span class="line">        Map&lt;String, Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.得到dao接口的字节码对象</span></span><br><span class="line">        Class daoClass = Class.forName(daoClassPath);</span><br><span class="line">        <span class="comment">//2.得到dao接口中的方法数组</span></span><br><span class="line">        Method[] methods = daoClass.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历Method数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//取出每一个方法，判断是否有select注解</span></span><br><span class="line">            <span class="keyword">boolean</span> isAnnotated = method.isAnnotationPresent(Select<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (isAnnotated) &#123;</span><br><span class="line">                <span class="comment">//创建Mapper对象</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                <span class="comment">//取出注解的value属性值</span></span><br><span class="line">                Select selectAnno = method.getAnnotation(Select<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String queryString = selectAnno.value();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                <span class="comment">//获取当前方法的返回值，还要求必须带有泛型信息</span></span><br><span class="line">                <span class="comment">//List&lt;User&gt;</span></span><br><span class="line">                Type type = method.getGenericReturnType();</span><br><span class="line">                <span class="comment">//判断type是不是参数化的类型</span></span><br><span class="line">                <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                    <span class="comment">//强转</span></span><br><span class="line">                    ParameterizedType ptype = (ParameterizedType) type;</span><br><span class="line">                    <span class="comment">//得到参数化类型中的实际类型参数</span></span><br><span class="line">                    Type[] types = ptype.getActualTypeArguments();</span><br><span class="line">                    <span class="comment">//取出第一个</span></span><br><span class="line">                    Class domainClass = (Class) types[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">//获取domainClass的类名</span></span><br><span class="line">                    String resultType = domainClass.getName();</span><br><span class="line">                    <span class="comment">//给Mapper赋值</span></span><br><span class="line">                    mapper.setResultType(resultType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//组装key的信息</span></span><br><span class="line">                <span class="comment">//获取方法的名称</span></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                String className = method.getDeclaringClass().getName();</span><br><span class="line">                String key = className + <span class="string">"."</span> + methodName;</span><br><span class="line">                <span class="comment">//给map赋值</span></span><br><span class="line">                mappers.put(key, mapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 责执行SQL语句，并且封装结果集</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(Mapper mapper, Connection conn)</span> </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.取出mapper中的数据</span></span><br><span class="line">            <span class="comment">//select * from user</span></span><br><span class="line">            String queryString = mapper.getQueryString();</span><br><span class="line">            <span class="comment">//com.wgy.domain.User</span></span><br><span class="line">            String resultType = mapper.getResultType();</span><br><span class="line">            Class domainClass = Class.forName(resultType);</span><br><span class="line">            <span class="comment">//2.获取PreparedStatement对象</span></span><br><span class="line">            pstm = conn.prepareStatement(queryString);</span><br><span class="line">            <span class="comment">//3.执行SQL语句，获取结果集</span></span><br><span class="line">            rs = pstm.executeQuery();</span><br><span class="line">            <span class="comment">//4.封装结果集</span></span><br><span class="line">            <span class="comment">//定义返回值</span></span><br><span class="line">            List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">//实例化要封装的实体类对象</span></span><br><span class="line">                E obj = (E) domainClass.newInstance();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//取出结果集的元信息：ResultSetMetaData</span></span><br><span class="line">                ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">                <span class="comment">//取出总列数</span></span><br><span class="line">                <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">                <span class="comment">//遍历总列数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">//获取每列的名称，列名的序号是从1开始的</span></span><br><span class="line">                    String columnName = rsmd.getColumnName(i);</span><br><span class="line">                    <span class="comment">//根据得到列名，获取每列的值</span></span><br><span class="line">                    Object columnValue = rs.getObject(columnName);</span><br><span class="line">                    <span class="comment">//给obj赋值：使用Java内省机制（借助PropertyDescriptor实现属性的封装）</span></span><br><span class="line">                    <span class="comment">//要求：实体类的属性和数据库表的列名保持一种</span></span><br><span class="line">                    PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(columnName, domainClass);</span><br><span class="line">                    <span class="comment">//获取它的写入方法</span></span><br><span class="line">                    Method writeMethod = pd.getWriteMethod();</span><br><span class="line">                    <span class="comment">//把获取的列的值，给对象赋值</span></span><br><span class="line">                    writeMethod.invoke(obj, columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//把赋好值的对象加入到集合中</span></span><br><span class="line">                list.add(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            release(pstm, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(PreparedStatement pstm, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pstm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pstm.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建数据源的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于获取一个连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(cfg.getDriver());</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(cfg.getUrl(), cfg.getUsername(), cfg.getPassword());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-4-编写-SqlMapConfig-xml"><a href="#4-2-4-编写-SqlMapConfig-xml" class="headerlink" title="4.2.4    编写 SqlMapConfig.xml"></a>4.2.4    编写 SqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/wgy/dao/IUserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：此处我们直接使用的是 mybatis 的配置文件，但是由于我们没有使用 mybatis 的 jar 包，所以要把配置文件的约束删掉否则会报错（如果电脑能接入互联网，不删也行）</p><h3 id="4-2-5-编写读取配置文件类"><a href="#4-2-5-编写读取配置文件类" class="headerlink" title="4.2.5    编写读取配置文件类"></a>4.2.5    编写读取配置文件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用类加载器读取配置文件的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resources</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，获取一个字节输入流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Resources<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResourceAsStream</span>(<span class="title">filePath</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-6-编写-Mapper-类"><a href="#4-2-6-编写-Mapper-类" class="headerlink" title="4.2.6    编写 Mapper 类"></a>4.2.6    编写 Mapper 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于封装执行的SQL语句和结果类型的全限定类名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL</span></span><br><span class="line">    <span class="keyword">private</span> String queryString;</span><br><span class="line">    <span class="comment">//实体类的全限定类名</span></span><br><span class="line">    <span class="keyword">private</span> String resultType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQueryString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queryString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryString</span><span class="params">(String queryString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queryString = queryString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultType</span><span class="params">(String resultType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultType = resultType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-7-编写-Configuration-配置类"><a href="#4-2-7-编写-Configuration-配置类" class="headerlink" title="4.2.7    编写 Configuration 配置类"></a>4.2.7    编写 Configuration 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义mybatis的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Mapper&gt; <span class="title">getMappers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMappers</span><span class="params">(Map&lt;String, Mapper&gt; mappers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处需要使用追加的方式</span></span><br><span class="line">        <span class="keyword">this</span>.mappers.putAll(mappers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-8-编写-User-实体类"><a href="#4-2-8-编写-User-实体类" class="headerlink" title="4.2.8    编写 User  实体类"></a>4.2.8    编写 User  实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-基于-XML-的自定义-mybatis-框架"><a href="#4-3-基于-XML-的自定义-mybatis-框架" class="headerlink" title="4.3    基于 XML  的自定义 mybatis  框架"></a>4.3    基于 XML  的自定义 mybatis  框架</h2><h3 id="4-3-1-编写持久层接口和-IUserDao-xml"><a href="#4-3-1-编写持久层接口和-IUserDao-xml" class="headerlink" title="4.3.1    编写持久层接口和 IUserDao.xml"></a>4.3.1    编写持久层接口和 IUserDao.xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.domain.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：此处我们使用的也是 mybatis 的配置文件，所以也要把约束删除了</p><h3 id="4-3-2-编写构建者类"><a href="#4-3-2-编写构建者类" class="headerlink" title="4.3.2    编写构建者类"></a>4.3.2    编写构建者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建一个SqlSessionFactory对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数的字节输入流来构建一个SqlSessionFactory工厂</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream config)</span> </span>&#123;</span><br><span class="line">        Configuration cfg = XMLConfigBuilder.loadConfiguration(config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-编写-SqlSessionFactory-接口和实现类"><a href="#4-3-3-编写-SqlSessionFactory-接口和实现类" class="headerlink" title="4.3.3    编写 SqlSessionFactory 接口和实现类"></a>4.3.3    编写 SqlSessionFactory 接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于打开一个新的SqlSession对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSessionFactory接口的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSessionFactory</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建一个新的操作数据库对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-编写-SqlSession-接口和实现类"><a href="#4-3-4-编写-SqlSession-接口和实现类" class="headerlink" title="4.3.4    编写 SqlSession  接口和实现类"></a>4.3.4    编写 SqlSession  接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Mybatis中和数据库交互的核心类</span></span><br><span class="line"><span class="comment"> * 它里面可以创建dao接口的代理对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数创建一个代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoInterfaceClass dao的接口字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoInterfaceClass)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSession接口的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSession</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">        connection = DataSourceUtil.getConnection(cfg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoInterfaceClass dao的接口字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoInterfaceClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(daoInterfaceClass.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;daoInterfaceClass&#125;, <span class="keyword">new</span> MapperProxy(cfg.getMappers(), connection));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-编写用于创建-Dao-接口代理对象的类"><a href="#4-3-5-编写用于创建-Dao-接口代理对象的类" class="headerlink" title="4.3.5    编写用于创建 Dao 接口代理对象的类"></a>4.3.5    编写用于创建 Dao 接口代理对象的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map的key是全限定类名+方法名</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Mapper&gt; mappers;</span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperProxy</span><span class="params">(Map&lt;String, Mapper&gt; mappers, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappers = mappers;</span><br><span class="line">        <span class="keyword">this</span>.conn = conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于对方法进行增强的，我们的增强其实就是调用selectList方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取方法名</span></span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="comment">//2.获取方法所在类的名称</span></span><br><span class="line">        String className = method.getDeclaringClass().getName();</span><br><span class="line">        <span class="comment">//3.组合key</span></span><br><span class="line">        String key = className + <span class="string">"."</span> + methodName;</span><br><span class="line">        <span class="comment">//4.获取mappers中的Mapper对象</span></span><br><span class="line">        Mapper mapper = mappers.get(key);</span><br><span class="line">        <span class="comment">//5.判断是否有mapper</span></span><br><span class="line">        <span class="keyword">if</span> (mapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"传入的参数有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.调用工具类执行查询所有</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Executor().selectList(mapper, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-6-运行测试类"><a href="#4-3-6-运行测试类" class="headerlink" title="4.3.6    运行测试类"></a>4.3.6    运行测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis的入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-基于注解方式定义-Mybatis-框架"><a href="#4-4-基于注解方式定义-Mybatis-框架" class="headerlink" title="4.4    基于注解方式定义 Mybatis  框架"></a>4.4    基于注解方式定义 Mybatis  框架</h2><h3 id="4-4-1-自定义-Select-注解"><a href="#4-4-1-自定义-Select-注解" class="headerlink" title="4.4.1    自定义@Select 注解"></a>4.4.1    自定义@Select 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询的注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Select &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置SQL语句的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-修改持久层接口"><a href="#4-4-2-修改持久层接口" class="headerlink" title="4.4.2    修改持久层接口"></a>4.4.2    修改持久层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-修改-SqlMapConfig-xml"><a href="#4-4-3-修改-SqlMapConfig-xml" class="headerlink" title="4.4.3    修改 SqlMapConfig.xml"></a>4.4.3    修改 SqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.IUserDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-单独使用jdbc编程问题总结&quot;&gt;&lt;a href=&quot;#1-单独使用jdbc编程问题总结&quot; class=&quot;headerlink&quot; title=&quot;1.    单独使用jdbc编程问题总结&quot;&gt;&lt;/a&gt;1.    单独使用jdbc编程问题总结&lt;/h1&gt;&lt;h2 id=&quot;1-1-jdbc编程步骤&quot;&gt;&lt;a href=&quot;#1-1-jdbc编程步骤&quot; class=&quot;headerlink&quot; title=&quot;1.1    jdbc编程步骤&quot;&gt;&lt;/a&gt;1.1    jdbc编程步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;加载数据库驱动&lt;/li&gt;
&lt;li&gt;创建并获取数据库链接&lt;/li&gt;
&lt;li&gt;创建jdbc statement对象&lt;/li&gt;
&lt;li&gt;设置sql语句&lt;/li&gt;
&lt;li&gt;设置sql语句中的参数(使用preparedStatement)&lt;/li&gt;
&lt;li&gt;通过statement执行sql并获取结果&lt;/li&gt;
&lt;li&gt;对sql执行结果进行解析处理&lt;/li&gt;
&lt;li&gt;释放资源(resultSet、preparedstatement、connection)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="ORM" scheme="https://wgy1993.gitee.io/tags/ORM/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Maven(三)</title>
    <link href="https://wgy1993.gitee.io/archives/898b4292.html"/>
    <id>https://wgy1993.gitee.io/archives/898b4292.html</id>
    <published>2020-06-18T16:03:44.000Z</published>
    <updated>2020-06-22T16:07:14.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-maven-私服"><a href="#1-maven-私服" class="headerlink" title="1.    maven  私服"></a>1.    maven  私服</h1><h2 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1    需求"></a>1.1    需求</h2><p>正式开发，不同的项目组开发不同的工程。</p><p>ssm_dao  工程开发完毕，发布到私服。</p><p>ssm_service 从私服下载 dao</p><a id="more"></a><h2 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2    分析"></a>1.2    分析</h2><p>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服，私服服务器即是公司内部的 maven 远程仓库，每个员工的电脑上安装 maven 软件并且连接私服服务器，员工将自己开发的项目打成 jar 并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（jar）。</p><p>私服还充当一个代理服务器，当私服上没有 jar 包会从互联网中央仓库自动下载，如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hf6d137d93d4243d98b03b5f4454979c4f.jpg" alt="image-20200622223516203"></p><h2 id="1-3-搭建私服环境"><a href="#1-3-搭建私服环境" class="headerlink" title="1.3    搭建私服环境"></a>1.3    搭建私服环境</h2><h3 id="1-3-1-下载-nexus"><a href="#1-3-1-下载-nexus" class="headerlink" title="1.3.1    下载 nexus"></a>1.3.1    下载 nexus</h3><p>Nexus 是 Maven 仓库管理器，通过 nexus 可以搭建 maven 仓库，同时 nexus 还提供强 大的仓库管理功能，构件搜索功能等。</p><p>下载 Nexus， 下载地址：<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">https://www.sonatype.com/download-oss-sonatype</a></p><p><img src="https://ae01.alicdn.com/kf/He85e1b83621c45bbb4988ccb9e7acd732.jpg" alt="image-20200622224900614"></p><h3 id="1-3-2-安装-nexus"><a href="#1-3-2-安装-nexus" class="headerlink" title="1.3.2     安装 nexus"></a>1.3.2     安装 nexus</h3><p>解压 nexus-2.12.0-01-bundle.zip，本教程将它解压在 F 盘，进入 bin 目录：</p><p><img src="https://ae01.alicdn.com/kf/He7a3e8baa92b4560bd0b1c9ff2bf041bS.jpg" alt="image-20200622224951199"></p><p>cmd进入 bin目录，执行 nexus.bat install</p><p><img src="https://ae01.alicdn.com/kf/Hf263300d9af8427bb76c1bb871c6e52aE.jpg" alt="image-20200622225009545"></p><p>安装成功在服务中查看有 nexus 服务：</p><p><img src="https://ae01.alicdn.com/kf/H71b88be8899b439daa5c6bec45d7f0a4T.jpg" alt="image-20200622225019659"></p><h3 id="1-3-3-卸载-nexus"><a href="#1-3-3-卸载-nexus" class="headerlink" title="1.3.3    卸载 nexus"></a>1.3.3    卸载 nexus</h3><p>cmd 进入 nexus 的 bin 目录，执行：nexus.bat uninstall</p><p><img src="https://ae01.alicdn.com/kf/H84ddd283496c4114a93469da2f6d539aY.jpg" alt="image-20200622225057654"></p><p>查看 window 服务列表 nexus 已被删除。</p><h3 id="1-3-4-启动-nexus"><a href="#1-3-4-启动-nexus" class="headerlink" title="1.3.4    启动 nexus"></a>1.3.4    启动 nexus</h3><p>方法 1：cmd 进入 bin 目录，执行 nexus.bat start</p><p>方法 2：直接启动 nexus 服务</p><p><img src="https://ae01.alicdn.com/kf/H64bae123c3a249c6949a394ccca8e692H.jpg" alt="image-20200622225149127"></p><h4 id="1-3-4-1-查看-nexus-的配置文件"><a href="#1-3-4-1-查看-nexus-的配置文件" class="headerlink" title="1.3.4.1    查看 nexus 的配置文件"></a>1.3.4.1    查看 nexus 的配置文件</h4><p>conf/nexus.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jetty section</span></span><br><span class="line"><span class="meta">application-port</span>=<span class="string">8081# nexus 的访问端口配置 </span></span><br><span class="line"><span class="meta">application-host</span>=<span class="string">0.0.0.0# nexus 主机监听配置(不用修改) </span></span><br><span class="line"><span class="meta">nexus-webapp</span>=<span class="string">$&#123;bundleBasedir&#125;/nexus# nexus 工程目录 </span></span><br><span class="line"><span class="meta">nexus-webapp-context-path</span>=<span class="string">/nexus# nexus 的 web 访问路径</span></span><br><span class="line"><span class="comment"># Nexus section</span></span><br><span class="line"><span class="meta">nexus-work</span>=<span class="string">$&#123;bundleBasedir&#125;/../sonatype-work/nexus# nexus 仓库目录</span></span><br><span class="line"><span class="attr">runtime</span>=<span class="string">$&#123;bundleBasedir&#125;/nexus/WEB-INF# nexus 运行程序目录</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-2-访问"><a href="#1-3-4-2-访问" class="headerlink" title="1.3.4.2    访问"></a>1.3.4.2    访问</h4><p><a href="http://localhost:8081/nexus/" target="_blank" rel="noopener">http://localhost:8081/nexus/</a></p><p><img src="https://ae01.alicdn.com/kf/H4bad14b907d642cf9063f9995438431aU.jpg" alt="image-20200622225644507"></p><h4 id="1-3-4-3-使用-Nexus-内置账户登陆"><a href="#1-3-4-3-使用-Nexus-内置账户登陆" class="headerlink" title="1.3.4.3    使用 Nexus 内置账户登陆"></a>1.3.4.3    使用 Nexus 内置账户登陆</h4><p>点击右上角的 Log in，输入账号和密码登陆 admin/admin123</p><p><img src="https://ae01.alicdn.com/kf/H7af81e99f3a2417dbed4747a46b05630y.jpg" alt="image-20200622225720362"></p><p>登陆成功：</p><p><img src="https://ae01.alicdn.com/kf/H0cd66fb1258f4642a954072a9db9f48ep.jpg" alt="image-20200622225729597"></p><h3 id="1-3-5-仓库类型"><a href="#1-3-5-仓库类型" class="headerlink" title="1.3.5    仓库类型"></a>1.3.5    仓库类型</h3><h4 id="1-3-5-1-查看-nexus-的仓库"><a href="#1-3-5-1-查看-nexus-的仓库" class="headerlink" title="1.3.5.1    查看 nexus 的仓库"></a>1.3.5.1    查看 nexus 的仓库</h4><p><img src="https://ae01.alicdn.com/kf/H98941c25972f4a869ed7ebf71dcd7bf4w.jpg" alt="image-20200622225811553"></p><h4 id="1-3-5-2-nexus-的仓库有-4-种类型"><a href="#1-3-5-2-nexus-的仓库有-4-种类型" class="headerlink" title="1.3.5.2    nexus 的仓库有 4 种类型"></a>1.3.5.2    nexus 的仓库有 4 种类型</h4><p><img src="https://ae01.alicdn.com/kf/Hea19109a788d4a29923f6b69ea308a7bo.jpg" alt="image-20200622225902586"></p><p>1、hosted，宿主仓库，部署自己的 jar 到这个类型的仓库，包括 releases 和 snapshot 两部 分，Releases 公司内部发布版本仓库、 Snapshots 公司内部测试版本仓库</p><p>2、proxy，代理仓库，用于代理远程的公共仓库，如 maven  中央仓库，用户连接私服，私服自动去中央仓库下载 jar  包或者插件。</p><p>3、group，仓库组，用来合并多个 hosted/proxy 仓库，通常我们配置自己的 maven  连接仓库组。</p><p>4、virtual(虚拟)：兼容 Maven1 版本的 jar 或者插件</p><h4 id="1-3-5-3-nexus-仓库目录"><a href="#1-3-5-3-nexus-仓库目录" class="headerlink" title="1.3.5.3    nexus 仓库目录"></a>1.3.5.3    nexus 仓库目录</h4><p>默认在 sonatype-work 目录中：</p><p><img src="https://ae01.alicdn.com/kf/H08919fdf104e4a6a87ed4c3ef82841f9y.jpg" alt="image-20200622230218638"></p><ul><li><p>central：代理仓库，代理中央仓库</p><p><img src="https://ae01.alicdn.com/kf/H03cbe9db027f498088c414da89557c921.jpg" alt="image-20200622231040336"></p></li><li><p>apache-snapshots：代理仓库，存储 snapshots  构件，代理地址 <a href="https://repository.apache.org/snapshots/" target="_blank" rel="noopener">https://repository.apache.org/snapshots/</a></p></li><li><p>central-m1：virtual 类型仓库，兼容 Maven1 版本的 jar 或者插件</p></li><li><p>releases：本地仓库，存储 releases  构件。</p></li><li><p>snapshots：本地仓库，存储snapshots  构件。</p></li><li><p>thirdparty：第三方仓库</p></li><li><p>public：仓库组</p></li></ul><h2 id="1-4-将项目发布到私服"><a href="#1-4-将项目发布到私服" class="headerlink" title="1.4    将项目发布到私服"></a>1.4    将项目发布到私服</h2><h3 id="1-4-1-需求"><a href="#1-4-1-需求" class="headerlink" title="1.4.1    需求"></a>1.4.1    需求</h3><p>企业中多个团队协作开发通常会将一些公用的组件、开发模块等发布到私服供其它团队 或模块开发人员使用。</p><p>本例子假设多团队分别开发 ssm_dao、ssm_service、ssm_web，某个团队开发完在 ssm_dao 会将 ssm_dao 发布到私服供 ssm_service 团队使用，本例子会将 ssm_dao 工程打成 jar 包发布到私服。</p><p><img src="https://ae01.alicdn.com/kf/H95d4b6a81fbd42c28ffbaa26a3a8c0c9g.jpg" alt="image-20200622231358045"></p><h3 id="1-4-2-配置"><a href="#1-4-2-配置" class="headerlink" title="1.4.2    配置"></a>1.4.2    配置</h3><h4 id="1-4-2-1-修改-settings-xml文件"><a href="#1-4-2-1-修改-settings-xml文件" class="headerlink" title="1.4.2.1    修改 settings.xml文件"></a>1.4.2.1    修改 settings.xml文件</h4><p>需要在客户端即部署 ssm_dao 工程的电脑上配置 maven 环境，并修改 settings.xml文件，配置连接私服的用户和密码 。 此用户名和密码用于私服校验，因为私服需要知道上传的账号和密码是否和私服中的账号和 密码一致。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    releases   连接发布版本项目仓库</span></span><br><span class="line"><span class="comment">    snapshots 连接测试版本项目仓库</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-2-配置项目-pom-xml"><a href="#1-4-2-2-配置项目-pom-xml" class="headerlink" title="1.4.2.2    配置项目 pom.xml"></a>1.4.2.2    配置项目 pom.xml</h4><p>配置私服仓库的地址，本公司的自己的 jar 包会上传到私服的宿主仓库，根据工程的版本号决定上传到哪个宿主仓库，如果版本为 release 则上传到私服的 release 仓库，如果版本为 snapshot 则上传到私服的 snapshot 仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：pom.xml 这里<code>&lt;id&gt;</code> 和 settings.xml 配置 <code>&lt;id&gt;</code> 对应！</p><h3 id="1-4-3-测试"><a href="#1-4-3-测试" class="headerlink" title="1.4.3    测试"></a>1.4.3    测试</h3><p>将项目 dao 工程打成 jar 包发布到私服：</p><p>1、首先启动 nexus</p><p>2、对 ssm_dao 工程执行 deploy 命令</p><p>根据本项目pom.xml中version定义决定发布到哪个仓库，如果 version定义为 snapshot， 执行 deploy 后查看 nexus 的 snapshot 仓库，如果 version 定义为 release 则项目将发布到 nexus 的 release 仓库。</p><h2 id="1-5-从私服下载-jar-包"><a href="#1-5-从私服下载-jar-包" class="headerlink" title="1.5    从私服下载 jar 包"></a>1.5    从私服下载 jar 包</h2><h3 id="1-5-1-需求"><a href="#1-5-1-需求" class="headerlink" title="1.5.1    需求"></a>1.5.1    需求</h3><p>没有配置 nexus 之前，如果本地仓库没有，去中央仓库下载，通常在企业中会在局域网 内部署一台私服服务器，有了私服本地项目首先去本地仓库找 jar，如果没有找到则连接私 服从私服下载 jar 包，如果私服没有 jar 包私服同时作为代理服务器从中央仓库下载 jar 包， 这样做的好处是一方面由私服对公司项目的依赖 jar 包统一管理，一方面提高下载速度，项 目连接私服下载 jar  包的速度要比项目连接中央仓库的速度快的多。</p><p>本例子测试从私服下载 ssm_dao 工程 jar 包。</p><h3 id="1-5-2-管理仓库组"><a href="#1-5-2-管理仓库组" class="headerlink" title="1.5.2    管理仓库组"></a>1.5.2    管理仓库组</h3><p>nexus中包括很多仓库，hosted 中存放的是企业自己发布的jar包及第三方公司的 jar包， proxy 中存放的是中央仓库的 jar，为了方便从私服下载 jar 包可以将多个仓库组成一个仓库 组，每个工程需要连接私服的仓库组下载 jar  包。</p><p>打开 nexus 配置仓库组，如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hdd4727e3157141049a5196d18ac2400c0.jpg" alt="image-20200622233057735"></p><p>上图中仓库组包括了本地仓库、代理仓库等。</p><h3 id="1-5-3-在-settings-xml-中配置仓库"><a href="#1-5-3-在-settings-xml-中配置仓库" class="headerlink" title="1.5.3    在 settings.xml 中配置仓库"></a>1.5.3    在 settings.xml 中配置仓库</h3><p>在客户端的 settings.xml 中配置私服的仓库，由于 settings.xml 中没有 repositories 的配置标签需要使用 profile 定义仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--profile 的 id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--仓库 id，repositories 可以配置多个仓库，保证 id 不重复--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--仓库地址，即 nexus 仓库组的地址--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否下载 releases 构件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否下载 snapshots 构件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件仓库，maven 的运行依赖插件，也需要从私服下载插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件仓库的 id 不允许重复，如果重复后边配置会覆盖前边 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 profile  定义仓库需要激活才可生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-把第三方-jar-包放入本地仓库或私服"><a href="#2-把第三方-jar-包放入本地仓库或私服" class="headerlink" title="2.    把第三方 jar 包放入本地仓库或私服"></a>2.    把第三方 jar 包放入本地仓库或私服</h1><h2 id="2-1-导入本地库"><a href="#2-1-导入本地库" class="headerlink" title="2.1    导入本地库"></a>2.1    导入本地库</h2><p>随便找一个 jar 包测试，可以先 CMD 进入到 jar 包所在位置，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dfile&#x3D;fastjson-1.1.37.jar -Dpackaging&#x3D;jar</span><br></pre></td></tr></table></figure><h2 id="2-2-导入私服"><a href="#2-2-导入私服" class="headerlink" title="2.2    导入私服"></a>2.2    导入私服</h2><p>需要在 maven 软件的核心配置文件 settings.xml 中配置第三方仓库的 server 信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CMD执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dpackaging&#x3D;jar -Dfile&#x3D;fastjson-1.1.37.jar -Durl&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;thirdparty&#x2F; -DrepositoryId&#x3D;thirdparty</span><br></pre></td></tr></table></figure><h2 id="2-3-参数说明"><a href="#2-3-参数说明" class="headerlink" title="2.3    参数说明"></a>2.3    参数说明</h2><ul><li>DgroupId 和 DartifactId 构成了该 jar 包在 pom.xml 的坐标，项目就是依靠这两个属性定位。 自己起名字也行。</li><li>Dfile 表示需要上传的 jar 包的绝对路径。</li><li>Durl  私服上仓库的位置，打开 nexus——&gt;repositories  菜单，可以看到该路径。</li><li>DrepositoryId 服务器的表示 id，在 nexus 的 configuration 可以看到。</li><li>Dversion  表示版本信息。</li></ul><p>关于 jar  包准确的版本： 包的名字上一般会带版本号，如果没有那可以解压该包，会发现一个叫 MANIFEST.MF  的文件，这个文件就有描述该包的版本信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-maven-私服&quot;&gt;&lt;a href=&quot;#1-maven-私服&quot; class=&quot;headerlink&quot; title=&quot;1.    maven  私服&quot;&gt;&lt;/a&gt;1.    maven  私服&lt;/h1&gt;&lt;h2 id=&quot;1-1-需求&quot;&gt;&lt;a href=&quot;#1-1-需求&quot; class=&quot;headerlink&quot; title=&quot;1.1    需求&quot;&gt;&lt;/a&gt;1.1    需求&lt;/h2&gt;&lt;p&gt;正式开发，不同的项目组开发不同的工程。&lt;/p&gt;
&lt;p&gt;ssm_dao  工程开发完毕，发布到私服。&lt;/p&gt;
&lt;p&gt;ssm_service 从私服下载 dao&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Maven" scheme="https://wgy1993.gitee.io/tags/Maven/"/>
    
      <category term="项目管理" scheme="https://wgy1993.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Maven(二)</title>
    <link href="https://wgy1993.gitee.io/archives/f77862b9.html"/>
    <id>https://wgy1993.gitee.io/archives/f77862b9.html</id>
    <published>2020-06-18T14:07:00.000Z</published>
    <updated>2020-06-22T14:18:38.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-maven-构建-SSM-工程"><a href="#1-maven-构建-SSM-工程" class="headerlink" title="1.    maven 构建 SSM 工程"></a>1.    maven 构建 SSM 工程</h1><h2 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1    需求"></a>1.1    需求</h2><p>实现 SSM 工程构建，规范依赖管理。场景：根据 id 展示商品信息</p><a id="more"></a><h2 id="1-2-准备数据库"><a href="#1-2-准备数据库" class="headerlink" title="1.2    准备数据库"></a>1.2    准备数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS&#x3D;0;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for &#96;items&#96;</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;items&#96;;</span><br><span class="line">CREATE TABLE &#96;items&#96; (</span><br><span class="line">  &#96;id&#96; int(10) NOT NULL auto_increment,</span><br><span class="line">  &#96;name&#96; varchar(20) default NULL,</span><br><span class="line">  &#96;price&#96; float(10,0) default NULL,</span><br><span class="line">  &#96;pic&#96; varchar(40) default NULL,</span><br><span class="line">  &#96;createtime&#96; datetime default NULL,</span><br><span class="line">  &#96;detail&#96; varchar(200) default NULL,</span><br><span class="line">  PRIMARY KEY  (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;9 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of items</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;1&#39;, &#39;插入测试1&#39;, &#39;1000&#39;, null, &#39;2018-03-13 09:29:30&#39;, &#39;插入测试&#39;);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;2&#39;, &#39;插入测试2&#39;, null, null, &#39;2018-03-28 10:05:52&#39;, &#39;插入测试&#39;);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;3&#39;, &#39;插入测试3&#39;, &#39;199&#39;, null, &#39;2018-03-07 10:08:04&#39;, &#39;插入测试&#39;);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;4&#39;, &#39;插入测试4&#39;, null, null, null, null);</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (&#39;5&#39;, &#39;插入测试5&#39;, null, null, null, null);</span><br></pre></td></tr></table></figure><h2 id="1-3-创建一个-maven-工程"><a href="#1-3-创建一个-maven-工程" class="headerlink" title="1.3    创建一个 maven 工程"></a>1.3    创建一个 maven 工程</h2><h3 id="1-3-1-新建-ssm-maven-项目-使用下图选中的骨架"><a href="#1-3-1-新建-ssm-maven-项目-使用下图选中的骨架" class="headerlink" title="1.3.1    新建 ssm_maven  项目,使用下图选中的骨架"></a>1.3.1    新建 ssm_maven  项目,使用下图选中的骨架</h3><p><img src="https://ae01.alicdn.com/kf/Hce52b84e87424381a1e221d07d3cef1cU.jpg" alt="image-20200622175249490"></p><h3 id="1-3-2-填写坐标"><a href="#1-3-2-填写坐标" class="headerlink" title="1.3.2    填写坐标"></a>1.3.2    填写坐标</h3><p><img src="https://ae01.alicdn.com/kf/Hdd18d3ecf8ee4278b3bd3cf96b6b56e5m.jpg" alt="image-20200622175420655"></p><h3 id="1-3-3-查看是否使用的自己的私服"><a href="#1-3-3-查看是否使用的自己的私服" class="headerlink" title="1.3.3    查看是否使用的自己的私服"></a>1.3.3    查看是否使用的自己的私服</h3><p><img src="https://ae01.alicdn.com/kf/Haffc087b48b3490f99140e5d1c57a5e4b.jpg" alt="image-20200622175532329"></p><h3 id="1-3-4-在-main-目录下新建-java-和-resources-文件夹"><a href="#1-3-4-在-main-目录下新建-java-和-resources-文件夹" class="headerlink" title="1.3.4    在 main 目录下新建 java 和 resources 文件夹"></a>1.3.4    在 main 目录下新建 java 和 resources 文件夹</h3><p>把 java 和 resources 文件夹转成 Sources Root和Resources Root</p><p><img src="https://ae01.alicdn.com/kf/H54a874c862714ecaaf48e8d10075ea2cg.jpg" alt="image-20200622180044272"></p><h3 id="1-3-5-修改编译版本，在-pom-xml-文件中添加"><a href="#1-3-5-修改编译版本，在-pom-xml-文件中添加" class="headerlink" title="1.3.5    修改编译版本，在 pom.xml 文件中添加"></a>1.3.5    修改编译版本，在 pom.xml 文件中添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编译版本为1.8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-知识点准备"><a href="#1-4-知识点准备" class="headerlink" title="1.4    知识点准备"></a>1.4    知识点准备</h2><h3 id="1-4-1-什么是依赖传递"><a href="#1-4-1-什么是依赖传递" class="headerlink" title="1.4.1    什么是依赖传递"></a>1.4.1    什么是依赖传递</h3><p>先添加 springmvc 的核心依赖的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会发现出现除了 spring-webmvc 以外的其他 jar。因为我们的项目依赖 spring-webmv.jar，而 spring-webmv.jar 会依赖 spring-beans.jar 等等，所以 spring-beans.jar 这些 jar 包也出现在了我 们的 maven 工程中，这种现象我们称为依赖传递。从下图中可看到他们的关系：（请注意 spring-beans 的版本）</p><p><img src="https://ae01.alicdn.com/kf/H0197f63b0d5e4149976a20fea3f8a46fX.jpg" alt="image-20200622180909581"></p><h3 id="1-4-2-依赖冲突的解决"><a href="#1-4-2-依赖冲突的解决" class="headerlink" title="1.4.2    依赖冲突的解决"></a>1.4.2    依赖冲突的解决</h3><p>接着添加一个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们会发现这两个 jar 包同时都依赖了 spring-beans</p><p>spring-webmvc 依赖 spirng-beans-4.2.4，spring-context 依赖 spring-beans-5.0.2，但是发现 spirng-beans-4.2.4  加入到工程中。而我们希望 spring-beans-5.0.2  加入工程。这就造成了依赖冲突。</p><h4 id="1-4-2-1-依赖调解原则"><a href="#1-4-2-1-依赖调解原则" class="headerlink" title="1.4.2.1    依赖调解原则"></a>1.4.2.1    依赖调解原则</h4><p>maven  自动按照下边的原则调解：</p><ul><li><p>第一声明者优先原则：</p><p> 在 pom 文件定义依赖，先声明的依赖为准。 测试：</p><p> 如果将上边 spring-webmvc 和 spring-context 顺序颠倒，系统将导入 spring-beans-5.0.2。 分析：由于 spring-webmvc 在前边以 spring-webmvc 依赖的 spring-beans-5.0.2 为准，所以最终spring-beans-5.0.2  添加到了工程中。</p></li><li><p>路径近者优先原则：</p><p> 例如：还是上述情况，spring-contex 和 spring-webmvc 都会传递过来 spirng-beans，那 如果直接把 spring-beans 的依赖直接写到 pom 文件中，那么项目就不会再使用其他依赖传 递来的 spring-beans，因为自己直接在 pom 中定义 spring-beans 要比其他依赖传递过来的路径要近。在本工程中的 pom 中加入 spirng-beans-5.0.2 的依赖，根据路径近者优先原则，系统将导入spirng-beans-5.0.2：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-2-排除依赖"><a href="#1-4-2-2-排除依赖" class="headerlink" title="1.4.2.2    排除依赖"></a>1.4.2.2    排除依赖</h4><p>上边的问题也可以通过排除依赖方法辅助依赖调解，如下：</p><p>比如在依赖 spring-webmvc 的设置中添加排除依赖，排除 spring-beans， 下边的配置表示：依赖 spring-webmvc，但排除 spring-webmvc 所依赖的 spring-beans。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-3-锁定版本"><a href="#1-4-2-3-锁定版本" class="headerlink" title="1.4.2.3    锁定版本"></a>1.4.2.3    锁定版本</h4><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优化等因素可以采用直接锁定版 本的方法确定依赖构件的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本的为准添加到工程中，此方法在企业开发中常用。</p><p>如下的配置是锁定了 spring-beans 和 spring-context 的版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以把版本号提取出来，使用<code>&lt;properties&gt;</code>标签设置成变量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在工程中锁定依赖的版本并不代表在工程中添加了依赖，如果工程需要添加锁定版本的依赖则需要单独添加<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>标签，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上边添加的依赖并没有指定版本，原因是已在<code>&lt;dependencyManagement&gt;</code>中锁定了版本， 所以在<code>&lt;dependency&gt;</code>下不需要再指定版本。</p><h2 id="1-5-定义-pom-xml"><a href="#1-5-定义-pom-xml" class="headerlink" title="1.5    定义 pom.xml"></a>1.5    定义 pom.xml</h2><p>maven 工程首先要识别依赖，web 工程实现 SSM 整合，需要依赖 spring-webmvc5.0.2、 spring5.0.2、mybatis3.4.5 等，在 pom.xml  添加工程如下依赖：</p><p>（在实际企业开发中会有架构师专门来编写 pom.xml） 分两步：</p><ol><li>锁定依赖版本</li><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.security.version</span>&gt;</span>5.0.1.RELEASE<span class="tag">&lt;/<span class="name">spring.security.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加tomcat7插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编译版本为1.8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-Dao-层"><a href="#1-6-Dao-层" class="headerlink" title="1.6    Dao 层"></a>1.6    Dao 层</h2><p>在 src/main/java 中定义 dao 接口，实现根据 id 查询商品信息：</p><h3 id="1-6-1-pojo-模型类"><a href="#1-6-1-pojo-模型类" class="headerlink" title="1.6.1    pojo 模型类"></a>1.6.1    pojo 模型类</h3><p>在 src/main/java 创建模型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Items</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-dao-层代码"><a href="#1-6-2-dao-层代码" class="headerlink" title="1.6.2    dao 层代码"></a>1.6.2    dao 层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemsDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-配置文件"><a href="#1-6-3-配置文件" class="headerlink" title="1.6.3    配置文件"></a>1.6.3    配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.dao.ItemsDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from items</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意配置文件位置（resources下创建目录/com/wgy/dao）：</p><p><img src="https://ae01.alicdn.com/kf/Hd02581ae7ab04da9a6605f237d4c5bcbx.jpg" alt="image-20200622191738694"></p><p>在 src/main/resources 配置 log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### direct log messages to stdout ###</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5 p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"><span class="comment">### set log levels - for more verbose logging change 'info' to 'debug' ###</span></span><br><span class="line"><span class="comment">#在开发阶段日志级别使用 debug</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug, stdout</span></span><br></pre></td></tr></table></figure><p>在 src/main/resources 创建 applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件开始--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///maven"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置生产SqlSession对象的工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描pojo包，给包下所有pojo对象起别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-4-单元测试"><a href="#1-6-4-单元测试" class="headerlink" title="1.6.4    单元测试"></a>1.6.4    单元测试</h3><p>在 src/test/java 创建单元测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//dao测试</span></span><br><span class="line">        <span class="comment">//从容器中拿到所需的dao的代理对象</span></span><br><span class="line">        ItemsDao itemsDao = ac.getBean(ItemsDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        Items items = itemsDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(items.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-Service-层"><a href="#1-7-Service-层" class="headerlink" title="1.7    Service 层"></a>1.7    Service 层</h2><h3 id="1-7-1-代码"><a href="#1-7-1-代码" class="headerlink" title="1.7.1    代码"></a>1.7.1    代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemsDao itemsDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemsDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-2-配置文件"><a href="#1-7-2-配置文件" class="headerlink" title="1.7.2    配置文件"></a>1.7.2    配置文件</h3><p>在 applicationContext.xml 中配置 service</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--service层配置文件开始--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件扫描配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop面向切面编程，切面就是切入点和通知的组合--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"advice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"advice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--service层配置文件结束--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-3-单元测试"><a href="#1-7-3-单元测试" class="headerlink" title="1.7.3    单元测试"></a>1.7.3    单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//service测试</span></span><br><span class="line">        ItemsService itemsService = ac.getBean(ItemsService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        Items items = itemsService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(items.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-Web-层"><a href="#1-8-Web-层" class="headerlink" title="1.8    Web 层"></a>1.8    Web 层</h2><h3 id="1-8-1-代码"><a href="#1-8-1-代码" class="headerlink" title="1.8.1    代码"></a>1.8.1    代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/items"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemsService itemsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findDetail"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findDetail</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Items items = itemsService.findById(<span class="number">1</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"item"</span>, items);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"itemDetail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-2-配置文件"><a href="#1-8-2-配置文件" class="headerlink" title="1.8.2    配置文件"></a>1.8.2    配置文件</h3><p>在 src/main/resources 创建 springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器，处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--释放静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置web.xml，加载 spring 容器，配置 springmvc 前端控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置spring核心监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--重新指定spring配置文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc的核心servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-9-Jsp"><a href="#1-9-Jsp" class="headerlink" title="1.9    Jsp"></a>1.9    Jsp</h2><p>/WEB-INF/pages/itemDetail.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> prefix=<span class="string">"fmt"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;table width=<span class="string">"100%"</span> border=<span class="number">1</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品名称&lt;/td&gt;</span><br><span class="line">            &lt;td&gt; $&#123;item.name &#125; &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品价格&lt;/td&gt;</span><br><span class="line">            &lt;td&gt; $&#123;item.price &#125; &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;生成日期&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;fmt:formatDate value="$&#123;item.createtime&#125;" pattern="yyyy-MM-dd HH:mm:ss"/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品简介&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;item.detail&#125; &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="1-10-运行与调试"><a href="#1-10-运行与调试" class="headerlink" title="1.10    运行与调试"></a>1.10    运行与调试</h2><p>添加 tomcat7 插件，双击右侧 tomcat7 运行</p><p><img src="https://ae01.alicdn.com/kf/H1104ff0d42924829a5883accd6216c9bp.jpg" alt="image-20200622194146222"></p><p>运行结果如下：</p><p><img src="https://ae01.alicdn.com/kf/H4f38a150fe964858a9963672011104e9L.jpg" alt="image-20200622194530703"></p><h1 id="2-分模块构建工程"><a href="#2-分模块构建工程" class="headerlink" title="2.    分模块构建工程"></a>2.    分模块构建工程</h1><p>基于上边的三个工程分析</p><p>继承：创建一个 parent 工程将所需的依赖都配置在 pom 中 聚合：聚合多个模块运行。</p><h2 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1    需求"></a>2.1    需求</h2><h3 id="2-1-1-需求描述"><a href="#2-1-1-需求描述" class="headerlink" title="2.1.1    需求描述"></a>2.1.1    需求描述</h3><p>将 SSM 工程拆分为多个模块开发： ssm_dao、ssm_service、ssm_web</p><p><img src="https://ae01.alicdn.com/kf/Hd2f6b831c4764eaba1f6206212e1478fJ.jpg" alt="image-20200622194909971"></p><h3 id="2-1-2-理解继承和聚合"><a href="#2-1-2-理解继承和聚合" class="headerlink" title="2.1.2    理解继承和聚合"></a>2.1.2    理解继承和聚合</h3><p>通常继承和聚合同时使用</p><ul><li><p>何为继承？</p><p>继承是为了消除重复，如果将 dao、service、web 分开创建独立的工程则每个工程的 pom.xml 文件中的内容存在重复，比如：设置编译版本、锁定 spring 的版本的等，可以将这些重复的配置提取出来在父工程的 pom.xml  中定义。</p></li><li><p>何为聚合？</p><p>项目开发通常是分组分模块开发，每个模块开发完成要运行整个工程需要将每个模块聚合在 一起运行，比如：dao、service、web  三个工程最终会打一个独立的 war  运行。</p></li></ul><h2 id="2-2-案例实现"><a href="#2-2-案例实现" class="headerlink" title="2.2    案例实现"></a>2.2    案例实现</h2><h3 id="2-2-1-maven-parent-父模块"><a href="#2-2-1-maven-parent-父模块" class="headerlink" title="2.2.1    maven-parent  父模块"></a>2.2.1    maven-parent  父模块</h3><h4 id="2-2-1-1-创建父工程"><a href="#2-2-1-1-创建父工程" class="headerlink" title="2.2.1.1    创建父工程"></a>2.2.1.1    创建父工程</h4><p>工程只有pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置项目的打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-2-定义-pom-xml"><a href="#2-2-1-2-定义-pom-xml" class="headerlink" title="2.2.1.2    定义 pom.xml"></a>2.2.1.2    定义 pom.xml</h4><p>在父工程的 pom.xml 中抽取一些重复的配置的， 比如： 锁定 jar 包的版本、 设置编译版本等。</p><p>具体配置同上1.5</p><h3 id="2-2-2-ssm-dao-子模块"><a href="#2-2-2-ssm-dao-子模块" class="headerlink" title="2.2.2    ssm_dao 子模块"></a>2.2.2    ssm_dao 子模块</h3><h4 id="2-2-2-1-创建-dao-子模块"><a href="#2-2-2-1-创建-dao-子模块" class="headerlink" title="2.2.2.1    创建 dao  子模块"></a>2.2.2.1    创建 dao  子模块</h4><p>在父工程上右击创建 maven 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-dao-代码"><a href="#2-2-2-2-dao-代码" class="headerlink" title="2.2.2.2    dao 代码"></a>2.2.2.2    dao 代码</h4><p>将 ssm_maven 工程中的 dao接口、映射文件及 pojo 类拷贝到 src/main/java 中：</p><p><img src="https://ae01.alicdn.com/kf/Ha4e84b3f56d14fd4bce852672d3207bfS.jpg" alt="image-20200622203352917"></p><h4 id="2-2-2-3-配置文件"><a href="#2-2-2-3-配置文件" class="headerlink" title="2.2.2.3    配置文件"></a>2.2.2.3    配置文件</h4><p>将 applicationContext.xml拆分出一个applicationContext-dao.xml，此文件中只配置 dao 相关内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件开始--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///maven"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置生产SqlSession对象的工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描pojo包，给包下所有pojo对象起别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件结束--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-ssm-service-子模块"><a href="#2-2-3-ssm-service-子模块" class="headerlink" title="2.2.3    ssm_service  子模块"></a>2.2.3    ssm_service  子模块</h3><h4 id="2-2-3-1-创建-service-子模块"><a href="#2-2-3-1-创建-service-子模块" class="headerlink" title="2.2.3.1    创建 service 子模块"></a>2.2.3.1    创建 service 子模块</h4><p>方法同 ssm_dao 模块创建方法。ssm_service 依赖 ssm_dao 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-2-service-代码"><a href="#2-2-3-2-service-代码" class="headerlink" title="2.2.3.2    service 代码"></a>2.2.3.2    service 代码</h4><p>将 ssm_maven 工程中的service接口、实现类拷贝到 src/main/java中：</p><p><img src="https://ae01.alicdn.com/kf/Hd56b2024d4554e4980dcc13325af0c80a.jpg" alt="image-20200622204035505"></p><h4 id="2-2-3-3-配置文件"><a href="#2-2-3-3-配置文件" class="headerlink" title="2.2.3.3    配置文件"></a>2.2.3.3    配置文件</h4><p>将 applicationContext.xml拆分出一个applicationContext-service.xml，此文件中只配置 service相关内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--service层配置文件开始--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件扫描配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop面向切面编程，切面就是切入点和通知的组合--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"advice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"advice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service层配置文件结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-ssm-web-子模块"><a href="#2-2-4-ssm-web-子模块" class="headerlink" title="2.2.4    ssm_web  子模块"></a>2.2.4    ssm_web  子模块</h3><h4 id="2-2-4-1-创建-web-子模块"><a href="#2-2-4-1-创建-web-子模块" class="headerlink" title="2.2.4.1    创建 web  子模块"></a>2.2.4.1    创建 web  子模块</h4><p><img src="https://ae01.alicdn.com/kf/Hb2dfe45e54a64209a5aecaa709809176f.jpg" alt="image-20200622205548315"></p><p>ssm_web 依赖 ssm_service 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven05_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-2-controller-代码"><a href="#2-2-4-2-controller-代码" class="headerlink" title="2.2.4.2    controller 代码"></a>2.2.4.2    controller 代码</h4><p>将 ssm_web 工程中的controller 代码拷贝到src/main/java 中：</p><p><img src="https://ae01.alicdn.com/kf/H4fd9f63307f84d27af821ed1138d8421M.jpg" alt="image-20200622210122101"></p><h4 id="2-2-4-3-配置文件"><a href="#2-2-4-3-配置文件" class="headerlink" title="2.2.4.3    配置文件"></a>2.2.4.3    配置文件</h4><p>拷贝 ssm_web 工程中配置文件</p><p>将 applicationContext.xml引入server、dao配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring/applicationContext-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring/applicationContext-service.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-运行调试"><a href="#2-2-5-运行调试" class="headerlink" title="2.2.5    运行调试"></a>2.2.5    运行调试</h3><ul><li><p>方法 1：在 ssm_web 工程的 pom.xml 中配置 tomcat 插件运行</p><p>运行 ssm_web 工程它会从本地仓库下载依赖的 jar 包，所以当 ssm_web 依赖的 jar 包内容修改了必须及时发布到本地仓库，比如：ssm_web 依赖的 ssm_service 修改了，需要及时将ssm_service  发布到本地仓库。</p></li><li><p>方法 2：在父工程的 pom.xml 中配置 tomcat 插件运行，自动聚合并执行</p><p>推荐方法 2，如果子工程都在本地，采用方法 2 则不需要子工程修改就立即发布到本地仓库， 父工程会自动聚合并使用最新代码执行。</p></li></ul><p>注意：如果子工程和父工程中都配置了 tomcat  插件，运行的端口和路径以子工程为准。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-maven-构建-SSM-工程&quot;&gt;&lt;a href=&quot;#1-maven-构建-SSM-工程&quot; class=&quot;headerlink&quot; title=&quot;1.    maven 构建 SSM 工程&quot;&gt;&lt;/a&gt;1.    maven 构建 SSM 工程&lt;/h1&gt;&lt;h2 id=&quot;1-1-需求&quot;&gt;&lt;a href=&quot;#1-1-需求&quot; class=&quot;headerlink&quot; title=&quot;1.1    需求&quot;&gt;&lt;/a&gt;1.1    需求&lt;/h2&gt;&lt;p&gt;实现 SSM 工程构建，规范依赖管理。场景：根据 id 展示商品信息&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Maven" scheme="https://wgy1993.gitee.io/tags/Maven/"/>
    
      <category term="项目管理" scheme="https://wgy1993.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Maven(一)</title>
    <link href="https://wgy1993.gitee.io/archives/5849f9db.html"/>
    <id>https://wgy1993.gitee.io/archives/5849f9db.html</id>
    <published>2020-06-17T08:21:58.000Z</published>
    <updated>2020-06-21T08:28:26.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Maven-介绍"><a href="#1-Maven-介绍" class="headerlink" title="1.    Maven  介绍"></a>1.    Maven  介绍</h1><h2 id="1-1-什么是-Maven"><a href="#1-1-什么是-Maven" class="headerlink" title="1.1    什么是 Maven"></a>1.1    什么是 Maven</h2><h3 id="1-1-1-什么是-Maven"><a href="#1-1-1-什么是-Maven" class="headerlink" title="1.1.1    什么是 Maven"></a>1.1.1    什么是 Maven</h3><p>Maven 是一个项目管理工具，它包含了一个<strong>项目对象模型 (POM：Project Object Model)</strong>，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)， 和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><a id="more"></a><h3 id="1-1-2-Maven能解决什么问题"><a href="#1-1-2-Maven能解决什么问题" class="headerlink" title="1.1.2    Maven能解决什么问题"></a>1.1.2    Maven能解决什么问题</h3><p>用更通俗的方式来说明，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，下面列举几个感受一下：</p><ol><li>我们需要引用各种 jar包，尤其是比较大的工程，引用的 jar 包往往有几十个乃至上百个， 每用到一种 jar包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的jar 包冲突，版本冲突。</li><li>我们辛辛苦苦写好了 Java文件，可是只懂 0 和 1 的白痴电脑却完全读不懂，需要将它编译成二进制字节码。好歹现在这项工作可以由各种集成开发工具帮我们完成，Eclipse、IDEA 等都可以将代码即时编译。当然，如果你嫌生命漫长，何不铺张，也可以用记事本来敲代码，然后用 javac 命令一个个地去编译，逗电脑玩。</li><li>世界上没有不存在 bug的代码，为了减少 bug，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量。</li><li>再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，定型打包，如果是 web项目，还需要将之发布到服务器，供人蹂躏。</li></ol><p>试想，如果现在有一种工具，可以把你从上面的繁琐工作中解放出来，能帮你构建工程，管理 jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成 Web 站点，你会心动吗？Maven 就可以解决上面所提到的这些问题。</p><h3 id="1-1-3-Maven-的优势举例"><a href="#1-1-3-Maven-的优势举例" class="headerlink" title="1.1.3    Maven  的优势举例"></a>1.1.3    Maven  的优势举例</h3><p>我们通过 Web 阶段项目，要能够将项目运行起来，就必须将该项目所依赖的一些 jar 包添加到工程中，否则项目就不能运行。试想如果具有相同架构的项目有十个，那么我们就需要将这一份 jar包复制到十个不同的工程中。我们一起来看一个CRM项目的工程大小。</p><p>使用传统 Web 项目构建的 CRM 项目如下：</p><p><img src="https://ae01.alicdn.com/kf/Hec7029731d8d4f1cb02dbd54c612f945G.jpg" alt="image-20200621122813559"></p><p>原因主要是因为上面的 WEB 程序要运行，我们必须将项目运行所需的 Jar 包复制到工程目录中，从而导致了工程很大。</p><p>同样的项目，如果我们使用Maven 工程来构建，会发现总体上工程的大小会少很多。如下图:</p><p><img src="https://ae01.alicdn.com/kf/H31d37fe062b7418f9a5debed80e649919.jpg" alt="image-20200621123529874"></p><p>小结：可以初步推断它里面一定没有 jar 包，继续思考，没有 jar 包的项目怎么可能运行呢？</p><h2 id="1-2-Maven的两个精典作用"><a href="#1-2-Maven的两个精典作用" class="headerlink" title="1.2    Maven的两个精典作用"></a>1.2    Maven的两个精典作用</h2><h3 id="1-2-1-Maven的依赖管理"><a href="#1-2-1-Maven的依赖管理" class="headerlink" title="1.2.1    Maven的依赖管理"></a>1.2.1    Maven的依赖管理</h3><p>Maven的一个核心特性就是依赖管理。当我们涉及到多模块的项目（包含成百个模块或者子项目），管理依赖就变成一项困难的任务。Maven展示出了它对处理这种情形的高度控制。</p><p>传统的WEB项目中，我们必须将工程所依赖的jar包复制到工程中，导致了工程的变得很大。那么maven工程是如何使得工程变得很少呢？</p><p>分析如下：</p><p><img src="https://ae01.alicdn.com/kf/Hc29c73c6c20646a4834943f2cde3943eL.jpg" alt="image-20200621123853513"></p><p>通过分析发现：maven工程中不直接将jar包导入到工程中，而是通过在pom.xml文件中添加所需jar包的坐标，这样就很好的避免了jar直接引入进来，在需要用到jar包的时候，只要查找pom.xml文件，再通过pom.xml文件中的坐标，到一个专门用于”存放jar包的仓库”(maven仓库)中根据坐标从而找到这些jar包，再把这些jar包拿去运行。</p><p>那么问题来了<br>第一：”存放jar包的仓库”长什么样？<br>第二：通过读取pom.xml 文件中的坐标，再到仓库中找到jar包，会不会很慢？从而导致这种方式不可行！</p><p>第一个问题：存放jar包的仓库长什么样，这一点我们后期会分析仓库的分类，也会带大家去看我们的本地的仓库长什么样。<br>第二个问题：通过pom.xml文件配置要引入的jar包的坐标，再读取坐标并到仓库中加载jar包，这样我们就可以直接使用jar包了，为了解决这个过程中速度慢的问题，maven中也有索引的概念，通过建立索引，可以大大提高加载jar包的速度，使得我们认为jar包基本跟放在本地的工程文件中再读取出来的速度是一样的。这个过程就好比我们查阅字典时，为了能够加快查找到内容，书前面的目录就好比是索引，有了这个目录我们就可以方便找到内容了，一样的在maven仓库中有了索引我们就可以认为可以快速找到jar包。</p><h3 id="1-2-2-项目的一键构建"><a href="#1-2-2-项目的一键构建" class="headerlink" title="1.2.2    项目的一键构建"></a>1.2.2    项目的一键构建</h3><p>我们的项目，往往都要经历编译、测试、运行、打包、安装 ，部署等一系列过程。</p><p>什么是构建：指的是项目从编译、测试、运行、打包、安装 ，部署整个过程都交给maven进行管理，这个过程称为构建。</p><p>一键构建：指的是整个构建过程，使用maven一个命令可以轻松完成整个工作。</p><p>Maven规范化构建流程如下：</p><p><img src="https://ae01.alicdn.com/kf/H40ec6b93b53f427f871bbad4851f1fd4S.jpg" alt="image-20200621124541442"></p><h1 id="2-Maven-的使用"><a href="#2-Maven-的使用" class="headerlink" title="2.    Maven 的使用"></a>2.    Maven 的使用</h1><h2 id="2-1-Maven的安装"><a href="#2-1-Maven的安装" class="headerlink" title="2.1    Maven的安装"></a>2.1    Maven的安装</h2><h3 id="2-1-1-Maven软件的下载"><a href="#2-1-1-Maven软件的下载" class="headerlink" title="2.1.1    Maven软件的下载"></a>2.1.1    Maven软件的下载</h3><p>为了使用Maven管理工具，我们首先要到官网去下载它的安装软件。通过百度搜索“Maven“如下：</p><p><img src="https://ae01.alicdn.com/kf/Ha3ddfcf40744403f82bb9203391d9456q.jpg" alt="image-20200621130311092"></p><p>点击 Download 链接，就可以直接进入到 Maven 软件的下载页面：</p><p><img src="https://ae01.alicdn.com/kf/H6956319d6f1148d6b561aaa97b3dd026V.jpg" alt="image-20200621130324421"></p><h3 id="2-1-2-Maven软件的安装"><a href="#2-1-2-Maven软件的安装" class="headerlink" title="2.1.2    Maven软件的安装"></a>2.1.2    Maven软件的安装</h3><p>Maven下载后，将Maven解压到一个没有中文没有空格的路径下，比如D:\software\maven下面。解压后目录结构如下：</p><p><img src="https://ae01.alicdn.com/kf/H072595d2eb7345f5a06085bafa637107N.jpg" alt="image-20200621130556426"></p><p>bin:存放了maven的命令，比如我们前面用到的mvn tomcat:run<br>boot:存放了一些maven本身的引导程序，如类加载器等<br>conf:存放了maven的一些配置文件，如setting.xml文件<br>lib:存放了maven本身运行所需的一些jar包</p><p>至此我们的maven软件就可以使用了，前提是你的电脑上之前已经安装并配置好了JDK。</p><h3 id="2-1-3-JDK的准备"><a href="#2-1-3-JDK的准备" class="headerlink" title="2.1.3    JDK的准备"></a>2.1.3    JDK的准备</h3><p>JDK 使用 JDK8版本</p><p><img src="https://ae01.alicdn.com/kf/Hc9ea0cca103a419fbc065ab064e4d450I.jpg" alt="image-20200621131055805"></p><h3 id="2-1-4-Maven及JDK配置"><a href="#2-1-4-Maven及JDK配置" class="headerlink" title="2.1.4    Maven及JDK配置"></a>2.1.4    Maven及JDK配置</h3><p>配置 MAVEN_HOME （bin目录之前一级目录）：</p><p><img src="https://ae01.alicdn.com/kf/Hf7ef4f686ee2442995ad555a9c5d146cp.jpg" alt="image-20200621131220389"></p><p>配置JAVA_HOME：</p><p><img src="https://ae01.alicdn.com/kf/H017a381f466f4c78b4e48e6d851abd11w.jpg" alt="image-20200621131303599"></p><p>添加%MAVEN_HOME%/bin;%JAVA_HOME%/bin;到patch中。</p><h3 id="2-1-5-Maven软件版本测试"><a href="#2-1-5-Maven软件版本测试" class="headerlink" title="2.1.5    Maven软件版本测试"></a>2.1.5    Maven软件版本测试</h3><p>通过 mvn -v命令检查 maven是否安装成功，看到maven的版本为3.5.2及java版本为1. 8 即为安装成功。</p><p>找开cmd命令，输入mvn –v命令，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H33fe75b42be941e99dda55913c61b44cJ.jpg" alt="image-20200621131858275"></p><h2 id="2-2-Maven仓库"><a href="#2-2-Maven仓库" class="headerlink" title="2.2    Maven仓库"></a>2.2    Maven仓库</h2><h3 id="2-2-1-Maven仓库的分类"><a href="#2-2-1-Maven仓库的分类" class="headerlink" title="2.2.1    Maven仓库的分类"></a>2.2.1    Maven仓库的分类</h3><p>maven的工作需要从仓库下载一些jar包，如下图所示，本地的项目A、项目B等都会通过maven软件从远程仓库（可以理解为互联网上的仓库）下载jar包并存在本地仓库，本地仓库就是本地文件夹，当第二次需要此jar包时则不再从远程仓库下载，因为本地仓库已经存在了，可以将本地仓库理解为缓存，有了本地仓库就不用每次从远程仓库下载了。</p><p>下图描述了maven中仓库的类型：</p><p><img src="https://ae01.alicdn.com/kf/H7ad87fe25d1344558f4fd672c09788f5G.jpg" alt="image-20200621132030284"></p><ul><li><p>本地仓库 ：用来存储从远程仓库或中央仓库下载的插件和 jar 包，项目使用一些插件或 jar 包，优先从本地仓库查找。默认本地仓库位置在 ${user.dir}/.m2/repository，${user.dir}表示windows 用户目录</p><p><img src="https://ae01.alicdn.com/kf/H506833173fec4b78a7b459e4e8fb2946R.jpg" alt="image-20200621132206258"></p></li><li><p>远程仓库：如果本地需要插件或者 jar 包，本地仓库没有，默认去远程仓库下载。远程仓库可以在互联网内也可以在局域网内。</p></li><li><p>中央仓库 ：在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a> ，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包含了世界上大部分流行的开源项目构件。</p></li></ul><h3 id="2-2-2-Maven本地仓库的配置"><a href="#2-2-2-Maven本地仓库的配置" class="headerlink" title="2.2.2    Maven本地仓库的配置"></a>2.2.2    Maven本地仓库的配置</h3><p>在MAVE_HOME/conf/settings.xml文件中配置本地仓库位置（maven的安装目录下）：</p><p><img src="https://ae01.alicdn.com/kf/Hc0dd409dd9704acc959987e4c5a5c38bi.jpg" alt="image-20200621132505396"></p><p>打开settings.xml文件，配置如下：</p><p><img src="https://ae01.alicdn.com/kf/H8e5cda30b8124c14b21aed769dde6a6cl.jpg" alt="image-20200621132516975"></p><h3 id="2-2-3-全局setting与用户setting"><a href="#2-2-3-全局setting与用户setting" class="headerlink" title="2.2.3    全局setting与用户setting"></a>2.2.3    全局setting与用户setting</h3><p>maven仓库地址、私服等配置信息需要在setting.xml文件中配置，分为全局配置和用户配置。</p><p>在maven安装目录下的有 conf/setting.xml文件，此setting.xml文件用于maven的所有project项目，它作为maven的全局配置。</p><p>如需要个性配置则需要在用户配置中设置，用户配置的setting.xml文件默认的位置在：${user.dir}/.m2/settings.xml目录中,${user.dir} 指windows 中的用户目录。</p><p>maven会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</p><p><img src="https://ae01.alicdn.com/kf/Hddbb14adfacb44d28d30cd08765e5e303.jpg" alt="image-20200621132640919"></p><h2 id="2-3-Maven工程的认识"><a href="#2-3-Maven工程的认识" class="headerlink" title="2.3    Maven工程的认识"></a>2.3    Maven工程的认识</h2><h3 id="2-3-1-Maven工程的目录结构"><a href="#2-3-1-Maven工程的目录结构" class="headerlink" title="2.3.1    Maven工程的目录结构"></a>2.3.1    Maven工程的目录结构</h3><p><img src="https://ae01.alicdn.com/kf/Hde33470c9eef4df0881ee8dd231baadaT.jpg" alt="image-20200621132857765"></p><p>作为一个maven工程，它的src目录和pom.xml是必备的。</p><p>进入src目录后，我们发现它里面的目录结构如下：</p><p><img src="https://ae01.alicdn.com/kf/Hdd83e53d04b74aa0a25ca17fa844e294M.jpg" alt="image-20200621132930866"></p><p>src/main/java —— 存放项目的.java文件<br>src/main/resources —— 存放项目资源文件，如spring, hibernate配置文件<br>src/test/java —— 存放所有单元测试.java文件，如JUnit测试类<br>src/test/resources —— 测试资源文件<br>target —— 项目输出位置，编译后的class文件会输出到此目录<br>pom.xml——maven项目核心配置文件</p><p>注意：如果是普通的java项目，那么就没有webapp目录。</p><h3 id="2-3-2-Maven工程的运行"><a href="#2-3-2-Maven工程的运行" class="headerlink" title="2.3.2    Maven工程的运行"></a>2.3.2    Maven工程的运行</h3><p>进入maven工程目录（当前目录有pom.xml文件），运行tomcat:run命令。</p><p><img src="https://ae01.alicdn.com/kf/H161f9ef9fa224d59a2baf569c8a673f4j.jpg" alt="image-20200621133220266"></p><p>根据上边的提示信息，通过浏览器访问：<a href="http://localhost:8080/maven-helloworld/" target="_blank" rel="noopener">http://localhost:8080/maven-helloworld/</a></p><p><img src="https://ae01.alicdn.com/kf/H6d1ed1f789f243fcaca20b7219dcbfa5h.jpg" alt="image-20200621133236602"></p><h1 id="3-Maven常用命令"><a href="#3-Maven常用命令" class="headerlink" title="3.    Maven常用命令"></a>3.    Maven常用命令</h1><p>我们可以在cmd中通过一系列的maven命令来对我们的maven-helloworld工程进行编译、测试、运行、打包、安装、部署。</p><h2 id="3-1-compile"><a href="#3-1-compile" class="headerlink" title="3.1    compile"></a>3.1    compile</h2><p>compile是maven工程的编译命令，作用是将src/main/java下的文件编译为class文件输出到target目录下。</p><p>cmd进入命令状态，执行mvn compile，如下图提示成功：</p><p><img src="https://ae01.alicdn.com/kf/H91ab7a2cd10943bca57e756a01f0e3ebv.jpg" alt="image-20200621133429555"></p><p>查看 target目录，class文件已生成，编译完成。</p><p><img src="https://ae01.alicdn.com/kf/Hc5def3d233704454b40a183dd294a041c.jpg" alt="image-20200621133534501"></p><h2 id="3-2-test"><a href="#3-2-test" class="headerlink" title="3.2    test"></a>3.2    test</h2><p>test是maven工程的测试命令 mvn test，会执行src/test/java下的单元测试类。</p><p>cmd执行mvn test执行src/test/java下单元测试类，下图为测试结果，运行 1 个测试用例，全部成功。</p><p><img src="https://ae01.alicdn.com/kf/H2b22378a6f224dc8a97651a2c62dc891s.jpg" alt="image-20200621133701275"></p><h2 id="3-3-clean"><a href="#3-3-clean" class="headerlink" title="3.3    clean"></a>3.3    clean</h2><p>clean是maven工程的清理命令，执行 clean会删除target目录及内容。</p><h2 id="3-4-package"><a href="#3-4-package" class="headerlink" title="3.4    package"></a>3.4    package</h2><p>package是maven工程的打包命令，对于java工程执行package打成jar包，对于web工程打成war包。</p><h2 id="3-5-install"><a href="#3-5-install" class="headerlink" title="3.5    install"></a>3.5    install</h2><p>install是maven工程的安装命令，执行install将maven打成jar包或war包发布到本地仓库。</p><h2 id="3-6-Maven指令的生命周期"><a href="#3-6-Maven指令的生命周期" class="headerlink" title="3.6    Maven指令的生命周期"></a>3.6    Maven指令的生命周期</h2><p>maven对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：</p><p>Clean Lifecycle ：在进行真正的构建之前进行一些清理工作。<br>Default Lifecycle ：构建的核心部分，编译，测试，打包，部署等等。<br>Site Lifecycle ：生成项目报告，站点，发布站点。</p><h2 id="3-7-maven的概念模型"><a href="#3-7-maven的概念模型" class="headerlink" title="3.7    maven的概念模型"></a>3.7    maven的概念模型</h2><p>Maven包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><p><img src="https://ae01.alicdn.com/kf/Hc90d7d8098ef470fa71b154b25b3508fy.jpg" alt="image-20200621160302792"></p><ul><li><p>项目对象模型 (Project Object Model)</p><p>一个maven工程都有一个pom.xml文件，通过pom.xml文件定义项目的坐标、项目依赖、项目信息、插件目标等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt; ：文件的根节点 .</span><br><span class="line">&lt;modelversion&gt; ： pom.xml 使用的对象模型版本</span><br><span class="line">&lt;groupId&gt; ：项目名称，一般写项目的域名</span><br><span class="line">&lt;artifactId&gt; ：模块名称，子项目名或模块名称</span><br><span class="line">&lt;version&gt; ：产品的版本号 .</span><br><span class="line">&lt;packaging&gt; ：打包类型，一般有 jar、war、pom 等</span><br><span class="line">&lt;name&gt; ：项目的显示名，常用于 Maven 生成的文档。</span><br><span class="line">&lt;description&gt; ：项目描述，常用于 Maven 生成的文档</span><br><span class="line">&lt;dependencies&gt; ：项目依赖构件配置，配置项目依赖构件的坐标</span><br><span class="line">&lt;build&gt; ：项目构建配置，配置编译、运行插件等。</span><br></pre></td></tr></table></figure></li><li><p>依赖管理系统(Dependency Management System)</p><p>通过maven的依赖管理对项目所依赖的jar 包进行统一管理。</p><p>比如：项目依赖junit4.9，通过在pom.xml中定义junit4.9的依赖即使用junit4.9，如下所示是junit4.9的依赖定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此项目运行使用 junit，所以此项目依赖 junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit 的项目名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit 的模块名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit 版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围：单元测试时使用 junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个项目生命周期(Project Lifecycle)</p><p>使用maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven将这些过程规范为一个生命周期，如下所示是生命周期的各各阶段：</p><p><img src="https://ae01.alicdn.com/kf/Hb2e9de1a33ad45d3af105b498c13bf68p.jpg" alt="image-20200621134613943"></p><p>maven通过执行一些简单命令即可实现上边生命周期的各各过程，比如执行mvn compile执行编译、执行mvn clean执行清理。</p></li><li><p>一组标准集合</p><p>maven将整个项目管理过程定义一组标准，比如：通过maven构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p></li><li><p>插件(plugin)目标(goal)</p><p>maven 管理项目生命周期过程都是基于插件完成的。</p></li></ul><h1 id="4-idea开发maven项目"><a href="#4-idea开发maven项目" class="headerlink" title="4.    idea开发maven项目"></a>4.    idea开发maven项目</h1><p>在实战的环境中，我们都会使用流行的工具来开发项目。</p><h2 id="4-1-idea的maven配置"><a href="#4-1-idea的maven配置" class="headerlink" title="4.1    idea的maven配置"></a>4.1    idea的maven配置</h2><p>依据图片指示，选择本地maven安装目录，指定maven安装目录下conf文件夹中settings配置文件。</p><p><img src="https://ae01.alicdn.com/kf/Hbf3cdc7a52274076bd0f92d2037e56ec1.jpg" alt="image-20200621142532492"></p><h2 id="4-2-idea中创建maven的web工程"><a href="#4-2-idea中创建maven的web工程" class="headerlink" title="4.2    idea中创建maven的web工程"></a>4.2    idea中创建maven的web工程</h2><p>打开idea，选择创建一个新工程</p><p><img src="https://ae01.alicdn.com/kf/H9e18b633fc764fbf81fe5d0e077c5609y.jpg" alt="image-20200621142602374"></p><p>选择idea提供好的maven的web工程模板</p><p><img src="https://ae01.alicdn.com/kf/He57aacc4d1fb4736af757608a01b4a51L.jpg" alt="image-20200621142610390"></p><p>点击Next填写项目信息</p><p><img src="https://ae01.alicdn.com/kf/H3e4c3004a85a477cba63345331df2318p.jpg" alt="image-20200621142623969"></p><p>点击Next，此处不做改动。</p><p><img src="https://ae01.alicdn.com/kf/H15786a30733541e5a567f2345190feefg.jpg" alt="image-20200621142630857"></p><p>点击Next选择项目所在目录</p><p><img src="https://ae01.alicdn.com/kf/Hc01abba56f944e84b5c6cc1026f3f8506.jpg" alt="image-20200621142639497"></p><p>点击Finish后开始创建工程，耐心等待，直到出现如下界面。</p><p><img src="https://ae01.alicdn.com/kf/H2e834f209f964963b151dbb223a9d67bt.jpg" alt="image-20200621142647305"></p><p>手动添加src/main/java目录，如下图右键main文件夹&gt;New&gt;Directory</p><p><img src="https://ae01.alicdn.com/kf/H527d94142f2b4fcda0e613f1573d6636q.jpg" alt="image-20200621142701687"></p><p>创建一个新的文件夹命名为java</p><p><img src="https://ae01.alicdn.com/kf/Hd9d54ac2818e45faad706ab98f918d7f4.jpg" alt="image-20200621142735168"></p><p>点击OK后，在新的文件夹java上右键&gt;Make Directory as&gt;Sources Root</p><p><img src="https://ae01.alicdn.com/kf/Hf4d7e11985c14849a6933dd238b6ed783.jpg" alt="image-20200621142754043"></p><h3 id="4-2-1-创建一个Servlet"><a href="#4-2-1-创建一个Servlet" class="headerlink" title="4.2.1    创建一个Servlet"></a>4.2.1    创建一个Servlet</h3><p>src/java/main创建了一个Servlet，但报错</p><p><img src="https://ae01.alicdn.com/kf/H86acf08cdf16404f9c25fb43b096f018j.jpg" alt="image-20200621142809544"></p><p>要解决问题，就是要将servlet-api-xxx.jar包放进来，作为maven工程应当添加servlet的坐标，从而导入它的jar</p><h3 id="4-2-2-在pom-xml文件添加坐标"><a href="#4-2-2-在pom-xml文件添加坐标" class="headerlink" title="4.2.2    在pom.xml文件添加坐标"></a>4.2.2    在pom.xml文件添加坐标</h3><p>直接打开hello_maven工程的pom.xml文件，再添加坐标</p><p><img src="https://ae01.alicdn.com/kf/Hf47391050ccf446b9dbeddb15f17e104Z.jpg" alt="image-20200621142915684"></p><p>添加jar包的坐标时，还可以指定这个jar包将来的作用范围。</p><p>每个maven工程都需要定义本工程的坐标，坐标是maven对jar包的身份定义，比如：入门程序的坐标定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;</span><br><span class="line">&lt;groupId&gt;com.wgy&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;!-- 模块名称 --&gt;</span><br><span class="line">&lt;artifactId&gt;hello_maven&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;!-- 当前项目版本号，snapshot 为快照版本即非正式版本，release为正式发布版本 --&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;packaging&gt; ：打包类型</span><br><span class="line">    jar：执行 package 会打成 jar 包</span><br><span class="line">    war：执行 package 会打成 war 包</span><br><span class="line">    pom ：用于 maven 工程的继承，通常父工程设置为 pom</span><br></pre></td></tr></table></figure><h3 id="4-2-3-坐标的来源方式"><a href="#4-2-3-坐标的来源方式" class="headerlink" title="4.2.3    坐标的来源方式"></a>4.2.3    坐标的来源方式</h3><p>添加依赖需要指定依赖jar包的坐标，但是很多情况我们是不知道jar包的的坐标，可以通过如下方式查询：</p><p><a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a><br><a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a><br><img src="https://ae01.alicdn.com/kf/H3da4e0c3262340978b13ed7c9d4466d7V.jpg" alt="image-20200621143247590"></p><p><img src="https://ae01.alicdn.com/kf/H93bef3abcfa34ed88fa84a03fd8c827fj.jpg" alt="image-20200621143300435"></p><h2 id="4-3-依赖范围"><a href="#4-3-依赖范围" class="headerlink" title="4.3    依赖范围"></a>4.3    依赖范围</h2><p>A依赖B，需要在A的pom.xml文件中添加B的坐标，添加坐标时需要指定依赖范围，依赖范围包括：</p><ul><li><p>compile：编译范围，指A在编译时依赖B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</p></li><li><p>provided：provided依赖只有在当JDK或者一个容器已提供该依赖之后才使用， provided依赖在编译和测试时需要，在运行时不需要，比如：servlet api被tomcat容器提供。</p></li><li><p>runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc的驱动包。由于运行时需要所以runtime范围的依赖会被打包。</p></li><li><p>test：test范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如：junit。由于运行时不需要所以test范围依赖不会被打包。</p></li></ul><ul><li><p>system：system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中JAR文件的路径，需要指定systemPath磁盘路径，system依赖不推荐使用。</p><p><img src="https://ae01.alicdn.com/kf/H0ee4beb64aec43a1900816d05f7b7f8bq.jpg" alt="image-20200621143537961"></p></li></ul><p>在maven-web工程中测试各各scop。</p><p>测试总结：</p><ul><li><p>默认引入 的jar包 ——- compile 【默认范围 可以不写】（编译、测试、运行 都有效 ）</p></li><li><p>servlet-api 、jsp-api ——- provided （编译、测试 有效， 运行时无效，防止和tomcat下jar冲突）</p></li><li><p>jdbc驱动jar包 —- runtime （测试、运行 有效 ）</p></li><li><p>junit —– test （测试有效）</p><p>依赖范围由强到弱的顺序是：compile&gt;provided&gt;runtime&gt;test</p></li></ul><h2 id="4-4-项目中添加的坐标"><a href="#4-4-项目中添加的坐标" class="headerlink" title="4.4    项目中添加的坐标"></a>4.4    项目中添加的坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5-设置jdk编译版本"><a href="#4-5-设置jdk编译版本" class="headerlink" title="4.5    设置jdk编译版本"></a>4.5    设置jdk编译版本</h2><p>本教程使用jdk1. 8 ，需要设置编译版本为1. 8 ，这里需要使用maven的插件来设置，在pom.xml中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-6-编写servlet"><a href="#4-6-编写servlet" class="headerlink" title="4.6    编写servlet"></a>4.6    编写servlet</h2><p>在src/main/java中创建ServletTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/hello.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-编写jsp"><a href="#4-7-编写jsp" class="headerlink" title="4.7    编写jsp"></a>4.7    编写jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    hello maven</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-8-在web-xml中配置servlet访问路径"><a href="#4-8-在web-xml中配置servlet访问路径" class="headerlink" title="4.8    在web.xml中配置servlet访问路径"></a>4.8    在web.xml中配置servlet访问路径</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.wgy.servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-9-添加tomcat7插件"><a href="#4-9-添加tomcat7插件" class="headerlink" title="4.9 添加tomcat7插件"></a>4.9 添加tomcat7插件</h2><p>在pom文件中添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时点击idea最右侧Maven Projects，就可以看到我们新添加的tomcat7插件双击tomcat7插件下tomcat7:run命令直接运行项目</p><p><img src="https://ae01.alicdn.com/kf/H129b2f5826b3487190158b533cb6aa40Q.jpg" alt="image-20200621144941506"></p><p>也可以直接点击如图按钮，手动输入tomc7:run命令运行项目</p><p><img src="https://ae01.alicdn.com/kf/H401cb92b17b446228cc6885d8dc84dc5z.jpg" alt="image-20200621145031382"></p><h1 id="5-maven工程运行调试"><a href="#5-maven工程运行调试" class="headerlink" title="5.    maven工程运行调试"></a>5.    maven工程运行调试</h1><h2 id="5-1-端口占用处理"><a href="#5-1-端口占用处理" class="headerlink" title="5.1    端口占用处理"></a>5.1    端口占用处理</h2><p>重新执行tomcat:run命令重启工程，重启之前需手动停止 tomcat，否则报下边的错误：</p><p><img src="https://ae01.alicdn.com/kf/H7f73449532f44d7eabf076ea5ffa67ed3.jpg" alt="image-20200621145157103"></p><h2 id="5-2-断点调试"><a href="#5-2-断点调试" class="headerlink" title="5.2    断点调试"></a>5.2    断点调试</h2><p>点击如图所示选项</p><p><img src="https://ae01.alicdn.com/kf/H04099ade9c7e43c88dbc62b85cd15c76g.jpg" alt="image-20200621145215824"></p><p>在弹出框中点击如图加号按钮找到maven选项</p><p><img src="https://ae01.alicdn.com/kf/H434cdb9462524a228f7dc2c56e6cbdc4P.jpg" alt="image-20200621145227073"></p><p>在弹出窗口中填写如下信息</p><p><img src="https://ae01.alicdn.com/kf/Hf0b34f0b723640348286ef8eb0a216f4A.jpg" alt="image-20200621145239941"></p><p>完成后先Apply再OK结束配置后，可以在主界面找到我们刚才配置的操作名称。</p><p><img src="https://ae01.alicdn.com/kf/H553058f278084e3490ced50ca7dca178W.jpg" alt="image-20200621145257198"></p><p>如上图红框选中的两个按钮，左侧是正常启动，右侧是debug启动。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Maven-介绍&quot;&gt;&lt;a href=&quot;#1-Maven-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.    Maven  介绍&quot;&gt;&lt;/a&gt;1.    Maven  介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是-Maven&quot;&gt;&lt;a href=&quot;#1-1-什么是-Maven&quot; class=&quot;headerlink&quot; title=&quot;1.1    什么是 Maven&quot;&gt;&lt;/a&gt;1.1    什么是 Maven&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是-Maven&quot;&gt;&lt;a href=&quot;#1-1-1-什么是-Maven&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是 Maven&quot;&gt;&lt;/a&gt;1.1.1    什么是 Maven&lt;/h3&gt;&lt;p&gt;Maven 是一个项目管理工具，它包含了一个&lt;strong&gt;项目对象模型 (POM：Project Object Model)&lt;/strong&gt;，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)， 和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Maven" scheme="https://wgy1993.gitee.io/tags/Maven/"/>
    
      <category term="项目管理" scheme="https://wgy1993.gitee.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SSH</title>
    <link href="https://wgy1993.gitee.io/archives/782a8ece.html"/>
    <id>https://wgy1993.gitee.io/archives/782a8ece.html</id>
    <published>2020-06-16T05:58:26.000Z</published>
    <updated>2020-06-16T06:37:14.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SSH三大框架整合"><a href="#1-SSH三大框架整合" class="headerlink" title="1.    SSH三大框架整合"></a>1.    SSH三大框架整合</h1><h2 id="1-1-整合说明"><a href="#1-1-整合说明" class="headerlink" title="1.1    整合说明"></a>1.1    整合说明</h2><ul><li>独立式整合指的是三个框架都使用自己的配置文件。</li><li>引入式整合指的是hibernate主配置文件中的内容都配置到spring配置文件中</li><li>在整合过程中，确保每步都运行成功，然后在继续往下做。</li><li>整合中使用的案例是客户的保存和列表查询操作。</li><li>后面的三种整合方式都基于1.2中的环境准备。</li></ul><a id="more"></a><h2 id="1-2-环境准备"><a href="#1-2-环境准备" class="headerlink" title="1.2    环境准备"></a>1.2    环境准备</h2><h3 id="1-2-1-创建java-web工程"><a href="#1-2-1-创建java-web工程" class="headerlink" title="1.2.1    创建java web工程"></a>1.2.1    创建java web工程</h3><h3 id="1-2-2-创建数据库和表结构"><a href="#1-2-2-创建数据库和表结构" class="headerlink" title="1.2.2    创建数据库和表结构"></a>1.2.2    创建数据库和表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create database ssh;</span><br><span class="line">use ssh;</span><br><span class="line"></span><br><span class="line">&#x2F;*创建客户表*&#x2F;</span><br><span class="line">CREATE TABLE &#96;cst_customer&#96; (</span><br><span class="line">  &#96;cust_id&#96; bigint(32) NOT NULL AUTO_INCREMENT COMMENT &#39;客户编号(主键)&#39;,</span><br><span class="line">  &#96;cust_name&#96; varchar(32) NOT NULL COMMENT &#39;客户名称(公司名称)&#39;,</span><br><span class="line">  &#96;cust_source&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户信息来源&#39;,</span><br><span class="line">  &#96;cust_industry&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户所属行业&#39;,</span><br><span class="line">  &#96;cust_level&#96; varchar(32) DEFAULT NULL COMMENT &#39;客户级别&#39;,</span><br><span class="line">  &#96;cust_address&#96; varchar(128) DEFAULT NULL COMMENT &#39;客户联系地址&#39;,</span><br><span class="line">  &#96;cust_phone&#96; varchar(64) DEFAULT NULL COMMENT &#39;客户联系电话&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;cust_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-编写实体类"><a href="#1-2-3-编写实体类" class="headerlink" title="1.2.3    编写实体类"></a>1.2.3    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类（数据模型）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-编写业务层接口和实现类"><a href="#1-2-4-编写业务层接口和实现类" class="headerlink" title="1.2.4    编写业务层接口和实现类"></a>1.2.4    编写业务层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(ICustomerDao customerDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        customerDao.saveCustomer(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-编写持久层接口和实现类"><a href="#1-2-5-编写持久层接口和实现类" class="headerlink" title="1.2.5    编写持久层接口和实现类"></a>1.2.5    编写持久层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了所有用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"保存了用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-基于XML的独立式整合"><a href="#2-基于XML的独立式整合" class="headerlink" title="2.    基于XML的独立式整合"></a>2.    基于XML的独立式整合</h1><h2 id="2-1-保证spring框架在web工程中独立运行"><a href="#2-1-保证spring框架在web工程中独立运行" class="headerlink" title="2.1    保证spring框架在web工程中独立运行"></a>2.1    保证spring框架在web工程中独立运行</h2><h3 id="2-1-1-拷贝spring的ioc-aop和事务控制三组jar包"><a href="#2-1-1-拷贝spring的ioc-aop和事务控制三组jar包" class="headerlink" title="2.1.1    拷贝spring的ioc,aop和事务控制三组jar包"></a>2.1.1    拷贝spring的ioc,aop和事务控制三组jar包</h3><p><strong>ioc:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hb8ccc7c3ec0140b988c381995704ece78.jpg" alt="image-20200616101447459"></p><p><strong>aop:</strong></p><p><img src="https://ae01.alicdn.com/kf/H718fdd692a914188afd9b4591ee8bb47n.jpg" alt="image-20200616101517358"></p><p><strong>事务控制:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hec0f71d474664ac7a8397235ee8a155aX.jpg" alt="image-20200616101545929"></p><h3 id="2-1-2-编写spring配置文件并导入约束"><a href="#2-1-2-编写spring配置文件并导入约束" class="headerlink" title="2.1.2    编写spring配置文件并导入约束"></a>2.1.2    编写spring配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-把业务层和持久层配置到文件中"><a href="#2-1-3-把业务层和持久层配置到文件中" class="headerlink" title="2.1.3    把业务层和持久层配置到文件中"></a>2.1.3    把业务层和持久层配置到文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把资源交给spring来管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-测试spring能否独立运行"><a href="#2-1-4-测试spring能否独立运行" class="headerlink" title="2.1.4    测试spring能否独立运行"></a>2.1.4    测试spring能否独立运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类，测试spring框架可以独立运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.跟Id获取bean对象</span></span><br><span class="line">        ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">        cs.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-保证hibernate框架能够在web工程中独立运行"><a href="#2-2-保证hibernate框架能够在web工程中独立运行" class="headerlink" title="2.2    保证hibernate框架能够在web工程中独立运行"></a>2.2    保证hibernate框架能够在web工程中独立运行</h2><h3 id="2-2-1-拷贝hibernate必备jar包"><a href="#2-2-1-拷贝hibernate必备jar包" class="headerlink" title="2.2.1    拷贝hibernate必备jar包"></a>2.2.1    拷贝hibernate必备jar包</h3><p><strong>hibernate基本jar包:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hbe298bdd7e744651883d050a1237a1391.jpg" alt="image-20200616102231802"></p><p><strong>c3p0:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hc97e4b6d7de74976b88ae91ad54fe088A.jpg" alt="image-20200616102253693"></p><h3 id="2-2-2-编写实体类的映射文件"><a href="#2-2-2-编写实体类的映射文件" class="headerlink" title="2.2.2    编写实体类的映射文件"></a>2.2.2    编写实体类的映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.wgy.domain"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"custId"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custName"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custSource"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custIndustry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custLevel"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custAddress"</span> <span class="attr">column</span>=<span class="string">"cust_address"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custPhone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-编写hibernate主配置文件"><a href="#2-2-3-编写hibernate主配置文件" class="headerlink" title="2.2.3    编写hibernate主配置文件"></a>2.2.3    编写hibernate主配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Hibernate/Hibernate Configuration DTD//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一部分：连接数据库的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的方言 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.c3p0.internal.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 第三部分：映射配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/wgy/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-编写测试类-测试保存客户"><a href="#2-2-4-编写测试类-测试保存客户" class="headerlink" title="2.2.4    编写测试类-测试保存客户"></a>2.2.4    编写测试类-测试保存客户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保证hibernate框架能够独立在web工程中运行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">        c.setCustName(<span class="string">"ssh整合Customer"</span>);</span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        cfg.configure();</span><br><span class="line">        <span class="comment">//2.根据配置文件创建SessionFactory</span></span><br><span class="line">        SessionFactory factory = cfg.buildSessionFactory();</span><br><span class="line">        <span class="comment">//3.获取session</span></span><br><span class="line">        Session session = factory.getCurrentSession();</span><br><span class="line">        <span class="comment">//4.开启事务</span></span><br><span class="line">        Transaction tx = session.beginTransaction();</span><br><span class="line">        <span class="comment">//5.执行操作</span></span><br><span class="line">        session.save(c);</span><br><span class="line">        <span class="comment">//6.提交/回滚事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        factory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-整合spring和hibernate框架"><a href="#2-3-整合spring和hibernate框架" class="headerlink" title="2.3    整合spring和hibernate框架"></a>2.3    整合spring和hibernate框架</h2><h3 id="2-3-1-明确"><a href="#2-3-1-明确" class="headerlink" title="2.3.1    明确"></a>2.3.1    明确</h3><ul><li>Spring和Hibernate的整合就是spring接管SessionFactory的创建</li><li>Spring针对Hiberante的操作有一个封装的对象HibernateTemplate</li><li>和JdbcTemplate一样，HibernateTemplate也有一个HibernateDaoSupport</li><li>HibernateTemplate和HibernateDaoSupport都在spring-orm-4.2.4.RELEASE.jar中</li><li>我们Dao采用继承HiberanteDaoSupport的方式编写，它一样不能用于注解配置。</li></ul><h3 id="2-3-2-整合步骤"><a href="#2-3-2-整合步骤" class="headerlink" title="2.3.2    整合步骤"></a>2.3.2    整合步骤</h3><h4 id="2-3-2-1-在spring配置文件中配置SessionFactory"><a href="#2-3-2-1-在spring配置文件中配置SessionFactory" class="headerlink" title="2.3.2.1    在spring配置文件中配置SessionFactory"></a>2.3.2.1    在spring配置文件中配置SessionFactory</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置sessionFactory：让spring接管sessionFactory的创建</span></span><br><span class="line"><span class="comment">        用spring提供的一个SessionFactory：LocalSessionFactoryBean</span></span><br><span class="line"><span class="comment">        创建SessionFactory有三部分必不可少的信息。三部分信息在hibernate主配置文件中都有</span></span><br><span class="line"><span class="comment">        把hibernate主配置文件的位置注入进来</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-改造Dao继承HibernateDaoSupport"><a href="#2-3-2-2-改造Dao继承HibernateDaoSupport" class="headerlink" title="2.3.2.2    改造Dao继承HibernateDaoSupport"></a>2.3.2.2    改造Dao继承HibernateDaoSupport</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;Customer&gt;) getHibernateTemplate().find(<span class="string">"from Customer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        getHibernateTemplate().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-在spring配置文件中给Dao注入SessionFactory"><a href="#2-3-2-3-在spring配置文件中给Dao注入SessionFactory" class="headerlink" title="2.3.2.3    在spring配置文件中给Dao注入SessionFactory"></a>2.3.2.3    在spring配置文件中给Dao注入SessionFactory</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-测试"><a href="#2-3-2-4-测试" class="headerlink" title="2.3.2.4    测试"></a>2.3.2.4    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合spring和hibernate的测试类</span></span><br><span class="line"><span class="comment"> * spring整合Junit</span></span><br><span class="line"><span class="comment"> * 第一步：拷贝jar包</span></span><br><span class="line"><span class="comment"> * spring-junit-4.2.4.jar</span></span><br><span class="line"><span class="comment"> *  第二步：使用注解替换运行器（原来junit的main方法）</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@RunWith</span>(支持spring的main方法)</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ContextConfiguration</span>(指定spring的配置文件位置)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=&#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringHibernateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService cs;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">        c.setCustName(<span class="string">"spring hibernate customer123"</span>);</span><br><span class="line">        cs.saveCustomer(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List list = cs.findAllCustomer();</span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试结果：</span><br><span class="line">    无论保存还是查询都运行失败！</span><br><span class="line">    按常理来说，我们没有配置事务，保存失败是可以理解的。为什么查询也会失败呢？</span><br><span class="line">分析原因：</span><br><span class="line">    是由于spring的HibernateTemplate对象在使用Session时，spring创建了Session的代理对象，在这个过程中，spring对hibernate绑定Session到当前线程的配置不认识了，所以运行失败。</span><br></pre></td></tr></table></figure><h4 id="2-3-2-5-修改把Session绑定到当前线程上"><a href="#2-3-2-5-修改把Session绑定到当前线程上" class="headerlink" title="2.3.2.5    修改把Session绑定到当前线程上"></a>2.3.2.5    修改把Session绑定到当前线程上</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是hibernate把session绑定到当前线程上的配置 </span></span><br><span class="line"><span class="comment">&lt;property name="hibernate.current_session_context_class"&gt;thread&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是spring把sesion绑定到当前线程上的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span></span><br><span class="line">    org.springframework.orm.hibernate5.SpringSessionContext</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">此时再运行刚才的测试：</span><br><span class="line">    查询可以使用了。保存不能使用，原因是没有事务。</span><br></pre></td></tr></table></figure><h3 id="2-3-3-配置Spring的事务"><a href="#2-3-3-配置Spring的事务" class="headerlink" title="2.3.3    配置Spring的事务"></a>2.3.3    配置Spring的事务</h3><h4 id="2-3-3-1-配置事务管理器并注入SessionFactory"><a href="#2-3-3-1-配置事务管理器并注入SessionFactory" class="headerlink" title="2.3.3.1    配置事务管理器并注入SessionFactory"></a>2.3.3.1    配置事务管理器并注入SessionFactory</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-配置事务的通知及通知的属性"><a href="#2-3-3-2-配置事务的通知及通知的属性" class="headerlink" title="2.3.3.2    配置事务的通知及通知的属性"></a>2.3.3.2    配置事务的通知及通知的属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-配置AOP建立切入点表达式和事务通知的关系"><a href="#2-3-3-3-配置AOP建立切入点表达式和事务通知的关系" class="headerlink" title="2.3.3.3    配置AOP建立切入点表达式和事务通知的关系"></a>2.3.3.3    配置AOP建立切入点表达式和事务通知的关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 建立切入点表达式和事务通知的关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">再次测试：</span><br><span class="line">此时保存和查询都可以正常使用了。</span><br></pre></td></tr></table></figure><h2 id="2-4-保证struts2框架能够在web工程中独立运行"><a href="#2-4-保证struts2框架能够在web工程中独立运行" class="headerlink" title="2.4    保证struts2框架能够在web工程中独立运行"></a>2.4    保证struts2框架能够在web工程中独立运行</h2><h3 id="2-4-1-拷贝struts2的必备jar包"><a href="#2-4-1-拷贝struts2的必备jar包" class="headerlink" title="2.4.1    拷贝struts2的必备jar包"></a>2.4.1    拷贝struts2的必备jar包</h3><p><img src="https://ae01.alicdn.com/kf/H40fad21272de44bb9a15b08155c9b183e.jpg" alt="image-20200616104541711"></p><h3 id="2-4-2-编写struts-xml文件并导入约束"><a href="#2-4-2-编写struts-xml文件并导入约束" class="headerlink" title="2.4.2    编写struts.xml文件并导入约束"></a>2.4.2    编写struts.xml文件并导入约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;!-- 开启开发者模式 --&gt;</span><br><span class="line">    &lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-在web-xml中配置struts2的核心过滤器"><a href="#2-4-3-在web-xml中配置struts2的核心过滤器" class="headerlink" title="2.4.3    在web.xml中配置struts2的核心过滤器"></a>2.4.3    在web.xml中配置struts2的核心过滤器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-4-导入jsp页面"><a href="#2-4-4-导入jsp页面" class="headerlink" title="2.4.4    导入jsp页面"></a>2.4.4    导入jsp页面</h3><p><img src="https://ae01.alicdn.com/kf/Hb04957b5453a425e92b7c843811eac6ap.jpg" alt="image-20200616105035639"></p><h3 id="2-4-5-修改menu-jsp"><a href="#2-4-5-修改menu-jsp" class="headerlink" title="2.4.5    修改menu.jsp"></a>2.4.5    修改menu.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;A class=style2 href="$&#123;pageContext.request.contextPath&#125;/customer/addUICustomer.action"  target=main&gt;－ 新增客户&lt;/A&gt;</span><br><span class="line"></span><br><span class="line">&lt;A class=style2 href="$&#123;pageContext.request.contextPath&#125;/customer/findAllCustomer.action" target=main&gt;－ 客户列表&lt;/A&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-6-在struts-xml中配置action"><a href="#2-4-6-在struts-xml中配置action" class="headerlink" title="2.4.6    在struts.xml中配置action"></a>2.4.6    在struts.xml中配置action</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置动作 --&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;customer&quot; extends&#x3D;&quot;struts-default&quot; namespace&#x3D;&quot;&#x2F;customer&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;addUICustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;addUICustomer&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;addUICustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;findAllCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;findAllCustomer&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;findAllCustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;list.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-7-编写动作类和方法"><a href="#2-4-7-编写动作类和方法" class="headerlink" title="2.4.7    编写动作类和方法"></a>2.4.7    编写动作类和方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-8-测试"><a href="#2-4-8-测试" class="headerlink" title="2.4.8    测试"></a>2.4.8    测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：通过点击【新增客户】可以跳转到客户添加页面</span><br></pre></td></tr></table></figure><h2 id="2-5-整合spring和struts2"><a href="#2-5-整合spring和struts2" class="headerlink" title="2.5    整合spring和struts2"></a>2.5    整合spring和struts2</h2><h3 id="2-5-1-明确"><a href="#2-5-1-明确" class="headerlink" title="2.5.1    明确"></a>2.5.1    明确</h3><ul><li>spring整合struts2就是让spring接管action的创建</li><li>action是多例的，配置到spring中需要设置scope属性为多例</li></ul><h3 id="2-5-2-整合步骤"><a href="#2-5-2-整合步骤" class="headerlink" title="2.5.2    整合步骤"></a>2.5.2    整合步骤</h3><h4 id="2-5-2-1-拷贝spring整合struts的jar包"><a href="#2-5-2-1-拷贝spring整合struts的jar包" class="headerlink" title="2.5.2.1    拷贝spring整合struts的jar包"></a>2.5.2.1    拷贝spring整合struts的jar包</h4><p><img src="https://ae01.alicdn.com/kf/H2ac7eff489b74702a2f9ad7eb8c547e5U.jpg" alt="image-20200616105845398"></p><h4 id="2-5-2-2-在action中使用构造函数获取Service对象"><a href="#2-5-2-2-在action中使用构造函数获取Service对象" class="headerlink" title="2.5.2.2    在action中使用构造函数获取Service对象"></a>2.5.2.2    在action中使用构造函数获取Service对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerService</span><span class="params">(ICustomerService customerService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerService = customerService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此种方式根本不能用，因为由于动作类是多例的，每次都会创建新的容器，导致容器中的bean也会创建新的。</span></span><br><span class="line"><span class="comment">//public CustomerAction()&#123;</span></span><br><span class="line"><span class="comment">//ApplicationContext ac = new  ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line"><span class="comment">//System.out.println(ac);</span></span><br><span class="line"><span class="comment">//ICustomerService cs = (ICustomerService) ac.getBean("customerService");</span></span><br><span class="line"><span class="comment">//this.setCustomerService(cs);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此种方式解决了容器多例的问题，保证了容器一个应用只有一个，但是我们的代码边臃肿了，每个action都需要这么写一下。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerAction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletContext application = ServletActionContext.getServletContext();</span><br><span class="line">        ApplicationContext ac = WebApplicationContextUtils.getWebApplicationContext(application);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">        ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">        <span class="keyword">this</span>.setCustomerService(cs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">        customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customers = customers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-3-测试"><a href="#2-5-2-3-测试" class="headerlink" title="2.5.2.3    测试"></a>2.5.2.3    测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果：查询客户列表测试通过。</span><br></pre></td></tr></table></figure><h2 id="2-6-优化配置"><a href="#2-6-优化配置" class="headerlink" title="2.6    优化配置"></a>2.6    优化配置</h2><h3 id="2-6-1-配置spring的监听器"><a href="#2-6-1-配置spring的监听器" class="headerlink" title="2.6.1    配置spring的监听器"></a>2.6.1    配置spring的监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在上面2.5.2.2小节中有这么一句：</span><br><span class="line">    由于动作类是多例的，每次都会创建容器，导致资源的浪费。一个应用应该只有一个容器</span><br><span class="line">问题：</span><br><span class="line">    如何解决呢？</span><br><span class="line">答案：</span><br><span class="line">    只要让容器在应用加载时创建，应用卸载时销毁就可以。</span><br><span class="line">问题：</span><br><span class="line">    我们怎么知道应用何时加载了呢？</span><br><span class="line">答案：</span><br><span class="line">    ServletContext对象创建了，就表示当前应用已经被服务器加载了。</span><br><span class="line">问题：</span><br><span class="line">    我们怎么知道ServletContext对象创建了呢？</span><br><span class="line">答案：</span><br><span class="line">    ServletContextListener监听器可以监听到ServletContext对象的创建和销毁。</span><br><span class="line"></span><br><span class="line">Spring框架为我们提供了一个监听器：ContextLoaderListener。</span><br><span class="line">它是ServletContextListener接口的实现类，负责监听ServletContext对象的创建，为我们创建容器，监听ServletContext对象的销毁，销毁容器。</span><br><span class="line">我们只需要配置上即可。</span><br><span class="line">ContextLoaderListener在spring-web-4.2.4.RELEASE.jar中</span><br></pre></td></tr></table></figure><p><strong>在web.xml中配置监听器：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">当配置了此监听器后，就不需要使用Action的构造函数了，可以把构造函数那段删除了。</span><br><span class="line">此监听器只能读取WEB-INF目录中的名称为applicationContext.xml的配置文件。这显然限制了我们的配置。</span><br><span class="line">我们可以通过配置全局初始化参数的方式，指定spring配置文件的位置.</span><br></pre></td></tr></table></figure><h3 id="2-6-2-配置指定spring配置文件的位置"><a href="#2-6-2-配置指定spring配置文件的位置" class="headerlink" title="2.6.2    配置指定spring配置文件的位置"></a>2.6.2    配置指定spring配置文件的位置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 手动指定spring的配置文件位置，需要使用ServletContext的初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-3-分文件编写spring配置"><a href="#2-6-3-分文件编写spring配置" class="headerlink" title="2.6.3    分文件编写spring配置"></a>2.6.3    分文件编写spring配置</h3><p>我们写到这里，其实搭建环境已经基本结束了，但是发现spring的配置文件杂乱无章，使我们在找配置的时候，很难一下找到。所以我们采用分配置文件编写的方式。</p><h4 id="2-6-3-1-编写主配置文件引入其他配置文件"><a href="#2-6-3-1-编写主配置文件引入其他配置文件" class="headerlink" title="2.6.3.1    编写主配置文件引入其他配置文件"></a>2.6.3.1    编写主配置文件引入其他配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入其他spring配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-customer.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-jdbc.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-tx.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-3-2-编写针对需求的配置文件applicationContext-customer-xml"><a href="#2-6-3-2-编写针对需求的配置文件applicationContext-customer-xml" class="headerlink" title="2.6.3.2    编写针对需求的配置文件applicationContext-customer.xml"></a>2.6.3.2    编写针对需求的配置文件applicationContext-customer.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-3-3-编写数据库连接的配置文件applicationContext-jdbc-xml"><a href="#2-6-3-3-编写数据库连接的配置文件applicationContext-jdbc-xml" class="headerlink" title="2.6.3.3    编写数据库连接的配置文件applicationContext-jdbc.xml"></a>2.6.3.3    编写数据库连接的配置文件applicationContext-jdbc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用的是hibernate主配置文件中的内容，我们只需要指定hibernate配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:config/hibernate/hibernate.cfg.xml"</span>&gt;</span>/&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-3-4-编写事务控制的配置文件applicationContext-tx-xml"><a href="#2-6-3-4-编写事务控制的配置文件applicationContext-tx-xml" class="headerlink" title="2.6.3.4    编写事务控制的配置文件applicationContext-tx.xml"></a>2.6.3.4    编写事务控制的配置文件applicationContext-tx.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和事务相关的配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务的属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 建立切入点表达式和事务通知的关联 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-4-配置指定struts2配置文件位置"><a href="#2-6-4-配置指定struts2配置文件位置" class="headerlink" title="2.6.4    配置指定struts2配置文件位置"></a>2.6.4    配置指定struts2配置文件位置</h3><p>我们的spring和hibernate配置文件都存到了src/config/的对应包中了，只有struts2配置文件还在类的根路径下，它也可以通过配置的方式指定struts.xml的位置。配置的是过滤器的初始化参数。初始化参数的name和value都是固定写法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 手动指定struts2配置文件的位置：此处的配置绝大多数都是固定的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>struts-default.xml,struts-plugin.xml,config/struts/struts.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-5-分文件编写struts2配置文件"><a href="#2-6-5-分文件编写struts2配置文件" class="headerlink" title="2.6.5    分文件编写struts2配置文件"></a>2.6.5    分文件编写struts2配置文件</h3><p>当我们后面做的模块越来越多，struts2一个配置文件写起来也会杂乱无章，所以我们也可以把struts2的配置文件分开编写。</p><h4 id="2-6-5-1-编写struts2的主配置文件struts-xml"><a href="#2-6-5-1-编写struts2的主配置文件struts-xml" class="headerlink" title="2.6.5.1    编写struts2的主配置文件struts.xml"></a>2.6.5.1    编写struts2的主配置文件struts.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启开发者模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置公共包，有公共的配置就写在此处--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"myDefault"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入其他struts2配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"config/struts/struts-customer.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-5-2-针对不同模块编写不同的配置文件struts-customer-xml"><a href="#2-6-5-2-针对不同模块编写不同的配置文件struts-customer-xml" class="headerlink" title="2.6.5.2    针对不同模块编写不同的配置文件struts-customer.xml"></a>2.6.5.2    针对不同模块编写不同的配置文件struts-customer.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置和客户管理相关的动作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">extends</span>=<span class="string">"myDefault"</span> <span class="attr">namespace</span>=<span class="string">"/customer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/jsp/customer/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"findAllCustomer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span>&gt;</span>/jsp/customer/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-6-管理Action的两种方式"><a href="#2-6-6-管理Action的两种方式" class="headerlink" title="2.6.6    管理Action的两种方式"></a>2.6.6    管理Action的两种方式</h3><h4 id="2-6-6-1-让struts2自己来管理"><a href="#2-6-6-1-让struts2自己来管理" class="headerlink" title="2.6.6.1    让struts2自己来管理"></a>2.6.6.1    让struts2自己来管理</h4><p>此种方式就是在action标签的class属性中提供动作类的全限定类名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/jsp/customer/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-6-2-让spring来管理（实际开发中采用的方式）"><a href="#2-6-6-2-让spring来管理（实际开发中采用的方式）" class="headerlink" title="2.6.6.2    让spring来管理（实际开发中采用的方式）"></a>2.6.6.2    让spring来管理（实际开发中采用的方式）</h4><p>此种方式就是在spring配置文件中配置Action，在struts2配置文件action标签的class属性里写bean的id。</p><p><strong>spring配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"com.wgy.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>struts2配置文件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;addUICustomer&quot; class&#x3D;&quot;customerAction&quot; method&#x3D;&quot;addUICustomer&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;addUICustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h1 id="3-基于XML的引入式整合"><a href="#3-基于XML的引入式整合" class="headerlink" title="3.    基于XML的引入式整合"></a>3.    基于XML的引入式整合</h1><h2 id="3-1-明确"><a href="#3-1-明确" class="headerlink" title="3.1    明确"></a>3.1    明确</h2><p>引入式整合就是把hibernate.cfg.xml中的配置都挪到spring的配置文件中</p><h2 id="3-2-配置方式"><a href="#3-2-配置方式" class="headerlink" title="3.2    配置方式"></a>3.2    配置方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 和jdbc配置相关的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一部分：连接数据库的  用连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库的方言 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span></span><br><span class="line">                org.springframework.orm.hibernate5.SpringSessionContext</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第三部分：映射文件的位置</span></span><br><span class="line"><span class="comment">    mappingResources：它是一个注入string数组类型的数据。提供的是映射文件的位置。有几个映射文件，就需要写几个。</span></span><br><span class="line"><span class="comment">    mappingDirectoryLocations：它是注入一个Resource类型的数组。提供的是映射文件所在的目录。此属性一般多用于一个项目有多个地方存放映射配置。</span></span><br><span class="line"><span class="comment">            //服务端</span></span><br><span class="line"><span class="comment">                server_domain</span></span><br><span class="line"><span class="comment">            //移动端</span></span><br><span class="line"><span class="comment">                mobile_domain</span></span><br><span class="line"><span class="comment">    mappingLocations：它是注入一个Resource类型的数组。提供的映射文件的位置。它可以使用通配符。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/wgy/domain/*.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssh"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-基于注解的整合"><a href="#4-基于注解的整合" class="headerlink" title="4.    基于注解的整合"></a>4.    基于注解的整合</h1><h2 id="4-1-明确"><a href="#4-1-明确" class="headerlink" title="4.1    明确"></a>4.1    明确</h2><ul><li>注解整合仍然使用上面的环境，就是把xml的配置全部换成注解</li><li>spring的注解整合有两种方式，一种是用xml文件，一种是纯注解。</li><li>hibernate注解整合是把实体类映射改为JPA注解映射</li></ul><h2 id="4-2-整合步骤-spring使用xml文件"><a href="#4-2-整合步骤-spring使用xml文件" class="headerlink" title="4.2    整合步骤-spring使用xml文件"></a>4.2    整合步骤-spring使用xml文件</h2><h3 id="4-2-1-spring配置使用注解实现"><a href="#4-2-1-spring配置使用注解实现" class="headerlink" title="4.2.1    spring配置使用注解实现"></a>4.2.1    spring配置使用注解实现</h3><h4 id="4-2-1-1-在spring配置文件中配置要扫描的包"><a href="#4-2-1-1-在spring配置文件中配置要扫描的包" class="headerlink" title="4.2.1.1    在spring配置文件中配置要扫描的包"></a>4.2.1.1    在spring配置文件中配置要扫描的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring运行要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-2-把action-service和dao都用注解配置"><a href="#4-2-1-2-把action-service和dao都用注解配置" class="headerlink" title="4.2.1.2    把action,service和dao都用注解配置"></a>4.2.1.2    把action,service和dao都用注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"customerAction"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    <span class="comment">//action中的方法不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    <span class="comment">//service中的方法不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//dao中必须自己定义HibernateTemplate，不能继承HibernateDaoSupport了</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HibernateTemplate hibernateTemplate;</span><br><span class="line">    <span class="comment">//dao中的方法不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-1-3-在spring配置文件中配置HiernateTemplate"><a href="#4-2-1-3-在spring配置文件中配置HiernateTemplate" class="headerlink" title="4.2.1.3    在spring配置文件中配置HiernateTemplate"></a>4.2.1.3    在spring配置文件中配置HiernateTemplate</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-4-在spring配置文件中配置事务管理器"><a href="#4-2-1-4-在spring配置文件中配置事务管理器" class="headerlink" title="4.2.1.4    在spring配置文件中配置事务管理器"></a>4.2.1.4    在spring配置文件中配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-5-在spring配置文件中开启spring对注解事务的支持"><a href="#4-2-1-5-在spring配置文件中开启spring对注解事务的支持" class="headerlink" title="4.2.1.5    在spring配置文件中开启spring对注解事务的支持"></a>4.2.1.5    在spring配置文件中开启spring对注解事务的支持</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1-6-在客户的业务层实现类上使用-Transactional注解"><a href="#4-2-1-6-在客户的业务层实现类上使用-Transactional注解" class="headerlink" title="4.2.1.6    在客户的业务层实现类上使用@Transactional注解"></a>4.2.1.6    在客户的业务层实现类上使用@Transactional注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>, propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"customerDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>, propagation = Propagation.SUPPORTS)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        customerDao.saveCustomer(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-hibernate映射使用注解配置实现"><a href="#4-2-2-hibernate映射使用注解配置实现" class="headerlink" title="4.2.2    hibernate映射使用注解配置实现"></a>4.2.2    hibernate映射使用注解配置实现</h3><h4 id="4-2-2-1-实体类映射注解配置"><a href="#4-2-2-1-实体类映射注解配置" class="headerlink" title="4.2.2.1    实体类映射注解配置"></a>4.2.2.1    实体类映射注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> *  JPA规范：java 持久化规范</span></span><br><span class="line"><span class="comment"> *  注解全都是JPA规范的。</span></span><br><span class="line"><span class="comment"> *  导包都需要导入javax.persistence包下的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-2-spring中SessionFactory配置修改"><a href="#4-2-2-2-spring中SessionFactory配置修改" class="headerlink" title="4.2.2.2    spring中SessionFactory配置修改"></a>4.2.2.2    spring中SessionFactory配置修改</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一部分：连接数据库的  用连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库的方言 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span></span><br><span class="line">                org.springframework.orm.hibernate5.SpringSessionContext</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第三部分：指定实体类所在的包，当创建SessionFactory,会去该包中扫描实体类上的注解，从而生成映射配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.wgy.domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-struts2配置使用注解实现"><a href="#4-2-3-struts2配置使用注解实现" class="headerlink" title="4.2.3    struts2配置使用注解实现"></a>4.2.3    struts2配置使用注解实现</h3><h4 id="4-2-3-1-导入struts2注解的jar包"><a href="#4-2-3-1-导入struts2注解的jar包" class="headerlink" title="4.2.3.1    导入struts2注解的jar包"></a>4.2.3.1    导入struts2注解的jar包</h4><p><img src="https://ae01.alicdn.com/kf/H06baf8545a2f453690b05db1353cd31cG.jpg" alt="image-20200616123024972"></p><h4 id="4-2-3-2-使用注解配置Action"><a href="#4-2-3-2-使用注解配置Action" class="headerlink" title="4.2.3.2    使用注解配置Action"></a>4.2.3.2    使用注解配置Action</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"customerAction"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="comment">//-------以下都是struts2的注解-----------</span></span><br><span class="line"><span class="meta">@ParentPackage</span>(<span class="string">"struts-default"</span>)<span class="comment">//指定当前包的父包</span></span><br><span class="line"><span class="meta">@Namespace</span>(<span class="string">"/customer"</span>)<span class="comment">//指定名称空间，访问当前action的所有方法都需要有名称空间</span></span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(name = <span class="string">"addUICustomer"</span>, type = <span class="string">"dispatcher"</span>, location = <span class="string">"/jsp/customer/add.jsp"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(name = <span class="string">"findAllCustomer"</span>, type = <span class="string">"dispatcher"</span>, location = <span class="string">"/jsp/customer/list.jsp"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(name = <span class="string">"listCustomer"</span>, type = <span class="string">"redirectAction"</span>, location = <span class="string">"findAllCustomer"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"customerService"</span>)</span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"findAllCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">        customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addUICustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.saveCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"listCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customers = customers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-3-指定struts2开发模式"><a href="#4-2-3-3-指定struts2开发模式" class="headerlink" title="4.2.3.3    指定struts2开发模式"></a>4.2.3.3    指定struts2开发模式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>struts.devMode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SSH三大框架整合&quot;&gt;&lt;a href=&quot;#1-SSH三大框架整合&quot; class=&quot;headerlink&quot; title=&quot;1.    SSH三大框架整合&quot;&gt;&lt;/a&gt;1.    SSH三大框架整合&lt;/h1&gt;&lt;h2 id=&quot;1-1-整合说明&quot;&gt;&lt;a href=&quot;#1-1-整合说明&quot; class=&quot;headerlink&quot; title=&quot;1.1    整合说明&quot;&gt;&lt;/a&gt;1.1    整合说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;独立式整合指的是三个框架都使用自己的配置文件。&lt;/li&gt;
&lt;li&gt;引入式整合指的是hibernate主配置文件中的内容都配置到spring配置文件中&lt;/li&gt;
&lt;li&gt;在整合过程中，确保每步都运行成功，然后在继续往下做。&lt;/li&gt;
&lt;li&gt;整合中使用的案例是客户的保存和列表查询操作。&lt;/li&gt;
&lt;li&gt;后面的三种整合方式都基于1.2中的环境准备。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Hibernate" scheme="https://wgy1993.gitee.io/tags/Hibernate/"/>
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Spring(四)</title>
    <link href="https://wgy1993.gitee.io/archives/924a9eab.html"/>
    <id>https://wgy1993.gitee.io/archives/924a9eab.html</id>
    <published>2020-06-14T09:18:35.000Z</published>
    <updated>2020-06-14T09:43:21.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring中的JdbcTemplate"><a href="#1-Spring中的JdbcTemplate" class="headerlink" title="1.    Spring中的JdbcTemplate"></a>1.    Spring中的JdbcTemplate</h1><h2 id="1-1-JdbcTemplate概述"><a href="#1-1-JdbcTemplate概述" class="headerlink" title="1.1    JdbcTemplate概述"></a>1.1    JdbcTemplate概述</h2><p>它是spring框架中提供的一个对象，是对原始Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类，入下图所示：</p><p><img src="https://ae01.alicdn.com/kf/Hf09002ccceea433f99d07c8167dfe272U.jpg" alt="img"></p><a id="more"></a><p>我们今天的主角在<strong>spring-jdbc-4.24.RELEASE.jar</strong>中，我们在导包的时候，除了要导入这个jar包外，还需要导入一个<strong>spring-tx-4.2.4.RELEASE.jar</strong>（它是和事务相关的）。</p><h2 id="1-2-JdbcTemplate对象的创建"><a href="#1-2-JdbcTemplate对象的创建" class="headerlink" title="1.2    JdbcTemplate对象的创建"></a>1.2    JdbcTemplate对象的创建</h2><p>我们可以参考它的源码，来一探究竟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    setDataSource(dataSource);</span><br><span class="line">    afterPropertiesSet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcTemplate</span><span class="params">(DataSource dataSource, <span class="keyword">boolean</span> lazyInit)</span> </span>&#123;</span><br><span class="line">    setDataSource(dataSource);</span><br><span class="line">    setLazyInit(lazyInit);</span><br><span class="line">    afterPropertiesSet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了默认构造函数之外，都需要提供一个数据源。既然有set方法，依据我们之前学过的依赖注入，我们可不可以在配置文件中配置呢？</p><p>答案是肯定的。</p><h2 id="1-3-Spring中配置数据源"><a href="#1-3-Spring中配置数据源" class="headerlink" title="1.3    Spring中配置数据源"></a>1.3    Spring中配置数据源</h2><h3 id="1-3-1-环境搭建"><a href="#1-3-1-环境搭建" class="headerlink" title="1.3.1    环境搭建"></a>1.3.1    环境搭建</h3><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h3 id="1-3-2-编写Spring的配置文件"><a href="#1-3-2-编写Spring的配置文件" class="headerlink" title="1.3.2    编写Spring的配置文件"></a>1.3.2    编写Spring的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-配置数据源"><a href="#1-3-3-配置数据源" class="headerlink" title="1.3.3    配置数据源"></a>1.3.3    配置数据源</h3><p>我们之前已经接触过了两个数据源，一个是C3P0，一个是DBCP。要想使用这两数据源都需要导入对应的jar包。</p><h4 id="1-3-3-1-配置C3P0数据源"><a href="#1-3-3-1-配置C3P0数据源" class="headerlink" title="1.3.3.1    配置C3P0数据源"></a>1.3.3.1    配置C3P0数据源</h4><p><strong>导包:</strong></p><p><img src="https://ae01.alicdn.com/kf/Hff80e0fe555c4f3c83c7dfbc09891e8eZ.jpg" alt="image-20200614142943344"></p><p><strong>在Spring的配置文件中配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-2-配置DBCP数据源"><a href="#1-3-3-2-配置DBCP数据源" class="headerlink" title="1.3.3.2    配置DBCP数据源"></a>1.3.3.2    配置DBCP数据源</h4><p><strong>导包:</strong></p><p><img src="https://ae01.alicdn.com/kf/H444aa6751fa84eadab7c19c25f7f60411.jpg" alt="image-20200614143326520"></p><p><strong>在Spring的配置文件中配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-3-配置spring内置数据源"><a href="#1-3-3-3-配置spring内置数据源" class="headerlink" title="1.3.3.3    配置spring内置数据源"></a>1.3.3.3    配置spring内置数据源</h4><p>spring框架也提供了一个内置数据源，我们也可以使用spring的内置数据源，它就在<code>spring-jdbc-4.2.4.REEASE.jar</code>包中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-将数据库连接的信息配置到属性文件中"><a href="#1-3-4-将数据库连接的信息配置到属性文件中" class="headerlink" title="1.3.4    将数据库连接的信息配置到属性文件中:"></a>1.3.4    将数据库连接的信息配置到属性文件中:</h3><p><strong>定义属性文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>引入外部的属性文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一种方式:</span><br><span class="line">&lt;!-- 引入外部属性文件： --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;location&quot; value&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">二种方式:</span><br><span class="line">&lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="1-4-JdbcTemplate的增删改查操作"><a href="#1-4-JdbcTemplate的增删改查操作" class="headerlink" title="1.4    JdbcTemplate的增删改查操作"></a>1.4    JdbcTemplate的增删改查操作</h2><h3 id="1-4-1-前期准备"><a href="#1-4-1-前期准备" class="headerlink" title="1.4.1    前期准备"></a>1.4.1    前期准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">创建数据库：</span><br><span class="line">create database spring;</span><br><span class="line">use spring;</span><br><span class="line"></span><br><span class="line">创建表：</span><br><span class="line">create table account(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(40),</span><br><span class="line">    money float</span><br><span class="line">)character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-在spring配置文件中配置JdbcTemplate"><a href="#1-4-2-在spring配置文件中配置JdbcTemplate" class="headerlink" title="1.4.2    在spring配置文件中配置JdbcTemplate"></a>1.4.2    在spring配置文件中配置JdbcTemplate</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-3-最基本使用"><a href="#1-4-3-最基本使用" class="headerlink" title="1.4.3    最基本使用"></a>1.4.3    最基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        jt.execute(<span class="string">"insert into account(name,money)values('eee',500)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-4-保存操作"><a href="#1-4-4-保存操作" class="headerlink" title="1.4.4    保存操作"></a>1.4.4    保存操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        jt.update(<span class="string">"insert into account(name,money)values(?,?)"</span>,<span class="string">"fff"</span>,<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-5-更新操作"><a href="#1-4-5-更新操作" class="headerlink" title="1.4.5    更新操作"></a>1.4.5    更新操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        jt.update(<span class="string">"update account set money = money-? where id = ?"</span>,<span class="number">300</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-6-删除操作"><a href="#1-4-6-删除操作" class="headerlink" title="1.4.6    删除操作"></a>1.4.6    删除操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        jt.update(<span class="string">"delete from account where id = ?"</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-7-查询所有操作"><a href="#1-4-7-查询所有操作" class="headerlink" title="1.4.7    查询所有操作"></a>1.4.7    查询所有操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ? "</span>,<span class="keyword">new</span> AccountRowMapper(), <span class="number">500</span>);</span><br><span class="line">        <span class="keyword">for</span>(Account o : accounts)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.跟id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),1000)</span>;</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-8-查询一个操作"><a href="#1-4-8-查询一个操作" class="headerlink" title="1.4.8    查询一个操作"></a>1.4.8    查询一个操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用RowMapper的方式：常用的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        List&lt;Account&gt; as = jt.query(<span class="string">"select * from account where id = ? "</span>, <span class="keyword">new</span> AccountRowMapper(), <span class="number">55</span>);</span><br><span class="line">        System.out.println(as.isEmpty()?<span class="string">"没有结果"</span>:as.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ResultSetExtractor的方式:不常用的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        Account account = jt.query(<span class="string">"select * from account where id = ?"</span>,<span class="keyword">new</span> AccountResultSetExtractor(),<span class="number">3</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-9-查询返回一行一列操作"><a href="#1-4-9-查询返回一行一列操作" class="headerlink" title="1.4.9    查询返回一行一列操作"></a>1.4.9    查询返回一行一列操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1.获取Spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        <span class="comment">//查询返回一行一列：使用聚合函数，在不使用group by字句时，都是返回一行一列。最长用的就是分页中获取总记录条数</span></span><br><span class="line">        <span class="comment">//queryForObject是spring 3.x之后的新方法，在spring2.x的时候，它的方法是多个：queryForInt  queryForLong queryForShort</span></span><br><span class="line">        Integer total = jt.queryForObject(<span class="string">"select count(*) from account where money &gt; ? "</span>,Integer<span class="class">.<span class="keyword">class</span>,500)</span>;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-在dao中使用JdbcTemplate"><a href="#1-5-在dao中使用JdbcTemplate" class="headerlink" title="1.5    在dao中使用JdbcTemplate"></a>1.5    在dao中使用JdbcTemplate</h2><h3 id="1-5-1-准备实体类"><a href="#1-5-1-准备实体类" class="headerlink" title="1.5.1    准备实体类"></a>1.5.1    准备实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-第一种方式：在dao中定义JdbcTemplate"><a href="#1-5-2-第一种方式：在dao中定义JdbcTemplate" class="headerlink" title="1.5.2    第一种方式：在dao中定义JdbcTemplate"></a>1.5.2    第一种方式：在dao中定义JdbcTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> * 此版本的dao，需要给dao注入JdbcTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =  jdbcTemplate.query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =  jdbcTemplate.query(<span class="string">"select * from account where name = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set money = ? where id = ? "</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入jdbcTemplate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-第二种方式：让dao继承JdbcDaoSupport"><a href="#1-5-3-第二种方式：让dao继承JdbcDaoSupport" class="headerlink" title="1.5.3    第二种方式：让dao继承JdbcDaoSupport"></a>1.5.3    第二种方式：让dao继承JdbcDaoSupport</h3><p>JdbcDaoSupport是spring框架为我们提供的一个类，该类中定义了一个JdbcTemplate对象，我们可以直接获取使用，但是要想创建该对象，需要为其提供一个数据源：具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">extends</span> <span class="title">DaoSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate; </span><br><span class="line">    <span class="comment">//set方法注入数据源，判断是否注入了，注入了就创建JdbcTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.jdbcTemplate == <span class="keyword">null</span> || dataSource != <span class="keyword">this</span>.jdbcTemplate.getDataSource()) &#123;<span class="comment">//如果提供了数据源就创建JdbcTemplate</span></span><br><span class="line">            <span class="keyword">this</span>.jdbcTemplate = createJdbcTemplate(dataSource);</span><br><span class="line">            initTemplateConfig();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用数据源创建JdcbTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当然，我们也可以通过注入JdbcTemplate对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">        initTemplateConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用getJdbcTmeplate方法获取操作模板对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> * 此版本dao，只需要给它的父类注入一个数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl2</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        List&lt;Account&gt; list =  getJdbcTemplate().query(<span class="string">"select * from account where name = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getJdbcTemplate()方法是从父类上继承下来的。</span></span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ? "</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置dao2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao2"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl2"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-4-两种方式有什么区别呢？"><a href="#1-5-4-两种方式有什么区别呢？" class="headerlink" title="1.5.4    两种方式有什么区别呢？"></a>1.5.4    两种方式有什么区别呢？</h3><ul><li><p>第一种在Dao类中定义JdbcTemplate的方式，适用于所有配置方式（xml和注解都可以）。</p></li><li><p>第二种让Dao继承JdbcDaoSupport的方式，只能用于基于XML的方式，注解用不了。</p></li></ul><h1 id="2-Spring中的事务控制"><a href="#2-Spring中的事务控制" class="headerlink" title="2.    Spring中的事务控制"></a>2.    Spring中的事务控制</h1><h2 id="2-1-Spring中事务控制的API介绍"><a href="#2-1-Spring中事务控制的API介绍" class="headerlink" title="2.1    Spring中事务控制的API介绍"></a>2.1    Spring中事务控制的API介绍</h2><h3 id="2-1-1-PlatformTransactionManager"><a href="#2-1-1-PlatformTransactionManager" class="headerlink" title="2.1.1    PlatformTransactionManager"></a>2.1.1    <code>PlatformTransactionManager</code></h3><p>此接口是spring的事务管理器，它里面提供了我们常用的操作事务的方法，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H0f9aa6efc8be47fab0818bd43da1656fb.jpg" alt="img"></p><p>我们在开发中都是使用它的实现类，如下图：</p><p><img src="https://ae01.alicdn.com/kf/H1a51ab25240f4c97aea81673cd0c7723f.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">真正管理事务的对象</span><br><span class="line">    org.springframework.jdbc.datasource.DataSourceTransactionManager使用Spring JDBC或iBatis 进行持久化数据时使用</span><br><span class="line">    org.springframework.orm.hibernate3.HibernateTransactionManager使用Hibernate版本进行持久化数据时使用</span><br></pre></td></tr></table></figure><h3 id="2-1-2-TransactionDefinition"><a href="#2-1-2-TransactionDefinition" class="headerlink" title="2.1.2    TransactionDefinition"></a>2.1.2    <code>TransactionDefinition</code></h3><p>它是事务的定义信息对象，里面有如下方法：</p><p><img src="https://ae01.alicdn.com/kf/Hbcc523b82b82441fa1149ce6b1e6f947e.jpg" alt="img"></p><h4 id="2-1-2-1-事务的隔离级别"><a href="#2-1-2-1-事务的隔离级别" class="headerlink" title="2.1.2.1    事务的隔离级别"></a>2.1.2.1    事务的隔离级别</h4><p><img src="https://ae01.alicdn.com/kf/H69719094b80344b0a9c19a2b7e369477m.jpg" alt="img"></p><h4 id="2-1-2-2-事务的传播行为"><a href="#2-1-2-2-事务的传播行为" class="headerlink" title="2.1.2.2    事务的传播行为"></a>2.1.2.2    事务的传播行为</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REQUIRED:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</span><br><span class="line">SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</span><br><span class="line">MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常</span><br><span class="line">REQUERS_NEW:新建事务，如果当前在事务中，把当前事务挂起。</span><br><span class="line">NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</span><br><span class="line">NEVER:以非事务方式运行，如果当前存在事务，抛出异常</span><br><span class="line">NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行REQUIRED类似的操作。</span><br></pre></td></tr></table></figure><h4 id="2-1-2-3-超时时间"><a href="#2-1-2-3-超时时间" class="headerlink" title="2.1.2.3    超时时间"></a>2.1.2.3    超时时间</h4><p>默认值是-1，没有超时限制。如果有，以秒为单位进行设置。</p><h4 id="2-1-2-4-是否是只读事务"><a href="#2-1-2-4-是否是只读事务" class="headerlink" title="2.1.2.4    是否是只读事务"></a>2.1.2.4    是否是只读事务</h4><p>建议查询时设置为只读</p><h3 id="2-1-3-TransactionStatus"><a href="#2-1-3-TransactionStatus" class="headerlink" title="2.1.3    TransactionStatus"></a>2.1.3    <code>TransactionStatus</code></h3><p>此接口提供的是事务具体的运行状态，方法介绍如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hb9f80860a64c459ea48687e8ee5a8ae5s.jpg" alt="img"></p><h2 id="2-2-基于XML的声明式事务控制（配置方式）"><a href="#2-2-基于XML的声明式事务控制（配置方式）" class="headerlink" title="2.2    基于XML的声明式事务控制（配置方式）"></a>2.2    基于XML的声明式事务控制（配置方式）</h2><h3 id="2-2-1-环境搭建"><a href="#2-2-1-环境搭建" class="headerlink" title="2.2.1    环境搭建"></a>2.2.1    环境搭建</h3><h4 id="2-2-1-1-拷贝必要的jar"><a href="#2-2-1-1-拷贝必要的jar" class="headerlink" title="2.2.1.1    拷贝必要的jar"></a>2.2.1.1    拷贝必要的jar</h4><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h4 id="2-2-1-2-创建spring的配置文件并导入约束"><a href="#2-2-1-2-创建spring的配置文件并导入约束" class="headerlink" title="2.2.1.2    创建spring的配置文件并导入约束"></a>2.2.1.2    创建spring的配置文件并导入约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-3-准备实体类"><a href="#2-2-1-3-准备实体类" class="headerlink" title="2.2.1.3    准备实体类"></a>2.2.1.3    准备实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-4-编写业务层接口和实现类"><a href="#2-2-1-4-编写业务层接口和实现类" class="headerlink" title="2.2.1.4    编写业务层接口和实现类"></a>2.2.1.4    编写业务层接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;<span class="comment">//查</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceName转出账户名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targeName转入账户名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName,String targeName,Float money)</span></span>;<span class="comment">//增删改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName);</span><br><span class="line">        <span class="comment">//2.修改两个账户的金额</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);<span class="comment">//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱</span></span><br><span class="line">        <span class="comment">//3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-5-编写Dao接口和实现类"><a href="#2-2-1-5-编写Dao接口和实现类" class="headerlink" title="2.2.1.5    编写Dao接口和实现类"></a>2.2.1.5    编写Dao接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> * 此版本dao，只需要给它的父类注入一个数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =  getJdbcTemplate().query(<span class="string">"select * from account where name = ? "</span>,<span class="keyword">new</span> AccountRowMapper(),name);</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ? "</span>,account.getMoney(),account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的封装类RowMapper的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-6-在配置文件中配置业务层和持久层"><a href="#2-2-1-6-在配置文件中配置业务层和持久层" class="headerlink" title="2.2.1.6    在配置文件中配置业务层和持久层"></a>2.2.1.6    在配置文件中配置业务层和持久层</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-配置步骤"><a href="#2-2-2-配置步骤" class="headerlink" title="2.2.2    配置步骤"></a>2.2.2    配置步骤</h3><h4 id="2-2-2-1-配置事务管理器"><a href="#2-2-2-1-配置事务管理器" class="headerlink" title="2.2.2.1    配置事务管理器"></a>2.2.2.1    配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-配置事务的通知引用事务管理器"><a href="#2-2-2-2-配置事务的通知引用事务管理器" class="headerlink" title="2.2.2.2    配置事务的通知引用事务管理器"></a>2.2.2.2    配置事务的通知引用事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-配置事务的属性"><a href="#2-2-2-3-配置事务的属性" class="headerlink" title="2.2.2.3    配置事务的属性"></a>2.2.2.3    配置事务的属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在tx:advice标签内部 配置事务的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定方法名称：是业务核心方法 </span></span><br><span class="line"><span class="comment">        read-only：是否是只读事务。默认false，不只读。</span></span><br><span class="line"><span class="comment">        isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。 </span></span><br><span class="line"><span class="comment">        propagation：指定事务的传播行为。</span></span><br><span class="line"><span class="comment">        timeout：指定超时时间。默认值为：-1。永不超时。</span></span><br><span class="line"><span class="comment">        rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">        no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-4-配置AOP-切入点表达式"><a href="#2-2-2-4-配置AOP-切入点表达式" class="headerlink" title="2.2.2.4    配置AOP-切入点表达式"></a>2.2.2.4    配置AOP-切入点表达式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-5-配置切入点表达式和事务通知的对应关系"><a href="#2-2-2-5-配置切入点表达式和事务通知的对应关系" class="headerlink" title="2.2.2.5    配置切入点表达式和事务通知的对应关系"></a>2.2.2.5    配置切入点表达式和事务通知的对应关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在aop:config标签内部：建立事务的通知和切入点表达式的关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-6-完整配置"><a href="#2-2-2-6-完整配置" class="headerlink" title="2.2.2.6    完整配置"></a>2.2.2.6    完整配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SPRING内置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring基于XML的声明式事务控制 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一步：配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二步：配置事务的通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第四步：配置事务的属性</span></span><br><span class="line"><span class="comment">            isolation：配置事务的隔离级别。默认值：DEFAULT，使用数据库的默认隔离级别。mysql是REPEATABLE_READ</span></span><br><span class="line"><span class="comment">            propagation：配置事务的传播行为。默认值是：REQUIRED。 一般的选择。（增删改方法）。当是查询方法时，选择SUPPORTS</span></span><br><span class="line"><span class="comment">            timeout：指定事务的超时时间。默认值是：-1，永不超时。当指定其他值时，以秒为单位</span></span><br><span class="line"><span class="comment">            read-only：配置是否只读事务。默认值是：false，读写型事务。   当指定为true时，表示只读，只能用于查询方法。</span></span><br><span class="line"><span class="comment">            rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常时，事务不回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">            no-rollback-for：用于指定一个异常，当执行产生该异常时，事务不回滚。产生其他异常时，事务回滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第三步：配置aop</span></span><br><span class="line"><span class="comment">        要配的是：切入点表达式</span></span><br><span class="line"><span class="comment">                通知和切入点表达式的关联</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务通知和切入点表达式的关联 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-基于XML和注解组合使用的整合方式"><a href="#2-3-基于XML和注解组合使用的整合方式" class="headerlink" title="2.3    基于XML和注解组合使用的整合方式"></a>2.3    基于XML和注解组合使用的整合方式</h2><h3 id="2-3-1-环境搭建"><a href="#2-3-1-环境搭建" class="headerlink" title="2.3.1    环境搭建"></a>2.3.1    环境搭建</h3><h4 id="2-3-1-1-拷贝必备的jar"><a href="#2-3-1-1-拷贝必备的jar" class="headerlink" title="2.3.1.1    拷贝必备的jar"></a>2.3.1.1    拷贝必备的jar</h4><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h4 id="2-3-1-2-spring的配置文件导入约束并配置扫描的包"><a href="#2-3-1-2-spring的配置文件导入约束并配置扫描的包" class="headerlink" title="2.3.1.2    spring的配置文件导入约束并配置扫描的包"></a>2.3.1.2    spring的配置文件导入约束并配置扫描的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                                    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-3-准备实体类"><a href="#2-3-1-3-准备实体类" class="headerlink" title="2.3.1.3    准备实体类"></a>2.3.1.3    准备实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-4-业务层实现类使用注解让spring管理"><a href="#2-3-1-4-业务层实现类使用注解让spring管理" class="headerlink" title="2.3.1.4    业务层实现类使用注解让spring管理"></a>2.3.1.4    业务层实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName);</span><br><span class="line">        <span class="comment">//2.修改两个账户的金额</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);<span class="comment">//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱</span></span><br><span class="line">        <span class="comment">//3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-5-Dao实现类使用注解让spring管理"><a href="#2-3-1-5-Dao实现类使用注解让spring管理" class="headerlink" title="2.3.1.5    Dao实现类使用注解让spring管理"></a>2.3.1.5    Dao实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where id = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountId</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty() ? <span class="keyword">null</span> : list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where name = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//没有这个名称的账户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//结果集不唯一，不符合我们的约定</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，请检查数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set name=?,money=? where id=?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-配置步骤"><a href="#2-3-2-配置步骤" class="headerlink" title="2.3.2    配置步骤"></a>2.3.2    配置步骤</h3><h4 id="2-3-2-1-配置数据源和JdbcTemplate"><a href="#2-3-2-1-配置数据源和JdbcTemplate" class="headerlink" title="2.3.2.1    配置数据源和JdbcTemplate"></a>2.3.2.1    配置数据源和JdbcTemplate</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置jdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SPRING内置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-配置事务管理器并注入数据源"><a href="#2-3-2-2-配置事务管理器并注入数据源" class="headerlink" title="2.3.2.2    配置事务管理器并注入数据源"></a>2.3.2.2    配置事务管理器并注入数据源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-在业务层使用-Transactional注解"><a href="#2-3-2-3-在业务层使用-Transactional注解" class="headerlink" title="2.3.2.3    在业务层使用@Transactional注解"></a>2.3.2.3    在业务层使用@Transactional注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在需要事务的地方使用@Transactional注解</span><br><span class="line">    该注解可以写在接口上，类上和方法上。</span><br><span class="line">    写在接口上，表示该接口的所有实现类都有事务。</span><br><span class="line">    写在类上，表示该类中所有方法都有事务。</span><br><span class="line">    写在方法，表示该方法有事务。</span><br><span class="line">    优先级：就近原则。方法&gt;类&gt;接口</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS,readOnly = <span class="keyword">true</span>)<span class="comment">//只读型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED,readOnly=<span class="keyword">false</span>)<span class="comment">//读写型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询账户信息</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targetName);</span><br><span class="line">        <span class="comment">//2.转出账户减钱，转入账户加钱</span></span><br><span class="line">        source.setMoney(source.getMoney() - money);</span><br><span class="line">        target.setMoney(target.getMoney() + money);</span><br><span class="line">        <span class="comment">//3.更新账户信息</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-在配置文件中开启spring对注解事务的支持"><a href="#2-3-2-4-在配置文件中开启spring对注解事务的支持" class="headerlink" title="2.3.2.4    在配置文件中开启spring对注解事务的支持"></a>2.3.2.4    在配置文件中开启spring对注解事务的支持</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-基于纯注解的声明式事务控制（配置方式）"><a href="#2-4-基于纯注解的声明式事务控制（配置方式）" class="headerlink" title="2.4    基于纯注解的声明式事务控制（配置方式）"></a>2.4    基于纯注解的声明式事务控制（配置方式）</h2><h3 id="2-4-1-环境搭建"><a href="#2-4-1-环境搭建" class="headerlink" title="2.4.1    环境搭建"></a>2.4.1    环境搭建</h3><h4 id="2-4-1-1-拷贝必备的jar包"><a href="#2-4-1-1-拷贝必备的jar包" class="headerlink" title="2.4.1.1    拷贝必备的jar包"></a>2.4.1.1    拷贝必备的jar包</h4><p><img src="https://ae01.alicdn.com/kf/Hb9859d98cfc1434892cfe720b91363e64.jpg" alt="img"></p><h4 id="2-4-1-2-创建一个类用于加载spring的配置并指定要扫描的包"><a href="#2-4-1-2-创建一个类用于加载spring的配置并指定要扫描的包" class="headerlink" title="2.4.1.2    创建一个类用于加载spring的配置并指定要扫描的包"></a>2.4.1.2    创建一个类用于加载spring的配置并指定要扫描的包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于初始化spring容器的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.wgy"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-3-准备实体类"><a href="#2-4-1-3-准备实体类" class="headerlink" title="2.4.1.3    准备实体类"></a>2.4.1.3    准备实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-4-业务层实现类使用注解让spring管理"><a href="#2-4-1-4-业务层实现类使用注解让spring管理" class="headerlink" title="2.4.1.4    业务层实现类使用注解让spring管理"></a>2.4.1.4    业务层实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName);</span><br><span class="line">        <span class="comment">//2.修改两个账户的金额</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);<span class="comment">//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱</span></span><br><span class="line">        <span class="comment">//3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-5-Dao实现类使用注解让spring管理"><a href="#2-4-1-5-Dao实现类使用注解让spring管理" class="headerlink" title="2.4.1.5    Dao实现类使用注解让spring管理"></a>2.4.1.5    Dao实现类使用注解让spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where id = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountId</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty() ? <span class="keyword">null</span> : list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = jdbcTemplate.query(<span class="string">"select * from account where name = ? "</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//没有这个名称的账户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//结果集不唯一，不符合我们的约定</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，请检查数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set name=?,money=? where id=?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-配置步骤"><a href="#2-4-2-配置步骤" class="headerlink" title="2.4.2    配置步骤"></a>2.4.2    配置步骤</h3><h4 id="2-4-2-1-使用-Bean注解配置数据源和JdbcTemplate"><a href="#2-4-2-1-使用-Bean注解配置数据源和JdbcTemplate" class="headerlink" title="2.4.2.1    使用@Bean注解配置数据源和JdbcTemplate"></a>2.4.2.1    使用@Bean注解配置数据源和JdbcTemplate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接数据库的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/spring"</span>);</span><br><span class="line">        ds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        ds.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-2-使用-Bean注解配置配置事务管理器"><a href="#2-4-2-2-使用-Bean注解配置配置事务管理器" class="headerlink" title="2.4.2.2    使用@Bean注解配置配置事务管理器"></a>2.4.2.2    使用@Bean注解配置配置事务管理器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务控制的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-3-在业务层使用-Transactional注解"><a href="#2-4-2-3-在业务层使用-Transactional注解" class="headerlink" title="2.4.2.3    在业务层使用@Transactional注解"></a>2.4.2.3    在业务层使用@Transactional注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在需要事务的地方使用@Transactional注解</span><br><span class="line">    该注解可以写在接口上，类上和方法上。</span><br><span class="line">    写在接口上，表示该接口的所有实现类都有事务。</span><br><span class="line">    写在类上，表示该类中所有方法都有事务。</span><br><span class="line">    写在方法，表示该方法有事务。</span><br><span class="line">    优先级：就近原则。方法&gt;类&gt;接口</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS,readOnly = <span class="keyword">true</span>)<span class="comment">//只读型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED,readOnly=<span class="keyword">false</span>)<span class="comment">//读写型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询账户信息</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targetName);</span><br><span class="line">        <span class="comment">//2.转出账户减钱，转入账户加钱</span></span><br><span class="line">        source.setMoney(source.getMoney() - money);</span><br><span class="line">        target.setMoney(target.getMoney() + money);</span><br><span class="line">        <span class="comment">//3.更新账户信息</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-4-使用-EnableTransactionManagement开启spring对注解事务的的支持"><a href="#2-4-2-4-使用-EnableTransactionManagement开启spring对注解事务的的支持" class="headerlink" title="2.4.2.4    使用@EnableTransactionManagement开启spring对注解事务的的支持"></a>2.4.2.4    使用@EnableTransactionManagement开启spring对注解事务的的支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring的配置类，作用就是当bean.xml用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wgy"</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>, <span class="title">TransactionManager</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableTransactionManagement</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Spring中的JdbcTemplate&quot;&gt;&lt;a href=&quot;#1-Spring中的JdbcTemplate&quot; class=&quot;headerlink&quot; title=&quot;1.    Spring中的JdbcTemplate&quot;&gt;&lt;/a&gt;1.    Spring中的JdbcTemplate&lt;/h1&gt;&lt;h2 id=&quot;1-1-JdbcTemplate概述&quot;&gt;&lt;a href=&quot;#1-1-JdbcTemplate概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    JdbcTemplate概述&quot;&gt;&lt;/a&gt;1.1    JdbcTemplate概述&lt;/h2&gt;&lt;p&gt;它是spring框架中提供的一个对象，是对原始Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类，入下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/Hf09002ccceea433f99d07c8167dfe272U.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(三)</title>
    <link href="https://wgy1993.gitee.io/archives/680971a4.html"/>
    <id>https://wgy1993.gitee.io/archives/680971a4.html</id>
    <published>2020-06-13T10:27:26.000Z</published>
    <updated>2020-06-13T11:04:24.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-AOP的相关概念"><a href="#1-AOP的相关概念" class="headerlink" title="1.    AOP的相关概念"></a>1.    AOP的相关概念</h1><h2 id="1-1-AOP概述"><a href="#1-1-AOP概述" class="headerlink" title="1.1    AOP概述"></a>1.1    AOP概述</h2><h3 id="1-1-1-什么是AOP"><a href="#1-1-1-什么是AOP" class="headerlink" title="1.1.1    什么是AOP"></a>1.1.1    什么是AOP</h3><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/面向切面编程/6016335" target="_blank" rel="noopener">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/预编译/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><a id="more"></a><h3 id="1-1-2-AOP的作用及优势"><a href="#1-1-2-AOP的作用及优势" class="headerlink" title="1.1.2    AOP的作用及优势"></a>1.1.2    AOP的作用及优势</h3><p><strong>作用：</strong></p><p>在程序运行期间，不修改源码对已有方法进行增强。</p><p><strong>优势：</strong></p><p>减少重复代码    提高开发效率     维护方便</p><h3 id="1-1-3-AOP的实现方式"><a href="#1-1-3-AOP的实现方式" class="headerlink" title="1.1.3    AOP的实现方式"></a>1.1.3    AOP的实现方式</h3><p>使用动态代理技术</p><h2 id="1-2-AOP的具体应用"><a href="#1-2-AOP的具体应用" class="headerlink" title="1.2    AOP的具体应用"></a>1.2    AOP的具体应用</h2><h3 id="1-2-1-案例中问题"><a href="#1-2-1-案例中问题" class="headerlink" title="1.2.1    案例中问题"></a>1.2.1    案例中问题</h3><p>这是我们之前在struts2课程中做的一个完整的增删改查例子。下面是客户的业务层接口和实现类。</p><p>通过下面的代码，我们能看出什么问题吗?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> * 事务必须在此控制</span></span><br><span class="line"><span class="comment"> * 业务层都是调用持久层的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            customerDao.saveCustomer(customer);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            List&lt;Customer&gt; customers = customerDao.findAllCustomer();</span><br><span class="line">            tx.commit();</span><br><span class="line">            <span class="keyword">return</span> customers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面代码的问题就是：我们的事务控制是重复性的代码。这还只是一个业务类，如果有多个业务了，每个业务类中都会有这些重复性的代码。</strong></p><h3 id="1-2-2-动态代理回顾"><a href="#1-2-2-动态代理回顾" class="headerlink" title="1.2.2    动态代理回顾"></a>1.2.2    动态代理回顾</h3><h4 id="1-2-2-1-动态代理的特点"><a href="#1-2-2-1-动态代理的特点" class="headerlink" title="1.2.2.1    动态代理的特点"></a>1.2.2.1    动态代理的特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字节码随用随创建，随用随加载。</span><br><span class="line">它与静态代理的区别也在于此。因为静态代理是字节码一上来就创建好，并完成加载。</span><br><span class="line">装饰者模式就是静态代理的一种体现。</span><br></pre></td></tr></table></figure><h4 id="1-2-2-2-动态代理常用的有两种方式"><a href="#1-2-2-2-动态代理常用的有两种方式" class="headerlink" title="1.2.2.2    动态代理常用的有两种方式"></a>1.2.2.2    动态代理常用的有两种方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">基于接口的动态代理</span><br><span class="line">    提供者：JDK官方的Proxy类。</span><br><span class="line">    要求：被代理类最少实现一个接口。</span><br><span class="line">基于子类的动态代理</span><br><span class="line">    提供者：第三方的CGLib，如果报asmxxxx异常，需要导入asm.jar。</span><br><span class="line">    要求：被代理类不能用final修饰的类（最终类）。</span><br></pre></td></tr></table></figure><h4 id="1-2-2-3-使用JDK官方的Proxy类创建代理对象"><a href="#1-2-2-3-使用JDK官方的Proxy类创建代理对象" class="headerlink" title="1.2.2.3    使用JDK官方的Proxy类创建代理对象"></a>1.2.2.3    使用JDK官方的Proxy类创建代理对象</h4><p> 此处我们使用的是一个演员的例子：</p><p>在很久以前，演员和剧组都是直接见面联系的。没有中间人环节。</p><p>而随着时间的推移，产生了一个新兴职业：经纪人（中间人），这个时候剧组再想找演员就需要通过经纪人来找了。下面我们就用代码演示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个经纪公司的要求:</span></span><br><span class="line"><span class="comment"> *      能做基本的表演和危险的表演</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IActor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本演出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 危险演出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个演员</span></span><br><span class="line"><span class="comment"> * 实现了接口，就表示具有接口中的方法实现。即：符合经纪公司的要求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">implements</span> <span class="title">IActor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿到钱，开始基本的表演："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿到钱，开始危险的表演："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个剧组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一个剧组找演员</span></span><br><span class="line">        <span class="keyword">final</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         * 作用：不改变源码的基础上，对已有方法增强。（它是AOP思想的实现技术）</span></span><br><span class="line"><span class="comment">         * 分类：</span></span><br><span class="line"><span class="comment">         *    基于接口的动态代理：</span></span><br><span class="line"><span class="comment">         *            要求：被代理类最少实现一个接口</span></span><br><span class="line"><span class="comment">         *            提供者：JDK官方</span></span><br><span class="line"><span class="comment">         *            涉及的类：Proxy</span></span><br><span class="line"><span class="comment">         *    创建代理对象的方法：newProxyInstance(ClassLoader,Class[],InvocationHandler)</span></span><br><span class="line"><span class="comment">         *            参数的含义：</span></span><br><span class="line"><span class="comment">         *            ClassLoader：类加载器。和被代理对象使用相同的类加载器。一般都是固定写法。</span></span><br><span class="line"><span class="comment">         *                Class[]：字节码数组。被代理类实现的接口。（要求代理对象和被代理对象具有相同的行为）。一般都是固定写法。</span></span><br><span class="line"><span class="comment">         *      InvocationHandler：它是一个接口，就是用于我们提供增强代码的。我们一般都是些一个该接口的实现类。实现类可以是匿名内部类。</span></span><br><span class="line"><span class="comment">         *                         它的含义就是：如何代理。此处的代码只能是谁用谁提供。</span></span><br><span class="line"><span class="comment">         *                策略模式：</span></span><br><span class="line"><span class="comment">         *                    使用要求：数据已经有了</span></span><br><span class="line"><span class="comment">         *                            目的明确</span></span><br><span class="line"><span class="comment">         *                            达成目标的过程就是策略。</span></span><br><span class="line"><span class="comment">         *                在dbutils中的ResultSetHandler就是策略模式的具体应用。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *基于子类的动态代理</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        IActor proxyActor = (IActor) Proxy.newProxyInstance(actor.getClass().getClassLoader(),</span><br><span class="line">                actor.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 执行被代理对象的任何方法都会经过该方法，该方法有拦截的功能</span></span><br><span class="line"><span class="comment">                     * 方法的参数</span></span><br><span class="line"><span class="comment">                     *   Object proxy：代理对象的引用。不一定每次都会有。</span></span><br><span class="line"><span class="comment">                     *   Method method：当前执行的方法</span></span><br><span class="line"><span class="comment">                     *   Object[] args：当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * 返回值：</span></span><br><span class="line"><span class="comment">                     *   当前执行方法的返回值</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//1.取出执行方法中的参数：给的多少钱</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//2.判断当前执行的是什么方法：每个经纪公司对不同演出收费不一样，此处开始判断</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"basicAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="comment">//基本演出，没有10000不演</span></span><br><span class="line">                            <span class="keyword">if</span>(money &gt; <span class="number">10000</span>)&#123;</span><br><span class="line">                                <span class="comment">//执行方法（开始表演）</span></span><br><span class="line">                                <span class="comment">//看上去剧组是给了20000，实际到演员手里只有10000</span></span><br><span class="line">                                <span class="comment">//这就是我们没有修改原来basicAct方法源码，对方法进行了增强</span></span><br><span class="line">                                rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"dangerAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="comment">//危险演出，没有50000不演</span></span><br><span class="line">                            <span class="keyword">if</span>(money &gt; <span class="number">50000</span>)&#123;</span><br><span class="line">                                <span class="comment">//执行方法</span></span><br><span class="line">                                <span class="comment">//看上去剧组是给了60000，实际到演员手里只有30000</span></span><br><span class="line">                                <span class="comment">//这就是我们没有修改原来dangerAct方法源码，对方法进行了增强</span></span><br><span class="line">                                rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> rtValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="comment">//      没有经纪公司的时候，直接找演员。</span></span><br><span class="line"><span class="comment">//      actor.basicAct(1000f);</span></span><br><span class="line"><span class="comment">//      actor.dangerAct(5000f);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      剧组无法直接联系演员，而是由经纪公司找的演员</span></span><br><span class="line">        proxyActor.basicAct(<span class="number">20000</span>);</span><br><span class="line">        proxyActor.dangerAct(<span class="number">60000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-4-使用CGLib的Enhancer类创建代理对象"><a href="#1-2-2-4-使用CGLib的Enhancer类创建代理对象" class="headerlink" title="1.2.2.4    使用CGLib的Enhancer类创建代理对象"></a>1.2.2.4    使用CGLib的Enhancer类创建代理对象</h4><p>还是那个演员的例子，只不过不让他实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个演员</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本的演出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicAct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CGLIB拿到钱，开始基本的表演："</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 危险的表演</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dangerAct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CGLIB拿到钱，开始危险的表演："</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个剧组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         *  作用：不改变源码的基础上，对已有方法增强。（它是AOP思想的实现技术）</span></span><br><span class="line"><span class="comment">         *  分类：</span></span><br><span class="line"><span class="comment">         *      基于接口的动态代理：</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *      基于子类的动态代理：</span></span><br><span class="line"><span class="comment">         *          要求：被代理类不能是最终类。不能被final修饰</span></span><br><span class="line"><span class="comment">         *          提供者：第三方CGLib</span></span><br><span class="line"><span class="comment">         *          涉及的类：Enhancer</span></span><br><span class="line"><span class="comment">         *          创建代理对象的方法：create(Class,Callback);</span></span><br><span class="line"><span class="comment">         *          参数的含义：</span></span><br><span class="line"><span class="comment">         *              Class：被代理对象的字节码</span></span><br><span class="line"><span class="comment">         *              Callback：如何代理。它和InvocationHandler的作用是一样的。它也是一个接口，我们一般使用该接口的子接口MethodInterceptor</span></span><br><span class="line"><span class="comment">         *                          在使用时我们也是创建该接口的匿名内部类。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Actor cglibActor = (Actor) Enhancer.create(actor.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法，都会经过该方法。它和基于接口动态代理的invoke方法的作用是一模一样的。</span></span><br><span class="line"><span class="comment">             * 方法的参数;</span></span><br><span class="line"><span class="comment">             *   前面三个和invoke方法的参数含义和作用都一样。</span></span><br><span class="line"><span class="comment">             *   MethodProxy methodProxy：当前执行方法的代理对象。一般不用</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//1.取出执行方法中的参数：给的多少钱</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前执行的是什么方法</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"basicAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    <span class="comment">//基本演出</span></span><br><span class="line">                    <span class="keyword">if</span>(money &gt; <span class="number">10000</span>)&#123;</span><br><span class="line">                        <span class="comment">//执行方法（开始表演）</span></span><br><span class="line">                        rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"dangerAct"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    <span class="comment">//危险演出</span></span><br><span class="line">                    <span class="keyword">if</span>(money &gt; <span class="number">50000</span>)&#123;</span><br><span class="line">                        <span class="comment">//执行方法</span></span><br><span class="line">                        rtValue = method.invoke(actor, money/<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> rtValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibActor.basicAct(<span class="number">50000</span>);</span><br><span class="line">        cglibActor.dangerAct(<span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-解决案例中的问题"><a href="#1-2-3-解决案例中的问题" class="headerlink" title="1.2.3    解决案例中的问题"></a>1.2.3    解决案例中的问题</h3><p>思路只有一个：使用动态代理技术创建客户业务层的代理对象，在执行CustomerServiceImpl时，对里面的方法进行增强，加入事务的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建客户业务层对象工厂（当然也可以创建其他业务层对象，只不过我们此处不做那么繁琐）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取客户业务层对象的代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICustomerService <span class="title">getCustomerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义客户业务层对象</span></span><br><span class="line">        <span class="keyword">final</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">        <span class="comment">//生成它的代理对象</span></span><br><span class="line">        ICustomerService proxyCustomerService = (ICustomerService) </span><br><span class="line">            Proxy.newProxyInstance(customerService.getClass().getClassLoader()</span><br><span class="line">            ,customerService.getClass().getInterfaces(), </span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">//执行客户业务层任何方法，都会在此处被拦截，我们对那些方法增强，加入事务。</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                String name = method.getName();</span><br><span class="line">                Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//开启事务</span></span><br><span class="line">                    HibernateUtil.beginTransaction();</span><br><span class="line">                    <span class="comment">//执行操作</span></span><br><span class="line">                    rtValue = method.invoke(customerService, args);</span><br><span class="line">                    <span class="comment">//提交事务</span></span><br><span class="line">                    HibernateUtil.commit();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    <span class="comment">//回滚事务</span></span><br><span class="line">                    HibernateUtil.rollback();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    <span class="comment">//释放资源.hibernate在我们事务操作（提交/回滚）之后，已经帮我们关了。</span></span><br><span class="line">                    <span class="comment">//如果他没关，我们在此处关</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> rtValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxyCustomerService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-Spring中的AOP"><a href="#1-3-Spring中的AOP" class="headerlink" title="1.3    Spring中的AOP"></a>1.3    Spring中的AOP</h2><h3 id="1-3-1-关于代理的选择"><a href="#1-3-1-关于代理的选择" class="headerlink" title="1.3.1    关于代理的选择"></a>1.3.1    关于代理的选择</h3><p>在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p><h3 id="1-3-2-AOP相关术语"><a href="#1-3-2-AOP相关术语" class="headerlink" title="1.3.2    AOP相关术语"></a>1.3.2    AOP相关术语</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Joinpoint(连接点):</span><br><span class="line">    所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。</span><br><span class="line">Pointcut(切入点):</span><br><span class="line">    所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。</span><br><span class="line">Advice(通知&#x2F;增强):</span><br><span class="line">    所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。</span><br><span class="line">    通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</span><br><span class="line">Introduction(引介):</span><br><span class="line">    引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。</span><br><span class="line">Target(目标对象):</span><br><span class="line">    代理的目标对象。</span><br><span class="line">Weaving(织入):</span><br><span class="line">    是指把增强应用到目标对象来创建新的代理对象的过程。</span><br><span class="line">    spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</span><br><span class="line">Proxy（代理）:</span><br><span class="line">    一个类被AOP织入增强后，就产生一个结果代理类。</span><br><span class="line">Aspect(切面):</span><br><span class="line">    是切入点和通知（引介）的结合。</span><br></pre></td></tr></table></figure><h3 id="1-3-3-学习spring中的AOP要明确的事"><a href="#1-3-3-学习spring中的AOP要明确的事" class="headerlink" title="1.3.3    学习spring中的AOP要明确的事"></a>1.3.3    学习spring中的AOP要明确的事</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a、开发阶段（我们做的）</span><br><span class="line">    编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。</span><br><span class="line">    把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP编程人员来做。</span><br><span class="line">    在配置文件中，声明切入点与通知间的关系，即切面。：AOP编程人员来做。</span><br><span class="line">b、运行阶段（Spring框架完成的）</span><br><span class="line">    Spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</span><br></pre></td></tr></table></figure><h1 id="2-基于XML的AOP配置"><a href="#2-基于XML的AOP配置" class="headerlink" title="2.    基于XML的AOP配置"></a>2.    基于XML的AOP配置</h1><h2 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1    环境搭建"></a>2.1    环境搭建</h2><h3 id="2-1-1-准备客户的业务层和接口（需要增强的类）"><a href="#2-1-1-准备客户的业务层和接口（需要增强的类）" class="headerlink" title="2.1.1    准备客户的业务层和接口（需要增强的类）"></a>2.1.1    准备客户的业务层和接口（需要增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-拷贝必备的jar包"><a href="#2-1-2-拷贝必备的jar包" class="headerlink" title="2.1.2    拷贝必备的jar包"></a>2.1.2    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/H6e871f3153dc4618a3cce47f417067955.jpg" alt="img"></p><h3 id="2-1-3-创建spring的配置文件并导入约束"><a href="#2-1-3-创建spring的配置文件并导入约束" class="headerlink" title="2.1.3    创建spring的配置文件并导入约束"></a>2.1.3    创建spring的配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-把客户的业务层配置到spring容器中"><a href="#2-1-4-把客户的业务层配置到spring容器中" class="headerlink" title="2.1.4    把客户的业务层配置到spring容器中"></a>2.1.4    把客户的业务层配置到spring容器中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把资源交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-制作通知（增强的类）"><a href="#2-1-5-制作通知（增强的类）" class="headerlink" title="2.1.5    制作通知（增强的类）"></a>2.1.5    制作通知（增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于记录日志的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录日志的操作</span></span><br><span class="line"><span class="comment">     * 计划让其在业务核心方法（切入点方法）执行之前执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的printLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-配置步骤"><a href="#2-2-配置步骤" class="headerlink" title="2.2    配置步骤"></a>2.2    配置步骤</h2><h3 id="2-2-1-把通知类用bean标签配置起来"><a href="#2-2-1-把通知类用bean标签配置起来" class="headerlink" title="2.2.1    把通知类用bean标签配置起来"></a>2.2.1    把通知类用bean标签配置起来</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把通知类也交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.wgy.util.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-使用aop-config声明aop配置"><a href="#2-2-2-使用aop-config声明aop配置" class="headerlink" title="2.2.2    使用aop:config声明aop配置"></a>2.2.2    使用aop:config声明aop配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- aop的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置的代码都写在此处 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-使用aop-aspect配置切面"><a href="#2-2-3-使用aop-aspect配置切面" class="headerlink" title="2.2.3    使用aop:aspect配置切面"></a>2.2.3    使用aop:aspect配置切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置切面 ：此标签要出现在aop:config内部</span></span><br><span class="line"><span class="comment">    id：给切面提供一个唯一标识</span></span><br><span class="line"><span class="comment">    ref：引用的是通知类的bean的id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通知的类型要写在此处--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-使用aop-before配置前置通知"><a href="#2-2-4-使用aop-before配置前置通知" class="headerlink" title="2.2.4    使用aop:before配置前置通知"></a>2.2.4    使用aop:before配置前置通知</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于配置前置通知：指定增强的方法在切入点方法之前执行 </span></span><br><span class="line"><span class="comment">            method:用于指定通知类中的增强方法名称</span></span><br><span class="line"><span class="comment">            ponitcut-ref：用于指定切入点的表达式的引用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-使用aop-pointcut配置切入点表达式"><a href="#2-2-5-使用aop-pointcut配置切入点表达式" class="headerlink" title="2.2.5    使用aop:pointcut配置切入点表达式"></a>2.2.5    使用aop:pointcut配置切入点表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public void com.wgy.service.impl.CustomerServiceImpl.saveCustomer())"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-切入点表达式说明"><a href="#2-3-切入点表达式说明" class="headerlink" title="2.3    切入点表达式说明"></a>2.3    切入点表达式说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">execution:</span><br><span class="line">        匹配方法的执行(常用)</span><br><span class="line">        execution(表达式)</span><br><span class="line">表达式语法：execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br><span class="line">写法说明：</span><br><span class="line">    全匹配方式：</span><br><span class="line">        public void com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    访问修饰符可以省略</span><br><span class="line">        void com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    返回值可以使用*号，表示任意返回值</span><br><span class="line">        * com.wgy.service.impl.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    包名可以使用*号，表示任意包，但是有几级包，需要写几个*</span><br><span class="line">        * *.*.*.*.CustomerServiceImpl.saveCustomer()</span><br><span class="line">    使用..来表示当前包，及其子包</span><br><span class="line">        * com..CustomerServiceImpl.saveCustomer()</span><br><span class="line">    类名可以使用*号，表示任意类</span><br><span class="line">        * com..*.saveCustomer()</span><br><span class="line">    方法名可以使用*号，表示任意方法</span><br><span class="line">        * com..*.*()</span><br><span class="line">    参数列表可以使用*，表示参数可以是任意数据类型，但是必须有参数</span><br><span class="line">        * com..*.*(*)</span><br><span class="line">    参数列表可以使用..表示有无参数均可，有参数可以是任意类型</span><br><span class="line">        * com..*.*(..)</span><br><span class="line">    全通配方式：</span><br><span class="line">        * *..*.*(..)</span><br><span class="line">    实际开发中，我们一般情况下，我们都是对业务层方法进行增强：</span><br><span class="line">        所以写法：* com.wgy.service.impl.*.*(..)</span><br></pre></td></tr></table></figure><h2 id="2-4-完整配置"><a href="#2-4-完整配置" class="headerlink" title="2.4    完整配置"></a>2.4    完整配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 基于xml的aop配置步骤 ：要想使用spring的aop，必须导入aop的jar包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一步：把通知类交给spring来管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.wgy.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二步：导入aop名称空间，并且使用aop:config开始aop的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义通用的切入点表达式，如果写在aop:aspct标签外部，则表示所有切面可用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 第三步：使用aop:aspect配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第四步：配置通知的类型，指定增强的方法何时执行。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义通用的切入点表达式：如果是写在了aop:aspect标签内部，则表示只有当前切面可用</span></span><br><span class="line"><span class="comment">            &lt;aop:pointcut expression="execution(* com.wgy.service.impl.*.*(..))" id="pt1"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-通知的类型"><a href="#2-5-通知的类型" class="headerlink" title="2.5    通知的类型"></a>2.5    通知的类型</h2><h3 id="2-5-1-类型说明"><a href="#2-5-1-类型说明" class="headerlink" title="2.5.1    类型说明"></a>2.5.1    类型说明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置通知的类型</span></span><br><span class="line"><span class="comment">    aop:before：</span></span><br><span class="line"><span class="comment">        用于配置前置通知。前置通知的执行时间点：切入点方法执行之前执行</span></span><br><span class="line"><span class="comment">    aop:after-returning：</span></span><br><span class="line"><span class="comment">        用于配置后置通知。后置通知的执行时间点：切入点方法正常执行之后。它和异常通知只能有一个执行</span></span><br><span class="line"><span class="comment">    aop:after-throwing</span></span><br><span class="line"><span class="comment">        用于配置异常通知。异常通知的执行时间点：切入点方法执行产生异常后执行。它和后置通知只能执行一个。</span></span><br><span class="line"><span class="comment">    aop:after</span></span><br><span class="line"><span class="comment">        用于配置最终通知。最终通知的执行时间点：无论切入点方法执行时是否有异常，它都会在其后面执行。</span></span><br><span class="line"><span class="comment">    aop:around</span></span><br><span class="line"><span class="comment">        用于配置环绕通知。他和前面四个不一样，他不是用于指定通知方法何时执行的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundPringLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-环绕通知的特殊说明"><a href="#2-5-2-环绕通知的特殊说明" class="headerlink" title="2.5.2    环绕通知的特殊说明"></a>2.5.2    环绕通知的特殊说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环绕通知</span></span><br><span class="line"><span class="comment"> * 问题：</span></span><br><span class="line"><span class="comment"> *  当我们配置了环绕通知之后，切入点方法没有执行，而环绕通知里的代码执行了。</span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> *  由动态代理可知，环绕通知指的是invoke方法，并且里面有明确的切入点方法调用。而我们现在的环绕通知没有明确切入点方法调用。</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> *  spring为我们提供了一个接口：ProceedingJoinPoint。该接口可以作为环绕通知的方法参数来使用。</span></span><br><span class="line"><span class="comment"> *  在程序运行时，spring框架会为我们提供该接口的实现类，供我们使用。</span></span><br><span class="line"><span class="comment"> *  该接口中有一个方法，proceed()，它的作用就等同于method.invoke方法，就是明确调用业务层核心方法（切入点方法）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 环绕通知：</span></span><br><span class="line"><span class="comment"> *  它是spring框架为我们提供的一种可以在代码中手动控制通知方法什么时候执行的方式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。前置"</span>);</span><br><span class="line">        rtValue = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。后置"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。异常"</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。最终"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rtValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-基于注解的AOP配置"><a href="#3-基于注解的AOP配置" class="headerlink" title="3.    基于注解的AOP配置"></a>3.    基于注解的AOP配置</h1><h2 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1    环境搭建"></a>3.1    环境搭建</h2><h3 id="3-1-1-准备客户的业务层和接口（需要增强的类）"><a href="#3-1-1-准备客户的业务层和接口（需要增强的类）" class="headerlink" title="3.1.1    准备客户的业务层和接口（需要增强的类）"></a>3.1.1    准备客户的业务层和接口（需要增强的类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-拷贝必备的jar包"><a href="#3-1-2-拷贝必备的jar包" class="headerlink" title="3.1.2    拷贝必备的jar包"></a>3.1.2    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/H6e871f3153dc4618a3cce47f417067955.jpg" alt="img"></p><h3 id="3-1-3-创建spring的配置文件并导入约束"><a href="#3-1-3-创建spring的配置文件并导入约束" class="headerlink" title="3.1.3    创建spring的配置文件并导入约束"></a>3.1.3    创建spring的配置文件并导入约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-4-把资源使用注解让spring来管理"><a href="#3-1-4-把资源使用注解让spring来管理" class="headerlink" title="3.1.4    把资源使用注解让spring来管理"></a>3.1.4    把资源使用注解让spring来管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用持久层，执行修改客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-5-在配置文件中指定spring要扫描的包"><a href="#3-1-5-在配置文件中指定spring要扫描的包" class="headerlink" title="3.1.5    在配置文件中指定spring要扫描的包"></a>3.1.5    在配置文件中指定spring要扫描的包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知spring，在创建容器时要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-配置步骤"><a href="#3-2-配置步骤" class="headerlink" title="3.2    配置步骤"></a>3.2    配置步骤</h2><h3 id="3-2-1-把通知类也使用注解配置"><a href="#3-2-1-把通知类也使用注解配置" class="headerlink" title="3.2.1    把通知类也使用注解配置"></a>3.2.1    把通知类也使用注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个记录日志的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-在通知类上使用-Aspect注解声明为切面"><a href="#3-2-2-在通知类上使用-Aspect注解声明为切面" class="headerlink" title="3.2.2    在通知类上使用@Aspect注解声明为切面"></a>3.2.2    在通知类上使用@Aspect注解声明为切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个记录日志的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-在增强的方法上使用注解配置通知"><a href="#3-2-3-在增强的方法上使用注解配置通知" class="headerlink" title="3.2.3    在增强的方法上使用注解配置通知"></a>3.2.3    在增强的方法上使用注解配置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于记录日志的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//配置了切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定切入点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @Before("execution(* com.wgy.service.impl.*.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置：Logger中的beforePrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @AfterReturning("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置：Logger中的afterReturningPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @AfterThrowing("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowingPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常：Logger中的afterThrowingPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @After("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终：Logger中的afterPrintLog方法开始记录日志了。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。前置"</span>);</span><br><span class="line">            rtValue = pjp.proceed();</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。后置"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。异常"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger中的aroundPrintLog方法开始记录日志了。。。。最终"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-在spring配置文件中开启spring对注解AOP的支持"><a href="#3-2-4-在spring配置文件中开启spring对注解AOP的支持" class="headerlink" title="3.2.4    在spring配置文件中开启spring对注解AOP的支持"></a>3.2.4    在spring配置文件中开启spring对注解AOP的支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启spring对注解AOP的支持 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-不使用XML的配置方式"><a href="#3-3-不使用XML的配置方式" class="headerlink" title="3.3    不使用XML的配置方式"></a>3.3    不使用XML的配置方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.wgy"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-AOP的相关概念&quot;&gt;&lt;a href=&quot;#1-AOP的相关概念&quot; class=&quot;headerlink&quot; title=&quot;1.    AOP的相关概念&quot;&gt;&lt;/a&gt;1.    AOP的相关概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-AOP概述&quot;&gt;&lt;a href=&quot;#1-1-AOP概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    AOP概述&quot;&gt;&lt;/a&gt;1.1    AOP概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是AOP&quot;&gt;&lt;a href=&quot;#1-1-1-什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是AOP&quot;&gt;&lt;/a&gt;1.1.1    什么是AOP&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：&lt;a href=&quot;https://baike.baidu.com/item/面向切面编程/6016335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向切面编程&lt;/a&gt;，通过&lt;a href=&quot;https://baike.baidu.com/item/预编译/3191547&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;预编译&lt;/a&gt;方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是&lt;a href=&quot;https://baike.baidu.com/item/OOP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OOP&lt;/a&gt;的延续，是软件开发中的一个热点，也是&lt;a href=&quot;https://baike.baidu.com/item/Spring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring&lt;/a&gt;框架中的一个重要内容，是&lt;a href=&quot;https://baike.baidu.com/item/函数式编程/4035031&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数式编程&lt;/a&gt;的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的&lt;a href=&quot;https://baike.baidu.com/item/耦合度/2603938&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;耦合度&lt;/a&gt;降低，提高程序的可重用性，同时提高了开发的效率。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(二)</title>
    <link href="https://wgy1993.gitee.io/archives/16fa518f.html"/>
    <id>https://wgy1993.gitee.io/archives/16fa518f.html</id>
    <published>2020-06-11T06:53:10.000Z</published>
    <updated>2020-06-11T07:15:43.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基于注解的IOC配置"><a href="#1-基于注解的IOC配置" class="headerlink" title="1.    基于注解的IOC配置"></a>1.    基于注解的IOC配置</h1><h2 id="1-1-写在最前"><a href="#1-1-写在最前" class="headerlink" title="1.1    写在最前"></a>1.1    写在最前</h2><p>学习基于注解的IoC配置，大家脑海里首先得有一个认知，即注解配置和xml配置要实现的功能都是一样的，都是要降低程序间的耦合。只是配置的形式不一样。</p><p>关于实际的开发中到底使用xml还是注解，每家公司有着不同的使用习惯。所以这两种配置方式我们都需要掌握。</p><a id="more"></a><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2    环境搭建"></a>1.2    环境搭建</h2><h3 id="1-2-1-拷贝必备jar包"><a href="#1-2-1-拷贝必备jar包" class="headerlink" title="1.2.1    拷贝必备jar包"></a>1.2.1    拷贝必备jar包</h3><p>注意：在基于xml的配置中，多拷贝一个aop的jar包。如下图：</p><p><img src="https://ae01.alicdn.com/kf/He68f32821d354986a25ef308824f453e8.jpg" alt="image-20200611124335142"></p><h3 id="1-2-2-在类的根路径下创建任意名称的xml文件"><a href="#1-2-2-在类的根路径下创建任意名称的xml文件" class="headerlink" title="1.2.2    在类的根路径下创建任意名称的xml文件"></a>1.2.2    在类的根路径下创建任意名称的xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-使用-Component注解配置管理的资源"><a href="#1-2-3-使用-Component注解配置管理的资源" class="headerlink" title="1.2.3    使用@Component注解配置管理的资源"></a>1.2.3    使用@Component注解配置管理的资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了保存客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-在Spring的配置文件中开启Spring对注解ioc的支持"><a href="#1-2-4-在Spring的配置文件中开启Spring对注解ioc的支持" class="headerlink" title="1.2.4    在Spring的配置文件中开启Spring对注解ioc的支持"></a>1.2.4    在Spring的配置文件中开启Spring对注解ioc的支持</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知spring在创建容器时要扫描的包。当配置了此标签之后，spring创建容器就会去指定的包及其子包下找对应的注解</span></span><br><span class="line"><span class="comment">         标签是在一个context的名称空间里，所以必须先导入context名称空间</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-常用注解"><a href="#1-3-常用注解" class="headerlink" title="1.3    常用注解"></a>1.3    常用注解</h2><h3 id="1-3-1-用于创建bean对象"><a href="#1-3-1-用于创建bean对象" class="headerlink" title="1.3.1    用于创建bean对象"></a>1.3.1    用于创建bean对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;bean id&#x3D;&quot;&quot; class&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">    作用：就相当于配置了一个bean标签。</span><br><span class="line">    它能出现的位置：类上面</span><br><span class="line">    属性：</span><br><span class="line">    value：含义是指定bean的id。当不写时，它有默认值，默认值是：当前类的短名首字母改小写。</span><br><span class="line">    </span><br><span class="line">由此注解衍生的三个注解：</span><br><span class="line">    @Controller一般用于表现的注解</span><br><span class="line">    @Service一般用于业务层</span><br><span class="line">    @Repository一般用于持久层</span><br><span class="line">    他们和@Component的作用及属性都是一模一样</span><br><span class="line">    细节：如果注解中有且只有一个属性要赋值时，且名称是value，value在赋值是可以不写。</span><br></pre></td></tr></table></figure><h3 id="1-3-2-用于注入数据的"><a href="#1-3-2-用于注入数据的" class="headerlink" title="1.3.2    用于注入数据的"></a>1.3.2    用于注入数据的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;property name&#x3D;&quot;&quot; ref&#x3D;&quot;&quot;&gt;    </span><br><span class="line">        &lt;property name&#x3D;&quot;&quot; value&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">    作用：自动按照类型注入。只要有唯一的类型匹配就能注入成功。</span><br><span class="line">        如果注入的bean在容器中类型不唯一时，它会把变量名称作为bean的id，在容器中查找，找到后也能注入成功。</span><br><span class="line">        如果没有找到一致的bean的id，则报错。</span><br><span class="line">        当我们使用注解注入时，set方法就不是必须的了。</span><br><span class="line">        </span><br><span class="line">@Qualifier</span><br><span class="line">    作用：在自动按照类型注入的基础之上，再按照bean的id注入。</span><br><span class="line">    它在给类成员注入数据时，不能独立使用。但是再给方法的形参注入数据时，可以独立使用。</span><br><span class="line">    属性：</span><br><span class="line">    value：用于指定bean的id。</span><br><span class="line">    </span><br><span class="line">@Resource</span><br><span class="line">    作用：直接按照bean的id注入。</span><br><span class="line">    属性：</span><br><span class="line">    name：用于指定bean的id。</span><br><span class="line">    </span><br><span class="line">以上三个注解都是用于注入其他bean类型的。用于注入基本类型和String类型需要使用Value</span><br><span class="line"></span><br><span class="line">@Value:</span><br><span class="line">    作用：用于注入基本类型和String类型数据。它可以借助Spring的el表达式读取properties文件中的配置。</span><br><span class="line">    属性：</span><br><span class="line">    value：用于指定要注入的数据</span><br></pre></td></tr></table></figure><h3 id="1-3-3-用于改变作用范围的"><a href="#1-3-3-用于改变作用范围的" class="headerlink" title="1.3.3    用于改变作用范围的"></a>1.3.3    用于改变作用范围的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;bean id&#x3D;&quot;&quot; class&#x3D;&quot;&quot; scope&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">@Scope</span><br><span class="line">    作用：用于改变bean的作用范围</span><br><span class="line">    属性：</span><br><span class="line">        value：用于指定范围的取值。</span><br><span class="line">        取值和xml中scope属性的取值是一样的。singleton prototype request session globalsession</span><br></pre></td></tr></table></figure><h3 id="1-3-4-和生命周期相关的"><a href="#1-3-4-和生命周期相关的" class="headerlink" title="1.3.4    和生命周期相关的"></a>1.3.4    和生命周期相关的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">相当于：&lt;bean id&#x3D;&quot;&quot; class&#x3D;&quot;&quot; init-method&#x3D;&quot;&quot; destroy-method&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">@PostConstruct</span><br><span class="line">    作用：</span><br><span class="line">        用于指定初始化方法。</span><br><span class="line"></span><br><span class="line">@PreDestroy</span><br><span class="line">    作用：</span><br><span class="line">        用于指定销毁方法。</span><br></pre></td></tr></table></figure><h3 id="1-3-5-代码示例"><a href="#1-3-5-代码示例" class="headerlink" title="1.3.5    代码示例"></a>1.3.5    代码示例</h3><p><strong>持久层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"泰斯特"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  @Autowired</span></span><br><span class="line"><span class="comment">//  @Qualifier("customerDao1")</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"customerDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层......"</span>+name);</span><br><span class="line">        customerDao.saveCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>持久层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟客户的持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层保存了客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-6-关于Spring注解和XML的选择问题"><a href="#1-3-6-关于Spring注解和XML的选择问题" class="headerlink" title="1.3.6    关于Spring注解和XML的选择问题"></a>1.3.6    关于Spring注解和XML的选择问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注解的优势：</span><br><span class="line">    配置简单，维护方便（我们找到类，就相当于找到了对应的配置）。</span><br><span class="line">XML的优势：</span><br><span class="line">    修改时，不用改源码。不涉及重新编译和部署。</span><br></pre></td></tr></table></figure><p><strong>Spring管理Bean方式的比较：</strong></p><p><img src="https://ae01.alicdn.com/kf/H9bbfd478f8cc40f98f60137de1766e3f8.jpg" alt="img"></p><h2 id="1-4-Spring的纯注解配置"><a href="#1-4-Spring的纯注解配置" class="headerlink" title="1.4    Spring的纯注解配置"></a>1.4    Spring的纯注解配置</h2><h3 id="1-4-1-待改造的问题"><a href="#1-4-1-待改造的问题" class="headerlink" title="1.4.1    待改造的问题"></a>1.4.1    待改造的问题</h3><p>我们发现，之所以我们现在离不开xml配置文件，是因为我们有一句很关键的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 告知spring在创建容器时要扫描的包。当配置了此标签之后，spring创建容器就会去指定的包及其子包下找对应的注解</span><br><span class="line">    标签是在一个context的名称空间里，所以必须先导入context名称空间</span><br><span class="line">--&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;com.wgy&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果他要也能用注解配置，那么我们就可以脱离xml文件了。</p><h3 id="1-4-2-使用注解配置要扫描的包"><a href="#1-4-2-使用注解配置要扫描的包" class="headerlink" title="1.4.2    使用注解配置要扫描的包"></a>1.4.2    使用注解配置要扫描的包</h3><p><strong>创建配置类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个spring的配置类</span></span><br><span class="line"><span class="comment"> * 它的作用就相当于bean.xml</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//它就是把当前类看成是spring的配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"com.wgy"</span>&#125;)<span class="comment">//配置要扫描的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类获取容器:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取容器：由于我们已经没有了xml文件，所以再用读取xml方式就不能用了。</span></span><br><span class="line">    <span class="comment">//这时需要指定加载哪个类上的注解</span></span><br><span class="line">    ApplicationContext ac = </span><br><span class="line">        <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//2.根据id获取对象</span></span><br><span class="line">    ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">    cs.saveCustomer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-新注解说明"><a href="#1-4-3-新注解说明" class="headerlink" title="1.4.3    新注解说明"></a>1.4.3    新注解说明</h3><h4 id="1-4-3-1-Configuration"><a href="#1-4-3-1-Configuration" class="headerlink" title="1.4.3.1    @Configuration"></a>1.4.3.1    @Configuration</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">    作用：</span><br><span class="line">        用于指定当前类是一个spring配置类，当创建容器时会从该类上加载注解。获取容器时需要使用AnnotationApplicationContext(有@Configuration注解的类.class)。</span><br><span class="line">    属性：</span><br><span class="line">        value:用于指定配置类的字节码</span><br></pre></td></tr></table></figure><h4 id="1-4-3-2-ComponentScan"><a href="#1-4-3-2-ComponentScan" class="headerlink" title="1.4.3.2    @ComponentScan"></a>1.4.3.2    @ComponentScan</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">    作用：</span><br><span class="line">        用于指定spring在初始化容器时要扫描的包。作用和在spring的xml配置文件中的：</span><br><span class="line">        &lt;context:component-scan base-package&#x3D;&quot;com.wgy&quot;&#x2F;&gt;是一样的。</span><br><span class="line">    属性：</span><br><span class="line">        basePackages：用于指定要扫描的包。和该注解中的value属性作用一样。</span><br></pre></td></tr></table></figure><h4 id="1-4-3-3-PropertySource"><a href="#1-4-3-3-PropertySource" class="headerlink" title="1.4.3.3    @PropertySource"></a>1.4.3.3    @PropertySource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PropertySource</span><br><span class="line">    作用：</span><br><span class="line">        用于加载.properties文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到properties配置文件中，就可以使用此注解指定properties配置文件的位置。</span><br><span class="line">    属性：</span><br><span class="line">        value[]：用于指定properties文件位置。如果是在类路径下，需要写上classpath:</span><br></pre></td></tr></table></figure><h4 id="1-4-3-4-Import"><a href="#1-4-3-4-Import" class="headerlink" title="1.4.3.4    @Import"></a>1.4.3.4    @Import</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Import</span><br><span class="line">    作用：</span><br><span class="line">        用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration注解。当然，写上也没问题。</span><br><span class="line">    属性：</span><br><span class="line">        value[]：用于指定其他配置类的字节码。</span><br></pre></td></tr></table></figure><h4 id="1-4-3-5-Bean"><a href="#1-4-3-5-Bean" class="headerlink" title="1.4.3.5    @Bean"></a>1.4.3.5    @Bean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">    作用：</span><br><span class="line">        该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。它就相当于我们之前在xml配置中介绍的factory-bean和factory-method。</span><br><span class="line">    属性：</span><br><span class="line">        name：给当前@Bean注解方法创建的对象指定一个名称(即bean的id）。</span><br></pre></td></tr></table></figure><h4 id="1-4-3-6-代码示例"><a href="#1-4-3-6-代码示例" class="headerlink" title="1.4.3.6    代码示例"></a>1.4.3.6    代码示例</h4><p><code>jdbcConfig.properties:</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>Jdbc的配置类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jdbc的配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"runner"</span>)<span class="comment">//它是把方法的返回值存入Spring容器中。该注解有一个属性，name：用于指定bean的id。当不指定时它有默认值，默认值是方法的名称。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(@Qualifier(<span class="string">"ds1"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ds"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(driver);<span class="comment">//com.mysql.jdbc.Driver</span></span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ds1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个spring的配置类</span></span><br><span class="line"><span class="comment"> * 它的作用就相当于bean.xml</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//它就是把当前类看成是spring的配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"com.wgy"</span>&#125;)</span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>&#125;)//导入其他配置类</span></span><br><span class="line"><span class="class">@<span class="title">PropertySource</span>(</span>&#123;<span class="string">"classpath:config/jdbcConfig.properties"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring EL表达式失效问题：</span></span><br><span class="line"><span class="comment">     * 目前使用的版本是4.2.4,在spring4.3以前都需要提供一个占位符配置器：</span></span><br><span class="line"><span class="comment">     * PropertySourcesPlaceholderConfigurer</span></span><br><span class="line"><span class="comment">     * 而在spring4.3以后，则不需要提供。</span></span><br><span class="line"><span class="comment">     * 提供的方式如下：（在SpringConfiguration或JdbcConfig中配置均可）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">createPropertySourcesPlaceholderConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Spring整合Junit"><a href="#2-Spring整合Junit" class="headerlink" title="2.    Spring整合Junit"></a>2.    Spring整合Junit</h1><h2 id="2-1-准备测试环境"><a href="#2-1-准备测试环境" class="headerlink" title="2.1    准备测试环境"></a>2.1    准备测试环境</h2><h3 id="2-1-1-创建业务层接口实现类"><a href="#2-1-1-创建业务层接口实现类" class="headerlink" title="2.1.1    创建业务层接口实现类"></a>2.1.1    创建业务层接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(ICustomerDao customerDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-创建持久层接口实现类"><a href="#2-1-2-创建持久层接口实现类" class="headerlink" title="2.1.2    创建持久层接口实现类"></a>2.1.2    创建持久层接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了所有客户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-导入junit的jar包"><a href="#2-1-3-导入junit的jar包" class="headerlink" title="2.1.3    导入junit的jar包"></a>2.1.3    导入junit的jar包</h3><p><img src="https://ae01.alicdn.com/kf/Hf2a3437406bc41b7b3e01e3ba5fc1709Y.jpg" alt="image-20200611141929079"></p><h3 id="2-1-4-编写测试类"><a href="#2-1-4-编写测试类" class="headerlink" title="2.1.4    编写测试类"></a>2.1.4    编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试客户的业务层和持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-使用xml配置步骤"><a href="#2-2-使用xml配置步骤" class="headerlink" title="2.2    使用xml配置步骤"></a>2.2    使用xml配置步骤</h2><h3 id="2-2-1-xml文件中的配置"><a href="#2-2-1-xml文件中的配置" class="headerlink" title="2.2.1    xml文件中的配置"></a>2.2.1    xml文件中的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把资源交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-拷贝整合junit的必备jar包"><a href="#2-2-2-拷贝整合junit的必备jar包" class="headerlink" title="2.2.2    拷贝整合junit的必备jar包"></a>2.2.2    拷贝整合junit的必备jar包</h3><p><img src="https://ae01.alicdn.com/kf/H5c098d75704c45b08b481dcbea30ded17.jpg" alt="image-20200611142214483"></p><h3 id="2-2-3-使用-RunWith注解替换原有运行器"><a href="#2-2-3-使用-RunWith注解替换原有运行器" class="headerlink" title="2.2.3    使用@RunWith注解替换原有运行器"></a>2.2.3    使用@RunWith注解替换原有运行器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-使用-ContextConfiguration指定spring配置文件的位置"><a href="#2-2-4-使用-ContextConfiguration指定spring配置文件的位置" class="headerlink" title="2.2.4    使用@ContextConfiguration指定spring配置文件的位置"></a>2.2.4    使用@ContextConfiguration指定spring配置文件的位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=&#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-使用-Autowired给测试类中的变量注入数据"><a href="#2-2-5-使用-Autowired给测试类中的变量注入数据" class="headerlink" title="2.2.5    使用@Autowired给测试类中的变量注入数据"></a>2.2.5    使用@Autowired给测试类中的变量注入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=&#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-使用纯注解配置步骤"><a href="#2-3-使用纯注解配置步骤" class="headerlink" title="2.3    使用纯注解配置步骤"></a>2.3    使用纯注解配置步骤</h2><h3 id="2-3-1-拷贝整合junit的必备jar"><a href="#2-3-1-拷贝整合junit的必备jar" class="headerlink" title="2.3.1    拷贝整合junit的必备jar"></a>2.3.1    拷贝整合junit的必备jar</h3><p><img src="https://ae01.alicdn.com/kf/H5c098d75704c45b08b481dcbea30ded17.jpg" alt="image-20200611142214483"></p><h3 id="2-3-2-把资源都用注解管理"><a href="#2-3-2-把资源都用注解管理" class="headerlink" title="2.3.2    把资源都用注解管理"></a>2.3.2    把资源都用注解管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询了所有客户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-使用注解配置方式创建Spring容器"><a href="#2-3-3-使用注解配置方式创建Spring容器" class="headerlink" title="2.3.3    使用注解配置方式创建Spring容器"></a>2.3.3    使用注解配置方式创建Spring容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123;<span class="string">"com.wgy"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-使用RunWith注解和ContextConfiguration注解配置"><a href="#2-3-4-使用RunWith注解和ContextConfiguration注解配置" class="headerlink" title="2.3.4    使用RunWith注解和ContextConfiguration注解配置"></a>2.3.4    使用RunWith注解和ContextConfiguration注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=&#123;CustomerServiceTest<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class">@<span class="title">ComponentScan</span>(<span class="title">basePackages</span></span>=&#123;<span class="string">"com.wgy"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.findAllCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-为什么不把测试类配到xml中"><a href="#2-4-为什么不把测试类配到xml中" class="headerlink" title="2.4    为什么不把测试类配到xml中"></a>2.4    为什么不把测试类配到xml中</h2><ol><li>当我们在xml中配置了一个bean，Spring加载配置文件创建容器时，就会创建对象。</li><li>测试类只是我们在测试功能时使用，而在项目中它并不参与程序逻辑，也不会解决需求上的问题，所以创建完了，并没有使用。那么存在容器中就会造成资源的浪费。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基于注解的IOC配置&quot;&gt;&lt;a href=&quot;#1-基于注解的IOC配置&quot; class=&quot;headerlink&quot; title=&quot;1.    基于注解的IOC配置&quot;&gt;&lt;/a&gt;1.    基于注解的IOC配置&lt;/h1&gt;&lt;h2 id=&quot;1-1-写在最前&quot;&gt;&lt;a href=&quot;#1-1-写在最前&quot; class=&quot;headerlink&quot; title=&quot;1.1    写在最前&quot;&gt;&lt;/a&gt;1.1    写在最前&lt;/h2&gt;&lt;p&gt;学习基于注解的IoC配置，大家脑海里首先得有一个认知，即注解配置和xml配置要实现的功能都是一样的，都是要降低程序间的耦合。只是配置的形式不一样。&lt;/p&gt;
&lt;p&gt;关于实际的开发中到底使用xml还是注解，每家公司有着不同的使用习惯。所以这两种配置方式我们都需要掌握。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(一)</title>
    <link href="https://wgy1993.gitee.io/archives/b9cbcaed.html"/>
    <id>https://wgy1993.gitee.io/archives/b9cbcaed.html</id>
    <published>2020-06-10T15:26:00.000Z</published>
    <updated>2020-06-10T15:42:45.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1.    Spring概述"></a>1.    Spring概述</h1><h2 id="1-1-Spring概述"><a href="#1-1-Spring概述" class="headerlink" title="1.1    Spring概述"></a>1.1    Spring概述</h2><h3 id="1-1-1-Spring介绍"><a href="#1-1-1-Spring介绍" class="headerlink" title="1.1.1    Spring介绍"></a>1.1.1    Spring介绍</h3><p>Spring是分层的Java SE/EE应用 full-stack轻量级开源框架，以IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。</p><a id="more"></a><h3 id="1-1-2-Spring的发展历程"><a href="#1-1-2-Spring的发展历程" class="headerlink" title="1.1.2    Spring的发展历程"></a>1.1.2    Spring的发展历程</h3><p>1997年IBM提出了EJB的思想</p><p>1998年，SUN制定开发标准规范EJB1.0</p><p>1999年，EJB1.1发布</p><p>2001年，EJB2.0发布</p><p>2003年，EJB2.1发布</p><p>2006年，EJB3.0发布</p><p><strong>Rod Johnson（spring之父）</strong></p><p>​    Expert One-to-One J2EE Design and Development(2002)</p><p>​    阐述了J2EE使用EJB开发设计的优点及解决方案</p><p>​    Expert One-to-One J2EE Development without EJB(2004)</p><p>​    阐述了J2EE开发不使用EJB的解决方式（Spring雏形）</p><h3 id="1-1-3-Spring的优势"><a href="#1-1-3-Spring的优势" class="headerlink" title="1.1.3    Spring的优势"></a>1.1.3    Spring的优势</h3><p><strong>方便解耦，简化开发</strong></p><p>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p><p><strong>AOP编程的支持</strong></p><p>通过Spring的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</p><p><strong>声明式事务的支持</strong></p><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</p><p><strong>方便程序的测试</strong></p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p><p><strong>方便集成各种优秀框架</strong></p><p>Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的直接支持。</p><p><strong>降低JavaEE API的使用难度</strong></p><p>Spring对JavaEE API（如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。</p><p><strong>Java源码是经典学习范例</strong></p><p>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无意是Java技术的最佳实践的范例。</p><h3 id="1-1-4-Spring的体系结构"><a href="#1-1-4-Spring的体系结构" class="headerlink" title="1.1.4    Spring的体系结构"></a>1.1.4    Spring的体系结构</h3><p><img src="https://ae01.alicdn.com/kf/H79b550755de64c17b8ee0ae7b6d266bff.jpg" alt="image-20200610214632321"></p><h2 id="1-2-程序的耦合和解耦"><a href="#1-2-程序的耦合和解耦" class="headerlink" title="1.2    程序的耦合和解耦"></a>1.2    程序的耦合和解耦</h2><h3 id="1-2-1-什么是程序的耦合"><a href="#1-2-1-什么是程序的耦合" class="headerlink" title="1.2.1    什么是程序的耦合"></a>1.2.1    什么是程序的耦合</h3><p>我们在开发中，会写很多的类，而有些类之间不可避免的产生依赖关系，这种依赖关系称之为耦合。</p><p>有些依赖关系是必须的，有些依赖关系可以通过优化代码来解除的。请看下面的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码表示：业务层调用持久层，并且此时业务层在依赖持久层的接口和实现类。如果此时没有持久层实现类，编译将不能通过。这种依赖关系就是我们可以通过优化代码解决的。</p><p><strong>再比如：</strong></p><p>下面的代码中，我们的类依赖了MySQL的具体驱动类，如果这时候更换了数据库品牌，我们需要改源码来修改数据库驱动。这显然不是我们想要的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC操作数据库的基本入门中存在什么问题？</span></span><br><span class="line"><span class="comment">     *   导致驱动注册两次是个问题，但不是严重的。</span></span><br><span class="line"><span class="comment">     *   严重的问题：是当前类和mysql的驱动类有很强的依赖关系。</span></span><br><span class="line"><span class="comment">     *      当我们没有驱动类的时候，连编译都不让。</span></span><br><span class="line"><span class="comment">     * 那这种依赖关系，就叫做程序的耦合</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 我们在开发中，理想的状态应该是：</span></span><br><span class="line"><span class="comment">     *   我们应该尽力达到的：编译时不依赖，运行时才依赖。</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">        <span class="comment">//Class.forName("com.mysql.jdbc.Driver");</span></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="comment">//3.获取预处理sql语句对象</span></span><br><span class="line">        <span class="comment">//4.获取结果集</span></span><br><span class="line">        <span class="comment">//5.遍历结果集</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-解决程序耦合的思路"><a href="#1-2-2-解决程序耦合的思路" class="headerlink" title="1.2.2    解决程序耦合的思路"></a>1.2.2    解决程序耦合的思路</h3><p>当是我们讲解jdbc时，是通过反射来注册驱动的，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><p>这时的好处是，我们的类中不再依赖具体的驱动类，此时就算删除mysql的驱动jar包，依然可以编译。但是因为没有驱动类，所以不能运行。</p><p>不过，此处也有个问题，就是我们反射类对象的全限定类名字符串是在java类中写死的，一旦要改还是要修改源码。</p><p>解决这个问题也很简单，使用配置文件配置。</p><h3 id="1-2-3-工厂模式解耦"><a href="#1-2-3-工厂模式解耦" class="headerlink" title="1.2.3    工厂模式解耦"></a>1.2.3    工厂模式解耦</h3><p>在实际开发中我们可以把所有的dao和service和action对象使用配置文件配置起来，当启动服务器应用加载的时候，通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。</p><h3 id="1-2-4-控制反转-Inversion-Of-Control"><a href="#1-2-4-控制反转-Inversion-Of-Control" class="headerlink" title="1.2.4    控制反转-Inversion Of Control"></a>1.2.4    控制反转-Inversion Of Control</h3><p>上面解耦的思路有2个问题：</p><p><strong>1、存哪去？</strong></p><p>分析：由于我们是很多对象，肯定要找个集合来存。这时候有Map和List供选择。</p><p>​            到底选Map还是List就看我们有没有查找需求。有查找需求，选Map。</p><p>所以我们的答案就是：</p><p>​           在应用加载时，创建一个Map，用于存放action，Service和dao对象。</p><p>​           我们把这个map称之为<strong>容器</strong>。</p><p><strong>2、还是没解释什么是工厂？</strong></p><p>工厂就是负责给我们从容器中获取指定对象的类。这时候我们获取对象的方式发生了改变。</p><p>原来：</p><p>​        我们在获取对象时，都是采用new的方式。是主动的。</p><p><img src="https://ae01.alicdn.com/kf/H47b61de22b504f06ac95ec0f75f00325h.jpg" alt="img"></p><p>现在：</p><p>​        我们获取对象时，同时跟工厂要，有工厂为我们查找或者创建对象。是被动的。</p><p><img src="https://ae01.alicdn.com/kf/He877ec63b593433795bae00197a236eaL.jpg" alt="img"></p><p>这种被动接收的方式获取对象的思想就是控制反转，它是Spring框架的核心之一。</p><p>它的作用只有一个：削减计算机程序的耦合。</p><blockquote><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/面向对象编程" target="_blank" rel="noopener">面向对象编程</a>中的一种设计原则，可以用来减低计算机代码之间的<a href="https://baike.baidu.com/item/耦合度" target="_blank" rel="noopener">耦合度</a>。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p></blockquote><h1 id="2-使用Spring的IOC解决程序耦合"><a href="#2-使用Spring的IOC解决程序耦合" class="headerlink" title="2.    使用Spring的IOC解决程序耦合"></a>2.    使用Spring的IOC解决程序耦合</h1><h2 id="2-1-案例的前期准备"><a href="#2-1-案例的前期准备" class="headerlink" title="2.1    案例的前期准备"></a>2.1    案例的前期准备</h2><p>本章我们使用的案例是，客户的业务层和持久层的依赖关系解决。在开始Spring的配置之前，我们要先准备一下环境。由于我们是使用Spring解决依赖关系，并不是真正的要做增伤改查操作，所以此时我们没必要写实体类。并且我们在此处使用的是java工程，不是java web工程。</p><h3 id="2-1-1-准备Spring的开发包"><a href="#2-1-1-准备Spring的开发包" class="headerlink" title="2.1.1    准备Spring的开发包"></a>2.1.1    准备Spring的开发包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">官网：http:&#x2F;&#x2F;spring.io&#x2F; </span><br><span class="line">下载地址：</span><br><span class="line">http:&#x2F;&#x2F;repo.springsource.org&#x2F;libs-release-local&#x2F;org&#x2F;springframework&#x2F;spring</span><br><span class="line">解压:(Spring目录结构:)</span><br><span class="line">    * docs:API和开发规范.</span><br><span class="line">    * libs:jar包和源码.</span><br><span class="line">    * schema:约束.</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H416dff6a7e2148e68a2e45b48fb1caf91.jpg" alt="image-20200610220328001"></p><h3 id="2-1-2-创建业务层接口和实现类"><a href="#2-1-2-创建业务层接口和实现类" class="headerlink" title="2.1.2    创建业务层接口和实现类"></a>2.1.2    创建业务层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟：客户的业务层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();<span class="comment">//此处有依赖关系</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span>);</span><br><span class="line">        customerDao.saveCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-创建持久层接口和实现类"><a href="#2-1-3-创建持久层接口和实现类" class="headerlink" title="2.1.3    创建持久层接口和实现类"></a>2.1.3    创建持久层接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个客户dao</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟客户的持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"持久层保存了客户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-基于XML的配置（入门案例）"><a href="#2-2-基于XML的配置（入门案例）" class="headerlink" title="2.2    基于XML的配置（入门案例）"></a>2.2    基于XML的配置（入门案例）</h2><h3 id="2-2-1-拷贝必备的jar包"><a href="#2-2-1-拷贝必备的jar包" class="headerlink" title="2.2.1    拷贝必备的jar包"></a>2.2.1    拷贝必备的jar包</h3><p><img src="https://ae01.alicdn.com/kf/Hb69badafef854db0961f917646df703bP.jpg" alt="image-20200610220759972"></p><h3 id="2-2-2-在类根路径下创建任意名称的xml文件"><a href="#2-2-2-在类根路径下创建任意名称的xml文件" class="headerlink" title="2.2.2    在类根路径下创建任意名称的xml文件"></a>2.2.2    在类根路径下创建任意名称的xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入schema约束</span></span><br><span class="line"><span class="comment">约束的位置在:</span></span><br><span class="line"><span class="comment">..\spring-framework-4.2.4.RELEASE\docs\spring-framework-reference\html\xsd-configuration.html文件中。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-把资源交给spring来管理"><a href="#2-2-3-把资源交给spring来管理" class="headerlink" title="2.2.3    把资源交给spring来管理"></a>2.2.3    把资源交给spring来管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置资源：把对象的创建交给spring来管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.wgy.dao.impl.CustomerDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-测试配置是否成功"><a href="#2-2-4-测试配置是否成功" class="headerlink" title="2.2.4    测试配置是否成功"></a>2.2.4    测试配置是否成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring的入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ClassPahtXmlApplicationContext：它是只能加载类路径下的配置文件我们用这个</span></span><br><span class="line"><span class="comment">     * FileSystemXmlApplicationContext：它是可以加载磁盘任意位置的配置文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.根据bean的id获取对象</span></span><br><span class="line">        ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">        cs.saveCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Spring基于XML的IOC细节"><a href="#2-3-Spring基于XML的IOC细节" class="headerlink" title="2.3    Spring基于XML的IOC细节"></a>2.3    Spring基于XML的IOC细节</h2><h3 id="2-3-1-Spring中工厂的类结构图"><a href="#2-3-1-Spring中工厂的类结构图" class="headerlink" title="2.3.1    Spring中工厂的类结构图"></a>2.3.1    Spring中工厂的类结构图</h3><p><img src="https://ae01.alicdn.com/kf/Hd9718e12764942bf85149339b6955f2eN.jpg" alt="img"></p><h4 id="2-3-1-1-Bean创建的两种规则"><a href="#2-3-1-1-Bean创建的两种规则" class="headerlink" title="2.3.1.1    Bean创建的两种规则"></a>2.3.1.1    Bean创建的两种规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory:</span><br><span class="line">    提供的是一种延迟加载思想来创建bean对象。bean对象什么时候用什么时候创建</span><br><span class="line">ApplicationContext</span><br><span class="line">    提供的是一种立即加载思想来创建bean对象。只要一解析完配置文件，就立马创建bean对象。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取容器</span></span><br><span class="line">    Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"bean.xml"</span>);</span><br><span class="line">    BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">    <span class="comment">//2.根据bean的id获取对象</span></span><br><span class="line">    ICustomerService cs = (ICustomerService) factory.getBean(<span class="string">"customerService"</span>);</span><br><span class="line"></span><br><span class="line">    cs.saveCustomer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-IOC中bean标签和管理对象细节"><a href="#2-3-2-IOC中bean标签和管理对象细节" class="headerlink" title="2.3.2    IOC中bean标签和管理对象细节"></a>2.3.2    IOC中bean标签和管理对象细节</h3><h4 id="2-3-2-1-bean标签"><a href="#2-3-2-1-bean标签" class="headerlink" title="2.3.2.1    bean标签"></a>2.3.2.1    bean标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">作用：</span><br><span class="line">    用于配置对象让Spring来创建的。</span><br><span class="line">    默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</span><br><span class="line">属性：</span><br><span class="line">    id：给对象在容器中提供一个唯一标识。用于获取对象。</span><br><span class="line">    class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。</span><br><span class="line">    scope：指定对象的作用范围。</span><br><span class="line">    init-method：指定类中的初始化方法名称。</span><br><span class="line">    destroy-method：指定类中销毁方法名称。</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;customerService&quot; class&#x3D;&quot;com.wgy.service.impl.CustomerServiceImpl&quot;</span><br><span class="line">        scope&#x3D;&quot;singleton&quot; init-method&#x3D;&quot;init&quot; destroy-method&#x3D;&quot;destroy&quot;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bean对象创建了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象初始化了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象销毁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-Bean的作用范围"><a href="#2-3-2-2-Bean的作用范围" class="headerlink" title="2.3.2.2    Bean的作用范围"></a>2.3.2.2    Bean的作用范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Bean的作用范围：</span><br><span class="line">    它是可以通过配置的方式来调整作用范围。</span><br><span class="line">    配置的属性：bean标签的scope属性。</span><br><span class="line">    属性的取值：</span><br><span class="line">        singleton：单例的（默认值）</span><br><span class="line">        prototype：多例的（当我们让spring接管struts2的action创建时，action必须配置此值）</span><br><span class="line">        request：作用范围是一次请求，和当前请求的转发。</span><br><span class="line">        session：作用范围是一次会话。</span><br><span class="line">        globalsession ：作用范围是一次全局会话。</span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-Bean的生命周期"><a href="#2-3-2-3-Bean的生命周期" class="headerlink" title="2.3.2.3    Bean的生命周期"></a>2.3.2.3    Bean的生命周期</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bean的生命周期：</span><br><span class="line">    涉及bean标签的两个属性：</span><br><span class="line">        init-method</span><br><span class="line">        destroy-method</span><br><span class="line">    单例：</span><br><span class="line">        出生：容器创建，对象就出生了。</span><br><span class="line">        活着：只要容器在，对象就一直存在。</span><br><span class="line">        死亡：容器销毁，对象消亡。</span><br><span class="line">    多例：</span><br><span class="line">        出生：每次使用时，创建对象</span><br><span class="line">        活着：只要对象在使用中，就一直活着</span><br><span class="line">        死亡：当对象长时间不使用，并且也没有别的对象引用时，由java的垃圾回收器回收。</span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-Bean的三种创建方式"><a href="#2-3-2-4-Bean的三种创建方式" class="headerlink" title="2.3.2.4    Bean的三种创建方式"></a>2.3.2.4    Bean的三种创建方式</h4><p>第一种方式：调用默认无参构造函数创建    此种方式用的最多</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在默认情况下：</span></span><br><span class="line"><span class="comment">    它会根据默认无参构造函数来创建类对象。如果bean中没有默认无参构造函数，则创建失败，会报异常 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方式：使用静态工厂中的方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个静态工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICustomerService <span class="title">getCustomerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是:</span></span><br><span class="line"><span class="comment">     使用StaticFactory类中的静态方法getCustomerService创建对象，并存入Spring容器</span></span><br><span class="line"><span class="comment">     id属性：指定bean的id，用于从容器中获取</span></span><br><span class="line"><span class="comment">     class属性：指定静态工厂的全限定类名</span></span><br><span class="line"><span class="comment">     factory-method属性：指定生产对象的静态方法</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"staticCustomerService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.wgy.factory.StaticFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"getCustomerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三种方式：使用实例工厂中的方法创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个实例工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICustomerService <span class="title">getCustomerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是：</span></span><br><span class="line"><span class="comment">     先把工厂的创建交给Spring来管理。</span></span><br><span class="line"><span class="comment">     然后在使用工厂的bean来调用里面的方法</span></span><br><span class="line"><span class="comment">     factory-bean属性：用于指定实例工厂bean的id。</span></span><br><span class="line"><span class="comment">     factory-method属性：用于指定实例工厂中创建对象的方法。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instancFactory"</span> <span class="attr">class</span>=<span class="string">"com.wgy.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceCustomerService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">"instancFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"getCustomerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-Spring的依赖注入"><a href="#2-3-3-Spring的依赖注入" class="headerlink" title="2.3.3    Spring的依赖注入"></a>2.3.3    Spring的依赖注入</h3><p>它是spring框架核心ioc的具体实现方式。简单的说，就是坐等框架把对象传入，而不用我们自己去获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Spring的依赖注入：</span><br><span class="line">    注入的方式有3三种：</span><br><span class="line">        第一种：使用构造函数注入</span><br><span class="line">        第二种：使用set方法注入</span><br><span class="line">        第三种：使用注解注入</span><br><span class="line">    注入的数据类型有3类：</span><br><span class="line">        第一类：基本类型和String类型</span><br><span class="line">        第二类：其他bean类型（必须是在spring的配置文件中出现过的bean）</span><br><span class="line">        第三类：复杂类型（集合类型）</span><br></pre></td></tr></table></figure><h4 id="2-3-3-1-构造函数注入"><a href="#2-3-3-1-构造函数注入" class="headerlink" title="2.3.3.1    构造函数注入"></a>2.3.3.1    构造函数注入</h4><p>就是使用类中的构造函数，给成员变量赋值。注意，赋值的操作不是我们自己做的，而是通过配置的方式，让Spring框架来为我们注入。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> Date today;</span><br><span class="line">    <span class="comment">//以上三个类成员，没有具体的实际意义，只是用于演示注入。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerServiceImpl</span><span class="params">(String driver, Integer port, Date today)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.today = today;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span>+driver+<span class="string">","</span>+port+<span class="string">","</span>+today);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构造函数注入：</span></span><br><span class="line"><span class="comment">      涉及的标签：constructor-arg</span></span><br><span class="line"><span class="comment">      标签的属性：</span></span><br><span class="line"><span class="comment">            type:指定参数的类型。</span></span><br><span class="line"><span class="comment">            index:指定参数的索引位置，从0开始。</span></span><br><span class="line"><span class="comment">            name:指定参数的名称。一般用它</span></span><br><span class="line"><span class="comment">            ========上面三个属性是指定给哪个参数赋值的，下面两个属性是指定赋什么值的==============</span></span><br><span class="line"><span class="comment">            value:指定基本数据类型或String类型的数据</span></span><br><span class="line"><span class="comment">            ref:指定其他bean类型数据</span></span><br><span class="line"><span class="comment">      标签出现的位置：</span></span><br><span class="line"><span class="comment">            写在bean标签内部</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"3306"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"today"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-set方法注入"><a href="#2-3-3-2-set方法注入" class="headerlink" title="2.3.3.2    set方法注入"></a>2.3.3.2    set方法注入</h4><p>就是在类中提供需要注入成员的set方法。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl2</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> Date today;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以上三个类成员，没有具体的实际意义，只是用于演示注入。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(Integer port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToday</span><span class="params">(Date today)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.today = today;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层调用持久层"</span> + driver + <span class="string">","</span> + port + <span class="string">","</span> + today);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set方法注入</span></span><br><span class="line"><span class="comment">        涉及的标签：property</span></span><br><span class="line"><span class="comment">        标签的属性：</span></span><br><span class="line"><span class="comment">            name:指定参数的set方法名称。</span></span><br><span class="line"><span class="comment">            =========上面三个属性是指定给哪个参数赋值的，下面两个属性是指定赋什么值的============</span></span><br><span class="line"><span class="comment">            value:指定基本数据类型或String类型的数据</span></span><br><span class="line"><span class="comment">            ref:指定其他bean类型数据</span></span><br><span class="line"><span class="comment">        标签出现的位置：</span></span><br><span class="line"><span class="comment">            写在bean标签内部</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService2"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"3307"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"today"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-复杂类型的注入"><a href="#2-3-3-3-复杂类型的注入" class="headerlink" title="2.3.3.3    复杂类型的注入"></a>2.3.3.3    复杂类型的注入</h4><p>就是给类中的集合成员传值，它用的也是set方法注入的方式，只不过变量的数据类型都是集合。我们这里介绍注入数组，List,Set,Map,Properties。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl3</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 复杂类型的注入</span></span><br><span class="line"><span class="comment">        结构相同，标签可以互换</span></span><br><span class="line"><span class="comment">        List结构的：</span></span><br><span class="line"><span class="comment">            array,list,set</span></span><br><span class="line"><span class="comment">        Map结构的</span></span><br><span class="line"><span class="comment">            map,entry,props,prop</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService3"</span> <span class="attr">class</span>=<span class="string">"com.wgy.service.impl.CustomerServiceImpl3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testF"</span>&gt;</span>FFF<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testG"</span>&gt;</span>GGG<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testD"</span> <span class="attr">value</span>=<span class="string">"DDD"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testE"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>EEE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Spring概述&quot;&gt;&lt;a href=&quot;#1-Spring概述&quot; class=&quot;headerlink&quot; title=&quot;1.    Spring概述&quot;&gt;&lt;/a&gt;1.    Spring概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-Spring概述&quot;&gt;&lt;a href=&quot;#1-1-Spring概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    Spring概述&quot;&gt;&lt;/a&gt;1.1    Spring概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-Spring介绍&quot;&gt;&lt;a href=&quot;#1-1-1-Spring介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    Spring介绍&quot;&gt;&lt;/a&gt;1.1.1    Spring介绍&lt;/h3&gt;&lt;p&gt;Spring是分层的Java SE/EE应用 full-stack轻量级开源框架，以IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://wgy1993.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Struts2(四)</title>
    <link href="https://wgy1993.gitee.io/archives/bb3a06c4.html"/>
    <id>https://wgy1993.gitee.io/archives/bb3a06c4.html</id>
    <published>2020-06-08T07:27:44.000Z</published>
    <updated>2020-06-08T07:35:50.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Struts2中的拦截器"><a href="#1-Struts2中的拦截器" class="headerlink" title="1.    Struts2中的拦截器"></a>1.    Struts2中的拦截器</h1><h2 id="1-1-Struts2的拦截器基本概念"><a href="#1-1-Struts2的拦截器基本概念" class="headerlink" title="1.1    Struts2的拦截器基本概念"></a>1.1    Struts2的拦截器基本概念</h2><h3 id="1-1-1-拦截器概述"><a href="#1-1-1-拦截器概述" class="headerlink" title="1.1.1    拦截器概述"></a>1.1.1    拦截器概述</h3><p>在Webwork的中文文档的解释为——拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者在定义的action执行的前后加入执行的代码，也可以在一个action执行前阻止其执行。也就是说它提供了一种可以<strong>提取action中可重用代码，统一管理和执行的方式</strong>。</p><a id="more"></a><p>拦截器链 （Interceptor Chain，在Struts 2中称为拦截器栈Interceptor Stack）。拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。</p><p>拦截器和过滤器是有几分相似，但是也有区别：</p><ul><li><strong>过滤器</strong>是servlet规范中的一部分，任何java web工程都可以使用。</li><li><strong>拦截器</strong>是struts2框架自己的，只有使用了struts2框架的工程才能用。</li><li><strong>过滤器</strong>在url-pattern中配置了<strong>/*</strong>之后，可以对所有要访问的资源拦截。</li><li><strong>拦截器</strong>它是只有进入struts2核心内部之后，才会起作用，如果访问的是jsp，html,css,image或者js是不会进行拦截的。</li></ul><p>同时，拦截器还是AOP编程思想的具体体现形式。<strong>AOP（Aspect-Oriented Programming）</strong>简单的说就是：</p><ul><li>在不修改源码的基础上，已有的方法进行动态增强。</li><li>在struts2中，拦截器它就是对我们的动作方法进行增强。（其实就是把重复性的代码提取出来，然后放到拦截器中，统一管理，统一调用）</li></ul><h3 id="1-1-2-拦截器的执行时机"><a href="#1-1-2-拦截器的执行时机" class="headerlink" title="1.1.2    拦截器的执行时机"></a>1.1.2    拦截器的执行时机</h3><p>在访问struts2核心内部时，在动作方法执行之前先正序执行，然后执行动作方法，执行完动作方法和结果视图之后，再倒序执行。<strong>所以它是先进后出，是个栈的结构。</strong>具体可参考下图：</p><p><img src="https://ae01.alicdn.com/kf/H4b8d160a011e468f93041a943c89aca0u.jpg" alt="image-20200608142116219"></p><h2 id="1-2-自定义拦截器"><a href="#1-2-自定义拦截器" class="headerlink" title="1.2    自定义拦截器"></a>1.2    自定义拦截器</h2><p><strong>直接或间接的实现Interceptor接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口提供了三个方法，其具体介绍如下。</p><ul><li>void init()：该方法在拦截器被创建后会立即被调用, 它在拦截器的生命周期内只被调用一次. 可以在该方法中对相关资源进行必要的初始化。</li><li>void destroy()：该方法与init方法相对应，在拦截器实例被销毁之前，将调用该方法来释放和拦截器相关的资源。它在拦截器的生命周期内，也只被调用一次。</li><li>String intercept(ActionInvocation invocation) throws Exception：该方法是拦截器的核心方法，用来添加真正执行拦截工作的代码，实现具体的拦截操作。它返回一个字符串作为逻辑视图，系统根据返回的字符串跳转到对应的视图资源。每拦截一个动作请求, 该方法就会被调用一次。该方法的ActionInvocation参数包含了被拦截的Action的引用，可以通过该参数的invoke()方法，将控制权转给下一个拦截器或者转给Action的execute()方法。</li></ul><p><strong>继承抽象拦截器类AbstractIntercepter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractInterceptor有一个子类MethodFilterInterceptor，该类中提供了两个属性，可以告知拦截器对哪些方法进行拦截或者对哪些方法排除。</p><p><img src="https://ae01.alicdn.com/kf/Hf2d15c08fca648f1a70cd3735c3be409Z.jpg" alt="img"></p><h3 id="1-2-1-第一步：编写普通java类，继承AbstractInterceptor"><a href="#1-2-1-第一步：编写普通java类，继承AbstractInterceptor" class="headerlink" title="1.2.1    第一步：编写普通java类，继承AbstractInterceptor"></a>1.2.1    第一步：编写普通java类，继承AbstractInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> *  第一步：编写一个普通类，继承AbstractInterceptor（也可以实现Interceptor接口）</span></span><br><span class="line"><span class="comment"> *  第二步：配置拦截器</span></span><br><span class="line"><span class="comment"> *      &lt;!-- 声明一个拦截器 --&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;interceptors&gt;</span></span><br><span class="line"><span class="comment"> *          &lt;interceptor name="myInterceptor" class="com.itheima.web.interceptors.MyInterceptor"&gt;&lt;/interceptor&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;/interceptors&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;!-- 引用拦截器：写在action标签的内部。当我们写了自己的拦截器引用时，默认的拦截器栈就失效了 --&gt;</span></span><br><span class="line"><span class="comment"> *      &lt;interceptor-ref name="myInterceptor"&gt;&lt;/interceptor-ref&gt;</span></span><br><span class="line"><span class="comment"> *  拦截器的放行：</span></span><br><span class="line"><span class="comment"> *      invocation.invoke();</span></span><br><span class="line"><span class="comment"> *  返回值的内容是：</span></span><br><span class="line"><span class="comment"> *      动作方法的返回值</span></span><br><span class="line"><span class="comment"> *  关于结果视图的执行时机以及拦截器的返回值问题</span></span><br><span class="line"><span class="comment"> *      在放行之前，拦截器的返回值可以控制显示哪个结果视图。一旦放行之后，它一定会显示动作方法返回值所匹配的结果视图，此时已经不管拦截器返回什么内容。</span></span><br><span class="line"><span class="comment"> *  多个拦截器的执行顺序问题：</span></span><br><span class="line"><span class="comment"> *      是由引用顺序决定的，与声明顺序无关</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"访问Action之前：MyInterceptor拦截了。。。。"</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        String rtValue = invocation.invoke();</span><br><span class="line">        System.out.println(<span class="string">"访问Action之后：MyInterceptor拦截了。。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-第二步：在struts-xml中配置拦截器"><a href="#1-2-2-第二步：在struts-xml中配置拦截器" class="headerlink" title="1.2.2    第二步：在struts.xml中配置拦截器"></a>1.2.2    第二步：在struts.xml中配置拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">        &lt;!-- 声明一个拦截器 --&gt;</span><br><span class="line">        &lt;interceptors&gt;</span><br><span class="line">            &lt;interceptor name&#x3D;&quot;myIntercepter&quot; class&#x3D;&quot;com.wgy.web.interceptors.MyInterceptor&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;interceptors&gt;</span><br><span class="line"></span><br><span class="line">        &lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">            &lt;!-- 引用拦截器：当我们写了自己的拦截器引用时，默认的拦截器栈就失效了 --&gt;</span><br><span class="line">            &lt;interceptor-ref name&#x3D;&quot;myIntercepter&quot;&#x2F;&gt;</span><br><span class="line">            &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><h2 id="1-3-案例-检查登录拦截器"><a href="#1-3-案例-检查登录拦截器" class="headerlink" title="1.3    案例-检查登录拦截器"></a>1.3    案例-检查登录拦截器</h2><h3 id="1-3-1-定义拦截器"><a href="#1-3-1-定义拦截器" class="headerlink" title="1.3.1    定义拦截器"></a>1.3.1    定义拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查登录拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckLoginInterceptor2</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object obj = ServletActionContext.getRequest().getSession().getAttribute(<span class="string">"userinfo"</span>);</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没登录，去登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已登录，就放行</span></span><br><span class="line">        <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-配置拦截器"><a href="#1-3-2-配置拦截器" class="headerlink" title="1.3.2    配置拦截器"></a>1.3.2    配置拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name&#x3D;&quot;myDefault&quot; extends&#x3D;&quot;struts-default&quot; abstract&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;!-- 声明拦截器 --&gt;</span><br><span class="line">    &lt;interceptors&gt;</span><br><span class="line">        &lt;interceptor name&#x3D;&quot;checkLogin&quot; class&#x3D;&quot;com.wgy.web.interceptors.CheckLoginInterceptor2&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 定义一个自己的拦截器栈 --&gt;</span><br><span class="line">        &lt;interceptor-stack name&#x3D;&quot;myDefaultStack&quot;&gt;</span><br><span class="line">            &lt;interceptor-ref name&#x3D;&quot;checkLogin&quot;&gt;</span><br><span class="line">                &lt;!-- 告知拦截器，哪些方法需要拦截，哪些方法不需要拦截 --&gt;</span><br><span class="line">                &lt;param name&#x3D;&quot;excludeMethods&quot;&gt;userLogin&lt;&#x2F;param&gt;</span><br><span class="line">            &lt;&#x2F;interceptor-ref&gt;</span><br><span class="line">            &lt;interceptor-ref name&#x3D;&quot;defaultStack&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;interceptor-stack&gt;</span><br><span class="line">    &lt;&#x2F;interceptors&gt;</span><br><span class="line">    &lt;!-- 把我们自定义的拦截器栈声明为默认拦截器栈 --&gt;</span><br><span class="line">    &lt;default-interceptor-ref name&#x3D;&quot;myDefaultStack&quot;&#x2F;&gt;</span><br><span class="line">    &lt;global-results&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;global-results&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-编写和配置Action"><a href="#1-3-3-编写和配置Action" class="headerlink" title="1.3.3    编写和配置Action"></a>1.3.3    编写和配置Action</h3><p>动作类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BBSAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 娱乐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 体育</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 军事</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//往session域中存入一个登录标记</span></span><br><span class="line">        ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"userinfo"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;myDefault&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;demo1.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;demo2&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;demo2.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;demo3&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;demo3&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;demo3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">    &lt;action name&#x3D;&quot;login&quot; class&#x3D;&quot;com.wgy.web.action.BBSAction&quot; method&#x3D;&quot;userLogin&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;main.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h1 id="2-Struts2的注解配置"><a href="#2-Struts2的注解配置" class="headerlink" title="2.    Struts2的注解配置"></a>2.    Struts2的注解配置</h1><h2 id="2-1-使用前提"><a href="#2-1-使用前提" class="headerlink" title="2.1    使用前提"></a>2.1    使用前提</h2><p>Struts2框架，它不仅支持基于XML的配置方式，同时也支持基于注解配置的方式。</p><p>注解和XML的配置，都是告知struts2框架，当我们jsp页面发送请求，根据配置执行对应动作类的方法，并根据返回值，前往指定的结果视图（jsp页面或者其他动作）。它们只是配置的形式不一样。</p><p>其次要想使用struts2的注解，必须要导入一个新的jar包。该jar包是： <strong>struts2-convention-plugin-2.3.24.jar</strong></p><h2 id="2-2-常用注解"><a href="#2-2-常用注解" class="headerlink" title="2.2    常用注解"></a>2.2    常用注解</h2><h3 id="2-2-1-NameSpace"><a href="#2-2-1-NameSpace" class="headerlink" title="2.2.1    @NameSpace"></a>2.2.1    @NameSpace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它只能出现在package上或者Action类上。一般情况下都是写在Action类上。</span><br><span class="line">作用：</span><br><span class="line">    指定当前Action中所有动作方法的名称空间。</span><br><span class="line">属性：</span><br><span class="line">    value：指定名称空间的名称。写法和xml配置时一致。不指定的话，默认名称空间是&quot;&quot;。</span><br><span class="line">示例：</span><br><span class="line">@Namespace(&quot;&#x2F;customer&quot;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-ParentPackage"><a href="#2-2-2-ParentPackage" class="headerlink" title="2.2.2    @ParentPackage"></a>2.2.2    @ParentPackage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它只能出现在package上或者Action类上。一般情况下都是写在Action类上。</span><br><span class="line">作用：</span><br><span class="line">    指定当前动作类所在包的父包。由于我们已经是在类中配置了，所以无需在指定包名了。</span><br><span class="line">属性：</span><br><span class="line">    value：指定父包的名称。</span><br><span class="line">示例：</span><br><span class="line">@ParentPackage(&quot;struts-default&quot;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Action"><a href="#2-2-3-Action" class="headerlink" title="2.2.3    @Action"></a>2.2.3    @Action</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它只能出现在Action类上或者动作方法上。一般情况下都是写在动作方法上。</span><br><span class="line">作用：</span><br><span class="line">    指定当前动作方法的动作名称。也就是xml配置时action标签的name属性。</span><br><span class="line">属性：</span><br><span class="line">    value：指定动作名称。</span><br><span class="line">    results[]：它是一个数组，数据类型是注解。用于指定结果视图。此属性可以没有，当没有该属性时，表示不返回任何结果视图。即使用response输出响应正文。</span><br><span class="line">    interceptorRefs[]：它是一个数组，数据类型是注解。用于指定引用的拦截器。</span><br><span class="line">示例：</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取添加客户页面</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Action(value&#x3D;&quot;addUICustomer&quot;,results&#x3D;&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;addUICustomer&quot;,location&#x3D;&quot;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public String addUICustomer()&#123;</span><br><span class="line">    return &quot;addUICustomer&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Result"><a href="#2-2-4-Result" class="headerlink" title="2.2.4    @Result"></a>2.2.4    @Result</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它可以出现在动作类上，也可以出现在Action注解中。</span><br><span class="line">作用：</span><br><span class="line">    出现在类上，表示当前动作类中的所有动作方法都可以用此视图。</span><br><span class="line">    出现在Action注解中，表示当前Action可用此视图。</span><br><span class="line">属性：</span><br><span class="line">    name：指定逻辑结果视图名称。</span><br><span class="line">    type：指定前往视图的方式。例如：请求转发，重定向，重定向到另外的动作。</span><br><span class="line">    location：指定前往的地址。可以是一个页面，也可以是一个动作。</span><br><span class="line">示例：</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 保存客户</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Action(value&#x3D;&quot;addCustomer&quot;,results&#x3D;&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;addCustomer&quot;,type&#x3D;&quot;redirect&quot;,location&#x3D;&quot;&#x2F;jsp&#x2F;success.jsp&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public String addCustomer()&#123;</span><br><span class="line">    customerService.saveCustomer(customer);</span><br><span class="line">    return &quot;addCustomer&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-Results"><a href="#2-2-5-Results" class="headerlink" title="2.2.5    @Results"></a>2.2.5    @Results</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它可以出现在动作类上，也可以出现在Action注解中。</span><br><span class="line">作用：</span><br><span class="line">    用于配置多个结果视图。</span><br><span class="line">属性：</span><br><span class="line">    value：它是一个数组，数据类型是result注解。</span><br><span class="line">示例：</span><br><span class="line">@Results(&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;login&quot;,location&#x3D;&quot;&#x2F;login.jsp&quot;),</span><br><span class="line">    @Result(name&#x3D;&quot;error&quot;,location&#x3D;&quot;&#x2F;error.jsp&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-InterceptorRef"><a href="#2-2-6-InterceptorRef" class="headerlink" title="2.2.6    @InterceptorRef"></a>2.2.6    @InterceptorRef</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">出现的位置：</span><br><span class="line">    它可以出现在动作类上或者Action注解中。</span><br><span class="line">作用：</span><br><span class="line">    用于配置要引用的拦截器或者拦截器栈</span><br><span class="line">属性：</span><br><span class="line">    value：用于指定拦截器或者拦截器栈</span><br><span class="line">示例：</span><br><span class="line">出现在动作方法上：</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 查询所有客户</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Action(value&#x3D;&quot;findAllCustomer&quot;,</span><br><span class="line">    results&#x3D;&#123;</span><br><span class="line">    @Result(name&#x3D;&quot;findAllCustomer&quot;,location&#x3D;&quot;&#x2F;jsp&#x2F;customer&#x2F;list.jsp&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    interceptorRefs&#x3D;&#123;</span><br><span class="line">    @InterceptorRef(&quot;myDefaultStack&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">public String findAllCustomer()&#123;</span><br><span class="line">    customers &#x3D; customerService.findAllCustomer();</span><br><span class="line">    return &quot;findAllCustomer&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">出现在动作类上：</span><br><span class="line">@InterceptorRef(&quot;myDefaultStack&quot;)</span><br><span class="line">public class CustomerAction extends ActionSupport implements ModelDriven&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Customer customer &#x3D; new Customer();</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Customer getModel() &#123;</span><br><span class="line">        return customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-案例-注解实现客户保存和查询列表"><a href="#2-3-案例-注解实现客户保存和查询列表" class="headerlink" title="2.3    案例-注解实现客户保存和查询列表"></a>2.3    案例-注解实现客户保存和查询列表</h2><h3 id="2-3-1-拷贝必备jar包"><a href="#2-3-1-拷贝必备jar包" class="headerlink" title="2.3.1    拷贝必备jar包"></a>2.3.1    拷贝必备jar包</h3><p>导入jar包： <strong>struts2-convention-plugin-2.3.24.jar</strong></p><h3 id="2-3-2-使用注解配置Action"><a href="#2-3-2-使用注解配置Action" class="headerlink" title="2.3.2    使用注解配置Action"></a>2.3.2    使用注解配置Action</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ParentPackage</span>(<span class="string">"struts-default"</span>)<span class="comment">//指定当前包的父包</span></span><br><span class="line"><span class="meta">@Namespace</span>(<span class="string">"/customer"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"customerList"</span>,type=<span class="string">"redirect"</span>,location=<span class="string">"findAllCustomer.action"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"error"</span>,location=<span class="string">"/jsp/error.jsp"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"addUICustomer"</span>,location=<span class="string">"/jsp/customer/add.jsp"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(name=<span class="string">"findAllCustomer"</span>,location=<span class="string">"/jsp/customer/list.jsp"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"findAllCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.调用service查询客户</span></span><br><span class="line">        List&lt;Customer&gt; customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="comment">//2.返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addUICustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"addCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.saveCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"customerList"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">"deleteCustomer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.deleteCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"customerList"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------getters and setters--------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customers = customers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Struts2中的拦截器&quot;&gt;&lt;a href=&quot;#1-Struts2中的拦截器&quot; class=&quot;headerlink&quot; title=&quot;1.    Struts2中的拦截器&quot;&gt;&lt;/a&gt;1.    Struts2中的拦截器&lt;/h1&gt;&lt;h2 id=&quot;1-1-Struts2的拦截器基本概念&quot;&gt;&lt;a href=&quot;#1-1-Struts2的拦截器基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.1    Struts2的拦截器基本概念&quot;&gt;&lt;/a&gt;1.1    Struts2的拦截器基本概念&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-拦截器概述&quot;&gt;&lt;a href=&quot;#1-1-1-拦截器概述&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    拦截器概述&quot;&gt;&lt;/a&gt;1.1.1    拦截器概述&lt;/h3&gt;&lt;p&gt;在Webwork的中文文档的解释为——拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者在定义的action执行的前后加入执行的代码，也可以在一个action执行前阻止其执行。也就是说它提供了一种可以&lt;strong&gt;提取action中可重用代码，统一管理和执行的方式&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2(三)</title>
    <link href="https://wgy1993.gitee.io/archives/4179e9cb.html"/>
    <id>https://wgy1993.gitee.io/archives/4179e9cb.html</id>
    <published>2020-06-07T11:48:27.000Z</published>
    <updated>2020-06-07T12:03:17.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-OGNL表达式"><a href="#1-OGNL表达式" class="headerlink" title="1.    OGNL表达式"></a>1.    OGNL表达式</h1><h2 id="1-1-OGNL表达式概述"><a href="#1-1-OGNL表达式概述" class="headerlink" title="1.1    OGNL表达式概述"></a>1.1    OGNL表达式概述</h2><h3 id="1-1-1-什么是OGNL表达式"><a href="#1-1-1-什么是OGNL表达式" class="headerlink" title="1.1.1    什么是OGNL表达式"></a>1.1.1    什么是OGNL表达式</h3><p>OGNL的全称是对象图导航语言（Object-Graph Navigation Language），它是一种功能强大的<strong>开源表达式语言</strong>，使用这种表达式语言，可以通过某种表达式语法，<strong>存取Java对象的任意属性</strong>，<strong>调用Java对象的方法</strong>，同时能够自动<strong>实现必要的类型转换</strong>。如果把表达式看作是一个带有语义的字符串，那么OGNL无疑成为了这个语义字符串与Java对象之间沟通的桥梁。</p><a id="more"></a><h3 id="1-1-2-OGNL表达式的由来"><a href="#1-1-2-OGNL表达式的由来" class="headerlink" title="1.1.2    OGNL表达式的由来"></a>1.1.2    OGNL表达式的由来</h3><p>它原本是xwork2中的默认表达式语言，当年OpenSymphony和apache在合作开发struts2框架时，把这个表达式也引进来了，所以就变成了struts2的默认表达式语言。</p><h3 id="1-1-3-OGNL表达式的使用要求"><a href="#1-1-3-OGNL表达式的使用要求" class="headerlink" title="1.1.3    OGNL表达式的使用要求"></a>1.1.3    OGNL表达式的使用要求</h3><p>要想使用ognl表达式，一般情况下都得需要使用struts2的标签库。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="1-1-4-它的特点"><a href="#1-1-4-它的特点" class="headerlink" title="1.1.4    它的特点"></a>1.1.4    它的特点</h3><p>它不仅可以用于取值，显示。还可以赋值。<strong>取值</strong>是我们程序员使用框架做的事情。<strong>赋值</strong>是框架为我们做的。</p><h2 id="1-2-OGNL表达式的基本用法"><a href="#1-2-OGNL表达式的基本用法" class="headerlink" title="1.2    OGNL表达式的基本用法"></a>1.2    OGNL表达式的基本用法</h2><h3 id="1-2-1-s-property标签输出内容到浏览器"><a href="#1-2-1-s-property标签输出内容到浏览器" class="headerlink" title="1.2.1    s:property标签输出内容到浏览器"></a>1.2.1    s:property标签输出内容到浏览器</h3><h4 id="1-2-1-1-s-property的用法"><a href="#1-2-1-1-s-property的用法" class="headerlink" title="1.2.1.1    s:property的用法"></a>1.2.1.1    s:property的用法</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--要想使用OGNL表达式获取数据，此时需要借助struts2的标签库</span><br><span class="line">    s:property标签实现把数据输出到浏览器上</span><br><span class="line">    &lt;s:property value=<span class="string">""</span>/&gt;</span><br><span class="line">    value属性的取值是一个OGNL表达式。</span><br><span class="line">    标签会把value属性取值所对应的内容输出到浏览器上</span><br><span class="line">    如果没有任何对应内容，则什么都不显示</span><br><span class="line">--%&gt;</span><br><span class="line">OGNL的最基本用法：&lt;s:property value=<span class="string">"OGNLExpression"</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-1-2-OGNL表达式和字符串的转换"><a href="#1-2-1-2-OGNL表达式和字符串的转换" class="headerlink" title="1.2.1.2    OGNL表达式和字符串的转换"></a>1.2.1.2    OGNL表达式和字符串的转换</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式和字符串的转换</span><br><span class="line">    表达式转成字符串</span><br><span class="line">    %&#123;<span class="string">''</span>&#125;  | %&#123;<span class="string">""</span>&#125;</span><br><span class="line">    可以把%&#123;&#125;去掉</span><br><span class="line"> --%&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">"%&#123;'OGNLExpression1'&#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">'%&#123;"OGNLExpression2"&#125;'</span>/&gt;&lt;br/&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">'"OGNLExpression3"'</span>/&gt;&lt;br/&gt;</span><br><span class="line">OGNL转成一个普通的字符串：&lt;s:property value=<span class="string">"'OGNLExpression4'"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    字符串转成表达式</span><br><span class="line">    %&#123;&#125;把字符串套起来</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- user.name 看上去是字符串，当它执行user对象的getName方法时，表示用OGNL表达式解释。 --&gt;</span><br><span class="line">字符串转成一个OGNL表达式：&lt;s:textfield name=<span class="string">"username"</span> value=<span class="string">"%&#123;user.name&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H7a4a659232534a5e8d8521912ec33bdbn.jpg" alt="image-20200607170212242"></p><h3 id="1-2-2-OGNL表达式访问对象的方法"><a href="#1-2-2-OGNL表达式访问对象的方法" class="headerlink" title="1.2.2    OGNL表达式访问对象的方法"></a>1.2.2    OGNL表达式访问对象的方法</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式访问对象的方法 --%&gt;</span><br><span class="line">调用字符串的长度方法：&lt;s:property value=<span class="string">"'OGNLExpression1'.length()"</span>/&gt;&lt;br/&gt;</span><br><span class="line">调用字符串的转大写方法：&lt;s:property value=<span class="string">"'OGNLExpression1'.toUpperCase()"</span>/&gt;&lt;br/&gt;</span><br><span class="line">调用字符串的分隔方法：&lt;s:property value=<span class="string">"'OGNLExpression1'.split('E')"</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-OGNL表达式访问类的静态属性和静态方法"><a href="#1-2-3-OGNL表达式访问类的静态属性和静态方法" class="headerlink" title="1.2.3    OGNL表达式访问类的静态属性和静态方法"></a>1.2.3    OGNL表达式访问类的静态属性和静态方法</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式访问类的静态成员(静态属性)</span><br><span class="line">   访问静态属性需要按照固定的书写规范来写。</span><br><span class="line">   规范是：</span><br><span class="line">      @包名.包名...类名@静态属性名称</span><br><span class="line">--%&gt;</span><br><span class="line">OGNL表达式访问静态属性：&lt;s:property value=<span class="string">"@java.lang.Integer@MAX_VALUE"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--OGNL表达式访问类的静态方法</span><br><span class="line">    访问静态方法需要按照固定的书写规范来写。</span><br><span class="line">    规范是：</span><br><span class="line">        @包名.包名...类名@静态方法名称</span><br><span class="line">--%&gt;</span><br><span class="line">OGNL表达式访问静态方法：&lt;s:property value=<span class="string">"@java.lang.Math@random()"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-OGNL表达式操作集合"><a href="#1-2-4-OGNL表达式操作集合" class="headerlink" title="1.2.4    OGNL表达式操作集合"></a>1.2.4    OGNL表达式操作集合</h3><h4 id="1-2-4-1-list集合"><a href="#1-2-4-1-list集合" class="headerlink" title="1.2.4.1    list集合"></a>1.2.4.1    list集合</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--操作List集合</span><br><span class="line">    s:radio标签的list取值就是一个OGNL表达式。</span><br><span class="line">    &#123;&#125;就表示创建了一个List集合</span><br><span class="line">    &#123;<span class="string">'男'</span>,<span class="string">'女'</span>&#125;===  List list = <span class="keyword">new</span> ArrayList();  list.add(<span class="string">"男"</span>); list.add(<span class="string">"女"</span>);</span><br><span class="line">--%&gt;</span><br><span class="line">Struts2的单选按钮：&lt;br/&gt;</span><br><span class="line">&lt;s:radio list="&#123;'男','女'&#125;" name="gender2" label="性别"&gt;&lt;/s:radio&gt;</span><br><span class="line"></span><br><span class="line">HTML的单选按钮：&lt;br/&gt;</span><br><span class="line">性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender1"</span> value=<span class="string">"男"</span>&gt;男</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender1"</span> value=<span class="string">"女"</span>&gt;女</span><br></pre></td></tr></table></figure><h4 id="1-2-4-2-map集合"><a href="#1-2-4-2-map集合" class="headerlink" title="1.2.4.2    map集合"></a>1.2.4.2    map集合</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--操作Map集合</span><br><span class="line">    #&#123;&#125;就表示创建了一个Map集合。</span><br><span class="line">    #&#123;key:value,key:value&#125;</span><br><span class="line">    #&#123;'male':'男','female':'女'&#125;=== Map map = new HashMap();  map.put("male","男");  map.put("female","女");</span><br><span class="line">--%&gt;</span><br><span class="line">Struts2的单选按钮：&lt;br/&gt;</span><br><span class="line">&lt;s:radio list="#&#123;'male':'男','female':'女'&#125;" name="gender4" label="性别"&gt;&lt;/s:radio&gt;</span><br><span class="line"></span><br><span class="line">HTML的单选按钮：&lt;br/&gt;</span><br><span class="line">性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender3"</span> value=<span class="string">"male"</span>&gt;男</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender3"</span> value=<span class="string">"female"</span>&gt;女</span><br></pre></td></tr></table></figure><h1 id="2-OGNL上下文"><a href="#2-OGNL上下文" class="headerlink" title="2.    OGNL上下文"></a>2.    OGNL上下文</h1><h2 id="2-1-ContextMap"><a href="#2-1-ContextMap" class="headerlink" title="2.1    ContextMap"></a>2.1    ContextMap</h2><h3 id="2-1-1-ContextMap概述"><a href="#2-1-1-ContextMap概述" class="headerlink" title="2.1.1    ContextMap概述"></a>2.1.1    ContextMap概述</h3><p>它是OGNL上下文对象，是struts2中封装数据最大的对象。我们一次请求中所有用到的信息都可以在它里面找到。它是一个Map结构的对象，其中key是字符串，value是一个Object。</p><h3 id="2-1-2-ContextMap中封装的数据"><a href="#2-1-2-ContextMap中封装的数据" class="headerlink" title="2.1.2    ContextMap中封装的数据"></a>2.1.2    ContextMap中封装的数据</h3><p><img src="https://ae01.alicdn.com/kf/Hc5d69a854e6c4686b0afdece7f43e634U.jpg" alt="img"></p><p>我们把这些内容拿出来逐个分析一下，得到下面的表格：</p><table><thead><tr><th>Map的key（类型是String）</th><th>Map的Value （类型是Object）</th><th>说明信息</th></tr></thead><tbody><tr><td>application</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的应用域中的所有数据</td></tr><tr><td>session</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的会话域中的所有数据</td></tr><tr><td>request</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的请求域中的所有数据</td></tr><tr><td>valueStack(特殊)</td><td>com.opensymphony.xwork2.ognl.OgnlValueStack</td><td>它是List结构</td></tr><tr><td>parameters</td><td>Java.util.Map&lt;String,String[]&gt;</td><td>封装的是请求参数</td></tr><tr><td>attr</td><td>Java.util.Map&lt;String,Object&gt;</td><td>封装的是四大域的组合数据，从最小的域开始搜索</td></tr><tr><td>action</td><td>com.opensymphony.xwork2.ActionSupport</td><td>当前执行的动作类对象</td></tr></tbody></table><p><img src="https://ae01.alicdn.com/kf/H02833e758ebc4f9297b000d84dca1c1fF.jpg" alt="image-20200607171436366"></p><h2 id="2-2-ActionContext"><a href="#2-2-ActionContext" class="headerlink" title="2.2    ActionContext"></a>2.2    ActionContext</h2><h3 id="2-2-1-ActionContext对象概述"><a href="#2-2-1-ActionContext对象概述" class="headerlink" title="2.2.1    ActionContext对象概述"></a>2.2.1    ActionContext对象概述</h3><p>它是一个工具类，是struts2框架提供给我们的，可以让我们调用其中的方法，快速的操作ContextMap。用它操作OGNL上下文对象，比直接操作ContextMap要方便很多。</p><h3 id="2-2-2-ActionContext对象与ContextMap的关系"><a href="#2-2-2-ActionContext对象与ContextMap的关系" class="headerlink" title="2.2.2    ActionContext对象与ContextMap的关系"></a>2.2.2    ActionContext对象与ContextMap的关系</h3><p>ActionContext就相当于对ContextMap进行了一次再封装。</p><p><img src="https://ae01.alicdn.com/kf/Hb7ddb62b50cf47218433b24f75553af9u.jpg" alt="image-20200607173258169"></p><h3 id="2-2-3-ActionContext何时创建"><a href="#2-2-3-ActionContext何时创建" class="headerlink" title="2.2.3    ActionContext何时创建"></a>2.2.3    ActionContext何时创建</h3><p>由于ActionContext是操作的ContextMap，而ContextMap中封了我们一次请求的所有数据，所以它的创建应该是每次请求访问Action时，即核心控制器(StrutsPrepareAndExecuteFilter)的doFilter方法执行时，下图是代码截取：</p><p><img src="https://ae01.alicdn.com/kf/Hb0466b7ae08c4f4392e29b66ac491236B.jpg" alt="img"></p><h3 id="2-2-4-ActionContext的线程安全"><a href="#2-2-4-ActionContext的线程安全" class="headerlink" title="2.2.4    ActionContext的线程安全"></a>2.2.4    ActionContext的线程安全</h3><p>我们都知道，java的web工程是多线程的，那么每个线程在访问Action时，都会创建自己的ActionContext,那么是如何保证在获取ActionContext时，每个线程都能获取到自己的那个呢？</p><p>答案就是，每次创建ActionContext时，把对象绑定到当前线程上。下图是代码截取：</p><p><img src="https://ae01.alicdn.com/kf/H1c94fdc742bf4c52b6c9237c852ea0dfL.jpg" alt="img"></p><h3 id="2-2-5-ActionContext的获取"><a href="#2-2-5-ActionContext的获取" class="headerlink" title="2.2.5    ActionContext的获取"></a>2.2.5    ActionContext的获取</h3><p>使用ActionContext类中的静态方法getContext()从当前线程上获取</p><h3 id="2-2-6-获取ContextMap中的数据"><a href="#2-2-6-获取ContextMap中的数据" class="headerlink" title="2.2.6    获取ContextMap中的数据"></a>2.2.6    获取ContextMap中的数据</h3><h4 id="2-2-6-1-s-debug标签的使用"><a href="#2-2-6-1-s-debug标签的使用" class="headerlink" title="2.2.6.1    s:debug标签的使用"></a>2.2.6.1    s:debug标签的使用</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 引入标签库 --%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="number">1</span>、struts2的debug标签</span><br><span class="line">    它是一个用于开发阶段的标签，查看我们OGNL上下文中内容的标签 --%&gt;</span><br><span class="line">&lt;s:debug/&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-6-2-使用OGNL表达式获取Map中的数据"><a href="#2-2-6-2-使用OGNL表达式获取Map中的数据" class="headerlink" title="2.2.6.2    使用OGNL表达式获取Map中的数据"></a>2.2.6.2    使用OGNL表达式获取Map中的数据</h4><p>动作类存数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActionContext的数据存取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ActionContext往ContextMap中存入数据</span></span><br><span class="line"><span class="comment">     *     contextMap    hello context map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 往应用域中存入数据：用两种方式实现</span></span><br><span class="line"><span class="comment">     *     applicationMaphello application map</span></span><br><span class="line"><span class="comment">     *     applicationAttrhello application attr</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 往会话域中存入数据：同上用两种方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取ActionContext</span></span><br><span class="line">        <span class="comment">//从当前线程上获取</span></span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        <span class="comment">//2.存入数据</span></span><br><span class="line">        context.put(<span class="string">"contextMap"</span>, <span class="string">"hello context map"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.往应用域中存入数据</span></span><br><span class="line">        <span class="comment">//第一种方式：使用原始ServletAPI对象ServletContext</span></span><br><span class="line">        ServletContext applicationAttr = ServletActionContext.getServletContext();</span><br><span class="line">        applicationAttr.setAttribute(<span class="string">"applicationAttr"</span>, <span class="string">"hello application attr"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方式：根据key从ActionContext中获取应用域的map，往map中存入数据</span></span><br><span class="line">        Map&lt;String,Object&gt; applicationMap = context.getApplication();</span><br><span class="line">        applicationMap.put(<span class="string">"applicationMap"</span>,<span class="string">"hello application map"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.往会话域中存入数据</span></span><br><span class="line">        <span class="comment">//第一种：使用ServletAPI的HttpSession</span></span><br><span class="line">        HttpSession session = ServletActionContext.getRequest().getSession();</span><br><span class="line">        session.setAttribute(<span class="string">"sessionAttr"</span>, <span class="string">"hello session attr"</span>);</span><br><span class="line">        <span class="comment">//第二种：获取key为session的map</span></span><br><span class="line">        Map&lt;String,Object&gt; sessionMap = context.getSession();</span><br><span class="line">        sessionMap.put(<span class="string">"sessionMap"</span>,<span class="string">"hello session map"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面中使用OGNL表达式获取：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--借助struts2的s:property标签和OGNL表达式获取ActionContext存入的数据</span><br><span class="line">    我们现在获取的数据，都是在map中。</span><br><span class="line">    获取Map中的数据，OGNL表达式的写法：</span><br><span class="line">        #key</span><br><span class="line">        如果还想继续向下获取，使用.key的方式</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#contextMap"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#application.applicationMap"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#session.sessionAttr"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;s:property value=<span class="string">"#session.sessionMap"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="2-3-ValueStack对象"><a href="#2-3-ValueStack对象" class="headerlink" title="2.3    ValueStack对象"></a>2.3    ValueStack对象</h2><h3 id="2-3-1-ValueStack对象概述"><a href="#2-3-1-ValueStack对象概述" class="headerlink" title="2.3.1    ValueStack对象概述"></a>2.3.1    ValueStack对象概述</h3><p>ValueStack是Struts的一个接口，字面意义为值栈，OgnlValueStack是ValueStack的实现类，客户端发起一个请求struts2架构会创建一个action实例同时创建一个OgnlValueStack值栈实例，OgnlValueStack贯穿整个 Action 的生命周期。</p><p>它是ContextMap中的一部分，里面的结构是一个List，是我们可以快速访问数据一个容器。它的封装是由struts2框架完成的。</p><p>通常情况下我们是从页面上获取数据。它实现了栈的特性（先进后出）。</p><h3 id="2-3-2-ValueStack的内部结构"><a href="#2-3-2-ValueStack的内部结构" class="headerlink" title="2.3.2    ValueStack的内部结构"></a>2.3.2    ValueStack的内部结构</h3><p>在 OnglValueStack 中包含了一个CompoundRoot的对象，该对象继承了ArrayList，并且提供了只能操作集合第一个元素的方法，所以我们说它实现了栈的特性。同时，它里面定义了一个ContextMap的引用，也就是说，我们有值栈对象，也可以通过值栈来获取ContextMap。</p><p><img src="https://ae01.alicdn.com/kf/Hbf62e199fa1c4a18bf9c755a9a56ff63S.jpg" alt="image-20200607173453041"></p><h3 id="2-3-3-获取ValueStack中的数据"><a href="#2-3-3-获取ValueStack中的数据" class="headerlink" title="2.3.3    获取ValueStack中的数据"></a>2.3.3    获取ValueStack中的数据</h3><h4 id="2-3-3-1-值栈中都有什么"><a href="#2-3-3-1-值栈中都有什么" class="headerlink" title="2.3.3.1    值栈中都有什么"></a>2.3.3.1    值栈中都有什么</h4><p>首先我们要明确，值栈中存的都是对象。因为它本质就是一个List，List中只能存对象。</p><p>值栈中包含了我们通过调用push方法压栈的对象，当前执行的动作了和一个名称为DefaultTextProvider的类。值栈中的内容如下图：</p><p><img src="https://ae01.alicdn.com/kf/Hb8889a5601804ced8720acb2b9af4de2R.jpg" alt="img"></p><h4 id="2-3-3-2-在动作类中往值栈中存入数据"><a href="#2-3-3-2-在动作类中往值栈中存入数据" class="headerlink" title="2.3.3.2    在动作类中往值栈中存入数据"></a>2.3.3.2    在动作类中往值栈中存入数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ValueStack的数据存取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把私有成员放入值栈中</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"泰斯特"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取ValueStack，并且压栈操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取ActionContext</span></span><br><span class="line">        <span class="comment">//从当前线程上获取</span></span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        <span class="comment">//2.获取ValueStack对象</span></span><br><span class="line">        ValueStack vs = context.getValueStack();</span><br><span class="line">        <span class="comment">//3.压栈操作</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>,<span class="string">"male"</span>);</span><br><span class="line">        </span><br><span class="line">        vs.push(s);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-我们可以获取值栈中的什么"><a href="#2-3-3-3-我们可以获取值栈中的什么" class="headerlink" title="2.3.3.3    我们可以获取值栈中的什么"></a>2.3.3.3    我们可以获取值栈中的什么</h4><p>一般情况下，我们都是根据debug标签中显示的Property Name来获取Property Value。</p><p>当然我们也可以获取栈顶对象。</p><p><img src="https://ae01.alicdn.com/kf/H5d18042919534963914ab2054f1c0d38y.jpg" alt="image-20200607175025011"></p><h4 id="2-3-3-5-在页面上使用OGNL表达式获取数据"><a href="#2-3-3-5-在页面上使用OGNL表达式获取数据" class="headerlink" title="2.3.3.5    在页面上使用OGNL表达式获取数据"></a>2.3.3.5    在页面上使用OGNL表达式获取数据</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--获取值栈的数据也需要借助于struts2的标签库</span><br><span class="line">    使用s:property获取</span><br><span class="line">    获取值栈的数据，是直接写属性名称，得到的就是属性的值。</span><br><span class="line">    OGNL表达式的找法，是从栈顶逐个属性名称开始查找，只要找到之后，就不再继续查找，而是返回结果。</span><br><span class="line"> --%&gt;</span><br><span class="line">姓名：&lt;s:property value=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;s:property value=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">性别：&lt;s:property value=<span class="string">"gender"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--获取指定位置的属性 --%&gt;</span><br><span class="line">获取第一个name:&lt;s:property value=<span class="string">"[0].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">获取第二个name:&lt;s:property value=<span class="string">"[1].name"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--如果使用s:property标签，没有写value属性，取的是栈顶对象 --%&gt;</span><br><span class="line">&lt;s:property/&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-6-OGNL表达式执行时调用的方法"><a href="#2-3-3-6-OGNL表达式执行时调用的方法" class="headerlink" title="2.3.3.6    OGNL表达式执行时调用的方法"></a>2.3.3.6    OGNL表达式执行时调用的方法</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--s:property在通过OGNL表达式获取数据时，所调用的方法：ValueStack中的findValue(String expr); --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    ActionContext context = ActionContext.getContext();</span><br><span class="line">    ValueStack vs = context.getValueStack();</span><br><span class="line">    Object o1 = vs.findValue(<span class="string">"[0].name"</span>);</span><br><span class="line">    out.println(o1);</span><br><span class="line">    out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    Object o2 = vs.findValue(<span class="string">"[1].name"</span>);</span><br><span class="line">    out.print(o2);</span><br><span class="line">    out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    Object o3 = vs.findValue(<span class="string">"#application.applicationMap"</span>);</span><br><span class="line">    out.print(o3);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Struts2中使用EL表达式"><a href="#3-Struts2中使用EL表达式" class="headerlink" title="3.    Struts2中使用EL表达式"></a>3.    Struts2中使用EL表达式</h1><h2 id="3-1-EL表达式回顾"><a href="#3-1-EL表达式回顾" class="headerlink" title="3.1    EL表达式回顾"></a>3.1    EL表达式回顾</h2><p>EL表达式的写法：${表达式}。</p><p>它是从四大域中，由小到大逐个域搜索，根据名称获取值。只要找到了，就不再继续搜索。</p><p>它的原理：使用的是PageContext类中的findValue方法。</p><h2 id="3-2-Struts2对EL表达式的改变"><a href="#3-2-Struts2对EL表达式的改变" class="headerlink" title="3.2    Struts2对EL表达式的改变"></a>3.2    Struts2对EL表达式的改变</h2><p>Struts2框架中对EL表达式做了如下改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EL表达式原来的搜素顺序： </span><br><span class="line">    page Scope——&gt;request Scope——&gt;session Scope——&gt;application Scope</span><br><span class="line">EL表达式改变后的搜索顺序：</span><br><span class="line">    page Scope—&gt;request Scope—&gt;valueStack—&gt;contextMap—&gt;session Scope—&gt;application Scope</span><br></pre></td></tr></table></figure><p>struts2框架对request对象进行了包装，并且对getAttribute方法进行了增强，代码如下：</p><p><img src="https://ae01.alicdn.com/kf/Hebee1568b7ef48b2ab06a9969f917809q.jpg" alt="img"></p><h1 id="4-OGNL表达式中的各种符号总结"><a href="#4-OGNL表达式中的各种符号总结" class="headerlink" title="4.    OGNL表达式中的各种符号总结"></a>4.    OGNL表达式中的各种符号总结</h1><h2 id="4-1"><a href="#4-1" class="headerlink" title="4.1    %"></a>4.1    <code>%</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、把OGNL表达式转成普通字符串 %&#123;&quot;&quot;&#125;</span><br><span class="line">2、把字符串转成OGNL表达式%&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2"><a href="#4-2" class="headerlink" title="4.2    #"></a>4.2    <code>#</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、获取ContextMap中的数据。#key</span><br><span class="line">2、在页面中可以创建Map集合。 #&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3    $"></a>4.3    <code>$</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、EL表达式使用</span><br><span class="line">2、可以在struts2的配置中使用OGNL表达式（配置可以是xml文件，也可以是注解）$&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="5-案例-优化客户列表的展示"><a href="#5-案例-优化客户列表的展示" class="headerlink" title="5.    案例-优化客户列表的展示"></a>5.    案例-优化客户列表的展示</h1><h2 id="5-1-改造Action"><a href="#5-1-改造Action" class="headerlink" title="5.1    改造Action"></a>5.1    改造Action</h2><p>我们把之前查询所有客户的动作方法改造一下，之前我们是把查询结果存入请求域中了，而此时我们只需要在Action中定义一个集合，并且提供get/set方法，它就会出现在值栈中。就可以在页面中使用OGNL表达式获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.调用service查询客户</span></span><br><span class="line">    List&lt;Customer&gt; customers = customerService.findAllCustomer();</span><br><span class="line">    <span class="comment">//2.返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customers = customers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-改造jsp"><a href="#5-2-改造jsp" class="headerlink" title="5.2    改造jsp"></a>5.2    改造jsp</h2><p>在显示客户列表时，我们之前采用的是jstl标签库的c:forEach标签，今天我们将使用struts2提供的迭代标签s:iterator。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- </span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;customers&#125;"</span> <span class="keyword">var</span>=<span class="string">"customer"</span>&gt;</span><br><span class="line">        &lt;TR&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custName &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custLevel &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custSource &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custIndustry &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custAddress &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.custPhone &#125;&lt;/TD&gt;</span><br><span class="line">        &lt;/TR&gt;</span><br><span class="line">    &lt;/c:forEach&gt; </span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    struts2中的迭代标签：</span><br><span class="line">    属性：</span><br><span class="line">    value：它的取值是一个OGNL表达式</span><br><span class="line">    <span class="keyword">var</span>：写了该属性：它会把<span class="keyword">var</span>的值作为key，把当前遍历的对象作为value，存入contextMap中</span><br><span class="line">    没写该属性：它会把每次遍历的对象压入栈顶</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%-- </span><br><span class="line">    &lt;s:iterator value=<span class="string">"customers"</span> <span class="keyword">var</span>=<span class="string">"cust"</span>&gt;</span><br><span class="line">    &lt;TR&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custName"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custLevel"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custSource"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custIndustry"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custAddress"/&gt;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;&lt;s:property value="#cust.custPhone"/&gt;&lt;/TD&gt;                       </span><br><span class="line">        &lt;/TR&gt;</span><br><span class="line">    &lt;/s:iterator&gt; </span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;s:iterator value=<span class="string">"customers"</span>&gt;</span><br><span class="line">    &lt;TR&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custName"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custLevel"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custSource"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custIndustry"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custAddress"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="custPhone"/&gt;&lt;/TD&gt;</span><br><span class="line">    &lt;/TR&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-OGNL表达式&quot;&gt;&lt;a href=&quot;#1-OGNL表达式&quot; class=&quot;headerlink&quot; title=&quot;1.    OGNL表达式&quot;&gt;&lt;/a&gt;1.    OGNL表达式&lt;/h1&gt;&lt;h2 id=&quot;1-1-OGNL表达式概述&quot;&gt;&lt;a href=&quot;#1-1-OGNL表达式概述&quot; class=&quot;headerlink&quot; title=&quot;1.1    OGNL表达式概述&quot;&gt;&lt;/a&gt;1.1    OGNL表达式概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-什么是OGNL表达式&quot;&gt;&lt;a href=&quot;#1-1-1-什么是OGNL表达式&quot; class=&quot;headerlink&quot; title=&quot;1.1.1    什么是OGNL表达式&quot;&gt;&lt;/a&gt;1.1.1    什么是OGNL表达式&lt;/h3&gt;&lt;p&gt;OGNL的全称是对象图导航语言（Object-Graph Navigation Language），它是一种功能强大的&lt;strong&gt;开源表达式语言&lt;/strong&gt;，使用这种表达式语言，可以通过某种表达式语法，&lt;strong&gt;存取Java对象的任意属性&lt;/strong&gt;，&lt;strong&gt;调用Java对象的方法&lt;/strong&gt;，同时能够自动&lt;strong&gt;实现必要的类型转换&lt;/strong&gt;。如果把表达式看作是一个带有语义的字符串，那么OGNL无疑成为了这个语义字符串与Java对象之间沟通的桥梁。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2(二)</title>
    <link href="https://wgy1993.gitee.io/archives/3f8ac9e0.html"/>
    <id>https://wgy1993.gitee.io/archives/3f8ac9e0.html</id>
    <published>2020-06-05T09:14:53.000Z</published>
    <updated>2020-06-05T09:34:32.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-结果视图的配置"><a href="#1-结果视图的配置" class="headerlink" title="1.    结果视图的配置"></a>1.    结果视图的配置</h1><h2 id="1-1-result标签"><a href="#1-1-result标签" class="headerlink" title="1.1    result标签"></a>1.1    result标签</h2><p>在sturts.xml文件中，Result的配置非常简单，使用<result>元素来配置Result逻辑视图与物理视图之间的映射，<result>元素可以有name和type属性，但这两种属性都不是必选的。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">    &lt;!-- result标签：</span><br><span class="line">        作用：用于配置结果视图（结果视图可以是一个jsp&#x2F;html，也可以是一个action）</span><br><span class="line">        属性：</span><br><span class="line">            name：指定逻辑结果视图。作用就是和动作方法的返回值进行比较，当一致时，前往配置的页面或者action。不写的话:默认值是success——&gt;去哪</span><br><span class="line">            type：指定前往结果视图的方式。以何种方式前往。——&gt;怎么去</span><br><span class="line">                type取值都是来源于struts-default.xml文件中package名称是struts-default包中定义类型</span><br><span class="line">                常用的结果类型：</span><br><span class="line">                dispatcher：请求转发  （默认值）</span><br><span class="line">                redirect：重定向(可以是重定向到另外一个动作或者是重定向到一个jsp)</span><br><span class="line">                redirectAction：重定向到另外一个动作(它由于会自动在后面为我们拼接url后缀，所以只能重定向到动作)</span><br><span class="line">        </span><br><span class="line">                请求转发和重定向的区别：</span><br><span class="line">                请求转发：一次请求地址栏不变请求域中数据不丢失服务器行为只能是在当前应用中转发</span><br><span class="line">                重定向：  两次请求地址栏改变请求域中数据丢失浏览器行为可以定向到当前应用的外部</span><br><span class="line">        </span><br><span class="line">                响应浏览器的三种方式：</span><br><span class="line">                    请求转发重定向使用流输出（如果只有一种方式，那就是此种方式）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirectAction&quot;&gt;demo2&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;error&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;error.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br><span class="line">&lt;action name&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-配置全局结果视图"><a href="#1-2-配置全局结果视图" class="headerlink" title="1.2    配置全局结果视图"></a>1.2    配置全局结果视图</h2><h3 id="1-2-1-局部结果视图和全局结果视图"><a href="#1-2-1-局部结果视图和全局结果视图" class="headerlink" title="1.2.1    局部结果视图和全局结果视图"></a>1.2.1    局部结果视图和全局结果视图</h3><p>配置在action标签内的result，我们成为局部结果视图，它只能由当前action使用。</p><p>而在实际开发中，有很多页面，每个action可能都会用到。比如：success.jsp,error.jsp,login.jsp等等。当我们很多action都用到了login.jsp，在每个action标签中都配置一次，显然是不合理的，这个时候我们就用到了全局结果视图。</p><h3 id="1-2-2-配置方式"><a href="#1-2-2-配置方式" class="headerlink" title="1.2.2    配置方式"></a>1.2.2    配置方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义一个公共包</span><br><span class="line">        全局结果视图和局部结果视图</span><br><span class="line">            定义是放在action标签外面， 在global-results标签内部的结果视图。</span><br><span class="line">            可以在多个action中使用</span><br><span class="line">            优先级：先找局部，再找全局。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;myDefault&quot; extends&#x3D;&quot;struts-default&quot; abstract&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;global-results&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;global-results&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br><span class="line"></span><br><span class="line">&lt;package name&#x3D;&quot;p1&quot; extends&#x3D;&quot;myDefault&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirectAction&quot;&gt;demo2&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;action name&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;dispatcher&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;result name&#x3D;&quot;login&quot;&gt;&#x2F;login.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure><h1 id="2-访问Servlet的API的两种方式"><a href="#2-访问Servlet的API的两种方式" class="headerlink" title="2.    访问Servlet的API的两种方式"></a>2.    访问Servlet的API的两种方式</h1><h2 id="2-1-使用ServletActionContext"><a href="#2-1-使用ServletActionContext" class="headerlink" title="2.1    使用ServletActionContext"></a>2.1    使用ServletActionContext</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问ServletAPI:</span></span><br><span class="line"><span class="comment"> *  有两种方式：</span></span><br><span class="line"><span class="comment"> *  第一种方式：</span></span><br><span class="line"><span class="comment"> *      使用struts2框架提供的一个工具类，该类中包含了相应的静态方法，可以直接获取</span></span><br><span class="line"><span class="comment"> *      工具类是：ServletActionContext</span></span><br><span class="line"><span class="comment"> *      此种方式是我们实际开发中用的最多的方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 输出结果之后，找出其中一个和其他三个不一样：</span></span><br><span class="line"><span class="comment"> *      org.apache.struts2.dispatcher.StrutsRequestWrapper@1c6e453它和其他三个不一样，它是struts2提供的</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.connector.ResponseFacade@b846ae</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.core.ApplicationContextFacade@287809</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.session.StandardSessionFacade@e0d480</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line">    <span class="keyword">private</span> HttpSession session;</span><br><span class="line">    <span class="keyword">private</span> ServletContext application;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        request = ServletActionContext.getRequest();</span><br><span class="line">        response = ServletActionContext.getResponse();</span><br><span class="line">        application = ServletActionContext.getServletContext();</span><br><span class="line">        session = request.getSession();</span><br><span class="line"></span><br><span class="line">        System.out.println(request);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        System.out.println(application);</span><br><span class="line">        System.out.println(session);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-通过实现接口的方式"><a href="#2-2-通过实现接口的方式" class="headerlink" title="2.2    通过实现接口的方式"></a>2.2    通过实现接口的方式</h2><p><img src="https://ae01.alicdn.com/kf/Ha7be4fae5c764e088466d9f8caad0d53V.jpg" alt="image-20200605155121131"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问ServletAPI:</span></span><br><span class="line"><span class="comment"> *  有两种方式：</span></span><br><span class="line"><span class="comment"> *  第二种方式：</span></span><br><span class="line"><span class="comment"> *      通过实现不同的接口，获取不同的对象。</span></span><br><span class="line"><span class="comment"> *      要想使用request，需要实现ServletRequestAware</span></span><br><span class="line"><span class="comment"> *      要想使用response，需要实现ServletResponseAware</span></span><br><span class="line"><span class="comment"> *      要想使用servletContext，需要实现SerlvetContextAware</span></span><br><span class="line"><span class="comment"> *  输出结果之后，找出其中一个和其他三个不一样：</span></span><br><span class="line"><span class="comment"> *      org.apache.struts2.dispatcher.StrutsRequestWrapper@1c6e453它和其他三个不一样，它是struts2提供的</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.connector.ResponseFacade@b846ae</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.core.ApplicationContextFacade@287809</span></span><br><span class="line"><span class="comment"> *      org.apache.catalina.session.StandardSessionFacade@e0d480</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  如果说是一种方式获取ServletAPI对象：ActionContext中的get(key)</span></span><br><span class="line"><span class="comment"> *  如果说是三种方式获取ServletAPI对象，除了我们讲的两种之外，也可以使用ActionContext获取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  通过分析源码，我们得知，ActionContext看上去是一个类似Map的结构。</span></span><br><span class="line"><span class="comment"> *  map的key是String类型，Map的value是Object类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">ServletRequestAware</span>, <span class="title">ServletResponseAware</span>, <span class="title">ServletContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ServletContext application = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        System.out.println(application);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletResponse</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletContext</span><span class="params">(ServletContext application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-请求参数的封装"><a href="#3-请求参数的封装" class="headerlink" title="3.    请求参数的封装"></a>3.    请求参数的封装</h1><h2 id="3-1-请求参数封装概述"><a href="#3-1-请求参数封装概述" class="headerlink" title="3.1    请求参数封装概述"></a>3.1    请求参数封装概述</h2><p>封装请求参数就是把我们通过浏览器发送请求时，要转递给服务器的数据封装到指定的对象中。这个对象一般都是实体类。但是有时就是Action中的一个属性。也就是说，我们封装请求参数时，可以有实体类，也可以没有。同时，我们还需要知道，请求参数的封装和请求方式无关。无论get还是post都可以封装。</p><h2 id="3-2-属性驱动"><a href="#3-2-属性驱动" class="headerlink" title="3.2    属性驱动"></a>3.2    属性驱动</h2><h3 id="3-2-1-没有实体类"><a href="#3-2-1-没有实体类" class="headerlink" title="3.2.1    没有实体类"></a>3.2.1    没有实体类</h3><p>此种情况，我们一般也称为动作类和模型在一起，也就是说我们在action中定义一些私有成员，并且提供它们的公有get/set方法。具体代码如下</p><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> * 第一种情况：</span></span><br><span class="line"><span class="comment"> *    属性驱动：没有实体类</span></span><br><span class="line"><span class="comment"> *    表单数据的接收都定义在动作类中，所以称为动作类和模型数据写在一起</span></span><br><span class="line"><span class="comment"> * 要想封装成功，需要按照要求书写：</span></span><br><span class="line"><span class="comment"> *    要求是：表单元素的name属性取值，必须和动作类中成员get/set方法后面的部分保持一致</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 细节：</span></span><br><span class="line"><span class="comment"> *    1、struts2框架会我们解决post请求的中文乱码问题，但是get请求不解决。</span></span><br><span class="line"><span class="comment"> *    2、struts2框架会自动为我们转换数据类型：</span></span><br><span class="line"><span class="comment"> *         基本类型自动转换</span></span><br><span class="line"><span class="comment"> *         字符串数组会按照逗号+空格的方式拼接成字符串</span></span><br><span class="line"><span class="comment"> *         日期类型会按照本地格式转成日期对象</span></span><br><span class="line"><span class="comment"> *             本地格式：yyyy-MM-dd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 执行参数封装，是一个名称为params的拦截器实现的。</span></span><br><span class="line"><span class="comment"> * 封装的规则只有一个，它要去指定位置找属性，找到之后调用set方法赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(username+<span class="string">"==="</span>+age+<span class="string">"==="</span>+birthday+<span class="string">"==="</span>+hobby);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：第一种情况：属性驱动-没有实体类  --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo1.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo1&quot; class&#x3D;&quot;com.wgy.web.action.Demo1Action&quot; method&#x3D;&quot;demo1&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-有实体类"><a href="#3-2-2-有实体类" class="headerlink" title="3.2.2    有实体类"></a>3.2.2    有实体类</h3><p>此种情况是，我们有独立的实体类，在action中定义的是实体类对象，并且提供get/set方法。代码如下：</p><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> * 第二种情况：</span></span><br><span class="line"><span class="comment"> *    属性驱动：有实体类</span></span><br><span class="line"><span class="comment"> *    表单数据的接收都定义在实体类中，把实体类定义在动作类中。</span></span><br><span class="line"><span class="comment"> * 要想封装成功，需要按照要求书写：</span></span><br><span class="line"><span class="comment"> *   此时需要使用OGNL表达式来指定表单元素的name取值</span></span><br><span class="line"><span class="comment"> *   OGNL表达式全称：Object Graphic Navigation Language</span></span><br><span class="line"><span class="comment"> *                   对象    图    导航      语言</span></span><br><span class="line"><span class="comment"> *  写法：</span></span><br><span class="line"><span class="comment"> *  user.username  user.age</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 执行参数封装，是一个名称为params的拦截器实现的。</span></span><br><span class="line"><span class="comment"> * 封装的规则只有一个，它要去指定位置找属性，找到之后调用set方法赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：第二种情况：属性驱动-有实体类 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo2.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"user.hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"user.hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"user.hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo2&quot; class&#x3D;&quot;com.wgy.web.action.Demo2Action&quot; method&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-模型驱动"><a href="#3-3-模型驱动" class="headerlink" title="3.3    模型驱动"></a>3.3    模型驱动</h2><p>在Struts2中，Action处理请求参数还有另外一种方式，叫做模型驱动（ModelDriven）。通过实现ModelDriven接口来接收请求参数。</p><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> * 第三种情况：我们在后面用的最多的方式</span></span><br><span class="line"><span class="comment"> *      模型驱动</span></span><br><span class="line"><span class="comment"> * 要想封装成功，需要按照要求书写：</span></span><br><span class="line"><span class="comment"> *  1、动作类必须实现ModelDriven接口</span></span><br><span class="line"><span class="comment"> *  2、动作类中需要定义模型，并且必须实例化出来</span></span><br><span class="line"><span class="comment"> *  3、提供接口抽象方法的实现，返回值必须是模型对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 执行参数封装，是一个名称为params的拦截器实现的。</span></span><br><span class="line"><span class="comment"> * 模型驱动的实现，除了params拦截器之外，还需要一个叫modelDriven的拦截器配合</span></span><br><span class="line"><span class="comment"> * 封装的规则只有一个，它要去指定位置找属性，找到之后调用set方法赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：第三种情况：模型驱动 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo3.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo3&quot; class&#x3D;&quot;com.wgy.web.action.Demo3Action&quot; method&#x3D;&quot;demo3&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-封装集合数据"><a href="#3-4-封装集合数据" class="headerlink" title="3.4    封装集合数据"></a>3.4    封装集合数据</h2><p>在实际的开发中，有些时候我们需要批量插入用户或者批量插入其他的对象，在Action中需要接受到这多个Action中封装的对象，然后传递给业务层。那么这个时候就需要将表单的数据封装到集合中。</p><h3 id="3-4-1-封装到List"><a href="#3-4-1-封装到List" class="headerlink" title="3.4.1    封装到List"></a>3.4.1    封装到List</h3><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装：List集合封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装都需要基于第二种情况实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：List集合类型的封装 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo4.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[0].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[0].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[0].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[1].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[1].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users[1].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo4&quot; class&#x3D;&quot;com.wgy.web.action.Demo4Action&quot; method&#x3D;&quot;demo4&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-封装到Map"><a href="#3-4-2-封装到Map" class="headerlink" title="3.4.2    封装到Map"></a>3.4.2    封装到Map</h3><p><strong>动作类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装：Map集合封装</span></span><br><span class="line"><span class="comment"> *  复杂类型的封装都需要基于第二种情况实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Map&lt;String, User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp页面：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：Map集合类型的封装 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo5.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['key1'].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['key1'].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['key1'].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['key1'].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['key1'].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['key1'].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['abc'].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['abc'].age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['abc'].birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['abc'].hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['abc'].hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"users['abc'].hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>struts.xml：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo5&quot; class&#x3D;&quot;com.wgy.web.action.Demo5Action&quot; method&#x3D;&quot;demo5&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h1 id="4-案例：Struts2-Hibernate实现保存删除客户"><a href="#4-案例：Struts2-Hibernate实现保存删除客户" class="headerlink" title="4.    案例：Struts2+Hibernate实现保存删除客户"></a>4.    案例：Struts2+Hibernate实现保存删除客户</h1><h2 id="4-1-Struts2"><a href="#4-1-Struts2" class="headerlink" title="4.1    Struts2"></a>4.1    Struts2</h2><h3 id="4-1-1-修改jsp"><a href="#4-1-1-修改jsp" class="headerlink" title="4.1.1    修改jsp"></a>4.1.1    修改jsp</h3><p><strong>menu.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TR&gt;</span><br><span class="line">    &lt;TD <span class="class"><span class="keyword">class</span></span>=menuSmall&gt;</span><br><span class="line">        &lt;A class=style2 href="$&#123;pageContext.request.contextPath&#125;/customer/addUICustomer.action"  target=main&gt;－ 新增客户&lt;/A&gt;</span><br><span class="line">    &lt;/TD&gt;</span><br><span class="line">&lt;/TR&gt;</span><br></pre></td></tr></table></figure><p><strong>add.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FORM id=form1 name=form1 action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/customer/addCustomer.action"</span> method=post&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/FORM&gt;</span><br></pre></td></tr></table></figure><p><strong>list.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT language=javascript&gt;</span><br><span class="line"><span class="function">function <span class="title">delOne</span><span class="params">(custId)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> sure = window.confirm(<span class="string">"确定删除吗？"</span>);</span><br><span class="line"><span class="keyword">if</span>(sure)&#123;</span><br><span class="line">window.location.href = <span class="string">"$&#123;pageContext.request.contextPath&#125;/customer/deleteCustomer?custId="</span>+custId;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/SCRIPT&gt;</span><br><span class="line">&lt;a href="javascript:delOne('$&#123;customer.custId&#125;')" &gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-配置xml并编写Action"><a href="#4-1-2-配置xml并编写Action" class="headerlink" title="4.1.2    配置xml并编写Action"></a>4.1.2    配置xml并编写Action</h3><p><strong>struts.xml的配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;!-- 开启开发者模式 --&gt;</span><br><span class="line">    &lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">    &lt;!--  动作配置 --&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;customer&quot; extends&#x3D;&quot;struts-default&quot; namespace&#x3D;&quot;&#x2F;customer&quot;&gt;</span><br><span class="line">        &lt;!-- 查询所有客户 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;findAllCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;findAllCustomer&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;findAllCustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;list.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 获取添加客户页面 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;addUICustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;addUICustomer&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;addUICustomer&quot;&gt;&#x2F;jsp&#x2F;customer&#x2F;add.jsp&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加客户 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;addCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;addCustomer&quot;&gt;</span><br><span class="line">            &lt;!-- &lt;result name&#x3D;&quot;addCustomer&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;jsp&#x2F;success.jsp&lt;&#x2F;result&gt; --&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;addCustomer&quot; type&#x3D;&quot;redirect&quot;&gt;findAllCustomer&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 删除客户 --&gt;</span><br><span class="line">        &lt;action name&#x3D;&quot;deleteCustomer&quot; class&#x3D;&quot;com.wgy.web.action.CustomerAction&quot; method&#x3D;&quot;deleteCustomer&quot;&gt;</span><br><span class="line">            &lt;result name&#x3D;&quot;deleteCustomer&quot; type&#x3D;&quot;redirect&quot;&gt;findAllCustomer&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure><p><strong>动作类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的动作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.调用service查询客户</span></span><br><span class="line">        List&lt;Customer&gt; customers = customerService.findAllCustomer();</span><br><span class="line">        <span class="comment">//2.获取request对象</span></span><br><span class="line">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">        <span class="comment">//3.把查询的结果存入请求域中</span></span><br><span class="line">        request.setAttribute(<span class="string">"customers"</span>, customers);</span><br><span class="line">        <span class="comment">//4.返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取添加客户页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.saveCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerService.deleteCustomer(customer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"deleteCustomer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-Hibernate"><a href="#4-2-Hibernate" class="headerlink" title="4.2    Hibernate"></a>4.2    Hibernate</h2><h3 id="4-2-1-编写业务层接口及实现类"><a href="#4-2-1-编写业务层接口及实现类" class="headerlink" title="4.2.1    编写业务层接口及实现类"></a>4.2.1    编写业务层接口及实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层实现类</span></span><br><span class="line"><span class="comment"> * 事务控制在业务层的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取Session</span></span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            <span class="comment">//2.开启事务</span></span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            <span class="comment">//3.执行操作</span></span><br><span class="line">            List&lt;Customer&gt; customers = customerDao.findAllCustomer();</span><br><span class="line">            <span class="comment">//4.提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">            <span class="comment">//5.返回结果</span></span><br><span class="line">            <span class="keyword">return</span> customers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取Session</span></span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            <span class="comment">//2.开启事务</span></span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            <span class="comment">//3.执行操作</span></span><br><span class="line">            customerDao.saveCustomer(customer);</span><br><span class="line">            <span class="comment">//4.提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Session s = <span class="keyword">null</span>;</span><br><span class="line">        Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取Session</span></span><br><span class="line">            s = HibernateUtil.getCurrentSession();</span><br><span class="line">            <span class="comment">//2.开启事务</span></span><br><span class="line">            tx = s.beginTransaction();</span><br><span class="line">            <span class="comment">//3.执行操作</span></span><br><span class="line">            customerDao.deleteCustomer(customer);</span><br><span class="line">            <span class="comment">//4.提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-编写持久层接口及实现类"><a href="#4-2-2-编写持久层接口及实现类" class="headerlink" title="4.2.2    编写持久层接口及实现类"></a>4.2.2    编写持久层接口及实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有客户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> custID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Customer <span class="title">findCustomerById</span><span class="params">(Long custID)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateUtil.getCurrentSession().createQuery(<span class="string">"from Customer"</span>).list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        HibernateUtil.getCurrentSession().save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        HibernateUtil.getCurrentSession().delete(findCustomerById(customer.getCustId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findCustomerById</span><span class="params">(Long custID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateUtil.getCurrentSession().get(Customer<span class="class">.<span class="keyword">class</span>,<span class="title">custID</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-请求参数封装失败后处理办法"><a href="#5-请求参数封装失败后处理办法" class="headerlink" title="5.    请求参数封装失败后处理办法"></a>5.    请求参数封装失败后处理办法</h1><h2 id="5-1-配置input结果视图"><a href="#5-1-配置input结果视图" class="headerlink" title="5.1    配置input结果视图"></a>5.1    配置input结果视图</h2><p>视图路径应该是从哪来回哪去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name&#x3D;&quot;demo3&quot; class&#x3D;&quot;com.wgy.web.action.Demo3Action&quot; method&#x3D;&quot;demo3&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;user.jsp&lt;&#x2F;result&gt;</span><br><span class="line">&lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure><h2 id="5-2-提示错误信息"><a href="#5-2-提示错误信息" class="headerlink" title="5.2    提示错误信息"></a>5.2    提示错误信息</h2><p><strong>引入struts2标签库</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--请求参数封装：类型转换失败的处理方式 --%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo3.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;s:fielderror fieldName=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;s:fielderror fieldName=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>/&gt;&lt;s:fielderror fieldName=<span class="string">"birthday"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"吃饭"</span>/&gt;吃饭</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"睡觉"</span>/&gt;睡觉</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"写代码"</span>/&gt;写代码</span><br><span class="line">    &lt;s:fielderror fieldName=<span class="string">"hobby"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-3-把提交的数据回显回来"><a href="#5-3-把提交的数据回显回来" class="headerlink" title="5.3    把提交的数据回显回来"></a>5.3    把提交的数据回显回来</h2><p>html标签和struts2标签都可以实现</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=<span class="string">"demo3"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"姓名"</span>/&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"age"</span> label=<span class="string">"年龄"</span>/&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"birthday"</span> label=<span class="string">"生日"</span>/&gt;</span><br><span class="line">&lt;s:submit value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-4-关于中文提示的问题"><a href="#5-4-关于中文提示的问题" class="headerlink" title="5.4    关于中文提示的问题"></a>5.4    关于中文提示的问题</h2><p>I18N ： 国际化   Internationalization</p><p>同实体类创建.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">invalid.fieldvalue.birthday</span>=<span class="string">请输入正确的日期格式。正确的格式是：yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-结果视图的配置&quot;&gt;&lt;a href=&quot;#1-结果视图的配置&quot; class=&quot;headerlink&quot; title=&quot;1.    结果视图的配置&quot;&gt;&lt;/a&gt;1.    结果视图的配置&lt;/h1&gt;&lt;h2 id=&quot;1-1-result标签&quot;&gt;&lt;a href=&quot;#1-1-result标签&quot; class=&quot;headerlink&quot; title=&quot;1.1    result标签&quot;&gt;&lt;/a&gt;1.1    result标签&lt;/h2&gt;&lt;p&gt;在sturts.xml文件中，Result的配置非常简单，使用&lt;result&gt;元素来配置Result逻辑视图与物理视图之间的映射，&lt;result&gt;元素可以有name和type属性，但这两种属性都不是必选的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Struts2" scheme="https://wgy1993.gitee.io/tags/Struts2/"/>
    
  </entry>
  
</feed>
