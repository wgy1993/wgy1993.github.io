<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wgy的博客</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wgy1993.gitee.io/"/>
  <updated>2020-11-04T07:47:05.249Z</updated>
  <id>https://wgy1993.gitee.io/</id>
  
  <author>
    <name>Wgy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud(二)</title>
    <link href="https://wgy1993.gitee.io/archives/6f583e1f.html"/>
    <id>https://wgy1993.gitee.io/archives/6f583e1f.html</id>
    <published>2020-11-04T07:46:08.000Z</published>
    <updated>2020-11-04T07:47:05.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-服务调用Feign入门"><a href="#1-服务调用Feign入门" class="headerlink" title="1.    服务调用Feign入门"></a>1.    服务调用Feign入门</h1><p>前面我们使用的RestTemplate实现REST API调用，代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    Product product = <span class="keyword">null</span>;</span><br><span class="line">    product = restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可知，我们是使用拼接字符串的方式构造URL的，该URL只有一个参数。但是，在现实中，URL中往往含有多个参数。这时候我们如果还用这种方式构造URL，那么就会非常痛苦。那应该如何解决？我们带着这样的问题进入到本章的学习。</p><a id="more"></a><h2 id="1-1-Feign简介"><a href="#1-1-Feign简介" class="headerlink" title="1.1    Feign简介"></a>1.1    Feign简介</h2><p>Feign是Netflix开发的声明式，模板化的HTTP客户端，其灵感来自Retrofit,JAXRS-2.0以及WebSocket.</p><ul><li>Feign可帮助我们更加便捷，优雅的调用HTTP API。</li><li>在SpringCloud中，使用Feign非常简单——创建一个接口，并在接口上添加一些注解，代码就完成了。</li><li>Feign支持多种注解，例如Feign自带的注解或者JAX-RS注解等。</li><li>SpringCloud对Feign进行了增强，使Feign支持了SpringMVC注解，并整合了Ribbon和Eureka，从而让Feign的使用更加方便。</li></ul><h2 id="1-2-基于Feign的服务调用"><a href="#1-2-基于Feign的服务调用" class="headerlink" title="1.2    基于Feign的服务调用"></a>1.2    基于Feign的服务调用</h2><h3 id="1-2-1-引入依赖"><a href="#1-2-1-引入依赖" class="headerlink" title="1.2.1    引入依赖"></a>1.2.1    引入依赖</h3><p>在服务消费者 shop_service_order 添加Fegin依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springcloud整合的openFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-配置调用接口"><a href="#1-2-2-配置调用接口" class="headerlink" title="1.2.2    配置调用接口"></a>1.2.2    配置调用接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明需要调用的微服务名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span></span></span><br><span class="line"><span class="comment"> *      name : 服务提供者的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"service-product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置需要调用的微服务接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义各参数绑定时， @PathVariable、@RequestParam、@RequestHeader等可以指定参数属性，在Feign中绑定参数必须通过value属性来指明具体的参数名，不然会抛出异常</li><li>@FeignClient ：注解通过name指定需要调用的微服务的名称，用于创建Ribbon的负载均衡器。会通过动态代理的形式创建ProductFeignClient接口的实现类。</li></ul><h3 id="1-2-3-启动类激活Feign"><a href="#1-2-3-启动类激活Feign" class="headerlink" title="1.2.3    启动类激活Feign"></a>1.2.3    启动类激活Feign</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活Feign</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过@EnableFeignClients注解开启Spring Cloud Feign的支持功能</p><h3 id="1-2-4-通过自动的接口调用远程微服务"><a href="#1-2-4-通过自动的接口调用远程微服务" class="headerlink" title="1.2.4    通过自动的接口调用远程微服务"></a>1.2.4    通过自动的接口调用远程微服务</h3><p>修改 OrderController ，添加ProductFeginClient的自动注入，并在order方法中使用ProductFeginClient 完成微服务调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductFeignClient productFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        product = productFeignClient.findById(id);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-测试效果"><a href="#1-2-5-测试效果" class="headerlink" title="1.2.5    测试效果"></a>1.2.5    测试效果</h3><p><img src="https://img-blog.csdnimg.cn/20201104151437554.png" alt="image-20201104113657373"></p><h2 id="1-3-Feign-和Ribbon的联系"><a href="#1-3-Feign-和Ribbon的联系" class="headerlink" title="1.3    Feign 和Ribbon的联系"></a>1.3    Feign 和Ribbon的联系</h2><p><strong>Ribbon</strong>是一个基于 HTTP 和 TCP<strong>客户端</strong>的负载均衡的工具。它可以在<strong>客户端</strong>配置RibbonServerList（服务端列表），使用 HttpClient 或 RestTemplate 模拟http请求，步骤相当繁琐。</p><p><strong>Feign</strong>是在 Ribbon的基础上进行了一次改进，是一个使用起来更加方便的 HTTP 客户端。采用接口的方式， 只需要创建一个接口，然后在上面添加注解即可 ，将需要调用的其他服务的方法定义成抽象方法即可， 不需要自己构建http请求。然后就像是调用自身工程的方法调用，而感觉不到是调用远程方法，使得编写客户端变得非常容易</p><h2 id="1-4-负载均衡"><a href="#1-4-负载均衡" class="headerlink" title="1.4    负载均衡"></a>1.4    负载均衡</h2><p>Feign 中本身已经集成了Ribbon依赖和自动配置，因此我们不需要额外引入依赖，也不需要再注册RestTemplate 对象。另外，我们可以像上节课中讲的那样去配置Ribbon，可以通过 <code>ribbon.xx</code> 来进行全局配置。也可以通过 <code>服务名.ribbon.xx</code> 来对指定服务配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改ribbon的负载均衡策略   服务名 -  ribbon - NFLoadBalancerRuleClassName : 策略</span></span><br><span class="line"><span class="attr">service-product:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><h1 id="2-服务调用Feign高级"><a href="#2-服务调用Feign高级" class="headerlink" title="2.    服务调用Feign高级"></a>2.    服务调用Feign高级</h1><h2 id="2-1-Feign的配置"><a href="#2-1-Feign的配置" class="headerlink" title="2.1    Feign的配置"></a>2.1    Feign的配置</h2><p>从Spring Cloud Edgware开始，Feign支持使用属性自定义Feign。对于一个指定名称的Feign Client（例如该Feign Client的名称为 feignName ），Feign支持如下配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">feignName:</span>  <span class="comment">#定义FeginClient的名称</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span>  <span class="comment">#建立链接的超时时长 相当于Request.Options</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span>   <span class="comment">#读取超时时长 相当于Request.Options</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">full</span>   <span class="comment"># 配置Feign的日志级别，相当于代码配置方式中的Logger</span></span><br><span class="line">        <span class="attr">errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span>  <span class="comment"># Feign的错误解码器，相当于代码配置方式中的ErrorDecoder</span></span><br><span class="line">        <span class="attr">retryer:</span> <span class="string">com.example.SimpleRetryer</span>    <span class="comment"># 配置重试，相当于代码配置方式中的Retryer</span></span><br><span class="line">        <span class="attr">requestInterceptors:</span>  <span class="comment"># 配置请求拦截器，相当于代码配置方式中的RequestInterceptor</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line">        <span class="attr">decode404:</span> <span class="literal">false</span>  <span class="comment"># 配置熔断不处理404异常</span></span><br></pre></td></tr></table></figure><h2 id="2-2-请求压缩"><a href="#2-2-请求压缩" class="headerlink" title="2.2    请求压缩"></a>2.2    请求压缩</h2><p>Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br></pre></td></tr></table></figure><p>同时，我们也可以对请求的数据类型，以及触发压缩的大小下限进行设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br></pre></td></tr></table></figure><p>注：上面的数据类型、压缩大小下限均为默认值。</p><h2 id="2-3-日志级别"><a href="#2-3-日志级别" class="headerlink" title="2.3    日志级别"></a>2.3    日志级别</h2><p>在开发或者运行阶段往往希望看到Feign请求过程的日志记录，默认情况下Feign的日志是没有开启的。要想用属性配置方式来达到日志效果，只需在 application.yml 中添加如下内容即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置feign日志的输出</span></span><br><span class="line"><span class="comment">#日志配置  NONE : 不输出日志(高)   BASIC: 适用于生产环境追踪问题</span></span><br><span class="line"><span class="comment">#HEADERS : 在BASIC的基础上,记录请求和响应头信息   FULL : 记录所有</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">service-product:</span>  <span class="comment">#需要调用的服务名称</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.wgy.order.feign.ProductFeignClient:</span> <span class="string">debug</span><span class="comment">#Feign日志只会对日志级别为debug的做出响应</span></span><br></pre></td></tr></table></figure><h2 id="2-4-源码分析"><a href="#2-4-源码分析" class="headerlink" title="2.4    源码分析"></a>2.4    源码分析</h2><p><img src="https://img-blog.csdnimg.cn/20201104151454398.png" alt="image-20201104115652348"></p><h1 id="3-微服务架构的高并发问题"><a href="#3-微服务架构的高并发问题" class="headerlink" title="3.    微服务架构的高并发问题"></a>3.    微服务架构的高并发问题</h1><p>通过注册中心已经实现了微服务的服务注册和服务发现，并且通过Ribbon实现了负载均衡，已经借助Feign可以优雅的进行微服务调用。那么我们编写的微服务的性能怎么样呢，是否存在问题呢？</p><h2 id="3-1-性能工具Jmetter"><a href="#3-1-性能工具Jmetter" class="headerlink" title="3.1    性能工具Jmetter"></a>3.1    性能工具Jmetter</h2><p><img src="https://img-blog.csdnimg.cn/20201104151504453.png" alt="image-20201104122453332"></p><p>Apache JMeter 是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。</p><h3 id="3-1-1-安装Jmetter"><a href="#3-1-1-安装Jmetter" class="headerlink" title="3.1.1    安装Jmetter"></a>3.1.1    安装Jmetter</h3><p>Jmetter安装十分简单，将 apache -jmeter-2.13.zip 完整压缩包解压，找到安装目录下bin/jmeter.bat 已管理员身份启动即可</p><p><img src="https://img-blog.csdnimg.cn/20201104151511548.png" alt="image-20201104123216845"></p><h3 id="3-1-2-配置Jmetter"><a href="#3-1-2-配置Jmetter" class="headerlink" title="3.1.2    配置Jmetter"></a>3.1.2    配置Jmetter</h3><h4 id="3-1-2-1-创建新的测试计划"><a href="#3-1-2-1-创建新的测试计划" class="headerlink" title="3.1.2.1    创建新的测试计划"></a>3.1.2.1    创建新的测试计划</h4><p><img src="https://img-blog.csdnimg.cn/20201104151517869.png" alt="image-20201104123240442"></p><h4 id="3-1-2-2-测试计划下创建发起请求的线程组"><a href="#3-1-2-2-测试计划下创建发起请求的线程组" class="headerlink" title="3.1.2.2    测试计划下创建发起请求的线程组"></a>3.1.2.2    测试计划下创建发起请求的线程组</h4><p><img src="https://img-blog.csdnimg.cn/2020110415152443.png" alt="image-20201104123258982"></p><ul><li>可以配置请求的线程数</li><li>以及每个请求发送的请求次数</li></ul><h4 id="3-1-2-3-创建http请求模板"><a href="#3-1-2-3-创建http请求模板" class="headerlink" title="3.1.2.3    创建http请求模板"></a>3.1.2.3    创建http请求模板</h4><p><img src="https://img-blog.csdnimg.cn/20201104151531642.png" alt="image-20201104123502417"></p><h4 id="3-1-2-4-配置测试的接口信息"><a href="#3-1-2-4-配置测试的接口信息" class="headerlink" title="3.1.2.4    配置测试的接口信息"></a>3.1.2.4    配置测试的接口信息</h4><p><img src="https://img-blog.csdnimg.cn/20201104151539433.png" alt="image-20201104123523741"></p><h2 id="3-2-系统负载过高存在的问题"><a href="#3-2-系统负载过高存在的问题" class="headerlink" title="3.2    系统负载过高存在的问题"></a>3.2    系统负载过高存在的问题</h2><h3 id="3-2-1-问题分析"><a href="#3-2-1-问题分析" class="headerlink" title="3.2.1    问题分析"></a>3.2.1    问题分析</h3><p>在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，由于网络原因或者自身的原因，服务并不能保证服务的100%可用，如果单个服务出现问题，调用这个服务就会出现网络延迟，此时若有大量的网络涌入，会形成任务累计，导致服务瘫痪。</p><p>在SpringBoot程序中，默认使用内置tomcat作为web服务器。单tomcat支持最大的并发请求是有限的，如果某一接口阻塞，待执行的任务积压越来越多，那么势必会影响其他接口的调用。</p><p><img src="https://img-blog.csdnimg.cn/20201104151653414.png" alt="image-20201104134044617"></p><h3 id="3-2-2-线程池的形式实现服务隔离"><a href="#3-2-2-线程池的形式实现服务隔离" class="headerlink" title="3.2.2    线程池的形式实现服务隔离"></a>3.2.2    线程池的形式实现服务隔离</h3><h4 id="3-2-2-1-配置坐标"><a href="#3-2-2-1-配置坐标" class="headerlink" title="3.2.2.1    配置坐标"></a>3.2.2.1    配置坐标</h4><p>为了方便实现线以线程池的形式完成资源隔离，需要引入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-metrics-event-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-javanica<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-配置线程池"><a href="#3-2-2-2-配置线程池" class="headerlink" title="3.2.2.2    配置线程池"></a>3.2.2.2    配置线程池</h4><p>配置HystrixCommand接口的实现类，再实现类中可以对线程池进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderCommand</span><span class="params">(RestTemplate restTemplate, Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(setter());</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Setter <span class="title">setter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务分组</span></span><br><span class="line">        HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(<span class="string">"order_product"</span>);</span><br><span class="line">        <span class="comment">// 服务标识</span></span><br><span class="line">        HystrixCommandKey commandKey = HystrixCommandKey.Factory.asKey(<span class="string">"product"</span>);</span><br><span class="line">        <span class="comment">// 线程池名称</span></span><br><span class="line">        HystrixThreadPoolKey threadPoolKey = HystrixThreadPoolKey.Factory.asKey(<span class="string">"order_product_pool"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池配置</span></span><br><span class="line"><span class="comment">         *     withCoreSize :  线程池大小为10</span></span><br><span class="line"><span class="comment">         *     withKeepAliveTimeMinutes:  线程存活时间15秒</span></span><br><span class="line"><span class="comment">         *     withQueueSizeRejectionThreshold  :队列等待的阈值为100,超过100执行拒绝策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HystrixThreadPoolProperties.Setter threadPoolProperties = HystrixThreadPoolProperties.Setter().withCoreSize(<span class="number">50</span>)</span><br><span class="line">                .withKeepAliveTimeMinutes(<span class="number">15</span>).withQueueSizeRejectionThreshold(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 命令属性配置Hystrix 开启超时</span></span><br><span class="line">        HystrixCommandProperties.Setter commandProperties = HystrixCommandProperties.Setter()</span><br><span class="line">                <span class="comment">// 采用线程池方式实现服务隔离</span></span><br><span class="line">                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD)</span><br><span class="line">                <span class="comment">// 禁止</span></span><br><span class="line">                .withExecutionTimeoutEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Setter.withGroupKey(groupKey).andCommandKey(commandKey).andThreadPoolKey(threadPoolKey)</span><br><span class="line">                .andThreadPoolPropertiesDefaults(threadPoolProperties).andCommandPropertiesDefaults(commandProperties);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Product <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://127.0.0.1/product/"</span> + id, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Product <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"不好意思,出错了"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-3-配置调用"><a href="#3-2-2-3-配置调用" class="headerlink" title="3.2.2.3    配置调用"></a>3.2.2.3    配置调用</h4><p>修改 OrderController ，使用自定义的OrderCommand完成调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用OrderCommand调用远程服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderCommand(restTemplate, id).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findOrder</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"根据id查询订单"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-服务熔断Hystrix入门"><a href="#4-服务熔断Hystrix入门" class="headerlink" title="4.    服务熔断Hystrix入门"></a>4.    服务熔断Hystrix入门</h1><h2 id="4-1-服务容错的核心知识"><a href="#4-1-服务容错的核心知识" class="headerlink" title="4.1    服务容错的核心知识"></a>4.1    服务容错的核心知识</h2><h3 id="4-1-1-雪崩效应"><a href="#4-1-1-雪崩效应" class="headerlink" title="4.1.1    雪崩效应"></a>4.1.1    雪崩效应</h3><p>在微服务架构中，一个请求需要调用多个服务是非常常见的。如客户端访问A服务，而A服务需要调用B服务，B服务需要调用C服务，由于网络原因或者自身的原因，如果B服务或者C服务不能及时响应，A服务将处于阻塞状态，直到B服务C服务响应。此时若有大量的请求涌入，容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，造成连锁反应，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。</p><p><img src="https://img-blog.csdnimg.cn/20201104151545628.png" alt="image-20201104124844180"></p><p>雪崩是系统中的蝴蝶效应导致其发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。从源头上我们无法完全杜绝雪崩源头的发生，但是雪崩的根本原因来源于服务之间的强依赖，所以我们可以提前评估，做好<strong>熔断</strong>，<strong>隔离</strong>，<strong>限流</strong>。</p><h3 id="4-1-2-服务隔离"><a href="#4-1-2-服务隔离" class="headerlink" title="4.1.2    服务隔离"></a>4.1.2    服务隔离</h3><p>顾名思义，它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的系统服务。</p><h3 id="4-1-3-熔断降级"><a href="#4-1-3-熔断降级" class="headerlink" title="4.1.3    熔断降级"></a>4.1.3    熔断降级</h3><p>熔断这一概念来源于电子工程中的断路器（Circuit Breaker）。在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p><p><img src="https://img-blog.csdnimg.cn/20201104151552702.png" alt="image-20201104125058257"></p><p>所谓降级，就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。 也可以理解为兜底</p><h3 id="4-1-4-服务限流"><a href="#4-1-4-服务限流" class="headerlink" title="4.1.4    服务限流"></a>4.1.4    服务限流</h3><p>限流可以认为服务降级的一种，限流就是限制系统的输入和输出流量已达到保护系统的目的。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳固运行，一旦达到的需要限制的阈值，就需要限制流量并采取少量措施以完成限制流量的目的。比方：推迟解决，拒绝解决，或者者部分拒绝解决等等。</p><h2 id="4-2-Hystrix介绍"><a href="#4-2-Hystrix介绍" class="headerlink" title="4.2    Hystrix介绍"></a>4.2    Hystrix介绍</h2><p><img src="https://img-blog.csdnimg.cn/20201104151601485.png" alt="image-20201104125204091"></p><p>Hystrix 是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。Hystrix主要通过以下几点实现延迟和容错。</p><ul><li>包裹请求：使用 HystrixCommand包裹对依赖的调用逻辑，每个命令在独立线程中执行。这使用了设计模式中的“命令模式”。</li><li>跳闸机制：当某服务的错误率超过一定的阈值时， Hystrix可以自动或手动跳闸，停止请求该服务一段时间。</li><li>资源隔离： Hystrix为每个依赖都维护了一个小型的线程池（或者信号量）。如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等待，从而加速失败判定。</li><li>监控： Hystrix可以近乎实时地监控运行指标和配置的变化，例如成功、失败、超时、以及被拒绝的请求等。</li><li>回退机制：当请求失败、超时、被拒绝，或当断路器打开时，执行回退逻辑。回退逻辑由开发人员自行提供，例如返回一个缺省值。</li><li>自我修复：断路器打开一段时间后，会自动进入 “半开”状态。</li></ul><h2 id="4-3-Rest实现服务熔断"><a href="#4-3-Rest实现服务熔断" class="headerlink" title="4.3    Rest实现服务熔断"></a>4.3    Rest实现服务熔断</h2><h3 id="4-3-1-引入Hystrix的依赖"><a href="#4-3-1-引入Hystrix的依赖" class="headerlink" title="4.3.1    引入Hystrix的依赖"></a>4.3.1    引入Hystrix的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-启动类激活Hystrix"><a href="#4-3-2-启动类激活Hystrix" class="headerlink" title="4.3.2    启动类激活Hystrix"></a>4.3.2    启动类激活Hystrix</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活hystrix</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用spring提供的RestTemplate发送http请求到商品服务</span></span><br><span class="line"><span class="comment">     *      1.创建RestTemplate对象交给容器管理</span></span><br><span class="line"><span class="comment">     *      2.在使用的时候,调用其方法完成操作 (getXX,postxxx)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@LoadBalanced</span> : 是ribbon提供的负载均衡的注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-配置熔断触发的降级逻辑"><a href="#4-3-3-配置熔断触发的降级逻辑" class="headerlink" title="4.3.3    配置熔断触发的降级逻辑"></a>4.3.3    配置熔断触发的降级逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解配置熔断保护</span></span><br><span class="line"><span class="comment">     *      fallbackmethod : 配置熔断之后的降级方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"orderFallBack"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级方法</span></span><br><span class="line"><span class="comment">     *      和需要收到保护的方法的返回值一致</span></span><br><span class="line"><span class="comment">     *      方法参数一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderFallBack</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"熔断:触发降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有代码可知，为 findById 方法编写一个回退方法orderFallBack，该方法与 findById 方法具有相同的参数与返回值类型，该方法返回一个默认的错误信息。</p><p>在 findById方法上，使用注解@HystrixCommand的fallbackMethod属性，指定熔断触发的降级方法是orderFallBack。</p><ul><li>因为熔断的降级逻辑方法必须跟正常逻辑方法保证： <strong>相同的参数列表和返回值声明</strong>。</li><li>在 findById 方法上 HystrixCommand(fallbackMethod = “orderFallBack”) 用来声明一个降级逻辑的方法</li></ul><p>当 shop -service-product 微服务正常时，浏览器访问 <a href="http://localhost:9001/order/product/1" target="_blank" rel="noopener">http://localhost:9001/order/product/1</a></p><p><img src="https://img-blog.csdnimg.cn/20201104151608597.png" alt="image-20201104131436547"></p><p>可以正常调用服务提供者获取数据。当将商品微服务停止时继续访问</p><p><img src="https://img-blog.csdnimg.cn/20201104151615272.png" alt="image-20201104131451066"></p><p>此时 Hystrix配置已经生效进入熔断降级方法。</p><h4 id="4-3-3-1-默认的Fallback"><a href="#4-3-3-1-默认的Fallback" class="headerlink" title="4.3.3.1    默认的Fallback"></a>4.3.3.1    默认的Fallback</h4><p>我们刚才把fallback写在了某个业务方法上，如果这样的方法很多，那岂不是要写很多。所以我们可以把Fallback配置加在类上，实现默认fallback：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DefaultProperties</span> : 指定此接口中公共的熔断设置</span></span><br><span class="line"><span class="comment"> *      如果过在<span class="doctag">@DefaultProperties</span>指定了公共的降级方法</span></span><br><span class="line"><span class="comment"> *      在<span class="doctag">@HystrixCommand</span>不需要单独指定了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallBack"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解配置熔断保护</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定统一的降级方法</span></span><br><span class="line"><span class="comment">     *      参数 : 没有参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">defaultFallBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"触发统一的降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-2-超时设置"><a href="#4-3-3-2-超时设置" class="headerlink" title="4.3.3.2    超时设置"></a>4.3.3.2    超时设置</h4><p>在之前的案例中，请求在超过1秒后都会返回错误信息，这是因为Hystix的默认超时时长为1，我们可以通过配置修改这个值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span> <span class="comment">#默认的连接超时时间1秒,若1秒没有返回数据,自动的触发降级逻辑</span></span><br></pre></td></tr></table></figure><h2 id="4-4-Feign-实现服务熔断"><a href="#4-4-Feign-实现服务熔断" class="headerlink" title="4.4    Feign 实现服务熔断"></a>4.4    Feign 实现服务熔断</h2><p>SpringCloud Fegin默认已为Feign整合了hystrix，所以添加Feign依赖后就不用在添加hystrix，那么怎么才能让Feign的熔断机制生效呢，只要按以下步骤开发：</p><h3 id="4-4-1-在Feign中配置开启Hystrix"><a href="#4-4-1-在Feign中配置开启Hystrix" class="headerlink" title="4.4.1    在Feign中配置开启Hystrix"></a>4.4.1    在Feign中配置开启Hystrix</h3><p>在Feign中已经内置了hystrix，但是默认是关闭的需要在工程的 application.yml 中开启对hystrix的支持</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment">#开启对hystrix的支持</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="4-4-2-配置FeignClient接口的实现类"><a href="#4-4-2-配置FeignClient接口的实现类" class="headerlink" title="4.4.2    配置FeignClient接口的实现类"></a>4.4.2    配置FeignClient接口的实现类</h3><p>基于Feign实现熔断降级，那么降级方法需要配置到FeignClient接口的实现类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现自定义的ProductFeginClient接口</span></span><br><span class="line"><span class="comment"> *      在接口实现类中编写熔断降级方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFeignClientCallBack</span> <span class="keyword">implements</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断降级的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"feign调用触发熔断降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-修改FeignClient添加hystrix熔断"><a href="#4-4-3-修改FeignClient添加hystrix熔断" class="headerlink" title="4.4.3    修改FeignClient添加hystrix熔断"></a>4.4.3    修改FeignClient添加hystrix熔断</h3><p>@FeignClient 注解中以fallback声明降级方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明需要调用的微服务名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span></span></span><br><span class="line"><span class="comment"> *      name : 服务提供者的名称</span></span><br><span class="line"><span class="comment"> *      fallback : 配置熔断发生降级方法实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"service-product"</span>, fallback = ProductFeignClientCallBack<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置需要调用的微服务接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-服务熔断Hystrix高级"><a href="#5-服务熔断Hystrix高级" class="headerlink" title="5.    服务熔断Hystrix高级"></a>5.    服务熔断Hystrix高级</h1><p>我们知道，当请求失败，被拒绝，超时的时候，都会进入到降级方法中。但进入降级方法并不意味着断路器已经被打开。那么如何才能了解断路器中的状态呢？</p><h2 id="5-1-Hystrix的监控平台"><a href="#5-1-Hystrix的监控平台" class="headerlink" title="5.1    Hystrix的监控平台"></a>5.1    Hystrix的监控平台</h2><p>除了实现容错功能，Hystrix还提供了近乎实时的监控，HystrixCommand和HystrixObservableCommand在执行时，会生成执行结果和运行指标。比如每秒的请求数量，成功数量等。这些状态会暴露在Actuator提供的/health端点中。只需为项目添加 spring -boot-actuator 依赖，重启项目，访问 <a href="http://localhost:9001/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:9001/actuator/hystrix.stream</a> ,即可看到实时的监控数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认只有几个,配置暴露所有actuator监控的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201104151622311.png" alt="image-20201104132946345"></p><h3 id="5-1-1-搭建Hystrix-DashBoard监控"><a href="#5-1-1-搭建Hystrix-DashBoard监控" class="headerlink" title="5.1.1    搭建Hystrix DashBoard监控"></a>5.1.1    搭建Hystrix DashBoard监控</h3><p>刚刚讨论了Hystrix的监控，但访问/hystrix.stream接口获取的都是已文字形式展示的信息。很难通过文字直观的展示系统的运行状态，所以Hystrix官方还提供了基于图形化的DashBoard（仪表板）监控平台。Hystrix仪表板可以显示每个断路器（被@HystrixCommand注解的方法）的状态。</p><h4 id="5-1-1-1-导入依赖"><a href="#5-1-1-1-导入依赖" class="headerlink" title="5.1.1.1    导入依赖"></a>5.1.1.1    导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入hystrix的监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-1-2-添加EnableHystrixDashboard-注解"><a href="#5-1-1-2-添加EnableHystrixDashboard-注解" class="headerlink" title="5.1.1.2    添加EnableHystrixDashboard 注解"></a>5.1.1.2    添加EnableHystrixDashboard 注解</h4><p>在启动类使用@EnableHystrixDashboard注解激活仪表盘项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活Feign</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="comment">//激活hystrix</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//激活hytrix的web监控平台</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-1-3-访问测试"><a href="#5-1-1-3-访问测试" class="headerlink" title="5.1.1.3    访问测试"></a>5.1.1.3    访问测试</h4><p><a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a></p><p><img src="https://img-blog.csdnimg.cn/20201104151630211.png" alt="image-20201104133612092"></p><p>输入监控断点展示监控的详细数据：<a href="http://localhost:9001/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:9001/actuator/hystrix.stream</a></p><p><img src="https://img-blog.csdnimg.cn/20201104151636950.png" alt="image-20201104133735884"></p><p>hystrix控制台面板说明：</p><p><img src="https://img-blog.csdnimg.cn/20201104151644929.png" alt="image-20201104133757649"></p><h3 id="5-1-2-断路器聚合监控Turbine"><a href="#5-1-2-断路器聚合监控Turbine" class="headerlink" title="5.1.2    断路器聚合监控Turbine"></a>5.1.2    断路器聚合监控Turbine</h3><p>在微服务架构体系中，每个服务都需要配置Hystrix DashBoard监控。如果每次只能查看单个实例的监控数据，就需要不断切换监控地址，这显然很不方便。要想看这个系统的Hystrix Dashboard数据就需要用到Hystrix Turbine。Turbine是一个聚合Hystrix 监控数据的工具，他可以将所有相关微服务的Hystrix 监控数据聚合到一起，方便使用。引入Turbine后，整个监控系统架构如下：</p><p><img src="https://img-blog.csdnimg.cn/20201104151703253.png" alt="image-20201104135250255"></p><h4 id="5-1-2-1-搭建TurbineServer"><a href="#5-1-2-1-搭建TurbineServer" class="headerlink" title="5.1.2.1    搭建TurbineServer"></a>5.1.2.1    搭建TurbineServer</h4><p>创建工程 shop_hystrix_turbine 引入相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-2-2-配置多个微服务的hystrix监控"><a href="#5-1-2-2-配置多个微服务的hystrix监控" class="headerlink" title="5.1.2.2    配置多个微服务的hystrix监控"></a>5.1.2.2    配置多个微服务的hystrix监控</h4><p>在application.yml的配置文件中开启turbine并进行相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8031</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix-turbine</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="comment"># 要监控的微服务列表，多个用,分隔</span></span><br><span class="line">  <span class="attr">appConfig:</span> <span class="string">service-order</span></span><br><span class="line">  <span class="attr">clusterNameExpression:</span> <span class="string">"'default'"</span></span><br></pre></td></tr></table></figure><ul><li>eureka 相关配置 ： 指定注册中心地址</li><li>turbine 相关配置：指定需要监控的微服务列表</li></ul><p>turbine会自动的从注册中心中获取需要监控的微服务，并聚合所有微服务中的 /hystrix.stream 数据</p><h4 id="5-1-2-3-配置启动类"><a href="#5-1-2-3-配置启动类" class="headerlink" title="5.1.2.3    配置启动类"></a>5.1.2.3    配置启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//trubin配置</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="comment">//激活hytrix的web监控平台</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbinAppliation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TurbinAppliation<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为一个独立的监控项目，需要配置启动类，开启 HystrixDashboard监控平台，并激活Turbine</p><h4 id="5-1-2-4-测试"><a href="#5-1-2-4-测试" class="headerlink" title="5.1.2.4    测试"></a>5.1.2.4    测试</h4><p>浏览器访问 <a href="http://localhost:8031/hystrix" target="_blank" rel="noopener">http://localhost:8031/hystrix</a> 展示HystrixDashboard。并在url位置输入  <a href="http://localhost:8031/turbine.stream" target="_blank" rel="noopener">http://localhost:8031/turbine.stream</a> ，动态根据turbine.stream数据展示多个微服务的监控数据</p><p><img src="https://img-blog.csdnimg.cn/20201104151709148.png" alt="image-20201104135710872"></p><h2 id="5-2-熔断器的状态"><a href="#5-2-熔断器的状态" class="headerlink" title="5.2    熔断器的状态"></a>5.2    熔断器的状态</h2><p>熔断器有三个状态  CLOSED 、 OPEN 、 HALF_OPEN 熔断器默认关闭状态，当触发熔断后状态变更为OPEN ,在等待到指定的时间，Hystrix会放请求检测服务是否开启，这期间熔断器会变为 HALF_OPEN 半开启状态，熔断探测服务可用则继续变更为  CLOSED 关闭熔断器。</p><p><img src="https://img-blog.csdnimg.cn/20201104151716588.png" alt="image-20201104135753795"></p><ul><li>Closed ：关闭状态（断路器关闭），所有请求都正常访问。代理类维护了最近调用失败的次数，如果某次调用失败，则使失败次数加1。如果最近失败次数超过了在给定时间内允许失败的阈值，则代理类切换到断开(Open)状态。此时代理开启了一个超时时钟，当该时钟超过了该时间，则切换到半断开（Half-Open）状态。该超时时间的设定是给了系统一次机会来修正导致调用失败的错误。</li><li>Open ：打开状态（断路器打开），所有请求都会被降级。Hystix会对请求情况计数，当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全关闭。默认失败比例的阈值是50%，请求次数最少不低于20次。</li><li>Half Open ：半开状态，open状态不是永久的，打开后会进入休眠时间（默认是5S）。随后断路器会自动进入半开状态。此时会释放1次请求通过，若这个请求是健康的，则会关闭断路器，否则继续保持打开，再次进行5秒休眠计时。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201104151722764.png" alt="image-20201104135910774"></p><p>为了能够精确控制请求的成功或失败，我们在 shop_service_order  的调用业务中加入一段逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解配置熔断保护</span></span><br><span class="line"><span class="comment">     *      fallbackmethod : 配置熔断之后的降级方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"orderFallBack"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级方法</span></span><br><span class="line"><span class="comment">     *      和需要收到保护的方法的返回值一致</span></span><br><span class="line"><span class="comment">     *      方法参数一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderFallBack</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"熔断:触发降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果参数是 id为1，一定失败，其它情况都成功。</p><p>我们准备两个请求窗口：</p><ul><li>一个请求：<a href="http://localhost:9001/order/product/2，注定失败" target="_blank" rel="noopener">http://localhost:9001/order/product/2，注定失败</a></li><li>一个请求：<a href="http://localhost:9001/order/product/1，肯定成功" target="_blank" rel="noopener">http://localhost:9001/order/product/1，肯定成功</a></li></ul><p>熔断器的默认触发阈值是20次请求，不好触发。休眠时间时5秒，时间太短，不易观察，为了测试方便，我们可以通过配置修改熔断策略：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">5</span> <span class="comment">#触发熔断的最小请求次数，默认20 /10秒</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">10000</span> <span class="comment">#熔断多少秒后去尝试请求 默认 5   打开状态的时间</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">50</span> <span class="comment">#触发熔断的失败请求最小占比，默认50%</span></span><br></pre></td></tr></table></figure><p>当我们疯狂访问id为2的请求时（超过10次），就会触发熔断。断路器会打开，一切请求都会被降级处理。</p><p>此时你访问id为1的请求，会发现返回的也是失败，而且失败时间很短，只有20毫秒左右：</p><p><img src="https://img-blog.csdnimg.cn/20201104151728247.png" alt="image-20201104142122965"></p><h2 id="5-3-熔断器的隔离策略"><a href="#5-3-熔断器的隔离策略" class="headerlink" title="5.3    熔断器的隔离策略"></a>5.3    熔断器的隔离策略</h2><p>微服务使用Hystrix熔断器实现了服务的自动降级，让微服务具备自我保护的能力，提升了系统的稳定性，也较好的解决雪崩效应。<strong>其使用方式目前支持两种策略</strong>：</p><ul><li><strong>线程池隔离策略</strong>： 使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）</li><li><strong>信号量隔离策略</strong>： 使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）</li></ul><p><strong>线程池和型号量两种策略功能支持对比如下：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201104151735433.png" alt="image-20201104142457580"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">strategy:</span> <span class="string">ExecutionIsolationStrategy.SEMAPHORE</span> <span class="comment">#信号量隔离</span></span><br><span class="line">          <span class="comment">#strategy: # ExecutionIsolationStrategy.THREAD 线程池隔离</span></span><br><span class="line">          <span class="attr">maxConcurrentRequests:</span>  <span class="number">30</span>  <span class="comment">#最大信号量上限</span></span><br></pre></td></tr></table></figure><h2 id="5-4-Hystrix的核心源码"><a href="#5-4-Hystrix的核心源码" class="headerlink" title="5.4    Hystrix的核心源码"></a>5.4    Hystrix的核心源码</h2><p>Hystrix 底层基于 RxJava，RxJava 是响应式编程开发库，因此Hystrix的整个实现策略简单说即：把一个HystrixCommand封装成一个Observable（待观察者），针对自身要实现的核心功能，对Observable进行各种装饰，并在订阅各步装饰的Observable，以便在指定事件到达时，添加自己的业务。</p><p><img src="https://img-blog.csdnimg.cn/20201104151741961.png" alt="image-20201104142836553"></p><h1 id="6-服务熔断Hystrix的替换方案"><a href="#6-服务熔断Hystrix的替换方案" class="headerlink" title="6.    服务熔断Hystrix的替换方案"></a>6.    服务熔断Hystrix的替换方案</h1><p>18年底Netflix官方宣布Hystrix 已经足够稳定，不再积极开发 Hystrix，该项目将处于维护模式。就目前来看Hystrix是比较稳定的，并且Hystrix只是停止开发新的版本，并不是完全停止维护，Bug什么的依然会维护的。因此短期内，Hystrix依然是继续使用的。但从长远来看，Hystrix总会达到它的生命周期，那么Spring Cloud生态中是否有替代产品呢？</p><h2 id="6-1-替换方案介绍"><a href="#6-1-替换方案介绍" class="headerlink" title="6.1    替换方案介绍"></a>6.1    替换方案介绍</h2><h3 id="6-1-1-Alibaba-Sentinel"><a href="#6-1-1-Alibaba-Sentinel" class="headerlink" title="6.1.1    Alibaba Sentinel"></a>6.1.1    Alibaba Sentinel</h3><p>Sentinel 是阿里巴巴开源的一款断路器实现，目前在Spring Cloud的孵化器项目 Spring Cloud Alibaba中的一员Sentinel本身在阿里内部已经被大规模采用，非常稳定。因此可以作为一个较好的替代品。</p><h3 id="6-1-2-Resilience4J"><a href="#6-1-2-Resilience4J" class="headerlink" title="6.1.2    Resilience4J"></a>6.1.2    Resilience4J</h3><p>Resilicence4J 一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x/2.x，而且监控也不像Hystrix一样弄Dashboard/Hystrix等一堆轮子，而是支持和Micrometer（Pivotal开源的监控门面，Spring Boot 2.x中的Actuator就是基于Micrometer的）、prometheus（开源监控系统，来自谷歌的论文）、以及Dropwizard metrics（Spring Boot曾经的模仿对象，类似于Spring Boot）进行整合。</p><h2 id="6-2-Sentinel概述"><a href="#6-2-Sentinel概述" class="headerlink" title="6.2    Sentinel概述"></a>6.2    Sentinel概述</h2><h3 id="6-2-1-Sentinel简介"><a href="#6-2-1-Sentinel简介" class="headerlink" title="6.2.1    Sentinel简介"></a>6.2.1    Sentinel简介</h3><p><img src="https://img-blog.csdnimg.cn/2020110415174913.png" alt="image-20201104143029903"></p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel  具有以下特征:</p><ul><li><strong>丰富的应用场景</strong> ：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong> ：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong> ：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>Sentinel 的主要特性：</p><p><img src="https://img-blog.csdnimg.cn/20201104151757810.png" alt="image-20201104143158547"></p><h3 id="6-2-2-Sentinel-与Hystrix的区别"><a href="#6-2-2-Sentinel-与Hystrix的区别" class="headerlink" title="6.2.2    Sentinel 与Hystrix的区别"></a>6.2.2    Sentinel 与Hystrix的区别</h3><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式、匀速器模式、预热排队模式</td><td>不支持</td><td>简单的 Rate Limiter模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h3 id="6-2-3-名词解释"><a href="#6-2-3-名词解释" class="headerlink" title="6.2.3    名词解释"></a>6.2.3    名词解释</h3><p>Sentinel  可以简单的分为 Sentinel 核心库和 Dashboard。核心库不依赖 Dashboard，但是结合Dashboard 可以取得最好的效果。</p><p>使用 Sentinel 来进行熔断保护，主要分为几个步骤:</p><ol><li>定义资源</li><li>定义规则</li><li>检验规则是否生效</li></ol><p><strong>资源</strong>：可以是任何东西，一个服务，服务里的方法，甚至是一段代码。</p><p><strong>规则</strong>：Sentinel 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则和热点参数规则。Sentinel 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效</p><p>先把可能需要保护的资源定义好，之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。</p><p><img src="https://img-blog.csdnimg.cn/20201104151821107.png" alt="image-20201104150837505"></p><h2 id="6-3-Sentinel中的管理控制台"><a href="#6-3-Sentinel中的管理控制台" class="headerlink" title="6.3    Sentinel中的管理控制台"></a>6.3    Sentinel中的管理控制台</h2><h3 id="6-3-1-下载启动控制台"><a href="#6-3-1-下载启动控制台" class="headerlink" title="6.3.1    下载启动控制台"></a>6.3.1    下载启动控制台</h3><h4 id="6-3-1-1-获取-Sentinel-控制台"><a href="#6-3-1-1-获取-Sentinel-控制台" class="headerlink" title="6.3.1.1    获取 Sentinel 控制台"></a>6.3.1.1    获取 Sentinel 控制台</h4><p>您可以从官方网站中 下载最新版本的控制台 jar 包，下载地址如下：<br><a href="https://github.com/alibaba/Sentinel/releases/download/1.6.3/sentinel-dashboard-1.6.3.jar" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases/download/1.6.3/sentinel-dashboard-1.6.3.jar</a></p><h4 id="6-3-1-2-启动"><a href="#6-3-1-2-启动" class="headerlink" title="6.3.1.2    启动"></a>6.3.1.2    启动</h4><p>使用如下命令启动控制台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.6.3.jar</span><br></pre></td></tr></table></figure><p>其中 - Dserver.port=8080 用于指定 Sentinel 控制台端口为  8080 。</p><p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的登录功能，默认用户名和密码都是  sentinel 。</p><blockquote><p>启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p></blockquote><h3 id="6-3-2-客户端能接入控制台"><a href="#6-3-2-客户端能接入控制台" class="headerlink" title="6.3.2    客户端能接入控制台"></a>6.3.2    客户端能接入控制台</h3><p>控制台启动后，客户端需要按照以下步骤接入到控制台。</p><h4 id="6-3-2-1-引入JAR包"><a href="#6-3-2-1-引入JAR包" class="headerlink" title="6.3.2.1    引入JAR包"></a>6.3.2.1    引入JAR包</h4><p>客户端需要引入 Transport 模块来与 Sentinel 控制台进行通信。可以通过  pom.xml 引入 JAR 包:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2-2-配置启动参数"><a href="#6-3-2-2-配置启动参数" class="headerlink" title="6.3.2.2    配置启动参数"></a>6.3.2.2    配置启动参数</h4><p>在工程的application.yml中添加Sentinel 控制台配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span>   <span class="comment">#sentinel控制台的请求地址</span></span><br></pre></td></tr></table></figure><h3 id="6-3-3-查看机器列表以及健康情况"><a href="#6-3-3-查看机器列表以及健康情况" class="headerlink" title="6.3.3    查看机器列表以及健康情况"></a>6.3.3    查看机器列表以及健康情况</h3><p>默认情况下Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包。也可以配置sentinel.eager=true ,取消Sentinel控制台懒加载。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8081</span>   <span class="comment">#sentinel控制台的请求地址</span></span><br><span class="line">      <span class="attr">datasource:</span><span class="comment">#加载本地规则</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">file:</span></span><br><span class="line">            <span class="attr">file:</span> <span class="string">classpath:flowrule.json</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span> <span class="comment">#立即加载</span></span><br></pre></td></tr></table></figure><p>flowrule.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"orderFindById"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>打开浏览器即可展示Sentinel的管理控制台</p><p><img src="https://img-blog.csdnimg.cn/20201104151803921.png" alt="image-20201104145111970"></p><h2 id="6-4-基于Sentinel的服务保护"><a href="#6-4-基于Sentinel的服务保护" class="headerlink" title="6.4    基于Sentinel的服务保护"></a>6.4    基于Sentinel的服务保护</h2><h3 id="6-4-1-通用资源保护"><a href="#6-4-1-通用资源保护" class="headerlink" title="6.4.1    通用资源保护"></a>6.4.1    通用资源保护</h3><h4 id="6-4-1-1-引入依赖"><a href="#6-4-1-1-引入依赖" class="headerlink" title="6.4.1.1    引入依赖"></a>6.4.1.1    引入依赖</h4><p>需要注意SpringCloud-Alibaba与SpringCloud的版本关系</p><p><img src="https://img-blog.csdnimg.cn/20201104151810155.png" alt="image-20201104145228490"></p><p>父工程引入 alibaba实现的SpringCloud</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程中引入 sentinel</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-4-1-2-配置熔断降级方法"><a href="#6-4-1-2-配置熔断降级方法" class="headerlink" title="6.4.1.2    配置熔断降级方法"></a>6.4.1.2    配置熔断降级方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SentinelResource</span></span></span><br><span class="line"><span class="comment">     *      blockHandler : 声明熔断时调用的降级方法</span></span><br><span class="line"><span class="comment">     *      fallback : 抛出异常执行的降级方法</span></span><br><span class="line"><span class="comment">     *      value : 自定义的资源名称</span></span><br><span class="line"><span class="comment">     *          不设置:当前全类名.方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"orderFindById"</span>, blockHandler = <span class="string">"orderBlockHandler"</span>, fallback = <span class="string">"orderFallback"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义降级逻辑</span></span><br><span class="line"><span class="comment">     *  hystrix和sentinel</span></span><br><span class="line"><span class="comment">     *      熔断执行的降级方法</span></span><br><span class="line"><span class="comment">     *      抛出异常执行的降级方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderBlockHandler</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"触发熔断的降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderFallback</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"抛出异常执行的降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要被保护的方法上使用 @SentinelResource注解进行熔断配置。与Hystrix不同的是，Sentinel对抛出异常和熔断降级做了更加细致的区分，通过 blockHandler 指定熔断降级方法，通过 fallback 指定触发异常执行的降级方法。</p><h3 id="6-4-2-Rest实现熔断"><a href="#6-4-2-Rest实现熔断" class="headerlink" title="6.4.2    Rest实现熔断"></a>6.4.2    Rest实现熔断</h3><p>Spring Cloud Alibaba Sentinel 支持对  RestTemplate 的服务调用使用 Sentinel 进行保护，在构造RestTemplate bean的时候需要加上  @SentinelRestTemplate 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestOrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sentinel支持对restTemplate的服务调用使用sentinel方法.在构造</span></span><br><span class="line"><span class="comment">     * RestTemplate对象的时候,只需要加载<span class="doctag">@SentinelRestTemplate</span>即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 资源名:</span></span><br><span class="line"><span class="comment">     *      httpmethod:schema://host:port/path ：协议、主机、端口和路径</span></span><br><span class="line"><span class="comment">     *      httpmethod:schema://host:port ：协议、主机和端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SentinelRestTemplate</span>:</span></span><br><span class="line"><span class="comment">     *  异常降级</span></span><br><span class="line"><span class="comment">     *      fallback      : 降级方法</span></span><br><span class="line"><span class="comment">     *      fallbackClass : 降级配置类</span></span><br><span class="line"><span class="comment">     *  限流熔断</span></span><br><span class="line"><span class="comment">     *      blockHandler</span></span><br><span class="line"><span class="comment">     *      blockHandlerClass</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SentinelRestTemplate</span>(fallbackClass = ExceptionUtils<span class="class">.<span class="keyword">class</span>, <span class="title">fallback</span> </span>= <span class="string">"handleFallback"</span>,</span><br><span class="line">            blockHandler = <span class="string">"handleBlock"</span>, blockHandlerClass = ExceptionUtils<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">RestTemplate</span> <span class="title">restTemplate</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@SentinelRestTemplate 注解的属性支持限流( blockHandler ,  blockHandlerClass )和降级( fallback ,  fallbackClass )的处理。</li><li>其中 blockHandler 或  fallback 属性对应的方法必须是对应  blockHandlerClass 或fallbackClass 属性中的静态方法。</li><li>该方法的参数跟返回值跟org.springframework.http.client.ClientHttpRequestInterceptor#interceptor 方法一致，其中参数多出了一个  BlockException 参数用于获取 Sentinel 捕获的异常。</li></ul><p>比如上述  @SentinelRestTemplate 注解中  ExceptionUtil 的  handleException 属性对应的方法声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 熔断降级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态方法</span></span><br><span class="line"><span class="comment">     * 返回值: SentinelClientHttpResponse</span></span><br><span class="line"><span class="comment">     * 参数 : request , byte[] , clientRquestExcetion , blockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//限流熔断业务逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SentinelClientHttpResponse <span class="title">handleBlock</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution execution, BlockException ex)</span> </span>&#123;</span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">product.setProductName(<span class="string">"block"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SentinelClientHttpResponse(JSON.toJSONString(product));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常降级业务逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SentinelClientHttpResponse <span class="title">handleFallback</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                            ClientHttpRequestExecution execution, BlockException ex)</span> </span>&#123;</span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">product.setProductName(<span class="string">"Fallback"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelClientHttpResponse(JSON.toJSONString(product));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sentinel RestTemplate  限流的资源规则提供两种粒度：</p><ul><li>httpmethod:schema://host:port/path ：协议、主机、端口和路径</li><li>httpmethod:schema://host:port ：协议、主机和端口</li></ul><h3 id="6-4-3-Feign实现熔断"><a href="#6-4-3-Feign实现熔断" class="headerlink" title="6.4.3    Feign实现熔断"></a>6.4.3    Feign实现熔断</h3><p>Sentinel 适配了  Feign 组件。如果想使用，除了引入  <code>sentinel -starter</code> 的依赖外还需要 2 个步骤：</p><ul><li>配置文件打开 sentinel 对 feign 的支持： <code>feign.sentinel.enabled=true</code></li><li>加入 <code>openfeign starter</code> 依赖使  <code>sentinel starter</code> 中的自动化配置类生效：</li></ul><h4 id="6-4-3-1-引入依赖"><a href="#6-4-3-1-引入依赖" class="headerlink" title="6.4.3.1    引入依赖"></a>6.4.3.1    引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springcloud整合的openFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-4-3-2-开启sentinel-支持"><a href="#6-4-3-2-开启sentinel-支持" class="headerlink" title="6.4.3.2    开启sentinel 支持"></a>6.4.3.2    开启sentinel 支持</h4><p>在工程的application.yml中添加sentinel 对 feign 的支持</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment">#激活sentinel的支持</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="6-4-3-3-配置FeignClient"><a href="#6-4-3-3-配置FeignClient" class="headerlink" title="6.4.3.3    配置FeignClient"></a>6.4.3.3    配置FeignClient</h4><p>和使用Hystrix的方式基本一致，需要配置FeignClient接口以及通过 fallback 指定熔断降级方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明需要调用的微服务名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span></span></span><br><span class="line"><span class="comment"> *      name : 服务提供者的名称</span></span><br><span class="line"><span class="comment"> *      fallback : 配置熔断发生降级方法实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"service-product"</span>, fallback = ProductFeignClientCallBack<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置需要调用的微服务接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-3-4-配置熔断方法"><a href="#6-4-3-4-配置熔断方法" class="headerlink" title="6.4.3.4    配置熔断方法"></a>6.4.3.4    配置熔断方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现自定义的ProductFeginClient接口</span></span><br><span class="line"><span class="comment"> *      在接口实现类中编写熔断降级方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFeignClientCallBack</span> <span class="keyword">implements</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断降级的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"feign调用触发熔断降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign  对应的接口中的资源名策略定义：httpmethod:protocol://requesturl。 @FeignClient 注解中的所有属性，Sentinel 都做了兼容。</p><p>ProductFeginClient 接口中方法 findById 对应的资源名为 GET: <a href="http://shop-service-product/product/{str}。" target="_blank" rel="noopener">http://shop-service-product/product/{str}。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-服务调用Feign入门&quot;&gt;&lt;a href=&quot;#1-服务调用Feign入门&quot; class=&quot;headerlink&quot; title=&quot;1.    服务调用Feign入门&quot;&gt;&lt;/a&gt;1.    服务调用Feign入门&lt;/h1&gt;&lt;p&gt;前面我们使用的RestTemplate实现REST API调用，代码大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&quot;/buy/&amp;#123;id&amp;#125;&quot;&lt;/span&gt;, method = RequestMethod.GET)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Product &lt;span class=&quot;title&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@PathVariable Long id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Product product = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    product = restTemplate.getForObject(&lt;span class=&quot;string&quot;&gt;&quot;http://service-product/product/1&quot;&lt;/span&gt;, Product&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; product;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由代码可知，我们是使用拼接字符串的方式构造URL的，该URL只有一个参数。但是，在现实中，URL中往往含有多个参数。这时候我们如果还用这种方式构造URL，那么就会非常痛苦。那应该如何解决？我们带着这样的问题进入到本章的学习。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringCloud" scheme="https://wgy1993.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(一)</title>
    <link href="https://wgy1993.gitee.io/archives/c069a57d.html"/>
    <id>https://wgy1993.gitee.io/archives/c069a57d.html</id>
    <published>2020-10-28T07:07:01.000Z</published>
    <updated>2020-10-28T07:20:20.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-微服务基础知识"><a href="#1-微服务基础知识" class="headerlink" title="1.    微服务基础知识"></a>1.    微服务基础知识</h1><h2 id="1-1-系统架构的演变"><a href="#1-1-系统架构的演变" class="headerlink" title="1.1    系统架构的演变"></a>1.1    系统架构的演变</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的应用架构已无法应对，分布式服务架构以及微服务架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><a id="more"></a><h3 id="1-1-1-单体应用架构"><a href="#1-1-1-单体应用架构" class="headerlink" title="1.1.1    单体应用架构"></a>1.1.1    单体应用架构</h3><p>Web应用程序发展的早期，大部分web工程(包含前端页面,web层代码,service层代码,dao层代码)是将所有的功能模块,打包到一起并放在一个web容器中运行。</p><p><img src="https://img-blog.csdnimg.cn/2020102814510464.png" alt="image-20201027174132522"></p><p>比如搭建一个电商系统：客户下订单，商品展示，用户管理。这种将所有功能都部署在一个web容器中运行的系统就叫做单体架构。</p><p><strong>优点：</strong>开发简单，适用于小型应用</p><p><strong>缺点：</strong>不易扩展，维护。代码耦合</p><h3 id="1-1-2-垂直应用架构"><a href="#1-1-2-垂直应用架构" class="headerlink" title="1.1.2    垂直应用架构"></a>1.1.2    垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率</p><p><img src="https://img-blog.csdnimg.cn/20201028145115914.png" alt="image-20201027174603196"></p><p><strong>优点：</strong></p><ul><li>解决高并发问题</li><li>针对不同的模块优化</li><li>方便水平扩展，容错</li></ul><p><strong>缺点：</strong></p><ul><li>系统间相互独立</li><li>重复开发工作</li></ul><h3 id="1-1-3-分布式SOA架构"><a href="#1-1-3-分布式SOA架构" class="headerlink" title="1.1.3    分布式SOA架构"></a>1.1.3    分布式SOA架构</h3><h4 id="1-1-3-1-什么是SOA"><a href="#1-1-3-1-什么是SOA" class="headerlink" title="1.1.3.1    什么是SOA"></a>1.1.3.1    什么是SOA</h4><p>SOA 全称为 Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p><p>站在功能的角度，把业务逻辑抽象成可复用、可组装的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p><p>通过上面的描述可以发现 SOA 有如下几个特点：分布式、可重用、扩展灵活、松耦合</p><h4 id="1-1-3-2-SOA架构"><a href="#1-1-3-2-SOA架构" class="headerlink" title="1.1.3.2    SOA架构"></a>1.1.3.2    SOA架构</h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求</p><p><img src="https://img-blog.csdnimg.cn/20201028145121641.png" alt="image-20201027174926195"></p><p><strong>优点：</strong></p><ul><li>抽取公共的功能为服务,提高开发效率</li><li>对不同的服务进行集群化部署解决系统压力</li><li>基于ESB/DUBBO减少系统耦合</li></ul><p><strong>缺点：</strong></p><ul><li>抽取服务的粒度较大</li><li>服务提供方与调用方接口耦合度较高</li></ul><h3 id="1-1-4-微服务架构"><a href="#1-1-4-微服务架构" class="headerlink" title="1.1.4    微服务架构"></a>1.1.4    微服务架构</h3><p><img src="https://img-blog.csdnimg.cn/20201028145127596.png" alt="image-20201027175043843"></p><p><strong>优点：</strong></p><ul><li>通过服务的原子化拆分，以及微服务的独立打包、部署和升级，小团队的交付周期将缩短，运维成本也将大幅度下降</li><li>微服务遵循单一原则。微服务之间采用Restful等轻量协议传输。</li></ul><p><strong>缺点：</strong></p><ul><li>微服务过多，服务治理成本高，不利于系统维护。</li><li>分布式系统开发的技术成本高（容错、分布式事务等）。</li></ul><h3 id="1-1-5-SOA与微服务的关系"><a href="#1-1-5-SOA与微服务的关系" class="headerlink" title="1.1.5    SOA与微服务的关系"></a>1.1.5    SOA与微服务的关系</h3><p><strong>SOA</strong>（ <code>Service Oriented Architecture</code> ）“面向服务的架构”:他是一种设计方法，其中包含多个服务， 服务之间通过相互依赖最终提供一系列的功能。一个服务通常以独立的形式存在与操作系统进程中。各个服务之间通过网络调用。</p><p><strong>微服务架构:</strong>其实和 SOA 架构类似,微服务是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需<br>要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。<br>这些小应用之间通过服务完成交互和集成。</p><table><thead><tr><th>功能</th><th>SOA</th><th>微服务</th></tr></thead><tbody><tr><td>组件大小</td><td>大块业务逻辑</td><td>单独任务或小块业务逻辑</td></tr><tr><td>耦合</td><td>通常松耦合</td><td>总是松耦合</td></tr><tr><td>公司架构</td><td>任何类型</td><td>小型、专注于功能交叉团队</td></tr><tr><td>管理</td><td>着重中央管理</td><td>着重分散管理</td></tr><tr><td>目标</td><td>确保应用能够交互操作</td><td>执行新功能、快速拓展开发团队</td></tr></tbody></table><h2 id="1-2-分布式核心知识"><a href="#1-2-分布式核心知识" class="headerlink" title="1.2    分布式核心知识"></a>1.2    分布式核心知识</h2><h3 id="1-2-1-分布式中的远程调用"><a href="#1-2-1-分布式中的远程调用" class="headerlink" title="1.2.1    分布式中的远程调用"></a>1.2.1    分布式中的远程调用</h3><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。远程调用通常包含两个部分：序列化和通信协议。常见的序列化协议包括json、xml、hession、protobuf、thrift、text、bytes等，目前主流的远程调用技术有基于HTTP的RESTful接口以及基于TCP的RPC协议。</p><h4 id="1-2-1-1-RESTful接口"><a href="#1-2-1-1-RESTful接口" class="headerlink" title="1.2.1.1    RESTful接口"></a>1.2.1.1    RESTful接口</h4><p>REST，即Representational State Transfer的缩写，如果一个架构符合REST原则，就称它为RESTful架构。</p><ul><li><p><strong>资源（Resources）</strong></p><p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p></li><li><p><strong>表现层（Representation）</strong></p><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。</p></li><li><p><strong>状态转化（State Transfer）</strong></p><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p></li></ul><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><ul><li>每一个URI代表一种资源；</li><li>客户端和服务器之间，传递这种资源的某种表现层；</li><li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</li></ul><h4 id="1-2-1-2-RPC协议"><a href="#1-2-1-2-RPC协议" class="headerlink" title="1.2.1.2    RPC协议"></a>1.2.1.2    RPC协议</h4><p>RPC（Remote Procedure Call ） 一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服务调用更简单、透明。RPC框架负责屏蔽底层的传输方式（TCP或者UDP）、序列化方式（XML/JSON/二进制）和通信细节。开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。</p><p><img src="https://img-blog.csdnimg.cn/20201028145133873.png" alt="image-20201027180232681"></p><p><img src="https://img-blog.csdnimg.cn/20201028145139260.png" alt="image-20201027180246417"></p><h4 id="1-2-1-3-区别与联系"><a href="#1-2-1-3-区别与联系" class="headerlink" title="1.2.1.3    区别与联系"></a>1.2.1.3    区别与联系</h4><table><thead><tr><th>比较项</th><th>RESTful</th><th>RPC</th></tr></thead><tbody><tr><td>通讯协议</td><td>HTTP</td><td>一般使用TCP</td></tr><tr><td>性能</td><td>略低</td><td>较高</td></tr><tr><td>灵活度</td><td>高</td><td>低</td></tr><tr><td>应用</td><td>微服务架构</td><td>SOA架构</td></tr></tbody></table><ul><li><p>HTTP相对更规范，更标准，更通用，无论哪种语言都支持http协议。如果你是对外开放API，例如开放平台，外部的编程语言多种多样，你无法拒绝对每种语言的支持，现在开源中间件，基本最先支持的几个协议都包含RESTful。</p></li><li><p>RPC 框架作为架构微服务化的基础组件，它能大大降低架构微服务化的成本，提高调用方与服务提供方的研发效率，屏蔽跨进程调用函数（服务）的各类复杂细节。让调用方感觉就像调用本地函数一样调用远端函数、让服务提供方感觉就像实现一个本地函数一样来实现服务。</p></li></ul><h3 id="1-2-2-分布式中的CAP原理"><a href="#1-2-2-分布式中的CAP原理" class="headerlink" title="1.2.2    分布式中的CAP原理"></a>1.2.2    分布式中的CAP原理</h3><p>现如今，对于多数大型互联网应用，分布式系统（distributed system）正变得越来越重要。分布式系统的最大难点，就是各个节点的状态如何同步。CAP 定理是这方面的基本定理，也是理解分布式系统的起点。</p><p>CAP理论由 Eric Brewer 在ACM研讨会上提出，而后CAP被奉为分布式领域的重要理论。分布式系统的CAP理论，首先把分布式系统中的三个特性进行了如下归纳：</p><p><img src="https://img-blog.csdnimg.cn/2020102814514539.png" alt="image-20201027180623297"></p><p><strong>Consistency（一致性）</strong>：数据一致更新，所有数据的变化都是同步的<br><strong>Availability（可用性）</strong>：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求<br><strong>Partition tolerance（分区容忍性）</strong>：某个节点的故障，并不影响整个系统的运行</p><blockquote><p>通过学习CAP理论，我们得知任何分布式系统只可同时满足二点，没法三者兼顾，既然一个分布式系统无法同时满足一致性、可用性、分区容错性三个特点，所以我们就需要抛弃一样：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020102814515750.png" alt="image-20201027180701935"></p><table><thead><tr><th>选择</th><th>说明</th></tr></thead><tbody><tr><td>CA</td><td>放弃分区容错性，加强一致性和可用性，其实就是传统的关系型数据库的选择</td></tr><tr><td>AP</td><td>放弃一致性（这里说的一致性是强一致性），追求分区容错性和可用性，这是很多分布式系统设计时的选择，例如很多NoSQL系统就是如此</td></tr><tr><td>CP</td><td>放弃可用性，追求一致性和分区容错性，基本不会选择，网络问题会直接让整个系统不可用</td></tr></tbody></table><p>需要明确一点的是，在一个分布式系统当中，分区容忍性和可用性是最基本的需求，所以在分布是系统中，我们的系统最当关注的就是A（可用性）P（容忍性），通过补偿的机制寻求数据的一致性</p><p><img src="https://img-blog.csdnimg.cn/20201028145202281.png" alt="image-20201027180941287"></p><h2 id="1-3-常见微服务框架"><a href="#1-3-常见微服务框架" class="headerlink" title="1.3    常见微服务框架"></a>1.3    常见微服务框架</h2><h3 id="1-3-1-SpringCloud"><a href="#1-3-1-SpringCloud" class="headerlink" title="1.3.1    SpringCloud"></a>1.3.1    SpringCloud</h3><p><img src="https://img-blog.csdnimg.cn/20201028145207239.png" alt="image-20201027181119484"></p><p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">Spring Cloud</a>是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h3 id="1-3-2-ServiceComb"><a href="#1-3-2-ServiceComb" class="headerlink" title="1.3.2    ServiceComb"></a>1.3.2    ServiceComb</h3><p><img src="https://img-blog.csdnimg.cn/20201028145213857.png" alt="image-20201027181227178"></p><p><a href="http://servicecomb.apache.org/cn/" target="_blank" rel="noopener">Apache ServiceComb</a> 是业界第一个Apache微服务顶级项目， 是一个开源微服务解决方案,致力于帮助企业、用户和开发者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。其提供一站式开源微服务解决方案，融合SDK框架级、0侵入ServiceMesh场景并支持多语言。</p><h3 id="1-3-3-ZeroC-ICE"><a href="#1-3-3-ZeroC-ICE" class="headerlink" title="1.3.3    ZeroC ICE"></a>1.3.3    ZeroC ICE</h3><p><img src="https://img-blog.csdnimg.cn/20201028145219572.png" alt="image-20201027181317969"></p><p><a href="https://zeroc.com/products/ice" target="_blank" rel="noopener">ZeroC IceGrid</a> 是ZeroC公司的杰作，继承了CORBA的血统，是新一代的面向对象的分布式系统中间件。作为一种微服务架构，它基于RPC框架发展而来，具有良好的性能与分布式能力。</p><h1 id="2-SpringCloud概述"><a href="#2-SpringCloud概述" class="headerlink" title="2.    SpringCloud概述"></a>2.    SpringCloud概述</h1><h2 id="2-1-微服务中的相关概念"><a href="#2-1-微服务中的相关概念" class="headerlink" title="2.1    微服务中的相关概念"></a>2.1    微服务中的相关概念</h2><h3 id="2-1-1-服务注册与发现"><a href="#2-1-1-服务注册与发现" class="headerlink" title="2.1.1    服务注册与发现"></a>2.1.1    服务注册与发现</h3><p><strong>服务注册：</strong>服务实例将自身服务信息注册到注册中心。这部分服务信息包括服务所在主机IP和提供服务的Port，以及暴露服务自身状态以及访问协议等信息。</p><p><strong>服务发现：</strong>服务实例请求注册中心获取所依赖服务信息。服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。</p><p><img src="https://img-blog.csdnimg.cn/20201028145226149.png" alt="image-20201027181438919"></p><h3 id="2-1-2-负载均衡"><a href="#2-1-2-负载均衡" class="headerlink" title="2.1.2    负载均衡"></a>2.1.2    负载均衡</h3><p>负载均衡是高可用网络基础架构的关键组件，通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性。</p><p><img src="https://img-blog.csdnimg.cn/20201028145231706.png" alt="image-20201027181508135"></p><h3 id="2-1-3-熔断"><a href="#2-1-3-熔断" class="headerlink" title="2.1.3    熔断"></a>2.1.3    熔断</h3><p><strong>熔断</strong>这一概念来源于电子工程中的断路器（Circuit Breaker）。在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p><p><img src="https://img-blog.csdnimg.cn/20201028145236907.png" alt="image-20201027181538434"></p><h3 id="2-1-4-链路追踪"><a href="#2-1-4-链路追踪" class="headerlink" title="2.1.4    链路追踪"></a>2.1.4    链路追踪</h3><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪</p><p><img src="https://img-blog.csdnimg.cn/2020102814524335.png" alt="image-20201027181647816"></p><h3 id="2-1-5-API网关"><a href="#2-1-5-API网关" class="headerlink" title="2.1.5    API网关"></a>2.1.5    API网关</h3><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：</p><ul><li>客户端需要调用不同的url地址，增加难度</li><li>再一定的场景下，存在跨域请求的问题</li><li>每个微服务都需要进行单独的身份认证</li></ul><p>针对这些问题，API网关顺势而生。</p><p><strong>API网关</strong>直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后，各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。</p><p><img src="https://img-blog.csdnimg.cn/20201028145249210.png" alt="image-20201027181806291"></p><h2 id="2-2-SpringCloud的介绍"><a href="#2-2-SpringCloud的介绍" class="headerlink" title="2.2    SpringCloud的介绍"></a>2.2    SpringCloud的介绍</h2><p><img src="https://img-blog.csdnimg.cn/20201028145254327.png" alt="image-20201027181838018"></p><p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">Spring Cloud</a>是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如<strong>服务发现注册</strong>、<strong>配置中心</strong>、<strong>消息总线</strong>、<strong>负载均衡</strong>、<strong>断路器</strong>、<strong>数据监控</strong>等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h2 id="2-3-SpringCloud的架构"><a href="#2-3-SpringCloud的架构" class="headerlink" title="2.3    SpringCloud的架构"></a>2.3    SpringCloud的架构</h2><h3 id="2-3-1-SpringCloud中的核心组件"><a href="#2-3-1-SpringCloud中的核心组件" class="headerlink" title="2.3.1    SpringCloud中的核心组件"></a>2.3.1    SpringCloud中的核心组件</h3><p><strong>Spring Cloud</strong>的本质是在 Spring Boot 的基础上，增加了一堆微服务相关的规范，并对应用上下文（Application Context）进行了功能增强。既然 Spring Cloud 是规范，那么就需要去实现，目前Spring Cloud 规范已有 Spring官方，Spring Cloud Netflix，Spring Cloud Alibaba等实现。通过组件化的方式，Spring Cloud将这些实现整合到一起构成全家桶式的微服务技术栈。</p><h4 id="2-3-1-1-Spring-Cloud-Netflix组件"><a href="#2-3-1-1-Spring-Cloud-Netflix组件" class="headerlink" title="2.3.1.1    Spring Cloud Netflix组件"></a>2.3.1.1    Spring Cloud Netflix组件</h4><table><thead><tr><th>组件名称</th><th>作用</th></tr></thead><tbody><tr><td>Eureka</td><td>服务注册中心</td></tr><tr><td>Ribbon</td><td>客户端负载均衡</td></tr><tr><td>Feign</td><td>声明式服务调用</td></tr><tr><td>Hystrix</td><td>客户端容错保护</td></tr><tr><td>Zuul</td><td>API服务网关</td></tr></tbody></table><h4 id="2-3-1-2-Spring-Cloud-Alibaba组件"><a href="#2-3-1-2-Spring-Cloud-Alibaba组件" class="headerlink" title="2.3.1.2    Spring Cloud Alibaba组件"></a>2.3.1.2    Spring Cloud Alibaba组件</h4><table><thead><tr><th>组件名称</th><th>作用</th></tr></thead><tbody><tr><td>Nacos</td><td>服务注册中心</td></tr><tr><td>Sentinel</td><td>客户端容错保护</td></tr></tbody></table><h4 id="2-3-1-3-Spring-Cloud原生及其他组件"><a href="#2-3-1-3-Spring-Cloud原生及其他组件" class="headerlink" title="2.3.1.3    Spring Cloud原生及其他组件"></a>2.3.1.3    Spring Cloud原生及其他组件</h4><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Consul</td><td>服务注册中心</td></tr><tr><td>Config</td><td>分布式配置中心</td></tr><tr><td>Gateway</td><td>API服务网关</td></tr><tr><td>Sleuth/Zipkin</td><td>分布式链路追踪</td></tr></tbody></table><h3 id="2-3-2-SpringCloud的体系结构"><a href="#2-3-2-SpringCloud的体系结构" class="headerlink" title="2.3.2    SpringCloud的体系结构"></a>2.3.2    SpringCloud的体系结构</h3><p><img src="https://img-blog.csdnimg.cn/20201028145259591.png" alt="image-20201027182313703"></p><p>从上图可以看出Spring Cloud各个组件相互配合，合作支持了一套完整的微服务架构。</p><ul><li><strong>注册中心</strong>负责服务的注册与发现，很好将各服务连接起来</li><li><strong>断路器</strong>负责监控服务之间的调用情况，连续多次失败进行熔断保护。</li><li><strong>API网关</strong>负责转发所有对外的请求和服务</li><li><strong>配置中心</strong>提供了统一的配置信息管理服务,可以实时的通知各个服务获取最新的配置信息</li><li><strong>链路追踪技术</strong>可以将所有的请求数据记录下来，方便我们进行后续分析</li><li>各个组件又提供了功能完善的<strong>dashboard监控平台</strong>,可以方便的监控各组件的运行状况</li></ul><h1 id="3-案例搭建"><a href="#3-案例搭建" class="headerlink" title="3.    案例搭建"></a>3.    案例搭建</h1><p>使用微服务架构的分布式系统,微服务之间通过网络通信。我们通过服务提供者与服务消费者来描述微服务间的调用关系。</p><blockquote><p>服务提供者：服务的被调用方，提供调用接口的一方<br>服务消费者：服务的调用方，依赖于其他服务的一方</p></blockquote><p>我们以电商系统中常见的用户下单为例，用户向订单微服务发起一个购买的请求。在进行保存订单之前需要调用商品微服务查询当前商品库存，单价等信息。在这种场景下，订单微服务就是一个服务消费者，商品微服务就是一个服务提供者</p><p><img src="https://img-blog.csdnimg.cn/20201028145305315.png" alt="image-20201027183627253"></p><h2 id="3-1-数据库表"><a href="#3-1-数据库表" class="headerlink" title="3.1    数据库表"></a>3.1    数据库表</h2><p><strong>商品表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;tb_product&#96; (</span><br><span class="line">    &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;product_name&#96; varchar(40) DEFAULT NULL COMMENT &#39;名称&#39;,</span><br><span class="line">    &#96;status&#96; int(2) DEFAULT NULL COMMENT &#39;状态&#39;,</span><br><span class="line">    &#96;price&#96; decimal(10,2) DEFAULT NULL COMMENT &#39;单价&#39;,</span><br><span class="line">    &#96;product_desc&#96; varchar(255) DEFAULT NULL COMMENT &#39;描述&#39;,</span><br><span class="line">    &#96;caption&#96; varchar(255) DEFAULT NULL COMMENT &#39;标题&#39;,</span><br><span class="line">    &#96;inventory&#96; int(11) DEFAULT NULL COMMENT &#39;库存&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><h2 id="3-2-搭建环境"><a href="#3-2-搭建环境" class="headerlink" title="3.2    搭建环境"></a>3.2    搭建环境</h2><h3 id="3-2-1-创建父工程shop-parent"><a href="#3-2-1-创建父工程shop-parent" class="headerlink" title="3.2.1    创建父工程shop_parent"></a>3.2.1    创建父工程shop_parent</h3><p>在IDEA中创建父工程 shop_parent 并引入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-snapshot-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-milestone-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-release-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-snapshot-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-milestone-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-创建微服务工程模块"><a href="#3-2-2-创建微服务工程模块" class="headerlink" title="3.2.2    创建微服务工程模块"></a>3.2.2    创建微服务工程模块</h3><ul><li>创建订单微服务模块 shop_service_order</li><li>创建商品微服务模块 shop_service_product</li></ul><h2 id="3-3-搭建商品微服务"><a href="#3-3-搭建商品微服务" class="headerlink" title="3.3    搭建商品微服务"></a>3.3    搭建商品微服务</h2><h3 id="3-3-1-编写实体类"><a href="#3-3-1-编写实体类" class="headerlink" title="3.3.1    编写实体类"></a>3.3.1    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> String productDesc;</span><br><span class="line">    <span class="keyword">private</span> String caption;</span><br><span class="line">    <span class="keyword">private</span> Integer inventory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用了 lombok简化实体类的开发<br>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率</p></blockquote><h3 id="3-3-2-编写dao接口"><a href="#3-3-2-编写dao接口" class="headerlink" title="3.3.2    编写dao接口"></a>3.3.2    编写dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Product</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-编写service层"><a href="#3-3-3-编写service层" class="headerlink" title="3.3.3    编写service层"></a>3.3.3    编写service层</h3><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Product <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Product product)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Product product)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productDao.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        productDao.save(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        productDao.save(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        productDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-编写web层"><a href="#3-3-4-编写web层" class="headerlink" title="3.3.4    编写web层"></a>3.3.4    编写web层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">""</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestBody Product product)</span> </span>&#123;</span><br><span class="line">        productService.save(product);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"保存成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-5-配置启动类"><a href="#3-3-5-配置启动类" class="headerlink" title="3.3.5    配置启动类"></a>3.3.5    配置启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProductApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-6-配置yml文件"><a href="#3-3-6-配置yml文件" class="headerlink" title="3.3.6    配置yml文件"></a>3.3.6    配置yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-product</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-4-搭建订单微服务"><a href="#3-4-搭建订单微服务" class="headerlink" title="3.4    搭建订单微服务"></a>3.4    搭建订单微服务</h2><h3 id="3-4-1-编写实体类"><a href="#3-4-1-编写实体类" class="headerlink" title="3.4.1    编写实体类"></a>3.4.1    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> String productDesc;</span><br><span class="line">    <span class="keyword">private</span> String caption;</span><br><span class="line">    <span class="keyword">private</span> Integer inventory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-编写web层"><a href="#3-4-2-编写web层" class="headerlink" title="3.4.2    编写web层"></a>3.4.2    编写web层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数:商品id</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *      1.需要配置商品对象</span></span><br><span class="line"><span class="comment">     *      2.需要调用商品服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如何调用商品服务?</span></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-服务调用"><a href="#3-5-服务调用" class="headerlink" title="3.5    服务调用"></a>3.5    服务调用</h2><p>前文已经编写了两个基础的微服务，在用户下单时需要调用商品微服务获取商品数据。那应该怎么做呢？总人皆知商品微服务提供了供人调用的HTTP接口。所以可以再下定单的时候使用http请求的相关工具类完成，如常见的HttpClient，OkHttp，当然也可以使用Spring提供的RestTemplate</p><h3 id="3-5-1-RestTemplate介绍"><a href="#3-5-1-RestTemplate介绍" class="headerlink" title="3.5.1    RestTemplate介绍"></a>3.5.1    RestTemplate介绍</h3><p>Spring框架提供的RestTemplate类可用于在应用中调用rest服务，它简化了与http服务的通信方式，统一了RESTful的标准，封装了http链接， 我们只需要传入url及返回值类型即可。相较于之前常用的HttpClient，RestTemplate是一种更优雅的调用RESTful服务的方式。</p><p>在Spring应用程序中访问第三方REST服务与使用Spring RestTemplate类有关。RestTemplate类的设计原则与许多其他Spring 模板类(例如JdbcTemplate、JmsTemplate)相同，为执行复杂任务提供了一种具有默认行为的简化方法。</p><p>RestTemplate默认依赖JDK提供http连接的能力（HttpURLConnection），如果有需要的话也可以通过setRequestFactory方法替换为例如 Apache HttpComponents、Netty或OkHttp等其它HTTP library。</p><p>考虑到RestTemplate类是为调用REST服务而设计的，因此它的主要方法与REST的基础紧密相连就不足为奇了，后者是HTTP协议的方法:HEAD、GET、POST、PUT、DELETE和OPTIONS。例如，RestTemplate类具有headForHeaders()、getForObject()、postForObject()、put()和delete()等方法。</p><h3 id="3-5-2-RestTemplate方法介绍"><a href="#3-5-2-RestTemplate方法介绍" class="headerlink" title="3.5.2    RestTemplate方法介绍"></a>3.5.2    RestTemplate方法介绍</h3><p><img src="https://img-blog.csdnimg.cn/20201028145313135.png" alt="image-20201027191652471"></p><h3 id="3-5-3-通过RestTemplate调用微服务"><a href="#3-5-3-通过RestTemplate调用微服务" class="headerlink" title="3.5.3    通过RestTemplate调用微服务"></a>3.5.3    通过RestTemplate调用微服务</h3><p>1、在 shop_service_order工程中OrderApplication启动类 中配置RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用spring提供的RestTemplate发送http请求到商品服务</span></span><br><span class="line"><span class="comment">     *      1.创建RestTemplate对象交给容器管理</span></span><br><span class="line"><span class="comment">     *      2.在使用的时候,调用其方法完成操作 (getXX,postxxx)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写下订单方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数:商品id</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *      1.需要配置商品对象</span></span><br><span class="line"><span class="comment">     *      2.需要调用商品服务</span></span><br><span class="line"><span class="comment">     *          使用java中的urlconnection,httpclient,okhttp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如何调用商品服务?</span></span><br><span class="line">        product = restTemplate.getForObject(<span class="string">"http://127.0.0.1:9001/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-硬编码存在的问题"><a href="#3-5-4-硬编码存在的问题" class="headerlink" title="3.5.4    硬编码存在的问题"></a>3.5.4    硬编码存在的问题</h3><p>至此已经可以通过RestTemplate调用商品微服务的RESTFul API接口。但是我们把提供者的网络地址（ip，端口）等硬编码到了代码中，这种做法存在许多问题：</p><ul><li>应用场景有局限</li><li>无法动态调整</li></ul><p>那么应该怎么解决呢，就需要通过注册中心动态的对服务注册和服务发现</p><h1 id="4-服务注册Eureka基础"><a href="#4-服务注册Eureka基础" class="headerlink" title="4.    服务注册Eureka基础"></a>4.    服务注册Eureka基础</h1><h2 id="4-1-微服务的注册中心"><a href="#4-1-微服务的注册中心" class="headerlink" title="4.1    微服务的注册中心"></a>4.1    微服务的注册中心</h2><p>注册中心可以说是微服务架构中的”通讯录“，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就这里找到服务的地址，进行调用。</p><p><img src="https://img-blog.csdnimg.cn/20201028145319153.png" alt="image-20201028111911580"></p><h3 id="4-1-1-注册中心的主要作用"><a href="#4-1-1-注册中心的主要作用" class="headerlink" title="4.1.1    注册中心的主要作用"></a>4.1.1    注册中心的主要作用</h3><p>服务注册中心（下称注册中心）是微服务架构非常重要的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能：</p><ul><li><p>服务发现：</p><ul><li>服务注册/反注册：保存服务提供者和服务调用者的信息</li><li>服务订阅/取消订阅：服务调用者订阅服务提供者的信息，最好有实时推送的功能</li><li>服务路由（可选）：具有筛选整合服务提供者的能力。</li></ul></li><li><p>服务配置：</p><ul><li>配置订阅：服务提供者和服务调用者订阅微服务相关的配置</li><li>配置下发：主动将配置推送给服务提供者和服务调用者</li></ul></li><li><p>服务健康检测</p><ul><li>检测服务提供者的健康情况</li></ul></li></ul><h3 id="4-1-2-常见的注册中心"><a href="#4-1-2-常见的注册中心" class="headerlink" title="4.1.2    常见的注册中心"></a>4.1.2    常见的注册中心</h3><h4 id="4-1-2-1-Zookeeper"><a href="#4-1-2-1-Zookeeper" class="headerlink" title="4.1.2.1    Zookeeper"></a>4.1.2.1    Zookeeper</h4><p>zookeeper它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。简单来说zookeeper=文件系统+监听通知机制。</p><h4 id="4-1-2-2-Eureka"><a href="#4-1-2-2-Eureka" class="headerlink" title="4.1.2.2    Eureka"></a>4.1.2.2    Eureka</h4><p>Eureka是在Java语言上，基于Restful Api开发的服务注册与发现组件，Springcloud Netflix中的重要组件</p><h4 id="4-1-2-3-Consul"><a href="#4-1-2-3-Consul" class="headerlink" title="4.1.2.3    Consul"></a>4.1.2.3    Consul</h4><p>Consul是由HashiCorp基于Go语言开发的支持多数据中心分布式高可用的服务发布和注册服务软件，采用Raft算法保证服务的一致性，且支持健康检查。</p><h4 id="4-1-2-4-Nacos"><a href="#4-1-2-4-Nacos" class="headerlink" title="4.1.2.4    Nacos"></a>4.1.2.4    Nacos</h4><p>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。简单来说 Nacos 就是注册中心 + 配置中心的组合，提供简单易用的特性集，帮助我们解决微服务开发必会涉及到的服务注册与发现，服务配置，服务管理等问题。Nacos 还是 Spring Cloud Alibaba 组件之一，负责服务注册与发现。</p><p>最后我们通过一张表格大致了解Eureka、Consul、Zookeeper的异同点。选择什么类型的服务注册与发现组件可以根据自身项目要求决定。</p><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>一致性算法</th><th>服务健康检查</th><th>对外暴露接口</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>无</td><td>可配支持</td><td>HTTP</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>Raft</td><td>支持</td><td>HTTP/DNS</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>Paxos</td><td>支持</td><td>客户端</td></tr><tr><td>Nacos</td><td>Java</td><td>AP</td><td>Raft</td><td>支持</td><td>HTTP</td></tr></tbody></table><h2 id="4-2-Eureka的概述"><a href="#4-2-Eureka的概述" class="headerlink" title="4.2    Eureka的概述"></a>4.2    Eureka的概述</h2><h3 id="4-2-1-Eureka的基础知识"><a href="#4-2-1-Eureka的基础知识" class="headerlink" title="4.2.1    Eureka的基础知识"></a>4.2.1    Eureka的基础知识</h3><p>Eureka是Netflix开发的服务发现框架，SpringCloud将它集成在自己的子项目spring-cloud-netflix中，实现SpringCloud的服务发现功能。</p><p><img src="https://img-blog.csdnimg.cn/20201028145324583.png" alt="image-20201028112618238"></p><p>上图简要描述了Eureka的基本架构，由3个角色组成：</p><ul><li>Eureka Server<ul><li>提供服务注册和发现</li></ul></li><li>Service Provider<ul><li>服务提供方</li><li>将自身服务注册到Eureka，从而使服务消费方能够找到</li></ul></li><li>Service Consumer<ul><li>服务消费方</li><li>从Eureka获取注册服务列表，从而能够消费服务</li></ul></li></ul><h3 id="4-2-2-Eureka的交互流程与原理"><a href="#4-2-2-Eureka的交互流程与原理" class="headerlink" title="4.2.2    Eureka的交互流程与原理"></a>4.2.2    Eureka的交互流程与原理</h3><p><img src="https://img-blog.csdnimg.cn/20201028145331327.png" alt="image-20201028114453143"></p><p>图是来自Eureka官方的架构图，大致描述了Eureka集群的工作过程。图中包含的组件非常多，可能比较难以理解，我们用通俗易懂的语言解释一下：</p><ul><li>Application Service 相当于本书中的服务提供者，Application Client相当于服务消费者；</li><li>Make Remote Call，可以简单理解为调用RESTful API；</li><li>us-east-1c、us-east-1d等都是zone，它们都属于us-east-1这个region；</li></ul><p><strong>由图可知，Eureka包含两个组件：Eureka Server 和 Eureka Client，它们的作用如下</strong>：</p><ul><li>Eureka Client是一个Java客户端，用于简化与Eureka Server的交互；</li><li>Eureka Server提供服务发现的能力，各个微服务启动时，会通过Eureka Client向Eureka Server进行注册自己的信息（例如网络信息），Eureka Server会存储该服务的信息；</li><li>微服务启动后，会周期性地向Eureka Server发送心跳（默认周期为30秒）以续约自己的信息。如果Eureka Server在一定时间内没有接收到某个微服务节点的心跳，Eureka Server将会注销该微服务节点（默认90秒）；</li><li>每个Eureka Server同时也是Eureka Client，多个Eureka Server之间通过复制的方式完成服务注册表的同步；</li><li>Eureka Client会缓存Eureka Server中的信息。即使所有的Eureka Server节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者。</li></ul><p>综上，Eureka通过心跳检测、健康检查和客户端缓存等机制，提高了系统的灵活性、可伸缩性和可用性。</p><p><img src="https://img-blog.csdnimg.cn/20201028145339758.png" alt="image-20201028114706456"></p><h2 id="4-3-搭建Eureka注册中心"><a href="#4-3-搭建Eureka注册中心" class="headerlink" title="4.3    搭建Eureka注册中心"></a>4.3    搭建Eureka注册中心</h2><h3 id="4-3-1-搭建Eureka服务中心"><a href="#4-3-1-搭建Eureka服务中心" class="headerlink" title="4.3.1    搭建Eureka服务中心"></a>4.3.1    搭建Eureka服务中心</h3><h4 id="4-3-1-1-引入maven坐标"><a href="#4-3-1-1-引入maven坐标" class="headerlink" title="4.3.1.1    引入maven坐标"></a>4.3.1.1    引入maven坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-1-2-配置application-yml"><a href="#4-3-1-2-配置application-yml" class="headerlink" title="4.3.1.2    配置application.yml"></a>4.3.1.2    配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span> <span class="comment">#端口</span></span><br><span class="line"><span class="comment">#配置eureka server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#是否从eureka中获取注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#配置暴露给Eureka Client的请求地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="4-3-1-3-配置启动类"><a href="#4-3-1-3-配置启动类" class="headerlink" title="4.3.1.3    配置启动类"></a>4.3.1.3    配置启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活eureakaserver</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-服务注册中心管理后台"><a href="#4-3-2-服务注册中心管理后台" class="headerlink" title="4.3.2    服务注册中心管理后台"></a>4.3.2    服务注册中心管理后台</h3><p>打开浏览器访问 <a href="http://localhost:9000即可进入EurekaServer内置的管理控制台,显示效果如下">http://localhost:9000即可进入EurekaServer内置的管理控制台,显示效果如下</a></p><p><img src="https://img-blog.csdnimg.cn/20201028145345950.png" alt="image-20201028115228061"></p><h2 id="4-4-服务注册到Eureka注册中心"><a href="#4-4-服务注册到Eureka注册中心" class="headerlink" title="4.4    服务注册到Eureka注册中心"></a>4.4    服务注册到Eureka注册中心</h2><h3 id="4-4-1-商品服务注册"><a href="#4-4-1-商品服务注册" class="headerlink" title="4.4.1    商品服务注册"></a>4.4.1    商品服务注册</h3><h4 id="4-4-1-1-引入maven坐标"><a href="#4-4-1-1-引入maven坐标" class="headerlink" title="4.4.1.1    引入maven坐标"></a>4.4.1.1    引入maven坐标</h4><p>pom文件中添加eureka client的相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入EurekaClient--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-2-配置application-yml文件"><a href="#4-4-1-2-配置application-yml文件" class="headerlink" title="4.4.1.2    配置application.yml文件"></a>4.4.1.2    配置application.yml文件</h4><p>添加Eureka Server的主机地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-product</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-3-启动类添加服务注册注解"><a href="#4-4-1-3-启动类添加服务注册注解" class="headerlink" title="4.4.1.3    启动类添加服务注册注解"></a>4.4.1.3    启动类添加服务注册注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活eurekaClient</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProductApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从Spring Cloud Edgware版本开始， @EnableDiscoveryClient 或 @EnableEurekaClient 可省略。只需加上相关依赖，并进行相应配置，即可将微服务注册到服务发现组件上。</p></blockquote><h3 id="4-4-2-订单服务注册"><a href="#4-4-2-订单服务注册" class="headerlink" title="4.4.2    订单服务注册"></a>4.4.2    订单服务注册</h3><h4 id="4-4-2-1-引入maven坐标"><a href="#4-4-2-1-引入maven坐标" class="headerlink" title="4.4.2.1    引入maven坐标"></a>4.4.2.1    引入maven坐标</h4><p>pom文件中添加eureka client的相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入EurekaClient--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-2-配置application-yml文件"><a href="#4-4-2-2-配置application-yml文件" class="headerlink" title="4.4.2.2    配置application.yml文件"></a>4.4.2.2    配置application.yml文件</h4><p>添加Eureka Server的主机地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-order</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br></pre></td></tr></table></figure><h2 id="4-5-Eureka中的自我保护"><a href="#4-5-Eureka中的自我保护" class="headerlink" title="4.5    Eureka中的自我保护"></a>4.5    Eureka中的自我保护</h2><p>微服务第一次注册成功之后，每30秒会发送一次心跳将服务的实例信息注册到注册中心。通知 Eureka Server 该实例仍然存在。如果超过90秒没有发送更新，则服务器将从注册信息中将此服务移除。</p><p>Eureka Server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%，如果出现低于的情况（在单机调试的时候很容易满足，实际在生产环境上通常是由于网络不稳定导致），Eureka Server会将当前的实例注册信息保护起来，同时提示这个警告。保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）</p><p>验证完自我保护机制开启后，并不会马上呈现到web上，而是默认需等待 5 分钟（可以通过eureka.server.wait-time-in-ms-when-sync-empty 配置），即 5 分钟后你会看到下面的提示信息：</p><p><img src="https://img-blog.csdnimg.cn/20201028145353454.png" alt="image-20201028121150330"></p><p><strong>如果关闭自我保护</strong></p><p>通过设置 eureka.enableSelfPreservation=false 来关闭自我保护功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置eureka server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#是否从eureka中获取注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#配置暴露给Eureka Client的请求地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭自我保护</span></span><br></pre></td></tr></table></figure><h2 id="4-6-Eureka中的元数据"><a href="#4-6-Eureka中的元数据" class="headerlink" title="4.6    Eureka中的元数据"></a>4.6    Eureka中的元数据</h2><p>Eureka的元数据有两种：标准元数据和自定义元数据。</p><ul><li>标准元数据：主机名、IP地址、端口号、状态页和健康检查等信息，这些信息都会被发布在服务注册表中，用于服务之间的调用。</li><li>自定义元数据：可以使用eureka.instance.metadata-map配置，符合KEY/VALUE的存储格式。这些元数据可以在远程客户端中访问。</li></ul><p>在程序中可以使用DiscoveryClient 获取指定微服务的所有元数据信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入DiscoveryClient :</span></span><br><span class="line"><span class="comment">     *      springCloud提供的获取原数组的工具类</span></span><br><span class="line"><span class="comment">     *      调用方法获取服务的元数据信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数:商品id</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *      1.需要配置商品对象</span></span><br><span class="line"><span class="comment">     *      2.需要调用商品服务</span></span><br><span class="line"><span class="comment">     *          使用java中的urlconnection,httpclient,okhttp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用discoveryClient方法</span></span><br><span class="line">        <span class="comment">//以调用服务名称获取所有的元数据</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"service-product"</span>);</span><br><span class="line">        <span class="comment">//获取唯一的一个元数据</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//根据元数据中的主机地址和端口号拼接请求微服务的URL</span></span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如何调用商品服务?</span></span><br><span class="line">        product = restTemplate.getForObject(<span class="string">"http://"</span> + instance.getHost() + <span class="string">":"</span> + instance.getPort() + <span class="string">"/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-服务注册Eureka高级"><a href="#5-服务注册Eureka高级" class="headerlink" title="5.    服务注册Eureka高级"></a>5.    服务注册Eureka高级</h1><h2 id="5-1-Eureka-Server-高可用集群"><a href="#5-1-Eureka-Server-高可用集群" class="headerlink" title="5.1    Eureka Server 高可用集群"></a>5.1    Eureka Server 高可用集群</h2><p>在上一个章节，实现了单节点的Eureka Server的服务注册与服务发现功能。Eureka Client会定时连接Eureka Server，获取注册表中的信息并缓存到本地。微服务在消费远程API时总是使用本地缓存中的数据。因此一般来说，即使Eureka Server发生宕机，也不会影响到服务之间的调用。但如果Eureka Server宕机时，某些微服务也出现了不可用的情况，Eureka Server中的缓存若不被刷新，就可能会影响到微服务的调用，甚至影响到整个应用系统的高可用。因此，在生成环境中，通常会部署一个高可用的Eureka Server集群。</p><p>Eureka Server可以通过运行多个实例并相互注册的方式实现高可用部署，Eureka Server实例会彼此增量地同步信息，从而确保所有节点数据一致。事实上，节点之间相互注册是Eureka Server的默认行为。</p><p><img src="https://img-blog.csdnimg.cn/20201028145406460.png" alt="image-20201028121623782"></p><h3 id="5-1-1-搭建-Eureka-Server高可用集群"><a href="#5-1-1-搭建-Eureka-Server高可用集群" class="headerlink" title="5.1.1    搭建 Eureka Server高可用集群"></a>5.1.1    搭建 Eureka Server高可用集群</h3><h4 id="5-1-1-1-修改yml配置文件"><a href="#5-1-1-1-修改yml配置文件" class="headerlink" title="5.1.1.1    修改yml配置文件"></a>5.1.1.1    修改yml配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#执行peer1的配置信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">eureka1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#执行peer2的配置信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">eureka2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>在配置文件中通过连字符（—）将文件分为三个部分，第一部分为应用名称，第二部分和第三部分是根据不同的profiles选项动态添加，可以在IDEA启动时进行激活配置</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201028145419990.png" alt="image-20201028122113070"></p><p>使用IDEA启动历次EurekaServerApplicaion分别激活eureka1和eureka2配置。访问<a href="http://localhost:9000和http://localhost:8000/。会发现注册中心">http://localhost:9000和http://localhost:8000/。会发现注册中心</a> EUREKA-SERVER 已经有两个节点，并且registered-replicas (相邻集群复制节点)中已经包含对方。</p><h3 id="5-1-2-服务注册到Eureka-Server集群"><a href="#5-1-2-服务注册到Eureka-Server集群" class="headerlink" title="5.1.2    服务注册到Eureka Server集群"></a>5.1.2    服务注册到Eureka Server集群</h3><p>如果需要将微服务注册到Eureka Server集群只需要修改yml配置文件即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">        <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/,http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="5-2-Eureka中的常见问题"><a href="#5-2-Eureka中的常见问题" class="headerlink" title="5.2    Eureka中的常见问题"></a>5.2    Eureka中的常见问题</h2><h3 id="5-2-1-服务注册慢"><a href="#5-2-1-服务注册慢" class="headerlink" title="5.2.1    服务注册慢"></a>5.2.1    服务注册慢</h3><p>默认情况下，服务注册到Eureka Server的过程较慢。SpringCloud官方文档中给出了详细的原因</p><p><img src="https://img-blog.csdnimg.cn/20201028145426390.png" alt="image-20201028122621641"></p><p>大致含义：服务的注册涉及到心跳，默认心跳间隔为30s。在实例、服务器、客户端都在本地缓存中具有相同的元数据之前，服务不可用于客户端发现（所以可能需要3次心跳）。可以通过配置eureka.instance.leaseRenewalIntervalInSeconds (心跳频率)加快客户端连接到其他服务的过程。在生产中，最好坚持使用默认值，因为在服务器内部有一些计算，他们对续约做出假设。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment">#发送心跳续约间隔</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-服务节点剔除问题"><a href="#5-2-2-服务节点剔除问题" class="headerlink" title="5.2.2    服务节点剔除问题"></a>5.2.2    服务节点剔除问题</h3><p>默认情况下，由于Eureka Server剔除失效服务间隔时间为90s且存在自我保护的机制。所以不能有效而迅速的剔除失效节点，这对开发或测试会造成困扰。解决方案如下：</p><p><strong>Eureka Server：</strong></p><p>配置关闭自我保护，设置剔除无效节点的时间间隔</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置eureka server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#是否从eureka中获取注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#配置暴露给Eureka Client的请求地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭自我保护</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">4000</span> <span class="comment">#剔除时间间隔,单位:毫秒</span></span><br></pre></td></tr></table></figure><p><strong>Eureka Client：</strong></p><p>配置开启健康检查，并设置续约时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment">#发送心跳续约间隔</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment">#eureka client发送心跳给server端后，续约到期时间（默认90秒）</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-监控页面显示ip"><a href="#5-2-3-监控页面显示ip" class="headerlink" title="5.2.3    监控页面显示ip"></a>5.2.3    监控页面显示ip</h3><p>在Eureka Server的管控台中，显示的服务实例名称默认情况下是微服务定义的名称和端口。为了更好的对所有服务进行定位，微服务注册到Eureka Server的时候可以手动配置示例ID。配置方式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="comment">#向注册中心中注册服务id </span></span><br><span class="line">    <span class="comment">#spring.cloud.client.ip-address:获取ip地址</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><h1 id="6-Eureka替换方案Consul"><a href="#6-Eureka替换方案Consul" class="headerlink" title="6.    Eureka替换方案Consul"></a>6.    Eureka替换方案Consul</h1><h2 id="6-1-Eureka闭源的影响"><a href="#6-1-Eureka闭源的影响" class="headerlink" title="6.1    Eureka闭源的影响"></a>6.1    Eureka闭源的影响</h2><h3 id="6-1-1-Eureka闭源影响"><a href="#6-1-1-Eureka闭源影响" class="headerlink" title="6.1.1    Eureka闭源影响"></a>6.1.1    Eureka闭源影响</h3><p><img src="https://img-blog.csdnimg.cn/20201028145434537.png" alt="image-20201028124721663"></p><p>在Euraka的GitHub上，宣布Eureka 2.x闭源。近这意味着如果开发者继续使用作为 2.x 分支上现有工作repo 一部分发布的代码库和工件，则将自负风险。</p><h3 id="6-1-2-Eureka的替换方案"><a href="#6-1-2-Eureka的替换方案" class="headerlink" title="6.1.2    Eureka的替换方案"></a>6.1.2    Eureka的替换方案</h3><h4 id="6-1-2-1-Zookeeper"><a href="#6-1-2-1-Zookeeper" class="headerlink" title="6.1.2.1    Zookeeper"></a>6.1.2.1    Zookeeper</h4><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><h4 id="6-1-2-2-Consul"><a href="#6-1-2-2-Consul" class="headerlink" title="6.1.2.2    Consul"></a>6.1.2.2    Consul</h4><p>consul是近几年比较流行的服务发现工具，工作中用到，简单了解一下。consul的三个主要应用场景：服务发现、服务隔离、服务配置</p><h4 id="6-1-2-3-Nacos"><a href="#6-1-2-3-Nacos" class="headerlink" title="6.1.2.3    Nacos"></a>6.1.2.3    Nacos</h4><p>Nacos 是阿里巴巴推出来的一个新开源项目，这是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><h2 id="6-2-什么是consul"><a href="#6-2-什么是consul" class="headerlink" title="6.2    什么是consul"></a>6.2    什么是consul</h2><h3 id="6-2-1-consul-概述"><a href="#6-2-1-consul-概述" class="headerlink" title="6.2.1    consul 概述"></a>6.2.1    consul 概述</h3><p><img src="https://img-blog.csdnimg.cn/20201028145440595.png" alt="image-20201028124917039"></p><p>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具（比如 ZooKeeper 等）。使用起来也较 为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。</p><p><strong>Consul 的优势：</strong></p><ul><li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是Paxos, 而 etcd 使用的则是 Raft。</li><li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等。 zookeeper 和 etcd 均不提供多数据中心功能的支持。</li><li>支持健康检查。 etcd 不提供此功能。</li><li>支持 http 和 dns 协议接口。 zookeeper 的集成较为复杂, etcd 只支持 http 协议。</li><li>官方提供 web 管理界面, etcd 无此功能。</li><li>综合比较, Consul 作为服务注册和配置管理的新星, 比较值得关注和研究。</li></ul><p><strong>特性：</strong></p><ul><li>服务发现</li><li>健康检查</li><li>Key/Value 存储</li><li>多数据中心</li></ul><h3 id="6-2-2-consul与Eureka的区别"><a href="#6-2-2-consul与Eureka的区别" class="headerlink" title="6.2.2    consul与Eureka的区别"></a>6.2.2    consul与Eureka的区别</h3><h4 id="6-2-2-1-一致性"><a href="#6-2-2-1-一致性" class="headerlink" title="6.2.2.1    一致性"></a>6.2.2.1    一致性</h4><p>Consul强一致性（CP）</p><ul><li>服务注册相比Eureka会稍慢一些。因为Consul的raft协议要求必须过半数的节点都写入成功才认为注册成功</li><li>Leader挂掉时，重新选举期间整个consul不可用。保证了强一致性但牺牲了可用性。</li></ul><p>Eureka保证高可用和最终一致性（AP）</p><ul><li>服务注册相对要快，因为不需要等注册信息replicate到其他节点，也不保证注册信息是否replicate成功</li><li>当数据出现不一致时，虽然A, B上的注册信息不完全相同，但每个Eureka节点依然能够正常对外提供服务，这会出现查询服务信息时如果请求A查不到，但请求B就能查到。如此保证了可用性但牺牲了一致性。</li></ul><h4 id="6-2-2-2-开发语言和使用"><a href="#6-2-2-2-开发语言和使用" class="headerlink" title="6.2.2.2    开发语言和使用"></a>6.2.2.2    开发语言和使用</h4><p>eureka就是个servlet程序，跑在servlet容器中</p><p>Consul则是go编写而成，安装启动即可</p><h3 id="6-2-3-consul的下载与安装"><a href="#6-2-3-consul的下载与安装" class="headerlink" title="6.2.3    consul的下载与安装"></a>6.2.3    consul的下载与安装</h3><p>Consul 不同于 Eureka 需要单独安装，访问 <a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">Consul 官网</a>下载 Consul 的最新版本，我这里是consul1.5x。根据不同的系统类型选择不同的安装包，从下图也可以看出 Consul 支持所有主流系统。</p><p><img src="https://img-blog.csdnimg.cn/20201028145445897.png" alt="image-20201028125500868"></p><p><strong>在linux虚拟中下载consul服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 从官网下载最新版本的Consul服务</span></span><br><span class="line">wget https://releases.hashicorp.com/consul/1.5.3/consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##使用unzip命令解压</span></span><br><span class="line">unzip consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##将解压好的consul可执行命令拷贝到/usr/local/bin目录下</span></span><br><span class="line">cp consul /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment">##测试一下</span></span><br><span class="line">consul</span><br></pre></td></tr></table></figure><p><strong>启动consul服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##已开发者模式快速启动，-client指定客户端可以访问的ip地址</span></span><br><span class="line">consul agent -dev -client=0.0.0.0</span><br></pre></td></tr></table></figure><p>启动成功之后访问： <a href="http://IP:8500" target="_blank" rel="noopener">http://IP:8500</a> ，可以看到 Consul 的管理界面</p><p><img src="https://img-blog.csdnimg.cn/20201028145451879.png" alt="image-20201028125618926"></p><h2 id="6-3-consul的基本使用"><a href="#6-3-consul的基本使用" class="headerlink" title="6.3    consul的基本使用"></a>6.3    consul的基本使用</h2><p>Consul 支持健康检查,并提供了 HTTP 和 DNS 调用的API接口完成服务注册，服务发现，以及K/V存储这些功能。接下来通过发送HTTP请求的形式来了解一下Consul</p><h3 id="6-3-1-服务注册与发现"><a href="#6-3-1-服务注册与发现" class="headerlink" title="6.3.1    服务注册与发现"></a>6.3.1    服务注册与发现</h3><h4 id="6-3-1-1-注册服务"><a href="#6-3-1-1-注册服务" class="headerlink" title="6.3.1.1    注册服务"></a>6.3.1.1    注册服务</h4><p>通过postman发送put请求到 <a href="http://192.168.142.128:8500/v1/catalog/register地址可以完成服务注册" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/register地址可以完成服务注册</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line">    <span class="attr">"Node"</span>: <span class="string">"node01"</span>,</span><br><span class="line">    <span class="attr">"Address"</span>: <span class="string">"192.168.142.128"</span>,</span><br><span class="line">    <span class="attr">"Service"</span>: &#123;</span><br><span class="line">        <span class="attr">"ID"</span>:<span class="string">"mysql-01"</span>,</span><br><span class="line">        <span class="attr">"Service"</span>: <span class="string">"mysql"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: [<span class="string">"master"</span>,<span class="string">"v1"</span>],</span><br><span class="line">        <span class="attr">"Address"</span>: <span class="string">"192.168.142.128"</span>,</span><br><span class="line">        <span class="attr">"Port"</span>: <span class="number">3306</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-1-2-服务查询"><a href="#6-3-1-2-服务查询" class="headerlink" title="6.3.1.2    服务查询"></a>6.3.1.2    服务查询</h4><p>通过postman发送get请求到<a href="http://192.168.142.128:8500/v1/catalog/services查看所有的服务列表" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/services查看所有的服务列表</a></p><p>通过postman发送get请求到<a href="http://192.168.142.128:8500/v1/catalog/service/服务名" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/service/服务名</a> 查看具体的服务详情</p><h4 id="6-3-1-3-服务删除"><a href="#6-3-1-3-服务删除" class="headerlink" title="6.3.1.3    服务删除"></a>6.3.1.3    服务删除</h4><p>通过postman发送put请求到<a href="http://192.168.142.128:8500/v1/catalog/deregister删除服务" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/deregister删除服务</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line">    <span class="attr">"Node"</span>: <span class="string">"node01"</span>,</span><br><span class="line">    <span class="attr">"ServiceID"</span>: <span class="string">"mysql-01"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-Consul的KV存储"><a href="#6-3-2-Consul的KV存储" class="headerlink" title="6.3.2    Consul的KV存储"></a>6.3.2    Consul的KV存储</h3><p>可以参照Consul提供的KV存储的 API完成基于Consul的数据存储</p><table><thead><tr><th>含义</th><th>请求路径</th><th>请求方式</th></tr></thead><tbody><tr><td>查看key</td><td>v1/kv/:key</td><td>GET</td></tr><tr><td>保存或更新</td><td>v1/kv/:key</td><td>put</td></tr><tr><td>删除</td><td>/v1/kv/:key</td><td>DELETE</td></tr></tbody></table><ul><li>key值中可以带/, 可以看做是不同的目录结构。</li><li>value的值经过了base64_encode,获取到数据后base64_decode才能获取到原始值。数据不能大于512Kb</li><li>不同数据中心的kv存储系统是独立的，使用dc=?参数指定。</li></ul><h2 id="6-4-基于consul的服务注册"><a href="#6-4-基于consul的服务注册" class="headerlink" title="6.4    基于consul的服务注册"></a>6.4    基于consul的服务注册</h2><h3 id="6-4-1-案例准备"><a href="#6-4-1-案例准备" class="headerlink" title="6.4.1    案例准备"></a>6.4.1    案例准备</h3><p>拷贝一份新的工程，起名为 shop_consul_parent ，并导入相关的子模块</p><h4 id="6-4-1-1-修改pom文件"><a href="#6-4-1-1-修改pom文件" class="headerlink" title="6.4.1.1    修改pom文件"></a>6.4.1.1    修改pom文件</h4><p>修改每个微服务的pom文件，添加SpringCloud提供的基于Consul的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springcloud 提供的对基于consul的服务发现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--actuator的健康检查--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-2-配置服务注册"><a href="#6-4-2-配置服务注册" class="headerlink" title="6.4.2    配置服务注册"></a>6.4.2    配置服务注册</h3><p>修改每个微服务的application.yml配置文件，添加consul服务发现的相关配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="string">...省略</span></span><br><span class="line">  <span class="comment">###开始配置consul的服务注册</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span> <span class="comment">#consul服务器的主机地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span> <span class="comment">#consul服务器的ip地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#是否需要注册</span></span><br><span class="line">        <span class="attr">register:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#注册的实例ID (唯一标志,推荐必填)</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;-1</span></span><br><span class="line">        <span class="comment">#服务的名称</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="comment">#服务的请求端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">$&#123;server.port&#125;</span></span><br><span class="line">        <span class="comment">#健康检查路径</span></span><br><span class="line">        <span class="attr">healthCheckPath:</span> <span class="string">/actuator/health</span></span><br><span class="line">        <span class="comment">#健康检查时间间隔</span></span><br><span class="line">        <span class="attr">healthCheckInterval:</span> <span class="string">15s</span></span><br><span class="line">        <span class="comment">#指定开启ip地址注册</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#当前服务的请求ip</span></span><br><span class="line">        <span class="attr">ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-5-基于consul的服务发现"><a href="#6-5-基于consul的服务发现" class="headerlink" title="6.5    基于consul的服务发现"></a>6.5    基于consul的服务发现</h2><p>由于SpringCloud对Consul进行了封装。对于在消费者端获取服务提供者信息和Eureka是一致的。同样使用 DiscoveryClient 完成调用获取微服务实例信息</p><h2 id="6-6-consul高可用集群"><a href="#6-6-consul高可用集群" class="headerlink" title="6.6    consul高可用集群"></a>6.6    consul高可用集群</h2><p><img src="https://img-blog.csdnimg.cn/2020102814545739.png" alt="image-20201028134442435"></p><p>此图是官网提供的一个事例系统图，图中的Server是consul服务端高可用集群，Client是consul客户端。consul客户端不保存数据，客户端将接收到的请求转发给响应的Server端。Server之间通过局域网或广域网通信实现数据一致性。每个Server或Client都是一个consul agent。Consul集群间使用了GOSSIP协议通信和raft一致性算法。</p><p><img src="https://img-blog.csdnimg.cn/20201028145505802.png" alt="image-20201028134527181"></p><h3 id="6-6-1-Consul的核心知识"><a href="#6-6-1-Consul的核心知识" class="headerlink" title="6.6.1    Consul的核心知识"></a>6.6.1    Consul的核心知识</h3><h4 id="6-6-1-1-Gossip协议"><a href="#6-6-1-1-Gossip协议" class="headerlink" title="6.6.1.1    Gossip协议"></a>6.6.1.1    Gossip协议</h4><p>传统的监控，如ceilometer，由于每个节点都会向server报告状态，随着节点数量的增加server的压力随之增大。在所有的Agent之间（包括服务器模式和普通模式）运行着Gossip协议。服务器节点和普通Agent都会加入这个Gossip集群，收发Gossip消息。每隔一段时间，每个节点都会随机选择几个节点发送Gossip消息，其他节点会再次随机选择其他几个节点接力发送消息。这样一段时间过后，整个集群都能收到这条消息。示意图如下。</p><p><img src="https://img-blog.csdnimg.cn/20201028145511727.png" alt="image-20201028134651051"></p><h4 id="6-6-1-2-RAFT一致性算法"><a href="#6-6-1-2-RAFT一致性算法" class="headerlink" title="6.6.1.2    RAFT一致性算法"></a>6.6.1.2    RAFT一致性算法</h4><p><img src="https://img-blog.csdnimg.cn/20201028145517629.png" alt="image-20201028134705811"></p><h3 id="6-6-2-Consul-集群搭建"><a href="#6-6-2-Consul-集群搭建" class="headerlink" title="6.6.2    Consul 集群搭建"></a>6.6.2    Consul 集群搭建</h3><p><img src="https://img-blog.csdnimg.cn/20201028145523319.png" alt="image-20201028134824996"></p><p>首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server。（这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定）</p><p>服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。（一般微服务和Client绑定）在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回</p><h4 id="6-6-2-1-准备环境"><a href="#6-6-2-1-准备环境" class="headerlink" title="6.6.2.1    准备环境"></a>6.6.2.1    准备环境</h4><table><thead><tr><th>服务器ip</th><th>consul类型</th><th>Node（节点名称）</th><th>序号</th></tr></thead><tbody><tr><td>192.168.74.101</td><td>server</td><td>server-1</td><td>s1</td></tr><tr><td>192.168.74.102</td><td>server</td><td>server-2</td><td>s2</td></tr><tr><td>192.168.74.103</td><td>server</td><td>server-3</td><td>s3</td></tr><tr><td>192.168.71.1</td><td>client</td><td>clent-1</td><td>s4</td></tr></tbody></table><ul><li>Agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。Client模式节点有无数个，官方建议搭配微服务配置</li><li>Agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。</li></ul><h4 id="6-6-2-2-安装consul并启动"><a href="#6-6-2-2-安装consul并启动" class="headerlink" title="6.6.2.2    安装consul并启动"></a>6.6.2.2    安装consul并启动</h4><ul><li>在每个consul节点上安装consul服务，下载安装过程和单节点一致。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##从官网下载最新版本的Consul服务</span></span><br><span class="line">wget https://releases.hashicorp.com/consul/1.5.3/consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##使用unzip命令解压</span></span><br><span class="line">unzip consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##将解压好的consul可执行命令拷贝到/usr/local/bin目录下</span></span><br><span class="line">cp consul /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment">##测试一下</span></span><br><span class="line">consul</span><br></pre></td></tr></table></figure><ul><li>启动每个consul server节点</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#登录s1虚拟机，以server形式运行</span></span></span><br><span class="line">consul agent -server -bootstrap-expect 3 -data-dir /etc/consul.d -node=server-1 -bind=192.168.74.101 -ui -client 0.0.0.0 &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#登录s2 虚拟机，以server形式运行</span></span></span><br><span class="line">consul agent -server -bootstrap-expect 2 -data-dir /etc/consul.d -node=server-2 -bind=192.168.74.102 -ui -client 0.0.0.0 &amp; </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#登录s3 虚拟机，以server形式运行</span></span></span><br><span class="line">consul agent -server -bootstrap-expect 2 -data-dir /etc/consul.d -node=server-3 -bind=192.168.74.103 -ui -client 0.0.0.0 &amp;</span><br></pre></td></tr></table></figure><blockquote><p><strong>-server</strong>： 以server身份启动。</p><p><strong>-bootstrap-expect</strong>：集群要求的最少server数量，当低于这个数量，集群即失效。</p><p><strong>-data-dir</strong>：data存放的目录，更多信息请参阅consul数据同步机制</p><p><strong>-node</strong>：节点id，在同一集群不能重复。</p><p><strong>-bind</strong>：监听的ip地址。</p><p><strong>-client</strong>：客户端的ip地址(0.0.0.0表示不限制)</p><p><strong>&amp;</strong> ：在后台运行，此为linux脚本语法 </p></blockquote><p>至此三个Consul Server模式服务全部启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##在本地电脑中使用client形式启动consul</span></span><br><span class="line">consul agent -client=0.0.0.0 -data-dir /etc/consul.d -node=client-1</span><br></pre></td></tr></table></figure><p><strong>（3） 每个节点加入集群</strong></p><p>在s2，s3，s4 服务其上通过consul join 命令加入 s1中的consul集群中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##加入consul集群</span></span><br><span class="line">consul join 192.168.74.101</span><br></pre></td></tr></table></figure><p><strong>（4） 测试</strong></p><p>在任意一台服务器中输入 consul members查看集群中的所有节点信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##查看consul集群节点信息</span></span><br><span class="line">consul members</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201028145528737.png" alt="image-20201028140112517"></p><p><img src="https://img-blog.csdnimg.cn/20201028145534599.png" alt="image-20201028140118411"></p><h3 id="6-6-3-Consul-常见问题"><a href="#6-6-3-Consul-常见问题" class="headerlink" title="6.6.3    Consul 常见问题"></a>6.6.3    Consul 常见问题</h3><h4 id="6-6-3-1-节点和服务注销"><a href="#6-6-3-1-节点和服务注销" class="headerlink" title="6.6.3.1    节点和服务注销"></a>6.6.3.1    节点和服务注销</h4><p>当服务或者节点失效，Consul不会对注册的信息进行剔除处理，仅仅标记已状态进行标记（并且不可使用）。如果担心失效节点和失效服务过多影响监控。可以通过调用HTTP API的形式进行处理节点和服务的注销可以使用HTTP API:</p><ul><li>注销任意节点和服务：/catalog/deregister</li><li>注销当前节点的服务：/agent/service/deregister/:service_id</li></ul><p>如果某个节点不继续使用了，也可以在本机使用consul leave命令，或者在其它节点使用consul force-leave 节点Id。</p><h4 id="6-6-3-2-健康检查与故障转移"><a href="#6-6-3-2-健康检查与故障转移" class="headerlink" title="6.6.3.2    健康检查与故障转移"></a>6.6.3.2    健康检查与故障转移</h4><p>在集群环境下，健康检查是由服务注册到的Agent来处理的，那么如果这个Agent挂掉了，那么此节点的健康检查就处于无人管理的状态。</p><p>从实际应用看，节点上的服务可能既要被发现，又要发现别的服务，如果节点挂掉了，仅提供被发现的功能实际上服务还是不可用的。当然发现别的服务也可以不使用本机节点，可以通过访问一个Nginx实现的若干Consul节点的负载均衡来实现。</p><h1 id="7-服务调用Ribbon入门"><a href="#7-服务调用Ribbon入门" class="headerlink" title="7.    服务调用Ribbon入门"></a>7.    服务调用Ribbon入门</h1><p>经过以上的学习，已经实现了服务的注册和服务发现。当启动某个服务的时候，可以通过HTTP的形式将信息注册到注册中心，并且可以通过SpringCloud提供的工具获取注册中心的服务列表。但是服务之间的调用还存在很多的问题，如何更加方便的调用微服务，多个微服务的提供者如何选择，如何负载均衡等。</p><h2 id="7-1-Ribbon概述"><a href="#7-1-Ribbon概述" class="headerlink" title="7.1    Ribbon概述"></a>7.1    Ribbon概述</h2><h3 id="7-1-1-什么是Ribbon"><a href="#7-1-1-什么是Ribbon" class="headerlink" title="7.1.1    什么是Ribbon"></a>7.1.1    什么是Ribbon</h3><p>是 Netflixfa 发布的一个负载均衡器，有助于控制 HTTP 和 TCP客户端行为。在 SpringCloud 中，Eureka一般配合Ribbon进行使用，<strong>Ribbon提供了客户端负载均衡的功能</strong>，Ribbon利用从Eureka中读取到的服务信息，在调用服务节点提供的服务时，会合理的进行负载。</p><p>在SpringCloud中可以将注册中心和Ribbon配合使用，Ribbon自动的从注册中心中获取服务提供者的列表信息，并基于内置的负载均衡算法，请求服务</p><h3 id="7-1-2-Ribbon的主要作用"><a href="#7-1-2-Ribbon的主要作用" class="headerlink" title="7.1.2    Ribbon的主要作用"></a>7.1.2    Ribbon的主要作用</h3><h4 id="7-1-2-1-服务调用"><a href="#7-1-2-1-服务调用" class="headerlink" title="7.1.2.1    服务调用"></a>7.1.2.1    服务调用</h4><p>基于Ribbon实现服务调用， 是通过拉取到的所有服务列表组成（服务名-请求路径的）映射关系。借助RestTemplate 最终进行调用</p><h4 id="7-1-2-2-负载均衡"><a href="#7-1-2-2-负载均衡" class="headerlink" title="7.1.2.2    负载均衡"></a>7.1.2.2    负载均衡</h4><p>当有多个服务提供者时，Ribbon可以根据负载均衡的算法自动的选择需要调用的服务地址</p><h2 id="7-2-基于Ribbon实现订单调用商品服务"><a href="#7-2-基于Ribbon实现订单调用商品服务" class="headerlink" title="7.2    基于Ribbon实现订单调用商品服务"></a>7.2    基于Ribbon实现订单调用商品服务</h2><p>不论是基于Eureka的注册中心还是基于Consul的注册中心，SpringCloud Ribbon统一进行了封装，所以对于服务调用，两者的方式是一样的。</p><h3 id="7-2-1-坐标依赖"><a href="#7-2-1-坐标依赖" class="headerlink" title="7.2.1    坐标依赖"></a>7.2.1    坐标依赖</h3><p>在springcloud提供的服务发现的jar中已经包含了Ribbon的依赖。所以这里不需要导入任何额外的坐标</p><h3 id="7-2-2-工程改造"><a href="#7-2-2-工程改造" class="headerlink" title="7.2.2    工程改造"></a>7.2.2    工程改造</h3><h4 id="7-2-2-1-服务提供者"><a href="#7-2-2-1-服务提供者" class="headerlink" title="7.2.2.1    服务提供者"></a>7.2.2.1    服务提供者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.client.ip-address&#125;"</span>) <span class="comment">//spring cloud 自动的获取当前应用的ip地址</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = productService.findById(id);</span><br><span class="line">        product.setProductName(<span class="string">"访问的服务地址:"</span> + ip + <span class="string">":"</span> + port);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">""</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestBody Product product)</span> </span>&#123;</span><br><span class="line">        productService.save(product);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"保存成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-2-2-服务消费者"><a href="#7-2-2-2-服务消费者" class="headerlink" title="7.2.2.2    服务消费者"></a>7.2.2.2    服务消费者</h4><p>修改服务消费者 shop_service_order模块中的启动类OrderApplication ，在创建RestTemplate方法上添加 @LoadBalanced 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用spring提供的RestTemplate发送http请求到商品服务</span></span><br><span class="line"><span class="comment">     *      1.创建RestTemplate对象交给容器管理</span></span><br><span class="line"><span class="comment">     *      2.在使用的时候,调用其方法完成操作 (getXX,postxxx)</span></span><br><span class="line"><span class="comment">     * Springcloud对consul进行了进一步的处理</span></span><br><span class="line"><span class="comment">     *      向其中集成了ribbon的支持</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@LoadBalanced</span> : 是ribbon提供的负载均衡的注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于ribbon的形式调用远程微服务</span></span><br><span class="line"><span class="comment">     *      1.使用<span class="doctag">@LoadBalanced</span>声明RestTemplate</span></span><br><span class="line"><span class="comment">     *      2.使用服务名称替换ip地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        product = restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-服务调用Ribbon高级"><a href="#8-服务调用Ribbon高级" class="headerlink" title="8.    服务调用Ribbon高级"></a>8.    服务调用Ribbon高级</h1><h2 id="8-1-负载均衡概述"><a href="#8-1-负载均衡概述" class="headerlink" title="8.1    负载均衡概述"></a>8.1    负载均衡概述</h2><h3 id="8-1-1-什么是负载均衡"><a href="#8-1-1-什么是负载均衡" class="headerlink" title="8.1.1    什么是负载均衡"></a>8.1.1    什么是负载均衡</h3><p>在搭建网站时，如果单节点的 web服务性能和可靠性都无法达到要求；或者是在使用外网服务时，经常担心被人攻破，一不小心就会有打开外网端口的情况，通常这个时候加入负载均衡就能有效解决服务问题。</p><p>负载均衡是一种基础的网络服务，其原理是通过运行在前面的负载均衡服务，按照指定的负载均衡算法，将流量分配到后端服务集群上，从而为系统提供并行扩展的能力。</p><p>负载均衡的应用场景包括流量包、转发规则以及后端服务，由于该服务有内外网个例、健康检查等功能，能够有效提供系统的安全性和可用性。</p><p><img src="https://img-blog.csdnimg.cn/20201028145539922.png" alt="image-20201028141654723"></p><h3 id="8-1-2-客户端负载均衡与服务端负载均衡"><a href="#8-1-2-客户端负载均衡与服务端负载均衡" class="headerlink" title="8.1.2    客户端负载均衡与服务端负载均衡"></a>8.1.2    客户端负载均衡与服务端负载均衡</h3><h4 id="8-1-2-1-服务端负载均衡"><a href="#8-1-2-1-服务端负载均衡" class="headerlink" title="8.1.2.1    服务端负载均衡"></a>8.1.2.1    服务端负载均衡</h4><p>先发送请求到负载均衡服务器或者软件，然后通过负载均衡算法，在多个服务器之间选择一个进行访问；即在服务器端再进行负载均衡算法分配</p><h4 id="8-1-2-2-客户端负载均衡"><a href="#8-1-2-2-客户端负载均衡" class="headerlink" title="8.1.2.2    客户端负载均衡"></a>8.1.2.2    客户端负载均衡</h4><p>客户端会有一个服务器地址列表，在发送请求前通过负载均衡算法选择一个服务器，然后进行访问，这是客户端负载均衡；即在客户端就进行负载均衡算法分配</p><h2 id="8-2-基于Ribbon实现负载均衡"><a href="#8-2-基于Ribbon实现负载均衡" class="headerlink" title="8.2    基于Ribbon实现负载均衡"></a>8.2    基于Ribbon实现负载均衡</h2><h3 id="8-2-1-搭建多服务实例"><a href="#8-2-1-搭建多服务实例" class="headerlink" title="8.2.1    搭建多服务实例"></a>8.2.1    搭建多服务实例</h3><p>修改 shop_service_product 的 application.yml 配置文件，已profiles的形式配置多个实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">product1</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">shop-service-product</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">###开始配置consul的服务注册</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span> <span class="comment">#consul服务器的主机地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span> <span class="comment">#consul服务器的ip地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#实例ID</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;-1</span></span><br><span class="line">        <span class="comment">#开启ip地址注册</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#实例的请求ip</span></span><br><span class="line">        <span class="attr">ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">product2</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">shop-service-product</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">###开始配置consul的服务注册</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span> <span class="comment">#consul服务器的主机地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span> <span class="comment">#consul服务器的ip地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#实例ID</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;-2</span></span><br><span class="line">        <span class="comment">#开启ip地址注册</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#实例的请求ip</span></span><br><span class="line">        <span class="attr">ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9004</span></span><br></pre></td></tr></table></figure><p>分别启动两次服务器验证效果，并查看两个控制台发现已轮询的方式调用了商品服务</p><p><img src="https://img-blog.csdnimg.cn/20201028145545863.png" alt="image-20201028142511437"></p><h3 id="8-2-2-负载均衡策略"><a href="#8-2-2-负载均衡策略" class="headerlink" title="8.2.2    负载均衡策略"></a>8.2.2    负载均衡策略</h3><p>Ribbon内置了多种负载均衡策略，内部负责复杂均衡的顶级接口为<code>com.netflix.loadbalancer.IRule</code> ，实现方式如下</p><p><img src="https://img-blog.csdnimg.cn/20201028145552473.png" alt="image-20201028142630338"></p><ul><li><code>com.netflix.loadbalancer.RoundRobinRule</code> ：以轮询的方式进行负载均衡。</li><li><code>com.netflix.loadbalancer.RandomRule</code> ：随机策略</li><li><code>com.netflix.loadbalancer.RetryRule</code> ：重试策略。</li><li><code>com.netflix.loadbalancer.WeightedResponseTimeRule</code> ：权重策略。会计算每个服务的权重，越高的被调用的可能性越大。</li><li><code>com.netflix.loadbalancer.BestAvailableRule</code> ：最佳策略。遍历所有的服务实例，过滤掉故障实例，并返回请求数最小的实例返回。</li><li><code>com.netflix.loadbalancer.AvailabilityFilteringRule</code> ：可用过滤策略。过滤掉故障和请求数超过阈值的服务实例，再从剩下的实力中轮询调用。</li></ul><p>在服务消费者的application.yml配置文件中修改负载均衡策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改ribbon的负载均衡策略   服务名 -  ribbon - NFLoadBalancerRuleClassName : 策略</span></span><br><span class="line"><span class="attr">service-product:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>策略选择：</p><ul><li>如果每个机器配置一样，则建议不修改策略 (推荐)</li><li>如果部分机器配置强，则可以改为 WeightedResponseTimeRule</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-微服务基础知识&quot;&gt;&lt;a href=&quot;#1-微服务基础知识&quot; class=&quot;headerlink&quot; title=&quot;1.    微服务基础知识&quot;&gt;&lt;/a&gt;1.    微服务基础知识&lt;/h1&gt;&lt;h2 id=&quot;1-1-系统架构的演变&quot;&gt;&lt;a href=&quot;#1-1-系统架构的演变&quot; class=&quot;headerlink&quot; title=&quot;1.1    系统架构的演变&quot;&gt;&lt;/a&gt;1.1    系统架构的演变&lt;/h2&gt;&lt;p&gt;随着互联网的发展，网站应用的规模不断扩大，常规的应用架构已无法应对，分布式服务架构以及微服务架构势在必行，亟需一个治理系统确保架构有条不紊的演进。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringCloud" scheme="https://wgy1993.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo</title>
    <link href="https://wgy1993.gitee.io/archives/f6253398.html"/>
    <id>https://wgy1993.gitee.io/archives/f6253398.html</id>
    <published>2020-10-25T07:51:50.000Z</published>
    <updated>2020-10-25T10:53:12.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分布式基础理论"><a href="#1-分布式基础理论" class="headerlink" title="1.    分布式基础理论"></a>1.    分布式基础理论</h1><h2 id="1-1-什么是分布式系统"><a href="#1-1-什么是分布式系统" class="headerlink" title="1.1    什么是分布式系统"></a>1.1    什么是分布式系统</h2><p>分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需<strong>一个治理系统</strong>确保架构有条不紊的演进</p><a id="more"></a><h2 id="1-2-发展演变"><a href="#1-2-发展演变" class="headerlink" title="1.2    发展演变"></a>1.2    发展演变</h2><p><img src="https://img-blog.csdnimg.cn/20201025153534670.png" alt="image-20201025111856418"></p><h3 id="1-2-1-单一应用架构"><a href="#1-2-1-单一应用架构" class="headerlink" title="1.2.1    单一应用架构"></a>1.2.1    单一应用架构</h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><img src="https://img-blog.csdnimg.cn/2020102515355753.png" alt="image-20201025113515988"></p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p><p>缺点： </p><ul><li>性能扩展比较难 </li><li>协同开发问题</li><li>不利于升级维护</li></ul><h3 id="1-2-2-垂直应用架构"><a href="#1-2-2-垂直应用架构" class="headerlink" title="1.2.2    垂直应用架构"></a>1.2.2    垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><img src="https://img-blog.csdnimg.cn/20201025153603899.png" alt="image-20201025113635921"></p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点： 公用模块无法重复利用，开发性的浪费</p><h3 id="1-2-3-分布式服务架构"><a href="#1-2-3-分布式服务架构" class="headerlink" title="1.2.3    分布式服务架构"></a>1.2.3    分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的<strong>分布式服务框架(RPC)</strong>是关键。</p><p><img src="https://img-blog.csdnimg.cn/2020102515361065.png" alt="image-20201025113744168"></p><h3 id="1-2-4-流动计算架构"><a href="#1-2-4-流动计算架构" class="headerlink" title="1.2.4    流动计算架构"></a>1.2.4    流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心(SOA)[ Service Oriented Architecture]是关键</strong>。</p><p><img src="https://img-blog.csdnimg.cn/20201025153616486.png" alt="image-20201025115235739"></p><h2 id="1-3-RPC"><a href="#1-3-RPC" class="headerlink" title="1.3    RPC"></a>1.3    RPC</h2><h3 id="1-3-1-什么叫RPC"><a href="#1-3-1-什么叫RPC" class="headerlink" title="1.3.1    什么叫RPC"></a>1.3.1    什么叫RPC</h3><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><h3 id="1-3-2-RPC基本原理"><a href="#1-3-2-RPC基本原理" class="headerlink" title="1.3.2    RPC基本原理"></a>1.3.2    RPC基本原理</h3><p><img src="https://img-blog.csdnimg.cn/20201025153622524.png" alt="image-20201025115452870"></p><p><img src="https://img-blog.csdnimg.cn/20201025153628428.png" alt="image-20201025115727926"></p><p>RPC两个核心模块：通讯，序列化。</p><p>RPC框架有很多如：dubbo、gRPC、Thrift、HSF(High Speed Service Framework)</p><h1 id="2-dubbo核心概念"><a href="#2-dubbo核心概念" class="headerlink" title="2.    dubbo核心概念"></a>2.    dubbo核心概念</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1    简介"></a>2.1    简介</h2><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>官网：<a href="http://dubbo.apache.org/" target="_blank" rel="noopener">http://dubbo.apache.org/</a></p><h2 id="2-2-基本概念"><a href="#2-2-基本概念" class="headerlink" title="2.2    基本概念"></a>2.2    基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201025153634112.png" alt="image-20201025120046432"></p><p><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者（Consumer）</strong>: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心（Registry）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p>调用关系说明：</p><ul><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><h1 id="3-dubbo环境搭建"><a href="#3-dubbo环境搭建" class="headerlink" title="3.    dubbo环境搭建"></a>3.    dubbo环境搭建</h1><h2 id="3-1-安装zookeeper"><a href="#3-1-安装zookeeper" class="headerlink" title="3.1    安装zookeeper"></a>3.1    安装zookeeper</h2><p>参考文章：<a href="https://wgy1993.gitee.io/archives/e18db595.html">https://wgy1993.gitee.io/archives/e18db595.html</a></p><h2 id="3-2-安装dubbo-admin管理控制台"><a href="#3-2-安装dubbo-admin管理控制台" class="headerlink" title="3.2    安装dubbo-admin管理控制台"></a>3.2    安装dubbo-admin管理控制台</h2><p>dubbo本身并不是一个服务软件。它其实就是一个jar包能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。所以你不用在Linux上启动什么dubbo服务。但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序，不过这个监控即使不装也不影响使用。</p><h3 id="3-2-1-下载dubbo-admin"><a href="#3-2-1-下载dubbo-admin" class="headerlink" title="3.2.1    下载dubbo-admin"></a>3.2.1    下载dubbo-admin</h3><p><a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo-ops</a></p><h3 id="3-2-2-修改dubbo-admin配置"><a href="#3-2-2-修改dubbo-admin配置" class="headerlink" title="3.2.2    修改dubbo-admin配置"></a>3.2.2    修改dubbo-admin配置</h3><p>修改 src\main\resources\application.properties 指定zookeeper地址</p><p><img src="https://img-blog.csdnimg.cn/20201025153639627.png" alt="image-20201025122802440"></p><h3 id="3-2-3-打包dubbo-admin"><a href="#3-2-3-打包dubbo-admin" class="headerlink" title="3.2.3    打包dubbo-admin"></a>3.2.3    打包dubbo-admin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="3-2-4-运行dubbo-admin"><a href="#3-2-4-运行dubbo-admin" class="headerlink" title="3.2.4    运行dubbo-admin"></a>3.2.4    运行dubbo-admin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>默认使用root/root 登陆</p><p><a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a></p><p><img src="https://img-blog.csdnimg.cn/2020102515364571.png" alt="image-20201025123200810"></p><h1 id="4-dubbo-helloworld"><a href="#4-dubbo-helloworld" class="headerlink" title="4.    dubbo-helloworld"></a>4.    dubbo-helloworld</h1><h2 id="4-1-提出需求"><a href="#4-1-提出需求" class="headerlink" title="4.1    提出需求"></a>4.1    提出需求</h2><p>某个电商系统，订单服务需要调用用户服务获取某个用户的所有地址；</p><p>我们现在需要创建两个服务模块进行测试</p><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>订单服务web模块</td><td>创建订单等</td></tr><tr><td>用户服务service模块</td><td>查询用户地址等</td></tr></tbody></table><p>测试预期结果：</p><p>订单服务web模块在A服务器，用户服务模块在B服务器，A可以远程调用B的功能。</p><h2 id="4-2-工程架构"><a href="#4-2-工程架构" class="headerlink" title="4.2    工程架构"></a>4.2    工程架构</h2><h3 id="4-2-1-分包"><a href="#4-2-1-分包" class="headerlink" title="4.2.1    分包"></a>4.2.1    分包</h3><p>建议将服务接口，服务模型，服务异常等均放在 API 包中，因为服务模型及异常也是 API 的一部分，同时，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。</p><p>如果需要，也可以考虑在 API 包中放置一份 spring 的引用配置，这样使用方便，只需在 spring 加载过程中引用此配置即可，配置建议放在模块的包目录下，以免冲突，如：<code>com/alibaba/china/xxx/dubbo-reference.xml</code>。</p><h3 id="4-2-2-粒度"><a href="#4-2-2-粒度" class="headerlink" title="4.2.2    粒度"></a>4.2.2    粒度</h3><p>服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。</p><p>服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。</p><p>不建议使用过于抽象的通用接口，如：Map query(Map)，这样的接口没有明确语义，会给后期维护带来不便。</p><p><img src="https://img-blog.csdnimg.cn/20201025153650824.png" alt="image-20201025123705441"></p><h2 id="4-3-创建模块"><a href="#4-3-创建模块" class="headerlink" title="4.3    创建模块"></a>4.3    创建模块</h2><h3 id="4-3-1-gmall-interface"><a href="#4-3-1-gmall-interface" class="headerlink" title="4.3.1    gmall-interface"></a>4.3.1    gmall-interface</h3><p>公共接口层（model，service，exception…）</p><p>作用：定义公共接口，也可以导入公共依赖</p><h4 id="4-3-1-1-Bean模型"><a href="#4-3-1-1-Bean模型" class="headerlink" title="4.3.1.1    Bean模型"></a>4.3.1.1    Bean模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userAddress; <span class="comment">//用户地址</span></span><br><span class="line">    <span class="keyword">private</span> String userId; <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String consignee; <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNum; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String isDefault; <span class="comment">//是否为默认地址    Y-是     N-否</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-1-2-Service接口"><a href="#4-3-1-2-Service接口" class="headerlink" title="4.3.1.2    Service接口"></a>4.3.1.2    Service接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照用户id返回所有的收货地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-gmall-user"><a href="#4-3-2-gmall-user" class="headerlink" title="4.3.2    gmall-user"></a>4.3.2    gmall-user</h3><p>用户模块（对用户接口的实现）</p><h4 id="4-3-2-1-pom-xml"><a href="#4-3-2-1-pom-xml" class="headerlink" title="4.3.2.1    pom.xml"></a>4.3.2.1    pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-2-Service"><a href="#4-3-2-2-Service" class="headerlink" title="4.3.2.2    Service"></a>4.3.2.2    Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-gmall-order-web"><a href="#4-3-3-gmall-order-web" class="headerlink" title="4.3.3    gmall-order-web"></a>4.3.3    gmall-order-web</h3><p>订单模块（调用用户模块）</p><h4 id="4-3-3-1-pom-xml"><a href="#4-3-3-1-pom-xml" class="headerlink" title="4.3.3.1    pom.xml"></a>4.3.3.1    pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span></span></span><br></pre></td></tr></table></figure><h4 id="4-3-3-2-测试"><a href="#4-3-3-2-测试" class="headerlink" title="4.3.3.2    测试"></a>4.3.3.2    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这样是无法进行调用的。我们gmall-order-web引入了gmall-interface，但是interface的实现是gmall-user，我们并没有引入，而且实际他可能还在别的服务器中。</p><h2 id="4-4-使用dubbo改造"><a href="#4-4-使用dubbo改造" class="headerlink" title="4.4    使用dubbo改造"></a>4.4    使用dubbo改造</h2><h3 id="4-4-1-改造gmall-user作为服务提供者"><a href="#4-4-1-改造gmall-user作为服务提供者" class="headerlink" title="4.4.1    改造gmall-user作为服务提供者"></a>4.4.1    改造gmall-user作为服务提供者</h3><h4 id="4-4-1-1-引入dubbo"><a href="#4-4-1-1-引入dubbo" class="headerlink" title="4.4.1.1    引入dubbo"></a>4.4.1.1    引入dubbo</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6以前的版本引入zkclient操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6及以后的版本引入curator操作zookeeper</span></span><br><span class="line"><span class="comment">    下面两个zk客户端根据dubbo版本2选1即可</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;0.10&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-2-配置提供者"><a href="#4-4-1-2-配置提供者" class="headerlink" title="4.4.1.2    配置提供者"></a>4.4.1.2    配置提供者</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-service-provider"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、指定注册中心的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address="zookeeper://192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务的实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.wgy.gmall.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-3-启动服务"><a href="#4-4-1-3-启动服务" class="headerlink" title="4.4.1.3    启动服务"></a>4.4.1.3    启动服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ioc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"provider.xml"</span>);</span><br><span class="line">        ioc.start();</span><br><span class="line">        <span class="comment">// 按任意键退出</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-改造gmall-order-web作为服务消费者"><a href="#4-4-2-改造gmall-order-web作为服务消费者" class="headerlink" title="4.4.2    改造gmall-order-web作为服务消费者"></a>4.4.2    改造gmall-order-web作为服务消费者</h3><h4 id="4-4-2-1-引入dubbo"><a href="#4-4-2-1-引入dubbo" class="headerlink" title="4.4.2.1    引入dubbo"></a>4.4.2.1    引入dubbo</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6以前的版本引入zkclient操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6及以后的版本引入curator操作zookeeper</span></span><br><span class="line"><span class="comment">    下面两个zk客户端根据dubbo版本2选1即可</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;0.10&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-2-配置消费者信息"><a href="#4-4-2-2-配置消费者信息" class="headerlink" title="4.4.2.2    配置消费者信息"></a>4.4.2.2    配置消费者信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.gmall.service.impl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"order-service-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明需要调用的远程服务的接口；生成远程服务代理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-3-修改消费者服务实现类"><a href="#4-4-2-3-修改消费者服务实现类" class="headerlink" title="4.4.2.3    修改消费者服务实现类"></a>4.4.2.3    修改消费者服务实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、将服务提供者注册到注册中心（暴露服务）</span></span><br><span class="line"><span class="comment"> *      1.1  导入dubbo依赖（2.6.2）\操作zookeeper的客户端(curator)</span></span><br><span class="line"><span class="comment"> *      1.2  配置服务提供者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2、让服务消费者去注册中心订阅服务提供者的服务地址</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-测试调用"><a href="#4-4-3-测试调用" class="headerlink" title="4.4.3    测试调用"></a>4.4.3    测试调用</h3><p>访问gmall-order-web的initOrder请求，会调用UserService获取用户地址；</p><p>调用成功。说明我们order已经可以调用远程的UserService了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"consumer.xml"</span>);</span><br><span class="line"></span><br><span class="line">        OrderService orderService = applicationContext.getBean(OrderService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        orderService.initOrder(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用完成...."</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-4-注解版"><a href="#4-4-4-注解版" class="headerlink" title="4.4.4    注解版"></a>4.4.4    注解版</h3><h4 id="4-4-4-1-服务提供方"><a href="#4-4-4-1-服务提供方" class="headerlink" title="4.4.4.1    服务提供方"></a>4.4.4.1    服务提供方</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-service-provider"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、指定注册中心的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address="zookeeper://192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、暴露服务   注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.wgy.gmall.service.impl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-4-2-服务消费方"><a href="#4-4-4-2-服务消费方" class="headerlink" title="4.4.4.2    服务消费方"></a>4.4.4.2    服务消费方</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"order-service-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解声明需要调用的远程服务的接口；生成远程服务代理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.wgy.gmall.service.impl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、将服务提供者注册到注册中心（暴露服务）</span></span><br><span class="line"><span class="comment"> *      1.1  导入dubbo依赖（2.6.2）\操作zookeeper的客户端(curator)</span></span><br><span class="line"><span class="comment"> *      1.2  配置服务提供者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2、让服务消费者去注册中心订阅服务提供者的服务地址</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span> <span class="comment">//使用dubbo提供的reference注解引用远程服务</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-监控中心"><a href="#5-监控中心" class="headerlink" title="5.    监控中心"></a>5.    监控中心</h1><h2 id="5-1-dubbo-admin"><a href="#5-1-dubbo-admin" class="headerlink" title="5.1    dubbo-admin"></a>5.1    dubbo-admin</h2><p>图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理</p><h2 id="5-2-dubbo-monitor-simple"><a href="#5-2-dubbo-monitor-simple" class="headerlink" title="5.2    dubbo-monitor-simple"></a>5.2    dubbo-monitor-simple</h2><p>简单的监控中心</p><h3 id="5-2-1-安装"><a href="#5-2-1-安装" class="headerlink" title="5.2.1    安装"></a>5.2.1    安装</h3><h4 id="5-2-1-1-下载-dubbo-ops"><a href="#5-2-1-1-下载-dubbo-ops" class="headerlink" title="5.2.1.1    下载 dubbo-ops"></a>5.2.1.1    下载 dubbo-ops</h4><p><a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo-ops</a></p><h4 id="5-2-1-2-修改配置指定注册中心地址"><a href="#5-2-1-2-修改配置指定注册中心地址" class="headerlink" title="5.2.1.2    修改配置指定注册中心地址"></a>5.2.1.2    修改配置指定注册中心地址</h4><p>进入 dubbo-monitor-simple\src\main\resources\conf，修改 dubbo.properties文件</p><p><img src="https://img-blog.csdnimg.cn/20201025153656220.png" alt="image-20201025132359632"></p><h4 id="5-2-1-3-打包dubbo-monitor-simple"><a href="#5-2-1-3-打包dubbo-monitor-simple" class="headerlink" title="5.2.1.3    打包dubbo-monitor-simple"></a>5.2.1.3    打包dubbo-monitor-simple</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip&#x3D;true</span><br></pre></td></tr></table></figure><h4 id="5-2-1-4-解压-tar-gz-文件，并运行start-bat"><a href="#5-2-1-4-解压-tar-gz-文件，并运行start-bat" class="headerlink" title="5.2.1.4    解压 tar.gz 文件，并运行start.bat"></a>5.2.1.4    解压 tar.gz 文件，并运行start.bat</h4><p>如果缺少servlet-api，自行导入servlet-api再访问监控中心</p><h4 id="5-2-1-5-启动访问8080"><a href="#5-2-1-5-启动访问8080" class="headerlink" title="5.2.1.5    启动访问8080"></a>5.2.1.5    启动访问8080</h4><h3 id="5-2-2-监控中心配置"><a href="#5-2-2-监控中心配置" class="headerlink" title="5.2.2    监控中心配置"></a>5.2.2    监控中心配置</h3><p>所有服务配置连接监控中心，进行监控统计</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 监控中心协议，如果为protocol="registry"，表示从注册中心发现监控中心地址，否则直连监控中心。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dubbo:monitor address="127.0.0.1:7070"&gt;&lt;/dubbo:monitor&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p>Simple Monitor 挂掉不会影响到 Consumer 和 Provider 之间的调用，所以用于生产环境不会有风险。</p><p>Simple Monitor 采用磁盘存储统计信息，请注意安装机器的磁盘限制，如果要集群，建议用mount共享磁盘。</p><h1 id="6-整合SpringBoot"><a href="#6-整合SpringBoot" class="headerlink" title="6.    整合SpringBoot"></a>6.    整合SpringBoot</h1><h2 id="6-1-引入依赖"><a href="#6-1-引入依赖" class="headerlink" title="6.1    引入依赖"></a>6.1    引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意starter版本适配：</p><p><img src="https://img-blog.csdnimg.cn/20201025153701971.png" alt="image-20201025132822959"></p><h2 id="6-2-提供者"><a href="#6-2-提供者" class="headerlink" title="6.2    提供者"></a>6.2    提供者</h2><h3 id="6-2-1-application-properties"><a href="#6-2-1-application-properties" class="headerlink" title="6.2.1    application.properties"></a>6.2.1    application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务名，不能跟别的dubbo提供端重复</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">boot-user-service-provider</span></span><br><span class="line"><span class="comment">#注册中心的地址加端口号</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">192.168.142.128:2181</span></span><br><span class="line"><span class="comment">#指定注册中心协议</span></span><br><span class="line"><span class="meta">dubbo.registry.protocol</span>=<span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分布式固定是dubbo,不要改</span></span><br><span class="line"><span class="meta">dubbo.protocol.name</span>=<span class="string">dubbo</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span>=<span class="string">20880</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监控中心</span></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span>=<span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注解方式要扫描的包</span></span><br><span class="line"><span class="comment">#dubbo.scan.base-packages=com.wgy.gmall</span></span><br></pre></td></tr></table></figure><h3 id="6-2-2-xml配置文件"><a href="#6-2-2-xml配置文件" class="headerlink" title="6.2.2    xml配置文件"></a>6.2.2    xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-service-provider"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、指定注册中心的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address="zookeeper://192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务的实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.wgy.gmall.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连接监控中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-3-手动创建配置"><a href="#6-2-3-手动创建配置" class="headerlink" title="6.2.3    手动创建配置"></a>6.2.3    手动创建配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDubboConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationConfig <span class="title">applicationConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationConfig applicationConfig = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">        applicationConfig.setName(<span class="string">"boot-user-service-provider"</span>);</span><br><span class="line">        <span class="keyword">return</span> applicationConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;dubbo:registry protocol="zookeeper" address="192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RegistryConfig <span class="title">registryConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RegistryConfig registryConfig = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">        registryConfig.setProtocol(<span class="string">"zookeeper"</span>);</span><br><span class="line">        registryConfig.setAddress(<span class="string">"192.168.142.128:2181"</span>);</span><br><span class="line">        <span class="keyword">return</span> registryConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;dubbo:protocol name="dubbo" port="20882"&gt;&lt;/dubbo:protocol&gt;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProtocolConfig <span class="title">protocolConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProtocolConfig protocolConfig = <span class="keyword">new</span> ProtocolConfig();</span><br><span class="line">        protocolConfig.setName(<span class="string">"dubbo"</span>);</span><br><span class="line">        protocolConfig.setPort(<span class="number">20882</span>);</span><br><span class="line">        <span class="keyword">return</span> protocolConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;dubbo:service interface="com.wgy.gmall.service.UserService"</span></span><br><span class="line"><span class="comment">     * ref="userServiceImpl" timeout="1000" version="1.0.0"&gt;</span></span><br><span class="line"><span class="comment">     * &lt;dubbo:method name="getUserAddressList" timeout="1000"&gt;&lt;/dubbo:method&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/dubbo:service&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceConfig&lt;UserService&gt; <span class="title">userServiceConfig</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        ServiceConfig&lt;UserService&gt; serviceConfig = <span class="keyword">new</span> ServiceConfig&lt;&gt;();</span><br><span class="line">        serviceConfig.setInterface(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        serviceConfig.setRef(userService);</span><br><span class="line">        serviceConfig.setVersion(<span class="string">"1.0.0"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置每一个method的信息</span></span><br><span class="line">        MethodConfig methodConfig = <span class="keyword">new</span> MethodConfig();</span><br><span class="line">        methodConfig.setName(<span class="string">"getUserAddressList"</span>);</span><br><span class="line">        methodConfig.setTimeout(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将method的设置关联到service配置中</span></span><br><span class="line">        List&lt;MethodConfig&gt; methods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        methods.add(methodConfig);</span><br><span class="line">        serviceConfig.setMethods(methods);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ProviderConfig</span></span><br><span class="line">        <span class="comment">//MonitorConfig</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-启动类"><a href="#6-2-4-启动类" class="headerlink" title="6.2.4 启动类"></a>6.2.4 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、导入依赖；</span></span><br><span class="line"><span class="comment"> *      1）、导入dubbo-starter</span></span><br><span class="line"><span class="comment"> *      2）、导入dubbo的其他依赖</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * SpringBoot与dubbo整合的三种方式：</span></span><br><span class="line"><span class="comment"> *      1）、导入dubbo-starter，在application.properties配置属性，使用<span class="doctag">@Service</span>【暴露服务】使用<span class="doctag">@Reference</span>【引用服务】</span></span><br><span class="line"><span class="comment"> *      2）、保留dubbo xml配置文件;</span></span><br><span class="line"><span class="comment"> *              导入dubbo-starter，使用<span class="doctag">@ImportResource</span>导入dubbo的配置文件即可</span></span><br><span class="line"><span class="comment"> *      3）、使用注解API的方式：</span></span><br><span class="line"><span class="comment"> *              将每一个组件手动创建到容器中,让dubbo来扫描其他的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@EnableDubbo //开启基于注解的dubbo功能</span></span><br><span class="line"><span class="comment">//@ImportResource(locations="classpath:provider.xml")</span></span><br><span class="line"><span class="meta">@EnableDubbo</span>(scanBasePackages=<span class="string">"com.wgy.gmall"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootUserServiceProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootUserServiceProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-5-服务提供方"><a href="#6-2-5-服务提供方" class="headerlink" title="6.2.5    服务提供方"></a>6.2.5    服务提供方</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-消费者"><a href="#6-3-消费者" class="headerlink" title="6.3    消费者"></a>6.3    消费者</h2><h3 id="6-3-1-application-properties"><a href="#6-3-1-application-properties" class="headerlink" title="6.3.1    application.properties"></a>6.3.1    application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">boot-order-service-consumer</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://192.168.142.128:2181</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span>=<span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有在配置中写dubbo.scan.base-package,还需要使用@EnableDubbo注解</span></span><br></pre></td></tr></table></figure><h3 id="6-3-2-启动类"><a href="#6-3-2-启动类" class="headerlink" title="6.3.2    启动类"></a>6.3.2    启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootOrderServiceConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootOrderServiceConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-3-服务消费方"><a href="#6-3-3-服务消费方" class="headerlink" title="6.3.3    服务消费方"></a>6.3.3    服务消费方</h3><h4 id="6-3-3-1-Controller"><a href="#6-3-3-1-Controller" class="headerlink" title="6.3.3.1    Controller"></a>6.3.3.1    Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/initOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(@RequestParam(<span class="string">"uid"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.initOrder(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-3-2-Service"><a href="#6-3-3-2-Service" class="headerlink" title="6.3.3.2    Service"></a>6.3.3.2    Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、将服务提供者注册到注册中心（暴露服务）</span></span><br><span class="line"><span class="comment"> *      1.1  导入dubbo依赖（2.6.2）\操作zookeeper的客户端(curator)</span></span><br><span class="line"><span class="comment"> *      1.2  配置服务提供者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2、让服务消费者去注册中心订阅服务提供者的服务地址</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="comment">//@Reference(url = "192.168.142.1:20882")//dubbo直连</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-dubbo配置"><a href="#7-dubbo配置" class="headerlink" title="7.    dubbo配置"></a>7.    dubbo配置</h1><h2 id="7-1-配置原则"><a href="#7-1-配置原则" class="headerlink" title="7.1    配置原则"></a>7.1    配置原则</h2><p><img src="https://img-blog.csdnimg.cn/20201025153707427.png" alt="image-20201025141548834"></p><p>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</p><p>XML 次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。</p><p>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</p><h2 id="7-2-启动时检查"><a href="#7-2-启动时检查" class="headerlink" title="7.2    启动时检查"></a>7.2    启动时检查</h2><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p><p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>另外，如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 check，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 <code>check=&quot;false&quot;</code>，总是会返回引用，当服务恢复时，能自动连上。</p><h3 id="7-2-1-spring-配置文件"><a href="#7-2-1-spring-配置文件" class="headerlink" title="7.2.1    spring 配置文件"></a>7.2.1    spring 配置文件</h3><p>关闭某个服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭所有服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭注册中心启动时检查 (注册订阅失败时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2-通过-dubbo-properties"><a href="#7-2-2-通过-dubbo-properties" class="headerlink" title="7.2.2    通过 dubbo.properties"></a>7.2.2    通过 dubbo.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.reference.com.foo.BarService.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.reference.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.consumer.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.registry.check</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h2 id="7-3-超时时间"><a href="#7-3-超时时间" class="headerlink" title="7.3    超时时间"></a>7.3    超时时间</h2><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间。</p><h3 id="7-3-1-Dubbo消费端"><a href="#7-3-1-Dubbo消费端" class="headerlink" title="7.3.1    Dubbo消费端"></a>7.3.1    Dubbo消费端</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局超时配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- timeout="0" 默认是1000ms--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定接口以及特定方法超时配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2-Dubbo服务端"><a href="#7-3-2-Dubbo服务端" class="headerlink" title="7.3.2    Dubbo服务端"></a>7.3.2    Dubbo服务端</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局超时配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定接口以及特定方法超时配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-3-配置原则"><a href="#7-3-3-配置原则" class="headerlink" title="7.3.3    配置原则"></a>7.3.3    配置原则</h3><p>dubbo推荐在Provider上尽量多配置Consumer端属性：</p><ul><li>作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等</li><li>在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的</li></ul><p>配置的覆盖规则：</p><ul><li>精确优先 (方法级优先，接口级次之，全局配置再次之)</li><li>消费者设置优先(如果级别一样，则消费方优先，提供方次之)</li></ul><p><img src="https://img-blog.csdnimg.cn/20201025153713223.png" alt="image-20201025145109346"></p><h2 id="7-4-重试次数"><a href="#7-4-重试次数" class="headerlink" title="7.4    重试次数"></a>7.4    重试次数</h2><p>失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- retries="":重试次数，不包含第一次调用，0代表不重试 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 幂等（设置重试次数）【查询、删除、修改】、非幂等（不能设置重试次数）【新增】 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重试次数配置如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-5-版本号"><a href="#7-5-版本号" class="headerlink" title="7.5    版本号"></a>7.5    版本号</h2><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p><p>可以按照以下的步骤进行版本迁移：</p><ul><li>在低压力时间段，先升级一半提供者为新版本</li><li>再将所有消费者升级为新版本</li><li>然后将剩下的一半提供者升级为新版本</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 老版本服务提供者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 新版本服务提供者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 老版本服务消费者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 新版本服务消费者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果不需要区分版本，可以按照以下的方式配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"*"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-高可用"><a href="#8-高可用" class="headerlink" title="8.    高可用"></a>8.    高可用</h1><h2 id="8-1-zookeeper宕机与dubbo直连"><a href="#8-1-zookeeper宕机与dubbo直连" class="headerlink" title="8.1    zookeeper宕机与dubbo直连"></a>8.1    zookeeper宕机与dubbo直连</h2><p>现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务。</p><p>原因：健壮性</p><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</strong></li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><p>高可用：通过设计，减少系统不能提供服务的时间</p><h2 id="8-2-集群下dubbo负载均衡配置"><a href="#8-2-集群下dubbo负载均衡配置" class="headerlink" title="8.2    集群下dubbo负载均衡配置"></a>8.2    集群下dubbo负载均衡配置</h2><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用。</p><p>负载均衡策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Random LoadBalance</span><br><span class="line">随机，按权重设置随机概率。</span><br><span class="line">在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</span><br><span class="line"></span><br><span class="line">RoundRobin LoadBalance</span><br><span class="line">轮循，按公约后的权重设置轮循比率。</span><br><span class="line">存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</span><br><span class="line"></span><br><span class="line">LeastActive LoadBalance</span><br><span class="line">最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</span><br><span class="line">使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</span><br><span class="line"></span><br><span class="line">ConsistentHash LoadBalance</span><br><span class="line">一致性 Hash，相同参数的请求总是发到同一提供者。</span><br><span class="line">当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Consistent_hashing</span><br><span class="line">缺省只对第一个参数 Hash，如果要修改，请配置 &lt;dubbo:parameter key&#x3D;&quot;hash.arguments&quot; value&#x3D;&quot;0,1&quot; &#x2F;&gt;</span><br><span class="line">缺省用 160 份虚拟节点，如果要修改，请配置 &lt;dubbo:parameter key&#x3D;&quot;hash.nodes&quot; value&#x3D;&quot;320&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Reference</span>(loadbalance=<span class="string">"random"</span>,timeout=<span class="number">1000</span>)</span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-整合hystrix，服务熔断与降级处理"><a href="#8-3-整合hystrix，服务熔断与降级处理" class="headerlink" title="8.3    整合hystrix，服务熔断与降级处理"></a>8.3    整合hystrix，服务熔断与降级处理</h2><h3 id="8-3-1-服务降级"><a href="#8-3-1-服务降级" class="headerlink" title="8.3.1    服务降级"></a>8.3.1    服务降级</h3><p><strong>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</strong></p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p><p><code>mock=force:return+null</code> 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</p><p><code>mock=fail:return+null</code> 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响</p><h3 id="8-3-2-集群容错"><a href="#8-3-2-集群容错" class="headerlink" title="8.3.2    集群容错"></a>8.3.2    集群容错</h3><p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p><p><strong>集群容错模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Failover Cluster</span><br><span class="line">失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries&#x3D;&quot;2&quot; 来设置重试次数(不含第一次)。</span><br><span class="line"></span><br><span class="line">重试次数配置如下：</span><br><span class="line">&lt;dubbo:service retries&#x3D;&quot;2&quot; &#x2F;&gt;</span><br><span class="line">或</span><br><span class="line">&lt;dubbo:reference retries&#x3D;&quot;2&quot; &#x2F;&gt;</span><br><span class="line">或</span><br><span class="line">&lt;dubbo:reference&gt;</span><br><span class="line">    &lt;dubbo:method name&#x3D;&quot;findFoo&quot; retries&#x3D;&quot;2&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;dubbo:reference&gt;</span><br><span class="line"></span><br><span class="line">Failfast Cluster</span><br><span class="line">快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</span><br><span class="line"></span><br><span class="line">Failsafe Cluster</span><br><span class="line">失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</span><br><span class="line"></span><br><span class="line">Failback Cluster</span><br><span class="line">失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</span><br><span class="line"></span><br><span class="line">Forking Cluster</span><br><span class="line">并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks&#x3D;&quot;2&quot; 来设置最大并行数。</span><br><span class="line"></span><br><span class="line">Broadcast Cluster</span><br><span class="line">广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。</span><br><span class="line"></span><br><span class="line">集群模式配置</span><br><span class="line">按照以下示例在服务提供方和消费方配置集群模式</span><br><span class="line">&lt;dubbo:service cluster&#x3D;&quot;failsafe&quot; &#x2F;&gt;</span><br><span class="line">或</span><br><span class="line">&lt;dubbo:reference cluster&#x3D;&quot;failsafe&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="8-3-3-整合hystrix"><a href="#8-3-3-整合hystrix" class="headerlink" title="8.3.3    整合hystrix"></a>8.3.3    整合hystrix</h3><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能</p><h4 id="8-3-3-1-配置spring-cloud-starter-netflix-hystrix"><a href="#8-3-3-1-配置spring-cloud-starter-netflix-hystrix" class="headerlink" title="8.3.3.1    配置spring-cloud-starter-netflix-hystrix"></a>8.3.3.1    配置spring-cloud-starter-netflix-hystrix</h4><p>spring boot官方提供了对hystrix的集成，直接在pom.xml里加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在Application类上增加@EnableHystrix来启用hystrix starter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 启动类</span><br><span class="line"> *</span><br><span class="line"> * @author wgy</span><br><span class="line"> *&#x2F;</span><br><span class="line">@EnableDubbo</span><br><span class="line">@EnableHystrix</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class BootOrderServiceConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BootOrderServiceConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-2-配置Provider端"><a href="#8-3-3-2-配置Provider端" class="headerlink" title="8.3.3.2    配置Provider端"></a>8.3.3.2    配置Provider端</h4><p>在Dubbo的Provider上增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-3-配置Consumer端"><a href="#8-3-3-3-配置Consumer端" class="headerlink" title="8.3.3.3    配置Consumer端"></a>8.3.3.3    配置Consumer端</h4><p>对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = “hello”的调用里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(loadbalance=<span class="string">"random"</span>,timeout=<span class="number">1000</span>) <span class="comment">//dubbo直连</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"hello"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">hello</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> UserAddress(<span class="number">10</span>, <span class="string">"测试地址"</span>, <span class="string">"1"</span>, <span class="string">"测试"</span>, <span class="string">"测试"</span>, <span class="string">"Y"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-dubbo原理"><a href="#9-dubbo原理" class="headerlink" title="9.    dubbo原理"></a>9.    dubbo原理</h1><h2 id="9-1-RPC原理"><a href="#9-1-RPC原理" class="headerlink" title="9.1    RPC原理"></a>9.1    RPC原理</h2><p><img src="https://img-blog.csdnimg.cn/20201025153719548.png" alt="image-20201025152238683"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一次完整的RPC调用流程（同步调用，异步另说）如下： </span><br><span class="line">1）服务消费方（client）调用以本地调用方式调用服务； </span><br><span class="line">2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体； </span><br><span class="line">3）client stub找到服务地址，并将消息发送到服务端； </span><br><span class="line">4）server stub收到消息后进行解码； </span><br><span class="line">5）server stub根据解码结果调用本地的服务； </span><br><span class="line">6）本地服务执行并将结果返回给server stub； </span><br><span class="line">7）server stub将返回结果打包成消息并发送至消费方； </span><br><span class="line">8）client stub接收到消息，并进行解码； </span><br><span class="line">9）服务消费方得到最终结果。</span><br><span class="line">RPC框架的目标就是要2~8这些步骤都封装起来，这些细节对用户来说是透明的，不可见的。</span><br></pre></td></tr></table></figure><h2 id="9-2-netty通信原理"><a href="#9-2-netty通信原理" class="headerlink" title="9.2    netty通信原理"></a>9.2    netty通信原理</h2><p>Netty是一个异步事件驱动的网络应用程序框架， 用于快速开发可维护的高性能协议服务器和客户端。它极大地简化并简化了TCP和UDP套接字服务器等网络编程。</p><p>BIO：(Blocking IO)</p><p><img src="https://img-blog.csdnimg.cn/20201025153725879.png" alt="image-20201025152328614"></p><p>NIO (Non-Blocking IO)</p><p><img src="https://img-blog.csdnimg.cn/20201025153732118.png" alt="image-20201025152343149"></p><p>Selector 一般称 为<strong>选择器</strong> ，也可以翻译为 <strong>多路复用器，</strong></p><p>Connect（连接就绪）、Accept（接受就绪）、Read（读就绪）、Write（写就绪）</p><p>Netty基本原理：</p><p><img src="https://img-blog.csdnimg.cn/20201025153738453.png" alt="image-20201025152719647"></p><h2 id="9-3-dubbo原理"><a href="#9-3-dubbo原理" class="headerlink" title="9.3    dubbo原理"></a>9.3    dubbo原理</h2><h3 id="9-3-1-dubbo原理-框架设计"><a href="#9-3-1-dubbo原理-框架设计" class="headerlink" title="9.3.1    dubbo原理   -框架设计"></a>9.3.1    dubbo原理   -框架设计</h3><p><img src="https://img-blog.csdnimg.cn/20201025153745109.png" alt="image-20201025152813545"></p><ul><li><strong>config 配置层</strong>：对外配置接口，以 ServiceConfig, ReferenceConfig 为中心，可以直接初始化配置类，也可以通过 spring 解析配置生成配置类</li><li><strong>proxy 服务代理层</strong>：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 ServiceProxy 为中心，扩展接口为 ProxyFactory</li><li><strong>registry 注册中心层</strong>：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory, Registry, RegistryService</li><li><strong>cluster 路由层</strong>：封装多个提供者的路由及负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster, Directory, Router, LoadBalance</li><li><strong>monitor 监控层</strong>：RPC 调用次数和调用时间监控，以 Statistics 为中心，扩展接口为 MonitorFactory, Monitor, MonitorService</li><li><strong>protocol 远程调用层</strong>：封装 RPC 调用，以 Invocation, Result 为中心，扩展接口为 Protocol, Invoker, Exporter</li><li><strong>exchange 信息交换层</strong>：封装请求响应模式，同步转异步，以 Request, Response 为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer</li><li><strong>transport 网络传输层</strong>：抽象 mina 和 netty 为统一接口，以 Message 为中心，扩展接口为 Channel, Transporter, Client, Server, Codec</li><li><strong>serialize 数据序列化层</strong>：可复用的一些工具，扩展接口为 Serialization, ObjectInput, ObjectOutput, ThreadPool</li></ul><h3 id="9-3-2-dubbo原理-启动解析、加载配置信息"><a href="#9-3-2-dubbo原理-启动解析、加载配置信息" class="headerlink" title="9.3.2    dubbo原理   -启动解析、加载配置信息"></a>9.3.2    dubbo原理   -启动解析、加载配置信息</h3><p><img src="https://img-blog.csdnimg.cn/20201025153751344.png" alt="image-20201025153036742"></p><h3 id="9-3-3-dubbo原理-服务暴露"><a href="#9-3-3-dubbo原理-服务暴露" class="headerlink" title="9.3.3    dubbo原理   -服务暴露"></a>9.3.3    dubbo原理   -服务暴露</h3><p><img src="https://img-blog.csdnimg.cn/20201025153756836.png" alt="image-20201025153141628"></p><h3 id="9-3-4-dubbo原理-服务引用"><a href="#9-3-4-dubbo原理-服务引用" class="headerlink" title="9.3.4    dubbo原理   -服务引用"></a>9.3.4    dubbo原理   -服务引用</h3><p><img src="https://img-blog.csdnimg.cn/20201025153802464.png" alt="image-20201025153209162"></p><h3 id="9-3-5-dubbo原理-服务调用"><a href="#9-3-5-dubbo原理-服务调用" class="headerlink" title="9.3.5    dubbo原理   -服务调用"></a>9.3.5    dubbo原理   -服务调用</h3><p><img src="https://img-blog.csdnimg.cn/20201025153808389.png" alt="image-20201025153304403"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-分布式基础理论&quot;&gt;&lt;a href=&quot;#1-分布式基础理论&quot; class=&quot;headerlink&quot; title=&quot;1.    分布式基础理论&quot;&gt;&lt;/a&gt;1.    分布式基础理论&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是分布式系统&quot;&gt;&lt;a href=&quot;#1-1-什么是分布式系统&quot; class=&quot;headerlink&quot; title=&quot;1.1    什么是分布式系统&quot;&gt;&lt;/a&gt;1.1    什么是分布式系统&lt;/h2&gt;&lt;p&gt;分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统&lt;/p&gt;
&lt;p&gt;分布式系统（distributed system）是建立在网络之上的软件系统。&lt;/p&gt;
&lt;p&gt;随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需&lt;strong&gt;一个治理系统&lt;/strong&gt;确保架构有条不紊的演进&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="Dubbo" scheme="https://wgy1993.gitee.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://wgy1993.gitee.io/archives/b543ced0.html"/>
    <id>https://wgy1993.gitee.io/archives/b543ced0.html</id>
    <published>2020-10-10T04:39:03.000Z</published>
    <updated>2020-10-10T04:44:09.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-消息中间件概述"><a href="#1-消息中间件概述" class="headerlink" title="1.    消息中间件概述"></a>1.    消息中间件概述</h1><h2 id="1-1-什么是消息中间件"><a href="#1-1-什么是消息中间件" class="headerlink" title="1.1    什么是消息中间件"></a>1.1    什么是消息中间件</h2><p>MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。</p><ul><li><p>为什么使用MQ</p><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong>。</p></li></ul><a id="more"></a><ul><li><p>开发中消息队列通常有如下应用场景：</p><p>1、任务<strong>异步</strong>处理</p><p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p><p>2、应用程序<strong>解耦合</strong></p><p>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p><p>3、<strong>削峰填谷</strong></p><p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。</p><p><img src="https://img-blog.csdnimg.cn/20201010122202295.png" alt="image-20201009165832865"></p><p>消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p><p><img src="https://img-blog.csdnimg.cn/20201010122232464.png" alt="image-20201009165928229"></p><p>但是使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000QPS，直到消费完积压的消息,这就叫做“填谷”</p><p><img src="https://img-blog.csdnimg.cn/20201010122248282.png" alt="image-20201009170012969"></p></li></ul><h2 id="1-2-AMQP-和-JMS"><a href="#1-2-AMQP-和-JMS" class="headerlink" title="1.2    AMQP 和 JMS"></a>1.2    AMQP 和 JMS</h2><p>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</p><h3 id="1-2-1-AMQP"><a href="#1-2-1-AMQP" class="headerlink" title="1.2.1    AMQP"></a>1.2.1    AMQP</h3><p>AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h3 id="1-2-2-JMS"><a href="#1-2-2-JMS" class="headerlink" title="1.2.2    JMS"></a>1.2.2    JMS</h3><p>JMS即Java消息服务（JavaMessage Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><h3 id="1-2-3-AMQP-与-JMS-区别"><a href="#1-2-3-AMQP-与-JMS-区别" class="headerlink" title="1.2.3    AMQP 与 JMS 区别"></a>1.2.3    AMQP 与 JMS 区别</h3><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模式；而AMQP的消息模式更加丰富</li></ul><h2 id="1-3-消息队列产品"><a href="#1-3-消息队列产品" class="headerlink" title="1.3    消息队列产品"></a>1.3    消息队列产品</h2><p>市场上常见的消息队列有如下：</p><ul><li>ActiveMQ：基于JMS</li><li>ZeroMQ：基于C语言开发</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li><li>RocketMQ：基于JMS，阿里巴巴产品</li><li>Kafka：类似MQ的产品；分布式消息系统，高吞吐量</li></ul><h2 id="1-4-RabbitMQ"><a href="#1-4-RabbitMQ" class="headerlink" title="1.4    RabbitMQ"></a>1.4    RabbitMQ</h2><p>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><p>RabbitMQ提供了6种模式：简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式（远程调用，不太算MQ；暂不作介绍）；</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></p><p><img src="https://img-blog.csdnimg.cn/20201010122305209.png" alt="image-20201009170632004"></p><h1 id="2-安装及配置RabbitMQ"><a href="#2-安装及配置RabbitMQ" class="headerlink" title="2.    安装及配置RabbitMQ"></a>2.    安装及配置RabbitMQ</h1><h2 id="2-1-安装Socat"><a href="#2-1-安装Socat" class="headerlink" title="2.1    安装Socat"></a>2.1    安装Socat</h2><p>在线安装依赖环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line">yum install socat</span><br></pre></td></tr></table></figure><h2 id="2-2-安装Erlang"><a href="#2-2-安装Erlang" class="headerlink" title="2.2    安装Erlang"></a>2.2    安装Erlang</h2><p><img src="https://img-blog.csdnimg.cn/20201010122323950.png" alt="image-20201009170829514"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /rabbitmq &amp;&amp; <span class="built_in">cd</span> /rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传 erlang-22.0.7-1.el7.x86_64.rpm 安装包上传</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="2-3-安装RabbitMQ"><a href="#2-3-安装RabbitMQ" class="headerlink" title="2.3    安装RabbitMQ"></a>2.3    安装RabbitMQ</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传 rabbitmq-server-3.7.17-1.el7.noarch.rpm 安装包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.7.17-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201010122337571.png" alt="image-20201009170959146"></p><h2 id="2-4-开启管理界面及配置"><a href="#2-4-开启管理界面及配置" class="headerlink" title="2.4    开启管理界面及配置"></a>2.4    开启管理界面及配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启管理界面</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置远程可使用guest登录mq</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/doc/rabbitmq-server-3.7.17</span><br><span class="line"></span><br><span class="line">cp rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vi /etc/rabbitmq/rabbitmq.config</span><br><span class="line"></span><br><span class="line">// 创建文件</span><br><span class="line">vi /etc/rabbitmq/rabbitmq-env.conf</span><br><span class="line"><span class="comment">#添加内容</span></span><br><span class="line">NODENAME=rabbit@localhost</span><br></pre></td></tr></table></figure><p>修改<code>/etc/rabbitmq/rabbitmq.config</code>配置文件：</p><p><img src="https://img-blog.csdnimg.cn/20201010122351228.png" alt="image-20201009171209807"></p><p><img src="https://img-blog.csdnimg.cn/2020101012240399.png" alt="image-20201009171220495"></p><h2 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5    启动"></a>2.5    启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">centos6用这个命令：</span><br><span class="line">/sbin/service rabbitmq-server restart</span><br><span class="line"></span><br><span class="line">centos7用这个命令：</span><br><span class="line">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="2-6-配置虚拟主机及用户"><a href="#2-6-配置虚拟主机及用户" class="headerlink" title="2.6    配置虚拟主机及用户"></a>2.6    配置虚拟主机及用户</h2><h3 id="2-6-1-用户角色"><a href="#2-6-1-用户角色" class="headerlink" title="2.6.1    用户角色"></a>2.6.1    用户角色</h3><p>RabbitMQ在安装好后，可以访问<code>http://ip地址:15672</code> ；其自带了guest/guest的用户名和密码；如果需要创建自定义用户；那么也可以登录管理界面后，如下操作：</p><p><img src="https://img-blog.csdnimg.cn/20201010122424134.png" alt="image-20201009171339054"></p><p><img src="https://img-blog.csdnimg.cn/20201010122436220.png" alt="image-20201009171416573"></p><p><strong>角色说明</strong>：</p><ul><li><p>超级管理员(administrator)</p><p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p>监控者(monitoring)</p><p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p>策略制定者(policymaker)</p><p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p>普通管理者(management)</p><p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li><li><p>其他</p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ul><h3 id="2-6-2-Virtual-Hosts配置"><a href="#2-6-2-Virtual-Hosts配置" class="headerlink" title="2.6.2    Virtual Hosts配置"></a>2.6.2    Virtual Hosts配置</h3><p>像mysql拥有数据库的概念并且可以指定用户对库和表等操作的权限。RabbitMQ也有类似的权限管理；在RabbitMQ中可以虚拟消息服务器Virtual Host，每个Virtual Hosts相当于一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。 相当于mysql的db。Virtual Name一般以/开头。</p><h4 id="2-6-2-1-创建Virtual-Hosts"><a href="#2-6-2-1-创建Virtual-Hosts" class="headerlink" title="2.6.2.1    创建Virtual Hosts"></a>2.6.2.1    创建Virtual Hosts</h4><p><img src="https://img-blog.csdnimg.cn/20201010122453172.png" alt="image-20201009171626561"></p><h4 id="2-6-2-2-设置Virtual-Hosts权限"><a href="#2-6-2-2-设置Virtual-Hosts权限" class="headerlink" title="2.6.2.2    设置Virtual Hosts权限"></a>2.6.2.2    设置Virtual Hosts权限</h4><p><img src="https://img-blog.csdnimg.cn/2020101012250754.png" alt="image-20201009171658869"></p><p><img src="https://img-blog.csdnimg.cn/20201010122519999.png" alt="image-20201009171712577"></p><p><img src="https://img-blog.csdnimg.cn/20201010122532993.png" alt="image-20201009171957088"></p><h1 id="3-RabbitMQ入门"><a href="#3-RabbitMQ入门" class="headerlink" title="3.    RabbitMQ入门"></a>3.    RabbitMQ入门</h1><h2 id="3-1-创建工程添加依赖"><a href="#3-1-创建工程添加依赖" class="headerlink" title="3.1    创建工程添加依赖"></a>3.1    创建工程添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--RabbitMQ的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-编写生产者"><a href="#3-2-编写生产者" class="headerlink" title="3.2    编写生产者"></a>3.2    编写生产者</h2><p>编写消息生产者com.wgy.rabbitmq.simple.Producer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 消息生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机地址;默认为 localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"192.168.142.128"</span>);</span><br><span class="line">        <span class="comment">//连接端口;默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机名称;默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">//连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">"wgy"</span>);</span><br><span class="line">        <span class="comment">//连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要发送的信息</span></span><br><span class="line">        String message = <span class="string">"你好；小兔子！"</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行上述的消息发送之后；可以登录rabbitMQ的管理控制台，可以发现队列和其消息：</p><p><img src="https://img-blog.csdnimg.cn/20201010122551196.png" alt="image-20201009172453328"></p><p><img src="https://img-blog.csdnimg.cn/20201010122605493.png" alt="image-20201009172514650"></p><h2 id="3-3-编写消费者"><a href="#3-3-编写消费者" class="headerlink" title="3.3    编写消费者"></a>3.3    编写消费者</h2><p>抽取创建connection的工具类com.wgy.rabbitmq.util.ConnectionUtil；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connection的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机地址;默认为 localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"192.168.142.128"</span>);</span><br><span class="line">        <span class="comment">//连接端口;默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机名称;默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">//连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">"wgy"</span>);</span><br><span class="line">        <span class="comment">//连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="keyword">return</span> connectionFactory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写消息的消费者com.wgy.rabbitmq.simple.Consumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不关闭资源，应该一直监听消息</span></span><br><span class="line">        <span class="comment">//channel.close();</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4    小结"></a>3.4    小结</h2><p>上述的入门案例中其实使用的是如下的简单模式：</p><p><img src="https://img-blog.csdnimg.cn/20201010122625581.png" alt="image-20201009172842254"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><blockquote><p>在rabbitMQ中消费者是一定要到某个消息队列中去获取消息的</p></blockquote><h1 id="4-AMQP"><a href="#4-AMQP" class="headerlink" title="4.    AMQP"></a>4.    AMQP</h1><h2 id="4-1-相关概念介绍"><a href="#4-1-相关概念介绍" class="headerlink" title="4.1. 相关概念介绍"></a>4.1. 相关概念介绍</h2><p>AMQP 一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><p>AMQP是一个二进制协议，拥有一些现代化特点：多信道、协商式，异步，安全，扩平台，中立，高效。</p><p>RabbitMQ是AMQP协议的Erlang的实现。</p><table><thead><tr><th align="left">概念</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">连接Connection</td><td align="left">一个网络连接，比如TCP/IP套接字连接。</td></tr><tr><td align="left">会话Session</td><td align="left">端点之间的命名对话。在一个会话上下文中，保证“恰好传递一次”。</td></tr><tr><td align="left">信道Channel</td><td align="left">多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。</td></tr><tr><td align="left">客户端Client</td><td align="left">AMQP连接或者会话的发起者。AMQP是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。</td></tr><tr><td align="left">服务节点Broker</td><td align="left">消息中间件的服务节点；一般情况下可以将一个RabbitMQ Broker看作一台RabbitMQ 服务器。</td></tr><tr><td align="left">端点</td><td align="left">AMQP对话的任意一方。一个AMQP连接包括两个端点（一个是客户端，一个是服务器）。</td></tr><tr><td align="left">消费者Consumer</td><td align="left">一个从消息队列里请求消息的客户端程序。</td></tr><tr><td align="left">生产者Producer</td><td align="left">一个向交换机发布消息的客户端应用程序。</td></tr></tbody></table><h2 id="4-2-RabbitMQ运转流程"><a href="#4-2-RabbitMQ运转流程" class="headerlink" title="4.2    RabbitMQ运转流程"></a>4.2    RabbitMQ运转流程</h2><p>在入门案例中：</p><ul><li>生产者发送消息<ol><li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li><li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li><li>将路由键（空字符串）与队列绑定起来；</li><li>发送消息至RabbitMQ Broker；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li><li>消费者接收消息<ol><li>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</li><li>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</li><li>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</li><li>确认（ack，自动确认）接收到的消息；</li><li>RabbitMQ从队列中删除相应已经被确认的消息；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li></ul><p><img src="https://img-blog.csdnimg.cn/2020101012264267.png" alt="image-20201009173246302"></p><h2 id="4-3-生产者流转过程说明"><a href="#4-3-生产者流转过程说明" class="headerlink" title="4.3    生产者流转过程说明"></a>4.3    生产者流转过程说明</h2><ol><li>客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQP 0-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>客户端调用connection.createChannel方法。此方法开启信道，其包装的channel.open命令发送给Broker,等待channel.basicPublish方法，对应的AMQP命令为Basic.Publish,这个命令包含了content Header 和content Body()。content Header 包含了消息体的属性，例如:投递模式，优先级等，content Body 包含了消息体本身。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="https://img-blog.csdnimg.cn/20201010122656366.png" alt="image-20201009173441245"></p><h2 id="4-4-消费者流转过程说明"><a href="#4-4-消费者流转过程说明" class="headerlink" title="4.4    消费者流转过程说明"></a>4.4    消费者流转过程说明</h2><ol><li>消费者客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQP 0-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>消费者客户端调用connection.createChannel方法。和生产者客户端一样，协议涉及Channel.Open/Open-Ok命令。</li><li>在真正消费之前，消费者客户端需要向Broker 发送Basic.Consume 命令(即调用channel.basicConsume 方法〉将Channel 置为接收模式，之后Broker 回执Basic.Consume - Ok 以告诉消费者客户端准备好消费消息。</li><li>Broker 向消费者客户端推送(Push) 消息，即Basic.Deliver 命令，这个命令和Basic.Publish 命令一样会携带Content Header 和Content Body。</li><li>消费者接收到消息并正确消费之后，向Broker 发送确认，即Basic.Ack 命令。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="https://img-blog.csdnimg.cn/20201010122711378.png" alt="image-20201009173742917"></p><h1 id="5-RabbitMQ工作模式"><a href="#5-RabbitMQ工作模式" class="headerlink" title="5.    RabbitMQ工作模式"></a>5.    RabbitMQ工作模式</h1><h2 id="5-1-Work-queues工作队列模式"><a href="#5-1-Work-queues工作队列模式" class="headerlink" title="5.1    Work queues工作队列模式"></a>5.1    Work queues工作队列模式</h2><h3 id="5-1-1-模式说明"><a href="#5-1-1-模式说明" class="headerlink" title="5.1.1    模式说明"></a>5.1.1    模式说明</h3><p><img src="https://img-blog.csdnimg.cn/20201010122741516.png" alt="image-20201009174655177"></p><p><code>Work Queues</code>与入门程序的<code>简单模式</code>相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</p><h3 id="5-1-2-代码"><a href="#5-1-2-代码" class="headerlink" title="5.1.2    代码"></a>5.1.2    代码</h3><p><code>Work Queues</code>与入门程序的<code>简单模式</code>的代码是几乎一样的；可以完全复制，并复制多一个消费者进行多个消费者同时消费消息的测试。</p><h4 id="5-1-2-1-生产者"><a href="#5-1-2-1-生产者" class="headerlink" title="5.1.2.1    生产者"></a>5.1.2.1    生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Work queues工作队列模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 消息生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 发送信息</span></span><br><span class="line">            String message = <span class="string">"你好；小兔子！work模式--"</span> + i;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">             * 参数4：消息内容</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-2-消费者1"><a href="#5-1-2-2-消费者1" class="headerlink" title="5.1.2.2    消费者1"></a>5.1.2.2    消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠一秒钟</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-3-消费者2"><a href="#5-1-2-3-消费者2" class="headerlink" title="5.1.2.3    消费者2"></a>5.1.2.3    消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠一秒钟</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-3-测试"><a href="#5-1-3-测试" class="headerlink" title="5.1.3    测试"></a>5.1.3    测试</h3><p>启动两个消费者，然后再启动生产者发送消息；到IDEA的两个消费者对应的控制台查看是否竞争性的接收到消息。</p><p><img src="https://img-blog.csdnimg.cn/20201010122802255.png" alt="image-20201009175654681"></p><p><img src="https://img-blog.csdnimg.cn/20201010122818356.png" alt="image-20201009175708698"></p><h3 id="5-1-4-小结"><a href="#5-1-4-小结" class="headerlink" title="5.1.4    小结"></a>5.1.4    小结</h3><p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系。</p><h2 id="5-2-订阅模式类型"><a href="#5-2-订阅模式类型" class="headerlink" title="5.2    订阅模式类型"></a>5.2    订阅模式类型</h2><p>订阅模式示例图：</p><p><img src="https://img-blog.csdnimg.cn/20201010122835127.png" alt="image-20201009175753649"></p><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分</li></ul><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="5-3-Publish-Subscribe发布与订阅模式"><a href="#5-3-Publish-Subscribe发布与订阅模式" class="headerlink" title="5.3    Publish/Subscribe发布与订阅模式"></a>5.3    Publish/Subscribe发布与订阅模式</h2><h3 id="5-3-1-模式说明"><a href="#5-3-1-模式说明" class="headerlink" title="5.3.1    模式说明"></a>5.3.1    模式说明</h3><p><img src="https://img-blog.csdnimg.cn/20201010122854654.png" alt="image-20201009175935312"></p><p>发布订阅模式： 1、每个消费者监听自己的队列。 2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息</p><h3 id="5-3-2-代码"><a href="#5-3-2-代码" class="headerlink" title="5.3.2    代码"></a>5.3.2    代码</h3><h4 id="5-3-2-1-生产者"><a href="#5-3-2-1-生产者" class="headerlink" title="5.3.2.1    生产者"></a>5.3.2.1    生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Publish/Subscribe发布与订阅模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * 发布与订阅使用的交换机类型为：fanout</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_EXCHANGE = <span class="string">"fanout_exchange"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_1 = <span class="string">"fanout_queue_1"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_2 = <span class="string">"fanout_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(FANOUT_EXCHANGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(FANOUT_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(FANOUT_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(FANOUT_QUEUE_1, FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line">        channel.queueBind(FANOUT_QUEUE_2, FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 发送信息</span></span><br><span class="line">            String message = <span class="string">"你好；小兔子！发布订阅模式--"</span> + i;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">             * 参数4：消息内容</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(FANOUT_EXCHANGE, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-2-消费者1"><a href="#5-3-2-2-消费者1" class="headerlink" title="5.3.2.2    消费者1"></a>5.3.2.2    消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.FANOUT_EXCHANGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.FANOUT_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.FANOUT_QUEUE_1, Producer.FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.FANOUT_QUEUE_1, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-3-消费者2"><a href="#5-3-2-3-消费者2" class="headerlink" title="5.3.2.3    消费者2"></a>5.3.2.3    消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.FANOUT_EXCHANGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.FANOUT_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.FANOUT_QUEUE_2, Producer.FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.FANOUT_QUEUE_2, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-测试"><a href="#5-3-3-测试" class="headerlink" title="5.3.3. 测试"></a>5.3.3. 测试</h3><p>启动所有消费者，然后使用生产者发送消息；在每个消费者对应的控制台可以查看到生产者发送的所有消息；到达<strong>广播</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>fanout_exchange</code> 的交换机，可以查看到如的绑定：</p><p><img src="https://img-blog.csdnimg.cn/2020101012291357.png" alt="image-20201009180701439"></p><h3 id="5-3-4-小结"><a href="#5-3-4-小结" class="headerlink" title="5.3.4    小结"></a>5.3.4    小结</h3><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><p><strong>发布订阅模式与工作队列模式的区别：</strong></p><ul><li>工作队列模式不用定义交换机，而发布/订阅模式需要定义交换机。</li><li>发布/订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)。</li><li>发布/订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑 定到默认的交换机 。</li></ul><h2 id="5-4-Routing路由模式"><a href="#5-4-Routing路由模式" class="headerlink" title="5.4    Routing路由模式"></a>5.4    Routing路由模式</h2><h3 id="5-4-1-模式说明"><a href="#5-4-1-模式说明" class="headerlink" title="5.4.1    模式说明"></a>5.4.1    模式说明</h3><p>路由模式特点：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><img src="https://img-blog.csdnimg.cn/20201010122932269.png" alt="image-20201009182127045"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h3 id="5-4-2-代码"><a href="#5-4-2-代码" class="headerlink" title="5.4.2    代码"></a>5.4.2    代码</h3><p>在编码上与 <code>Publish/Subscribe发布与订阅模式</code> 的区别是交换机的类型为：Direct，还有队列绑定交换机的时候需要指定routing key。</p><h4 id="5-4-2-1-生产者"><a href="#5-4-2-1-生产者" class="headerlink" title="5.4.2.1    生产者"></a>5.4.2.1    生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Routing路由模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * 路由模式的交换机类型为：direct</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_EXCHANGE = <span class="string">"direct_exchange"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE_INSERT = <span class="string">"direct_queue_insert"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE_UPDATE = <span class="string">"direct_queue_update"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(DIRECT_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(DIRECT_QUEUE_INSERT, DIRECT_EXCHANGE, <span class="string">"insert"</span>);</span><br><span class="line">        channel.queueBind(DIRECT_QUEUE_UPDATE, DIRECT_EXCHANGE, <span class="string">"update"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        String message = <span class="string">"新增了商品。路由模式；routing key 为 insert "</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(DIRECT_EXCHANGE, <span class="string">"insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">"修改了商品。路由模式；routing key 为 update"</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(DIRECT_EXCHANGE, <span class="string">"update"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-2-消费者1"><a href="#5-4-2-2-消费者1" class="headerlink" title="5.4.2.2    消费者1"></a>5.4.2.2    消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.DIRECT_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.DIRECT_QUEUE_INSERT, Producer.DIRECT_EXCHANGE, <span class="string">"insert"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-3-消费者2"><a href="#5-4-2-3-消费者2" class="headerlink" title="5.4.2.3    消费者2"></a>5.4.2.3    消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.DIRECT_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.DIRECT_QUEUE_UPDATE, Producer.DIRECT_EXCHANGE, <span class="string">"update"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-测试"><a href="#5-4-3-测试" class="headerlink" title="5.4.3    测试"></a>5.4.3    测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>direct_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="https://img-blog.csdnimg.cn/20201010122955501.png" alt="image-20201009183006094"></p><h3 id="5-4-4-小结"><a href="#5-4-4-小结" class="headerlink" title="5.4.4. 小结"></a>5.4.4. 小结</h3><p>Routing模式要求队列在绑定交换机时要指定routing key，消息会转发到符合routing key的队列。</p><h2 id="5-5-Topics通配符模式"><a href="#5-5-Topics通配符模式" class="headerlink" title="5.5    Topics通配符模式"></a>5.5    Topics通配符模式</h2><h3 id="5-5-1-模式说明"><a href="#5-5-1-模式说明" class="headerlink" title="5.5.1    模式说明"></a>5.5.1    模式说明</h3><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候<strong>使用通配符</strong>！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p>通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.insert.abc</code> 或者 <code>item.insert</code></p><p><code>item.*</code>：只能匹配<code>item.insert</code></p><h3 id="5-5-2-代码"><a href="#5-5-2-代码" class="headerlink" title="5.5.2    代码"></a>5.5.2    代码</h3><h4 id="5-5-2-1-生产者"><a href="#5-5-2-1-生产者" class="headerlink" title="5.5.2.1    生产者"></a>5.5.2.1    生产者</h4><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.insert</code>、<code>item.update</code>、<code>item.delete</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Topics通配符模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * 通配符Topic的交换机类型为：topic</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHANGE = <span class="string">"topic_exchange"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_1 = <span class="string">"topic_queue_1"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_2 = <span class="string">"topic_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、topic、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(TOPIC_EXCHANGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        String message = <span class="string">"新增了商品。Topic模式；routing key 为 item.insert "</span>;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHANGE, <span class="string">"item.insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">"修改了商品。Topic模式；routing key 为 item.update"</span>;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHANGE, <span class="string">"item.update"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">"删除了商品。Topic模式；routing key 为 item.delete"</span>;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHANGE, <span class="string">"item.delete"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-2-消费者1"><a href="#5-2-2-2-消费者1" class="headerlink" title="5.2.2.2    消费者1"></a>5.2.2.2    消费者1</h4><p>接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.TOPIC_EXCHANGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.TOPIC_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHANGE, <span class="string">"item.update"</span>);</span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHANGE, <span class="string">"item.delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.TOPIC_QUEUE_1, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-3-消费者2"><a href="#5-2-2-3-消费者2" class="headerlink" title="5.2.2.3    消费者2"></a>5.2.2.3    消费者2</h4><p>接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.TOPIC_EXCHANGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.TOPIC_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_2, Producer.TOPIC_EXCHANGE, <span class="string">"item.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.TOPIC_QUEUE_2, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-3-测试"><a href="#5-5-3-测试" class="headerlink" title="5.5.3    测试"></a>5.5.3    测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果；并且这些routing key可以使用通配符。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>topic_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="https://img-blog.csdnimg.cn/2020101012302493.png" alt="image-20201009184440606"></p><h3 id="5-5-4-小结"><a href="#5-5-4-小结" class="headerlink" title="5.5.4. 小结"></a>5.5.4. 小结</h3><p>Topic主题模式可以实现 <code>Publish/Subscribe发布与订阅模式</code> 和 <code>Routing路由模式</code> 的功能；只是Topic在配置routing key 的时候可以使用通配符，显得更加灵活。</p><h2 id="5-6-模式总结"><a href="#5-6-模式总结" class="headerlink" title="5.6    模式总结"></a>5.6    模式总结</h2><p>RabbitMQ工作模式： </p><p><strong>1、简单模式 HelloWorld</strong> 一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><strong>2、工作队列模式 Work Queue</strong> 一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><strong>3、发布订阅模式 Publish/subscribe</strong> 需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><strong>4、路由模式 Routing</strong> 需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p><strong>5、通配符模式 Topic</strong> 需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><h1 id="6-Spring-Boot整合RabbitMQ"><a href="#6-Spring-Boot整合RabbitMQ" class="headerlink" title="6.    Spring Boot整合RabbitMQ"></a>6.    Spring Boot整合RabbitMQ</h1><h2 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1    简介"></a>6.1    简介</h2><p>在Spring项目中，可以使用Spring-Rabbit去操作RabbitMQ <a href="https://github.com/spring-projects/spring-amqp" target="_blank" rel="noopener">https://github.com/spring-projects/spring-amqp</a></p><p>尤其是在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。</p><p><em>一般在开发过程中</em>：</p><p><strong>生产者工程：</strong></p><ol><li>application.yml文件配置RabbitMQ相关信息；</li><li>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</li><li>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</li></ol><p><strong>消费者工程：</strong></p><ol><li>application.yml文件配置RabbitMQ相关信息</li><li>创建消息处理类，用于接收队列中的消息并进行处理</li></ol><h2 id="6-2-搭建生产者工程"><a href="#6-2-搭建生产者工程" class="headerlink" title="6.2    搭建生产者工程"></a>6.2    搭建生产者工程</h2><h3 id="6-2-1-创建工程添加依赖"><a href="#6-2-1-创建工程添加依赖" class="headerlink" title="6.2.1    创建工程添加依赖"></a>6.2.1    创建工程添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rabbitmq-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用springmvc来进行测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--amqp的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-2-配置RabbitMQ"><a href="#6-2-2-配置RabbitMQ" class="headerlink" title="6.2.2    配置RabbitMQ"></a>6.2.2    配置RabbitMQ</h3><h4 id="6-2-2-1-配置文件"><a href="#6-2-2-1-配置文件" class="headerlink" title="6.2.2.1    配置文件"></a>6.2.2.1    配置文件</h4><p>创建application.yml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="comment">#Rabbitmq的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="6-2-2-2-绑定交换机和队列"><a href="#6-2-2-2-绑定交换机和队列" class="headerlink" title="6.2.2.2    绑定交换机和队列"></a>6.2.2.2    绑定交换机和队列</h4><p>创建RabbitMQ队列与交换机绑定的配置类com.wgy.rabbitmq.config.RabbitMQConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_TOPIC_EXCHANGE = <span class="string">"item_topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_QUEUE = <span class="string">"item_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"itemTopicExchange"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"itemQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">itemQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(ITEM_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">itemQueueExchange</span><span class="params">(@Qualifier(<span class="string">"itemQueue"</span>)</span> Queue queue, @<span class="title">Qualifier</span><span class="params">(<span class="string">"itemTopicExchange"</span>)</span> Exchange exchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">"item.#"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3-启动类"><a href="#6-2-3-启动类" class="headerlink" title="6.2.3    启动类"></a>6.2.3    启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者的启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-消息发送Controller"><a href="#6-2-4-消息发送Controller" class="headerlink" title="6.2.4    消息发送Controller"></a>6.2.4    消息发送Controller</h3><p>我们创建一个SpringMVC的Controller方便我们进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息的测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMsgController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入RabbitMQ的模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendmsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(@RequestParam String msg, @RequestParam String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 发送消息</span></span><br><span class="line"><span class="comment">         * 参数一：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数二：路由key</span></span><br><span class="line"><span class="comment">         * 参数三：发送的消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, key, msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回消息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"发送消息成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-搭建消费者工程"><a href="#6-3-搭建消费者工程" class="headerlink" title="6.3    搭建消费者工程"></a>6.3    搭建消费者工程</h2><h3 id="6-3-1-创建工程添加依赖"><a href="#6-3-1-创建工程添加依赖" class="headerlink" title="6.3.1    创建工程添加依赖"></a>6.3.1    创建工程添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rabbitmq-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-2-配置RabbitMQ"><a href="#6-3-2-配置RabbitMQ" class="headerlink" title="6.3.2    配置RabbitMQ"></a>6.3.2    配置RabbitMQ</h3><p>创建application.yml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"><span class="comment">#Rabbitmq的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="6-3-3-启动类"><a href="#6-3-3-启动类" class="headerlink" title="6.3.3    启动类"></a>6.3.3    启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-4-消息监听处理类"><a href="#6-3-4-消息监听处理类" class="headerlink" title="6.3.4    消息监听处理类"></a>6.3.4    消息监听处理类</h3><p>编写消息监听器com.wgy.rabbitmq.listener.MyListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者监听类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听某个队列的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收到的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"item_queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListener1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者接收到的消息为："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-5-测试"><a href="#6-3-5-测试" class="headerlink" title="6.3.5    测试"></a>6.3.5    测试</h3><p><img src="https://img-blog.csdnimg.cn/20201010123102469.png" alt="image-20201009202410811"></p><p>在生产者工程springboot-rabbitmq-producer中创建测试类，发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">"item.insert"</span>, <span class="string">"商品新增，routing key 为item.insert"</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">"item.update"</span>, <span class="string">"商品修改，routing key 为item.update"</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">"item.delete"</span>, <span class="string">"商品删除，routing key 为item.delete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先运行上述测试程序（交换机和队列才能先被声明和绑定），然后启动消费者；在消费者工程springboot-rabbitmq-consumer中控制台查看是否接收到对应消息。</p><h1 id="7-RabbitMQ-高级"><a href="#7-RabbitMQ-高级" class="headerlink" title="7.    RabbitMQ 高级"></a>7.    RabbitMQ 高级</h1><h2 id="7-1-过期时间TTL"><a href="#7-1-过期时间TTL" class="headerlink" title="7.1    过期时间TTL"></a>7.1    过期时间TTL</h2><p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ可以对<strong>消息和队列</strong>设置TTL。目前有两种方法可以设置。</p><ul><li>第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间。</li><li>第二种方法是对消息进行单独设置，每条消息TTL可以不同。</li></ul><p>如果上述两种方法同时使用，则消息的过期时间以两者之间TTL较小的那个数值为准。消息在队列的生存时间一旦超过设置的TTL值，就称为dead message被投递到死信队列， 消费者将无法再收到该消息。</p><h3 id="7-1-1-设置队列TTL"><a href="#7-1-1-设置队列TTL" class="headerlink" title="7.1.1    设置队列TTL"></a>7.1.1    设置队列TTL</h3><p>在 <code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code> 文件中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义过期队列及其属性，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_ttl_queue"</span> <span class="attr">name</span>=<span class="string">"my_ttl_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--投递到该队列的消息如果没有消费都将在6秒之后被删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-message-ttl"</span> <span class="attr">value-type</span>=<span class="string">"long"</span> <span class="attr">value</span>=<span class="string">"6000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类导入配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者的启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//导入配置文件</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:/spring/spring-rabbitmq.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在测试类 <code>springboot-rabbitmq-producer\src\test\java\com\wgy\rabbitmq\ProducerTest.java</code> 中编写如下方法发送消息到上述定义的队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期队列消息</span></span><br><span class="line"><span class="comment"> * 投递到该队列的消息如果没有消费都将在6秒之后被删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlQueueTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"my_ttl_queue"</span>, <span class="string">"发送到过期队列my_ttl_queue，6秒内不消费则不能再被消费。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数 x-message-ttl 的值 必须是非负 32 位整数 (0 &lt;= n &lt;= 2^32-1) ，以毫秒为单位表示 TTL 的值。这样，值 6000 表示存在于 队列 中的当前 消息 将最多只存活 6 秒钟。</p></blockquote><p>如果不设置TTL,则表示此消息不会过期。如果将TTL设置为0，则表示除非此时可以直接将消息投递到消费者，否则该消息会被立即丢弃。</p><p><img src="https://img-blog.csdnimg.cn/2020101012312537.png" alt="image-20201009204626436"></p><h3 id="7-1-2-设置消息TTL"><a href="#7-1-2-设置消息TTL" class="headerlink" title="7.1.2    设置消息TTL"></a>7.1.2    设置消息TTL</h3><p>消息的过期时间；只需要在发送消息（可以发送到任何队列，不管该队列是否属于某个交换机）的时候设置过期时间即可。在测试类中编写如下方法发送消息并设置过期时间到队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期消息</span></span><br><span class="line"><span class="comment"> * 该消息投递任何交换机或队列中的时候；如果到了过期时间则将从该队列中删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlMessageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    <span class="comment">//设置消息的过期时间，3秒</span></span><br><span class="line">    messageProperties.setExpiration(<span class="string">"3000"</span>);</span><br><span class="line"></span><br><span class="line">    Message message = <span class="keyword">new</span> Message(<span class="string">"测试过期消息，3秒钟过期"</span>.getBytes(), messageProperties);</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"my_ttl_queue"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>expiration 字段以微秒为单位表示 TTL 值。且与 x-message-ttl 具有相同的约束条件。因为 expiration 字段必须为字符串类型，broker 将只会接受以字符串形式表达的数字。</p><p>当同时指定了 queue 和 message 的 TTL 值，则两者中较小的那个才会起作用。</p></blockquote><h2 id="7-2-死信队列"><a href="#7-2-死信队列" class="headerlink" title="7.2    死信队列"></a>7.2    死信队列</h2><p>DLX，全称为Dead-Letter-Exchange , 可以称之为死信交换机，也有人称之为死信邮箱。当消息在一个队列中变成死信(dead message)之后，它能被重新发送到另一个交换机中，这个交换机就是DLX ，绑定DLX的队列就称之为死信队列。</p><p>消息变成死信，可能是由于以下的原因：</p><ul><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ul><p>DLX也是一个正常的交换机，和一般的交换机没有区别，它能在任何的队列上被指定，实际上就是设置某一个队列的属性。当这个队列中存在死信时，Rabbitmq就会自动地将这个消息重新发布到设置的DLX上去，进而被路由到另一个队列，即死信队列。</p><p>要想使用死信队列，只需要在定义队列的时候设置队列参数 <code>x-dead-letter-exchange</code> 指定交换机即可。</p><p>具体步骤如下面的章节。</p><h3 id="7-2-1-定义死信交换机"><a href="#7-2-1-定义死信交换机" class="headerlink" title="7.2.1    定义死信交换机"></a>7.2.1    定义死信交换机</h3><p>在 <code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code> 文件中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义定向交换机中的持久化死信队列，不存在则自动创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_dlx_queue"</span> <span class="attr">name</span>=<span class="string">"my_dlx_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义广播类型交换机；并绑定上述两个队列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">id</span>=<span class="string">"my_dlx_exchange"</span> <span class="attr">name</span>=<span class="string">"my_dlx_exchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定路由键my_ttl_dlx、my_max_dlx，可以将过期的消息转移到my_dlx_queue队列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_ttl_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_dlx_queue"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_max_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_dlx_queue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2-队列设置死信交换机"><a href="#7-2-2-队列设置死信交换机" class="headerlink" title="7.2.2    队列设置死信交换机"></a>7.2.2    队列设置死信交换机</h3><p>为了测试消息在过期、队列达到最大长度后都将被投递死信交换机上；所以添加配置如下：</p><p>在 <code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code> 文件中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义过期队列及其属性，不存在则自动创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_ttl_dlx_queue"</span> <span class="attr">name</span>=<span class="string">"my_ttl_dlx_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--投递到该队列的消息如果没有消费都将在6秒之后被投递到死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-message-ttl"</span> <span class="attr">value-type</span>=<span class="string">"long"</span> <span class="attr">value</span>=<span class="string">"6000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置当消息过期后投递到对应的死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-dead-letter-exchange"</span> <span class="attr">value</span>=<span class="string">"my_dlx_exchange"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义限制长度的队列及其属性，不存在则自动创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_max_dlx_queue"</span> <span class="attr">name</span>=<span class="string">"my_max_dlx_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--投递到该队列的消息最多2个消息，如果超过则最早的消息被删除投递到死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-max-length"</span> <span class="attr">value-type</span>=<span class="string">"long"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置当消息过期后投递到对应的死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-dead-letter-exchange"</span> <span class="attr">value</span>=<span class="string">"my_dlx_exchange"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义定向交换机 根据不同的路由key投递消息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">id</span>=<span class="string">"my_normal_exchange"</span> <span class="attr">name</span>=<span class="string">"my_normal_exchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_ttl_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_ttl_dlx_queue"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_max_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_max_dlx_queue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-3-消息过期的死信队列测试"><a href="#7-2-3-消息过期的死信队列测试" class="headerlink" title="7.2.3    消息过期的死信队列测试"></a>7.2.3    消息过期的死信队列测试</h3><h4 id="7-2-3-1-发送消息代码"><a href="#7-2-3-1-发送消息代码" class="headerlink" title="7.2.3.1    发送消息代码"></a>7.2.3.1    发送消息代码</h4><p>添加 <code>springboot-rabbitmq-producer\src\test\java\com\itheima\rabbitmq\ProducerTest.java</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期消息投递到死信队列</span></span><br><span class="line"><span class="comment"> * 投递到一个正常的队列，但是该队列有设置过期时间，到过期时间之后消息会被投递到死信交换机（队列）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dlxTTLMessageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_ttl_dlx"</span>,</span><br><span class="line">            <span class="string">"测试过期消息；6秒过期后会被投递到死信交换机"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-3-2-RabbitMQ管理界面"><a href="#7-2-3-2-RabbitMQ管理界面" class="headerlink" title="7.2.3.2    RabbitMQ管理界面"></a>7.2.3.2    RabbitMQ管理界面</h4><p>未过期：</p><p><img src="https://img-blog.csdnimg.cn/20201010123144841.png" alt="image-20201009205644339"></p><p>过期后：</p><p><img src="https://img-blog.csdnimg.cn/20201010123158431.png" alt="image-20201009210157701"></p><h4 id="7-2-3-3-流程"><a href="#7-2-3-3-流程" class="headerlink" title="7.2.3.3    流程"></a>7.2.3.3    流程</h4><p>具体因为队列消息过期而被投递到死信队列的流程：</p><p><img src="https://img-blog.csdnimg.cn/20201010123214497.png" alt="image-20201009210254208"></p><h3 id="7-2-4-消息过长的死信队列测试"><a href="#7-2-4-消息过长的死信队列测试" class="headerlink" title="7.2.4    消息过长的死信队列测试"></a>7.2.4    消息过长的死信队列测试</h3><h4 id="7-2-4-1-发送消息代码"><a href="#7-2-4-1-发送消息代码" class="headerlink" title="7.2.4.1    发送消息代码"></a>7.2.4.1    发送消息代码</h4><p>添加 <code>springboot-rabbitmq-producer\src\test\java\com\itheima\rabbitmq\ProducerTest.java</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息长度超过2，会投递到死信队列中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dlxMaxMessageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_max_dlx"</span>,</span><br><span class="line">            <span class="string">"发送消息1：消息长度超过2，会被投递到死信队列中！"</span>);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_max_dlx"</span>,</span><br><span class="line">            <span class="string">"发送消息2：消息长度超过2，会被投递到死信队列中！"</span>);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_max_dlx"</span>,</span><br><span class="line">            <span class="string">"发送消息3：消息长度超过2，会被投递到死信队列中！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-4-2-RabbitMQ管理界面"><a href="#7-2-4-2-RabbitMQ管理界面" class="headerlink" title="7.2.4.2    RabbitMQ管理界面"></a>7.2.4.2    RabbitMQ管理界面</h4><p>上面发送的3条消息中的第1条消息会被投递到死信队列中（如果启动了消费者，那么队列消息很快会被取走消费掉）；</p><p><img src="https://img-blog.csdnimg.cn/20201010123228836.png" alt="image-20201009210522629"></p><h4 id="7-2-4-3-消费者接收死信队列消息"><a href="#7-2-4-3-消费者接收死信队列消息" class="headerlink" title="7.2.4.3    消费者接收死信队列消息"></a>7.2.4.3    消费者接收死信队列消息</h4><p>与过期消息投递到死信队列的代码和配置是共用的，并不需要重新编写。</p><h4 id="7-2-4-4-流程"><a href="#7-2-4-4-流程" class="headerlink" title="7.2.4.4    流程"></a>7.2.4.4    流程</h4><p>消息超过队列最大消息长度而被投递到死信队列的流程在前面的图中已包含。</p><h2 id="7-3-延迟队列"><a href="#7-3-延迟队列" class="headerlink" title="7.3    延迟队列"></a>7.3    延迟队列</h2><p>延迟队列存储的对象是对应的延迟消息；所谓“延迟消息” 是指当消息被发送以后，并不想让消费者立刻拿到消息，而是等待特定时间后，消费者才能拿到这个消息进行消费。</p><p>在RabbitMQ中延迟队列可以通过 <code>过期时间</code> + <code>死信队列</code> 来实现；具体如下流程图所示：</p><p><img src="https://img-blog.csdnimg.cn/20201010123243722.png" alt="image-20201009211706305"></p><p>在上图中；分别设置了两个5秒、10秒的过期队列，然后等到时间到了则会自动将这些消息转移投递到对应的死信队列中，然后消费者再从这些死信队列接收消息就可以实现消息的延迟接收。</p><p>延迟队列的应用场景；如：</p><ul><li>在电商项目中的支付场景；如果在用户下单之后的几十分钟内没有支付成功；那么这个支付的订单算是支付失败，要进行支付失败的异常处理（将库存加回去），这时候可以通过使用延迟队列来处理</li><li>在系统中如有需要在指定的某个时间之后执行的任务都可以通过延迟队列处理</li></ul><h2 id="7-4-消息确认机制"><a href="#7-4-消息确认机制" class="headerlink" title="7.4    消息确认机制"></a>7.4    消息确认机制</h2><p>确认并且保证消息被送达，提供了两种方式：发布确认和事务。(两者不可同时使用)在channel为事务时，不可引入确认模式；同样channel为确认模式下，不可使用事务。</p><h3 id="7-4-1-发布确认"><a href="#7-4-1-发布确认" class="headerlink" title="7.4.1 发布确认"></a>7.4.1 发布确认</h3><p>有两种方式：消息发送成功确认和消息发送失败回调。</p><h4 id="7-4-1-1-消息发送成功确认"><a href="#7-4-1-1-消息发送成功确认" class="headerlink" title="7.4.1.1    消息发送成功确认"></a>7.4.1.1    消息发送成功确认</h4><p>在<code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code></p><p>connectionFactory 中启用消息确认：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- publisher-confirms="true" 表示：启用了消息确认 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">port</span>=<span class="string">"5672"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">username</span>=<span class="string">"wgy"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">password</span>=<span class="string">"123456"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">virtual-host</span>=<span class="string">"/test"</span>/&gt;</span></span><br><span class="line">                           publisher-confirms="true"/&gt;</span><br></pre></td></tr></table></figure><p>配置消息确认回调方法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消息回调处理类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"confirmCallback"</span> <span class="attr">class</span>=<span class="string">"com.wgy.rabbitmq.MsgSendConfirmCallBack"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- confirm-callback="confirmCallback" 表示：消息确认回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">confirm-callback</span>=<span class="string">"confirmCallback"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>消息确认回调方法com.wgy.rabbitmq.MsgSendConfirmCallBack如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息确认回调方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgSendConfirmCallBack</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消息确认成功...."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理丢失的消息</span></span><br><span class="line">            System.out.println(<span class="string">"消息确认失败,"</span> + cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能测试如下：</p><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息确认</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"spring_queue"</span>, <span class="string">"只发队列spring_queue的消息。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理界面确认消息发送成功</p><p><img src="https://img-blog.csdnimg.cn/20201010123309939.png" alt="image-20201009213400014"></p><p>消息确认回调</p><p><img src="https://img-blog.csdnimg.cn/20201010123331866.png" alt="image-20201009213424619"></p><h4 id="7-4-1-2-消息发送失败回调"><a href="#7-4-1-2-消息发送失败回调" class="headerlink" title="7.4.1.2    消息发送失败回调"></a>7.4.1.2    消息发送失败回调</h4><p>在<code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code></p><p>connectionFactory 中启用回调：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- publisher-returns="true" 表示：启用了失败回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">port</span>=<span class="string">"5672"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">username</span>=<span class="string">"wgy"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">password</span>=<span class="string">"123456"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">virtual-host</span>=<span class="string">"/test"</span>/&gt;</span></span><br><span class="line">                           publisher-returns="true"/&gt;</span><br></pre></td></tr></table></figure><p>配置消息失败回调方法如下：</p><blockquote><p>注意：同时需配置mandatory=”true”，否则消息则丢失</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消息失败回调处理类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sendReturnCallback"</span> <span class="attr">class</span>=<span class="string">"com.wgy.rabbitmq.MsgSendReturnCallback"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- return-callback="sendReturnCallback" 表示：消息失败回调 ,同时需配置mandatory="true"，否则消息则丢失--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">confirm-callback</span>=<span class="string">"confirmCallback"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">return-callback</span>=<span class="string">"sendReturnCallback"</span> <span class="attr">mandatory</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>消息失败回调方法com.wgy.rabbitmq.MsgSendReturnCallback如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息失败回调方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgSendReturnCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> i, String s, String s1, String s2)</span> </span>&#123;</span><br><span class="line">        String msgJson = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        System.out.println(<span class="string">"Returned Message："</span> + msgJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能测试如下：</p><p>模拟消息发送失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFailQueueTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//exchange 正确,queue 错误 ,confirm被回调, ack=true; return被回调 replyText:NO_ROUTE</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"test_fail_exchange"</span>, <span class="string">""</span>, <span class="string">"测试消息发送失败进行确认应答。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失败回调结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20201010123352126.png" alt="image-20201009214157010"></p><h3 id="7-4-2-事务支持"><a href="#7-4-2-事务支持" class="headerlink" title="7.4.2    事务支持"></a>7.4.2    事务支持</h3><p>场景：业务处理伴随消息的发送，业务处理失败（事务回滚）后要求消息不发送。rabbitmq 使用调用者的外部事务，通常是首选，因为它是非侵入性的（低耦合）。</p><p>外部事务的配置：<code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- channel-transacted="true" 表示：支持事务操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">confirm-callback</span>=<span class="string">"confirmCallback"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">return-callback</span>=<span class="string">"sendReturnCallback"</span> <span class="attr">channel-transacted</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.amqp.rabbit.transaction.RabbitTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>模拟业务处理失败的场景：</p><p>测试类或者测试方法上加入@Transactional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="comment">//@Rollback(false)//在测试的时候，需要手动的方式制定回滚的策略</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"spring_queue"</span>, <span class="string">"只发队列spring_queue的消息--01。"</span>);</span><br><span class="line">    System.out.println(<span class="string">"----------------dosoming:可以是数据库的操作，也可以是其他业务类型的操作---------------"</span>);</span><br><span class="line">    <span class="comment">//模拟业务处理失败</span></span><br><span class="line">    System.out.println(<span class="number">1</span> / <span class="number">0</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"spring_queue"</span>, <span class="string">"只发队列spring_queue的消息--02。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img-blog.csdnimg.cn/20201010123411440.png" alt="image-20201010115015765"></p></li></ul><h2 id="7-5-消息追踪"><a href="#7-5-消息追踪" class="headerlink" title="7.5    消息追踪"></a>7.5    消息追踪</h2><p>消息中心的消息追踪需要使用Trace实现，Trace是Rabbitmq用于记录每一次发送的消息，方便使用Rabbitmq的开发者调试、排错。可通过插件形式提供可视化界面。Trace启动后会自动创建系统Exchange：amq.rabbitmq.trace ,每个队列会自动绑定该Exchange，绑定后发送到队列的消息都会记录到Trace日志。</p><h3 id="7-5-1-消息追踪启用与查看"><a href="#7-5-1-消息追踪启用与查看" class="headerlink" title="7.5.1    消息追踪启用与查看"></a>7.5.1    消息追踪启用与查看</h3><p>以下是trace的相关命令和使用（要使用需要先rabbitmq启用插件，再打开开关才能使用）：</p><table><thead><tr><th align="left">命令集</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">rabbitmq-plugins list</td><td align="left">查看插件列表</td></tr><tr><td align="left">rabbitmq-plugins enable rabbitmq_tracing</td><td align="left">rabbitmq启用trace插件</td></tr><tr><td align="left">rabbitmqctl trace_on</td><td align="left">打开trace的开关</td></tr><tr><td align="left">rabbitmqctl trace_on -p itcast</td><td align="left">打开trace的开关(itcast为需要日志追踪的vhost)</td></tr><tr><td align="left">rabbitmqctl trace_off</td><td align="left">关闭trace的开关</td></tr><tr><td align="left">rabbitmq-plugins disable rabbitmq_tracing</td><td align="left">rabbitmq关闭Trace插件</td></tr><tr><td align="left">rabbitmqctl set_user_tags heima administrator</td><td align="left">只有administrator的角色才能查看日志界面</td></tr></tbody></table><p>安装插件并开启 trace_on 之后，会发现多个 exchange：amq.rabbitmq.trace ，类型为：topic。</p><p><img src="https://img-blog.csdnimg.cn/20201010123437340.png" alt="image-20201010115208825"></p><h3 id="7-5-2-日志追踪"><a href="#7-5-2-日志追踪" class="headerlink" title="7.5.2 日志追踪"></a>7.5.2 日志追踪</h3><p><strong>第一步</strong>：发送消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(&quot;spring_queue&quot;, &quot;只发队列spring_queue的消息--01。&quot;);</span><br></pre></td></tr></table></figure><p>发送成功，web查看多了一条消息</p><p><img src="https://img-blog.csdnimg.cn/20201010123456112.png" alt="image-20201010115248052"></p><p><strong>第二步</strong>：查看trace</p><p><img src="https://img-blog.csdnimg.cn/20201010123515420.png" alt="image-20201010115509051"></p><p><strong>第三步</strong>：点击Tracing查看Trace log files</p><p><img src="https://img-blog.csdnimg.cn/20201010123530349.png" alt="image-20201010115524941"></p><p><strong>第四步</strong>：点击itcast-trace.log确认消息轨迹正确性</p><p>url：<a href="http://127.0.0.1:15672/api/trace-files/itcast-trace.log" target="_blank" rel="noopener">http://127.0.0.1:15672/api/trace-files/itcast-trace.log</a></p><p><img src="https://img-blog.csdnimg.cn/20201010123546110.png" alt="image-20201010115544087"></p><h1 id="8-RabbitMQ集群架构模式"><a href="#8-RabbitMQ集群架构模式" class="headerlink" title="8.    RabbitMQ集群架构模式"></a>8.    RabbitMQ集群架构模式</h1><h2 id="8-1-主备模式"><a href="#8-1-主备模式" class="headerlink" title="8.1    主备模式"></a>8.1    主备模式</h2><p>用来实现RabbitMQ的高可用集群,一般是在并发和数据不是特别多的时候使用,当主节点挂掉以后会从备份节点中选择一个节点出来作为主节点对外提供服务。</p><p><img src="https://img-blog.csdnimg.cn/20201010123603292.png" alt="image-20201010115834461"></p><h2 id="8-2-远程模式"><a href="#8-2-远程模式" class="headerlink" title="8.2    远程模式"></a>8.2    远程模式</h2><p>主要用来实现双活,简称为Shovel模式,所谓的Shovel模式就是让我们可以把消息复制到不同的数据中心,让两个跨地域的集群互联。</p><p><img src="https://img-blog.csdnimg.cn/20201010123615696.png" alt="image-20201010115908963"></p><h2 id="8-3-镜像队列模式"><a href="#8-3-镜像队列模式" class="headerlink" title="8.3    镜像队列模式"></a>8.3    镜像队列模式</h2><p>镜像队列也被称为Mirror队列,主要是用来保证mq消息的可靠性的,他通过消息复制的方式能够保证我们的消息100%不丢失,同时该集群模式也是企业中使用最多的模式。</p><p><img src="https://img-blog.csdnimg.cn/20201010123632386.png" alt="image-20201010115946837"></p><h2 id="8-4-多活模式"><a href="#8-4-多活模式" class="headerlink" title="8.4    多活模式"></a>8.4    多活模式</h2><p>多活模式主要是用来实现异地数据复制，Shovel模式其实也可以实现,但是他的配置及其繁琐同时还要受到版本的限制,所以如果做异地多活我们更加推荐使用多活模式,使用多活模式我们需要借助federation插件来实现集群与集群之间或者节点与节点之前的消息复制,该模式被广泛应用于饿了么、美团、滴滴等企业。</p><p><img src="https://img-blog.csdnimg.cn/20201010123646222.png" alt="image-20201010120051678"></p><h2 id="8-5-集群模式总结"><a href="#8-5-集群模式总结" class="headerlink" title="8.5    集群模式总结"></a>8.5    集群模式总结</h2><p>主备模式下主节点提供读写，从节点不提供读写服务，只是负责提供备份服务,备份节点的主要功能是在主节点宕机时，完成自动切换 从–&gt;主,同时因为主备模式下始终只有一个对外提供服务那么对于高并发的情况下该模式并不合适.</p><p>远程模式可以让我们实现异地多活的mq，但是现在已经有了更好的异地多活解决方案,所以在实际的项目中已经不推荐使用了</p><p>镜像队列模式可以让我们的消息100%不丢失,同时可以结合HAProxy来实现高并发的业务场景所以在项目中使用得最多</p><h1 id="9-RabbitMQ-应用"><a href="#9-RabbitMQ-应用" class="headerlink" title="9.    RabbitMQ 应用"></a>9.    RabbitMQ 应用</h1><h2 id="9-1-消息堆积"><a href="#9-1-消息堆积" class="headerlink" title="9.1    消息堆积"></a>9.1    消息堆积</h2><p>当消息生产的速度长时间，远远大于消费的速度时。就会造成消息堆积。</p><p><img src="https://img-blog.csdnimg.cn/20201010123703438.png" alt="image-20201010120240505"></p><ul><li>消息堆积的影响<ul><li>可能导致新消息无法进入队列</li><li>可能导致旧消息无法丢失</li><li>消息等待消费的时间过长，超出了业务容忍范围。</li></ul></li><li>产生堆积的情况<ul><li>生产者突然大量发布消息</li><li>消费者消费失败</li><li>消费者出现性能瓶颈。</li><li>消费者挂掉</li></ul></li><li>解决办法<ul><li>排查消费者的消费性能瓶颈</li><li>增加消费者的多线程处理</li><li>部署增加多个消费者</li></ul></li></ul><h2 id="9-2-消息丢失"><a href="#9-2-消息丢失" class="headerlink" title="9.2    消息丢失"></a>9.2    消息丢失</h2><p>在实际的生产环境中有可能出现一条消息因为一些原因丢失，导致消息没有消费成功，从而造成数据不一致等问题，造成严重的影响，比如：在一个商城的下单业务中，需要生成订单信息和扣减库存两个动作，如果使用RabbitMQ来实现该业务，那么在订单服务下单成功后需要发送一条消息到库存服务进行扣减库存，如果在此过程中，一条消息因为某些原因丢失，那么就会出现下单成功但是库存没有扣减，从而导致超卖的情况，也就是库存已经没有了，但是用户还能下单，这个问题对于商城系统来说是致命的。</p><p>消息丢失的场景主要分为：消息在生产者丢失，消息在RabbitMQ丢失，消息在消费者丢失。</p><h3 id="9-2-1-消息在生产者丢失"><a href="#9-2-1-消息在生产者丢失" class="headerlink" title="9.2.1    消息在生产者丢失"></a>9.2.1    消息在生产者丢失</h3><h4 id="9-2-1-1-场景介绍"><a href="#9-2-1-1-场景介绍" class="headerlink" title="9.2.1.1    场景介绍"></a>9.2.1.1    场景介绍</h4><p>消息生产者发送消息成功，但是MQ没有收到该消息，消息在从生产者传输到MQ的过程中丢失，一般是由于网络不稳定的原因。</p><h4 id="9-2-1-2-解决方案"><a href="#9-2-1-2-解决方案" class="headerlink" title="9.2.1.2    解决方案"></a>9.2.1.2    解决方案</h4><p>采用RabbitMQ 发送方消息确认机制，当消息成功被MQ接收到时，会给生产者发送一个确认消息，表示接收成功。RabbitMQ 发送方消息确认模式有以下三种：普通确认模式，批量确认模式，异步监听确认模式。spring整合RabbitMQ后只使用了异步监听确认模式。</p><p><strong>说明</strong></p><p>异步监听模式，可以实现边发送消息边进行确认，不影响主线程任务执行。</p><p><strong>步骤</strong></p><p>1、生产者发送3000条消息</p><p>2、在发送消息前开启开启发送方确认模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- publisher-confirms="true" 表示：启用了消息确认 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">port</span>=<span class="string">"5672"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">username</span>=<span class="string">"wgy"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">password</span>=<span class="string">"123456"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">virtual-host</span>=<span class="string">"/test"</span>/&gt;</span></span><br><span class="line">                           publisher-confirms="true"/&gt;</span><br></pre></td></tr></table></figure><p>3、在发送消息前添加异步确认监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息确认回调方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgSendConfirmCallBack</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消息确认成功...."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理丢失的消息</span></span><br><span class="line">            System.out.println(<span class="string">"消息确认失败,"</span> + cause);</span><br><span class="line">            <span class="comment">//重发</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-2-消息在RabbitMQ丢失"><a href="#9-2-2-消息在RabbitMQ丢失" class="headerlink" title="9.2.2    消息在RabbitMQ丢失"></a>9.2.2    消息在RabbitMQ丢失</h3><h4 id="9-2-2-1-场景介绍"><a href="#9-2-2-1-场景介绍" class="headerlink" title="9.2.2.1    场景介绍"></a>9.2.2.1    场景介绍</h4><p>消息成功发送到MQ，消息还没被消费却在MQ中丢失，比如MQ服务器宕机或者重启会出现这种情况</p><h4 id="9-2-2-2-解决方案"><a href="#9-2-2-2-解决方案" class="headerlink" title="9.2.2.2    解决方案"></a>9.2.2.2    解决方案</h4><p>持久化交换机，队列，消息，确保MQ服务器重启时依然能从磁盘恢复对应的交换机，队列和消息。</p><p>spring整合后默认开启了交换机，队列，消息的持久化，所以不修改任何设置就可以保证消息不在RabbitMQ丢失。但是为了以防万一，还是可以申明下。</p><h3 id="9-2-3-消息在消费者丢失"><a href="#9-2-3-消息在消费者丢失" class="headerlink" title="9.2.3    消息在消费者丢失"></a>9.2.3    消息在消费者丢失</h3><h4 id="9-2-3-1-场景介绍"><a href="#9-2-3-1-场景介绍" class="headerlink" title="9.2.3.1    场景介绍"></a>9.2.3.1    场景介绍</h4><p>消息费者消费消息时，如果设置为自动回复MQ，消息者端收到消息后会自动回复MQ服务器，MQ则会删除该条消息，如果消息已经在MQ被删除但是消费者的业务处理出现异常或者消费者服务宕机，那么就会导致该消息没有处理成功从而导致该条消息丢失。 </p><h4 id="9-2-3-2-解决方案"><a href="#9-2-3-2-解决方案" class="headerlink" title="9.2.3.2    解决方案"></a>9.2.3.2    解决方案</h4><p>设置为手动回复MQ服务器，当消费者出现异常或者服务宕机时，MQ服务器不会删除该消息，而是会把消息重发给绑定该队列的消费者，如果该队列只绑定了一个消费者，那么该消息会一直保存在MQ服务器，直到消息者能正常消费为止。本解决方案以一个队列绑定多个消费者为例来说明，一般在生产环境上也会让一个队列绑定多个消费者也就是工作队列模式来减轻压力，提高消息处理效率</p><p>MQ重发消息场景：</p><p>1.消费者未响应ACK，主动关闭频道或者连接</p><p>2.消费者未响应ACK，消费者服务挂掉</p><h2 id="9-3-有序消费消息"><a href="#9-3-有序消费消息" class="headerlink" title="9.3    有序消费消息"></a>9.3    有序消费消息</h2><h3 id="9-3-1-场景介绍"><a href="#9-3-1-场景介绍" class="headerlink" title="9.3.1    场景介绍"></a>9.3.1    场景介绍</h3><h4 id="9-3-1-1-场景1"><a href="#9-3-1-1-场景1" class="headerlink" title="9.3.1.1    场景1"></a>9.3.1.1    场景1</h4><p>当RabbitMQ采用work Queue模式，此时只会有一个Queue但是会有多个Consumer,同时多个Consumer直接是竞争关系，此时就会出现MQ消息乱序的问题。</p><p><img src="https://img-blog.csdnimg.cn/20201010123720650.png" alt="image-20201010121317556"></p><h4 id="9-3-1-2-场景2"><a href="#9-3-1-2-场景2" class="headerlink" title="9.3.1.2    场景2"></a>9.3.1.2    场景2</h4><p>当RabbitMQ采用简单队列模式的时候,如果消费者采用多线程的方式来加速消息的处理,此时也会出现消息乱序的问题。</p><p><img src="https://img-blog.csdnimg.cn/20201010123736804.png" alt="image-20201010121410955"></p><h4 id="9-3-1-3-场景1解决"><a href="#9-3-1-3-场景1解决" class="headerlink" title="9.3.1.3    场景1解决"></a>9.3.1.3    场景1解决</h4><p><img src="https://img-blog.csdnimg.cn/20201010123750799.png" alt="image-20201010121545595"></p><h4 id="9-3-1-4-场景2解决"><a href="#9-3-1-4-场景2解决" class="headerlink" title="9.3.1.4    场景2解决"></a>9.3.1.4    场景2解决</h4><p><img src="https://img-blog.csdnimg.cn/20201010123817700.png" alt="image-20201010121647684"></p><h2 id="9-4-重复消费"><a href="#9-4-重复消费" class="headerlink" title="9.4    重复消费"></a>9.4    重复消费</h2><h3 id="9-4-1-场景介绍"><a href="#9-4-1-场景介绍" class="headerlink" title="9.4.1    场景介绍"></a>9.4.1    场景介绍</h3><p>为了防止消息在消费者端丢失，会采用手动回复MQ的方式来解决，同时也引出了一个问题，消费者处理消息成功，手动回复MQ时由于网络不稳定，连接断开，导致MQ没有收到消费者回复的消息，那么该条消息还会保存在MQ的消息队列，由于MQ的消息重发机制，会重新把该条消息发给和该队列绑定的消息者处理，这样就会导致消息重复消费。而有些操作是不允许重复消费的，比如下单，减库存，扣款等操作。</p><p>MQ重发消息场景：</p><p>1.消费者未响应ACK，主动关闭频道或者连接</p><p>2.消费者未响应ACK，消费者服务挂掉</p><h3 id="9-4-2-解决方案"><a href="#9-4-2-解决方案" class="headerlink" title="9.4.2    解决方案"></a>9.4.2    解决方案</h3><p>如果消费消息的业务是幂等性操作（同一个操作执行多次，结果不变）就算重复消费也没问题，可以不做处理，如果不支持幂等性操作，如：下单，减库存，扣款等，那么可以在消费者端每次消费成功后将该条消息id保存到数据库，每次消费前查询该消息id，如果该条消息id已经存在那么表示已经消费过就不再消费否则就消费。本方案采用redis存储消息id，因为redis是单线程的，并且性能也非常好，提供了很多原子性的命令，本方案使用setnx命令存储消息id。</p><blockquote><p>setnx(key,value):如果key不存在则插入成功且返回1,如果key存在,则不进行任何操作,返回0</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-消息中间件概述&quot;&gt;&lt;a href=&quot;#1-消息中间件概述&quot; class=&quot;headerlink&quot; title=&quot;1.    消息中间件概述&quot;&gt;&lt;/a&gt;1.    消息中间件概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是消息中间件&quot;&gt;&lt;a href=&quot;#1-1-什么是消息中间件&quot; class=&quot;headerlink&quot; title=&quot;1.1    什么是消息中间件&quot;&gt;&lt;/a&gt;1.1    什么是消息中间件&lt;/h2&gt;&lt;p&gt;MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么使用MQ&lt;/p&gt;
&lt;p&gt;在项目中，可将一些无需即时返回且耗时的操作提取出来，进行&lt;strong&gt;异步处理&lt;/strong&gt;，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而&lt;strong&gt;提高&lt;/strong&gt;了&lt;strong&gt;系统&lt;/strong&gt;的&lt;strong&gt;吞吐量&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="服务器中间件" scheme="https://wgy1993.gitee.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="RabbitMQ" scheme="https://wgy1993.gitee.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Docker(一)</title>
    <link href="https://wgy1993.gitee.io/archives/4021575d.html"/>
    <id>https://wgy1993.gitee.io/archives/4021575d.html</id>
    <published>2020-10-04T14:30:59.000Z</published>
    <updated>2020-10-04T14:32:37.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是虚拟化"><a href="#1-什么是虚拟化" class="headerlink" title="1.    什么是虚拟化"></a>1.    什么是虚拟化</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1    概念"></a>1.1    概念</h2><p>在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，<strong>打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源</strong>。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><a id="more"></a><p>在实际的生产环境中，<strong>虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用</strong>，透明化底层物理硬件，从而最大化的利用物理硬件。(<strong>物理资源的充分利用</strong>)</p><p>虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化、虚拟机等等。</p><p><img src="https://img-blog.csdnimg.cn/20201004222608457.png" alt="image-20201004190107360"></p><h2 id="1-2-虚拟化架构"><a href="#1-2-虚拟化架构" class="headerlink" title="1.2    虚拟化架构"></a>1.2    虚拟化架构</h2><h3 id="1-2-1-全虚拟化"><a href="#1-2-1-全虚拟化" class="headerlink" title="1.2.1    全虚拟化"></a>1.2.1    全虚拟化</h3><p>在全虚拟化的虚拟平台中，GuestOS并不知道自己是一台虚拟机，它会认为自己就是运行在计算机物理硬件设备上的HostOS。因为全虚拟化的VMM会将一个OS所能够操作的CPU、内存、外设等物理设备逻辑抽象成为虚拟CPU、虚拟内存、虚拟外设等虚拟设备后，再交由GuestOS来操作使用。这样的GuestOS会将底层硬件平台视为自己所有的，但是实际上，这些都是VMM为GuestOS制造了这种假象。</p><p><img src="https://img-blog.csdnimg.cn/20201004222624335.png" alt="image-20201004190917515"></p><h3 id="1-2-2-操作系统虚拟化"><a href="#1-2-2-操作系统虚拟化" class="headerlink" title="1.2.2    操作系统虚拟化"></a>1.2.2    操作系统虚拟化</h3><p>操作系统层虚拟化是指通过划分一个宿主操作系统的特定部分，产生一个个隔离的操作执行环境。操作系统层的虚拟化是操作系统内核直接提供的虚报化，虚拟出的操作系统之间共享底层宿主操作系统内核和底层的硬件资源。操作系统虚拟化的关键点在于将操作系统与上层应用隔离开，将对操作系统资源的访问进行虚报化，使上层应用觉得自己独占操作系统。</p><p><img src="https://img-blog.csdnimg.cn/20201004222640474.png" alt="image-20201004191806794"></p><h3 id="1-2-3-平台虚拟化"><a href="#1-2-3-平台虚拟化" class="headerlink" title="1.2.3    平台虚拟化"></a>1.2.3    平台虚拟化</h3><p>平台虚拟化表现为在一个给定的硬件平台上宿主机创造一个模拟的计算机环境虚拟机提供给客户机。客户机软件对于用户应用程序没有限制;许多宿主机允许运行真实的操作系统。客户机就好像直接运行在计算机硬件上，伴随着几个明显的警告。虚拟机对硬件资源(如网络，显示器，键盘，硬盘)的访问被统一管理在一个比处理器和系统内存更有限制性的层次上。客户软件经常被限制访问计算机周边设备，或者被限制在较低的设备性能上，这取决于宿主机硬件访问策略设定。</p><p><img src="https://img-blog.csdnimg.cn/20201004222657734.png" alt="image-20201004192230593"></p><h2 id="1-3-hypervisor"><a href="#1-3-hypervisor" class="headerlink" title="1.3    hypervisor"></a>1.3    hypervisor</h2><p>Hypervisor是一种运行在物理服务器和操作系统之间的中间软件层,可允许多个操作系统和应用共享一套基础物理硬件，因此也可以看作是虚拟环境中的“元”操作系统，它可以协调访问服务器上的所有物理设备和虚拟机，也叫<strong>虚拟机监视器</strong>（Virtual Machine Monitor，VMM）。<strong>Hypervisor是所有虚拟化技术的核心</strong>。当服务器启动并执行Hypervisor时，它会给每一台虚拟机分配适量的内存、CPU、网络和磁盘，并加载所有虚拟机的客户操作系统。</p><p>Hypervisor是所有虚拟化技术的核心，软硬件架构和管理更高效、更灵活，硬件的效能能够更好地发挥出来。常见的产品有：VMware、KVM、Xen等等。</p><h1 id="2-Docker-介绍"><a href="#2-Docker-介绍" class="headerlink" title="2.    Docker 介绍"></a>2.    Docker 介绍</h1><h2 id="2-1-容器技术"><a href="#2-1-容器技术" class="headerlink" title="2.1    容器技术"></a>2.1    容器技术</h2><p>在计算机的世界中，容器拥有一段漫长且传奇的历史。容器与管理程序虚拟化（hypervisor virtualization，HV）有所不同，<strong>管理程序虚拟化通过中间层将一台或者多台独立的机器虚拟运行与物理硬件之上，而容器则是直接运行在操作系统内核之上的用户空间</strong>。因此，容器虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。</p><p>由于 “客居”于操作系统，容器只能运行与底层宿主机相同或者相似的操作系统，这看起来并不是非常灵活。例如：可以在Ubuntu服务中运行Redhat Enterprise Linux，但无法再Ubuntu服务器上运行Microsoft Windows。</p><p>相对于彻底隔离的管理程序虚拟化，容器被认为是不安全的。而反对这一观点的人则认为，由于虚拟容器所虚拟的是一个完整的操作系统，这无疑增大了攻击范围，而且还要考虑管理程序层潜在的暴露风险。</p><p>尽管有诸多局限性，容器还是被广泛部署于各种各样的应用场合。在超大规模的多租户服务部署、轻量级沙盒以及对安全要求不太高的隔离环境中，容器技术非常流行。最常见的一个例子就是“权限隔离监牢”（chroot jail），它创建一个隔离的目录环境来运行进程。如果权限隔离监牢正在运行的进程被入侵者攻破，入侵者便会发现自己“身陷囹圄”，因为权限不足被困在容器所创建的目录中，无法对宿主机进一步破坏。</p><p>最新的容器技术引入了OpenVZ、Solaris Zones以及Linux容器（LXC）。使用这些新技术，容器不在仅仅是一个单纯的运行环境。在自己的权限类内，<strong>容器更像是一个完整的宿主机。容器和宿主机之间的隔离更加彻底，容器有独立的网络和存储栈，还拥有自己的资源管理能力，使得同一台宿主机中的多个容器可以友好的共存。</strong></p><p>容器被认为是精益技术，因为容器需要的开销有限。和传统虚拟化以及半虚拟化相比，容器不需要模拟层（emulation layer）和管理层（hypervisor layer），而是使用操作系统的系统调用接口。这<strong>降低了运行单个容器所需的开销，也使得宿主机中可以运行更多的容器</strong>。</p><p>尽管有着光辉的历史，容器仍未得到广泛的认可。一个很重要的原因就是容器技术的复杂性：容器本身就比较复杂，不易安装，管理和自动化也很困难。而Docker就是为了改变这一切而生的。</p><p><img src="https://img-blog.csdnimg.cn/20201004222715182.png" alt="image-20201004193307645"></p><h2 id="2-2-Docker-介绍"><a href="#2-2-Docker-介绍" class="headerlink" title="2.2    Docker 介绍"></a>2.2    Docker 介绍</h2><p>Docker 是一个开发，运输和运行应用程序的开放平台。 Docker使您可以将应用程序与基础架构分离，以便快速交付软件。 使用Docker，您可以像管理应用程序一样管理基础架构（OS）。 通过利用Docker的方法快速发送，测试和部署代码，您可以显着减少编写代码和在生产中运行代码之间的延迟。（代码改了）</p><h2 id="2-3-Docker-好处"><a href="#2-3-Docker-好处" class="headerlink" title="2.3    Docker 好处"></a>2.3    Docker 好处</h2><p>容器提供了隔离性，结论是，容器可以为各种测试提供很好的沙盒环境。并且，容器本身就具有“标准性”的特征，非常适合为服务创建构建块。Docker的一些应用场景如下：</p><ul><li>加速本地开发和构建流程，使其更加高效、更加轻量化。本地开发人员可以构建、运行并分享Docker容器。容器可以在开发环境中构建，然后轻松的提交到测试环境中，并最终进入生产环境。 开发人员与运维人员进行职责的逻辑分离</li><li>能够让独立的服务或应用程序在不同的环境中，得到相同的运行结果。这一点在面向服务的架构和重度依赖微型服务的部署由其实用。</li><li>用 Docker创建隔离的环境来进行测试。例如，用Jenkins CI这样的持续集成工具启动一个用于测试的容器。（持续化集成 war 实际部署：jenkins持续化集成 Jenkins+git ）</li><li>Docker 可以让开发者先在本机上构建一个复杂的程序或架构来进行测试，而不是一开始就在生产环境部署、测试。</li><li>构建一个多用户的平台即服务（ PaaS）基础设施</li><li>为开发、测试提供一个轻量级的独立的沙盒环境</li><li>提供软件即服务（ SaaS）应用程序，例如Memcached即服务</li><li>高性能、超大规模的宿主机部署（可以很多容器）</li></ul><p><img src="https://img-blog.csdnimg.cn/20201004222730761.png" alt="image-20201004193842198"></p><blockquote><p>沙盒：在计算机安全领域，沙盒（英语：sandbox，又译为沙箱）是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。</p></blockquote><h2 id="2-4-集装箱思想"><a href="#2-4-集装箱思想" class="headerlink" title="2.4    集装箱思想"></a>2.4    集装箱思想</h2><p>Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Dock将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件、应用程序。</p><p>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p><p>Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p><p><img src="https://img-blog.csdnimg.cn/20201004222746128.png" alt="image-20201004194007305"></p><h2 id="2-5-container-与vm区别"><a href="#2-5-container-与vm区别" class="headerlink" title="2.5    container 与vm区别"></a>2.5    container 与vm区别</h2><p>物理机：</p><p><img src="https://img-blog.csdnimg.cn/20201004222801435.png" alt="image-20201004194029035"></p><p>虚拟机：</p><p><img src="https://img-blog.csdnimg.cn/20201004222815156.png" alt="image-20201004194037586"></p><p>容器：最大化的利用资源。</p><p><img src="https://img-blog.csdnimg.cn/2020100422282926.png" alt="image-20201004194049515"></p><p>通过上面这三张抽象图，我们大概可以通过类比概括出： 容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。</p><p>容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</p><p>容器在Linux上本机运行，并与其他容器共享主机的内核。 它运行一个独立的进程，不占用任何其他可执行文件的内存，使其轻量级。相比之下，虚拟机（VM）运行一个完整的“客户”操作系统，通过虚拟机管理程序对主机资源进行虚拟访问。 通常，VM提供的环境比大多数应用程序需要的资源更多。</p><h2 id="2-6-虚拟机已死-容器才是未来"><a href="#2-6-虚拟机已死-容器才是未来" class="headerlink" title="2.6    虚拟机已死 容器才是未来"></a>2.6    虚拟机已死 容器才是未来</h2><p><img src="https://img-blog.csdnimg.cn/20201004222843181.png" alt="image-20201004194218420"></p><p><img src="https://img-blog.csdnimg.cn/2020100422285699.png" alt="image-20201004194236046"></p><ul><li>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动 。</li><li>虚拟机（ VM）是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个VM在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此占用大量空间。而且VM启动也十分缓慢 。</li></ul><h1 id="3-Docker-版本以及安装"><a href="#3-Docker-版本以及安装" class="headerlink" title="3.    Docker 版本以及安装"></a>3.    Docker 版本以及安装</h1><h2 id="3-1-Docker-版本介绍"><a href="#3-1-Docker-版本介绍" class="headerlink" title="3.1    Docker 版本介绍"></a>3.1    Docker 版本介绍</h2><p>Docker CE 在 17.03 版本之前叫 Docker Engine, Docker Engine 的版本号范围: 0.1.0 ~1.13.1</p><p>在 2017 年 3 月 2 日, docker 团队宣布企业版 Docker Enterprise Edition ( EE ) 发布. 为了一致, 免费的 Docker Engine 改名为 Docker Community Edition ( CE ), 并且采用基于时间的版本号方案. 就在这一天, Docker EE 和 Docker CE 的 17.03 版本发布, 这也是第一个采用新的版本号方案的版本.</p><p>Docker CE/EE 每个季度发布一次 季度版本, 也就是说每年会发布 4 个季度版本, 17.03,17.06, 17.09, 17.12 就是 2017 年的 4 个季度版本的版本号, 同时 Docker CE 每个月还会发布一个 EDGE 版本，比如 17.04, 17.05, 17.07, 17.08, 17.10, 17.11 ……</p><p>Docker CE 季度版本自发布后会有 4 个月的维护期.</p><p>在基于时间的发布方案中，版本号格式为: YY.MM.，YY.MM 代表年月，patch 代表补丁号，从 0 开始，在季度版本 (如 17.03) 的维护期内，bug 修复相关的更新会以 patch 递增的方式发布, 比如 17.03.0 -&gt; 17.03.1 -&gt; 17.03.2</p><p>Docker is available in two editions:</p><ul><li>Community Edition (CE) ：社区版</li><li>Enterprise Edition (EE) ：企业版</li></ul><h2 id="3-2-Docker-安装"><a href="#3-2-Docker-安装" class="headerlink" title="3.2    Docker 安装"></a>3.2    Docker 安装</h2><h3 id="3-2-1-版本要求"><a href="#3-2-1-版本要求" class="headerlink" title="3.2.1    版本要求"></a>3.2.1    版本要求</h3><p>Docker对Ubuntu的支持是最好的。如果是 CentOS：安装Docker 建议7.x及以上版本。</p><p>Docker支持在多种平台上使用，包括Mac、Windows、Cloud以及Linux系统上等。由于Docker是基于Ubuntu发布的，所以官方更推荐在Ubuntu上使用Docker，开发者也可以根据自己的实际开发环境选择合适的开发。在不同的平台上安装Docker必须满足不同的先决条件。</p><h3 id="3-2-2-安装步骤"><a href="#3-2-2-安装步骤" class="headerlink" title="3.2.2    安装步骤"></a>3.2.2    安装步骤</h3><h4 id="3-2-2-1-安装需要的软件包"><a href="#3-2-2-1-安装需要的软件包" class="headerlink" title="3.2.2.1    安装需要的软件包"></a>3.2.2.1    安装需要的软件包</h4><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-设置yum源"><a href="#3-2-2-2-设置yum源" class="headerlink" title="3.2.2.2    设置yum源"></a>3.2.2.2    设置yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中央仓库</span></span><br><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里仓库</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="3-2-2-3-安装-Docker"><a href="#3-2-2-3-安装-Docker" class="headerlink" title="3.2.2.3    安装 Docker"></a>3.2.2.3    安装 Docker</h4><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装特定版本的 Docker：</p><p>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><h4 id="3-2-2-4-启动Docker"><a href="#3-2-2-4-启动Docker" class="headerlink" title="3.2.2.4    启动Docker"></a>3.2.2.4    启动Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="3-2-2-5-配置国内镜像加速器"><a href="#3-2-2-5-配置国内镜像加速器" class="headerlink" title="3.2.2.5    配置国内镜像加速器"></a>3.2.2.5    配置国内镜像加速器</h4><p><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云镜像加速器地址</a></p><p>直接支付宝登陆，然后进入后台，点击镜像加速器，根据自己的Linux系统输入对应的命令，完成阿里云国内镜像源的配置。</p><p><img src="https://img-blog.csdnimg.cn/2020100422291647.png" alt="image-20201004213342131"></p><h4 id="3-2-2-6-测试"><a href="#3-2-2-6-测试" class="headerlink" title="3.2.2.6    测试"></a>3.2.2.6    测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello‐world</span><br></pre></td></tr></table></figure><h2 id="3-3-常用Docker命令"><a href="#3-3-常用Docker命令" class="headerlink" title="3.3    常用Docker命令"></a>3.3    常用Docker命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看docker详细信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker版本</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动/停止/重启docker：</span></span><br><span class="line">systemctl start/stop/restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#Ubuntu：开机自动启动</span></span><br><span class="line"><span class="comment">#CentOS：手动启动</span></span><br><span class="line"><span class="comment">#开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker运行状态</span></span><br><span class="line">sytemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有容器的状态</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h1 id="4-Docker-架构"><a href="#4-Docker-架构" class="headerlink" title="4.    Docker 架构"></a>4.    Docker 架构</h1><p>Docker使用客户端 - 服务器架构。 Docker客户端与Docker守护进程通信，后者负责构建，运行和分发Docker容器。 Docker客户端和守护程序可以在同一系统上运行，也可以将Docker客户端连接到远程Docker守护程序。 Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。</p><p><img src="https://img-blog.csdnimg.cn/20201004222933120.png" alt="image-20201004214746388"></p><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><h1 id="5-Docker-镜像操作"><a href="#5-Docker-镜像操作" class="headerlink" title="5.    Docker 镜像操作"></a>5.    Docker 镜像操作</h1><p>Docker 镜像是容器的基础。镜像是一个有序集合，其中包含根文件系统更改和在容器运行时中使用的相应执行参数。镜像通常 包含堆叠在彼此之上的联合分层文件系统。镜像没有状态并且始终不会发生更改。 当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><h2 id="5-1-列出镜像"><a href="#5-1-列出镜像" class="headerlink" title="5.1    列出镜像"></a>5.1    列出镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              9140108b62dc        8 days ago          72.9MB</span><br></pre></td></tr></table></figure><ul><li><strong>REPOSITORY</strong> ：表示镜像的仓库源</li><li><strong>TAG</strong> ：镜像的标签（版本），同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如ubuntu仓库源里，有15.10、14.04等多个不同的版本。</li><li><strong>IMAGE ID</strong> ：镜像ID</li><li><strong>CREATED</strong> ：镜像创建时间</li><li><strong>SIZE</strong> ：镜像大小</li></ul><h2 id="5-2-查找镜像"><a href="#5-2-查找镜像" class="headerlink" title="5.2    查找镜像"></a>5.2    查找镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker search 镜像名称</span></span><br><span class="line"></span><br><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201004222948320.png" alt="image-20201004215750349"></p><ul><li><strong>NAME</strong> ：镜像仓库源的名称</li><li><strong>DESCRIPTION</strong>：镜像的描述</li><li><strong>starts</strong>：用户评价，反应一个镜像的受欢迎程度</li><li><strong>OFFICIAL</strong>：是否docker官方发布</li><li><strong>auto commit</strong>：自动构建，表示该镜像由Docker Hub自动构建流程创建的</li></ul><h2 id="5-3-拉取镜像"><a href="#5-3-拉取镜像" class="headerlink" title="5.3    拉取镜像"></a>5.3    拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称[:version]</span><br></pre></td></tr></table></figure><p>Docker镜像首页，包括官方镜像和其它公开镜像。Docker Hub上最受欢迎的10大镜像（通过Docker registry API获取不了镜像被pull的个数，只能通过镜像的stars数量，来衡量镜像的流行度。毫无疑问，拥有最高stars数量的库都是官方库。国情的原因，国内下载 Docker HUB 官方的相关镜像比较慢，可以使用国内（docker.io）的一些镜像加速器，镜像保持和官方一致，关键是速度块，推荐使用。配置镜像加速器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PS：配置镜像加速器（参考该网站具体的文档操作）</span><br><span class="line">‐ 阿里云（先加入阿里云开发者平台：https:&#x2F;&#x2F;dev.aliyun.com）</span><br><span class="line">‐ docker中国加速器（https:&#x2F;&#x2F;www.docker‐cn.com)</span><br><span class="line">‐ USTC加速器（https:&#x2F;&#x2F;lug.ustc.edu.cn&#x2F;wiki&#x2F; ）  真正的公共服务（无需任何操作）</span><br><span class="line">‐ daocloud、网易蜂巢加速器：略</span><br><span class="line"></span><br><span class="line">步骤：</span><br><span class="line">sudo vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">配置内容：    </span><br><span class="line">&#123;    </span><br><span class="line">   &quot;registry‐mirrors&quot;: [&quot;https:&#x2F;&#x2F;cs913o6k.mirror.aliyuncs.com&quot;]      </span><br><span class="line">&#125;</span><br><span class="line">sudo systemctl daemon‐reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="5-4-删除镜像"><a href="#5-4-删除镜像" class="headerlink" title="5.4    删除镜像"></a>5.4    删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、删除一个镜像</span></span><br><span class="line">docker rmi 镜像名称/id</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、删除多个镜像</span></span><br><span class="line">docker rmi 镜像名称1/id1 镜像名称2/id2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、删除所有镜像</span></span><br><span class="line">docker rmi `docker images ‐q`</span><br></pre></td></tr></table></figure><h1 id="6-Docker-容器操作"><a href="#6-Docker-容器操作" class="headerlink" title="6.    Docker 容器操作"></a>6.    Docker 容器操作</h1><p>容器是 Docker 镜像的运行时实例。</p><p><img src="https://img-blog.csdnimg.cn/20201004223000109.png" alt="image-20201004221909011"></p><h2 id="6-1-创建容器"><a href="#6-1-创建容器" class="headerlink" title="6.1    创建容器"></a>6.1    创建容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] image <span class="built_in">command</span> [ARG...]</span><br><span class="line">options选项: -i、-t、-d、--name</span><br><span class="line">-i：交互式容器</span><br><span class="line">-t：tty，终端</span><br><span class="line">-d:后台运行，并且打印容器id</span><br><span class="line"></span><br><span class="line">eg:创建的容器名称不能重复</span><br><span class="line">docker run --name=u1 ubuntu</span><br><span class="line">docker run -i -t --name=u1 ubuntu /bin/bash</span><br><span class="line">docker run -i -t -d --name=u3 ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h2 id="6-2-进入容器"><a href="#6-2-进入容器" class="headerlink" title="6.2    进入容器"></a>6.2    进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">docker attach 容器名称/id (ps:<span class="built_in">exit</span>,容器停止)               </span><br><span class="line">eg：docker attach u3</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">docker <span class="built_in">exec</span> -it 容器名称/id /bin/bash    （ps:<span class="built_in">exit</span>,容器不会停止）</span><br><span class="line">eg：docker <span class="built_in">exec</span> -it u3 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="6-3-查看容器"><a href="#6-3-查看容器" class="headerlink" title="6.3    查看容器"></a>6.3    查看容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps：查看正在运行的容器</span><br><span class="line">docker ps -a：查看运行过的容器（历史）</span><br><span class="line">docker ps -l：最后一次运行的容器</span><br></pre></td></tr></table></figure><h2 id="6-4-停止-启动容器"><a href="#6-4-停止-启动容器" class="headerlink" title="6.4    停止/启动容器"></a>6.4    停止/启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称/id</span><br><span class="line">docker stop 容器名称/id</span><br></pre></td></tr></table></figure><h2 id="6-5-获取容器-镜像的元数据"><a href="#6-5-获取容器-镜像的元数据" class="headerlink" title="6.5    获取容器/镜像的元数据"></a>6.5    获取容器/镜像的元数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看容器/镜像全部信息：</span><br><span class="line">docker inspect 容器/镜像</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器/镜像部分信息：</span></span><br><span class="line">docker inspect -f=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器/镜像</span><br><span class="line">-f：可通过--format代替</span><br></pre></td></tr></table></figure><h2 id="6-6-删除容器"><a href="#6-6-删除容器" class="headerlink" title="6.6    删除容器"></a>6.6    删除容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除一个容器：</span></span><br><span class="line">docker rm 容器名称/id</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除多个容器：</span></span><br><span class="line">docker rm 容器名称1/id1 容器名称2/id2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有容器</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br><span class="line"></span><br><span class="line">PS：无法删除正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="6-7-查看容器日志"><a href="#6-7-查看容器日志" class="headerlink" title="6.7    查看容器日志"></a>6.7    查看容器日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器名称/id</span><br></pre></td></tr></table></figure><h2 id="6-8-文件拷贝"><a href="#6-8-文件拷贝" class="headerlink" title="6.8    文件拷贝"></a>6.8    文件拷贝</h2><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp  需要拷贝的文件或目录 容器名称:容器目录</span><br><span class="line"></span><br><span class="line">例如：docker cp 1.txt c2:/root</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp  容器名称:容器目录 需要拷贝的文件或目录</span><br><span class="line"></span><br><span class="line">例如：docker cp c2:/root/2.txt /root</span><br></pre></td></tr></table></figure><h2 id="6-9-目录挂载"><a href="#6-9-目录挂载" class="headerlink" title="6.9    目录挂载"></a>6.9    目录挂载</h2><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。</p><p>创建容器 添加-v参数 后边为宿主机目录:容器目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c4 -v /opt/:/usr/<span class="built_in">local</span>/myhtml centos</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示</p><p>这是因为 CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数 –privileged=true 来解决挂载的目录没有权限的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --privileged=<span class="literal">true</span> --name=c4 -v /opt/:/usr/<span class="built_in">local</span>/myhtml centos</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-什么是虚拟化&quot;&gt;&lt;a href=&quot;#1-什么是虚拟化&quot; class=&quot;headerlink&quot; title=&quot;1.    什么是虚拟化&quot;&gt;&lt;/a&gt;1.    什么是虚拟化&lt;/h1&gt;&lt;h2 id=&quot;1-1-概念&quot;&gt;&lt;a href=&quot;#1-1-概念&quot; class=&quot;headerlink&quot; title=&quot;1.1    概念&quot;&gt;&lt;/a&gt;1.1    概念&lt;/h2&gt;&lt;p&gt;在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，&lt;strong&gt;打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源&lt;/strong&gt;。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://wgy1993.gitee.io/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://wgy1993.gitee.io/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫(三)</title>
    <link href="https://wgy1993.gitee.io/archives/1f29f91c.html"/>
    <id>https://wgy1993.gitee.io/archives/1f29f91c.html</id>
    <published>2020-10-04T04:48:31.000Z</published>
    <updated>2020-10-04T04:51:18.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-案例扩展"><a href="#1-案例扩展" class="headerlink" title="1.    案例扩展"></a>1.    案例扩展</h1><h2 id="1-1-定时任务"><a href="#1-1-定时任务" class="headerlink" title="1.1    定时任务"></a>1.1    定时任务</h2><p>在案例中我们使用的是Spring内置的Spring Task，这是Spring3.0加入的定时任务功能。我们使用注解的方式定时启动爬虫进行数据爬取。</p><p>我们使用的是@Scheduled注解，其属性如下：</p><a id="more"></a><ul><li><strong>cron</strong>：cron表达式，指定任务在特定时间执行；</li><li><strong>fixedDelay</strong>：上一次任务执行完后多久再执行，参数类型为long，单位ms</li><li><strong>fixedDelayString</strong>：与fixedDelay含义一样，只是参数类型变为String</li><li><strong>fixedRate</strong>：按一定的频率执行任务，参数类型为long，单位ms</li><li><strong>fixedRateString</strong>: 与fixedRate的含义一样，只是将参数类型变为String</li><li><strong>initialDelay</strong>：延迟多久再第一次执行任务，参数类型为long，单位ms</li><li><strong>initialDelayString</strong>：与initialDelay的含义一样，只是将参数类型变为String</li><li><strong>zone</strong>：时区，默认为当前时区，一般没有用到</li></ul><p>我们这里的使用比较简单，固定的间隔时间来启动爬虫。例如可以实现项目启动后，每隔一小时启动一次爬虫。</p><p>但是有可能业务要求更高，并不是定时定期处理，而是在特定的时间进行处理，这个时候我们之前的使用方式就不能满足需求了。例如我要在工作日（周一到周五）的晚上八点执行。这时我们就需要Cron表达式了。</p><h3 id="1-1-1-Cron表达式"><a href="#1-1-1-Cron表达式" class="headerlink" title="1.1.1    Cron表达式"></a>1.1.1    Cron表达式</h3><p>cron的表达式是字符串，实际上是由七子表达式，描述个别细节的时间表。这些子表达式是分开的空白，代表：</p><p>1、Seconds</p><p>2、Minutes</p><p>3、Hours</p><p>4、Day-of-Month</p><p>5、Month</p><p>6、Day-of-Week</p><p>7、Year (可选字段)</p><p>例 “0 0 12 ? * WED” 在每星期三下午12:00 执行, “*” 代表整个时间段</p><p>每一个字段都有一套可以指定有效值，如</p><p>Seconds (秒)      ：可以用数字0－59 表示，</p><p>Minutes(分)       ：可以用数字0－59 表示，</p><p>Hours(时)         ：可以用数字0-23表示,</p><p>Day-of-Month(天)  ：可以用数字1-31 中的任一一个值，但要注意一些特别的月份</p><p>Month(月)       ：可以用0-11 或用字符串:JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC </p><p>Day-of-Week(天)   ：可以用数字1-7表示（1 ＝ 星期日）或用字符口串:SUN, MON, TUE, WED, THU, FRI, SAT</p><p>“/”：为特别单位，表示为“每”如“0/15”表示每隔15分钟执行一次,“0”表示为从“0”分开始, “3/20”表示表示每隔20分钟执行一次，“3”表示从第3分钟开始执行</p><p>“?”：表示每月的某一天，或第周的某一天</p><p>“L”：用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几如“6L”表示“每月的最后一个星期五” </p><h3 id="1-1-2-Cron测试"><a href="#1-1-2-Cron测试" class="headerlink" title="1.1.2    Cron测试"></a>1.1.2    Cron测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(LocalDateTime.now() + <span class="string">"任务执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-网页去重"><a href="#1-2-网页去重" class="headerlink" title="1.2    网页去重"></a>1.2    网页去重</h2><p>之前我们对下载的url地址进行了去重操作，避免同样的url下载多次。其实不光url需要去重，我们对下载的内容也需要去重。</p><p>在网上我们可以找到许多内容相似的文章。但是实际我们只需要其中一个即可，同样的内容没有必要下载多次，那么如何进行去重就需要进行处理了</p><h3 id="1-2-1-去重方案介绍"><a href="#1-2-1-去重方案介绍" class="headerlink" title="1.2.1    去重方案介绍"></a>1.2.1    去重方案介绍</h3><ul><li><p><strong>指纹码对比</strong></p><p>最常见的去重方案是生成文档的指纹门。例如对一篇文章进行MD5加密生成一个字符串，我们可以认为这是文章的指纹码，再和其他的文章指纹码对比，一致则说明文章重复。</p><p>但是这种方式是完全一致则是重复的，如果文章只是多了几个标点符号，那仍旧被认为是重复的，这种方式并不合理。</p></li><li><p><strong>BloomFilter</strong></p><p>这种方式就是我们之前对url进行去重的方式，使用在这里的话，也是对文章进行计算得到一个数，再进行对比，缺点和方法1是一样的，如果只有一点点不一样，也会认为不重复，这种方式不合理。</p></li><li><p><strong>KMP算法</strong></p><p>KMP算法是一种改进的字符串匹配算法。KMP算法的关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。能够找到两个文章有哪些是一样的，哪些不一样。</p><p>这种方式能够解决前面两个方式的“只要一点不一样就是不重复”的问题。但是它的时空复杂度太高了，不适合大数据量的重复比对。</p></li></ul><p>还有一些其他的去重方式：最长公共子串、后缀数组、字典树、DFA等等，但是这些方式的空复杂度并不适合数据量较大的工业应用场景。我们需要找到一款性能高速度快，能够进行相似度对比的去重方案</p><p>Google 的 <strong>simhash 算法</strong>产生的签名，可以满足上述要求。这个算法并不深奥，比较容易理解。这种算法也是目前Google搜索引擎所目前所使用的网页去重算法。</p><h3 id="1-2-2-SimHash"><a href="#1-2-2-SimHash" class="headerlink" title="1.2.2    SimHash"></a>1.2.2    SimHash</h3><h4 id="1-2-2-1-流程介绍"><a href="#1-2-2-1-流程介绍" class="headerlink" title="1.2.2.1    流程介绍"></a>1.2.2.1    流程介绍</h4><p>simhash是由 Charikar 在2002年提出来的，为了便于理解尽量不使用数学公式，分为这几步：</p><p><strong>1、分词</strong>，把需要判断文本分词形成这个文章的特征单词。</p><p><strong>2、hash</strong>，通过hash算法把每个词变成hash值，比如“美国”通过hash算法计算为 100101,“51区”通过hash算法计算为 101011。这样我们的字符串就变成了一串串数字。</p><p><strong>3、加权</strong>，通过 2步骤的hash生成结果，需要按照单词的权重形成加权数字串，“美国”的hash值为“100101”，通过加权计算为“4 -4 -4 4 -4 4”，“51区”计算为 “ 5 -5 5 -5 5 5”。</p><p><strong>4、合并</strong>，把上面各个单词算出来的序列值累加，变成只有一个序列串。 “美国”的 “4 -4 -4 4 -4 4”，“51区”的 “ 5 -5 5 -5 5 5”，把每一位进行累加， “4+5 -4+-5 -4+5 4+-5 -4+5 4+5”–&gt;“9 -9 1 -1 1 9”</p><p><strong>5、降维</strong>，把算出来的 “9 -9 1 -1 1 9”变成 0 1 串，形成最终的simhash签名。 </p><p><img src="https://img-blog.csdnimg.cn/20201004124623447.png" alt="image-20201004121653047"></p><h4 id="1-2-2-2-签名距离计算"><a href="#1-2-2-2-签名距离计算" class="headerlink" title="1.2.2.2    签名距离计算"></a>1.2.2.2    签名距离计算</h4><p>我们把库里的文本都转换为simhash签名，并转换为long类型存储，空间大大减少。现在我们虽然解决了空间，但是如何计算两个simhash的相似度呢？</p><p>我们通过海明距离（Hamming distance）就可以计算出两个simhash到底相似不相似。两个simhash对应二进制（01串）取值不同的数量称为这两个simhash的海明距离。</p><p>举例如下： 10101 和 00110 从第一位开始依次有第一位、第四、第五位不同，则海明距离为3。对于二进制字符串的a和b，海明距离为等于在a XOR b运算结果中1的个数（普遍算法）。</p><h4 id="1-2-2-3-导入simhash工程"><a href="#1-2-2-3-导入simhash工程" class="headerlink" title="1.2.2.3    导入simhash工程"></a>1.2.2.3    导入simhash工程</h4><p>参考项目：<a href="https://github.com/CreekLou/simhash.git" target="_blank" rel="noopener">https://github.com/CreekLou/simhash.git</a></p><p>导入工程simhash，并打开测试用例。</p><p><img src="https://img-blog.csdnimg.cn/20201004124639415.png" alt="image-20201004121854013"></p><h4 id="1-2-2-4-案例整合"><a href="#1-2-2-4-案例整合" class="headerlink" title="1.2.2.4    案例整合"></a>1.2.2.4    案例整合</h4><p>需要先把simhash安装到本地仓库</p><p><img src="https://img-blog.csdnimg.cn/20201004124654969.png" alt="image-20201004121958144"></p><p>在案例的pom.xml中加入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--simhash网页去重--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simhasher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readAllFile</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        String everything = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(filename);</span><br><span class="line">            everything = IOUtils.toString(inputStream);</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> everything;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str1 = readAllFile(<span class="string">"D:/test/testin.txt"</span>);</span><br><span class="line">        SimHasher hash1 = <span class="keyword">new</span> SimHasher(str1);</span><br><span class="line">        <span class="comment">//打印simhash签名</span></span><br><span class="line">        System.out.println(hash1.getSignature());</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line"></span><br><span class="line">        String str2 = readAllFile(<span class="string">"D:/test/testin2.txt"</span>);</span><br><span class="line">        <span class="comment">//打印simhash签名</span></span><br><span class="line">        SimHasher hash2 = <span class="keyword">new</span> SimHasher(str2);</span><br><span class="line">        System.out.println(hash2.getSignature());</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印海明距离</span></span><br><span class="line">        System.out.println(hash1.getHammingDistance(hash2.getSignature()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-代理的使用"><a href="#1-3-代理的使用" class="headerlink" title="1.3    代理的使用"></a>1.3    代理的使用</h2><p>有些网站不允许爬虫进行数据爬取，因为会加大服务器的压力。其中一种最有效的方式是通过ip+时间进行鉴别，因为正常人不可能短时间开启太多的页面，发起太多的请求。</p><p>我们使用的WebMagic可以很方便的设置爬取数据的时间（参考第二天的的爬虫的配置、启动和终止）。但是这样会大大降低我们爬取数据的效率，如果不小心ip被禁了，会让我们无法爬去数据，那么我们就有必要使用代理服务器来爬取数据。</p><h3 id="1-3-1-代理服务器"><a href="#1-3-1-代理服务器" class="headerlink" title="1.3.1    代理服务器"></a>1.3.1    代理服务器</h3><p>代理（英语：Proxy），也称网络代理，是一种特殊的网络服务，允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。</p><p>提供代理服务的电脑系统或其它类型的网络终端称为代理服务器（英文：Proxy Server）。一个完整的代理请求过程为：客户端首先与代理服务器创建连接，接着根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或者获得目标服务器的指定资源。</p><p><img src="https://img-blog.csdnimg.cn/20201004124710599.png" alt="image-20201004122253194"></p><p>我们就需要知道代理服务器在哪里（ip和端口号）才可以使用。网上有很多代理服务器的提供商，但是大多是免费的不好用，付费的还行。</p><p>米扑代理：<a href="https://proxy.mimvp.com/free.php" target="_blank" rel="noopener">https://proxy.mimvp.com/free.php</a></p><h3 id="1-3-2-使用代理"><a href="#1-3-2-使用代理" class="headerlink" title="1.3.2    使用代理"></a>1.3.2    使用代理</h3><p>WebMagic使用的代理APIProxyProvider。因为相对于Site的“配置”，ProxyProvider定位更多是一个“组件”，所以代理不再从Site设置，而是由HttpClientDownloader设置。</p><table><thead><tr><th><strong>API</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>HttpClientDownloader.setProxyProvider(ProxyProvider  proxyProvider)</td><td>设置代理</td></tr></tbody></table><p>ProxyProvider有一个默认实现：SimpleProxyProvider。它是一个基于简单Round-Robin的、没有失败检查的ProxyProvider。可以配置任意个候选代理，每次会按顺序挑选一个代理使用。它适合用在自己搭建的比较稳定的代理的场景。</p><p>如果需要根据实际使用情况对代理服务器进行管理（例如校验是否可用，定期清理、添加代理服务器等），只需要自己实现APIProxyProvider即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建下载器Downloader</span></span><br><span class="line">        HttpClientDownloader httpClientDownloader = <span class="keyword">new</span> HttpClientDownloader();</span><br><span class="line">        <span class="comment">//给下载器设置代理服务器信息</span></span><br><span class="line">        httpClientDownloader.setProxyProvider(SimpleProxyProvider.from(<span class="keyword">new</span> Proxy(<span class="string">"112.109.198.105"</span>, <span class="number">3128</span>)));</span><br><span class="line"></span><br><span class="line">        Spider.create(<span class="keyword">new</span> ProxyTest())</span><br><span class="line">                .addUrl(<span class="string">"http://ip.chinaz.com/"</span>)</span><br><span class="line">                .setDownloader(httpClientDownloader)<span class="comment">//设置下载器</span></span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印获取到的结果以测试代理服务器是否生效</span></span><br><span class="line">        System.out.println(page.getHtml().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-查询案例实现"><a href="#2-查询案例实现" class="headerlink" title="2.    查询案例实现"></a>2.    查询案例实现</h1><p>把上一次上课抓取到的招聘数据作为数据源，实现招聘信息查询功能。首先需要把MySQL的数据添加到索引库中，然后再实现查询功能。我们这里使用的是SpringBoot，需要把Spring Data ElasticSearch 和项目进行整合。</p><h2 id="2-1-开发准备"><a href="#2-1-开发准备" class="headerlink" title="2.1    开发准备"></a>2.1    开发准备</h2><p>需要修改之前的配置，网页去重排除lucene依赖，同时去重的依赖必须放在pom.xml的最下部。因为现在要使用ElasticSearch，需要用到新的lucene依赖。</p><p>添加ES依赖和单元测试依赖，并修改以前的去重依赖，pom.xml效果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringData Jpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--MySQL连接包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--WebMagic核心包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--WebMagic扩展--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--WebMagic对布隆过滤器的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ElasticSearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--simhash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simhasher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改配置文件application.properties，添加以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/crawler</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JPA Configuration:</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ElasticSearch Configuration</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">192.168.142.128:9700</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">wgy-es</span></span><br></pre></td></tr></table></figure><h2 id="2-2-导入数据到索引库"><a href="#2-2-导入数据到索引库" class="headerlink" title="2.2    导入数据到索引库"></a>2.2    导入数据到索引库</h2><h3 id="2-2-1-编写pojo"><a href="#2-2-1-编写pojo" class="headerlink" title="2.2.1    编写pojo"></a>2.2.1    编写pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息实体类es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"jobinfo"</span>, type = <span class="string">"JobInfoField"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfoField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Long)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String companyAddr;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String companyInfo;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String jobName;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String jobAddr;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String jobInfo;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMin;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMax;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-编写dao"><a href="#2-2-2-编写dao" class="headerlink" title="2.2.2    编写dao"></a>2.2.2    编写dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息持久层接口es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">JobInfoField</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-编写Service"><a href="#2-2-3-编写Service" class="headerlink" title="2.2.3    编写Service"></a>2.2.3    编写Service</h3><p>编写Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务接口es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobRepositoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存一条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfoField</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfoField jobInfoField)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(List&lt;JobInfoField&gt; list)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务实现es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobRepositoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">JobRepositoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepository jobRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfoField jobInfoField)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobRepository.save(jobInfoField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(List&lt;JobInfoField&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobRepository.saveAll(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-编写测试用例"><a href="#2-2-4-编写测试用例" class="headerlink" title="2.2.4    编写测试用例"></a>2.2.4    编写测试用例</h3><p>先执行createIndex()方法创建索引，再执行jobData()导入数据到索引库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ESTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepositoryService jobRepositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引和映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elasticsearchTemplate.createIndex(JobInfoField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.elasticsearchTemplate.putMapping(JobInfoField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入数据到索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobInfoData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明页码数，从1开始</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//声明查询到的数据条数</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//从数据库中查询数据</span></span><br><span class="line">            Page&lt;JobInfo&gt; page = <span class="keyword">this</span>.jobInfoService.findJobInfoByPage(p, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//声明容器存放JobInfoField</span></span><br><span class="line">            List&lt;JobInfoField&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把查询到的数据封装为JobInfoField</span></span><br><span class="line">            <span class="keyword">for</span> (JobInfo jobInfo : page.getContent()) &#123;</span><br><span class="line">                <span class="comment">//声明对象</span></span><br><span class="line">                JobInfoField jobInfoField = <span class="keyword">new</span> JobInfoField();</span><br><span class="line">                <span class="comment">//封装数据,复制数据</span></span><br><span class="line">                BeanUtils.copyProperties(jobInfo, jobInfoField);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把封装好数据的对象放到list容器中</span></span><br><span class="line">                list.add(jobInfoField);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把封装好的数据保存到索引库中</span></span><br><span class="line">            <span class="keyword">this</span>.jobRepositoryService.saveAll(list);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//页码数加一</span></span><br><span class="line">            p++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取查询结果集的数据条数</span></span><br><span class="line">            pageSize = page.getContent().size();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> (pageSize == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-查询案例实现"><a href="#2-3-查询案例实现" class="headerlink" title="2.3    查询案例实现"></a>2.3    查询案例实现</h2><h3 id="2-3-1-页面跳转实现"><a href="#2-3-1-页面跳转实现" class="headerlink" title="2.3.1    页面跳转实现"></a>2.3.1    页面跳转实现</h3><p>添加静态资源到项目中</p><p><img src="https://img-blog.csdnimg.cn/20201004124731558.png" alt="image-20201004124008295"></p><h3 id="2-3-2-编写pojo"><a href="#2-3-2-编写pojo" class="headerlink" title="2.3.2    编写pojo"></a>2.3.2    编写pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果封装类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;JobInfoField&gt; rows;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pageTotal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-编写Controller"><a href="#2-3-3-编写Controller" class="headerlink" title="2.3.3    编写Controller"></a>2.3.3    编写Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepositoryService jobRepositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//salary: *-*</span></span><br><span class="line">    <span class="comment">//page: 1</span></span><br><span class="line">    <span class="comment">//jobaddr: 北京</span></span><br><span class="line">    <span class="comment">//keyword: java</span></span><br><span class="line">    <span class="comment">//Request URL: http://127.0.0.1:80/search</span></span><br><span class="line">    <span class="comment">//Request Method: POST</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件分页查询招聘信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salary</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobaddr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"search"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobResult <span class="title">search</span><span class="params">(String salary, String jobaddr, String keyword, Integer page)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        JobResult jobResult = <span class="keyword">this</span>.jobRepositoryService.search(salary, jobaddr, keyword, page);</span><br><span class="line">        <span class="keyword">return</span> jobResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-编写Service"><a href="#2-3-4-编写Service" class="headerlink" title="2.3.4    编写Service"></a>2.3.4    编写Service</h3><p>在JobRepositoryService编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件分页查询招聘信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jobaddr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JobResult <span class="title">search</span><span class="params">(String salary, String jobaddr, String keyword, Integer page)</span></span>;</span><br></pre></td></tr></table></figure><p>在JobRepositoryServiceImpl实现接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//salary: *-*</span></span><br><span class="line"><span class="comment">//page: 1</span></span><br><span class="line"><span class="comment">//jobaddr: 北京</span></span><br><span class="line"><span class="comment">//keyword: java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobResult <span class="title">search</span><span class="params">(String salary, String jobaddr, String keyword, Integer page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析参数薪资</span></span><br><span class="line">    String[] salarys = salary.split(<span class="string">"-"</span>);</span><br><span class="line">    <span class="keyword">int</span> salaryMin = <span class="number">0</span>, salaryMax = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取最低薪资</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"*"</span>.equals(salarys[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="comment">//如果最小值是*，表示最低薪资是0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果最小值不是*，需要转为数字类型，乘以10000</span></span><br><span class="line">        salaryMin = Integer.parseInt(salarys[<span class="number">0</span>]) * <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取最高薪资</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"*"</span>.equals(salarys[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="comment">//如果最大值是*，代表最大的数也包含,设置为1000万</span></span><br><span class="line">        salaryMax = <span class="number">10000000</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果最大值不是*，需要转为数字类型，乘以10000</span></span><br><span class="line">        salaryMax = Integer.parseInt(salarys[<span class="number">0</span>]) * <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断工作地点是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(jobaddr)) &#123;</span><br><span class="line">        <span class="comment">//如果为空，设置为*</span></span><br><span class="line">        jobaddr = <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断查询关键词是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(keyword)) &#123;</span><br><span class="line">        <span class="comment">//如果为空，设置为*</span></span><br><span class="line">        keyword = <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用dao的方法执行查询</span></span><br><span class="line">    Page&lt;JobInfoField&gt; pages = <span class="keyword">this</span>.jobRepository.findBySalaryMinBetweenAndSalaryMaxBetweenAndJobAddrAndJobNameAndJobInfo(salaryMin, salaryMax, salaryMin, salaryMax, jobaddr, keyword, keyword, PageRequest.of(page - <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装结果对象jobResult</span></span><br><span class="line">    JobResult jobResult = <span class="keyword">new</span> JobResult();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置结果集</span></span><br><span class="line">    jobResult.setRows(pages.getContent());</span><br><span class="line">    <span class="comment">//设置总页数</span></span><br><span class="line">    jobResult.setPageTotal(pages.getTotalPages());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jobResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-编写Dao"><a href="#2-3-5-编写Dao" class="headerlink" title="2.3.5    编写Dao"></a>2.3.5    编写Dao</h3><p>在JobRepository编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件分页查询数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMin 薪资下限最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMax 薪资下限最高值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMin1    薪资上限最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMax1    薪资上限最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jobaddr   工作地</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword   职位名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword1  职位信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable  分页数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  JobInfoField</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;JobInfoField&gt; <span class="title">findBySalaryMinBetweenAndSalaryMaxBetweenAndJobAddrAndJobNameAndJobInfo</span><span class="params">(<span class="keyword">int</span> salaryMin, <span class="keyword">int</span> salaryMax, <span class="keyword">int</span> salaryMin1, <span class="keyword">int</span> salaryMax1, String jobaddr, String keyword, String keyword1, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-6-测试"><a href="#2-3-6-测试" class="headerlink" title="2.3.6    测试"></a>2.3.6    测试</h3><p><img src="https://img-blog.csdnimg.cn/20201004124749394.png" alt="image-20201004124427619"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-案例扩展&quot;&gt;&lt;a href=&quot;#1-案例扩展&quot; class=&quot;headerlink&quot; title=&quot;1.    案例扩展&quot;&gt;&lt;/a&gt;1.    案例扩展&lt;/h1&gt;&lt;h2 id=&quot;1-1-定时任务&quot;&gt;&lt;a href=&quot;#1-1-定时任务&quot; class=&quot;headerlink&quot; title=&quot;1.1    定时任务&quot;&gt;&lt;/a&gt;1.1    定时任务&lt;/h2&gt;&lt;p&gt;在案例中我们使用的是Spring内置的Spring Task，这是Spring3.0加入的定时任务功能。我们使用注解的方式定时启动爬虫进行数据爬取。&lt;/p&gt;
&lt;p&gt;我们使用的是@Scheduled注解，其属性如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="网络爬虫" scheme="https://wgy1993.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫(二)</title>
    <link href="https://wgy1993.gitee.io/archives/61dad937.html"/>
    <id>https://wgy1993.gitee.io/archives/61dad937.html</id>
    <published>2020-10-03T05:40:53.000Z</published>
    <updated>2020-10-03T05:51:51.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-WebMagic介绍"><a href="#1-WebMagic介绍" class="headerlink" title="1.    WebMagic介绍"></a>1.    WebMagic介绍</h1><p>昨天完成了爬虫的入门的学习，是一个最基本的爬虫案例，今天我们要学习一款爬虫框架的使用就是WebMagic。其底层用到了我们上一天课程所使用的HttpClient和Jsoup，让我们能够更方便的开发爬虫。</p><a id="more"></a><p>WebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。</p><p>WebMagic的设计目标是尽量的模块化，并体现爬虫的功能特点。这部分提供非常简单、灵活的API，在基本不改变开发模式的情况下，编写一个爬虫。</p><p>扩展部分(webmagic-extension)提供一些便捷的功能，例如注解模式编写爬虫等。同时内置了一些常用的组件，便于爬虫开发。</p><h2 id="1-1-架构介绍"><a href="#1-1-架构介绍" class="headerlink" title="1.1    架构介绍"></a>1.1    架构介绍</h2><p>WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的设计参考了Scapy，但是实现方式更Java化一些。</p><p>而Spider则将这几个组件组织起来，让它们可以互相交互，流程化的执行，可以认为Spider是一个大的容器，它也是WebMagic逻辑的核心。</p><p>WebMagic总体架构图如下：</p><p><img src="https://img-blog.csdnimg.cn/20201003134213267.png" alt="image-20201003112810451"></p><h3 id="1-1-1-WebMagic的四个组件"><a href="#1-1-1-WebMagic的四个组件" class="headerlink" title="1.1.1    WebMagic的四个组件"></a>1.1.1    WebMagic的四个组件</h3><ul><li><p>Downloader</p><p>Downloader负责从互联网上下载页面，以便后续处理。WebMagic默认使用了Apache HttpClient作为下载工具。</p></li><li><p>PageProcessor</p><p>PageProcessor负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用Jsoup作为HTML解析工具，并基于其开发了解析XPath的工具Xsoup。</p><p>在这四个组件中，PageProcessor对于每个站点每个页面都不一样，是需要使用者定制的部分。</p></li><li><p>Scheduler</p><p>Scheduler负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。</p></li><li><p>Pipeline</p><p>Pipeline负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。</p><p>Pipeline定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline。对于一类需求一般只需编写一个Pipeline。</p></li></ul><h3 id="1-1-2-用于数据流转的对象"><a href="#1-1-2-用于数据流转的对象" class="headerlink" title="1.1.2    用于数据流转的对象"></a>1.1.2    用于数据流转的对象</h3><ul><li><p>Request</p><p>Request是对URL地址的一层封装，一个Request对应一个URL地址。</p><p>它是PageProcessor与Downloader交互的载体，也是PageProcessor控制Downloader唯一方式。</p><p>除了URL本身外，它还包含一个Key-Value结构的字段extra。你可以在extra中保存一些特殊的属性，然后在其他地方读取，以完成不同的功能。例如附加上一个页面的一些信息等。</p></li><li><p>Page</p><p>Page代表了从Downloader下载到的一个页面——可能是HTML，也可能是JSON或者其他文本格式的内容。</p><p>Page是WebMagic抽取过程的核心对象，它提供一些方法可供抽取、结果保存等。</p></li><li><p>ResultItems</p><p>ResultItems相当于一个Map，它保存PageProcessor处理的结果，供Pipeline使用。它的API与Map很类似，值得注意的是它有一个字段skip，若设置为true，则不应被Pipeline处理。</p></li></ul><h2 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2    入门案例"></a>1.2    入门案例</h2><h3 id="1-2-1-加入依赖"><a href="#1-2-1-加入依赖" class="headerlink" title="1.2.1    加入依赖"></a>1.2.1    加入依赖</h3><p>创建Maven工程，并加入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>crawler-webmagic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--WebMagic--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：0.7.3版本对SSL的并不完全，如果是直接从Maven中央仓库下载依赖，在爬取只支持SSL v1.2的网站会有SSL的异常抛出。</p><p>解决方案：</p><ul><li>等作者的0.7.4的版本发布</li><li>直接从github上下载最新的代码，安装到本地仓库</li></ul><p>也可以参考以下资料自己修复</p><p><a href="https://github.com/code4craft/webmagic/issues/701" target="_blank" rel="noopener">https://github.com/code4craft/webmagic/issues/701</a></p><h3 id="1-2-2-加入配置文件"><a href="#1-2-2-加入配置文件" class="headerlink" title="1.2.2    加入配置文件"></a>1.2.2    加入配置文件</h3><p>WebMagic使用slf4j-log4j12作为slf4j的实现。</p><p>添加log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO,A1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-案例实现"><a href="#1-2-3-案例实现" class="headerlink" title="1.2.3    案例实现"></a>1.2.3    案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebMagic入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数，执行爬虫</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">                .addUrl(<span class="string">"https://group.jd.com/index/20000001.htm"</span>)  <span class="comment">//设置爬取数据的页面</span></span><br><span class="line">                .run();<span class="comment">//执行爬虫</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page page</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析返回的数据page，并且把解析的结果放到ResultItems中</span></span><br><span class="line">        <span class="comment">//css选择器</span></span><br><span class="line">        page.putField(<span class="string">"div"</span>, page.getHtml().css(<span class="string">"div.mt h3"</span>).all());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><p><img src="https://img-blog.csdnimg.cn/20201003134240406.png" alt="image-20201003114604954"></p><h1 id="2-WebMagic功能"><a href="#2-WebMagic功能" class="headerlink" title="2.    WebMagic功能"></a>2.    WebMagic功能</h1><h2 id="2-1-实现PageProcessor"><a href="#2-1-实现PageProcessor" class="headerlink" title="2.1    实现PageProcessor"></a>2.1    实现PageProcessor</h2><h3 id="2-1-1-抽取元素Selectable"><a href="#2-1-1-抽取元素Selectable" class="headerlink" title="2.1.1    抽取元素Selectable"></a>2.1.1    抽取元素Selectable</h3><p>WebMagic里主要使用了三种抽取技术：XPath、正则表达式和CSS选择器。另外，对于JSON格式的内容，可使用JsonPath进行解析。</p><h4 id="2-1-1-1-XPath"><a href="#2-1-1-1-XPath" class="headerlink" title="2.1.1.1    XPath"></a>2.1.1.1    XPath</h4><p>获取属性class=mt的div标签，里面的h1标签的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().xpath(<span class="string">"//div[@class=mt]/h1/text()"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-1-1-2-CSS选择器"><a href="#2-1-1-2-CSS选择器" class="headerlink" title="2.1.1.2    CSS选择器"></a>2.1.1.2    CSS选择器</h4><p>CSS选择器是与XPath类似的语言。在上一次的课程中，我们已经学习过了Jsoup的选择器，它比XPath写起来要简单一些，但是如果写复杂一点的抽取规则，就相对要麻烦一点。</p><p>div.mt&gt;h1表示class为mt的div标签下的直接子元素h1标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().css(<span class="string">"div.mt&gt;h1"</span>).toString()</span><br></pre></td></tr></table></figure><p>可是使用:nth-child(n)选择第几个元素，如下选择第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().css(<span class="string">"div#news_div &gt; ul &gt; li:nth-child(1) a"</span>).toString()</span><br></pre></td></tr></table></figure><p>注意：需要使用&gt;，就是直接子元素才可以选择第几个元素</p><h4 id="2-1-1-3-正则表达式"><a href="#2-1-1-3-正则表达式" class="headerlink" title="2.1.1.3    正则表达式"></a>2.1.1.3    正则表达式</h4><p>正则表达式则是一种通用的文本抽取语言。在这里一般用于获取url地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().css(<span class="string">"div#news_div a"</span>).regex(<span class="string">".*江苏.*"</span>).all()</span><br></pre></td></tr></table></figure><h3 id="2-1-2-抽取元素API"><a href="#2-1-2-抽取元素API" class="headerlink" title="2.1.2    抽取元素API"></a>2.1.2    抽取元素API</h3><p>Selectable相关的抽取元素链式API是WebMagic的一个核心功能。使用Selectable接口，可以直接完成页面元素的链式抽取，也无需去关心抽取的细节。</p><p>在刚才的例子中可以看到，page.getHtml()返回的是一个Html对象，它实现了Selectable接口。这个接口包含的方法分为两类：抽取部分和获取结果部分。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>xpath(String xpath)</td><td>使用XPath选择</td><td>html.xpath(“//div[@class=’title’]”)</td></tr><tr><td>$(String selector)</td><td>使用Css选择器选择</td><td>html.$(“div.title”)</td></tr><tr><td>$(String selector,String attr)</td><td>使用Css选择器选择</td><td>html.$(“div.title”,”text”)</td></tr><tr><td>css(String selector)</td><td>功能同$()，使用Css选择器选择</td><td>html.css(“div.title”)</td></tr><tr><td>links()</td><td>选择所有链接</td><td>html.links()</td></tr><tr><td>regex(String regex)</td><td>使用正则表达式抽取</td><td>html.regex(“(.*?)&quot;)</td></tr></tbody></table><p>这部分抽取API返回的都是一个<code>Selectable</code>接口，意思是说，是支持链式调用的。例如访问<a href="https://www.jd.com/moreSubject.aspx页面" target="_blank" rel="noopener">https://www.jd.com/moreSubject.aspx页面</a></p><p><img src="https://img-blog.csdnimg.cn/20201003134259798.png" alt="image-20201003120734199"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先获取class为news_div的div</span></span><br><span class="line"><span class="comment">//再获取里面的所有包含文明的元素</span></span><br><span class="line">List&lt;String&gt; list = page.getHtml()</span><br><span class="line">    .css(<span class="string">"div#news_div"</span>)</span><br><span class="line">    .regex(<span class="string">".*文明.*"</span>).all();</span><br></pre></td></tr></table></figure><h3 id="2-1-3-获取结果API"><a href="#2-1-3-获取结果API" class="headerlink" title="2.1.3    获取结果API"></a>2.1.3    获取结果API</h3><p>当链式调用结束时，我们一般都想要拿到一个字符串类型的结果。这时候就需要用到获取结果的API了。</p><p>我们知道，一条抽取规则，无论是XPath、CSS选择器或者正则表达式，总有可能抽取到多条元素。WebMagic对这些进行了统一，可以通过不同的API获取到一个或者多个元素。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>get()</td><td>返回一条String类型的结果</td><td>String link=  html.links().get()</td></tr><tr><td>toString()</td><td>同get()，返回一条String类型的结果</td><td>String link=  html.links().toString()</td></tr><tr><td>all()</td><td>返回所有抽取结果</td><td>List links=  html.links().all()</td></tr></tbody></table><p>当有多条数据的时候，使用get()和toString()都是获取第一个url地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str = page.getHtml()</span><br><span class="line">    .css(<span class="string">"div#news_div"</span>)</span><br><span class="line">    .links().regex(<span class="string">".*[0-3]$"</span>).toString();</span><br><span class="line"></span><br><span class="line">String get = page.getHtml()</span><br><span class="line">    .css(<span class="string">"div#news_div"</span>)</span><br><span class="line">    .links().regex(<span class="string">".*[0-3]$"</span>).get();</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img-blog.csdnimg.cn/20201003134322403.png" alt="image-20201003121114333"></p><p>这里selectable.toString()采用了toString()这个接口，是为了在输出以及和一些框架结合的时候，更加方便。因为一般情况下，我们都只需要选择一个元素！selectable.all()则会获取到所有元素。</p><h3 id="2-1-4-获取链接"><a href="#2-1-4-获取链接" class="headerlink" title="2.1.4    获取链接"></a>2.1.4    获取链接</h3><p>有了处理页面的逻辑，我们的爬虫就接近完工了，但是现在还有一个问题：一个站点的页面是很多的，一开始我们不可能全部列举出来，于是如何发现后续的链接，是一个爬虫不可缺少的一部分。</p><p>下面的例子就是获取<a href="https://www.jd.com/moreSubject.aspx这个页面中所有符合[https://www.jd.com/news.\\w+?.*](https://www.jd.com/news./w+?.*)正则表达式的url地址并将这些链接加入到待抓取的队列中去。" target="_blank" rel="noopener">https://www.jd.com/moreSubject.aspx这个页面中所有符合[https://www.jd.com/news.\\w+?.*](https://www.jd.com/news./w+?.*)正则表达式的url地址并将这些链接加入到待抓取的队列中去。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    page.addTargetRequests(page.getHtml().links()</span><br><span class="line">                           .regex(<span class="string">"(https://www.jd.com/news.\\w+?.*)"</span>).all());</span><br><span class="line">    System.out.println(page.getHtml().css(<span class="string">"div.mt&gt;h1"</span>).all());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        .addUrl(<span class="string">"https://www.jd.com/moreSubject.aspx"</span>)</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-使用Pipeline保存结果"><a href="#2-2-使用Pipeline保存结果" class="headerlink" title="2.2    使用Pipeline保存结果"></a>2.2    使用Pipeline保存结果</h2><p>WebMagic用于保存结果的组件叫做<code>Pipeline</code>。我们现在通过“控制台输出结果”这件事也是通过一个内置的Pipeline完成的，它叫做<code>ConsolePipeline</code>。</p><p>那么，我现在想要把结果用保存到文件中，怎么做呢？只将Pipeline的实现换成”FilePipeline”就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        <span class="comment">//初始访问url地址</span></span><br><span class="line">        .addUrl(<span class="string">"https://www.jd.com/moreSubject.aspx"</span>)</span><br><span class="line">        .addPipeline(<span class="keyword">new</span> FilePipeline(<span class="string">"C:\\Users\\wgy\\Desktop\\result"</span>))<span class="comment">//Pipeline保存结果到文件</span></span><br><span class="line">        .thread(<span class="number">5</span>)<span class="comment">//设置线程数</span></span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-爬虫的配置、启动和终止"><a href="#2-3-爬虫的配置、启动和终止" class="headerlink" title="2.3    爬虫的配置、启动和终止"></a>2.3    爬虫的配置、启动和终止</h2><h3 id="2-3-1-Spider"><a href="#2-3-1-Spider" class="headerlink" title="2.3.1    Spider"></a>2.3.1    Spider</h3><p>Spider是爬虫启动的入口。在启动爬虫之前，我们需要使用一个PageProcessor创建一个Spider对象，然后使用run()进行启动。</p><p>同时Spider的其他组件（Downloader、Scheduler、Pipeline）都可以通过set方法来进行设置。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">create(PageProcessor)</td><td>创建Spider</td><td>Spider.create(new  GithubRepoProcessor())</td></tr><tr><td align="left">addUrl(String…)</td><td>添加初始的URL</td><td>spider .addUrl(“<a href="http://webmagic.io/docs/&quot;" target="_blank" rel="noopener">http://webmagic.io/docs/&quot;</a>)</td></tr><tr><td align="left">thread(n)</td><td>开启n个线程</td><td>spider.thread(5)</td></tr><tr><td align="left">run()</td><td>启动，会阻塞当前线程执行</td><td>spider.run()</td></tr><tr><td align="left">start()/runAsync()</td><td>异步启动，当前线程继续执行</td><td>spider.start()</td></tr><tr><td align="left">stop()</td><td>停止爬虫</td><td>spider.stop()</td></tr><tr><td align="left">addPipeline(Pipeline)</td><td>添加一个Pipeline，一个Spider可以有多个Pipeline</td><td>spider .addPipeline(new  ConsolePipeline())</td></tr><tr><td align="left">setScheduler(Scheduler)</td><td>设置Scheduler，一个Spider只能有个一个Scheduler</td><td>spider.setScheduler(new  RedisScheduler())</td></tr><tr><td align="left">setDownloader(Downloader)</td><td>设置Downloader，一个Spider只能有个一个Downloader</td><td>spider .setDownloader(  new SeleniumDownloader())</td></tr><tr><td align="left">get(String)</td><td>同步调用，并直接取得结果</td><td>ResultItems result = spider.get(“<a href="http://webmagic.io/docs/&quot;" target="_blank" rel="noopener">http://webmagic.io/docs/&quot;</a>)</td></tr><tr><td align="left">getAll(String…)</td><td>同步调用，并直接取得一堆结果</td><td>List<ResultItems>  results = spider.getAll(“<a href="http://webmagic.io/docs/&quot;" target="_blank" rel="noopener">http://webmagic.io/docs/&quot;</a>, “<a href="http://webmagic.io/xxx&quot;" target="_blank" rel="noopener">http://webmagic.io/xxx&quot;</a>)</td></tr></tbody></table><h3 id="2-3-2-爬虫配置Site"><a href="#2-3-2-爬虫配置Site" class="headerlink" title="2.3.2    爬虫配置Site"></a>2.3.2    爬虫配置Site</h3><p>Site.me()可以对爬虫进行一些配置配置，包括编码、抓取间隔、超时时间、重试次数等。在这里我们先简单设置一下：重试次数为3次，抓取间隔为一秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">    .setCharset(<span class="string">"UTF-8"</span>)<span class="comment">//编码</span></span><br><span class="line">    .setSleepTime(<span class="number">1</span>)<span class="comment">//抓取间隔时间</span></span><br><span class="line">    .setTimeOut(<span class="number">1000</span>*<span class="number">10</span>)<span class="comment">//超时时间</span></span><br><span class="line">    .setRetrySleepTime(<span class="number">3000</span>)<span class="comment">//重试时间</span></span><br><span class="line">    .setRetryTimes(<span class="number">3</span>);<span class="comment">//重试次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> site;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>站点本身的一些配置信息，例如编码、HTTP头、超时时间、重试策略等、代理等，都可以通过设置Site对象来进行配置。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">setCharset(String)</td><td>设置编码</td><td>site.setCharset(“utf-8”)</td></tr><tr><td align="left">setUserAgent(String)</td><td>设置UserAgent</td><td>site.setUserAgent(“Spider”)</td></tr><tr><td align="left">setTimeOut(int)</td><td>设置超时时间，  单位是毫秒</td><td>site.setTimeOut(3000)</td></tr><tr><td align="left">setRetryTimes(int)</td><td>设置重试次数</td><td>site.setRetryTimes(3)</td></tr><tr><td align="left">setCycleRetryTimes(int)</td><td>设置循环重试次数</td><td>site.setCycleRetryTimes(3)</td></tr><tr><td align="left">addCookie(String,String)</td><td>添加一条cookie</td><td>site.addCookie(“dotcomt_user”,”code4craft”)</td></tr><tr><td align="left">setDomain(String)</td><td>设置域名，需设置域名后，addCookie才可生效</td><td>site.setDomain(“github.com”)</td></tr><tr><td align="left">addHeader(String,String)</td><td>添加一条addHeader</td><td>site.addHeader(“Referer”,”<a href="https://github.com/" target="_blank" rel="noopener">https://github.com</a>“)</td></tr><tr><td align="left">setHttpProxy(HttpHost)</td><td>设置Http代理</td><td>site.setHttpProxy(new  HttpHost(“127.0.0.1”,8080))</td></tr></tbody></table><h1 id="3-爬虫分类"><a href="#3-爬虫分类" class="headerlink" title="3.    爬虫分类"></a>3.    爬虫分类</h1><p>网络爬虫按照系统结构和实现技术，大致可以分为以下几种类型：通用网络爬虫、聚焦网络爬虫、增量式网络爬虫、深层网络爬虫。 实际的网络爬虫系统通常是几种爬虫技术相结合实现的</p><h2 id="3-1-通用网络爬虫"><a href="#3-1-通用网络爬虫" class="headerlink" title="3.1    通用网络爬虫"></a>3.1    通用网络爬虫</h2><p>通用网络爬虫又称全网爬虫（Scalable Web Crawler），爬行对象从一些种子 URL 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p><p>这类网络爬虫的爬行范围和数量巨大，对于爬行速度和存储空间要求较高，对于爬行页面的顺序要求相对较低，同时由于待刷新的页面太多，通常采用并行工作方式，但需要较长时间才能刷新一次页面。</p><p><strong>简单的说就是互联网上抓取所有数据。</strong></p><h2 id="3-2-聚焦网络爬虫"><a href="#3-2-聚焦网络爬虫" class="headerlink" title="3.2    聚焦网络爬虫"></a>3.2    聚焦网络爬虫</h2><p>聚焦网络爬虫（Focused Crawler），又称主题网络爬虫（Topical Crawler），是指选择性地爬行那些与预先定义好的主题相关页面的网络爬虫。</p><p>和通用网络爬虫相比，聚焦爬虫只需要爬行与主题相关的页面，极大地节省了硬件和网络资源，保存的页面也由于数量少而更新快，还可以很好地满足一些特定人群对特定领域信息的需求 。</p><p><strong>简单的说就是互联网上只抓取某一种数据。</strong></p><h2 id="3-3-增量式网络爬虫"><a href="#3-3-增量式网络爬虫" class="headerlink" title="3.3    增量式网络爬虫"></a>3.3    增量式网络爬虫</h2><p>增量式网络爬虫（Incremental Web Crawler）是 指 对 已 下 载 网 页 采 取 增量式更新和只爬行新产生的或者已经发生变化网页的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p><p>和周期性爬行和刷新页面的网络爬虫相比，增量式爬虫只会在需要的时候爬行新产生或发生更新的页面 ，并不重新下载没有发生变化的页面，可有效减少数据下载量，及时更新已爬行的网页，减小时间和空间上的耗费，但是增加了爬行算法的复杂度和实现难度。</p><p><strong>简单的说就是互联网上只抓取刚刚更新的数据。</strong></p><h2 id="3-4-Deep-Web-爬虫"><a href="#3-4-Deep-Web-爬虫" class="headerlink" title="3.4    Deep Web 爬虫"></a>3.4    Deep Web 爬虫</h2><p>Web 页面按存在方式可以分为表层网页（Surface Web）和深层网页（Deep Web，也称 Invisible Web Pages 或 Hidden Web）。 </p><p>表层网页是指传统搜索引擎可以索引的页面，以超链接可以到达的静态网页为主构成的 Web 页面。</p><p><strong>Deep Web 是那些大部分内容不能通过静态链接获取的、隐藏在搜索表单后的，只有用户提交一些关键词才能获得的 Web 页面。</strong></p><h1 id="4-案例开发分析"><a href="#4-案例开发分析" class="headerlink" title="4.    案例开发分析"></a>4.    案例开发分析</h1><p>我们已经学完了WebMagic的基本使用方法，现在准备使用WebMagic实现爬取数据的功能。这里是一个比较完整的实现。</p><p>在这里我们实现的是聚焦网络爬虫，只爬取招聘的相关数据。</p><h2 id="4-1-业务分析"><a href="#4-1-业务分析" class="headerlink" title="4.1    业务分析"></a>4.1    业务分析</h2><p>今天要实现的是爬取<a href="https://www.51job.com/上的招聘信息。只爬取“计算机软件”和“互联网电子商务”两个行业的信息。" target="_blank" rel="noopener">https://www.51job.com/上的招聘信息。只爬取“计算机软件”和“互联网电子商务”两个行业的信息。</a></p><p>首先访问页面并搜索两个行业。结果如下</p><p><img src="https://img-blog.csdnimg.cn/20201003134348360.png" alt="image-20201003123904740"></p><p>点击职位详情页，我们分析发现详情页还有一些数据需要抓取：</p><p>职位、公司名称、工作地点、薪资、发布时间、职位信息、公司联系方式、公司信息</p><p><img src="https://img-blog.csdnimg.cn/20201003134408578.png" alt="image-20201003123958691"></p><p><img src="https://img-blog.csdnimg.cn/20201003134423654.png" alt="image-20201003124005488"></p><h2 id="4-2-数据库表"><a href="#4-2-数据库表" class="headerlink" title="4.2    数据库表"></a>4.2    数据库表</h2><p>根据以上信息，设计数据库表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;job_info&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,</span><br><span class="line">    &#96;company_name&#96; varchar(100) DEFAULT NULL COMMENT &#39;公司名称&#39;,</span><br><span class="line">    &#96;company_addr&#96; varchar(200) DEFAULT NULL COMMENT &#39;公司联系方式&#39;,</span><br><span class="line">    &#96;company_info&#96; text COMMENT &#39;公司信息&#39;,</span><br><span class="line">    &#96;job_name&#96; varchar(100) DEFAULT NULL COMMENT &#39;职位名称&#39;,</span><br><span class="line">    &#96;job_addr&#96; varchar(50) DEFAULT NULL COMMENT &#39;工作地点&#39;,</span><br><span class="line">    &#96;job_info&#96; text COMMENT &#39;职位信息&#39;,</span><br><span class="line">    &#96;salary_min&#96; int(10) DEFAULT NULL COMMENT &#39;薪资范围，最小&#39;,</span><br><span class="line">    &#96;salary_max&#96; int(10) DEFAULT NULL COMMENT &#39;薪资范围，最大&#39;,</span><br><span class="line">    &#96;url&#96; varchar(150) DEFAULT NULL COMMENT &#39;招聘信息详情页&#39;,</span><br><span class="line">    &#96;time&#96; varchar(10) DEFAULT NULL COMMENT &#39;职位最近发布时间&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;招聘信息&#39;;</span><br></pre></td></tr></table></figure><h2 id="4-3-实现流程"><a href="#4-3-实现流程" class="headerlink" title="4.3    实现流程"></a>4.3    实现流程</h2><p>我们需要解析职位列表页，获取职位的详情页，再解析页面获取数据。</p><p>获取url地址的流程如下</p><p><img src="https://img-blog.csdnimg.cn/2020100313444433.png" alt="image-20201003124220603"></p><p>但是在这里有个问题：在解析页面的时候，很可能会解析出相同的url地址(例如商品标题和商品图片超链接，而且url一样)，如果不进行处理，同样的url会解析处理多次，浪费资源。所以我们需要有一个url去重的功能</p><h3 id="4-3-1-Scheduler组件"><a href="#4-3-1-Scheduler组件" class="headerlink" title="4.3.1    Scheduler组件"></a>4.3.1    Scheduler组件</h3><p>WebMagic提供了Scheduler可以帮助我们解决以上问题。</p><p>Scheduler是WebMagic中进行URL管理的组件。一般来说，Scheduler包括两个作用：</p><ul><li>对待抓取的URL队列进行管理。</li><li>对已抓取的URL进行去重。</li></ul><p>WebMagic内置了几个常用的Scheduler。如果你只是在本地执行规模比较小的爬虫，那么基本无需定制Scheduler，但是了解一下已经提供的几个Scheduler还是有意义的。</p><table><thead><tr><th><strong>类</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>DuplicateRemovedScheduler</td><td>抽象基类，提供一些模板方法</td><td>继承它可以实现自己的功能</td></tr><tr><td>QueueScheduler</td><td>使用内存队列保存待抓取URL</td><td></td></tr><tr><td>PriorityScheduler</td><td>使用带有优先级的内存队列保存待抓取URL</td><td>耗费内存较QueueScheduler更大，但是当设置了request.priority之后，只能使用PriorityScheduler才可使优先级生效</td></tr><tr><td>FileCacheQueueScheduler</td><td>使用文件保存抓取URL，可以在关闭程序并下次启动时，从之前抓取到的URL继续抓取</td><td>需指定路径，会建立.urls.txt和.cursor.txt两个文件</td></tr><tr><td>RedisScheduler</td><td>使用Redis保存抓取队列，可进行多台机器同时合作抓取</td><td>需要安装并启动redis</td></tr></tbody></table><p>去重部分被单独抽象成了一个接口：DuplicateRemover，从而可以为同一个Scheduler选择不同的去重方式，以适应不同的需要，目前提供了两种去重方式。</p><table><thead><tr><th><strong>类</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>HashSetDuplicateRemover</td><td>使用HashSet来进行去重，占用内存较大</td></tr><tr><td>BloomFilterDuplicateRemover</td><td>使用BloomFilter来进行去重，占用内存较小，但是可能漏抓页面</td></tr></tbody></table><p>RedisScheduler是使用Redis的set进行去重，其他的Scheduler默认都使用HashSetDuplicateRemover来进行去重。</p><p>如果要使用BloomFilter，必须要加入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--WebMagic对布隆过滤器的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改代码，添加布隆过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        <span class="comment">//初始访问url地址</span></span><br><span class="line">        .addUrl(<span class="string">"https://www.jd.com/moreSubject.aspx"</span>)</span><br><span class="line">        .addPipeline(<span class="keyword">new</span> FilePipeline(<span class="string">"D:/webmagic/"</span>))</span><br><span class="line">        .setScheduler(<span class="keyword">new</span> QueueScheduler().setDuplicateRemover(<span class="keyword">new</span> BloomFilterDuplicateRemover(<span class="number">10000000</span>)));<span class="comment">//设置布隆去重过滤器，指定最多对1000万数据进行去重操作</span></span><br><span class="line">    .thread(<span class="number">5</span>)<span class="comment">//设置线程数</span></span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-三种去重方式"><a href="#4-3-2-三种去重方式" class="headerlink" title="4.3.2    三种去重方式"></a>4.3.2    三种去重方式</h3><p>去重就有三种实现方式，那有什么不同呢？</p><ul><li><p><strong>HashSet</strong></p><p>使用java中的HashSet不能重复的特点去重。优点是容易理解。使用方便。</p><p>缺点：占用内存大，性能较低。</p></li><li><p><strong>Redis去重</strong></p><p>使用Redis的set进行去重。优点是速度快（Redis本身速度就很快），而且去重不会占用爬虫服务器的资源，可以处理更大数据量的数据爬取。</p><p>缺点：需要准备Redis服务器，增加开发和使用成本。</p></li><li><p><strong>布隆过滤器（BloomFilter）</strong></p><p>使用布隆过滤器也可以实现去重。优点是占用的内存要比使用HashSet要小的多，也适合大量数据的去重操作。</p><p>缺点：有误判的可能。没有重复可能会判定重复，但是重复数据一定会判定重复。</p></li></ul><p>布隆过滤器 (Bloom Filter)是由Burton Howard Bloom于1970年提出，它是一种space efficient的概率型数据结构，用于判断一个元素是否在集合中。在垃圾邮件过滤的黑白名单方法、爬虫(Crawler)的网址判重模块中等等经常被用到。</p><p>哈希表也能用于判断元素是否在集合中，但是布隆过滤器只需要哈希表的1/8或1/4的空间复杂度就能完成同样的问题。布隆过滤器可以插入元素，但不可以删除已有元素。其中的元素越多，误报率越大，但是漏报是不可能的。</p><p><strong>原理：</strong></p><p>布隆过滤器需要的是一个位数组(和位图类似)和K个映射函数(和Hash表类似)，在初始状态时，对于长度为m的位数组array，它的所有位被置0。</p><p><img src="https://img-blog.csdnimg.cn/20201003134500977.png" alt="image-20201003125911966"></p><p>对于有n个元素的集合S={S1,S2…Sn},通过k个映射函数{f1,f2,……fk}，将集合S中的每个元素Sj(1&lt;=j&lt;=n)映射为K个值{g1,g2…gk}，然后再将位数组array中相对应的array[g1],array[g2]……array[gk]置为1：</p><p><img src="https://img-blog.csdnimg.cn/20201003134516105.png" alt="image-20201003125925362"></p><p>如果要查找某个元素item是否在S中，则通过映射函数{f1,f2,…fk}得到k个值{g1,g2…gk}，然后再判断array[g1],array[g2]…array[gk]是否都为1，若全为1，则item在S中，否则item不在S中。</p><p>布隆过滤器会造成一定的误判，因为集合中的若干个元素通过映射之后得到的数值恰巧包括g1,g2,…gk，在这种情况下可能会造成误判，但是概率很小。</p><h1 id="5-案例实现"><a href="#5-案例实现" class="headerlink" title="5.    案例实现"></a>5.    案例实现</h1><h2 id="5-1-开发准备"><a href="#5-1-开发准备" class="headerlink" title="5.1    开发准备"></a>5.1    开发准备</h2><h3 id="5-1-1-创建工程"><a href="#5-1-1-创建工程" class="headerlink" title="5.1.1    创建工程"></a>5.1.1    创建工程</h3><p>创建Maven工程，并加入依赖。pom.xml为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>crawler-job<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringData Jpa--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySQL连接包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--WebMagic核心包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--WebMagic扩展--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--WebMagic对布隆过滤器的支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-2-加入配置文件"><a href="#5-1-2-加入配置文件" class="headerlink" title="5.1.2    加入配置文件"></a>5.1.2    加入配置文件</h3><p>添加application.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/crawler</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JPA Configuration:</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><h3 id="5-1-3-编写Pojo"><a href="#5-1-3-编写Pojo" class="headerlink" title="5.1.3    编写Pojo"></a>5.1.3    编写Pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> String companyAddr;</span><br><span class="line">    <span class="keyword">private</span> String companyInfo;</span><br><span class="line">    <span class="keyword">private</span> String jobName;</span><br><span class="line">    <span class="keyword">private</span> String jobAddr;</span><br><span class="line">    <span class="keyword">private</span> String jobInfo;</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMin;</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMax;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-4-编写Dao"><a href="#5-1-4-编写Dao" class="headerlink" title="5.1.4    编写Dao"></a>5.1.4    编写Dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobInfoDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">JobInfo</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-5-编写Service"><a href="#5-1-5-编写Service" class="headerlink" title="5.1.5    编写Service"></a>5.1.5    编写Service</h3><p>编写Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存工作信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfo jobInfo)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询工作信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;JobInfo&gt; <span class="title">findJobInfo</span><span class="params">(JobInfo jobInfo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">JobInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoDao jobInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfo jobInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据url和发布时间查询数据</span></span><br><span class="line">        JobInfo param = <span class="keyword">new</span> JobInfo();</span><br><span class="line">        param.setUrl(jobInfo.getUrl());</span><br><span class="line">        param.setTime(jobInfo.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        List&lt;JobInfo&gt; list = <span class="keyword">this</span>.findJobInfo(param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断查询结果是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果查询结果为空，表示招聘信息数据不存在，或者已经更新了，需要新增或者更新数据库</span></span><br><span class="line">            <span class="keyword">this</span>.jobInfoDao.saveAndFlush(jobInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;JobInfo&gt; <span class="title">findJobInfo</span><span class="params">(JobInfo jobInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        Example example = Example.of(jobInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        List list = <span class="keyword">this</span>.jobInfoDao.findAll(example);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-6-编写引导类"><a href="#5-1-6-编写引导类" class="headerlink" title="5.1.6    编写引导类"></a>5.1.6    编写引导类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-功能实现"><a href="#5-2-功能实现" class="headerlink" title="5.2    功能实现"></a>5.2    功能实现</h2><h3 id="5-2-1-编写url解析功能"><a href="#5-2-1-编写url解析功能" class="headerlink" title="5.2.1    编写url解析功能"></a>5.2.1    编写url解析功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息解析</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">"https://search.51job.com/list/060000,000000,0000,32%252c01,9,99,Java,2,1.html?lang=c&amp;postchannel=0000&amp;workyear=03&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare="</span>;</span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">            .setCharset(<span class="string">"GBK"</span>)<span class="comment">//设置编码</span></span><br><span class="line">            .setTimeOut(<span class="number">10</span> * <span class="number">1000</span>)<span class="comment">//设置超时时间</span></span><br><span class="line">            .setRetrySleepTime(<span class="number">3000</span>)<span class="comment">//设置重试的间隔时间</span></span><br><span class="line">            .setRetryTimes(<span class="number">3</span>);<span class="comment">//设置重试的次数</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringDataPipeline springDataPipeline;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page page</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//解析页面，获取招聘信息详情的url地址</span></span><br><span class="line">        List&lt;Selectable&gt; list = page.getHtml().css(<span class="string">"div.j_joblist div.e"</span>).nodes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断获取到的集合是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果为空，表示这是招聘详情页,解析页面，获取招聘详情信息，保存数据</span></span><br><span class="line">            <span class="keyword">this</span>.saveJobInfo(page);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不为空，表示这是列表页,解析出详情页的url地址，放到任务队列中</span></span><br><span class="line">            <span class="keyword">for</span> (Selectable selectable : list) &#123;</span><br><span class="line">                <span class="comment">//获取url地址</span></span><br><span class="line">                String jobInfoUrl = selectable.links().toString();</span><br><span class="line">                <span class="comment">//把获取到的url地址放到任务队列中</span></span><br><span class="line">                page.addTargetRequest(jobInfoUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下一页的url</span></span><br><span class="line">        String bkUrl = page.getHtml().css(<span class="string">"div.p_in li.bk"</span>).nodes().get(<span class="number">1</span>).links().toString();</span><br><span class="line">        <span class="comment">//把url放到任务队列中</span></span><br><span class="line">        page.addTargetRequest(bkUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initialDelay当任务启动后，等等多久执行方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * fixedDelay每个多久执行方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(initialDelay = <span class="number">1000</span>, fixedDelay = <span class="number">100</span> * <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">                .addUrl(url)</span><br><span class="line">                .setScheduler(<span class="keyword">new</span> QueueScheduler().setDuplicateRemover(<span class="keyword">new</span> BloomFilterDuplicateRemover(<span class="number">100000</span>)))</span><br><span class="line">                .thread(<span class="number">10</span>)</span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-编写页面解析功能"><a href="#5-2-2-编写页面解析功能" class="headerlink" title="5.2.2    编写页面解析功能"></a>5.2.2    编写页面解析功能</h3><p>薪水的计算工具类MathSalary</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算薪水工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathSalary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取薪水范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salaryStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] getSalary(String salaryStr) &#123;</span><br><span class="line">        <span class="comment">//声明存放薪水范围的数组</span></span><br><span class="line">        Integer[] salary = <span class="keyword">new</span> Integer[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//"500/天"</span></span><br><span class="line">        <span class="comment">//0.8-1.2万/月</span></span><br><span class="line">        <span class="comment">//5-8千/月</span></span><br><span class="line">        <span class="comment">//5-6万/年</span></span><br><span class="line">        String date = salaryStr.substring(salaryStr.length() - <span class="number">1</span>, salaryStr.length());</span><br><span class="line">        <span class="comment">//如果是按天，则直接乘以240进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"月"</span>.equals(date) &amp;&amp; !<span class="string">"年"</span>.equals(date)) &#123;</span><br><span class="line">            salaryStr = salaryStr.substring(<span class="number">0</span>, salaryStr.length() - <span class="number">2</span>);</span><br><span class="line">            salary[<span class="number">0</span>] = salary[<span class="number">1</span>] = str2Num(salaryStr, <span class="number">240</span>);</span><br><span class="line">            <span class="keyword">return</span> salary;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String unit = salaryStr.substring(salaryStr.length() - <span class="number">3</span>, salaryStr.length() - <span class="number">2</span>);</span><br><span class="line">        String[] salarys = salaryStr.substring(<span class="number">0</span>, salaryStr.length() - <span class="number">3</span>).split(<span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        salary[<span class="number">0</span>] = mathSalary(date, unit, salarys[<span class="number">0</span>]);</span><br><span class="line">        salary[<span class="number">1</span>] = mathSalary(date, unit, salarys[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据条件计算薪水</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title">mathSalary</span><span class="params">(String date, String unit, String salaryStr)</span> </span>&#123;</span><br><span class="line">        Integer salary = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断单位是否是万</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"万"</span>.equals(unit)) &#123;</span><br><span class="line">            <span class="comment">//如果是万，薪水乘以10000</span></span><br><span class="line">            salary = str2Num(salaryStr, <span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则乘以1000</span></span><br><span class="line">            salary = str2Num(salaryStr, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断时间是否是月</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"月"</span>.equals(date)) &#123;</span><br><span class="line">            <span class="comment">//如果是月，薪水乘以12</span></span><br><span class="line">            salary = str2Num(salary.toString(), <span class="number">12</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">str2Num</span><span class="params">(String salaryStr, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把字符串转为小数，必须用Number接受，否则会有精度丢失的问题</span></span><br><span class="line">            Number result = Float.parseFloat(salaryStr) * num;</span><br><span class="line">            <span class="keyword">return</span> result.intValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析页面，获取招聘详情信息，保存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析页面，获取招聘详情信息，保存数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveJobInfo</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建招聘详情对象</span></span><br><span class="line">    JobInfo jobInfo = <span class="keyword">new</span> JobInfo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析页面</span></span><br><span class="line">    Html html = page.getHtml();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据，封装到对象中</span></span><br><span class="line">    jobInfo.setCompanyName(html.css(<span class="string">"div.cn p.cname a"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setCompanyAddr(Jsoup.parse(html.css(<span class="string">"div.bmsg"</span>).nodes().get(<span class="number">1</span>).toString()).text());</span><br><span class="line">    jobInfo.setCompanyInfo(Jsoup.parse(html.css(<span class="string">"div.tmsg"</span>).toString()).text());</span><br><span class="line">    jobInfo.setJobName(html.css(<span class="string">"div.cn h1"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setJobAddr(html.css(<span class="string">"div.cn span.lname"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setJobInfo(Jsoup.parse(html.css(<span class="string">"div.job_msg"</span>).toString()).text());</span><br><span class="line">    jobInfo.setUrl(page.getUrl().toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取薪资</span></span><br><span class="line">    Integer[] salary = MathSalary.getSalary(html.css(<span class="string">"div.cn strong"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setSalaryMin(salary[<span class="number">0</span>]);</span><br><span class="line">    jobInfo.setSalaryMax(salary[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取发布时间</span></span><br><span class="line">    String time = Jsoup.parse(html.css(<span class="string">"div.t1 span"</span>).regex(<span class="string">".*发布"</span>).toString()).text();</span><br><span class="line">    jobInfo.setTime(time.substring(<span class="number">0</span>, time.length() - <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把结果保存起来</span></span><br><span class="line">    page.putField(<span class="string">"jobInfo"</span>, jobInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-使用和定制Pipeline"><a href="#5-3-使用和定制Pipeline" class="headerlink" title="5.3    使用和定制Pipeline"></a>5.3    使用和定制Pipeline</h2><p>在WebMagic中，Pileline是抽取结束后，进行处理的部分，它主要用于抽取结果的保存，也可以定制Pileline可以实现一些通用的功能。在这里我们会定制Pipeline实现数据导入到数据库中</p><h3 id="5-3-1-Pipeline输出"><a href="#5-3-1-Pipeline输出" class="headerlink" title="5.3.1    Pipeline输出"></a>5.3.1    Pipeline输出</h3><p>Pipeline的接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ResultItems保存了抽取结果，它是一个Map结构，</span></span><br><span class="line">    <span class="comment">//在page.putField(key,value)中保存的数据，</span></span><br><span class="line">    <span class="comment">//可以通过ResultItems.get(key)获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ResultItems resultItems, Task task)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Pipeline其实就是将PageProcessor抽取的结果，继续进行了处理的，其实在Pipeline中完成的功能，你基本上也可以直接在PageProcessor实现，那么为什么会有Pipeline？有几个原因：</p><ul><li><p>为了模块分离</p><p>“页面抽取”和“后处理、持久化”是爬虫的两个阶段，将其分离开来，一个是代码结构比较清晰，另一个是以后也可能将其处理过程分开，分开在独立的线程以至于不同的机器执行。</p></li><li><p>Pipeline的功能比较固定，更容易做成通用组件</p><p>每个页面的抽取方式千变万化，但是后续处理方式则比较固定，例如保存到文件、保存到数据库这种操作，这些对所有页面都是通用的。</p></li></ul><p>在WebMagic里，一个Spider可以有多个Pipeline，使用Spider.addPipeline()即可增加一个Pipeline。这些Pipeline都会得到处理，例如可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spider.addPipeline(<span class="keyword">new</span> ConsolePipeline()).addPipeline(<span class="keyword">new</span> FilePipeline())</span><br></pre></td></tr></table></figure><p>实现输出结果到控制台，并且保存到文件的目标。</p><h3 id="5-3-2-已有的Pipeline"><a href="#5-3-2-已有的Pipeline" class="headerlink" title="5.3.2    已有的Pipeline"></a>5.3.2    已有的Pipeline</h3><p>WebMagic中就已经提供了控制台输出、保存到文件、保存为JSON格式的文件几种通用的Pipeline。</p><table><thead><tr><th><strong>类</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>ConsolePipeline</td><td>输出结果到控制台</td><td>抽取结果需要实现toString方法</td></tr><tr><td>FilePipeline</td><td>保存结果到文件</td><td>抽取结果需要实现toString方法</td></tr><tr><td>JsonFilePipeline</td><td>JSON格式保存结果到文件</td><td></td></tr><tr><td>ConsolePageModelPipeline</td><td>(注解模式)输出结果到控制台</td><td></td></tr><tr><td>FilePageModelPipeline</td><td>(注解模式)保存结果到文件</td><td></td></tr><tr><td>JsonFilePageModelPipeline</td><td>(注解模式)JSON格式保存结果到文件</td><td>想持久化的字段需要有getter方法</td></tr></tbody></table><h3 id="5-3-3-案例自定义Pipeline导入数据"><a href="#5-3-3-案例自定义Pipeline导入数据" class="headerlink" title="5.3.3    案例自定义Pipeline导入数据"></a>5.3.3    案例自定义Pipeline导入数据</h3><p>自定义SpringDataPipeline</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Pipeline导入数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataPipeline</span> <span class="keyword">implements</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ResultItems resultItems, Task task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取封装好的招聘详情对象</span></span><br><span class="line">        JobInfo jobInfo = resultItems.get(<span class="string">"jobInfo"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断数据是否不为空</span></span><br><span class="line">        <span class="keyword">if</span> (jobInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果不为空把数据保存到数据库中</span></span><br><span class="line">            <span class="keyword">this</span>.jobInfoService.save(jobInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JobProcessor中修改process()启动的逻辑，添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SpringDataPipeline springDataPipeline;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialDelay当任务启动后，等等多久执行方法</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * fixedDelay每个多久执行方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scheduled</span>(initialDelay = <span class="number">1000</span>, fixedDelay = <span class="number">100</span> * <span class="number">1000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        .addUrl(url)</span><br><span class="line">        .setScheduler(<span class="keyword">new</span> QueueScheduler().setDuplicateRemover(<span class="keyword">new</span> BloomFilterDuplicateRemover(<span class="number">100000</span>)))</span><br><span class="line">        .thread(<span class="number">10</span>)</span><br><span class="line">        .addPipeline(<span class="keyword">this</span>.springDataPipeline)</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-WebMagic介绍&quot;&gt;&lt;a href=&quot;#1-WebMagic介绍&quot; class=&quot;headerlink&quot; title=&quot;1.    WebMagic介绍&quot;&gt;&lt;/a&gt;1.    WebMagic介绍&lt;/h1&gt;&lt;p&gt;昨天完成了爬虫的入门的学习，是一个最基本的爬虫案例，今天我们要学习一款爬虫框架的使用就是WebMagic。其底层用到了我们上一天课程所使用的HttpClient和Jsoup，让我们能够更方便的开发爬虫。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="网络爬虫" scheme="https://wgy1993.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫(一)</title>
    <link href="https://wgy1993.gitee.io/archives/ceeb4255.html"/>
    <id>https://wgy1993.gitee.io/archives/ceeb4255.html</id>
    <published>2020-10-02T05:04:34.000Z</published>
    <updated>2020-10-02T05:14:00.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-网络爬虫"><a href="#1-网络爬虫" class="headerlink" title="1.    网络爬虫"></a>1.    网络爬虫</h1><h2 id="1-1-网络爬虫介绍"><a href="#1-1-网络爬虫介绍" class="headerlink" title="1.1    网络爬虫介绍"></a>1.1    网络爬虫介绍</h2><p>在大数据时代，信息的采集是一项重要的工作，而互联网中的数据是海量的，如果单纯靠人力进行信息采集，不仅低效繁琐，搜集的成本也会提高。如何自动高效地获取互联网中我们感兴趣的信息并为我们所用是一个重要的问题，而爬虫技术就是为了解决这些问题而生的。</p><a id="more"></a><p>网络爬虫（Web crawler）也叫做网络机器人，可以代替人们自动地在互联网中进行数据信息的采集与整理。它<strong>是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本</strong>，可以自动采集所有其能够访问到的页面内容，以获取相关数据。</p><p>从功能上来讲，爬虫一般分为数据采集，处理，储存三个部分。爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列,直到满足系统的一定停止条件。</p><h2 id="1-2-为什么学网络爬虫"><a href="#1-2-为什么学网络爬虫" class="headerlink" title="1.2    为什么学网络爬虫"></a>1.2    为什么学网络爬虫</h2><p>我们初步认识了网络爬虫，但是为什么要学习网络爬虫呢？只有清晰地知道我们的学习目的，才能够更好地学习这一项知识。在此，总结了4种常见的学习爬虫的原因：</p><ul><li><p>可以实现搜索引擎</p><p>我们学会了爬虫编写之后，就可以利用爬虫自动地采集互联网中的信息，采集回来后进行相应的存储或处理，在需要检索某些信息的时候，只需在采集回来的信息中进行检索，即实现了私人的搜索引擎。</p></li><li><p>大数据时代，可以让我们获取更多的数据源。</p><p>在进行大数据分析或者进行数据挖掘的时候，需要有数据源进行分析。我们可以从某些提供数据统计的网站获得，也可以从某些文献或内部资料中获得，但是这些获得数据的方式，有时很难满足我们对数据的需求，而手动从互联网中去寻找这些数据，则耗费的精力过大。此时就可以利用爬虫技术，自动地从互联网中获取我们感兴趣的数据内容，并将这些数据内容爬取回来，作为我们的数据源，再进行更深层次的数据分析，并获得更多有价值的信息。</p></li><li><p>可以更好地进行搜索引擎优化（SEO）。</p><p>对于很多SEO从业者来说，为了更好的完成工作，那么就必须要对搜索引擎的工作原理非常清楚，同时也需要掌握搜索引擎爬虫的工作原理。而学习爬虫，可以更深层次地理解搜索引擎爬虫的工作原理，这样在进行搜索引擎优化时，才能知己知彼，百战不殆。</p></li><li><p>有利于就业。</p><p>从就业来说，爬虫工程师方向是不错的选择之一，因为目前爬虫工程师的需求越来越大，而能够胜任这方面岗位的人员较少，所以属于一个比较紧缺的职业方向，并且随着大数据时代和人工智能的来临，爬虫技术的应用将越来越广泛，在未来会拥有很好的发展空间。</p></li></ul><h2 id="2-1-爬虫入门程序"><a href="#2-1-爬虫入门程序" class="headerlink" title="2.1    爬虫入门程序"></a>2.1    爬虫入门程序</h2><h3 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1    环境准备"></a>2.1.1    环境准备</h3><ul><li>JDK1.8</li><li>IntelliJ IDEA</li><li>IDEA自带的Maven</li></ul><h3 id="2-1-2-创建工程添加依赖"><a href="#2-1-2-创建工程添加依赖" class="headerlink" title="2.1.2    创建工程添加依赖"></a>2.1.2    创建工程添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HttpClient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-加入log4j-properties"><a href="#2-1-3-加入log4j-properties" class="headerlink" title="2.1.3    加入log4j.properties"></a>2.1.3    加入log4j.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="meta">log4j.logger.com.wgy</span> = <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-编写代码"><a href="#2-1-4-编写代码" class="headerlink" title="2.1.4    编写代码"></a>2.1.4    编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬虫入门程序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrawlerFirst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 打开浏览器,创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 输入网址,发起get请求创建HttpGet对象</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用User-Agent防止HttpClient发送http请求时403 Forbidden和安全拦截</span></span><br><span class="line">        <span class="comment">//String userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36";</span></span><br><span class="line">        <span class="comment">//httpGet.setHeader("User-Agent", userAgent);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.按回车，发起请求，返回响应，使用HttpClient对象发起请求</span></span><br><span class="line">        CloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 解析响应，获取数据</span></span><br><span class="line">        <span class="comment">//判断状态码是否是200</span></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            String content = EntityUtils.toString(entity, <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-HttpClient"><a href="#2-HttpClient" class="headerlink" title="2.    HttpClient"></a>2.    HttpClient</h1><p>网络爬虫就是用程序帮助我们访问网络上的资源，我们一直以来都是使用HTTP协议访问互联网的网页，网络爬虫需要编写程序，在这里使用同样的HTTP协议访问网页。</p><p>这里我们使用Java的HTTP协议客户端 HttpClient这个技术，来实现抓取网页数据。</p><h2 id="2-1-GET请求"><a href="#2-1-GET请求" class="headerlink" title="2.1    GET请求"></a>2.1    GET请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GET请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpGetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置url访问地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/20201002130058150.png" alt="image-20201002100913997"></p><h2 id="2-2-带参数的GET请求"><a href="#2-2-带参数的GET请求" class="headerlink" title="2.2    带参数的GET请求"></a>2.2    带参数的GET请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带参数的GET请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpGetParamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求地址是：http://yun.itheima.com/search?keys=Java</span></span><br><span class="line">        <span class="comment">//创建URIBuilder</span></span><br><span class="line">        URIBuilder uriBuilder = <span class="keyword">new</span> URIBuilder(<span class="string">"http://yun.itheima.com/search"</span>);</span><br><span class="line">        <span class="comment">//设置参数</span></span><br><span class="line">        uriBuilder.setParameter(<span class="string">"keys"</span>, <span class="string">"Java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置url访问地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"发起请求的信息："</span> + httpGet);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/20201002130152447.png" alt="image-20201002101034787"></p><h2 id="2-3-POST请求"><a href="#2-3-POST请求" class="headerlink" title="2.3    POST请求"></a>2.3    POST请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POST请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPostTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpPost对象，设置url访问地址</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/20201002130210340.png" alt="image-20201002101146636"></p><h2 id="2-4-带参数的POST请求"><a href="#2-4-带参数的POST请求" class="headerlink" title="2.4    带参数的POST请求"></a>2.4    带参数的POST请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带参数的POST请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPostParamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpPost对象，设置url访问地址</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"http://yun.itheima.com/search"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明List集合，封装表单中的参数</span></span><br><span class="line">        List&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求地址是：http://yun.itheima.com/search?keys=Java</span></span><br><span class="line">        params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"keys"</span>, <span class="string">"Java"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建表单的Entity对象,第一个参数就是封装好的表单数据，第二个参数就是编码</span></span><br><span class="line">        UrlEncodedFormEntity formEntity = <span class="keyword">new</span> UrlEncodedFormEntity(params, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置表单的Entity对象到Post请求中</span></span><br><span class="line">        httpPost.setEntity(formEntity);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/2020100213023287.png" alt="image-20201002102830320"></p><h2 id="2-5-连接池"><a href="#2-5-连接池" class="headerlink" title="2.5    连接池"></a>2.5    连接池</h2><p>如果每次请求都要创建HttpClient，会有频繁创建和销毁的问题，可以使用连接池来解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpClient连接池</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientPoolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池管理器</span></span><br><span class="line">        PoolingHttpClientConnectionManager cm = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个主机的最大连接数</span></span><br><span class="line">        cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用连接池管理器发起请求</span></span><br><span class="line">        doGet(cm);</span><br><span class="line">        doGet(cm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(PoolingHttpClientConnectionManager cm)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不是每次创建新的HttpClient，而是从连接池中获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();</span><br><span class="line"></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//不能关闭HttpClient，由连接池管理HttpClient</span></span><br><span class="line">                <span class="comment">//httpClient.close();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-请求参数"><a href="#2-6-请求参数" class="headerlink" title="2.6    请求参数"></a>2.6    请求参数</h2><p>有时候因为网络，或者目标服务器的原因，请求需要更长的时间才能完成，我们需要自定义相关时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置url访问地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置请求信息</span></span><br><span class="line">        RequestConfig config = RequestConfig.custom().setConnectTimeout(<span class="number">1000</span>)   <span class="comment">//创建连接的最长时间，单位是毫秒</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">500</span>)   <span class="comment">//设置获取连接的最长时间，单位是毫秒</span></span><br><span class="line">                .setSocketTimeout(<span class="number">10</span> * <span class="number">1000</span>)      <span class="comment">//设置数据传输的最长时间，单位是毫秒</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给请求设置请求信息</span></span><br><span class="line">        httpGet.setConfig(config);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Jsoup"><a href="#3-Jsoup" class="headerlink" title="3.    Jsoup"></a>3.    Jsoup</h1><p>我们抓取到页面之后，还需要对页面进行解析。可以使用字符串处理工具解析页面，也可以使用正则表达式，但是这些方法都会带来很大的开发成本，所以我们需要使用一款专门解析html页面的技术。</p><h2 id="3-1-Jsoup介绍"><a href="#3-1-Jsoup介绍" class="headerlink" title="3.1    Jsoup介绍"></a>3.1    Jsoup介绍</h2><p>Jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><p>Jsoup的主要功能如下：</p><ul><li>从一个URL，文件或字符串中解析HTML；</li><li>使用DOM或CSS选择器来查找、取出数据；</li><li>可操作HTML元素、属性、文本；</li></ul><h2 id="3-2-Jsoup解析"><a href="#3-2-Jsoup解析" class="headerlink" title="3.2    Jsoup解析"></a>3.2    Jsoup解析</h2><p>Jsoup依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HttpClient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Jsoup--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-1-解析url"><a href="#3-2-1-解析url" class="headerlink" title="3.2.1    解析url"></a>3.2.1    解析url</h3><p>Jsoup可以直接输入url，它会发起请求并获取数据，封装为Document对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析url</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUrl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析url地址,第一个参数是访问的url，第二个参数是访问时候的超时时间</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> URL(<span class="string">"http://www.itcast.cn"</span>), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用标签选择器，获取title标签中的内容</span></span><br><span class="line">        String title = doc.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        System.out.println(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：虽然使用Jsoup可以替代HttpClient直接发起请求解析数据，但是往往不会这样用，因为实际的开发过程中，需要使用到多线程，连接池，代理等等方式，而jsoup对这些的支持并不是很好，所以我们一般把jsoup仅仅作为Html解析工具使用</p><h3 id="3-2-2-解析字符串"><a href="#3-2-2-解析字符串" class="headerlink" title="3.2.2    解析字符串"></a>3.2.2    解析字符串</h3><p>先准备以下html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>传智播客官网-一样的教育,不一样的品质<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"city_bj"</span>&gt;</span>北京中心<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fb:img</span> <span class="attr">src</span>=<span class="string">"/2018czgw/images/slogan.jpg"</span> <span class="attr">class</span>=<span class="string">"slogan"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city_in"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city_con"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"class_a class_b"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.itcast.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"s_name"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://sh.itcast.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"s_name"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://gz.itcast.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">abc</span>=<span class="string">"123"</span> <span class="attr">class</span>=<span class="string">"s_name"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Jsoup可以直接输入字符串，并封装为Document对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用工具类读取文件，获取字符串</span></span><br><span class="line">        String content = FileUtils.readFileToString(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析字符串</span></span><br><span class="line">        Document doc = Jsoup.parse(content);</span><br><span class="line"></span><br><span class="line">        String title = doc.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line"></span><br><span class="line">        System.out.println(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-解析文件"><a href="#3-2-3-解析文件" class="headerlink" title="3.2.3    解析文件"></a>3.2.3    解析文件</h3><p>Jsoup可以直接解析文件，并封装为Document对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析文件</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        String title = doc.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line"></span><br><span class="line">        System.out.println(title);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-使用dom方式遍历文档"><a href="#3-2-4-使用dom方式遍历文档" class="headerlink" title="3.2.4    使用dom方式遍历文档"></a>3.2.4    使用dom方式遍历文档</h3><h4 id="3-2-4-1-元素获取"><a href="#3-2-4-1-元素获取" class="headerlink" title="3.2.4.1    元素获取"></a>3.2.4.1    元素获取</h4><ul><li>根据id查询元素getElementById</li><li>根据标签获取元素getElementsByTag</li><li>根据class获取元素getElementsByClass</li><li>根据属性获取元素getElementsByAttribute</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDOM</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析文件，获取Document对象</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取元素</span></span><br><span class="line">        <span class="comment">//1.根据id查询元素getElementById</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementById("city_bj");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据标签获取元素getElementsByTag</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByTag("span").first();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据class获取元素getElementsByClass</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByClass("class_a class_b").first();</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByClass("class_a").first();</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByClass("class_b").first();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.根据属性获取元素getElementsByAttribute</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByAttribute("abc").first();</span></span><br><span class="line">        Element element = doc.getElementsByAttributeValue(<span class="string">"href"</span>, <span class="string">"http://sh.itcast.cn"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印元素的内容</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的元素内容是："</span> + element.text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-2-元素中获取数据"><a href="#3-2-4-2-元素中获取数据" class="headerlink" title="3.2.4.2    元素中获取数据"></a>3.2.4.2    元素中获取数据</h4><ul><li>从元素中获取id</li><li>从元素中获取className</li><li>从元素中获取属性的值attr</li><li>从元素中获取所有属性attributes</li><li>从元素中获取文本内容text</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素中获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析文件，获取Document</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id获取元素</span></span><br><span class="line">        Element element = doc.getElementById(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素中获取数据</span></span><br><span class="line">        <span class="comment">//1.从元素中获取id</span></span><br><span class="line">        str = element.id();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.从元素中获取className</span></span><br><span class="line">        str = element.className();</span><br><span class="line">        <span class="comment">//Set&lt;String&gt; classSet = element.classNames();</span></span><br><span class="line">        <span class="comment">//for (String s : classSet ) &#123;</span></span><br><span class="line">        <span class="comment">//    System.out.println(s);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.从元素中获取属性的值attr</span></span><br><span class="line">        <span class="comment">//str = element.attr("id");</span></span><br><span class="line">        str = element.attr(<span class="string">"class"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.从元素中获取所有属性attributes</span></span><br><span class="line">        Attributes attributes = element.attributes();</span><br><span class="line">        System.out.println(attributes.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.从元素中获取文本内容text</span></span><br><span class="line">        str = element.text();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印获取到的内容</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的数据是："</span> + str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-使用选择器语法查找元素"><a href="#3-2-5-使用选择器语法查找元素" class="headerlink" title="3.2.5    使用选择器语法查找元素"></a>3.2.5    使用选择器语法查找元素</h3><p>Jsoup elements对象支持类似于CSS (或jquery)的选择器语法，来实现非常强大和灵活的查找功能。这个select 方法在Document, Element,或Elements对象中都可以使用。且是上下文相关的，因此可实现指定元素的过滤，或者链式选择访问。</p><p>Select方法将返回一个Elements集合，并提供一组方法来抽取和处理结果。</p><h4 id="3-2-5-1-Selector选择器概述"><a href="#3-2-5-1-Selector选择器概述" class="headerlink" title="3.2.5.1    Selector选择器概述"></a>3.2.5.1    Selector选择器概述</h4><ul><li><strong>tagname</strong>: 通过标签查找元素，比如：span</li><li><strong>#id</strong>: 通过ID查找元素，比如：# city_bj</li><li><strong>.class</strong>: 通过class名称查找元素，比如：.class_a</li><li><strong>[attribute]</strong>: 利用属性查找元素，比如：[abc]</li><li><strong>[attr=value]</strong>: 利用属性值来查找元素，比如：[class=s_name]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Selector选择器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelector</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析html文件，获取Document对象</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//tagname: 通过标签查找元素，比如：span</span></span><br><span class="line">        Elements elements = doc.select(<span class="string">"span"</span>);</span><br><span class="line">        <span class="comment">//for (Element element : elements) &#123;</span></span><br><span class="line">        <span class="comment">//    System.out.println(element.text());</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//#id: 通过ID查找元素，比如：#city_bj</span></span><br><span class="line">        <span class="comment">//Element element = doc.select("#city_bj").first();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//.class: 通过class名称查找元素，比如：.class_a</span></span><br><span class="line">        <span class="comment">//Element element = doc.select(".class_a").first();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//[attribute]: 利用属性查找元素，比如：[abc]</span></span><br><span class="line">        Element element = doc.select(<span class="string">"[abc]"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[attr=value]: 利用属性值来查找元素，比如：[class=s_name]</span></span><br><span class="line">        Elements elements1 = doc.select(<span class="string">"[class=s_name]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element element1 : elements1) &#123;</span><br><span class="line">            System.out.println(element1.text());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的结果是："</span> + element.text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-5-2-Selector选择器组合使用"><a href="#3-2-5-2-Selector选择器组合使用" class="headerlink" title="3.2.5.2    Selector选择器组合使用"></a>3.2.5.2    Selector选择器组合使用</h4><ul><li><strong>el#id</strong>: 元素+ID，比如： h3#city_bj</li><li><strong>el.class</strong>: 元素+class，比如： li.class_a</li><li><strong>el[attr]</strong>: 元素+属性名，比如： span[abc]</li><li><strong>任意组合</strong>: 比如：span[abc].s_name</li><li><strong>ancestor child</strong>: 查找某个元素下子元素，比如：.city_con li 查找”city_con”下的所有li</li><li><strong>parent &gt; child</strong>: 查找某个父元素下的直接子元素，比如：.city_con &gt; ul &gt; li 查找city_con第一级（直接子元素）的ul，再找所有ul下的第一级li</li><li><strong>parent &gt; *</strong>: 查找某个父元素下所有直接子元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Selector选择器组合使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelector2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析html文件，获取Document对象</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//el#id: 元素+ID，比如： h3#city_bj</span></span><br><span class="line">        Element element = doc.select(<span class="string">"h3#city_bj"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//el.class: 元素+class，比如： li.class_a</span></span><br><span class="line">        element = doc.select(<span class="string">"li.class_a"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//el[attr]: 元素+属性名，比如： span[abc]</span></span><br><span class="line">        element = doc.select(<span class="string">"span[abc]"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//任意组合: 比如：span[abc].s_name</span></span><br><span class="line">        element = doc.select(<span class="string">"span[abc].s_name"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ancestor child: 查找某个元素下子元素，比如：.city_con li 查找"city_con"下的所有li</span></span><br><span class="line">        Elements elements = doc.select(<span class="string">".city_con li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//parent &gt; child: 查找某个父元素下的直接子元素，比如：</span></span><br><span class="line">        <span class="comment">//.city_con &gt; ul &gt; li 查找city_con第一级（直接子元素）的ul，再找所有ul下的第一级li</span></span><br><span class="line">        elements = doc.select(<span class="string">".city_con &gt; ul &gt; li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//parent &gt; *: 查找某个父元素下所有直接子元素</span></span><br><span class="line">        elements = doc.select(<span class="string">".city_con &gt; ul &gt; *"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"获取到的内容是："</span> + element.text());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element element1 : elements) &#123;</span><br><span class="line">            System.out.println(<span class="string">"遍历的结果："</span> + element1.text());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-爬虫案例"><a href="#4-爬虫案例" class="headerlink" title="4.    爬虫案例"></a>4.    爬虫案例</h1><p>学习了HttpClient和Jsoup，就掌握了如何抓取数据和如何解析数据，接下来，我们做一个小练习，把京东的手机数据抓取下来。</p><p>主要目的是HttpClient和Jsoup的学习。</p><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1    需求分析"></a>4.1    需求分析</h2><p>首先访问京东，搜索手机，分析页面，我们抓取以下商品数据：商品图片、价格、标题、商品详情页</p><p><img src="https://img-blog.csdnimg.cn/20201002130304635.png" alt="image-20201002110636907"></p><h3 id="4-1-1-SPU和SKU"><a href="#4-1-1-SPU和SKU" class="headerlink" title="4.1.1    SPU和SKU"></a>4.1.1    SPU和SKU</h3><p>除了以上四个属性以外，我们发现上图中的苹果手机有四种产品，我们应该每一种都要抓取。那么这里就必须要了解spu和sku的概念</p><p>SPU = Standard Product Unit （标准产品单位）</p><p>SPU是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。通俗点讲，属性值、特性相同的商品就可以称为一个SPU。</p><p>例如上图中的苹果手机就是SPU，包括红色、深灰色、金色、银色</p><p>SKU=stock keping unit(库存量单位)</p><p>SKU即库存进出计量的单位， 可以是以件、盒、托盘等为单位。SKU是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管理模式来处理。在服装、鞋类商品中使用最多最普遍。</p><p>例如上图中的苹果手机有几个款式，红色苹果手机，就是一个sku</p><p>查看页面的源码也可以看出区别</p><p><img src="https://img-blog.csdnimg.cn/20201002130320403.png" alt="image-20201002110804078"></p><h2 id="4-2-开发准备"><a href="#4-2-开发准备" class="headerlink" title="4.2    开发准备"></a>4.2    开发准备</h2><h3 id="4-2-1-数据库表"><a href="#4-2-1-数据库表" class="headerlink" title="4.2.1    数据库表"></a>4.2.1    数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;jd_item&#96; (</span><br><span class="line">    &#96;id&#96; bigint(10) NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,</span><br><span class="line">    &#96;spu&#96; bigint(15) DEFAULT NULL COMMENT &#39;商品集合id&#39;,</span><br><span class="line">    &#96;sku&#96; bigint(15) DEFAULT NULL COMMENT &#39;商品最小品类单元id&#39;,</span><br><span class="line">    &#96;title&#96; varchar(100) DEFAULT NULL COMMENT &#39;商品标题&#39;,</span><br><span class="line">    &#96;price&#96; bigint(10) DEFAULT NULL COMMENT &#39;商品价格&#39;,</span><br><span class="line">    &#96;pic&#96; varchar(200) DEFAULT NULL COMMENT &#39;商品图片&#39;,</span><br><span class="line">    &#96;url&#96; varchar(200) DEFAULT NULL COMMENT &#39;商品详情地址&#39;,</span><br><span class="line">    &#96;created&#96; datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">    &#96;updated&#96; datetime DEFAULT NULL COMMENT &#39;更新时间&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">    KEY &#96;sku&#96; (&#96;sku&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;京东商品表&#39;;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-添加依赖"><a href="#4-2-2-添加依赖" class="headerlink" title="4.2.2    添加依赖"></a>4.2.2    添加依赖</h3><p>使用Spring Boot+Spring Data JPA和定时任务进行开发，需要创建Maven工程并添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>crawler-jd<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringData Jpa--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySQL连接包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- HttpClient --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Jsoup--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-添加配置文件"><a href="#4-2-3-添加配置文件" class="headerlink" title="4.2.3    添加配置文件"></a>4.2.3    添加配置文件</h3><p>加入application.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/crawler</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JPA Configuration:</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3    代码实现"></a>4.3    代码实现</h2><h3 id="4-3-1-编写pojo"><a href="#4-3-1-编写pojo" class="headerlink" title="4.3.1    编写pojo"></a>4.3.1    编写pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 京东商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"jd_item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标准产品单位（商品集合）</span></span><br><span class="line">    <span class="keyword">private</span> Long spu;</span><br><span class="line">    <span class="comment">//库存量单位（最小品类单元）</span></span><br><span class="line">    <span class="keyword">private</span> Long sku;</span><br><span class="line">    <span class="comment">//商品标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//商品价格</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="comment">//商品图片</span></span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="comment">//商品详情地址</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updated;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//get/set/toString...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-编写dao"><a href="#4-3-2-编写dao" class="headerlink" title="4.3.2    编写dao"></a>4.3.2    编写dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Item</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-编写Service"><a href="#4-3-3-编写Service" class="headerlink" title="4.3.3    编写Service"></a>4.3.3    编写Service</h3><p>ItemService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Item item)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findAll</span><span class="params">(Item item)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ItemServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemDao itemDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemDao.save(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findAll</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明查询条件</span></span><br><span class="line">        Example&lt;Item&gt; example = Example.of(item);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据查询条件进行查询数据</span></span><br><span class="line">        List&lt;Item&gt; list = <span class="keyword">this</span>.itemDao.findAll(example);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-编写引导类"><a href="#4-3-4-编写引导类" class="headerlink" title="4.3.4    编写引导类"></a>4.3.4    编写引导类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//使用定时任务，需要先开启定时任务，需要添加注解</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-封装HttpClient"><a href="#4-3-5-封装HttpClient" class="headerlink" title="4.3.5    封装HttpClient"></a>4.3.5    封装HttpClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpClient工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PoolingHttpClientConnectionManager cm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cm = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        <span class="keyword">this</span>.cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个主机的最大连接数</span></span><br><span class="line">        <span class="keyword">this</span>.cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据请求地址下载页面数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 页面数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGetHtml</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(<span class="keyword">this</span>.cm).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建httpGet请求对象，设置url地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用User-Agent防止HttpClient发送http请求时403 Forbidden和安全拦截</span></span><br><span class="line">        String userAgent = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36"</span>;</span><br><span class="line">        httpGet.setHeader(<span class="string">"User-Agent"</span>, userAgent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求信息</span></span><br><span class="line">        httpGet.setConfig(<span class="keyword">this</span>.getConfig());</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取响应</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应，返回结果</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//判断响应体Entity是否不为空，如果不为空就可以使用EntityUtils</span></span><br><span class="line">                <span class="keyword">if</span> (response.getEntity() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                    <span class="keyword">return</span> content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回空串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图片名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGetImage</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(<span class="keyword">this</span>.cm).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建httpGet请求对象，设置url地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用User-Agent防止HttpClient发送http请求时403 Forbidden和安全拦截</span></span><br><span class="line">        String userAgent = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36"</span>;</span><br><span class="line">        httpGet.setHeader(<span class="string">"User-Agent"</span>, userAgent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求信息</span></span><br><span class="line">        httpGet.setConfig(<span class="keyword">this</span>.getConfig());</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取响应</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应，返回结果</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//判断响应体Entity是否不为空</span></span><br><span class="line">                <span class="keyword">if</span> (response.getEntity() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//下载图片</span></span><br><span class="line">                    <span class="comment">//获取图片的后缀</span></span><br><span class="line">                    String extName = url.substring(url.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//创建图片名，重命名图片</span></span><br><span class="line">                    String picName = UUID.randomUUID().toString() + extName;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//下载图片</span></span><br><span class="line">                    <span class="comment">//声明OutPutStream</span></span><br><span class="line">                    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\images\\"</span> + picName));</span><br><span class="line">                    response.getEntity().writeTo(outputStream);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//返回图片名称</span></span><br><span class="line">                    <span class="keyword">return</span> picName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果下载失败，返回空串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RequestConfig <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestConfig config = RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(<span class="number">1000</span>)    <span class="comment">//创建连接的最长时间</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">500</span>)  <span class="comment">// 获取连接的最长时间</span></span><br><span class="line">                .setSocketTimeout(<span class="number">10000</span>)    <span class="comment">//数据传输的最长时间</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-6-实现数据抓取"><a href="#4-3-6-实现数据抓取" class="headerlink" title="4.3.6    实现数据抓取"></a>4.3.6    实现数据抓取</h3><p>使用定时任务，可以定时抓取最新的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务：京东商品手机信息下载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpUtils httpUtils;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载任务</span></span><br><span class="line"><span class="comment">     * 当下载任务完成后，间隔100秒进行下一次的任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">100</span> * <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//声明需要解析的初始地址</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword=%E6%89%8B%E6%9C%BA&amp;wq=%E6%89%8B%E6%9C%BA&amp;s=51&amp;click=0&amp;page="</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照页面对手机的搜索结果进行遍历解析</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i = i + <span class="number">2</span>) &#123;</span><br><span class="line">            String html = httpUtils.doGetHtml(url + i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析页面，获取商品数据并存储</span></span><br><span class="line">            <span class="keyword">this</span>.parse(html);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"手机数据抓取完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析页面，获取商品数据并存储</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String html)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析html获取Document</span></span><br><span class="line">        Document doc = Jsoup.parse(html);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取spu信息</span></span><br><span class="line">        Elements spuEles = doc.select(<span class="string">"div#J_goodsList &gt; ul &gt; li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element spuEle : spuEles) &#123;</span><br><span class="line">            <span class="comment">//获取spu</span></span><br><span class="line">            <span class="keyword">long</span> spu = Long.parseLong(StringUtils.isEmpty(spuEle.attr(<span class="string">"data-spu"</span>)) ? <span class="string">"0"</span> : spuEle.attr(<span class="string">"data-spu"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取sku信息</span></span><br><span class="line">            Elements skuEles = spuEle.select(<span class="string">"li.ps-item"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Element skuEle : skuEles) &#123;</span><br><span class="line">                <span class="comment">//获取sku</span></span><br><span class="line">                <span class="keyword">long</span> sku = Long.parseLong(skuEle.select(<span class="string">"[data-sku]"</span>).attr(<span class="string">"data-sku"</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//根据sku查询商品数据</span></span><br><span class="line">                Item item = <span class="keyword">new</span> Item();</span><br><span class="line">                item.setSku(sku);</span><br><span class="line">                List&lt;Item&gt; list = <span class="keyword">this</span>.itemService.findAll(item);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果商品存在，就进行下一个循环，该商品不保存，因为已存在</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置商品的spu</span></span><br><span class="line">                item.setSpu(spu);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的详情的url</span></span><br><span class="line">                String itemUrl = <span class="string">"https://item.jd.com/"</span> + sku + <span class="string">".html"</span>;</span><br><span class="line">                item.setUrl(itemUrl);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的图片</span></span><br><span class="line">                String picUrl = <span class="string">"https:"</span> + skuEle.select(<span class="string">"img[data-sku]"</span>).first().attr(<span class="string">"data-lazy-img"</span>);</span><br><span class="line">                picUrl = picUrl.replace(<span class="string">"/n7/"</span>, <span class="string">"/n1/"</span>);</span><br><span class="line">                String picName = <span class="keyword">this</span>.httpUtils.doGetImage(picUrl);</span><br><span class="line">                item.setPic(picName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的价格</span></span><br><span class="line">                String priceJson = <span class="keyword">this</span>.httpUtils.doGetHtml(<span class="string">"https://p.3.cn/prices/mgets?skuIds=J_"</span> + sku);</span><br><span class="line">                <span class="keyword">double</span> price = MAPPER.readTree(priceJson).get(<span class="number">0</span>).get(<span class="string">"p"</span>).asDouble();</span><br><span class="line">                item.setPrice(price);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的标题</span></span><br><span class="line">                String itemInfo = <span class="keyword">this</span>.httpUtils.doGetHtml(item.getUrl());</span><br><span class="line">                String title = Jsoup.parse(itemInfo).select(<span class="string">"div.sku-name"</span>).text();</span><br><span class="line">                item.setTitle(title);</span><br><span class="line"></span><br><span class="line">                item.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">                item.setUpdated(item.getCreated());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//保存商品数据到数据库中</span></span><br><span class="line">                <span class="keyword">this</span>.itemService.save(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-网络爬虫&quot;&gt;&lt;a href=&quot;#1-网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;1.    网络爬虫&quot;&gt;&lt;/a&gt;1.    网络爬虫&lt;/h1&gt;&lt;h2 id=&quot;1-1-网络爬虫介绍&quot;&gt;&lt;a href=&quot;#1-1-网络爬虫介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1    网络爬虫介绍&quot;&gt;&lt;/a&gt;1.1    网络爬虫介绍&lt;/h2&gt;&lt;p&gt;在大数据时代，信息的采集是一项重要的工作，而互联网中的数据是海量的，如果单纯靠人力进行信息采集，不仅低效繁琐，搜集的成本也会提高。如何自动高效地获取互联网中我们感兴趣的信息并为我们所用是一个重要的问题，而爬虫技术就是为了解决这些问题而生的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="网络爬虫" scheme="https://wgy1993.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus(二)</title>
    <link href="https://wgy1993.gitee.io/archives/1ea41e8e.html"/>
    <id>https://wgy1993.gitee.io/archives/1ea41e8e.html</id>
    <published>2020-10-01T03:32:11.000Z</published>
    <updated>2020-10-01T03:37:17.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ActiveRecord"><a href="#1-ActiveRecord" class="headerlink" title="1.    ActiveRecord"></a>1.    ActiveRecord</h1><p>ActiveRecord（简称AR）一直广受动态语言（ PHP 、 Ruby 等）的喜爱，而 Java 作为准静态语言，对于ActiveRecord 往往只能感叹其优雅，所以我们也在 AR 道路上进行了一定的探索，喜欢大家能够喜欢。</p><a id="more"></a><blockquote><p>什么是ActiveRecord？</p><p>ActiveRecord也属于ORM（对象关系映射）层，由Rails最早提出，遵循标准的ORM模型：表映射到记录，记录映射到对象，字段映射到对象属性。配合遵循的命名和配置惯例，能够很大程度的快速实现模型的操作，而且简洁易懂。</p><p>ActiveRecord的主要思想是：</p><ul><li>每一个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录；通常表的每个字段在类中都有相应的Field；</li><li>ActiveRecord 同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即CURD;；</li><li>ActiveRecord 是一种领域模型(Domain Model)，封装了部分业务逻辑；</li></ul></blockquote><h2 id="1-1-开启AR之旅"><a href="#1-1-开启AR之旅" class="headerlink" title="1.1    开启AR之旅"></a>1.1    开启AR之旅</h2><p>在MP中，开启AR非常简单，只需要将实体对象继承Model即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-根据主键查询"><a href="#1-2-根据主键查询" class="headerlink" title="1.2    根据主键查询"></a>1.2    根据主键查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        User user1 = user.selectById();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-新增数据"><a href="#1-3-新增数据" class="headerlink" title="1.3    新增数据"></a>1.3    新增数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"diaochan"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setName(<span class="string">"貂蝉"</span>);</span><br><span class="line">        user.setMail(<span class="string">"diaochan@test.cn"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用AR的insert方法进行插入数据</span></span><br><span class="line">        <span class="keyword">boolean</span> insert = user.insert();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + insert);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-更新操作"><a href="#1-4-更新操作" class="headerlink" title="1.4    更新操作"></a>1.4    更新操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">13L</span>);<span class="comment">// 查询条件</span></span><br><span class="line">        user.setAge(<span class="number">31</span>); <span class="comment">// 更新的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = user.updateById();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-删除操作"><a href="#1-5-删除操作" class="headerlink" title="1.5    删除操作"></a>1.5    删除操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">13L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> delete = user.deleteById();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-根据条件查询"><a href="#1-6-根据条件查询" class="headerlink" title="1.6    根据条件查询"></a>1.6    根据条件查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.ge(<span class="string">"age"</span>, <span class="number">30</span>); <span class="comment">//大于等于30岁的用户查询出来</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = user.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user1 : users) &#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Oracle-主键Sequence"><a href="#2-Oracle-主键Sequence" class="headerlink" title="2.    Oracle 主键Sequence"></a>2.    Oracle 主键Sequence</h1><p>在mysql中，主键往往是自增长的，这样使用起来是比较方便的，如果使用的是Oracle数据库，那么就不能使用自增长了，就得使用Sequence 序列生成id值了。</p><h2 id="2-1-部署Oracle环境"><a href="#2-1-部署Oracle环境" class="headerlink" title="2.1    部署Oracle环境"></a>2.1    部署Oracle环境</h2><p>为了简化环境部署，这里使用Docker环境进行部署安装Oracle。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull sath89/oracle-12c</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker create --name oracle -p 1521:1521 sath89/oracle-12c</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">docker start oracle &amp;&amp; docker logs -f oracle</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过用户名密码即可登录</span></span><br><span class="line">用户名和密码为： system/oracle</span><br></pre></td></tr></table></figure><p>下面使用navicat12进行连接并操作oracle。</p><p>需要注意的是：由于安装的Oracle是64位版本，所以navicat也是需要使用64为版本，否则连接不成功。</p><p><img src="https://img-blog.csdnimg.cn/20201001112621998.png" alt="image-20201001094008097"></p><h2 id="2-2-创建表以及序列"><a href="#2-2-创建表以及序列" class="headerlink" title="2.2    创建表以及序列"></a>2.2    创建表以及序列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表，表名以及字段名都要大写</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"TB_USER"</span> (</span><br><span class="line">    <span class="string">"ID"</span> <span class="built_in">NUMBER</span>(<span class="number">20</span>) <span class="keyword">VISIBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">    <span class="string">"USER_NAME"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"PASSWORD"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"NAME"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"AGE"</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"EMAIL"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建序列</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> SEQ_USER <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1</span> <span class="keyword">INCREMENT</span> <span class="keyword">BY</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-3-jdbc驱动包"><a href="#2-3-jdbc驱动包" class="headerlink" title="2.3    jdbc驱动包"></a>2.3    jdbc驱动包</h2><p>由于版权原因，我们不能直接通过maven的中央仓库下载oracle数据库的jdbc驱动包，所以我们需要将驱动包安装到本地仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ojdbc8.jar</span></span><br><span class="line">mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.1.0.1 -Dpackaging=jar -Dfile=ojdbc8.jar</span><br></pre></td></tr></table></figure><p>安装完成后的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-修改application-properties"><a href="#2-4-修改application-properties" class="headerlink" title="2.4    修改application.properties"></a>2.4    修改application.properties</h2><p>对于application.properties的修改，需要修改2个位置，分别是：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库连接配置</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:oracle:thin:@192.168.142.128:1521:xe</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">system</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">oracle</span></span><br><span class="line"><span class="comment">#id生成策略</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.id-type</span>=<span class="string">input</span></span><br></pre></td></tr></table></figure><h2 id="2-5-配置序列"><a href="#2-5-配置序列" class="headerlink" title="2.5    配置序列"></a>2.5    配置序列</h2><p>使用Oracle的序列需要做2件事情：</p><p>1、需要配置MP的序列生成器到Spring容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Oracle的序列生成器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OracleKeyGenerator <span class="title">oracleKeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OracleKeyGenerator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在实体对象中指定序列的名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@KeySequence</span>(value = <span class="string">"SEQ_USER"</span>, clazz = Long<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-测试"><a href="#2-6-测试" class="headerlink" title="2.6    测试"></a>2.6    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Oracle 主键Sequence</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setEmail(<span class="string">"test@itcast.cn"</span>);</span><br><span class="line">        user.setName(<span class="string">"曹操"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"caocao"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user); <span class="comment">//返回的result是受影响的行数，并不是自增后的id</span></span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">        </span><br><span class="line">        System.out.println(user.getId()); <span class="comment">//自增后的id会回填到对象中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectById(<span class="number">8L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201001112640289.png" alt="image-20201001095124743"></p><h1 id="3-插件"><a href="#3-插件" class="headerlink" title="3.    插件"></a>3.    插件</h1><h2 id="3-1-mybatis的插件机制"><a href="#3-1-mybatis的插件机制" class="headerlink" title="3.1    mybatis的插件机制"></a>3.1    mybatis的插件机制</h2><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>我们看到了可以拦截Executor接口的部分方法，比如update，query，commit，rollback等方法，还有其他接口的一些方法等。</p><p>总体概括为：</p><ul><li>拦截执行器的方法</li><li>拦截参数的处理</li><li>拦截结果集的处理</li><li>拦截Sql语法构建的处理</li></ul><p>拦截器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(</span><br><span class="line">        type = Executor<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">method</span> </span>= <span class="string">"update"</span>,</span><br><span class="line">        args = &#123;MappedStatement<span class="class">.<span class="keyword">class</span>, <span class="title">Object</span>.<span class="title">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//拦截方法，具体业务逻辑编写的位置</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建target对象的代理对象,目的是将当前拦截器加入到该对象中</span></span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//属性设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入到Spring容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入自定义的拦截器（插件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyInterceptor <span class="title">myInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过xml配置，mybatis-config.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.wgy.plugins.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-执行分析插件"><a href="#3-2-执行分析插件" class="headerlink" title="3.2    执行分析插件"></a>3.2    执行分析插件</h2><p>在MP中提供了对SQL执行的分析的插件，可用作阻断全表更新、删除的操作，注意：该插件仅适用于开发环境，不适用于生产环境。</p><p>SpringBoot配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL分析插件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlExplainInterceptor <span class="title">sqlExplainInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlExplainInterceptor sqlExplainInterceptor = <span class="keyword">new</span> SqlExplainInterceptor();</span><br><span class="line"></span><br><span class="line">        List&lt;ISqlParser&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//全表更新、删除的阻断器</span></span><br><span class="line">        list.add(<span class="keyword">new</span> BlockAttackSqlParser());</span><br><span class="line"></span><br><span class="line">        sqlExplainInterceptor.setSqlParserList(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlExplainInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试全表更新，SQL分析器阻断效果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">31</span>); <span class="comment">// 更新的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = user.update(<span class="keyword">null</span>); <span class="comment">//全表更新</span></span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Prohibition of table update operation</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.Assert.notNull(Assert.java:72)</span><br><span class="line">at com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser.processUpdate(BlockAttackSqlParser.java:45)</span><br><span class="line">at com.baomidou.mybatisplus.core.parser.AbstractJsqlParser.processParser(AbstractJsqlParser.java:92)</span><br><span class="line">at com.baomidou.mybatisplus.core.parser.AbstractJsqlParser.parser(AbstractJsqlParser.java:67)</span><br><span class="line">at com.baomidou.mybatisplus.extension.handlers.AbstractSqlParserHandler.sqlParser(AbstractSqlParserHandler.java:76)</span><br><span class="line">at com.baomidou.mybatisplus.extension.plugins.SqlExplainInterceptor.intercept(SqlExplainInterceptor.java:63)</span><br><span class="line">at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)</span><br><span class="line">at com.sun.proxy.$Proxy67.update(Unknown Source)</span><br><span class="line">at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)</span><br><span class="line">... 32 more</span><br></pre></td></tr></table></figure><p>可以看到，当执行全表更新时，会抛出异常，这样有效防止了一些误操作。</p><h2 id="3-3-性能分析插件"><a href="#3-3-性能分析插件" class="headerlink" title="3.3    性能分析插件"></a>3.3    性能分析插件</h2><p>性能分析拦截器，用于输出每条 SQL 语句及其执行时间，可以设置最大执行时间，超过时间会抛出异常。</p><blockquote><p><strong>该插件只用于开发环境，不建议生产环境使用。</strong></p></blockquote><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 性能分析插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--最大的执行时间，单位为毫秒--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTime"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对输出的SQL做格式化，默认为false--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Time：11 ms - ID：com.wgy.mapper.UserMapper.selectById</span><br><span class="line">Execute SQL：</span><br><span class="line">    SELECT</span><br><span class="line">        id,</span><br><span class="line">        user_name,</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        email AS mail </span><br><span class="line">    FROM</span><br><span class="line">        tb_user </span><br><span class="line">    WHERE</span><br><span class="line">        id&#x3D;2</span><br></pre></td></tr></table></figure><p>可以看到，执行时间为11ms。如果将maxTime设置为1，那么，该操作会抛出异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException:  The SQL execution time is too large, please optimize ! </span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)</span><br><span class="line">................</span><br></pre></td></tr></table></figure><h2 id="3-4-乐观锁插件"><a href="#3-4-乐观锁插件" class="headerlink" title="3.4    乐观锁插件"></a>3.4    乐观锁插件</h2><h3 id="3-4-1-主要适用场景"><a href="#3-4-1-主要适用场景" class="headerlink" title="3.4.1    主要适用场景"></a>3.4.1    主要适用场景</h3><p>意图：</p><p>当要更新一条记录的时候，希望这条记录没有被别人更新</p><p>乐观锁实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果 version不对，就更新失败</li></ul><h3 id="3-4-2-插件配置"><a href="#3-4-2-插件配置" class="headerlink" title="3.4.2    插件配置"></a>3.4.2    插件配置</h3><p>spring xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>spring boot:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过xml配置，mybatis-config.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--乐观锁插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-3-注解实体字段"><a href="#3-4-3-注解实体字段" class="headerlink" title="3.4.3    注解实体字段"></a>3.4.3    注解实体字段</h3><p>需要为实体字段添加@Version注解。</p><p>1、为表添加version字段，并且设置初始值为1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &#96;tb_user&#96; ADD COLUMN &#96;version&#96; int(10) NULL AFTER &#96;email&#96;;</span><br><span class="line"></span><br><span class="line">UPDATE &#96;tb_user&#96; SET &#96;version&#96;&#x3D;&#39;1&#39;;</span><br></pre></td></tr></table></figure><p>2、为User实体对象添加version字段，并且添加@Version注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-测试"><a href="#3-4-4-测试" class="headerlink" title="3.4.4    测试"></a>3.4.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试乐观锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">2L</span>);<span class="comment">// 查询条件</span></span><br><span class="line"></span><br><span class="line">        User userVersion = user.selectById();</span><br><span class="line"></span><br><span class="line">        user.setAge(<span class="number">21</span>); <span class="comment">// 更新的数据</span></span><br><span class="line">        user.setVersion(userVersion.getVersion()); <span class="comment">// 当前的版本信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = user.updateById();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新的条件中有version条件，并且更新的version为2。</p><p>如果再次执行，更新则不成功。这样就避免了多人同时更新时导致数据的不一致。</p><h3 id="3-4-5-特别说明"><a href="#3-4-5-特别说明" class="headerlink" title="3.4.5    特别说明"></a>3.4.5    特别说明</h3><ul><li>支持的数据类型只有 :int,Integer,long,Long,Date,Timestamp,LocalDateTime</li><li>整数类型下 newVersion = oldVersion + 1</li><li>newVersion 会回写到  entity 中</li><li>仅支持 updateById(id) 与  update(entity, wrapper) 方法</li><li>在 update(entity, wrapper) 方法下, wrapper 不能复用!!!</li></ul><h1 id="4-Sql-注入器"><a href="#4-Sql-注入器" class="headerlink" title="4.    Sql 注入器"></a>4.    Sql 注入器</h1><p>我们已经知道，在MP中，通过AbstractSqlInjector将BaseMapper中的方法注入到了Mybatis容器，这样这些方法才可以正常执行。</p><p>那么，如果我们需要扩充BaseMapper中的方法，又该如何实现呢？</p><p>下面我们以扩展findAll方法为例进行学习。</p><h2 id="4-1-编写MyBaseMapper"><a href="#4-1-编写MyBaseMapper" class="headerlink" title="4.1    编写MyBaseMapper"></a>4.1    编写MyBaseMapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩充BaseMapper中的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyBaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展其他的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的Mapper都可以继承该Mapper，这样实现了统一的扩展。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">MyBaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-编写MySqlInjector"><a href="#4-2-编写MySqlInjector" class="headerlink" title="4.2    编写MySqlInjector"></a>4.2    编写MySqlInjector</h2><p>如果直接继承AbstractSqlInjector的话，原有的BaseMapper中的方法将失效，所以我们选择继承DefaultSqlInjector进行扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SQL 注入器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlInjector</span> <span class="keyword">extends</span> <span class="title">DefaultSqlInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取父类中的集合</span></span><br><span class="line">        list.addAll(<span class="keyword">super</span>.getMethodList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再扩充自定义的方法</span></span><br><span class="line">        list.add(<span class="keyword">new</span> FindAll());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-编写FindAll"><a href="#4-3-编写FindAll" class="headerlink" title="4.3    编写FindAll"></a>4.3    编写FindAll</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的查询所有方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAll</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"select * from "</span> + tableInfo.getTableName();</span><br><span class="line">        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addSelectMappedStatement(mapperClass, <span class="string">"findAll"</span>, sqlSource, modelClass, tableInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-注册到Spring容器"><a href="#4-4-注册到Spring容器" class="headerlink" title="4.4    注册到Spring容器"></a>4.4    注册到Spring容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入自定义的SQL注入器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlInjector <span class="title">mySqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5    测试"></a>4.5    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sql注入器测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-自动填充功能"><a href="#5-自动填充功能" class="headerlink" title="5.    自动填充功能"></a>5.    自动填充功能</h1><p>有些时候我们可能会有这样的需求，插入或者更新数据时，希望有些字段可以自动填充数据，比如密码、version等。在MP中提供了这样的功能，可以实现自动填充。</p><h2 id="5-1-添加-TableField注解"><a href="#5-1-添加-TableField注解" class="headerlink" title="5.1    添加@TableField注解"></a>5.1    添加@TableField注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据时进行填充</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, fill = FieldFill.INSERT) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(exist = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//在数据库表中是不存在的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为password添加自动填充功能，在新增数据时有效。</p><p>FieldFill提供了多种模式选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FieldFill &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入和更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-编写MyMetaObjectHandler"><a href="#5-2-编写MyMetaObjectHandler" class="headerlink" title="5.2    编写MyMetaObjectHandler"></a>5.2    编写MyMetaObjectHandler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动填充功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据时填充</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先获取到password的值，再进行判断，如果为空，就进行填充，如果不为空，就不做处理</span></span><br><span class="line">        Object password = getFieldValByName(<span class="string">"password"</span>, metaObject);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == password) &#123;</span><br><span class="line">            setFieldValByName(<span class="string">"password"</span>, <span class="string">"888888"</span>, metaObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据时填充</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-测试"><a href="#5-3-测试" class="headerlink" title="5.3    测试"></a>5.3    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"关羽"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"guanyu"</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    user.setMail(<span class="string">"guanyu@itast.cn"</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-逻辑删除"><a href="#6-逻辑删除" class="headerlink" title="6.    逻辑删除"></a>6.    逻辑删除</h1><p>开发系统时，有时候在实现功能时，删除操作需要实现逻辑删除，所谓逻辑删除就是将数据标记为删除，而并非真正的物理删除（非DELETE操作），查询时需要携带状态条件，确保被标记的数据不被查询到。这样做的目的就是避免数据被真正的删除。</p><h2 id="6-1-修改表结构"><a href="#6-1-修改表结构" class="headerlink" title="6.1    修改表结构"></a>6.1    修改表结构</h2><p>为tb_user表增加deleted字段，用于表示数据是否被删除，1代表删除，0代表未删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &#96;tb_user&#96; ADD COLUMN &#96;deleted&#96; int(1) NULL DEFAULT 0 COMMENT &#39;1代表删除，0代表未删除&#39; AFTER &#96;version&#96;;</span><br></pre></td></tr></table></figure><p>同时，也修改User实体，增加deleted属性并且添加@TableLogic注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据时进行填充</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, fill = FieldFill.INSERT) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(exist = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//在数据库表中是不存在的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span> <span class="comment">// 逻辑删除字段 ，1-删除，0-未删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-配置"><a href="#6-2-配置" class="headerlink" title="6.2    配置"></a>6.2    配置</h2><p>application.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除状态的值为：1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 未删除状态的值为：0</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h2 id="6-3-测试"><a href="#6-3-测试" class="headerlink" title="6.3    测试"></a>6.3    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> delete = user.deleteById();</span><br><span class="line">    System.out.println(<span class="string">"result =&gt; "</span> + delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.deleteById]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: UPDATE tb_user SET deleted&#x3D;1 WHERE id&#x3D;? AND deleted&#x3D;0</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.deleteById]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Long)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.deleteById]-[DEBUG] &lt;&#x3D;&#x3D;  Updates: 1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201001112703298.png" alt="image-20201001110233248"></p><p>测试查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据主键查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    User user1 = user.selectById();</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: SELECT</span><br><span class="line">id,user_name,password,name,age,email,version,deleted FROM tb_user WHERE id&#x3D;? AND deleted&#x3D;0</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Long)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &lt;&#x3D;&#x3D;   Total: 0</span><br></pre></td></tr></table></figure><p>可见，已经实现了逻辑删除。</p><h1 id="7-通用枚举"><a href="#7-通用枚举" class="headerlink" title="7.    通用枚举"></a>7.    通用枚举</h1><p>解决了繁琐的配置，让 mybatis 优雅的使用枚举属性！</p><h2 id="7-1-修改表结构"><a href="#7-1-修改表结构" class="headerlink" title="7.1    修改表结构"></a>7.1    修改表结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &#96;tb_user&#96; ADD COLUMN &#96;sex&#96; int(1) NULL DEFAULT 1 COMMENT &#39;1-男，2-女&#39; AFTER &#96;deleted&#96;;</span><br></pre></td></tr></table></figure><h2 id="7-2-定义枚举"><a href="#7-2-定义枚举" class="headerlink" title="7.2    定义枚举"></a>7.2    定义枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SexEnum implements IEnum&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    MAN(<span class="number">1</span>, <span class="string">"男"</span>),</span><br><span class="line">    WOMAN(<span class="number">2</span>, <span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    SexEnum(<span class="keyword">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-配置"><a href="#7-3-配置" class="headerlink" title="7.3    配置"></a>7.3    配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 枚举包扫描</span></span><br><span class="line"><span class="meta">mybatis-plus.type-enums-package</span>=<span class="string">com.wgy.enums</span></span><br></pre></td></tr></table></figure><h2 id="7-4-修改实体"><a href="#7-4-修改实体" class="headerlink" title="7.4    修改实体"></a>7.4    修改实体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据时进行填充</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, fill = FieldFill.INSERT) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(exist = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//在数据库表中是不存在的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span> <span class="comment">// 逻辑删除字段 ，1-删除，0-未删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex; <span class="comment">//性别，枚举类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-测试"><a href="#7-5-测试" class="headerlink" title="7.5    测试"></a>7.5    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"diaochan"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    user.setName(<span class="string">"貂蝉"</span>);</span><br><span class="line">    user.setMail(<span class="string">"diaochan@itast.cn"</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line">    user.setSex(SexEnum.WOMAN); <span class="comment">//使用的是枚举</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用AR的insert方法进行插入数据</span></span><br><span class="line">    <span class="keyword">boolean</span> insert = user.insert();</span><br><span class="line">    System.out.println(<span class="string">"result =&gt; "</span> + insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201001112745766.png" alt="image-20201001111458479"></p><p>查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据主键查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    User user1 = user.selectById();</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: SELECT id,user_name,password,name,age,email,version,deleted,sex FROM tb_user WHERE id&#x3D;? AND</span><br><span class="line">deleted&#x3D;0</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Long)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &lt;&#x3D;&#x3D;   Total: 1</span><br><span class="line">User(id&#x3D;2, userName&#x3D;lisi, password&#x3D;123456, name&#x3D;李四, age&#x3D;30, email&#x3D;test2@itcast.cn,address&#x3D;null, version&#x3D;2, deleted&#x3D;0, sex&#x3D;女)</span><br></pre></td></tr></table></figure><p>从测试可以看出，可以很方便的使用枚举了。</p><p>查询条件时也是有效的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用枚举查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBySex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">"sex"</span>, SexEnum.WOMAN); <span class="comment">//查询性别为女的数据</span></span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = user.selectList(wrapper);</span><br><span class="line">    <span class="keyword">for</span> (User user1 : users) &#123;</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.selectList]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: SELECT id,user_name,password,name,age,email,version,deleted,sex FROM tb_user WHERE deleted&#x3D;0</span><br><span class="line">AND sex &#x3D; ?</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectList]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Integer)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectList]-[DEBUG] &lt;&#x3D;&#x3D;   Total: 3</span><br></pre></td></tr></table></figure><h1 id="8-代码生成器"><a href="#8-代码生成器" class="headerlink" title="8.    代码生成器"></a>8.    代码生成器</h1><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><p><img src="https://img-blog.csdnimg.cn/20201001112936926.png" alt="image-20201001111943866"></p><h2 id="8-1-创建工程"><a href="#8-1-创建工程" class="headerlink" title="8.1    创建工程"></a>8.1    创建工程</h2><p>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mp-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-代码"><a href="#8-2-代码" class="headerlink" title="8.2    代码"></a>8.2    代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RUN THIS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"wgy"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">"模块名"</span>));</span><br><span class="line">        pc.setParent(<span class="string">"com.wgy.generator"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/mapper.xml.ftl"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/mp-generator/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(<span class="keyword">new</span> TemplateConfig().setXml(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">//        strategy.setSuperEntityClass("com.baomidou.mybatisplus.samples.generator.common.BaseEntity");</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        strategy.setSuperControllerClass("com.baomidou.mybatisplus.samples.generator.common.BaseController");</span></span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名"</span>));</span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">"id"</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span></span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-测试"><a href="#8-3-测试" class="headerlink" title="8.3    测试"></a>8.3    测试</h2><p><img src="https://img-blog.csdnimg.cn/20201001113002249.png" alt="image-20201001112221848"></p><p>代码已生成：</p><p><img src="https://img-blog.csdnimg.cn/20201001113017816.png" alt="image-20201001112306549"></p><h1 id="9-MybatisX-快速开发插件"><a href="#9-MybatisX-快速开发插件" class="headerlink" title="9.    MybatisX 快速开发插件"></a>9.    MybatisX 快速开发插件</h1><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。</p><p>安装方法：打开 IDEA，进入 File -&gt; Settings -&gt; Plugins -&gt; Browse Repositories，输入  mybatisx 搜索并安装。</p><p>功能：</p><ul><li>Java  与 XML 来回跳转</li><li>Mapper  方法自动生成 XML</li></ul><p><img src="https://img-blog.csdnimg.cn/20201001113034308.png" alt="image-20201001112422921"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-ActiveRecord&quot;&gt;&lt;a href=&quot;#1-ActiveRecord&quot; class=&quot;headerlink&quot; title=&quot;1.    ActiveRecord&quot;&gt;&lt;/a&gt;1.    ActiveRecord&lt;/h1&gt;&lt;p&gt;ActiveRecord（简称AR）一直广受动态语言（ PHP 、 Ruby 等）的喜爱，而 Java 作为准静态语言，对于ActiveRecord 往往只能感叹其优雅，所以我们也在 AR 道路上进行了一定的探索，喜欢大家能够喜欢。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
      <category term="Mybatis-Plus" scheme="https://wgy1993.gitee.io/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus(一)</title>
    <link href="https://wgy1993.gitee.io/archives/b19585ec.html"/>
    <id>https://wgy1993.gitee.io/archives/b19585ec.html</id>
    <published>2020-09-29T10:24:33.000Z</published>
    <updated>2020-09-29T10:39:55.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-了解Mybatis-Plus"><a href="#1-了解Mybatis-Plus" class="headerlink" title="1.    了解Mybatis-Plus"></a>1.    了解Mybatis-Plus</h1><h2 id="1-1-Mybatis-Plus介绍"><a href="#1-1-Mybatis-Plus介绍" class="headerlink" title="1.1    Mybatis-Plus介绍"></a>1.1    Mybatis-Plus介绍</h2><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>官网： <a href="https://mybatis.plus/" target="_blank" rel="noopener">https://mybatis.plus/</a> 或 <a href="https://mp.baomidou.com/" target="_blank" rel="noopener">https://mp.baomidou.com/</a></p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200929181032531.png" alt="image-20200928214057580"></p><blockquote><p><strong>愿景</strong><br>我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200929181051358.png" alt="image-20200928214552002"></p><h2 id="1-2-代码以及文档"><a href="#1-2-代码以及文档" class="headerlink" title="1.2    代码以及文档"></a>1.2    代码以及文档</h2><p>文档地址：<a href="https://mybatis.plus/guide/" target="_blank" rel="noopener">https://mybatis.plus/guide/</a></p><p>源码地址：<a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">https://github.com/baomidou/mybatis-plus</a></p><h2 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3    特性"></a>1.3    特性</h2><ul><li>无侵入 ：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小 ：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持多种数据库 ：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</li><li>支持主键自动生成 ：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 XML 热加载：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作 ：支持全局通用方法注入（ Write once, use anywhere ）</li><li>支持关键词自动转义 ：支持数据库关键词（order、key……）自动转义，还可自定义关键词</li><li>内置代码生成器 ：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件 ：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List查询</li><li>内置性能分析插件 ：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件 ：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li><li>内置 Sql 注入剥离器：支持 Sql 注入剥离，有效预防 Sql 注入攻击</li></ul><h2 id="1-4-架构"><a href="#1-4-架构" class="headerlink" title="1.4    架构"></a>1.4    架构</h2><p><img src="https://img-blog.csdnimg.cn/20200929181107229.png" alt="image-20200928214840984"></p><h2 id="1-5-作者"><a href="#1-5-作者" class="headerlink" title="1.5    作者"></a>1.5    作者</h2><p>Mybatis-Plus是由baomidou（苞米豆）组织开发并且开源的，目前该组织大概有30人左右。</p><p>码云地址：<a href="https://gitee.com/organizations/baomidou" target="_blank" rel="noopener">https://gitee.com/organizations/baomidou</a></p><p><img src="https://img-blog.csdnimg.cn/20200929181125612.png" alt="image-20200928214908502"></p><h1 id="2-快速开始"><a href="#2-快速开始" class="headerlink" title="2.    快速开始"></a>2.    快速开始</h1><p>对于 Mybatis整合MP有常常有三种用法，分别是Mybatis+MP、Spring+Mybatis+MP、Spring Boot+Mybatis+MP。</p><h2 id="2-1-创建数据库以及表"><a href="#2-1-创建数据库以及表" class="headerlink" title="2.1    创建数据库以及表"></a>2.1    创建数据库以及表</h2><p><img src="https://img-blog.csdnimg.cn/20200929181142159.png" alt="image-20200928215001770"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--  创建测试表</span><br><span class="line">CREATE TABLE &#96;tb_user&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键ID&#39;,</span><br><span class="line">    &#96;user_name&#96; varchar(20) NOT NULL COMMENT &#39;用户名&#39;,</span><br><span class="line">    &#96;password&#96; varchar(20) NOT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">    &#96;name&#96; varchar(30) DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">    &#96;age&#96; int(11) DEFAULT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">    &#96;email&#96; varchar(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- 插入测试数据</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;1&#39;, &#39;zhangsan&#39;, &#39;123456&#39;, &#39;张三&#39;, &#39;18&#39;, &#39;test1@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;2&#39;, &#39;lisi&#39;, &#39;123456&#39;, &#39;李四&#39;, &#39;20&#39;, &#39;test2@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;3&#39;, &#39;wangwu&#39;, &#39;123456&#39;, &#39;王五&#39;, &#39;28&#39;, &#39;test3@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;4&#39;, &#39;zhaoliu&#39;, &#39;123456&#39;, &#39;赵六&#39;, &#39;21&#39;, &#39;test4@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;5&#39;, &#39;sunqi&#39;, &#39;123456&#39;, &#39;孙七&#39;, &#39;24&#39;, &#39;test5@test.cn&#39;);</span><br></pre></td></tr></table></figure><h2 id="2-2-创建工程导入依赖"><a href="#2-2-创建工程导入依赖" class="headerlink" title="2.2    创建工程导入依赖"></a>2.2    创建工程导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-plus-simple<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-plus-spring<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus插件依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化bean代码的工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Mybatis-MP"><a href="#2-3-Mybatis-MP" class="headerlink" title="2.3    Mybatis + MP"></a>2.3    Mybatis + MP</h2><p>下面演示，通过纯Mybatis与Mybatis-Plus整合。</p><h3 id="2-3-1-创建子Module"><a href="#2-3-1-创建子Module" class="headerlink" title="2.3.1    创建子Module"></a>2.3.1    创建子Module</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> =<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-Mybatis实现查询User"><a href="#2-3-2-Mybatis实现查询User" class="headerlink" title="2.3.2    Mybatis实现查询User"></a>2.3.2    Mybatis实现查询User</h3><h4 id="2-3-2-1-编写mybatis-config-xml文件"><a href="#2-3-2-1-编写mybatis-config-xml文件" class="headerlink" title="2.3.2.1    编写mybatis-config.xml文件"></a>2.3.2.1    编写mybatis-config.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>autoReconnect=true<span class="symbol">&amp;amp;</span>allowMultiQueries=true<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-编写User对象"><a href="#2-3-2-2-编写User对象" class="headerlink" title="2.3.2.2    编写User对象"></a>2.3.2.2    编写User对象</h4><p>使用lombok进行了进化bean操作。注意：注解不生效需要Idea安装lombok插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span><span class="comment">//注解包含包含getter、setter、NoArgsConstructor注解</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//注解会生成对应的无参构造方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//注解会生成对应的有参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-编写UserMapper接口"><a href="#2-3-2-3-编写UserMapper接口" class="headerlink" title="2.3.2.3    编写UserMapper接口"></a>2.3.2.3    编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-编写UserMapper-xml文件"><a href="#2-3-2-4-编写UserMapper-xml文件" class="headerlink" title="2.3.2.4    编写UserMapper.xml文件"></a>2.3.2.4    编写UserMapper.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.pojo.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-5-测试"><a href="#2-3-2-5-测试" class="headerlink" title="2.3.2.5    测试"></a>2.3.2.5    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String config = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Mybatis-MP实现查询User"><a href="#2-3-3-Mybatis-MP实现查询User" class="headerlink" title="2.3.3    Mybatis+MP实现查询User"></a>2.3.3    Mybatis+MP实现查询User</h3><h4 id="2-3-3-1-Mapper继承BaseMapper"><a href="#2-3-3-1-Mapper继承BaseMapper" class="headerlink" title="2.3.3.1    Mapper继承BaseMapper"></a>2.3.3.1    Mapper继承BaseMapper</h4><p>将UserMapper继承BaseMapper，将拥有了BaseMapper中的所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-MybatisSqlSessionFactoryBuilder进程构建"><a href="#2-3-3-2-MybatisSqlSessionFactoryBuilder进程构建" class="headerlink" title="2.3.3.2    MybatisSqlSessionFactoryBuilder进程构建"></a>2.3.3.2    MybatisSqlSessionFactoryBuilder进程构建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MybatisPlus测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String config = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//这里使用的是MP中的MybatisSqlSessionFactoryBuilder</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> MybatisSqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = userMapper.findAll();</span></span><br><span class="line">        <span class="comment">//可以调用BaseMapper中定义的方法</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行报错：</p><p><img src="https://img-blog.csdnimg.cn/20200929181204524.png" alt="image-20200928220631678"></p><p>解决：在 User对象中添加@TableName，指定数据库表名</p><p><img src="https://img-blog.csdnimg.cn/20200929181225895.png" alt="image-20200928220650548"></p><p><strong>简单说明：</strong></p><p>由于使用了 MybatisSqlSessionFactoryBuilder进行了构建，继承的BaseMapper中的方法就载入到了SqlSession中，所以就可以直接使用相关的方法；</p><p><img src="https://img-blog.csdnimg.cn/20200929181243717.png" alt="image-20200928220742785"></p><h2 id="2-4-Spring-Mybatis-MP"><a href="#2-4-Spring-Mybatis-MP" class="headerlink" title="2.4    Spring + Mybatis + MP"></a>2.4    Spring + Mybatis + MP</h2><p>引入了Spring框架，数据源、构建等工作就交给了Spring管理。</p><h3 id="2-4-1-创建子Module"><a href="#2-4-1-创建子Module" class="headerlink" title="2.4.1    创建子Module"></a>2.4.1    创建子Module</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-实现查询User"><a href="#2-4-2-实现查询User" class="headerlink" title="2.4.2    实现查询User"></a>2.4.2    实现查询User</h3><h4 id="2-4-2-1-编写jdbc-properties"><a href="#2-4-2-1-编写jdbc-properties" class="headerlink" title="2.4.2.1    编写jdbc.properties"></a>2.4.2.1    编写jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-2-编写applicationContext-xml"><a href="#2-4-2-2-编写applicationContext-xml" class="headerlink" title="2.4.2.2    编写applicationContext.xml"></a>2.4.2.2    编写applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:*.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-3-编写User对象"><a href="#2-4-2-3-编写User对象" class="headerlink" title="2.4.2.3    编写User对象"></a>2.4.2.3    编写User对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-4-编写UserMapper接口"><a href="#2-4-2-4-编写UserMapper接口" class="headerlink" title="2.4.2.4    编写UserMapper接口"></a>2.4.2.4    编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-5-测试"><a href="#2-4-2-5-测试" class="headerlink" title="2.4.2.5    测试"></a>2.4.2.5    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring + Mybatis + MP测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisSpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>测试报错需将jdbc.properties、applicationContext.xml复制到test/resources下</p><h2 id="2-5-SpringBoot-Mybatis-MP"><a href="#2-5-SpringBoot-Mybatis-MP" class="headerlink" title="2.5    SpringBoot + Mybatis + MP"></a>2.5    SpringBoot + Mybatis + MP</h2><p>使用SpringBoot将进一步的简化MP的整合，需要注意的是，由于使用SpringBoot需要继承parent，所以需要重新创建工程，并不是创建子Module。</p><h3 id="2-5-1-创建工程导入依赖"><a href="#2-5-1-创建工程导入依赖" class="headerlink" title="2.5.1    创建工程导入依赖"></a>2.5.1    创建工程导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mp-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化代码的工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-编写application-properties"><a href="#2-5-2-编写application-properties" class="headerlink" title="2.5.2    编写application.properties"></a>2.5.2    编写application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">mp-springboot</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="2-5-3-编写User对象"><a href="#2-5-3-编写User对象" class="headerlink" title="2.5.3    编写User对象"></a>2.5.3    编写User对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-4-编写UserMapper接口"><a href="#2-5-4-编写UserMapper接口" class="headerlink" title="2.5.4    编写UserMapper接口"></a>2.5.4    编写UserMapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-5-编写启动类"><a href="#2-5-5-编写启动类" class="headerlink" title="2.5.5    编写启动类"></a>2.5.5    编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-6-测试"><a href="#2-5-6-测试" class="headerlink" title="2.5.6    测试"></a>2.5.6    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot + Mybatis + MP测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MybatisSpringBootTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-通用CRUD"><a href="#3-通用CRUD" class="headerlink" title="3.    通用CRUD"></a>3.    通用CRUD</h1><p>通过前面的学习，我们了解到通过继承BaseMapper就可以获取到各种各样的单表操作，接下来我们将详细讲解这些操作。</p><p><img src="https://img-blog.csdnimg.cn/20200929181310355.png" alt="image-20200929164247128"></p><h2 id="3-1-插入操作"><a href="#3-1-插入操作" class="headerlink" title="3.1    插入操作"></a>3.1    插入操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setMail(<span class="string">"1@test.cn"</span>);</span><br><span class="line">        user.setName(<span class="string">"曹操"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"caocao"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user); <span class="comment">//result数据库受影响的行数</span></span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取自增长后的id值, 自增长后的id值会回填到user对象中</span></span><br><span class="line">        System.out.println(<span class="string">"id =&gt; "</span> + user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据已经写入到了数据库，但是， id的值不正确，我们期望的是数据库自增长，实际是MP生成了id的值写入到了数据库。</p><p>如何设置id的生成策略呢？</p><p>修改User对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO) <span class="comment">//指定id类型为自增长</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-TableField"><a href="#3-1-1-TableField" class="headerlink" title="3.1.1    @TableField"></a>3.1.1    @TableField</h3><p>在MP中通过@TableField注解可以指定字段的一些属性，常常解决的问题有2个：</p><ul><li>对象中的属性名和字段名不一致的问题（非驼峰）</li><li>对象中的属性字段在表中不存在的问题</li></ul><p><img src="https://img-blog.csdnimg.cn/20200929181326224.png" alt="image-20200929165030809"></p><p>其他用法，如大字段不加入查询字段：</p><p><img src="https://img-blog.csdnimg.cn/20200929181343102.png" alt="image-20200929165050520"></p><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/20200929181358836.png" alt="image-20200929165114538"></p><h2 id="3-2-更新操作"><a href="#3-2-更新操作" class="headerlink" title="3.2    更新操作"></a>3.2    更新操作</h2><p>在MP中，更新操作有2种，一种是根据id更新，另一种是根据条件更新。</p><h3 id="3-2-1-根据id更新"><a href="#3-2-1-根据id更新" class="headerlink" title="3.2.1    根据id更新"></a>3.2.1    根据id更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>); <span class="comment">//条件，根据id更新</span></span><br><span class="line">        user.setAge(<span class="number">19</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        user.setPassword(<span class="string">"666666"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-根据条件更新"><a href="#3-2-2-根据条件更新" class="headerlink" title="3.2.2    根据条件更新"></a>3.2.2    根据条件更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">20</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        user.setPassword(<span class="string">"8888888"</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"user_name"</span>, <span class="string">"zhangsan"</span>); <span class="comment">//匹配user_name = zhangsan 的用户数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据条件做更新</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.update(user, wrapper);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，通过UpdateWrapper进行更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">        wrapper.set(<span class="string">"age"</span>, <span class="number">21</span>).set(<span class="string">"password"</span>, <span class="string">"999999"</span>) <span class="comment">//更新的字段</span></span><br><span class="line">                .eq(<span class="string">"user_name"</span>, <span class="string">"zhangsan"</span>); <span class="comment">//更新的条件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据条件做更新</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.update(<span class="keyword">null</span>, wrapper);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-删除操作"><a href="#3-3-删除操作" class="headerlink" title="3.3    删除操作"></a>3.3    删除操作</h2><h3 id="3-3-1-deleteById"><a href="#3-3-1-deleteById" class="headerlink" title="3.3.1    deleteById"></a>3.3.1    deleteById</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据id删除数据</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteById(<span class="number">9L</span>);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-deleteByMap"><a href="#3-3-2-deleteByMap" class="headerlink" title="3.3.2    deleteByMap"></a>3.3.2    deleteByMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"user_name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">        map.put(<span class="string">"password"</span>, <span class="string">"999999"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据map删除数据，多条件之间是and关系</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteByMap(map);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-delete"><a href="#3-3-3-delete" class="headerlink" title="3.3.3    delete"></a>3.3.3    delete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用法一：</span></span><br><span class="line"><span class="comment">//        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        wrapper.eq("user_name", "caocao1")</span></span><br><span class="line"><span class="comment">//                .eq("password", "123456");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用法二：</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"caocao"</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据包装条件做删除</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.delete(wrapper);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-deleteBatchIds"><a href="#3-3-4-deleteBatchIds" class="headerlink" title="3.3.4    deleteBatchIds"></a>3.3.4    deleteBatchIds</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据id批量删除数据</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteBatchIds(Arrays.asList(<span class="number">10L</span>, <span class="number">11L</span>));</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-查询操作"><a href="#3-4-查询操作" class="headerlink" title="3.4    查询操作"></a>3.4    查询操作</h2><p>MP提供了多种查询操作，包括根据id查询、批量查询、查询单条数据、查询列表、分页查询等操作</p><h3 id="3-4-1-selectById"><a href="#3-4-1-selectById" class="headerlink" title="3.4.1    selectById"></a>3.4.1    selectById</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-selectBatchIds"><a href="#3-4-2-selectBatchIds" class="headerlink" title="3.4.2    selectBatchIds"></a>3.4.2    selectBatchIds</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据id批量查询数据</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>, <span class="number">100L</span>));</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-selectOne"><a href="#3-4-3-selectOne" class="headerlink" title="3.4.3    selectOne"></a>3.4.3    selectOne</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        wrapper.eq(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">// 查询的数据超过一条时，会抛出异常</span></span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectOne(wrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-selectCount"><a href="#3-4-4-selectCount" class="headerlink" title="3.4.4    selectCount"></a>3.4.4    selectCount</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.gt(<span class="string">"age"</span>, <span class="number">20</span>); <span class="comment">// 条件：年龄大于20岁的用户</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据条件查询数据条数</span></span><br><span class="line">        Integer count = <span class="keyword">this</span>.userMapper.selectCount(wrapper);</span><br><span class="line">        System.out.println(<span class="string">"count =&gt; "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-5-selectList"><a href="#3-4-5-selectList" class="headerlink" title="3.4.5    selectList"></a>3.4.5    selectList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        wrapper.like(<span class="string">"email"</span>, <span class="string">"itcast"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-6-selectPage"><a href="#3-4-6-selectPage" class="headerlink" title="3.4.6    selectPage"></a>3.4.6    selectPage</h3><p>配置分页插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置分页插件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者config配置分页插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//查询第一页，查询1条数据</span></span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        wrapper.like(<span class="string">"email"</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        IPage&lt;User&gt; iPage = <span class="keyword">this</span>.userMapper.selectPage(page, wrapper);</span><br><span class="line">        System.out.println(<span class="string">"数据总条数： "</span> + iPage.getTotal());</span><br><span class="line">        System.out.println(<span class="string">"数据总页数： "</span> + iPage.getPages());</span><br><span class="line">        System.out.println(<span class="string">"当前页数： "</span> + iPage.getCurrent());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; records = iPage.getRecords();</span><br><span class="line">        <span class="keyword">for</span> (User record : records) &#123;</span><br><span class="line">            System.out.println(record);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-SQL注入的原理"><a href="#3-5-SQL注入的原理" class="headerlink" title="3.5    SQL注入的原理"></a>3.5    SQL注入的原理</h2><p>前面我们已经知道，MP在启动后会将BaseMapper中的一系列的方法注册到mappedStatements中，那么究竟是如何注入的呢？流程又是怎么样的？下面我们将一起来分析下。</p><p>在MP中，ISqlInjector负责SQL的注入工作，它是一个接口，AbstractSqlInjector是它的实现类，实现关系如下：</p><p><img src="https://img-blog.csdnimg.cn/20200929181429233.png" alt="image-20200929172718261"></p><p>在 AbstractSqlInjector中，主要是由inspectInject()方法进行注入的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inspectInject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; modelClass = extractModelClass(mapperClass);</span><br><span class="line">    <span class="keyword">if</span> (modelClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String className = mapperClass.toString();</span><br><span class="line">        Set&lt;String&gt; mapperRegistryCache = GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());</span><br><span class="line">        <span class="keyword">if</span> (!mapperRegistryCache.contains(className)) &#123;</span><br><span class="line">            List&lt;AbstractMethod&gt; methodList = <span class="keyword">this</span>.getMethodList();</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methodList)) &#123;</span><br><span class="line">                TableInfo tableInfo = TableInfoHelper.initTableInfo(builderAssistant, modelClass);</span><br><span class="line">                <span class="comment">// 循环注入自定义方法</span></span><br><span class="line">                methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass, tableInfo));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(mapperClass.toString() + <span class="string">", No effective injection method was found."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mapperRegistryCache.add(className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现方法中， <code>methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass,tableInfo));</code> 是关键，循环遍历方法，进行注入。</p><p>最终调用抽象方法injectMappedStatement进行真正的注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入自定义 MappedStatement</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapperClass mapper 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modelClass  mapper 泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableInfo   数据库表反射信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MappedStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span></span>;</span><br></pre></td></tr></table></figure><p>查看该方法的实现：</p><p><img src="https://img-blog.csdnimg.cn/202009291814466.png" alt="image-20200929173100798"></p><p>以 SelectById为例查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID 查询一条数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-04-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectById</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        SqlMethod sqlMethod = SqlMethod.LOGIC_SELECT_BY_ID;</span><br><span class="line">        SqlSource sqlSource = <span class="keyword">new</span> RawSqlSource(configuration, String.format(sqlMethod.getSql(),</span><br><span class="line">            sqlSelectColumns(tableInfo, <span class="keyword">false</span>),</span><br><span class="line">            tableInfo.getTableName(), tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),</span><br><span class="line">            tableInfo.getLogicDeleteSql(<span class="keyword">true</span>, <span class="keyword">false</span>)), Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addSelectMappedStatement(mapperClass, sqlMethod.getMethod(), sqlSource, modelClass, tableInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，生成了SqlSource对象，再将SQL通过addSelectMappedStatement方法添加到meppedStatements中</p><p><img src="https://img-blog.csdnimg.cn/20200929181503183.png" alt="image-20200929173213333"></p><h1 id="4-配置"><a href="#4-配置" class="headerlink" title="4.    配置"></a>4.    配置</h1><p>在MP中有大量的配置，其中有一部分是Mybatis原生的配置，另一部分是MP的配置，详情：<a href="https://mybatis.plus/config/" target="_blank" rel="noopener">https://mybatis.plus/config/</a></p><p>下面我们对常用的配置做讲解。</p><h2 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1    基本配置"></a>4.1    基本配置</h2><h3 id="4-1-1-configLocation"><a href="#4-1-1-configLocation" class="headerlink" title="4.1.1    configLocation"></a>4.1.1    configLocation</h3><p>MyBatis 配置文件位置，如果您有单独的 MyBatis 配置，请将其路径配置到 configLocation 中。 MyBatis Configuration 的具体内容请参考MyBatis 官方文档</p><p>Spring Boot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定全局的配置文件</span></span><br><span class="line"><span class="meta">mybatis-plus.config-location</span>=<span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure><p>Spring MVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-mapperLocations"><a href="#4-1-2-mapperLocations" class="headerlink" title="4.1.2    mapperLocations"></a>4.1.2    mapperLocations</h3><p>MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置。</p><p>Spring Boot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定Mapper.xml文件的路径</span></span><br><span class="line"><span class="meta">mybatis-plus.mapper-locations</span>=<span class="string">classpath*:mybatis/*.xml</span></span><br></pre></td></tr></table></figure><p>Spring MVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:mybatis/*.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Maven  多模块项目的扫描路径需以  classpath*: 开头 （即加载多个 jar 包下的 XML 文件）</p></blockquote><p><strong>测试：</strong></p><p>UserMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.pojo.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.findById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-typeAliasesPackage"><a href="#4-1-3-typeAliasesPackage" class="headerlink" title="4.1.3    typeAliasesPackage"></a>4.1.3    typeAliasesPackage</h3><p>MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。</p><p>Spring Boot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实体对象的扫描包</span></span><br><span class="line"><span class="meta">mybatis-plus.type-aliases-package</span>=<span class="string">com.wgy.pojo</span></span><br></pre></td></tr></table></figure><p>Spring MVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.baomidou.mybatisplus.samples.quickstart.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-进阶配置"><a href="#4-2-进阶配置" class="headerlink" title="4.2    进阶配置"></a>4.2    进阶配置</h2><p>本部分（Configuration）的配置大都为 MyBatis 原生支持的配置，这意味着您可以通过 MyBatis XML 配置文件的形式进行配置。</p><h3 id="4-2-1-mapUnderscoreToCamelCase"><a href="#4-2-1-mapUnderscoreToCamelCase" class="headerlink" title="4.2.1    mapUnderscoreToCamelCase"></a>4.2.1    mapUnderscoreToCamelCase</h3><p>类型： boolean</p><p>默认值： true</p><p>是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射。</p><blockquote><p>注意：</p><p>此属性在 MyBatis 中原默认值为 false，在 MyBatis-Plus 中，此属性也将用于生成最终的 SQL 的 select body</p><p>如果您的数据库命名符合规则无需使用  @TableField 注解指定数据库字段名</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭自动驼峰映射，该参数不能和mybatis-plus.config-location同时存在</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.map-underscore-to-camel-case</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-cacheEnabled"><a href="#4-2-2-cacheEnabled" class="headerlink" title="4.2.2    cacheEnabled"></a>4.2.2    cacheEnabled</h3><p>类型： boolean</p><p>默认值： true</p><p>全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.cache-enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h2 id="4-3-DB-策略配置"><a href="#4-3-DB-策略配置" class="headerlink" title="4.3    DB 策略配置"></a>4.3    DB 策略配置</h2><h3 id="4-3-1-idType"><a href="#4-3-1-idType" class="headerlink" title="4.3.1    idType"></a>4.3.1    idType</h3><p>类型： com.baomidou.mybatisplus.annotation.IdType</p><p>默认值： ID_WORKER</p><p>全局默认主键类型，设置后，即可省略实体对象中的@TableId(type = IdType.AUTO)配置。</p><p>SpringBoot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局的id生成策略</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.id-type</span>=<span class="string">auto</span></span><br></pre></td></tr></table></figure><p>SpringMVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"globalConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbConfig"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idType"</span> <span class="attr">value</span>=<span class="string">"AUTO"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-tablePrefix"><a href="#4-3-2-tablePrefix" class="headerlink" title="4.3.2    tablePrefix"></a>4.3.2    tablePrefix</h3><p>类型： String</p><p>默认值： null</p><p>表名前缀，全局配置后可省略 @TableName()配置。</p><p>SpringBoot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局的表名的前缀</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.table-prefix</span>=<span class="string">tb_</span></span><br></pre></td></tr></table></figure><p>SpringMVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"globalConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbConfig"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idType"</span> <span class="attr">value</span>=<span class="string">"AUTO"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tablePrefix"</span> <span class="attr">value</span>=<span class="string">"tb_"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-条件构造器"><a href="#5-条件构造器" class="headerlink" title="5.    条件构造器"></a>5.    条件构造器</h1><p>在MP中，Wrapper接口的实现类关系如下：</p><p><img src="https://img-blog.csdnimg.cn/20200929181524254.png" alt="image-20200929174953137"></p><p>可以看到， AbstractWrapper和AbstractChainWrapper是重点实现，接下来我们重点学习AbstractWrapper以及其子类。</p><blockquote><p>说明:</p><p>QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类 用于生成 sql的 where 条件, entity 属性也用于生成 sql 的 where 条件 注意: entity 生成的 where 条件与 使用各个 api 生成的 where 条件<strong>没有任何关联行为</strong></p></blockquote><p>官网文档地址： <a href="https://mybatis.plus/guide/wrapper.html" target="_blank" rel="noopener">https://mybatis.plus/guide/wrapper.html</a></p><h2 id="5-1-allEq"><a href="#5-1-allEq" class="headerlink" title="5.1    allEq"></a>5.1    allEq</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq (Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, boolean null2IsNull)</span><br><span class="line">allEq(boolean condition, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br></pre></td></tr></table></figure><p>全部eq(或个别isNull )</p><blockquote><p>个别参数说明:  params :  key 为数据库字段名, value 为字段值  null2IsNull : </p><p>为 true 则在 map 的 value 为null 时调用 isNull 方法,为 false 时则忽略 value 为 null 的</p><p>例 1:  <code>allEq({id:1,name:&quot; 老王&quot;,age:null}) ---&gt; id = 1 and name = &#39; 老王&#39; and age is null</code><br>例 2:  <code>allEq({id:1,name:&quot; 老王&quot;,age:null}, false) ---&gt; id = 1 and name = &#39; 老王&#39;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq (BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br><span class="line">allEq(boolean condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br></pre></td></tr></table></figure><blockquote><p>个别参数说明:  filter : 过滤函数,是否允许字段传入比对条件中  params 与  null2IsNull : 同上</p><p>例 1:  allEq((k,v)  -&gt; k.indexOf(“a”) &gt; 0, {id:1,name:”老王”,age:null}) —&gt; name = ‘老王’ and age is null<br>例 2:  allEq((k,v)  -&gt; k.indexOf(“a”) &gt; 0, {id:1,name:”老王”,age:null}, false) —&gt; name =’老王’</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * allEq条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAllEq</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"name"</span>, <span class="string">"李四"</span>);</span><br><span class="line">        params.put(<span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">        params.put(<span class="string">"password"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        null2IsNull : 为 true 则在 map 的 value 为null 时调用 isNull</span></span><br><span class="line"><span class="comment">//        SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE password IS NULL AND name = ? AND age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq(params);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        为 false 时则忽略 value 为 null 的</span></span><br><span class="line"><span class="comment">//        SELECT id, user_name, name, age, email AS mail FROM tb_user WHERE name = ?AND age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq(params, false);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        SELECT id, user_name, name, age, email AS mail FROM tb_user WHERE age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq((k, v) -&gt; (k.equals("age") || k.equals("id")) , params);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        SELECT id, user_name, name, age, email AS mail FROM tb_user WHERE name = ?AND age = ?</span></span><br><span class="line">        wrapper.allEq((k, v) -&gt; (k.equals(<span class="string">"age"</span>) || k.equals(<span class="string">"id"</span>) || k.equals(<span class="string">"name"</span>)), params);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-基本比较操作"><a href="#5-2-基本比较操作" class="headerlink" title="5.2    基本比较操作"></a>5.2    基本比较操作</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>eq</td><td>等于 =</td></tr><tr><td>ne</td><td>不等于 &lt;&gt;</td></tr><tr><td>gt</td><td>大于 &gt;</td></tr><tr><td>ge</td><td>大于等于 &gt;=</td></tr><tr><td>lt</td><td>小于 &lt;</td></tr><tr><td>le</td><td>小于等于 &lt;=</td></tr><tr><td>between</td><td>BETWEEN  值1 AND 值2</td></tr><tr><td>notBetween</td><td>NOT BETWEEN  值1 AND 值2</td></tr><tr><td>in</td><td>字段 IN (value.get(0), value.get(1), …)</td></tr><tr><td>notIn</td><td>字段 NOT IN (v0, v1, …)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SELECT id,user_name,password,name,age,email FROM tb_user WHERE password = ? AND age &gt;= ? AND name IN (?,?,?)</span></span><br><span class="line">        wrapper.eq(<span class="string">"password"</span>, <span class="string">"123456"</span>)</span><br><span class="line">                .ge(<span class="string">"age"</span>, <span class="number">20</span>)</span><br><span class="line">                .in(<span class="string">"name"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"赵六"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-模糊查询"><a href="#5-3-模糊查询" class="headerlink" title="5.3    模糊查询"></a>5.3    模糊查询</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>like</td><td>LIKE ‘% 值%’<br/>例 :  like(“name”, “ 王”) —&gt; name like ‘% 王%’</td></tr><tr><td>notLike</td><td>NOT LIKE ‘% 值%’<br/>例 :  notLike(“name”, “ 王”) —&gt; name not like ‘% 王%’</td></tr><tr><td>likeLeft</td><td>LIKE ‘% 值’<br/>例 :  likeLeft(“name”, “ 王”) —&gt; name like ‘% 王’</td></tr><tr><td>likeRight</td><td>LIKE ‘ 值%’<br/>例 :  likeRight(“name”, “ 王”) —&gt; name like ‘ 王%’</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name LIKE ?</span></span><br><span class="line">        <span class="comment">// 参数：%五(String)</span></span><br><span class="line">        wrapper.likeLeft(<span class="string">"name"</span>, <span class="string">"五"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-排序"><a href="#5-4-排序" class="headerlink" title="5.4    排序"></a>5.4    排序</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>orderBy</td><td>排序： ORDER BY 字段, …<br/>例 :  orderBy(true, true, “id”, “name”) —&gt; order by id ASC,name ASC</td></tr><tr><td>orderByAsc</td><td>排序： ORDER BY 字段, … ASC<br/>例 :  orderByAsc(“id”, “name”) —&gt; order by id ASC,name ASC</td></tr><tr><td>orderByDesc</td><td>排序： ORDER BY 字段, … DESC<br/>例 :  orderByDesc(“id”, “name”) —&gt; order by id DESC,name DESC</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderByAgeDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//按照年龄倒序排序</span></span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user ORDER BY age DESC</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-逻辑查询"><a href="#5-5-逻辑查询" class="headerlink" title="5.5    逻辑查询"></a>5.5    逻辑查询</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>or</td><td>拼接 OR<br/>主动调用 or 表示紧接着下一个方法不是用 and 连接!(不调用 or 则默认为使用 and 连接)</td></tr><tr><td>and</td><td>AND  嵌套<br/>例 :  and(i  -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”)) —&gt; and (name = ‘李白’ and status&lt;&gt; ‘活着’)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">"name"</span>, <span class="string">"王五"</span>).or().eq(<span class="string">"age"</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-select"><a href="#2-6-select" class="headerlink" title="2.6    select"></a>2.6    select</h2><p>在MP查询中，默认查询所有的字段，如果有需要也可以通过select方法进行指定字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//SELECT id,name,age FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">"name"</span>, <span class="string">"王五"</span>)</span><br><span class="line">                .or()</span><br><span class="line">                .eq(<span class="string">"age"</span>, <span class="number">21</span>)</span><br><span class="line">                .select(<span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"age"</span>); <span class="comment">//指定查询的字段</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-了解Mybatis-Plus&quot;&gt;&lt;a href=&quot;#1-了解Mybatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;1.    了解Mybatis-Plus&quot;&gt;&lt;/a&gt;1.    了解Mybatis-Plus&lt;/h1&gt;&lt;h2 id=&quot;1-1-Mybatis-Plus介绍&quot;&gt;&lt;a href=&quot;#1-1-Mybatis-Plus介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1    Mybatis-Plus介绍&quot;&gt;&lt;/a&gt;1.1    Mybatis-Plus介绍&lt;/h2&gt;&lt;p&gt;MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;p&gt;官网： &lt;a href=&quot;https://mybatis.plus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.plus/&lt;/a&gt; 或 &lt;a href=&quot;https://mp.baomidou.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.baomidou.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
      <category term="Mybatis-Plus" scheme="https://wgy1993.gitee.io/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringData(二)</title>
    <link href="https://wgy1993.gitee.io/archives/dc35f26.html"/>
    <id>https://wgy1993.gitee.io/archives/dc35f26.html</id>
    <published>2020-09-27T11:25:48.000Z</published>
    <updated>2020-09-27T11:31:55.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringData-Redis"><a href="#1-SpringData-Redis" class="headerlink" title="1.    SpringData Redis"></a>1.    SpringData Redis</h1><h2 id="1-1-SpringData-Redis-简介"><a href="#1-1-SpringData-Redis-简介" class="headerlink" title="1.1    SpringData Redis 简介"></a>1.1    SpringData Redis 简介</h2><p>Redis是一个基于内存的数据结构存储系统，它可以用作数据库或者缓存。它支持多种类型的数据结构，这些数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和Zset（有序集合）。</p><a id="more"></a><p>SpringData Redis的作用是通过一段简单的配置即可访问redis服务，它的底层是对java提供的redis开发包(比如jedis等)进行了高度封装，主要提供了如下功能：</p><ul><li>连接池自动管理，提供了一个高度封装的 RedisTemplate类,基于这个类的对象可以对redis进行各种操作</li><li>针对 jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口<ul><li>ValueOperations ：简单字符串类型数据操作</li><li>SetOperations ：set类型数据操作</li><li>ZSetOperations ：zset类型数据操作</li><li>HashOperations ：map类型的数据操作</li><li>ListOperations ：list类型的数据操作</li></ul></li></ul><h2 id="1-2-Redis-环境搭建"><a href="#1-2-Redis-环境搭建" class="headerlink" title="1.2    Redis 环境搭建"></a>1.2    Redis 环境搭建</h2><h3 id="1-2-1-安装redis的依赖环境"><a href="#1-2-1-安装redis的依赖环境" class="headerlink" title="1.2.1    安装redis的依赖环境"></a>1.2.1    安装redis的依赖环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure><h3 id="1-2-2-上传安装包"><a href="#1-2-2-上传安装包" class="headerlink" title="1.2.2    上传安装包"></a>1.2.2    上传安装包</h3><p>获取到安装包,并将它上传到linux的/usr/local/src/目录下</p><h3 id="1-2-3-解压"><a href="#1-2-3-解压" class="headerlink" title="1.2.3    解压"></a>1.2.3    解压</h3><p>解压安装包,得到一个redis-5.0.4目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.4.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-2-4-编译"><a href="#1-2-4-编译" class="headerlink" title="1.2.4    编译"></a>1.2.4    编译</h3><p>进入redis目录,在目录下执行make命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-5.0.4</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="1-2-5-安装"><a href="#1-2-5-安装" class="headerlink" title="1.2.5    安装"></a>1.2.5    安装</h3><p>执行安装命令,注意此处指定了安装目录为/usr/local/redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/usr/<span class="built_in">local</span>/redis install</span><br></pre></td></tr></table></figure><h3 id="1-2-6-复制配置文件"><a href="#1-2-6-复制配置文件" class="headerlink" title="1.2.6    复制配置文件"></a>1.2.6    复制配置文件</h3><p>将配置文件复制到redis的安装目录的bin目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/bin/</span><br><span class="line"></span><br><span class="line">cp /usr/<span class="built_in">local</span>/src/redis-5.0.4/redis.conf ./</span><br></pre></td></tr></table></figure><h3 id="1-2-7-修改-redis的配置文件"><a href="#1-2-7-修改-redis的配置文件" class="headerlink" title="1.2.7    修改 redis的配置文件"></a>1.2.7    修改 redis的配置文件</h3><p>修改redis的配置文件,将注解绑定和保护模式关闭,方便我们从客户端连接测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927191822227.png" alt="image-20200927172919574"></p><h3 id="1-2-8-启动-redis服务"><a href="#1-2-8-启动-redis服务" class="headerlink" title="1.2.8    启动 redis服务"></a>1.2.8    启动 redis服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;src&#x2F;redis-server redis.conf</span><br></pre></td></tr></table></figure><h2 id="1-3-SpringData-Redis-入门案例"><a href="#1-3-SpringData-Redis-入门案例" class="headerlink" title="1.3    SpringData Redis 入门案例"></a>1.3    SpringData Redis 入门案例</h2><h3 id="1-3-1-创建工程，引入坐标"><a href="#1-3-1-创建工程，引入坐标" class="headerlink" title="1.3.1    创建工程，引入坐标"></a>1.3.1    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-创建配置文件"><a href="#1-3-2-创建配置文件" class="headerlink" title="1.3.2    创建配置文件"></a>1.3.2    创建配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Jedis连接池参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大空闲连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最小空闲连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Jedis连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:hostName</span>=<span class="string">"192.168.142.128"</span> <span class="attr">p:port</span>=<span class="string">"6379"</span> <span class="attr">p:poolConfig-ref</span>=<span class="string">"jedisPoolConfig"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Redis的模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置jedis的连接工厂,目的是为了获取jedis连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置非hash类型的序列化器--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="keySerializer"&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="valueSerializer"&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-测试"><a href="#1-3-3-测试" class="headerlink" title="1.3.3    测试"></a>1.3.3    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Redis 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试:向redis保存一条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"name"</span>, <span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        String name = (String) redisTemplate.opsForValue().get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-SpringData-Redis-的序列化器"><a href="#1-4-SpringData-Redis-的序列化器" class="headerlink" title="1.4    SpringData Redis 的序列化器"></a>1.4    SpringData Redis 的序列化器</h2><p>通过Redis提供的客户端查看入门案例中存入redis的数据</p><p><img src="https://img-blog.csdnimg.cn/20200927191842166.png" alt="image-20200927173337242"></p><p>这时候会发现，存入的数据并不是简单的字符串，而是一些类似于二进制的数据，这是怎么回事呢？</p><p>原来，SpringData Redis在保存数据的时候，底层有一个序列化器在工作，它会将要保存的数据（键和值）按照一定的规则进行序列化操作后再进行存储。spring-data-redis提供如下几种序列化器：</p><ul><li>StringRedisSerializer:  简单的字符串序列化</li><li>GenericToStringSerializer:  可以将任何对象泛化为字符串并序列化</li><li>Jackson2JsonRedisSerializer:  序列化对象为json字符串</li><li>GenericJackson2JsonRedisSerializer: 功能同上,但是更容易反序列化</li><li>OxmSerializer:  序列化对象为xml字符串</li><li>JdkSerializationRedisSerializer:  序列化对象为二进制数据</li></ul><p>RedisTemplate默认使用的是JdkSerializationRedisSerializer对数据进行序列化。</p><p>那么如何选择自己想要的序列化器呢？SpringData提供了两种方式：</p><p>1、通过配置文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Redis的模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置jedis的连接工厂,目的是为了获取jedis连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置非hash类型的序列化器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、通过RedisTemplate设定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">    redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取操作简单字符串类型数据的数据句柄</span></span><br><span class="line">    ValueOperations operations = redisTemplate.opsForValue();</span><br><span class="line">    operations.set(<span class="string">"name3"</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    String name = (String) redisTemplate.opsForValue().get(<span class="string">"name3"</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-SpringData-Redis-运行原理分析"><a href="#1-5-SpringData-Redis-运行原理分析" class="headerlink" title="1.5    SpringData Redis 运行原理分析"></a>1.5    SpringData Redis 运行原理分析</h2><p>我们从入门案例中已经知道SpringData Redis操作Redis服务器只要是通过RestTemplate实现的，那么RestTemplate底层到底是如何操作redis的呢，下面我们通过源码追踪的形式看一看。</p><p>1、首先看配置文件中关于RestTemplate的bean的配置，可以看到在RedisTemplate的bean声明中注入了一个JedisConnectionFactory实例，顾名思义，这个连接工厂是用来获取Jedis连接的，那么通过这种方式RedisTemplate就可以拿到操作Redis服务器的句柄了。</p><p><img src="https://img-blog.csdnimg.cn/20200927191901197.png" alt="image-20200927173932509"></p><p>2、使用debug运行入门案例，观察创建好的RestTemplate实例，可以看到里面主要有序列化器和redis的连接信息，基于这些，我们就可以对redis进行操作了</p><p><img src="https://img-blog.csdnimg.cn/20200927191918278.png" alt="image-20200927173949271"></p><p>3 、跟踪进入set方法，我们可以看到set方法中使用了一个connection来进行操作，这个connection的类型是JedisConnetion，而这个connection肯定是通过配置文件配置的JedisConnectionFactory产生的，也就是底层开始调用jedis的api了。</p><p><img src="https://img-blog.csdnimg.cn/20200927191935597.png" alt="image-20200927174006887"></p><p>4 、继续追踪set方法，选择JedisStringCommands实现</p><p><img src="https://img-blog.csdnimg.cn/20200927191951533.png" alt="image-20200927174017693"></p><p>5 、继续之宗set方法，可以看到底层已经获取到了jedis的实例，再调用set方法已经在调jedis的set了</p><p><img src="https://img-blog.csdnimg.cn/20200927192009654.png" alt="image-20200927174028688"></p><p>6 、再追踪一步，就会发现，底层最终调用的是jedis的原生API，setCommand方法，这个方法就是jedis提供的对redis的各种操作命令了。</p><p><img src="https://img-blog.csdnimg.cn/20200927192027668.png" alt="image-20200927174042513"></p><p>至此，我们的分析完毕。得到的结论就是：</p><p>SpringData提供redisTemplate就是在原生的Jedis或者其他操作redis的技术上做的一层封装，它屏蔽掉了这些原生技术的实现细节，统一了调用接口，使得我们的操作更加简单明了。</p><h2 id="1-6-SpringData-Redis-常见操作"><a href="#1-6-SpringData-Redis-常见操作" class="headerlink" title="1.6    SpringData Redis 常见操作"></a>1.6    SpringData Redis 常见操作</h2><p>本章节我们来学习如何使用SpringData Redis来操作Redis的各种数据类型.</p><p>在Redis中有五种常见类型,SpringData Redis对每一种数据类型都提供了一个xxxOperations的API,他们分别是:</p><ul><li>ValueOperations : 用来操作字符串类型数据</li><li>HashOperations: 用来操作hash类型数据</li><li>ListOperations: 用来操作list类型数据</li><li>SetOperations: 用来操作set类型数据</li><li>ZSetOperations: 用来操作zset类型数据</li></ul><h3 id="1-6-1-String类型"><a href="#1-6-1-String类型" class="headerlink" title="1.6.1    String类型"></a>1.6.1    String类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisStringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ValueOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向数据库中保存name--heima</span></span><br><span class="line">        operations.set(<span class="string">"name"</span>, <span class="string">"heima"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相关数据库保存name1--heima1  有效时间为10s</span></span><br><span class="line">        operations.set(<span class="string">"name1"</span>, <span class="string">"heima1"</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换 heima    ---&gt;   heXXa   offset 索引位置是从0开始</span></span><br><span class="line">        operations.set(<span class="string">"name"</span>, <span class="string">"XX"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当key不存在的时候,执行保存操作;当key存在的时候,什么都不做</span></span><br><span class="line">        operations.setIfAbsent(<span class="string">"name1"</span>, <span class="string">"heima"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量保存</span></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"name2"</span>, <span class="string">"heima2"</span>);</span><br><span class="line">        map.put(<span class="string">"name3"</span>, <span class="string">"heima3"</span>);</span><br><span class="line">        map.put(<span class="string">"name4"</span>, <span class="string">"heima4"</span>);</span><br><span class="line"></span><br><span class="line">        operations.multiSet(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//追加 当key存在时,会执行追加操作;当key不存在时,会执行保存操作</span></span><br><span class="line">        operations.append(<span class="string">"name5"</span>, <span class="string">"Heima"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据key获取value</span></span><br><span class="line">        String value = operations.get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(value);<span class="comment">//heXXaHeima</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先根据key获取value,然后再根据value进行截取,从start位置截取到end位置[包含start和end]</span></span><br><span class="line">        String value2 = operations.get(<span class="string">"name"</span>, <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(value2);<span class="comment">//heXXaHeima--&gt;Hei</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量获取</span></span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        keys.add(<span class="string">"name2"</span>);</span><br><span class="line">        keys.add(<span class="string">"name3"</span>);</span><br><span class="line">        keys.add(<span class="string">"name4"</span>);</span><br><span class="line">        List&lt;String&gt; values = operations.multiGet(keys);</span><br><span class="line">        <span class="keyword">for</span> (String s : values) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据key获取value的长度</span></span><br><span class="line">        Long size = operations.size(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自增</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.set(<span class="string">"age"</span>, <span class="string">"18"</span>);</span><br><span class="line">        operations.increment(<span class="string">"age"</span>);<span class="comment">//自增1---&gt;19</span></span><br><span class="line">        System.out.println(operations.get(<span class="string">"age"</span>));</span><br><span class="line">        operations.increment(<span class="string">"age"</span>, <span class="number">5</span>);<span class="comment">//自增5</span></span><br><span class="line">        System.out.println(operations.get(<span class="string">"age"</span>));<span class="comment">//----&gt;24</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//自减</span></span><br><span class="line">        operations.decrement(<span class="string">"age"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单个删除</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        keys.add(<span class="string">"name2"</span>);</span><br><span class="line">        keys.add(<span class="string">"name3"</span>);</span><br><span class="line">        keys.add(<span class="string">"name4"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量删除</span></span><br><span class="line">        redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-Hash-类型"><a href="#1-6-2-Hash-类型" class="headerlink" title="1.6.2    Hash 类型"></a>1.6.2    Hash 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hash类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisHashTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HashOperations&lt;String, String, Article&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"程序员"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        operations.put(<span class="string">"article"</span>, <span class="string">"3"</span>, article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断hashkey是否存在</span></span><br><span class="line">        Boolean flag = operations.hasKey(<span class="string">"article"</span>, <span class="string">"3"</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据key和hashkay获取操作</span></span><br><span class="line">        Article article = operations.get(<span class="string">"article"</span>, <span class="string">"2"</span>);</span><br><span class="line">        System.out.println(article);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据key获取所有的hashkey</span></span><br><span class="line">        Set&lt;String&gt; set = operations.keys(<span class="string">"article"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = operations.values(<span class="string">"article"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article art : articles) &#123;</span><br><span class="line">            System.out.println(art);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Article&gt; map = operations.entries(<span class="string">"article"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Article&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当hash中的数据全部被删除后,整个hash就没了</span></span><br><span class="line">        operations.delete(<span class="string">"article"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-List-类型"><a href="#1-6-3-List-类型" class="headerlink" title="1.6.3    List 类型"></a>1.6.3    List 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ListOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从左边添加一个元素</span></span><br><span class="line">        operations.leftPush(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">        <span class="comment">//从左边添加多个元素</span></span><br><span class="line">        operations.leftPushAll(<span class="string">"students"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhaoliu"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从右边添加一个元素</span></span><br><span class="line">        operations.rightPush(<span class="string">"students"</span>, <span class="string">"zhangsan1"</span>);</span><br><span class="line">        <span class="comment">//从右边添加多个元素</span></span><br><span class="line">        operations.rightPushAll(<span class="string">"students"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhaoliu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据key和索引进行查询</span></span><br><span class="line">        <span class="comment">//0和正数代表从左边开始    0  1  2</span></span><br><span class="line">        <span class="comment">//负数代表从右边开始       -1   -2  -3</span></span><br><span class="line">        String student = operations.index(<span class="string">"students"</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">        String student1 = operations.index(<span class="string">"students"</span>, -<span class="number">2</span>);</span><br><span class="line">        System.out.println(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//范围查询</span></span><br><span class="line">        <span class="comment">//根据key  [start,end]  包括首尾</span></span><br><span class="line">        List&lt;String&gt; students = operations.range(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : students) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从左边删除第一个元素</span></span><br><span class="line">        <span class="comment">//String s = operations.leftPop("students");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从右边删除第一个元素</span></span><br><span class="line">        <span class="comment">//operations.rightPop("students");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// count &gt; 0：删除左边起第几个等于指定值的元素</span></span><br><span class="line">        <span class="comment">// count &lt; 0：删除右边起第几个等于指定值的元素</span></span><br><span class="line">        <span class="comment">// count = 0：删除所有等于value的元素。</span></span><br><span class="line">        <span class="comment">//删除左边起第二个wangwu</span></span><br><span class="line">        operations.remove(<span class="string">"students"</span>, <span class="number">2</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-4-Set-类型"><a href="#1-6-4-Set-类型" class="headerlink" title="1.6.4    Set 类型"></a>1.6.4    Set 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SetOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询所有元素</span></span><br><span class="line">        Set&lt;String&gt; students = operations.members(<span class="string">"students"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机获取一个元素</span></span><br><span class="line">        String student = operations.randomMember(<span class="string">"students"</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机多个元素[可能会重复]</span></span><br><span class="line">        List&lt;String&gt; stus = operations.randomMembers(<span class="string">"students"</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String stu : stus) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//移除元素,并返回移除成功个数</span></span><br><span class="line">        Long count = operations.remove(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="string">"wangwu"</span>, <span class="string">"sunliu"</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机移除指定集合中的多少个元素</span></span><br><span class="line">        List&lt;String&gt; students = operations.pop(<span class="string">"students"</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多集合操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMoreSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.add(<span class="string">"names1"</span>, <span class="string">"zhangsan"</span>, <span class="string">"li"</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">        operations.add(<span class="string">"names2"</span>, <span class="string">"zhangsan"</span>, <span class="string">"li"</span>, <span class="string">"zhaoliu"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取交集</span></span><br><span class="line">        Set&lt;String&gt; sets1 = operations.intersect(<span class="string">"names1"</span>, <span class="string">"names2"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : sets1) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取并集</span></span><br><span class="line">        Set&lt;String&gt; sets2 = operations.union(<span class="string">"names1"</span>, <span class="string">"names2"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : sets2) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取差集[第一个集合中存在,但是在第二个集合中不存在的元素]</span></span><br><span class="line">        Set&lt;String&gt; sets3 = operations.difference(<span class="string">"names2"</span>, <span class="string">"names1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : sets3) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-5-ZSet-类型"><a href="#1-6-5-ZSet-类型" class="headerlink" title="1.6.5    ZSet 类型"></a>1.6.5    ZSet 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ZSet类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisZSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ZSetOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="number">100</span>);</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"lisi"</span>, <span class="number">60</span>);</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"wangwu"</span>, <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分数的增减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//incrementScore 可以用来增减分数  增加就用正数    减少用负数</span></span><br><span class="line">        <span class="comment">//增加分数</span></span><br><span class="line">        operations.incrementScore(<span class="string">"students"</span>, <span class="string">"wangwu"</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//减少分数</span></span><br><span class="line">        operations.incrementScore(<span class="string">"students"</span>, <span class="string">"wangwu"</span>, -<span class="number">70</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个元素的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询一个元素的分数</span></span><br><span class="line">        Double score = operations.score(<span class="string">"students"</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">        System.out.println(score);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询一个元素在集合中的排名   排名从0开始</span></span><br><span class="line">        Long rank = operations.rank(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">        System.out.println(rank);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据一个区间获得一个列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据排名区间来获取元素列表</span></span><br><span class="line">        Set&lt;String&gt; students = operations.range(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; set = operations.rangeWithScores(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : set) &#123;</span><br><span class="line">            System.out.println(tuple.getValue() + <span class="string">"同学,得了"</span> + tuple.getScore() + <span class="string">"分"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据分数区间来获取列表</span></span><br><span class="line">        Set&lt;String&gt; students2 = operations.rangeByScore(<span class="string">"students"</span>, <span class="number">60</span>, <span class="number">90</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students2) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; set2 = operations.rangeByScoreWithScores(<span class="string">"students"</span>, <span class="number">60</span>, <span class="number">90</span>);</span><br><span class="line">        <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : set2) &#123;</span><br><span class="line">            System.out.println(tuple.getValue() + <span class="string">"同学,得了"</span> + tuple.getScore() + <span class="string">"分"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//统计一个集合中元素</span></span><br><span class="line">        Long zCard = operations.zCard(<span class="string">"students"</span>);</span><br><span class="line">        System.out.println(zCard);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据一个分数区间统计元素数量</span></span><br><span class="line">        Long count = operations.count(<span class="string">"students"</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据key-value删除  value允许传入多个</span></span><br><span class="line">        operations.remove(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据排名区间删除</span></span><br><span class="line">        operations.removeRange(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据分数区间删除</span></span><br><span class="line">        operations.removeRangeByScore(<span class="string">"students"</span>, <span class="number">70</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Repository和Template的选用"><a href="#2-Repository和Template的选用" class="headerlink" title="2.    Repository和Template的选用"></a>2.    Repository和Template的选用</h1><p>经过前面的章节，我们学习了SpringData家族中jpa和redis的使用，在感受到SpringData技术使用方便的同时，也隐隐约约感觉有点问题，那就是jpa和redis的使用思路好像不是很一致。</p><p>我们使用SpringDataJpa的时候，采用了继承SpringData提供的一个接口的形式，即 <code>public interface ArticleDao extends JpaRepository&lt;Article,Integer&gt;,JpaSpecificationExecutor&lt;Article&gt;</code> ，但是使用SpingData Redis的时候，却是使用了在实现类中注入一个 redisTemplate 的方式，那么这两种方式到底有什么关系，用哪个更好呢？</p><p>其实这两种方式都可以完成我们对持久层的操作，但是对比两种方式的使用，就会发现：</p><p>第一种方式，直接继承xxxRepository接口，可以不必自己去写实现类，而轻松实现简单的增删改查、分页、排序操作，但是对于非常复杂的查询，用起来就比较的费力了；</p><p>第二种方式，直接使用xxxTemplate，就需要自己写实现类，但是这样增删改查可以自己控制，对于复杂查询来说，用起来更加得心应手。</p><p>所以，两种方式在企业开发中都可能用到，甚至有的项目开发中会同时使用两种方式:对于简单的操作，直接继承Repository接口，对于复杂操作，使用Template完成。所以我们用的时候也要根据实际场景进行灵活选用。</p><h1 id="3-SpringData-ElasticSearch"><a href="#3-SpringData-ElasticSearch" class="headerlink" title="3.    SpringData ElasticSearch"></a>3.    SpringData ElasticSearch</h1><h2 id="3-1-SpringData-ElasticSearch-简介"><a href="#3-1-SpringData-ElasticSearch-简介" class="headerlink" title="3.1    SpringData ElasticSearch 简介"></a>3.1    SpringData ElasticSearch 简介</h2><p>Elasticsearch是一个实时的分布式搜索和分析引擎。它底层封装了Lucene框架,可以提供分布式多用户的全文搜索服务。</p><p>Spring Data ElasticSearch是SpringData技术对ElasticSearch原生API封装之后的产物,它通过对原生API的封装,使得程序员可以简单的对ElasticSearch进行各种操作。</p><h2 id="3-2-ElasticSearch-环境搭建"><a href="#3-2-ElasticSearch-环境搭建" class="headerlink" title="3.2    ElasticSearch 环境搭建"></a>3.2    ElasticSearch 环境搭建</h2><h3 id="3-2-1-安装ElasticSearch"><a href="#3-2-1-安装ElasticSearch" class="headerlink" title="3.2.1    安装ElasticSearch"></a>3.2.1    安装ElasticSearch</h3><h4 id="3-2-1-1-准备工作"><a href="#3-2-1-1-准备工作" class="headerlink" title="3.2.1.1    准备工作"></a>3.2.1.1    准备工作</h4><p>修改进程限制,编辑/etc/security/limits.conf,添加下面的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020092719205071.png" alt="image-20200927175520404"></p><p> 修改系统变量的最大值,编辑/etc/sysctl.conf,添加下面的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count = 655360</span><br></pre></td></tr></table></figure><p>保存修改之后 ,执行 sysctl -p 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h4 id="3-2-1-2-文件上传"><a href="#3-2-1-2-文件上传" class="headerlink" title="3.2.1.2    文件上传"></a>3.2.1.2    文件上传</h4><p>上传文件到src目录下</p><h4 id="3-2-1-3-文件解压"><a href="#3-2-1-3-文件解压" class="headerlink" title="3.2.1.3    文件解压"></a>3.2.1.3    文件解压</h4><p>直接将软件解压到安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-5.6.8.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><h4 id="3-2-1-4-添加用户"><a href="#3-2-1-4-添加用户" class="headerlink" title="3.2.1.4    添加用户"></a>3.2.1.4    添加用户</h4><p>新增加一个es用户,并将elasticsearch-5.6.8目录的所属用户和用户组改成es</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd es</span><br><span class="line"></span><br><span class="line">chown es:es -R ../elasticsearch-5.6.8</span><br></pre></td></tr></table></figure><p>切换到新创建的 es用户,执行后续操作</p><h4 id="3-2-1-5-修改配置"><a href="#3-2-1-5-修改配置" class="headerlink" title="3.2.1.5    修改配置"></a>3.2.1.5    修改配置</h4><p>编辑配置文件,修改数据文件和日志文件的存储位置以及es的绑定地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-5.6.8/config/</span><br><span class="line"></span><br><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927192105484.png" alt="image-20200927175815186"></p><h4 id="3-2-1-6-启动-elasticSearch"><a href="#3-2-1-6-启动-elasticSearch" class="headerlink" title="3.2.1.6    启动 elasticSearch"></a>3.2.1.6    启动 elasticSearch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-5.6.8/bin/</span><br><span class="line"></span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure><h4 id="3-2-1-7-访问测试"><a href="#3-2-1-7-访问测试" class="headerlink" title="3.2.1.7    访问测试"></a>3.2.1.7    访问测试</h4><p>通过服务器的9200端口访问,得到下面的结果,证明安装成功.</p><p><img src="https://img-blog.csdnimg.cn/20200927192120969.png" alt="image-20200927175910126"></p><h3 id="3-2-2-安装-Head插件"><a href="#3-2-2-安装-Head插件" class="headerlink" title="3.2.2    安装 Head插件"></a>3.2.2    安装 Head插件</h3><h4 id="3-2-2-1-安装nodeJS"><a href="#3-2-2-1-安装nodeJS" class="headerlink" title="3.2.2.1    安装nodeJS"></a>3.2.2.1    安装nodeJS</h4><p>将nodeJS的安装包上传到/usr/local/src下,然后解压到/usr/local下,然后将npm和node建立软连接到/usr/local/bin/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf node-v10.16.0-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-安装-cnpm"><a href="#3-2-2-2-安装-cnpm" class="headerlink" title="3.2.2.2    安装 cnpm"></a>3.2.2.2    安装 cnpm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/cnpm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><h4 id="3-2-2-3-安装-grunt"><a href="#3-2-2-3-安装-grunt" class="headerlink" title="3.2.2.3    安装 grunt"></a>3.2.2.3    安装 grunt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/grunt /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><h4 id="3-2-2-4-安装-head插件"><a href="#3-2-2-4-安装-head插件" class="headerlink" title="3.2.2.4    安装 head插件"></a>3.2.2.4    安装 head插件</h4><p>上传head插件到/usr/local/src/下,然后解压到/usr/local下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-head-master.zip</span><br><span class="line"></span><br><span class="line">cp -R elasticsearch-head-master /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure><h4 id="3-2-2-5-安装-head插件所需依赖"><a href="#3-2-2-5-安装-head插件所需依赖" class="headerlink" title="3.2.2.5    安装 head插件所需依赖"></a>3.2.2.5    安装 head插件所需依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-head-master</span><br><span class="line"></span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><h4 id="3-2-2-6-修改-elasticsearch的配置"><a href="#3-2-2-6-修改-elasticsearch的配置" class="headerlink" title="3.2.2.6    修改 elasticsearch的配置"></a>3.2.2.6    修改 elasticsearch的配置</h4><p>编辑配置文件:/usr/local/elasticsearch-5.6.8/config/elasticsearch.yml,添加跨域请求允许,即增加以下两行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>修改完毕之后 ,要对elasticsearch进行重启</p><h4 id="3-2-2-7-启动head"><a href="#3-2-2-7-启动head" class="headerlink" title="3.2.2.7    启动head"></a>3.2.2.7    启动head</h4><p>在head目录下启动插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt server</span><br></pre></td></tr></table></figure><h4 id="3-2-2-8-访问测试"><a href="#3-2-2-8-访问测试" class="headerlink" title="3.2.2.8    访问测试"></a>3.2.2.8    访问测试</h4><p>通过服务器的9100端口访问,得到下面的结果,证明安装成功.</p><p><img src="https://img-blog.csdnimg.cn/2020092719213853.png" alt="image-20200927180434153"></p><h3 id="3-2-3-安装-IK分词器"><a href="#3-2-3-安装-IK分词器" class="headerlink" title="3.2.3    安装 IK分词器"></a>3.2.3    安装 IK分词器</h3><h4 id="3-2-3-1-说明"><a href="#3-2-3-1-说明" class="headerlink" title="3.2.3.1    说明"></a>3.2.3.1    说明</h4><p>ES默认的中文分词器是将每一个汉字作为一个词，这显然不合适，而IK分词是一款国人开发的相对简单的中文分词器，它包含大量的中文词，而且支持自定义分词。</p><p>ik分词器提供的分词规则：</p><ul><li>ik_max_word ：会将文本做最细粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国、中华人民、中华、华人、人民共和国、人民、共和国、大会堂、大会、会堂等词语。</li><li>ik_smart ：会做最粗粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为中华人民共和国、人民大会堂</li></ul><p>两种分词器使用的最佳实践是：索引时用ik_max_word，在搜索时用ik_smart。即：索引时最大化的将文章内容分词，搜索时更精确的搜索到想要的结果。</p><h4 id="3-2-3-2-安装"><a href="#3-2-3-2-安装" class="headerlink" title="3.2.3.2    安装"></a>3.2.3.2    安装</h4><p>第一步:下载得到ik分词器的安装包,将其解压得到有一个文件夹,并将文件夹重命名为ik</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-analysis-ik-5.6.8.zip</span><br></pre></td></tr></table></figure><p>第二步 :将elastaicsearch文件夹拷贝到elastaicsearch-5.6.8下的plugins目录下,并重命名为ik</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r elasticsearch /usr/<span class="built_in">local</span>/elasticsearch-5.6.8/plugins/ik</span><br></pre></td></tr></table></figure><p>第三步 :重新启动elasticsearch即可加载IK分词器</p><p>第四部:测试</p><p>http://服务地址:9200/_analyze?analyzer=ik_smart&amp;pretty=true&amp;text=我是程序员</p><p><img src="https://img-blog.csdnimg.cn/20200927192155707.png" alt="image-20200927180741599"></p><h2 id="3-3-ElasticSearch-基础知识回顾"><a href="#3-3-ElasticSearch-基础知识回顾" class="headerlink" title="3.3    ElasticSearch 基础知识回顾"></a>3.3    ElasticSearch 基础知识回顾</h2><h3 id="3-3-1-核心概念"><a href="#3-3-1-核心概念" class="headerlink" title="3.3.1    核心概念"></a>3.3.1    核心概念</h3><h4 id="3-3-1-1-索引-index"><a href="#3-3-1-1-索引-index" class="headerlink" title="3.3.1.1    索引 index"></a>3.3.1.1    索引 index</h4><p>一个索引就是一个拥有几分相似特征的文档的集合。<strong>索引就类似于关系型数据库中的库的概念。</strong></p><h4 id="3-3-1-2-类型-type"><a href="#3-3-1-2-类型-type" class="headerlink" title="3.3.1.2    类型 type"></a>3.3.1.2    类型 type</h4><p>一个类型是索引中的一个逻辑上的分类/分区。<strong>类型就类似于关系型数据库中的数据表的概念。</strong></p><h4 id="3-3-1-3-映射-mapping"><a href="#3-3-1-3-映射-mapping" class="headerlink" title="3.3.1.3    映射 mapping"></a>3.3.1.3    映射 mapping</h4><p>映射是对类型中的字段的限制。<strong>映射就类似于关系型数据库中的数据表结构的概念。</strong></p><h4 id="3-3-1-4-文档-document"><a href="#3-3-1-4-文档-document" class="headerlink" title="3.3.1.4    文档 document"></a>3.3.1.4    文档 document</h4><p>一个文档是一个可被索引的基础信息单元。<strong>文档就类似于关系型数据库中的行的概念。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ElasticSearch跟关系型数据库中概念的对比：</span><br><span class="line">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</span><br><span class="line">Elasticsearch -&gt; Indices -&gt; Types -&gt; Documents -&gt; Fields</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927192215128.png" alt="image-20200927181707142"></p><h3 id="3-3-2-常见操作"><a href="#3-3-2-常见操作" class="headerlink" title="3.3.2    常见操作"></a>3.3.2    常见操作</h3><h4 id="3-3-2-1-创建工程，引入坐标"><a href="#3-3-2-1-创建工程，引入坐标" class="headerlink" title="3.3.2.1    创建工程，引入坐标"></a>3.3.2.1    创建工程，引入坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--elasticsearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-2-操作测试"><a href="#3-3-2-2-操作测试" class="headerlink" title="3.3.2.2    操作测试"></a>3.3.2.2    操作测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TransportClient client = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置集群名称</span></span><br><span class="line">            Settings settings = Settings.builder().put(<span class="string">"cluster.name"</span>, <span class="string">"wgy-es"</span>).build();<span class="comment">// 集群名</span></span><br><span class="line">            client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">                    .addTransportAddress(</span><br><span class="line">                            <span class="keyword">new</span> TransportAddress(</span><br><span class="line">                                    InetAddress.getByName(<span class="string">"192.168.142.128"</span>), <span class="number">9700</span></span><br><span class="line">                            )</span><br><span class="line">                    );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"初始化失败...."</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        client.admin().indices().prepareCreate(<span class="string">"test"</span>).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引,可以一次性删除多个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        client.admin().indices().prepareDelete(<span class="string">"test"</span>, <span class="string">"springData"</span>).get();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateMappping</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        XContentBuilder builder = XContentFactory.jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(<span class="string">"article"</span>)</span><br><span class="line">                .startObject(<span class="string">"properties"</span>)</span><br><span class="line"></span><br><span class="line">                .startObject(<span class="string">"title"</span>)</span><br><span class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</span><br><span class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</span><br><span class="line">                .field(<span class="string">"analyzer"</span>, <span class="string">"ik_smart"</span>)</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .startObject(<span class="string">"content"</span>)</span><br><span class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</span><br><span class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</span><br><span class="line">                .field(<span class="string">"analyzer"</span>, <span class="string">"ik_smart"</span>)</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .startObject(<span class="string">"hits"</span>)</span><br><span class="line">                .field(<span class="string">"type"</span>, <span class="string">"long"</span>)</span><br><span class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建映射(表结构)</span></span><br><span class="line">        PutMappingRequest mapping = Requests.putMappingRequest(<span class="string">"test"</span>)<span class="comment">//指定索引(库)</span></span><br><span class="line">                .type(<span class="string">"article"</span>)<span class="comment">//指定类型(表)</span></span><br><span class="line">                .source(builder);</span><br><span class="line">        client.admin().indices().putMapping(mapping).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateDocuments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装数据</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"title"</span>, <span class="string">"程序员"</span>);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"程序员其实很低调"</span>);</span><br><span class="line">        map.put(<span class="string">"hits"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文档</span></span><br><span class="line">        client.prepareIndex(<span class="string">"test"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>).setSource(map).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateDocuments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装数据</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"title"</span>, <span class="string">"程序员2"</span>);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"程序员很低调2"</span>);</span><br><span class="line">        map.put(<span class="string">"hits"</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改文档</span></span><br><span class="line">        client.prepareUpdate(<span class="string">"test"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>).setDoc(map).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteDocuments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.prepareDelete(<span class="string">"test"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 设置index type  查询条件,返回一个查询结果对象</span></span><br><span class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"test"</span>).setTypes(<span class="string">"article"</span>)<span class="comment">//设置index和type,允许传入多个</span></span><br><span class="line">                .setQuery(QueryBuilders.matchAllQuery())<span class="comment">//设置查询条件 :查询所有</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 检索的命中对象</span></span><br><span class="line">        SearchHits hits = searchResponse.getHits();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取查询结果数</span></span><br><span class="line">        System.out.println(<span class="string">"总共查询到"</span> + hits.getTotalHits() + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取结果</span></span><br><span class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            SearchHit searchHit = iterator.next();</span><br><span class="line">            System.out.println(searchHit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据title查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//QueryBuilders.termQuery("属性","值[分词之后存在]")</span></span><br><span class="line">        <span class="comment">//1 设置index type  查询条件,返回一个查询结果对象</span></span><br><span class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"test"</span>).setTypes(<span class="string">"article"</span>)<span class="comment">//设置index和type,允许传入多个</span></span><br><span class="line">                .setQuery(QueryBuilders.termQuery(<span class="string">"title"</span>, <span class="string">"员"</span>))<span class="comment">//设置查询条件 :根据title查询</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 检索的命中对象</span></span><br><span class="line">        SearchHits hits = searchResponse.getHits();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取查询结果数</span></span><br><span class="line">        System.out.println(<span class="string">"总共查询到"</span> + hits.getTotalHits() + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取结果</span></span><br><span class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            SearchHit searchHit = iterator.next();</span><br><span class="line">            System.out.println(searchHit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页和排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 设置index type  查询条件,返回一个查询结果对象</span></span><br><span class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"test"</span>).setTypes(<span class="string">"article"</span>)<span class="comment">//设置index和type,允许传入多个</span></span><br><span class="line">                .setQuery(QueryBuilders.matchAllQuery())<span class="comment">//设置查询条件 :查询所有</span></span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">20</span>)<span class="comment">//设置分页的条件 .setFrom(从第几行开始查).setSize(查多少行)</span></span><br><span class="line">                .addSort(<span class="string">"hits"</span>, SortOrder.ASC)<span class="comment">//设置分页条件 .addSort(属性, 排序规则)</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 检索的命中对象</span></span><br><span class="line">        SearchHits hits = searchResponse.getHits();<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取查询结果数</span></span><br><span class="line">        System.out.println(<span class="string">"总共查询到"</span> + hits.getTotalHits() + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取结果</span></span><br><span class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            SearchHit searchHit = iterator.next();</span><br><span class="line">            System.out.println(searchHit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-SpringData-ElasticSearch-入门案例"><a href="#3-4-SpringData-ElasticSearch-入门案例" class="headerlink" title="3.4    SpringData ElasticSearch 入门案例"></a>3.4    SpringData ElasticSearch 入门案例</h2><h3 id="3-4-1-目标"><a href="#3-4-1-目标" class="headerlink" title="3.4.1    目标"></a>3.4.1    目标</h3><p>通过SpringData ES技术向ElasticSearch数据库存储一条数据</p><h3 id="3-4-2-创建工程，引入坐标"><a href="#3-4-2-创建工程，引入坐标" class="headerlink" title="3.4.2    创建工程，引入坐标"></a>3.4.2    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--elasticsearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring-data-elasticsearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-3-添加配置文件"><a href="#3-4-3-添加配置文件" class="headerlink" title="3.4.3    添加配置文件"></a>3.4.3    添加配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:elasticsearch</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描dao包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:transport-client</span> <span class="attr">id</span>=<span class="string">"client"</span> <span class="attr">cluster-nodes</span>=<span class="string">"192.168.142.128:9700"</span> <span class="attr">cluster-name</span>=<span class="string">"wgy-es"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置搜索模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"elasticsearchTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.elasticsearch.core.ElasticsearchTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"client"</span> <span class="attr">ref</span>=<span class="string">"client"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4-创建实体类"><a href="#3-4-4-创建实体类" class="headerlink" title="3.4.4    创建实体类"></a>3.4.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//indexName指定索引名称   type  指定类型名称</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"test-sd"</span>, type = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">false</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * index：是否设置分词  默认是true</span></span><br><span class="line"><span class="comment">     * analyzer：存储时使用的分词器</span></span><br><span class="line"><span class="comment">     * searchAnalyze：搜索时使用的分词器</span></span><br><span class="line"><span class="comment">     * store：是否存储 默认是false</span></span><br><span class="line"><span class="comment">     * type: 数据类型 默认值是FieldType.Auto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field</span>(analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field</span>(analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line">    <span class="meta">@Field</span>(store = <span class="keyword">true</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer hits;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-5-自定义-dao接口"><a href="#3-4-5-自定义-dao接口" class="headerlink" title="3.4.5    自定义 dao接口"></a>3.4.5    自定义 dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * 自定义的接口需要继承ElasticsearchRepository&lt;实体类型,主键类型&gt;  基本的crud 分页</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-6-测试"><a href="#3-4-6-测试" class="headerlink" title="3.4.6    测试"></a>3.4.6    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过SpringData ES技术向ElasticSearch数据库存储一条数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引</span></span><br><span class="line">        template.createIndex(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建映射</span></span><br><span class="line">        template.putMapping(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文档</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setTitle(<span class="string">"sd-程序员"</span>);</span><br><span class="line">        article.setContext(<span class="string">"sd-程序员很棒"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存文档</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-SpringData-ElasticSearch-实现CRUD操作"><a href="#3-5-SpringData-ElasticSearch-实现CRUD操作" class="headerlink" title="3.5    SpringData ElasticSearch 实现CRUD操作"></a>3.5    SpringData ElasticSearch 实现CRUD操作</h2><h3 id="3-5-1-增删改"><a href="#3-5-1-增删改" class="headerlink" title="3.5.1    增删改"></a>3.5.1    增删改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过SpringData ES技术向ElasticSearch数据库存储一条数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引</span></span><br><span class="line">        template.createIndex(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建映射</span></span><br><span class="line">        template.putMapping(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文档</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setTitle(<span class="string">"sd-程序员"</span>);</span><br><span class="line">        article.setContext(<span class="string">"sd-程序员很棒"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存文档</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断数据库中是否有你指定的id的文档,如果没有,就进行保存,如果有,就进行更新</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setTitle(<span class="string">"sd-程序员1"</span>);</span><br><span class="line">        article.setContext(<span class="string">"sd-程序员很棒1"</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据主键删除</span></span><br><span class="line">        articleDao.deleteById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-接口方法查询"><a href="#3-5-2-接口方法查询" class="headerlink" title="3.5.2    接口方法查询"></a>3.5.2    接口方法查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Article&gt; all = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : all) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Article&gt; opt = articleDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(opt.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//page代表的页码,从0开始</span></span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        Iterable&lt;Article&gt; all = articleDao.findAll(sort);</span><br><span class="line">        <span class="keyword">for</span> (Article article : all) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页+排序查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>, sort);<span class="comment">//page代表的页码,从0开始</span></span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-命名规则查询"><a href="#3-5-3-命名规则查询" class="headerlink" title="3.5.3    命名规则查询"></a>3.5.3    命名规则查询</h3><p>es的命名规则跟jpa基本一致，常见的如下：</p><table><thead><tr><th>关键字</th><th>命名规则</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>findByField1AndField2</td><td>根据Field1和Field2获得数据</td><td>findByTitleAndContent</td></tr><tr><td>or</td><td>findByField1OrField2</td><td>根据Field1或Field2获得数据</td><td>findByTitleOrContent</td></tr><tr><td>is</td><td>findByField</td><td>根据Field获得数据</td><td>findByTitle</td></tr><tr><td>not</td><td>findByFieldNot</td><td>根据Field获得补集数据</td><td>findByTitleNot</td></tr><tr><td>between</td><td>findByFieldBetween</td><td>获得指定范围的数据</td><td>findByPriceBetween</td></tr><tr><td>lessThanEqual</td><td>findByFieldLessThan</td><td>获得小于等于指定值的数据</td><td>findBy</td></tr></tbody></table><p>下面,我们在dao接口中按照规则进行自定义查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * 自定义的接口需要继承ElasticsearchRepository&lt;实体类型,主键类型&gt;  基本的crud 分页</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleOrContext</span><span class="params">(String title, String context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询(含分页)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleOrContext</span><span class="params">(String title, String context, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitle(<span class="string">"员"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleOrContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleOrContext(<span class="string">"程序员"</span>, <span class="string">"程序员"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询(含分页)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleOrContextWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>, sort);<span class="comment">//page代表的页码,从0开始</span></span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleOrContext(<span class="string">"程序员"</span>, <span class="string">"程序员"</span>, pageable);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-SpringData-MongoDB"><a href="#4-SpringData-MongoDB" class="headerlink" title="4.    SpringData MongoDB"></a>4.    SpringData MongoDB</h1><h2 id="4-1-SpringData-MongoDB-简介"><a href="#4-1-SpringData-MongoDB-简介" class="headerlink" title="4.1    SpringData MongoDB 简介"></a>4.1    SpringData MongoDB 简介</h2><p>MongoDB 是一个跨平台的，面向文档的数据库，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的一种格式，因此可以存储比较复杂的数据类型。</p><p>MongoDB主要由文档(document)、集合(collection)、数据库(database)三部分组成</p><ul><li>文档（ document）就相当于关系数据库中的一行记录</li><li>多个文档组成一个集合（ collection），相当于关系数据库的表</li><li>多个集合组织在一起，就是数据库（ database），一个 MongoDB 实例支持多个数据库</li></ul><p><img src="https://img-blog.csdnimg.cn/20200927192241933.png" alt="image-20200927183737768"></p><p>SpringData MongoDB是SpringData技术封装了mongodb-driver技术之后的产物,它可以用更加简单的方式操作MongoDB。</p><h2 id="4-2-MongoDB-环境搭建"><a href="#4-2-MongoDB-环境搭建" class="headerlink" title="4.2    MongoDB 环境搭建"></a>4.2    MongoDB 环境搭建</h2><h3 id="4-2-1-解压"><a href="#4-2-1-解压" class="headerlink" title="4.2.1    解压"></a>4.2.1    解压</h3><p>上传文件到服务器，然后将其解压到/usr/local下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-rhel70-4.0.10.tgz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure><h3 id="4-2-2-创建需要的目录"><a href="#4-2-2-创建需要的目录" class="headerlink" title="4.2.2    创建需要的目录"></a>4.2.2    创建需要的目录</h3><p>进入软件的安装目录下,创建数据存储和日志存储目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb-linux-x86_64-rhel70-4.0.10/</span><br><span class="line"></span><br><span class="line">mkdir data</span><br><span class="line">touch <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-创建配置文件"><a href="#4-2-3-创建配置文件" class="headerlink" title="4.2.3    创建配置文件"></a>4.2.3    创建配置文件</h3><p>进入bin目录,创建mongodb的配置文件mongo.conf ,文件内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/usr/local/mongodb-linux-x86_64-rhel70-4.0.10/data</span><br><span class="line">logpath=/usr/local/mongodb-linux-x86_64-rhel70-4.0.10/log</span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">port=27017</span><br><span class="line">fork=true</span><br></pre></td></tr></table></figure><h3 id="4-2-4-启动-mongodb"><a href="#4-2-4-启动-mongodb" class="headerlink" title="4.2.4    启动 mongodb"></a>4.2.4    启动 mongodb</h3><p>使用./mongod -f mongo.conf 启动服务,见到类似如下提示,证明启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod -f mongo.conf</span><br></pre></td></tr></table></figure><h2 id="4-3-SpringData-MongoDB-入门案例"><a href="#4-3-SpringData-MongoDB-入门案例" class="headerlink" title="4.3    SpringData MongoDB 入门案例"></a>4.3    SpringData MongoDB 入门案例</h2><h3 id="4-3-1-目标"><a href="#4-3-1-目标" class="headerlink" title="4.3.1    目标"></a>4.3.1    目标</h3><p>通过SpringData技术向Mongodb数据库存储一条数据</p><h3 id="4-3-2-创建工程，引入坐标"><a href="#4-3-2-创建工程，引入坐标" class="headerlink" title="4.3.2    创建工程，引入坐标"></a>4.3.2    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-data-mongodb--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-创建配置文件"><a href="#4-3-3-创建配置文件" class="headerlink" title="4.3.3    创建配置文件"></a>4.3.3    创建配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mongo</span>=<span class="string">"http://www.springframework.org/schema/data/mongo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/mongo</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/mongo/spring-mongo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring连接mongodb数据库的配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        host="192.168.142.128" 指定mongodb服务所在主机地址</span></span><br><span class="line"><span class="comment">        port="27017"  指定mongodb服务所在主机端口号</span></span><br><span class="line"><span class="comment">        dbname="springdata"  数据名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span> <span class="attr">port</span>=<span class="string">"27017"</span> <span class="attr">id</span>=<span class="string">"mongo"</span> <span class="attr">credentials</span>=<span class="string">"bobo:123456@springdata"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mongo:client-options</span> <span class="attr">write-concern</span>=<span class="string">"SAFE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">id</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">dbname</span>=<span class="string">"springdata"</span> <span class="attr">mongo-ref</span>=<span class="string">"mongo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mongoTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.mongodb.core.MongoTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">ref</span>=<span class="string">"mongoDbFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-创建实体类"><a href="#4-3-4-创建实体类" class="headerlink" title="4.3.4    创建实体类"></a>4.3.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//使用@Document建立的是实体类和collection的关系</span></span><br><span class="line"><span class="meta">@Document</span>(<span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//用来标识主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用@Field建立实体类中属性跟collection中字段的映射关系,如果省略,代表两个名称一致</span></span><br><span class="line">    <span class="comment">//@Field</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Integer hits;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-自定义-dao接口"><a href="#4-3-5-自定义-dao接口" class="headerlink" title="4.3.5    自定义 dao接口"></a>4.3.5    自定义 dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-6-测试"><a href="#4-3-6-测试" class="headerlink" title="4.3.6    测试"></a>4.3.6    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setName(<span class="string">"程序员"</span>);</span><br><span class="line">        article.setContent(<span class="string">"程序员很低调"</span>);</span><br><span class="line">        article.setHits(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-SpringData-MongoDB-实现CRUD操作"><a href="#4-4-SpringData-MongoDB-实现CRUD操作" class="headerlink" title="4.4    SpringData MongoDB 实现CRUD操作"></a>4.4    SpringData MongoDB 实现CRUD操作</h2><h3 id="4-4-1-增删改"><a href="#4-4-1-增删改" class="headerlink" title="4.4.1    增删改"></a>4.4.1    增删改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setName(<span class="string">"程序员"</span>);</span><br><span class="line">        article.setContent(<span class="string">"程序员很低调"</span>);</span><br><span class="line">        article.setHits(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setName(<span class="string">"程序员2"</span>);</span><br><span class="line">        article.setContent(<span class="string">"程序员很低调2"</span>);</span><br><span class="line">        article.setHits(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        articleDao.deleteById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-简单查询"><a href="#4-4-2-简单查询" class="headerlink" title="4.4.2    简单查询"></a>4.4.2    简单查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Article&gt; opt = articleDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(opt.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页和排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>, sort);</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-命名规则查询"><a href="#4-4-3-命名规则查询" class="headerlink" title="4.4.3    命名规则查询"></a>4.4.3    命名规则查询</h3><p>定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据点击量查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByHitsGreaterThan</span><span class="params">(Integer hits)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByNameLike(<span class="string">"程序员1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据点击量查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByHitsGreaterThan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByHitsGreaterThan(<span class="number">105</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-综合案例"><a href="#5-综合案例" class="headerlink" title="5.    综合案例"></a>5.    综合案例</h1><h2 id="5-1-案例说明及思路分析"><a href="#5-1-案例说明及思路分析" class="headerlink" title="5.1    案例说明及思路分析"></a>5.1    案例说明及思路分析</h2><h3 id="5-1-1-案例目标"><a href="#5-1-1-案例目标" class="headerlink" title="5.1.1    案例目标"></a>5.1.1    案例目标</h3><p>通过一个【文章】案例来综合使用SpringData技术，案例中将涉及到jpa、redis、es、mongo的使用，可以很好的将前面章节所学知识点加以练习巩固。</p><h3 id="5-1-2-涉及技术分析"><a href="#5-1-2-涉及技术分析" class="headerlink" title="5.1.2    涉及技术分析"></a>5.1.2    涉及技术分析</h3><p>案例以常见网站中的文章管理和查询为背景，涉及到文章内容、最新文章列表、文章评论、文章检索等功能，下面具体分析：</p><ul><li>文章内容分为文章基础和文章详情两部分，分别存储在 mysql的文章表和文章详情表中</li><li>最新文章列表展示的是热点数据，访问量比较大，采用 redis存储</li><li>文章评论数据量大，数据价值较低，存放在 mongodb中</li><li>全文检索使用 ES实现，本次直接向ES中插入测试数据测试，后期可以考虑使用logstash从数据库同步</li></ul><p><img src="https://img-blog.csdnimg.cn/20200927192306350.png" alt="image-20200927184920622"></p><h3 id="5-1-3-功能分析"><a href="#5-1-3-功能分析" class="headerlink" title="5.1.3    功能分析"></a>5.1.3    功能分析</h3><h4 id="5-1-3-1-数据后台管理"><a href="#5-1-3-1-数据后台管理" class="headerlink" title="5.1.3.1    数据后台管理"></a>5.1.3.1    数据后台管理</h4><table><thead><tr><th>功能</th><th>mysql</th><th>redis</th><th>mongodb</th><th>ES</th></tr></thead><tbody><tr><td>添加文章</td><td>添加数据</td><td>清空缓存</td><td></td><td>添加数据</td></tr><tr><td>修改文章</td><td>修改数据</td><td>清空缓存</td><td></td><td>修改数据</td></tr><tr><td>删除文章</td><td>删除数据</td><td>清空缓存</td><td>删除文章评论</td><td>删除数据</td></tr><tr><td>添加评论</td><td></td><td></td><td>添加文章评论</td><td></td></tr><tr><td>删除评论</td><td></td><td></td><td>删除文章评论</td><td></td></tr></tbody></table><h4 id="5-1-3-2-数据查询功能"><a href="#5-1-3-2-数据查询功能" class="headerlink" title="5.1.3.2    数据查询功能"></a>5.1.3.2    数据查询功能</h4><table><thead><tr><th>功能</th><th>mysql</th><th>redis</th><th>mongodb</th><th>ES</th></tr></thead><tbody><tr><td>查询最新文章</td><td>当redis中不存在时来数据库查</td><td>先从redis查，没有再去数据库查，查到以后放入redis</td><td></td><td></td></tr><tr><td>查询文章评论</td><td></td><td></td><td>根据文章标识从mongo中获取评论数据</td><td></td></tr><tr><td>文章检索</td><td></td><td></td><td></td><td>使用es实现文章检索功能</td></tr></tbody></table><h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2    代码实现"></a>5.2    代码实现</h2><h3 id="5-2-1-项目结构说明"><a href="#5-2-1-项目结构说明" class="headerlink" title="5.2.1    项目结构说明"></a>5.2.1    项目结构说明</h3><p>本次案例采用Spring为核心骨架，使用SpringData实现持久层操作，采用junit进行功能测试，完整项目结构如下图所示</p><p><img src="https://img-blog.csdnimg.cn/20200927192320563.png" alt="image-20200927185454626"></p><h3 id="5-2-2-创建工程，引入坐标"><a href="#5-2-2-创建工程，引入坐标" class="headerlink" title="5.2.2    创建工程，引入坐标"></a>5.2.2    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring框架相关jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--es--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mongo--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-加入配置文件"><a href="#5-2-3-加入配置文件" class="headerlink" title="5.2.3    加入配置文件"></a>5.2.3    加入配置文件</h3><h4 id="5-2-3-1-jpa-配置文件"><a href="#5-2-3-1-jpa-配置文件" class="headerlink" title="5.2.3.1    jpa 配置文件"></a>5.2.3.1    jpa 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///case"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.EntityManagerFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定实体类所在的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定jpa的实现提供者 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistenceProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.hibernate.jpa.HibernatePersistenceProvider"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JPA供应商适配器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否生成DDL语句   是否自动建表 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"generateDdl"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库厂商名称 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"MYSQL"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databasePlatform"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQLDialect"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否显示SQL --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"showSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合spring data jpa --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring 通过代理的方式为dao接口提供实现类，需要指明为哪些接口去产生代理类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.dao"</span> <span class="attr">transaction-manager-ref</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.txAdvice --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5.aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-2-redis-配置文件"><a href="#5-2-3-2-redis-配置文件" class="headerlink" title="5.2.3.2    redis 配置文件"></a>5.2.3.2    redis 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- redis 相关配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大空闲数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"300"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接时的最大等待毫秒数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在提取一个jedis实例时，是否提前进行验证操作；如果为true，则得到的jedis实例均是可用的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:host-name</span>=<span class="string">"192.168.142.128"</span> <span class="attr">p:port</span>=<span class="string">"6379"</span> <span class="attr">p:pool-config-ref</span>=<span class="string">"poolConfig"</span> <span class="attr">p:password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--redisTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定数据序列化器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-3-es-配置文件"><a href="#5-2-3-3-es-配置文件" class="headerlink" title="5.2.3.3    es 配置文件"></a>5.2.3.3    es 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:elasticsearch</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描dao包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.es"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:transport-client</span> <span class="attr">id</span>=<span class="string">"client"</span> <span class="attr">cluster-nodes</span>=<span class="string">"192.168.142.128:9700"</span> <span class="attr">cluster-name</span>=<span class="string">"wgy-es"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置搜索模板  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"elasticsearchTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.elasticsearch.core.ElasticsearchTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"client"</span> <span class="attr">ref</span>=<span class="string">"client"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-4-mongo-配置文件"><a href="#5-2-3-4-mongo-配置文件" class="headerlink" title="5.2.3.4    mongo 配置文件"></a>5.2.3.4    mongo 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mongo</span>=<span class="string">"http://www.springframework.org/schema/data/mongo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://www.springframework.org/schema/data/mongo</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/mongo/spring-mongo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.mongo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring连接mongodb数据库的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span> <span class="attr">port</span>=<span class="string">"27017"</span> <span class="attr">id</span>=<span class="string">"mongo"</span> <span class="attr">credentials</span>=<span class="string">"bobo:123456@case"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mongo:client-options</span> <span class="attr">write-concern</span>=<span class="string">"SAFE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">id</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">dbname</span>=<span class="string">"case"</span> <span class="attr">mongo-ref</span>=<span class="string">"mongo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mongoTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.mongodb.core.MongoTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">ref</span>=<span class="string">"mongoDbFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-5-汇总配置文件"><a href="#5-2-3-5-汇总配置文件" class="headerlink" title="5.2.3.5    汇总配置文件"></a>5.2.3.5    汇总配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--汇总其它配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-jpa.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-redis.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-es.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-mongo.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-4-创建实体类"><a href="#5-2-4-创建实体类" class="headerlink" title="5.2.4    创建实体类"></a>5.2.4    创建实体类</h3><h4 id="5-2-4-1-Article（对应数据库文章表）"><a href="#5-2-4-1-Article（对应数据库文章表）" class="headerlink" title="5.2.4.1    Article（对应数据库文章表）"></a>5.2.4.1    Article（对应数据库文章表）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//文章标题</span></span><br><span class="line">    <span class="keyword">private</span> String author;<span class="comment">//文章作者</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立从Article到ArticleData的一对一关系</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-2-ArticleData-（对应数据库文章表）"><a href="#5-2-4-2-ArticleData-（对应数据库文章表）" class="headerlink" title="5.2.4.2    ArticleData （对应数据库文章表）"></a>5.2.4.2    ArticleData （对应数据库文章表）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章详情实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article_data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleData</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//文章内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立从ArticleData到Article的一对一关系</span></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="comment">//@JoinColumn(name=当前表的外键字段名称,referencedColumnName 指向对方表的主键)</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"articleId"</span>, referencedColumnName = <span class="string">"aid"</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-3-EsArticle-对应ES中的文章"><a href="#5-2-4-3-EsArticle-对应ES中的文章" class="headerlink" title="5.2.4.3    EsArticle ( 对应ES中的文章)"></a>5.2.4.3    EsArticle ( 对应ES中的文章)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"case"</span>, type = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsArticle</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键标识</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_max_word"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//标题</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_max_word"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//内容</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String author;<span class="comment">//作者</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Date)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-4-Comment-对应mongodb中的评论"><a href="#5-2-4-4-Comment-对应mongodb中的评论" class="headerlink" title="5.2.4.4    Comment ( 对应mongodb中的评论)"></a>5.2.4.4    Comment ( 对应mongodb中的评论)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"comment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String cid;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer aid;<span class="comment">//文章标识</span></span><br><span class="line">    <span class="keyword">private</span> String comment;<span class="comment">//评论</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;<span class="comment">//评论者昵称</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-5-创建-dao层接口"><a href="#5-2-5-创建-dao层接口" class="headerlink" title="5.2.5    创建 dao层接口"></a>5.2.5    创建 dao层接口</h3><h4 id="5-2-5-1-ArticleDao"><a href="#5-2-5-1-ArticleDao" class="headerlink" title="5.2.5.1    ArticleDao"></a>5.2.5.1    ArticleDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-2-ArticleDataDao"><a href="#5-2-5-2-ArticleDataDao" class="headerlink" title="5.2.5.2    ArticleDataDao"></a>5.2.5.2    ArticleDataDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章详情dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDataDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">ArticleData</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid修改ArticleData中的content</span></span><br><span class="line"><span class="comment">     * Jpa规定如果想使用JPQL进行更新或者删除操作,必须要使用<span class="doctag">@Modifying</span>显示声明</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"update ArticleData ad set ad.content = ?1 where ad.article.aid = ?2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateContentByAid</span><span class="params">(String content, Integer aid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid删除ArticleData中的文章详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"delete from ArticleData ad where ad.article.aid = ?1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-3-EsArticleDao"><a href="#5-2-5-3-EsArticleDao" class="headerlink" title="5.2.5.3    EsArticleDao"></a>5.2.5.3    EsArticleDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es文章dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EsArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">EsArticle</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据title或者content进行查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;EsArticle&gt; <span class="title">findByTitleOrContent</span><span class="params">(String title, String content, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-4-CommentDao"><a href="#5-2-5-4-CommentDao" class="headerlink" title="5.2.5.4    CommentDao"></a>5.2.5.4    CommentDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Comment</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 命名规则查询:按照aid查询到一个文章的所有评论</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Comment&gt; <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-6-创建-service层"><a href="#5-2-6-创建-service层" class="headerlink" title="5.2.6    创建 service层"></a>5.2.6    创建 service层</h3><h4 id="5-2-6-1-ArticleService接口"><a href="#5-2-6-1-ArticleService接口" class="headerlink" title="5.2.6.1    ArticleService接口"></a>5.2.6.1    ArticleService接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> article</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> article</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新文章列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findNewArticleList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章检索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;EsArticle&gt; <span class="title">search</span><span class="params">(Integer pageNum, Integer pageSize, String keyword)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-6-2-ArticleServiceImpl-实现类"><a href="#5-2-6-2-ArticleServiceImpl-实现类" class="headerlink" title="5.2.6.2    ArticleServiceImpl 实现类"></a>5.2.6.2    ArticleServiceImpl 实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDataDao articleDataDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EsArticleDao esArticleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentDao commentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向mysql保存文章和文章详情</span></span><br><span class="line">        articleDataDao.save(article.getArticleData());</span><br><span class="line">        articleDao.save(article);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空redis缓存</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向ES中保存数据</span></span><br><span class="line">        EsArticle esArticle = <span class="keyword">new</span> EsArticle();</span><br><span class="line">        esArticle.setCreateTime(article.getCreateTime());</span><br><span class="line">        esArticle.setContent(article.getArticleData().getContent());</span><br><span class="line">        esArticle.setTitle(article.getTitle());</span><br><span class="line">        esArticle.setAuthor(article.getAuthor());</span><br><span class="line">        esArticle.setId(article.getAid());</span><br><span class="line">        esArticleDao.save(esArticle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//更新article</span></span><br><span class="line">        Article articleParam = <span class="keyword">new</span> Article();</span><br><span class="line">        articleParam.setTitle(article.getTitle());</span><br><span class="line">        articleParam.setAid(article.getAid());</span><br><span class="line">        articleParam.setAuthor(article.getAuthor());</span><br><span class="line">        articleParam.setCreateTime(article.getCreateTime());</span><br><span class="line">        articleDao.save(articleParam);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新articleData</span></span><br><span class="line">        articleDataDao.updateContentByAid(article.getArticleData().getContent(), article.getAid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空redis缓存</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向ES中保存数据</span></span><br><span class="line">        EsArticle esArticle = <span class="keyword">new</span> EsArticle();</span><br><span class="line">        esArticle.setId(article.getAid());</span><br><span class="line">        esArticle.setCreateTime(article.getCreateTime());</span><br><span class="line">        esArticle.setContent(article.getArticleData().getContent());</span><br><span class="line">        esArticle.setTitle(article.getTitle());</span><br><span class="line">        esArticle.setAuthor(article.getAuthor());</span><br><span class="line">        esArticleDao.save(esArticle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//删除articleData</span></span><br><span class="line">        articleDataDao.deleteByAid(aid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除article</span></span><br><span class="line">        articleDao.deleteById(aid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除mongodb中相关的评论</span></span><br><span class="line">        <span class="comment">//1---先根据aid查询到一个comment列表</span></span><br><span class="line">        List&lt;Comment&gt; comments = commentDao.findByAid(aid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2---删除一个评论列表</span></span><br><span class="line">        commentDao.deleteAll(comments);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空redis</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除ES中的数据</span></span><br><span class="line">        esArticleDao.deleteById(aid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findNewArticleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 先从redis中获取</span></span><br><span class="line">        String value = redisTemplate.opsForValue().get(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 如果redis中没有,去数据库中查询,查询到以后,要存入redis</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">            <span class="comment">//设置分页排序条件</span></span><br><span class="line">            Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, Sort.by(Sort.Order.desc(<span class="string">"createTime"</span>)));</span><br><span class="line">            Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line">            List&lt;Article&gt; content = page.getContent();</span><br><span class="line">            <span class="comment">//将结果转成String,存入redis</span></span><br><span class="line">            <span class="keyword">if</span> (content != <span class="keyword">null</span> &amp;&amp; content.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value = JSONObject.toJSONString(content);</span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">"articles"</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3 将结果转成List返回</span></span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseArray(value, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;EsArticle&gt; <span class="title">search</span><span class="params">(Integer pageNum, Integer pageSize, String keyword)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(pageNum, pageSize);</span><br><span class="line">        <span class="keyword">return</span> esArticleDao.findByTitleOrContent(keyword, keyword, pageable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-6-3-CommentService-接口"><a href="#5-2-6-3-CommentService-接口" class="headerlink" title="5.2.6.3    CommentService 接口"></a>5.2.6.3    CommentService 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveComment</span><span class="params">(Comment comment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByCid</span><span class="params">(String cid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文章标识查询评论数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Comment&gt; <span class="title">findCommentsByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-6-4-CommentServiceImpl-实现类"><a href="#5-2-6-4-CommentServiceImpl-实现类" class="headerlink" title="5.2.6.4    CommentServiceImpl 实现类"></a>5.2.6.4    CommentServiceImpl 实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentServiceImpl</span> <span class="keyword">implements</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentDao commentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveComment</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">        commentDao.save(comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByCid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">        commentDao.deleteById(cid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Comment&gt; <span class="title">findCommentsByAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commentDao.findByAid(aid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-7-测试"><a href="#5-2-7-测试" class="headerlink" title="5.2.7    测试"></a>5.2.7    测试</h3><h4 id="5-2-7-1-后台管理功能测试"><a href="#5-2-7-1-后台管理功能测试" class="headerlink" title="5.2.7.1    后台管理功能测试"></a>5.2.7.1    后台管理功能测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测后台管理功能测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManageTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备测试数据</span></span><br><span class="line">        ArticleData articleData = <span class="keyword">new</span> ArticleData();</span><br><span class="line">        articleData.setContent(<span class="string">"1程序员专注于IT培训,Java培训,人工智能培训,Python培训,大数据培训,区\n"</span> +</span><br><span class="line">                <span class="string">"块链培训,UI设计培训,PHP培训,Web前端培训,软件测试培训,产品经理培训，并提供Java培训,大数据培训,区块链培训,UI\n"</span> +</span><br><span class="line">                <span class="string">"设计培训,PHP培训,软件测试培训,产品经理培训等服务。"</span>);</span><br><span class="line"></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"1程序员介绍"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"1程序员"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两者关系</span></span><br><span class="line">        article.setArticleData(articleData);</span><br><span class="line">        articleData.setArticle(article);</span><br><span class="line"></span><br><span class="line">        articleService.saveArticle(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备测试数据</span></span><br><span class="line">        ArticleData articleData = <span class="keyword">new</span> ArticleData();</span><br><span class="line">        articleData.setContent(<span class="string">"2程序员专注于IT培训,Java培训,人工智能培训,Python培训,大数据培训,区\n"</span> +</span><br><span class="line">                <span class="string">"块链培训,UI设计培训,PHP培训,Web前端培训,软件测试培训,产品经理培训，并提供Java培训,大数据培训,区块链培训,UI\n"</span> +</span><br><span class="line">                <span class="string">"设计培训,PHP培训,软件测试培训,产品经理培训等服务。"</span>);</span><br><span class="line"></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setAid(<span class="number">6</span>);</span><br><span class="line">        article.setTitle(<span class="string">"6程序员介绍"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"6程序员"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        article.setArticleData(articleData);</span><br><span class="line"></span><br><span class="line">        articleService.updateArticle(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        articleService.deleteByAid(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Comment comment = <span class="keyword">new</span> Comment();</span><br><span class="line">        comment.setCid(UUID.randomUUID().toString());</span><br><span class="line">        comment.setAid(<span class="number">3</span>);</span><br><span class="line">        comment.setComment(<span class="string">"2程序员真棒!!!"</span>);</span><br><span class="line">        comment.setNickname(<span class="string">"2程序员"</span>);</span><br><span class="line">        commentService.saveComment(comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        commentService.deleteByCid(<span class="string">"3974c94a-384e-4b1f-9eb2-64d72896054d"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-7-2-前台查看测试"><a href="#5-2-7-2-前台查看测试" class="headerlink" title="5.2.7.2    前台查看测试"></a>5.2.7.2    前台查看测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台查看测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新文章列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindNewArticleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; list = articleService.findNewArticleList();</span><br><span class="line">        <span class="keyword">for</span> (Article article : list) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文章获取评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCommentsByAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Comment&gt; comments = commentService.findCommentsByAid(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (Comment comment : comments) &#123;</span><br><span class="line">            System.out.println(comment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章全文检索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;EsArticle&gt; esArticles = articleService.search(<span class="number">0</span>, <span class="number">10</span>, <span class="string">"程序员"</span>);</span><br><span class="line">        <span class="keyword">for</span> (EsArticle esArticle : esArticles) &#123;</span><br><span class="line">            System.out.println(esArticle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringData-Redis&quot;&gt;&lt;a href=&quot;#1-SpringData-Redis&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringData Redis&quot;&gt;&lt;/a&gt;1.    SpringData Redis&lt;/h1&gt;&lt;h2 id=&quot;1-1-SpringData-Redis-简介&quot;&gt;&lt;a href=&quot;#1-1-SpringData-Redis-简介&quot; class=&quot;headerlink&quot; title=&quot;1.1    SpringData Redis 简介&quot;&gt;&lt;/a&gt;1.1    SpringData Redis 简介&lt;/h2&gt;&lt;p&gt;Redis是一个基于内存的数据结构存储系统，它可以用作数据库或者缓存。它支持多种类型的数据结构，这些数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和Zset（有序集合）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MySQL" scheme="https://wgy1993.gitee.io/tags/MySQL/"/>
    
      <category term="Redis" scheme="https://wgy1993.gitee.io/tags/Redis/"/>
    
      <category term="MongoDB" scheme="https://wgy1993.gitee.io/tags/MongoDB/"/>
    
      <category term="SpringData" scheme="https://wgy1993.gitee.io/tags/SpringData/"/>
    
      <category term="Elasticsearch" scheme="https://wgy1993.gitee.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>SpringData(一)</title>
    <link href="https://wgy1993.gitee.io/archives/a2f2c444.html"/>
    <id>https://wgy1993.gitee.io/archives/a2f2c444.html</id>
    <published>2020-09-23T14:19:01.000Z</published>
    <updated>2020-09-26T14:24:48.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringData概述"><a href="#1-SpringData概述" class="headerlink" title="1.    SpringData概述"></a>1.    SpringData概述</h1><h2 id="1-1-持久层开发的问题"><a href="#1-1-持久层开发的问题" class="headerlink" title="1.1    持久层开发的问题"></a>1.1    持久层开发的问题</h2><p>随着互联网技术的发展，现在的企业开发中用到的用于数据存储的产品，不再仅仅是关系型数据库，而是要根据场景需要选择不同的存储技术，比如用于缓存热点数据的redis，用于存储文档数据的mongodb，用于支持强大搜索功能的elasticsearch等等。</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200926212823408.png" alt="image-20200926180111152"></p><p>在Java中，对于上面所说的产品都提供了优秀的访问技术。比如针对关系型数据库的mybatis、jpa等技术，针对于redis的jedis技术等等….. 这些技术虽然可以很好的针对各个存储产品进行访问操作，但同时也带来了新的问题，那就是不同的持久层技术的API是不一样的。</p><p>这样一来，开发人员就必须同时掌握多种数据访问技术，这无疑增加了开发成本。那么我们会想，有没有这样一种技术，它可以使用一套API支持各个不同的存储的访问呢？就在这样的需求下，SpringData产生了。</p><p><img src="https://img-blog.csdnimg.cn/20200926212910375.png" alt="image-20200926180139065"></p><h2 id="1-2-SpringData-简介"><a href="#1-2-SpringData-简介" class="headerlink" title="1.2    SpringData 简介"></a>1.2    SpringData 简介</h2><h3 id="1-2-1-什么是SpringData"><a href="#1-2-1-什么是SpringData" class="headerlink" title="1.2.1    什么是SpringData"></a>1.2.1    什么是SpringData</h3><p>SpringData是一个用来简化dao层开发的框架。它在保证了各个底层存储特性的同时，提供了一套统一的数据访问API。它可以很好的支持常用的关系型数据库和非关系型数据库。</p><p>使用SpringData作为dao层开发技术，将大大简化代码量，而且其API比各个技术的原生API更加简单易用。</p><h3 id="1-2-2-SpringData的主要模块"><a href="#1-2-2-SpringData的主要模块" class="headerlink" title="1.2.2    SpringData的主要模块"></a>1.2.2    SpringData的主要模块</h3><p>SpringData支持的持久层技术非常多，我们只介绍几个常见的：</p><ul><li>Spring Data common SpringData 的核心模块，定义了SpringData的核心功能</li><li>Spring Data JDBC 对JDBC的Spring Data存储库支持</li><li>Spring Data JPA 对JPA的Spring Data存储库支持</li><li>Spring Data MongoDB 对MongoDB的基于Spring对象文档的存储库支持</li><li>Spring Data Redis 封装Jedis技术，对redis实现访问操作</li><li>Spring Data Elasticsearch 对Elasticsearch实现访问操作</li></ul><h1 id="2-JPA回顾"><a href="#2-JPA回顾" class="headerlink" title="2.    JPA回顾"></a>2.    JPA回顾</h1><h2 id="2-1-JPA-基础"><a href="#2-1-JPA-基础" class="headerlink" title="2.1    JPA 基础"></a>2.1    JPA 基础</h2><p>Hibernate 是一个全自动的ORM框架，是对 JDBC技术的封装。它在实体类和数据库表之间建立了映射关系，使得程序员可以使用面向对象编程思维来操纵数据库，而Hibernate会自动给我们生成 SQL语句。</p><p>JPA 的全称是 Java Persistence API，即 Java 持久化 API，是 SUN 公司推出的一套基于 ORM 的规范，注意不是 ORM 框架——因为 JPA 并未提供 ORM 实现，它只是提供了一些编程的 API 接口。</p><p><img src="https://img-blog.csdnimg.cn/20200926212927694.png" alt="image-20200926180913761"></p><h2 id="2-2-JPA-实战"><a href="#2-2-JPA-实战" class="headerlink" title="2.2    JPA 实战"></a>2.2    JPA 实战</h2><h3 id="2-2-1-目标"><a href="#2-2-1-目标" class="headerlink" title="2.2.1    目标"></a>2.2.1    目标</h3><p>搭建Jpa环境，并实现一条数据的增删改查。</p><h3 id="2-2-2-准备数据库环境"><a href="#2-2-2-准备数据库环境" class="headerlink" title="2.2.2    准备数据库环境"></a>2.2.2    准备数据库环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--准备数据库，创建一张文章表备用</span><br><span class="line">CREATE TABLE &#96;article&#96; (</span><br><span class="line">    &#96;aid&#96; int(11) NOT NULL auto_increment COMMENT &#39;主键&#39;,</span><br><span class="line">    &#96;author&#96; varchar(255) default NULL COMMENT &#39;作者&#39;,</span><br><span class="line">    &#96;createTime&#96; datetime default NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">    &#96;title&#96; varchar(255) default NULL COMMENT &#39;标题&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;aid&#96;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-2-3-创建-java工程，导入坐标"><a href="#2-2-3-创建-java工程，导入坐标" class="headerlink" title="2.2.3    创建 java工程，导入坐标"></a>2.2.3    创建 java工程，导入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Jpa的支撑框架hibernate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-创建实体类"><a href="#2-2-4-创建实体类" class="headerlink" title="2.2.4    创建实体类"></a>2.2.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-在实体类中配置映射关系"><a href="#2-2-5-在实体类中配置映射关系" class="headerlink" title="2.2.5    在实体类中配置映射关系"></a>2.2.5    在实体类中配置映射关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span><span class="comment">//告诉jpa这是一个实体类，需要把它跟数据库中的表做映射</span></span><br><span class="line"><span class="comment">//使用注解建立实体类和数据表之间的对应关系</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)<span class="comment">//@Table建立了实体类和数据表的关系  name指向表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//标识这是主键字段</span></span><br><span class="line">    <span class="comment">//指定主键生成策略，GenerationType.IDENTITY就是对应到mysql中的数据自增策略</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="comment">//使用@Column映射类的属性和数据表的字段关系  name指定表中的字段名</span></span><br><span class="line">    <span class="comment">//当类的属性名和数据表的字段名一致时，此注解可省略</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-加入-JPA-的核心配置文件"><a href="#2-2-6-加入-JPA-的核心配置文件" class="headerlink" title="2.2.6    加入 JPA 的核心配置文件"></a>2.2.6    加入 JPA 的核心配置文件</h3><p>在maven工程的resources路径下创建一个名为META-INF的文件夹，在文件夹下创建一个名为persistence.xml的配置文件。注意： META-INF文件夹名称不能修改,persistence.xml文件名称不能改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/persistence</span></span></span><br><span class="line"><span class="tag"><span class="string">             http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--持久化单元</span></span><br><span class="line"><span class="comment">        name 持久化单元的名称 唯一</span></span><br><span class="line"><span class="comment">        transaction-type  事务类型</span></span><br><span class="line"><span class="comment">            RESOURCE_LOCAL  本地事务</span></span><br><span class="line"><span class="comment">            JTA   分布式事务</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"springdata"</span> <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置 JPA 规范的服务提供商,当项目中只有一个JPA的实现时,此选项可省略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定实体类,此选项可省略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.wgy.domain.Article<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--跟数据库相关的信息 驱动 url 用户名 密码--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///springdata"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--jpa的核心配置中兼容hibernate的配置--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否显示SQL--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否格式化显示的SQL--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                自动建表</span></span><br><span class="line"><span class="comment">                    update  如果数据库存在数据表,就使用;不存在,就创建</span></span><br><span class="line"><span class="comment">                    create  不管数据库有没有数据表,每次SQL请求都会重新建表</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-7-测试"><a href="#2-2-7-测试" class="headerlink" title="2.2.7    测试"></a>2.2.7    测试</h3><h4 id="2-2-7-1-实现保存操作"><a href="#2-2-7-1-实现保存操作" class="headerlink" title="2.2.7.1    实现保存操作"></a>2.2.7.1    实现保存操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 创建持久化管理器工厂</span></span><br><span class="line">    String persistenceUnitName = <span class="string">"springdata"</span>;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(persistenceUnitName);</span><br><span class="line">    <span class="comment">//2 创建持久化管理器</span></span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    <span class="comment">//3 获取事务</span></span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line">    <span class="comment">//4 操作</span></span><br><span class="line">    Article article = <span class="keyword">new</span> Article();</span><br><span class="line">    article.setTitle(<span class="string">"测试文章标题"</span>);</span><br><span class="line">    article.setAuthor(<span class="string">"保存"</span>);</span><br><span class="line">    article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    entityManager.persist(article);</span><br><span class="line">    <span class="comment">//5 事务提交</span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    <span class="comment">//6 关闭资源</span></span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-7-2-实现查询操作"><a href="#2-2-7-2-实现查询操作" class="headerlink" title="2.2.7.2    实现查询操作"></a>2.2.7.2    实现查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(<span class="string">"springdata"</span>);</span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line"></span><br><span class="line">    Article article = entityManager.find(Article<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">    System.out.println(article);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-7-3-实现修改操作"><a href="#2-2-7-3-实现修改操作" class="headerlink" title="2.2.7.3    实现修改操作"></a>2.2.7.3    实现修改操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(<span class="string">"springdata"</span>);</span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line"></span><br><span class="line">    Article article = entityManager.find(Article<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    article.setAuthor(<span class="string">"保存更新"</span>);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-7-4-实现删除操作"><a href="#2-2-7-4-实现删除操作" class="headerlink" title="2.2.7.4    实现删除操作"></a>2.2.7.4    实现删除操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(<span class="string">"springdata"</span>);</span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line"></span><br><span class="line">    Article article = entityManager.find(Article<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    entityManager.remove(article);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-JPA-的重要API介绍"><a href="#2-3-JPA-的重要API介绍" class="headerlink" title="2.3    JPA 的重要API介绍"></a>2.3    JPA 的重要API介绍</h2><h3 id="2-3-1-EntityManagerFactory"><a href="#2-3-1-EntityManagerFactory" class="headerlink" title="2.3.1    EntityManagerFactory"></a>2.3.1    EntityManagerFactory</h3><p>EntityManagerFactory接口主要用来创建EntityManager实例</p><p>EntityManagerFactory是一个线程安全的对象，并且其创建极其浪费资源，所以编程的时候要保持它是单例的。</p><h3 id="2-3-2-EntityManager"><a href="#2-3-2-EntityManager" class="headerlink" title="2.3.2    EntityManager"></a>2.3.2    EntityManager</h3><p>在JPA规范中,EntityManager是操作数据库的重要API，他是线程不安全的，需要保持线程独有。</p><p>重要方法说明：</p><ul><li>getTransaction: 获取事务对象</li><li>persist：保存操作</li><li>merge：更新操作</li><li>remove：删除操作</li><li>find/getReference：根据id查询</li></ul><h1 id="3-SpringData-JPA基础"><a href="#3-SpringData-JPA基础" class="headerlink" title="3.    SpringData JPA基础"></a>3.    SpringData JPA基础</h1><h2 id="3-1-SpringData-JPA-简介"><a href="#3-1-SpringData-JPA-简介" class="headerlink" title="3.1    SpringData JPA 简介"></a>3.1    SpringData JPA 简介</h2><p>SpringData JPA是Spring Data家族的一个成员，是Spring Data对JPA封装之后的产物，目的在于简化基于JPA的数据访问技术。使用SpringData JPA技术之后，开发者只需要声明Dao层的接口，不必再写实现类或其它代码，剩下的一切交给SpringData JPA来搞定 。</p><h2 id="3-2-SpringData-JPA-快速入门"><a href="#3-2-SpringData-JPA-快速入门" class="headerlink" title="3.2    SpringData JPA 快速入门"></a>3.2    SpringData JPA 快速入门</h2><h3 id="3-2-1-目标"><a href="#3-2-1-目标" class="headerlink" title="3.2.1    目标"></a>3.2.1    目标</h3><p>搭建SpringData JPA环境，并实现一条数据的增删改查。</p><h3 id="3-2-2-准备数据环境"><a href="#3-2-2-准备数据环境" class="headerlink" title="3.2.2    准备数据环境"></a>3.2.2    准备数据环境</h3><p>下面的操作让JPA自动生成表结构</p><h3 id="3-2-3-创建-java工程，导入坐标"><a href="#3-2-3-创建-java工程，导入坐标" class="headerlink" title="3.2.3    创建 java工程，导入坐标"></a>3.2.3    创建 java工程，导入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring框架相关jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-创建实体类"><a href="#3-2-4-创建实体类" class="headerlink" title="3.2.4    创建实体类"></a>3.2.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-在实体类中配置映射关系"><a href="#3-2-5-在实体类中配置映射关系" class="headerlink" title="3.2.5    在实体类中配置映射关系"></a>3.2.5    在实体类中配置映射关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//声明当前私有属性为主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//配置主键的生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="comment">//声明类的属性跟数据表字段的对应关系，如果属性名称和字段名称一致，可省略</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-编写-dao接口"><a href="#3-2-6-编写-dao接口" class="headerlink" title="3.2.6    编写 dao接口"></a>3.2.6    编写 dao接口</h3><p>使用 Spring Data JPA操作数据库，只需要按照框架的规范提供 dao 接口，不需要提供在接口中定义方法，也不需要为接口提供实现类就能完成基本的数据库的增删改查等功能。</p><p>在 Spring Data JPA 中，对于定义符合规范的 Dao 层接口，我们只需要遵循以下几点就可以了：</p><ul><li>创建一个 Dao 层接口，并实现 JpaRepository 和 JpaSpecificationExecutor</li><li>提供相应的泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-7-添加-Spring整合Jpa的配置文件"><a href="#3-2-7-添加-Spring整合Jpa的配置文件" class="headerlink" title="3.2.7    添加 Spring整合Jpa的配置文件"></a>3.2.7    添加 Spring整合Jpa的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/jdbc</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///springdata"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置EntityManagerFactory 可以产生entityManger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置一个数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定实体类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置服务的提供商--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistenceProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.hibernate.jpa.HibernatePersistenceProvider"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringData Jpa 兼容Hibernate使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置数据库名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"MYSQL"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否自动建表  true 自动建表  false 不会自动建表--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"generateDdl"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否显示SQL--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"showSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--做一个jpa:repository的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--base-package 配置dao包的包名 它会为这个包先所有的接口动态产生代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.dao"</span> <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactory"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">transaction-manager-ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-8-测试"><a href="#3-2-8-测试" class="headerlink" title="3.2.8    测试"></a>3.2.8    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataJpaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"SpringData Jpa保存测试1"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Article&gt; optional = articleDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setAuthor(<span class="string">"测试2"</span>);</span><br><span class="line">        article.setAid(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Spingdata Jpa的保存和修改使用的都是save方法</span></span><br><span class="line">        <span class="comment">//关键来看传入的实体是否有主键</span></span><br><span class="line">        <span class="comment">//---如果有主键,代表要修改</span></span><br><span class="line">        <span class="comment">//---如果没有主键,代表要保存</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        articleDao.deleteById(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-SpringData-Jpa-运行原理分析"><a href="#3-3-SpringData-Jpa-运行原理分析" class="headerlink" title="3.3    SpringData Jpa 运行原理分析"></a>3.3    SpringData Jpa 运行原理分析</h2><h3 id="3-3-1-SpringData中的几个重要接口"><a href="#3-3-1-SpringData中的几个重要接口" class="headerlink" title="3.3.1    SpringData中的几个重要接口"></a>3.3.1    SpringData中的几个重要接口</h3><p>思考一个问题：自定义的接口中没有写任何的方法声明，那么测试类中调用的接口中的方法是哪来的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">自定义的接口继承了两个接口，方法肯定来自里面，追踪关系得到下面的继承关系</span><br><span class="line"> Repository 标记接口：继承了此接口后会被Spring识别，进而可以在接口中声明一些满足规范的方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> CrudRepository 实现了基本增删改查方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> PagingAndSortingRepository 实现了分页和排序的方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> JpaRepository 重写了几个查找和删除的方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> ArticleDao</span><br><span class="line">通过上面的继承关系，我们可以看到我们自定义的接口ArticleDao继承了一系列的Repository接口，而每一个接口都会给我们提供一部分的功能，这样继承下来，我们的ArticleDao不用任何的方法声明就拥有了很多的功能了。</span><br></pre></td></tr></table></figure><h3 id="3-3-2-SpringData-Jpa-底层运行原理"><a href="#3-3-2-SpringData-Jpa-底层运行原理" class="headerlink" title="3.3.2    SpringData Jpa 底层运行原理"></a>3.3.2    SpringData Jpa 底层运行原理</h3><p>思考一个问题：我们找到了定义方法的接口，但并没有看到实现类，没有实现来就无法创建对象，那么真正干活的实现类到底在哪，它又是如何产生对象的呢？</p><p>下面我们通过debug的形式，寻找答案：</p><p>1、在运行时，Spring会使用JdkDynamicAopProxy为dao接口生成一个代理对象</p><p><img src="https://img-blog.csdnimg.cn/20200926213000393.png" alt="image-20200926184720791"></p><p>2、那么这个代理对象是根据那个类代理出来的呢？点击进入JdkDynamicAopProxy源码查看invoke方法，发现targetSource代理的是SimpleJpaRepository类</p><p><img src="https://img-blog.csdnimg.cn/20200926213019877.png" alt="image-20200926184747404"></p><p>3、通过对SimpleJpaRepository中代码的分析，我们看到最终执行保存的是EntityManager对象</p><p><img src="https://img-blog.csdnimg.cn/20200926213042376.png" alt="image-20200926184803641"></p><p>总结：使用 SpringData JPA开发底层还是用的JPA的API，SpringData JPA只是对标准 JPA 操作进行了进一步封装，已达到简化了Dao层代码开发的目的。</p><h3 id="3-3-3-SpringData-Jpa-与-Jpa-及-Hibernate的关系"><a href="#3-3-3-SpringData-Jpa-与-Jpa-及-Hibernate的关系" class="headerlink" title="3.3.3    SpringData Jpa 与 Jpa 及 Hibernate的关系"></a>3.3.3    SpringData Jpa 与 Jpa 及 Hibernate的关系</h3><p><img src="https://img-blog.csdnimg.cn/20200926213059256.png" alt="image-20200926184834200"></p><h3 id="3-3-4-SpringData-Jpa-CUD方法"><a href="#3-3-4-SpringData-Jpa-CUD方法" class="headerlink" title="3.3.4    SpringData Jpa CUD方法"></a>3.3.4    SpringData Jpa CUD方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa CUD测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataJpaCUDTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试保存"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存一个实体</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存一个实体,并且立即刷新缓存</span></span><br><span class="line">        <span class="comment">//articleDao.saveAndFlush(article);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article1 = <span class="keyword">new</span> Article();</span><br><span class="line">        article1.setTitle(<span class="string">"测试保存1"</span>);</span><br><span class="line">        article1.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article1.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setTitle(<span class="string">"测试保存2"</span>);</span><br><span class="line">        article2.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article2.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Article article3 = <span class="keyword">new</span> Article();</span><br><span class="line">        article3.setTitle(<span class="string">"测试保存3"</span>);</span><br><span class="line">        article3.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article3.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(article1);</span><br><span class="line">        list.add(article2);</span><br><span class="line">        list.add(article3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存多个实体</span></span><br><span class="line">        articleDao.saveAll(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1  根据主键删除</span></span><br><span class="line">        <span class="comment">//articleDao.deleteById(13);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 根据实体删除,但是这个实体必须要有主键</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setAid(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.delete(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 删除所有  先查询--再一条条的删除</span></span><br><span class="line">        <span class="comment">//articleDao.deleteAll();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 删除所有  一下子删除所有记录</span></span><br><span class="line">        <span class="comment">//articleDao.deleteAllInBatch();</span></span><br><span class="line"></span><br><span class="line">        Article article1 = <span class="keyword">new</span> Article();</span><br><span class="line">        article1.setAid(<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setAid(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(article1);</span><br><span class="line">        list.add(article2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 批量删除指定数据  一条语句搞定</span></span><br><span class="line">        <span class="comment">//articleDao.deleteInBatch(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 先一条条的查,然后再一条条的删除</span></span><br><span class="line">        articleDao.deleteAll(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-SpringData-JPA的多种查询方式"><a href="#4-SpringData-JPA的多种查询方式" class="headerlink" title="4.    SpringData JPA的多种查询方式"></a>4.    SpringData JPA的多种查询方式</h1><h2 id="4-1-父接口方法查询"><a href="#4-1-父接口方法查询" class="headerlink" title="4.1    父接口方法查询"></a>4.1    父接口方法查询</h2><p>我们自定义的Dao接口可以使用它的父接口提供的方法，可以使用的方法如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/2020092621311925.png" alt="image-20200926185318758"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * 父接口方法查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query1Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据一个主键查询</span></span><br><span class="line">        Optional&lt;Article&gt; optional = articleDao.findById(<span class="number">21</span>);</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据多个主键查询</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">21</span>);</span><br><span class="line">        list.add(<span class="number">23</span>);</span><br><span class="line">        list.add(<span class="number">25</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAllById(list);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有--排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照aid倒序排列</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"aid"</span>));</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll(sort);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有--分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//处理分页条件</span></span><br><span class="line">        <span class="comment">//page   当前是第几页(从0开始)    size  每页大小</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//总记录数  总页数  每页多少</span></span><br><span class="line">        System.out.println(<span class="string">"总记录数:"</span> + page.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"总页数:"</span> + page.getTotalPages());</span><br><span class="line">        System.out.println(<span class="string">"每页多少:"</span> + page.getSize());</span><br><span class="line">        <span class="comment">//当前页的元素</span></span><br><span class="line">        List&lt;Article&gt; content = page.getContent();</span><br><span class="line">        <span class="keyword">for</span> (Article article : content) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有--分页+排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照aid倒序排列</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"aid"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理分页条件</span></span><br><span class="line">        <span class="comment">//page   当前是第几页(从0开始)    size  每页大小</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>, sort);</span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//总记录数  总页数  每页多少</span></span><br><span class="line">        System.out.println(<span class="string">"总记录数:"</span> + page.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"总页数:"</span> + page.getTotalPages());</span><br><span class="line">        System.out.println(<span class="string">"每页多少:"</span> + page.getSize());</span><br><span class="line">        <span class="comment">//当前页的元素</span></span><br><span class="line">        List&lt;Article&gt; content = page.getContent();</span><br><span class="line">        <span class="keyword">for</span> (Article article : content) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-方法命名规则查询"><a href="#4-2-方法命名规则查询" class="headerlink" title="4.2    方法命名规则查询"></a>4.2    方法命名规则查询</h2><p>顾名思义，方法命名规则查询就是根据方法的名字，就能创建查询。只需要按照SpringData JPA提供的方法命名规则定义方法的名称，就可以完成查询工作。</p><p>SpringData JPA在程序执行的时候会根据方法名称进行解析，并自动生成查询语句进行查询.</p><p>按照SpringData JPA定义的规则，查询方法以findBy开头，涉及条件查询时，条件的属性用条件关键字连接，要注意的是：条件属性首字母需大写。框架在进行方法名解析时，会先把方法名多余的前缀截取掉，然后对剩下部分进行解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleLike</span><span class="params">(String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题和作者查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleAndAuthor</span><span class="params">(String title, String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 &lt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByAidIsLessThan</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 between</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startAid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endAid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByAidBetween</span><span class="params">(Integer startAid, Integer endAid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 in</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByAidIn</span><span class="params">(List&lt;Integer&gt; aids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据创建时间之后查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> createTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCreateTimeAfter</span><span class="params">(Date createTime)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * 方法命名规则查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitle(<span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleLike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleLike(<span class="string">"%测试%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题和作者查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleAndAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleAndAuthor(<span class="string">"测试"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 &lt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAidIsLessThan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByAidIsLessThan(<span class="number">25</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 between</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAidBetween</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByAidBetween(<span class="number">25</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 in</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAidIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">29</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByAidIn(list);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据创建时间之后查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCreateTimeAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCreateTimeAfter(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>关键字</th><th>例子</th><th>对应的JPQL语句</th></tr></thead><tbody><tr><td>And</td><td>findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ? 2</td></tr><tr><td>Or</td><td>findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td>Is,Equals</td><td>indByFirstnameIs,<br/>findByFirstnameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td>Between</td><td>findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td>LessThan</td><td>findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td>LessThanEqual</td><td>findByAgeLessThanEqual</td><td>… where x.age &lt;= ?1</td></tr><tr><td>GreaterThan</td><td>findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td>GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td>After</td><td>findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td>Before</td><td>findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td>IsNull</td><td>findByAgeIsNull</td><td>… where x.age is null</td></tr><tr><td>IsNotNull,NotNull</td><td>findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td>Like</td><td>findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td>NotLike</td><td>findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td>StartingWith</td><td>findByFirstnameStartingWith</td><td>… where x.firstname like ?1<br/>(parameter bound with appended %)</td></tr><tr><td>EndingWith</td><td>findByFirstnameEndingWith</td><td>… where x.firstname like ?1<br/>(parameter bound with prepended %)</td></tr><tr><td>Containing</td><td>findByFirstnameContaining</td><td>… where x.firstname like ?1<br/>(parameter bound wrapped in %)</td></tr><tr><td>OrderBy</td><td>findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td>Not</td><td>findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td>In</td><td>findByAgeIn(Collection ages)</td><td>… where x.age in ?1</td></tr><tr><td>NotIn</td><td>findByAgeNotIn(Collection age)</td><td>… where x.age not in ?1</td></tr><tr><td>TRUE</td><td>findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td>FALSE</td><td>findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td>IgnoreCase</td><td>findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstame) = U</td></tr></tbody></table><h2 id="4-3-JPQL-查询"><a href="#4-3-JPQL-查询" class="headerlink" title="4.3    JPQL 查询"></a>4.3    JPQL 查询</h2><p>使用SpringData JPA提供的查询方法已经可以解决大部分的应用场景，但是对于某些业务来说，我们还需要灵活的构造查询条件，这时就可以使用@Query注解，结合JPQL的语句方式完成查询。</p><p>JPQL，全称是Java Persistence Query Language。JPQL语句是JPA中定义的一种查询语言，此种语言的用意是让开发者忽略数据库表和表中的字段，而关注实体类及实体类中的属性。</p><p>它的写法十分类似于SQL语句的写法，但是要把查询的表名换成实体类名称，把表中的字段名换成实体类的属性名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示位置参数绑定[按照title和author查询]</span></span><br><span class="line"><span class="comment">     * 占位符从1开始</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title = ?1 and a.author=?2"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition1</span><span class="params">(String title, String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示名字参数绑定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title = :title and a.author = :authors"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition2</span><span class="params">(@Param(<span class="string">"title"</span>)</span> String title, @<span class="title">Param</span><span class="params">(<span class="string">"authors"</span>)</span> String author)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示like模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title like %:title%"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition3</span><span class="params">(@Param(<span class="string">"title"</span>)</span> String title)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示排序查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title like %:title% order by a.aid desc "</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition4</span><span class="params">(@Param(<span class="string">"title"</span>)</span> String title)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示分页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title like %:title%"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition5</span><span class="params">(Pageable pageable, @Param(<span class="string">"title"</span>)</span> String title)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入集合参数查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.aid in :aids"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition6</span><span class="params">(@Param(<span class="string">"aids"</span>)</span> List&lt;Integer&gt; aids)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入Bean进行查询（SPEL表达式查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> article</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title = :#&#123;#article.title&#125; and a.author = :#&#123;#article.author&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition7</span><span class="params">(@Param(<span class="string">"article"</span>)</span> Article article)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * JPQL 查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query3Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示位置参数绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition1(<span class="string">"测试保存1"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示名字参数绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition2(<span class="string">"测试保存1"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示like模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition3(<span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示排序查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition4(<span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition5(pageable, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入集合参数查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">29</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition6(list);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入Bean进行查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article articleParam = <span class="keyword">new</span> Article();</span><br><span class="line">        articleParam.setTitle(<span class="string">"测试保存1"</span>);</span><br><span class="line">        articleParam.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition7(articleParam);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地SQL查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition8(<span class="string">"测试保存1"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-本地-SQL查询"><a href="#4-4-本地-SQL查询" class="headerlink" title="4.4    本地 SQL查询"></a>4.4    本地 SQL查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地SQL查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from article a where a.title = ?1 and a.author =?2"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">List&lt;Article&gt; <span class="title">findByCondition8</span><span class="params">(String title, String author)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-5-Specifications-动态查询"><a href="#4-5-Specifications-动态查询" class="headerlink" title="4.5    Specifications 动态查询"></a>4.5    Specifications 动态查询</h2><p>有时我们在查询某个实体的时候，给定的条件是不固定的，这时就需要动态构建相应的查询语句，在 Spring Data JPA 中可以通过 JpaSpecificationExecutor 接口查询。相比 JPQL,其优势是类型安全,更加的面向对象，缺点是书写比较麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * Specifications 动态查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query4Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照标题和作者进行查询,以不为空的属性作为查询条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就模拟从从外边传入的变量</span></span><br><span class="line">        String title = <span class="string">"测试保存1"</span>;</span><br><span class="line">        String author = <span class="string">"测试"</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll(<span class="keyword">new</span> Specification&lt;Article&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root  代表实体对象,我们可以通过它获取属性值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cq    用于生成SQL语句</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb    用于拼接查询条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Article&gt; root, CriteriaQuery&lt;?&gt; cq, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(title)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.like(root.get("title").as(String.class), "%" + title + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(author)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"author"</span>).as(String<span class="class">.<span class="keyword">class</span>), <span class="title">author</span>)</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> cb.and(list.toArray(<span class="keyword">new</span> Predicate[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就模拟从从外边传入的变量</span></span><br><span class="line">        String title = <span class="string">""</span>;</span><br><span class="line">        String author = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(<span class="keyword">new</span> Specification&lt;Article&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root  代表实体对象,我们可以通过它获取属性值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cq    用于生成SQL语句</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb    用于拼接查询条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Article&gt; root, CriteriaQuery&lt;?&gt; cq, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(title)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.like(root.get("title").as(String.class), "%" + title + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(author)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"author"</span>).as(String<span class="class">.<span class="keyword">class</span>), <span class="title">author</span>)</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> cb.and(list.toArray(<span class="keyword">new</span> Predicate[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就模拟从从外边传入的变量</span></span><br><span class="line">        String title = <span class="string">""</span>;</span><br><span class="line">        String author = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>, Sort.by(Sort.Order.desc(<span class="string">"aid"</span>)));</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(<span class="keyword">new</span> Specification&lt;Article&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root  代表实体对象,我们可以通过它获取属性值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cq    用于生成SQL语句</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb    用于拼接查询条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Article&gt; root, CriteriaQuery&lt;?&gt; cq, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(title)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.like(root.get("title").as(String.class), "%" + title + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(author)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"author"</span>).as(String<span class="class">.<span class="keyword">class</span>), <span class="title">author</span>)</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> cb.and(list.toArray(<span class="keyword">new</span> Predicate[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-SpringData-JPA实现多表操作"><a href="#5-SpringData-JPA实现多表操作" class="headerlink" title="5.    SpringData JPA实现多表操作"></a>5.    SpringData JPA实现多表操作</h1><h2 id="5-1-多表关系分析"><a href="#5-1-多表关系分析" class="headerlink" title="5.1    多表关系分析"></a>5.1    多表关系分析</h2><p>数据库中多表之间存在着三种关系，如图所示。</p><p><img src="https://img-blog.csdnimg.cn/20200926213147618.png" alt="image-20200926210502854"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">从图可以看出，系统设计的三种实体关系分别为： 多对多、一对多和一对一关系。</span><br><span class="line">注意：一对多关系可以看为两种： 即一对多，多对一。所以说四种更精确。</span><br><span class="line"></span><br><span class="line">在实际开发中，我们数据库的表难免会有相互的关联关系，在操作表的时候就有可能会涉及到多张表的操作。</span><br><span class="line">而在这种实现了ORM思想的框架中（如 JPA），可以让我们通过操作实体类就实现对数据库表的操作。</span><br><span class="line">所以今天我们的学习重点是：掌握配置实体之间的关联关系</span><br><span class="line">第一步：首先确定两张表之间的关系</span><br><span class="line">第二步：在实体类中描述出两个实体的关系</span><br><span class="line">第三步：配置出实体类和数据库表的关系映射（重点）</span><br></pre></td></tr></table></figure><h2 id="5-2-案例表间关系"><a href="#5-2-案例表间关系" class="headerlink" title="5.2    案例表间关系"></a>5.2    案例表间关系</h2><p><img src="https://img-blog.csdnimg.cn/20200926213203811.png" alt="image-20200926210544312"></p><h2 id="5-3-一对一关系"><a href="#5-3-一对一关系" class="headerlink" title="5.3    一对一关系"></a>5.3    一对一关系</h2><h3 id="5-3-1-数据环境"><a href="#5-3-1-数据环境" class="headerlink" title="5.3.1    数据环境"></a>5.3.1    数据环境</h3><p>article和article_data的一对一关系</p><p><img src="https://img-blog.csdnimg.cn/20200926213220486.png" alt="image-20200926210630988"></p><h3 id="5-3-2-创建实体类，并配置表间关系"><a href="#5-3-2-创建实体类，并配置表间关系" class="headerlink" title="5.3.2    创建实体类，并配置表间关系"></a>5.3.2    创建实体类，并配置表间关系</h3><h4 id="5-3-2-1-创建文章类"><a href="#5-3-2-1-创建文章类" class="headerlink" title="5.3.2.1    创建文章类"></a>5.3.2.1    创建文章类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1声明类间关系</span></span><br><span class="line">    <span class="comment">//声明主动放弃关系维护 mappedBy="当前类在对方类中的属性名"</span></span><br><span class="line">    <span class="comment">//设置级联操作,当保存Article的时候,同时保存ArticleData</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>, cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 在类中使用注解再声明表间关系</span></span><br><span class="line">    <span class="comment">// --书写注解</span></span><br><span class="line">    <span class="comment">// --明确谁来维护关系(在多的一方维护关系)</span></span><br><span class="line">    <span class="comment">//  ----在维护的一方主动声明维护策略,在不维护的一方声明主动放弃</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-2-创建文章详情类"><a href="#5-3-2-2-创建文章详情类" class="headerlink" title="5.3.2.2    创建文章详情类"></a>5.3.2.2    创建文章详情类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章详情实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article_data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleData</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让这个实体维护关系</span></span><br><span class="line">    <span class="comment">//name                    当前表中的外键名</span></span><br><span class="line">    <span class="comment">//referencedColumnName    指向的对方表中的主键名</span></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"articleId"</span>, referencedColumnName = <span class="string">"aid"</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-添加-ArticleDao接口"><a href="#5-3-3-添加-ArticleDao接口" class="headerlink" title="5.3.3    添加 ArticleDao接口"></a>5.3.3    添加 ArticleDao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-4-测试"><a href="#5-3-4-测试" class="headerlink" title="5.3.4    测试"></a>5.3.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">One2OneTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建文章对象</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试好文章"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文章内容对象</span></span><br><span class="line">        ArticleData articleData = <span class="keyword">new</span> ArticleData();</span><br><span class="line">        articleData.setContent(<span class="string">"真是一篇好文章"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两个对象间的关系</span></span><br><span class="line">        article.setArticleData(articleData);</span><br><span class="line">        articleData.setArticle(article);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-一对多关系"><a href="#5-4-一对多关系" class="headerlink" title="5.4    一对多关系"></a>5.4    一对多关系</h2><h3 id="5-4-1-数据环境"><a href="#5-4-1-数据环境" class="headerlink" title="5.4.1    数据环境"></a>5.4.1    数据环境</h3><p>article和comment的一对多关系</p><p><img src="https://img-blog.csdnimg.cn/20200926213241429.png" alt="image-20200926211406496"></p><h3 id="5-4-2-创建实体类，并配置表间关系"><a href="#5-4-2-创建实体类，并配置表间关系" class="headerlink" title="5.4.2    创建实体类，并配置表间关系"></a>5.4.2    创建实体类，并配置表间关系</h3><h4 id="5-4-2-1-修改文章类，添加文章跟评论的映射"><a href="#5-4-2-1-修改文章类，添加文章跟评论的映射" class="headerlink" title="5.4.2.1    修改文章类，添加文章跟评论的映射"></a>5.4.2.1    修改文章类，添加文章跟评论的映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立文章对评论的一对多关系</span></span><br><span class="line">    <span class="comment">//在一的一方声明放弃维护关系</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"article"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1声明类间关系</span></span><br><span class="line">    <span class="comment">//声明主动放弃关系维护 mappedBy="当前类在对方类中的属性名"</span></span><br><span class="line">    <span class="comment">//设置级联操作,当保存Article的时候,同时保存ArticleData</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>, cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 在类中使用注解再声明表间关系</span></span><br><span class="line">    <span class="comment">// --书写注解</span></span><br><span class="line">    <span class="comment">// --明确谁来维护关系(在多的一方维护关系)</span></span><br><span class="line">    <span class="comment">//  ----在维护的一方主动声明维护策略,在不维护的一方声明主动放弃</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-2-创建文章评论类"><a href="#5-4-2-2-创建文章评论类" class="headerlink" title="5.4.2.2    创建文章评论类"></a>5.4.2.2    创建文章评论类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"comment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立评论到文章的多对一关系</span></span><br><span class="line">    <span class="comment">//在多的一方维护关系</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"aid"</span>, referencedColumnName = <span class="string">"aid"</span>)</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-添加-CommentDao接口"><a href="#5-4-3-添加-CommentDao接口" class="headerlink" title="5.4.3    添加 CommentDao接口"></a>5.4.3    添加 CommentDao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Comment</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Comment</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-4-测试"><a href="#5-4-4-测试" class="headerlink" title="5.4.4    测试"></a>5.4.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">One2ManyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentDao commentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建文章对象</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试好文章"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文章评论对象</span></span><br><span class="line">        Comment comment1 = <span class="keyword">new</span> Comment();</span><br><span class="line">        comment1.setComment(<span class="string">"真不错"</span>);</span><br><span class="line">        Comment comment2 = <span class="keyword">new</span> Comment();</span><br><span class="line">        comment2.setComment(<span class="string">"挺好的"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两个对象间的关系</span></span><br><span class="line">        comment1.setArticle(article);</span><br><span class="line">        comment2.setArticle(article);</span><br><span class="line"></span><br><span class="line">        Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        comments.add(comment1);</span><br><span class="line">        comments.add(comment2);</span><br><span class="line">        article.setComments(comments);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">        commentDao.save(comment1);</span><br><span class="line">        commentDao.save(comment2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-多对多关系"><a href="#5-5-多对多关系" class="headerlink" title="5.5    多对多关系"></a>5.5    多对多关系</h2><h3 id="5-5-1-数据环境"><a href="#5-5-1-数据环境" class="headerlink" title="5.5.1    数据环境"></a>5.5.1    数据环境</h3><p>article跟type之间的多对多关系</p><p><img src="https://img-blog.csdnimg.cn/20200926213301861.png" alt="image-20200926211907508"></p><h3 id="5-5-2-创建实体类，并配置表间关系"><a href="#5-5-2-创建实体类，并配置表间关系" class="headerlink" title="5.5.2    创建实体类，并配置表间关系"></a>5.5.2    创建实体类，并配置表间关系</h3><h4 id="5-5-2-1-修改文章类，添加文章跟评论用户的多对多关系"><a href="#5-5-2-1-修改文章类，添加文章跟评论用户的多对多关系" class="headerlink" title="5.5.2.1    修改文章类，添加文章跟评论用户的多对多关系"></a>5.5.2.1    修改文章类，添加文章跟评论用户的多对多关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"articles"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Type&gt; types = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立文章对评论的一对多关系</span></span><br><span class="line">    <span class="comment">//在一的一方声明放弃维护关系</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"article"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1声明类间关系</span></span><br><span class="line">    <span class="comment">//声明主动放弃关系维护 mappedBy="当前类在对方类中的属性名"</span></span><br><span class="line">    <span class="comment">//设置级联操作,当保存Article的时候,同时保存ArticleData</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>, cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 在类中使用注解再声明表间关系</span></span><br><span class="line">    <span class="comment">// --书写注解</span></span><br><span class="line">    <span class="comment">// --明确谁来维护关系(在多的一方维护关系)</span></span><br><span class="line">    <span class="comment">//  ----在维护的一方主动声明维护策略,在不维护的一方声明主动放弃</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-2-2-创建文章用户类"><a href="#5-5-2-2-创建文章用户类" class="headerlink" title="5.5.2.2    创建文章用户类"></a>5.5.2.2    创建文章用户类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"type"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer tid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">            <span class="comment">//代表中间表名称</span></span><br><span class="line">            name = <span class="string">"article_type"</span>,</span><br><span class="line">            <span class="comment">//中间表的外键对应到当前表的主键名称</span></span><br><span class="line">            joinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"tid"</span>, referencedColumnName = <span class="string">"tid"</span>)&#125;,</span><br><span class="line">            <span class="comment">//中间表的外键对应到对方表的主键名称</span></span><br><span class="line">            inverseJoinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"aid"</span>, referencedColumnName = <span class="string">"aid"</span>)&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Article&gt; articles = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-3-添加-TypeDao接口"><a href="#5-5-3-添加-TypeDao接口" class="headerlink" title="5.5.3    添加 TypeDao接口"></a>5.5.3    添加 TypeDao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Type</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Type</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-4-测试"><a href="#5-5-4-测试" class="headerlink" title="5.5.4    测试"></a>5.5.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Many2ManyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TypeDao typeDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建文章对象</span></span><br><span class="line">        Article article1 = <span class="keyword">new</span> Article();</span><br><span class="line">        article1.setTitle(<span class="string">"测试好文章11"</span>);</span><br><span class="line">        article1.setAuthor(<span class="string">"测试11"</span>);</span><br><span class="line">        article1.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setTitle(<span class="string">"测试好文章22"</span>);</span><br><span class="line">        article2.setAuthor(<span class="string">"测试22"</span>);</span><br><span class="line">        article2.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文章类型对象</span></span><br><span class="line">        Type type1 = <span class="keyword">new</span> Type();</span><br><span class="line">        type1.setName(<span class="string">"军事"</span>);</span><br><span class="line">        Type type2 = <span class="keyword">new</span> Type();</span><br><span class="line">        type2.setName(<span class="string">"民政"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两个对象间的关系</span></span><br><span class="line">        Set&lt;Type&gt; types = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        types.add(type1);</span><br><span class="line">        types.add(type2);</span><br><span class="line">        article1.setTypes(types);</span><br><span class="line">        article2.setTypes(types);</span><br><span class="line"></span><br><span class="line">        Set&lt;Article&gt; articles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        articles.add(article1);</span><br><span class="line">        articles.add(article2);</span><br><span class="line">        type1.setArticles(articles);</span><br><span class="line">        type2.setArticles(articles);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作</span></span><br><span class="line">        articleDao.save(article1);</span><br><span class="line">        articleDao.save(article2);</span><br><span class="line">        typeDao.save(type1);</span><br><span class="line">        typeDao.save(type2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringData概述&quot;&gt;&lt;a href=&quot;#1-SpringData概述&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringData概述&quot;&gt;&lt;/a&gt;1.    SpringData概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-持久层开发的问题&quot;&gt;&lt;a href=&quot;#1-1-持久层开发的问题&quot; class=&quot;headerlink&quot; title=&quot;1.1    持久层开发的问题&quot;&gt;&lt;/a&gt;1.1    持久层开发的问题&lt;/h2&gt;&lt;p&gt;随着互联网技术的发展，现在的企业开发中用到的用于数据存储的产品，不再仅仅是关系型数据库，而是要根据场景需要选择不同的存储技术，比如用于缓存热点数据的redis，用于存储文档数据的mongodb，用于支持强大搜索功能的elasticsearch等等。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringData" scheme="https://wgy1993.gitee.io/tags/SpringData/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB(二)</title>
    <link href="https://wgy1993.gitee.io/archives/afe7047c.html"/>
    <id>https://wgy1993.gitee.io/archives/afe7047c.html</id>
    <published>2020-09-18T08:54:22.000Z</published>
    <updated>2020-09-18T09:13:52.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-副本集-Replica-Sets"><a href="#1-副本集-Replica-Sets" class="headerlink" title="1.    副本集-Replica Sets"></a>1.    副本集-Replica Sets</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1    简介"></a>1.1    简介</h2><p>MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高可用性，是所有生产部署的基础。</p><p>也可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用多台机器进行同一数据的异步同步，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动切换其他备份服务器做主库。而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载。</p><a id="more"></a><p>（1）冗余和数据可用性</p><p>复制提供冗余并提高数据可用性。 通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防止丢失单个数据库服务器。</p><p>在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上， 在不同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性。 您还可以为专用目的维护其他副本，例如灾难恢复，报告或备份。</p><p>（2）MongoDB中的复制</p><p>副本集是一组维护相同数据集的mongod实例。 副本集包含多个数据承载节点和可选的一个仲裁节点。在承载数据的节点中，一个且仅一个成员被视为主节点，而其他节点被视为次要（从）节点。</p><p>主节点接收所有写操作。 副本集只能有一个主要能够确认具有{w：“most”}写入关注的写入; 虽然在某些情况下，另一个mongod实例可能暂时认为自己也是主要的。主要记录其操作日志中的数据集的所有更改，即oplog。</p><p><img src="https://img-blog.csdnimg.cn/20200918164831238.png" alt="image-20200918092648938"></p><p>辅助(副本)节点复制主节点的oplog并将操作应用于其数据集，以使辅助节点的数据集反映主节点的数据集。 如果主要人员不在，则符合条件的中学将举行选举以选出新的主要人员。</p><p>（3）主从复制和副本集区别</p><p>主从集群和副本集最大的区别就是副本集没有固定的“主节点”；整个集群会选出一个“主节点”，当其挂掉后，又在剩下的从节点中选中其他节点为“主节点”，副本集总有一个活跃点(主、primary)和一个或多个备份节点(从、secondary)。</p><h2 id="1-2-副本集的三个角色"><a href="#1-2-副本集的三个角色" class="headerlink" title="1.2    副本集的三个角色"></a>1.2    副本集的三个角色</h2><p>副本集有两种类型三种角色</p><p>两种类型：</p><ul><li>主节点（ Primary）类型：数据操作的主要连接点，可读写。</li><li>次要（辅助、从）节点（ Secondaries）类型：数据冗余备份节点，可以读或选举。</li></ul><p>三种角色：</p><ul><li>主要成员（Primary）：主要接收所有写操作。就是主节点。</li><li>副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作（但需要配置）。是默认的一种从节点类型。</li><li>仲裁者（ Arbiter）：不保留任何数据的副本，只具有投票选举作用。当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200918164912986.png" alt="image-20200918092959669"></p><p>关于仲裁者的额外说明：</p><p>您可以将额外的mongod实例添加到副本集作为仲裁者。 仲裁者不维护数据集。 仲裁者的目的是通过响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁。 因为它们不存储数据集，所以仲裁器可以是提供副本集仲裁功能的好方法，其资源成本比具有数据集的全功能副本集成员更便宜。</p><p>如果您的副本集具有偶数个成员，请添加仲裁者以获得主要选举中的“大多数”投票。 仲裁者不需要专用硬件。</p><p>仲裁者将永远是仲裁者，而主要人员可能会退出并成为次要人员，而次要人员可能成为选举期间的主要人员。</p><p>如果你的副本+主节点的个数是偶数，建议加一个仲裁者，形成奇数，容易满足大多数的投票。</p><p>如果你的副本+主节点的个数是奇数，可以不加仲裁者。</p><h2 id="1-3-副本集架构目标"><a href="#1-3-副本集架构目标" class="headerlink" title="1.3    副本集架构目标"></a>1.3    副本集架构目标</h2><p>一主一副本一仲裁</p><p><img src="https://img-blog.csdnimg.cn/20200918164931592.png" alt="image-20200918093150930"></p><h2 id="1-4-副本集的创建"><a href="#1-4-副本集的创建" class="headerlink" title="1.4    副本集的创建"></a>1.4    副本集的创建</h2><h3 id="1-4-1-第一步：创建主节点"><a href="#1-4-1-第一步：创建主节点" class="headerlink" title="1.4.1    第一步：创建主节点"></a>1.4.1    第一步：创建主节点</h3><p>建立存放数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------myrs</span></span><br><span class="line"><span class="comment">#主节点</span></span><br><span class="line">mkdir -p /mongodb/replica_sets/myrs_27017/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/replica_sets/myrs_27017/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/replica_sets/myrs_27017/mongod.conf</span><br></pre></td></tr></table></figure><p>myrs_27017 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/replica_sets/myrs_27017/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/replica_sets/myrs_27017/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/replica_sets/myrs_27017/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#bindIp</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="comment">#副本集的名称</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myrs</span></span><br></pre></td></tr></table></figure><p>启动节点服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost replica_sets]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27017/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 54257</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><h3 id="1-4-2-第二步：创建副本节点"><a href="#1-4-2-第二步：创建副本节点" class="headerlink" title="1.4.2    第二步：创建副本节点"></a>1.4.2    第二步：创建副本节点</h3><p>建立存放数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------myrs</span></span><br><span class="line"><span class="comment">#副本节点</span></span><br><span class="line">mkdir -p /mongodb/replica_sets/myrs_27018/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/replica_sets/myrs_27018/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/replica_sets/myrs_27018/mongod.conf</span><br></pre></td></tr></table></figure><p>myrs_27018 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/replica_sets/myrs_27018/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/replica_sets/myrs_27018/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/replica_sets/myrs_27018/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#bindIp</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27018</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="comment">#副本集的名称</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myrs</span></span><br></pre></td></tr></table></figure><p>启动节点服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost replica_sets]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27018/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 54361</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><h3 id="1-4-3-第三步：创建仲裁节点"><a href="#1-4-3-第三步：创建仲裁节点" class="headerlink" title="1.4.3    第三步：创建仲裁节点"></a>1.4.3    第三步：创建仲裁节点</h3><p>建立存放数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------myrs</span></span><br><span class="line"><span class="comment">#仲裁节点</span></span><br><span class="line">mkdir -p /mongodb/replica_sets/myrs_27019/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/replica_sets/myrs_27019/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/replica_sets/myrs_27019/mongod.conf</span><br></pre></td></tr></table></figure><p>myrs_27019 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/replica_sets/myrs_27019/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/replica_sets/myrs_27019/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/replica_sets/myrs_27019/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#bindIp</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27019</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="comment">#副本集的名称</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myrs</span></span><br></pre></td></tr></table></figure><p>启动节点服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost replica_sets]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27019/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 54410</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><h3 id="1-4-4-第四步：初始化配置副本集和主节点"><a href="#1-4-4-第四步：初始化配置副本集和主节点" class="headerlink" title="1.4.4    第四步：初始化配置副本集和主节点"></a>1.4.4    第四步：初始化配置副本集和主节点</h3><p>使用客户端命令连接任意一个节点，但这里尽量要连接主节点(27017节点)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongo --host=180.76.159.126 --port=27017</span><br></pre></td></tr></table></figure><p>结果，连接上之后，很多命令无法使用，，比如 show dbs 等，必须初始化副本集才行</p><p>准备初始化新的副本集：</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate(configuration)</span><br></pre></td></tr></table></figure><p>【示例】</p><p>使用默认的配置来初始化副本集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate()</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs.initiate()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;info2&quot; : &quot;no configuration specified. Using a default configuration for the set&quot;,</span><br><span class="line">    &quot;me&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1565760476, 1),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1565760476, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myrs:SECONDARY&gt;</span><br><span class="line">myrs:PRIMARY&gt;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>“ok”的值为1，说明创建成功。</li><li>命令行提示符发生变化，变成了一个从节点角色，此时默认不能读写。稍等片刻，回车，变成主节点。</li></ul><h3 id="1-4-5-第五步：查看副本集的配置内容"><a href="#1-4-5-第五步：查看副本集的配置内容" class="headerlink" title="1.4.5    第五步：查看副本集的配置内容"></a>1.4.5    第五步：查看副本集的配置内容</h3><p>返回包含当前副本集配置的文档。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf(configuration)</span><br></pre></td></tr></table></figure><p>提示：</p><p><code>rs.config()</code> 是该方法的别名。</p><p>configuration：可选，如果没有配置，则使用默认主节点配置。</p><p>【示例】</p><p>在27017上执行副本集中当前节点的默认节点配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; rs.conf()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : &quot;myrs&quot;,</span><br><span class="line">    &quot;version&quot; : 1,</span><br><span class="line">    &quot;protocolVersion&quot; : NumberLong(1),</span><br><span class="line">    &quot;writeConcernMajorityJournalDefault&quot; : true,</span><br><span class="line">    &quot;members&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 0,</span><br><span class="line">            &quot;host&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;arbiterOnly&quot; : false,</span><br><span class="line">            &quot;buildIndexes&quot; : true,</span><br><span class="line">            &quot;hidden&quot; : false,</span><br><span class="line">            &quot;priority&quot; : 1,</span><br><span class="line">            &quot;tags&quot; : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">            &quot;votes&quot; : 1</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;chainingAllowed&quot; : true,</span><br><span class="line">        &quot;heartbeatIntervalMillis&quot; : 2000,</span><br><span class="line">        &quot;heartbeatTimeoutSecs&quot; : 10,</span><br><span class="line">        &quot;electionTimeoutMillis&quot; : 10000,</span><br><span class="line">        &quot;catchUpTimeoutMillis&quot; : -1,</span><br><span class="line">        &quot;catchUpTakeoverDelayMillis&quot; : 30000,</span><br><span class="line">        &quot;getLastErrorModes&quot; : &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;getLastErrorDefaults&quot; : &#123;</span><br><span class="line">            &quot;w&quot; : 1,</span><br><span class="line">            &quot;wtimeout&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;replicaSetId&quot; : ObjectId(&quot;5d539bdcd6a308e600d126bb&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>&quot;_id&quot; : &quot;myrs&quot;</code> ：副本集的配置数据存储的主键值，默认就是副本集的名字</li><li><code>&quot;members&quot;</code> ：副本集成员数组，此时只有一个： “host” : “180.76.159.126:27017” ，该成员不是仲裁节点：”arbiterOnly” : false ，优先级（权重值）： “priority” : 1,</li><li><code>&quot;settings&quot;</code> ：副本集的参数配置。</li></ul><p>提示：副本集配置的查看命令，本质是查询的是 system.replset 的表中的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; use local</span><br><span class="line">switched to db local</span><br><span class="line">myrs:PRIMARY&gt; show collections</span><br><span class="line">oplog.rs</span><br><span class="line">replset.election</span><br><span class="line">replset.minvalid</span><br><span class="line">replset.oplogTruncateAfterPoint</span><br><span class="line">startup_log</span><br><span class="line">system.replset</span><br><span class="line">system.rollback.id</span><br><span class="line">myrs:PRIMARY&gt; db.system.replset.find()</span><br><span class="line">&#123; &quot;_id&quot; : &quot;myrs&quot;, &quot;version&quot; : 1, &quot;protocolVersion&quot; : NumberLong(1),</span><br><span class="line">&quot;writeConcernMajorityJournalDefault&quot; : true, &quot;members&quot; : [ &#123; &quot;_id&quot; : 0, &quot;host&quot; :</span><br><span class="line">&quot;180.76.159.126:27017&quot;, &quot;arbiterOnly&quot; : false, &quot;buildIndexes&quot; : true, &quot;hidden&quot; :</span><br><span class="line">false, &quot;priority&quot; : 1, &quot;tags&quot; : &#123; &#125;, &quot;slaveDelay&quot; : NumberLong(0), &quot;votes&quot; : 1</span><br><span class="line">&#125; ], &quot;settings&quot; : &#123; &quot;chainingAllowed&quot; : true, &quot;heartbeatIntervalMillis&quot; : 2000,</span><br><span class="line">&quot;heartbeatTimeoutSecs&quot; : 10, &quot;electionTimeoutMillis&quot; : 10000,</span><br><span class="line">&quot;catchUpTimeoutMillis&quot; : -1, &quot;catchUpTakeoverDelayMillis&quot; : 30000,</span><br><span class="line">&quot;getLastErrorModes&quot; : &#123; &#125;, &quot;getLastErrorDefaults&quot; : &#123; &quot;w&quot; : 1, &quot;wtimeout&quot; : 0</span><br><span class="line">&#125;, &quot;replicaSetId&quot; : ObjectId(&quot;5d539bdcd6a308e600d126bb&quot;) &#125; &#125;</span><br><span class="line">myrs:PRIMARY&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-6-第六步：查看副本集状态"><a href="#1-4-6-第六步：查看副本集状态" class="headerlink" title="1.4.6    第六步：查看副本集状态"></a>1.4.6    第六步：查看副本集状态</h3><p>检查副本集状态。</p><p>说明：</p><p>返回包含状态信息的文档。此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当前状态。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.status()</span><br></pre></td></tr></table></figure><p>【示例】</p><p>在27017上查看副本集状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;set&quot; : &quot;myrs&quot;,</span><br><span class="line">    &quot;date&quot; : ISODate(&quot;2019-08-14T05:29:45.161Z&quot;),</span><br><span class="line">    &quot;myState&quot; : 1,</span><br><span class="line">    &quot;term&quot; : NumberLong(1),</span><br><span class="line">    &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceId&quot; : -1,</span><br><span class="line">    &quot;heartbeatIntervalMillis&quot; : NumberLong(2000),</span><br><span class="line">    &quot;optimes&quot; : &#123;</span><br><span class="line">        &quot;lastCommittedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565760578, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;readConcernMajorityOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565760578, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;appliedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565760578, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;durableOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565760578, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;lastStableCheckpointTimestamp&quot; : Timestamp(1565760528, 1),</span><br><span class="line">    &quot;members&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">        &quot;_id&quot; : 0,</span><br><span class="line">        &quot;name&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">        &quot;health&quot; : 1,</span><br><span class="line">        &quot;state&quot; : 1,</span><br><span class="line">        &quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">        &quot;uptime&quot; : 419,</span><br><span class="line">        &quot;optime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565760578, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;optimeDate&quot; : ISODate(&quot;2019-08-14T05:29:38Z&quot;),</span><br><span class="line">        &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">        &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">        &quot;syncSourceId&quot; : -1,</span><br><span class="line">        &quot;infoMessage&quot; : &quot;could not find member to sync from&quot;,</span><br><span class="line">        &quot;electionTime&quot; : Timestamp(1565760476, 2),</span><br><span class="line">        &quot;electionDate&quot; : ISODate(&quot;2019-08-14T05:27:56Z&quot;),</span><br><span class="line">        &quot;configVersion&quot; : 1,</span><br><span class="line">        &quot;self&quot; : true,</span><br><span class="line">        &quot;lastHeartbeatMessage&quot; : &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1565760578, 1),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1565760578, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>&quot;set&quot; : &quot;myrs&quot;</code> ：副本集的名字</li><li><code>&quot;myState&quot;</code> : 1：说明状态正常</li><li><code>&quot;members&quot;</code> ：副本集成员数组，此时只有一个： <code>&quot;name&quot; : &quot;180.76.159.126:27017&quot;</code> ，该成员的角色是 <code>&quot;stateStr&quot; : &quot;PRIMARY&quot;</code>, 该节点是健康的： <code>&quot;health&quot; : 1</code> 。</li></ul><h3 id="1-4-7-第七步：添加副本从节点"><a href="#1-4-7-第七步：添加副本从节点" class="headerlink" title="1.4.7    第七步：添加副本从节点"></a>1.4.7    第七步：添加副本从节点</h3><p>在主节点添加从节点，将其他成员加入到副本集</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.add(host, arbiterOnly)</span><br></pre></td></tr></table></figure><p>选项：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>host</td><td>string or document</td><td>要添加到副本集的新成员。 指定为字符串或配置文档：1）如果是一个字符串，则需要指定新成员的主机名和可选的端口号；2）如果是一个文档，请指定在members数组中找到的副本集成员配置文档。 您必须在成员配置文档中指定主机字段。有关文档配置字段的说明，详见下方文档：“主机成员的配置文档”</td></tr><tr><td>arbiterOnly</td><td>boolean</td><td>可选的。 仅在 <host> 值为字符串时适用。 如果为true，则添加的主机是仲裁者。</td></tr></tbody></table><p>主机成员的配置文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    _id: &lt;int&gt;,</span><br><span class="line">    host: &lt;string&gt;,     &#x2F;&#x2F; required</span><br><span class="line">    arbiterOnly: &lt;boolean&gt;,</span><br><span class="line">    buildIndexes: &lt;boolean&gt;,</span><br><span class="line">    hidden: &lt;boolean&gt;,</span><br><span class="line">    priority: &lt;number&gt;,</span><br><span class="line">    tags: &lt;document&gt;,</span><br><span class="line">    slaveDelay: &lt;int&gt;,</span><br><span class="line">    votes: &lt;number&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【示例】</p><p>将27018的副本节点添加到副本集中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; rs.add(&quot;180.76.159.126:27018&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1565761757, 1),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1565761757, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>“ok” : 1 ：说明添加成功。</li></ul><p>查看副本集状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;set&quot; : &quot;myrs&quot;,</span><br><span class="line">    &quot;date&quot; : ISODate(&quot;2019-08-14T05:50:05.738Z&quot;),</span><br><span class="line">    &quot;myState&quot; : 1,</span><br><span class="line">    &quot;term&quot; : NumberLong(1),</span><br><span class="line">    &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceId&quot; : -1,</span><br><span class="line">    &quot;heartbeatIntervalMillis&quot; : NumberLong(2000),</span><br><span class="line">    &quot;optimes&quot; : &#123;</span><br><span class="line">        &quot;lastCommittedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761798, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;readConcernMajorityOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761798, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;appliedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761798, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;durableOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761798, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;lastStableCheckpointTimestamp&quot; : Timestamp(1565761798, 1),</span><br><span class="line">    &quot;members&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 0,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 1,</span><br><span class="line">            &quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">            &quot;uptime&quot; : 1639,</span><br><span class="line">            &quot;optime&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1565761798, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDate&quot; : ISODate(&quot;2019-08-14T05:49:58Z&quot;),</span><br><span class="line">            &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : -1,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;electionTime&quot; : Timestamp(1565760476, 2),</span><br><span class="line">            &quot;electionDate&quot; : ISODate(&quot;2019-08-14T05:27:56Z&quot;),</span><br><span class="line">            &quot;configVersion&quot; : 2,</span><br><span class="line">            &quot;self&quot; : true,</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 1,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27018&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 2,</span><br><span class="line">            &quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">            &quot;uptime&quot; : 48,</span><br><span class="line">            &quot;optime&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1565761798, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDurable&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1565761798, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDate&quot; : ISODate(&quot;2019-08-14T05:49:58Z&quot;),</span><br><span class="line">            &quot;optimeDurableDate&quot; : ISODate(&quot;2019-08-14T05:49:58Z&quot;),</span><br><span class="line">            &quot;lastHeartbeat&quot; : ISODate(&quot;2019-08-14T05:50:05.294Z&quot;),</span><br><span class="line">            &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2019-08-</span><br><span class="line">            14T05:50:05.476Z&quot;),</span><br><span class="line">            &quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncingTo&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : 0,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;configVersion&quot; : 2</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1565761798, 1),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1565761798, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>&quot;name&quot; : &quot;180.76.159.126:27018&quot;</code> 是第二个节点的名字，其角色是 <code>&quot;stateStr&quot; : &quot;SECONDARY&quot;</code></li></ul><h3 id="1-4-8-第八步：添加仲裁从节点"><a href="#1-4-8-第八步：添加仲裁从节点" class="headerlink" title="1.4.8    第八步：添加仲裁从节点"></a>1.4.8    第八步：添加仲裁从节点</h3><p>添加一个仲裁节点到副本集</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.addArb(host)</span><br></pre></td></tr></table></figure><p>将27019的仲裁节点添加到副本集中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; rs.addArb(&quot;180.76.159.126:27019&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1565761959, 1),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1565761959, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>&quot;ok&quot; : 1</code> ：说明添加成功。</li></ul><p>查看副本集状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;set&quot; : &quot;myrs&quot;,</span><br><span class="line">    &quot;date&quot; : ISODate(&quot;2019-08-14T05:53:27.198Z&quot;),</span><br><span class="line">    &quot;myState&quot; : 1,</span><br><span class="line">    &quot;term&quot; : NumberLong(1),</span><br><span class="line">    &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceId&quot; : -1,</span><br><span class="line">    &quot;heartbeatIntervalMillis&quot; : NumberLong(2000),</span><br><span class="line">    &quot;optimes&quot; : &#123;</span><br><span class="line">        &quot;lastCommittedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761998, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;readConcernMajorityOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761998, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;appliedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761998, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;durableOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1565761998, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;lastStableCheckpointTimestamp&quot; : Timestamp(1565761978, 1),</span><br><span class="line">    &quot;members&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 0,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 1,</span><br><span class="line">            &quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">            &quot;uptime&quot; : 1841,</span><br><span class="line">            &quot;optime&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1565761998, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDate&quot; : ISODate(&quot;2019-08-14T05:53:18Z&quot;),</span><br><span class="line">            &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : -1,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;electionTime&quot; : Timestamp(1565760476, 2),</span><br><span class="line">            &quot;electionDate&quot; : ISODate(&quot;2019-08-14T05:27:56Z&quot;),</span><br><span class="line">            &quot;configVersion&quot; : 3,</span><br><span class="line">            &quot;self&quot; : true,</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 1,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27018&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 2,</span><br><span class="line">            &quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">            &quot;uptime&quot; : 249,</span><br><span class="line">            &quot;optime&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1565761998, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDurable&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1565761998, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDate&quot; : ISODate(&quot;2019-08-14T05:53:18Z&quot;),</span><br><span class="line">            &quot;optimeDurableDate&quot; : ISODate(&quot;2019-08-14T05:53:18Z&quot;),</span><br><span class="line">            &quot;lastHeartbeat&quot; : ISODate(&quot;2019-08-14T05:53:25.668Z&quot;),</span><br><span class="line">            &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2019-08-14T05:53:26.702Z&quot;),</span><br><span class="line">            &quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncingTo&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : 0,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;configVersion&quot; : 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 2,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27019&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 7,</span><br><span class="line">            &quot;stateStr&quot; : &quot;ARBITER&quot;,</span><br><span class="line">            &quot;uptime&quot; : 47,</span><br><span class="line">            &quot;lastHeartbeat&quot; : ISODate(&quot;2019-08-14T05:53:25.668Z&quot;),</span><br><span class="line">            &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2019-08-14T05:53:25.685Z&quot;),</span><br><span class="line">            &quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : -1,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;configVersion&quot; : 3</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1565761998, 1),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1565761998, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>&quot;name&quot; : &quot;180.76.159.126:27019&quot;</code> 是第二个节点的名字，其角色是 <code>&quot;stateStr&quot; : &quot;ARBITER&quot;</code></li></ul><h2 id="1-5-副本集的数据读写操作"><a href="#1-5-副本集的数据读写操作" class="headerlink" title="1.5    副本集的数据读写操作"></a>1.5    副本集的数据读写操作</h2><p>目标：测试三个不同角色的节点的数据读写情况</p><p>登录主节点27017，写入和读取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost ~]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27017</span><br><span class="line">myrs:PRIMARY&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">myrs:PRIMARY&gt; db</span><br><span class="line">articledb</span><br><span class="line">myrs:PRIMARY&gt; db.comment.insert(&#123;&quot;articleid&quot;:&quot;100000&quot;,&quot;content&quot;:&quot;今天天气真好，阳光明媚&quot;,&quot;userid&quot;:&quot;1001&quot;,&quot;nickname&quot;:&quot;Rose&quot;,&quot;createdatetime&quot;:new Date()&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">myrs:PRIMARY&gt; db.comment.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5d4d2ae3068138b4570f53bf&quot;), &quot;articleid&quot; : &quot;100000&quot;,&quot;content&quot; : &quot;今天天气真好，阳光明媚&quot;, &quot;userid&quot; : &quot;1001&quot;, &quot;nickname&quot; : &quot;Rose&quot;,&quot;createdatetime&quot; : ISODate(&quot;2019-08-09T08:12:19.427Z&quot;) &#125;</span><br></pre></td></tr></table></figure><p>登录从节点27018</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost ~]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27018</span><br><span class="line">myrs:SECONDARY&gt; show dbs;</span><br><span class="line">2019-09-10T10:56:51.953+0800 E QUERY  [js] Error: listDatabases failed:&#123;</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1568084204, 1),</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;not master and slaveOk&#x3D;false&quot;,</span><br><span class="line">    &quot;code&quot; : 13435,</span><br><span class="line">    &quot;codeName&quot; : &quot;NotMasterNoSlaveOk&quot;,</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1568084204, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125; :</span><br><span class="line">_getErrorWithCode@src&#x2F;mongo&#x2F;shell&#x2F;utils.js:25:13</span><br><span class="line">Mongo.prototype.getDBs@src&#x2F;mongo&#x2F;shell&#x2F;mongo.js:139:1</span><br><span class="line">shellHelper.show@src&#x2F;mongo&#x2F;shell&#x2F;utils.js:882:13</span><br><span class="line">shellHelper@src&#x2F;mongo&#x2F;shell&#x2F;utils.js:766:15</span><br><span class="line">@(shellhelp2):1:1</span><br></pre></td></tr></table></figure><p>发现，不能读取集合的数据。当前从节点只是一个备份，不是奴隶节点，无法读取数据，写当然更不行。</p><p>因为默认情况下，从节点是没有读写权限的，可以增加读的权限，但需要进行设置</p><p>设置读操作权限：</p><p>说明：</p><p>设置为奴隶节点，允许在从成员上运行读的操作</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rs.slaveOk()</span><br><span class="line">#或</span><br><span class="line">rs.slaveOk(true)</span><br></pre></td></tr></table></figure><p>提示：</p><p>该命令是 <code>db.getMongo().setSlaveOk()</code> 的简化命令。</p><p>【示例】</p><p>在27018上设置作为奴隶节点权限，具备读权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs:SECONDARY&gt; rs.slaveOk()</span><br></pre></td></tr></table></figure><p>此时，在执行查询命令，运行成功！</p><p>但仍然不允许插入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">myrs:SECONDARY&gt; rs.slaveOk()</span><br><span class="line">myrs:SECONDARY&gt; show dbs;</span><br><span class="line">admin    0.000GB</span><br><span class="line">articledb  0.000GB</span><br><span class="line">config   0.000GB</span><br><span class="line">local    0.000GB</span><br><span class="line">myrs:SECONDARY&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">myrs:SECONDARY&gt; show collections</span><br><span class="line">comment</span><br><span class="line">myrs:SECONDARY&gt; db.comment.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5d7710c04cfd7eee2e3cdabe&quot;), &quot;articleid&quot; : &quot;100000&quot;,&quot;content&quot; : &quot;今天天气真好，阳光明媚&quot;, &quot;userid&quot; : &quot;1001&quot;, &quot;nickname&quot; : &quot;Rose&quot;,&quot;createdatetime&quot; : ISODate(&quot;2019-09-10T02:56:00.467Z&quot;) &#125;</span><br><span class="line">myrs:SECONDARY&gt; db.comment.insert(&#123;&quot;_id&quot;:&quot;1&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;我们不应该把清晨浪费在手机上，健康很重要，k一杯温水幸福你我他。&quot;,&quot;userid&quot;:&quot;1002&quot;,&quot;nickname&quot;:&quot;相忘于江湖&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-08-05T22:08:15.522Z&quot;),&quot;likenum&quot;:NumberInt(1000),&quot;state&quot;:&quot;1&quot;&#125;)</span><br><span class="line">WriteCommandError(&#123;</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1568084434, 1),</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;not master&quot;,</span><br><span class="line">    &quot;code&quot; : 10107,</span><br><span class="line">    &quot;codeName&quot; : &quot;NotMaster&quot;,</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1568084434, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在可实现了读写分离，让主插入数据，让从来读取数据。</p><p>如果要取消作为奴隶节点的读权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myrs:SECONDARY&gt; rs.slaveOk(false)</span><br><span class="line">myrs:SECONDARY&gt; db.comment.find()</span><br><span class="line">Error: error: &#123;</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1568084459, 1),</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;not master and slaveOk&#x3D;false&quot;,</span><br><span class="line">    &quot;code&quot; : 13435,</span><br><span class="line">    &quot;codeName&quot; : &quot;NotMasterNoSlaveOk&quot;,</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1568084459, 1),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仲裁者节点，不存放任何业务数据的，可以登录查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost ~]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27019</span><br><span class="line">myrs:ARBITER&gt; rs.slaveOk()</span><br><span class="line">myrs:ARBITER&gt; show dbs</span><br><span class="line">local  0.000GB</span><br><span class="line">myrs:ARBITER&gt; use local</span><br><span class="line">switched to db local</span><br><span class="line">myrs:ARBITER&gt; show collections</span><br><span class="line">replset.minvalid</span><br><span class="line">replset.oplogTruncateAfterPoint</span><br><span class="line">startup_log</span><br><span class="line">system.replset</span><br><span class="line">system.rollback.id</span><br><span class="line">myrs:ARBITER&gt;</span><br></pre></td></tr></table></figure><p>发现，只存放副本集配置等数据。</p><h2 id="1-6-主节点的选举原则"><a href="#1-6-主节点的选举原则" class="headerlink" title="1.6    主节点的选举原则"></a>1.6    主节点的选举原则</h2><p>MongoDB在副本集中，会自动进行主节点的选举，主节点选举的触发条件：</p><ul><li>主节点故障</li><li>主节点网络不可达（默认心跳信息为10秒）</li><li>人工干预（rs.stepDown(600)）</li></ul><p>一旦触发选举，就要根据一定规则来选主节点。</p><p>选举规则是根据票数来决定谁获胜：</p><ul><li><p>票数最高，且获得了 “大多数”成员的投票支持的节点获胜。</p><p>“大多数”的定义为：假设复制集内投票成员数量为N，则大多数为 N/2 + 1。例如：3个投票成员，则大多数的值是2。当复制集内存活成员数量不足大多数时，整个复制集将无法选举出Primary，复制集将无法提供写服务，处于只读状态。</p></li><li><p>若票数相同，且都获得了 “大多数”成员的投票支持的，数据新的节点获胜。</p><p>数据的新旧是通过操作日志oplog来对比的。</p></li></ul><p>在获得票数的时候，优先级（priority）参数影响重大。</p><p>可以通过设置优先级（priority）来设置额外票数。优先级即权重，取值为0-1000，相当于可额外增加0-1000的票数，优先级的值越大，就越可能获得多数成员的投票（votes）数。指定较高的值可使成员更有资格成为主要成员，更低的值可使成员更不符合条件。</p><p>默认情况下，优先级的值是1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; rs.conf()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : &quot;myrs&quot;,</span><br><span class="line">    &quot;version&quot; : 3,</span><br><span class="line">    &quot;protocolVersion&quot; : NumberLong(1),</span><br><span class="line">    &quot;writeConcernMajorityJournalDefault&quot; : true,</span><br><span class="line">    &quot;members&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 0,</span><br><span class="line">            &quot;host&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">            &quot;arbiterOnly&quot; : false,</span><br><span class="line">            &quot;buildIndexes&quot; : true,</span><br><span class="line">            &quot;hidden&quot; : false,</span><br><span class="line">            &quot;priority&quot; : 1,</span><br><span class="line">            &quot;tags&quot; : &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">            &quot;votes&quot; : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 1,</span><br><span class="line">            &quot;host&quot; : &quot;180.76.159.126:27018&quot;,</span><br><span class="line">            &quot;arbiterOnly&quot; : false,</span><br><span class="line">            &quot;buildIndexes&quot; : true,</span><br><span class="line">            &quot;hidden&quot; : false,</span><br><span class="line">            &quot;priority&quot; : 1,</span><br><span class="line">            &quot;tags&quot; : &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">            &quot;votes&quot; : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 2,</span><br><span class="line">            &quot;host&quot; : &quot;180.76.159.126:27019&quot;,</span><br><span class="line">            &quot;arbiterOnly&quot; : true,</span><br><span class="line">            &quot;buildIndexes&quot; : true,</span><br><span class="line">            &quot;hidden&quot; : false,</span><br><span class="line">            &quot;priority&quot; : 0,</span><br><span class="line">            &quot;tags&quot; : &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">            &quot;votes&quot; : 1</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;chainingAllowed&quot; : true,</span><br><span class="line">        &quot;heartbeatIntervalMillis&quot; : 2000,</span><br><span class="line">        &quot;heartbeatTimeoutSecs&quot; : 10,</span><br><span class="line">        &quot;electionTimeoutMillis&quot; : 10000,</span><br><span class="line">        &quot;catchUpTimeoutMillis&quot; : -1,</span><br><span class="line">        &quot;catchUpTakeoverDelayMillis&quot; : 30000,</span><br><span class="line">        &quot;getLastErrorModes&quot; : &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;getLastErrorDefaults&quot; : &#123;</span><br><span class="line">            &quot;w&quot; : 1,</span><br><span class="line">            &quot;wtimeout&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;replicaSetId&quot; : ObjectId(&quot;5d539bdcd6a308e600d126bb&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，主节点和副本节点的优先级各为 1，即，默认可以认为都已经有了一票。但选举节点，优先级是0，（要注意是，官方说了，选举节点的优先级必须是0，不能是别的值。即不具备选举权，但具有投票权）</p><p>【了解】修改优先级</p><p>比如，下面提升从节点的优先级：</p><p>1）先将配置导入cfg变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myrs:SECONDARY&gt; cfg&#x3D;rs.conf()</span><br></pre></td></tr></table></figure><p>2 ）然后修改值（ID号默认从0开始）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myrs:SECONDARY&gt; cfg.members[1].priority&#x3D;2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>3 ）重新加载配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myrs:SECONDARY&gt; rs.reconfig(cfg)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br></pre></td></tr></table></figure><p>稍等片刻会重新开始选举。</p><h2 id="1-7-故障测试"><a href="#1-7-故障测试" class="headerlink" title="1.7    故障测试"></a>1.7    故障测试</h2><h3 id="1-7-1-副本节点故障测试"><a href="#1-7-1-副本节点故障测试" class="headerlink" title="1.7.1    副本节点故障测试"></a>1.7.1    副本节点故障测试</h3><p>关闭27018副本节点：</p><p>发现，主节点和仲裁节点对27018的心跳失败。因为主节点还在，因此，没有触发投票选举。</p><p>如果此时，在主节点写入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insert(&#123;&quot;_id&quot;:&quot;1&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;我们不应该把清晨浪费在手机上，健康很重要，一杯温水幸福你我他。&quot;,&quot;userid&quot;:&quot;1002&quot;,&quot;nickname&quot;:&quot;相忘于江湖&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-08-05T22:08:15.522Z&quot;),&quot;likenum&quot;:NumberInt(1000),&quot;state&quot;:&quot;1&quot;&#125;)</span><br></pre></td></tr></table></figure><p>再启动从节点，会发现，主节点写入的数据，会自动同步给从节点。</p><h3 id="1-7-2-主节点故障测试"><a href="#1-7-2-主节点故障测试" class="headerlink" title="1.7.2    主节点故障测试"></a>1.7.2    主节点故障测试</h3><p>关闭27017节点</p><p>发现，从节点和仲裁节点对27017的心跳失败，当失败超过10秒，此时因为没有主节点了，会自动发起投票。</p><p>而副本节点只有27018，因此，候选人只有一个就是27018，开始投票。</p><p>27019向27018投了一票，27018本身自带一票，因此共两票，超过了“大多数”</p><p>27019是仲裁节点，没有选举权，27018不向其投票，其票数是0.</p><p>最终结果，27018成为主节点。具备读写功能。</p><p>在27018写入数据查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insert(&#123;&quot;_id&quot;:&quot;2&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;我夏天空腹喝凉开水，冬天喝温开水&quot;,&quot;userid&quot;:&quot;1005&quot;,&quot;nickname&quot;:&quot;伊人憔悴&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-08-05T23:58:51.485Z&quot;),&quot;likenum&quot;:NumberInt(888),&quot;state&quot;:&quot;1&quot;&#125;)</span><br></pre></td></tr></table></figure><p>再启动 27017节点，发现27017变成了从节点，27018仍保持主节点。</p><p>登录27017节点，发现是从节点了，数据自动从27018同步。</p><p>从而实现了高可用。</p><h3 id="1-7-3-仲裁节点和主节点故障"><a href="#1-7-3-仲裁节点和主节点故障" class="headerlink" title="1.7.3    仲裁节点和主节点故障"></a>1.7.3    仲裁节点和主节点故障</h3><p>先关掉仲裁节点27019，</p><p>关掉现在的主节点27018</p><p>登录27017后，发现，27017仍然是从节点，副本集中没有主节点了，导致此时，副本集是只读状态，无法写入。</p><p>为啥不选举了？因为27017的票数，没有获得大多数，即没有大于等于2，它只有默认的一票（优先级是1）</p><p>如果要触发选举，随便加入一个成员即可。</p><ul><li>如果只加入 27019仲裁节点成员，则主节点一定是27017，因为没得选了，仲裁节点不参与选举，但参与投票。（不演示）</li><li>如果只加入 27018节点，会发起选举。因为27017和27018都是两票，则按照谁数据新，谁当主节点。</li></ul><h3 id="1-7-4-仲裁节点和从节点故障"><a href="#1-7-4-仲裁节点和从节点故障" class="headerlink" title="1.7.4    仲裁节点和从节点故障"></a>1.7.4    仲裁节点和从节点故障</h3><p>先关掉仲裁节点27019，</p><p>关掉现在的副本节点27018</p><p>10秒后，27017主节点自动降级为副本节点。（服务降级）</p><p>副本集不可写数据了，已经故障了。</p><h2 id="1-8-Compass-连接副本集"><a href="#1-8-Compass-连接副本集" class="headerlink" title="1.8    Compass 连接副本集"></a>1.8    Compass 连接副本集</h2><p>compass连接：</p><p><img src="https://img-blog.csdnimg.cn/20200918165004924.png" alt="image-20200918102748168"></p><p><img src="https://img-blog.csdnimg.cn/202009181650221.png" alt="image-20200918102811874"></p><h2 id="1-9-SpringDataMongoDB-连接副本集"><a href="#1-9-SpringDataMongoDB-连接副本集" class="headerlink" title="1.9    SpringDataMongoDB 连接副本集"></a>1.9    SpringDataMongoDB 连接副本集</h2><p>副本集语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb:&#x2F;&#x2F;host1,host2,host3&#x2F;articledb?connect&#x3D;replicaSet&amp;slaveOk&#x3D;true&amp;replicaSet&#x3D;副本集名字</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>slaveOk=true ：开启副本节点读的功能，可实现读写分离。</li><li>connect=replicaSet ：自动到副本集中选择读写的主机。如果slaveOK是打开的，则实现了读写分离</li></ul><p>【示例】</p><p>连接 replica set 三台服务器 (端口 27017, 27018, 和27019)，直接连接第一个服务器，无论是replica set一部分或者主服务器或者从服务器，写入操作应用在主服务器 并且分布查询到从服务器。</p><p>修改配置文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment">#数据源配置</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">mongodb:</span></span><br><span class="line">            <span class="comment"># 主机地址</span></span><br><span class="line">            <span class="comment">#   host: 180.76.159.126</span></span><br><span class="line">            <span class="comment"># 数据库</span></span><br><span class="line">            <span class="comment">#   database: articledb</span></span><br><span class="line">            <span class="comment"># 默认端口是27017</span></span><br><span class="line">            <span class="comment">#   port: 27017</span></span><br><span class="line">            <span class="comment">#也可以使用uri连接</span></span><br><span class="line">            <span class="comment">#uri: mongodb://192.168.40.134:27017/articledb</span></span><br><span class="line">            <span class="comment"># 副本集的连接字符串</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">mongodb://180.76.159.126:27017,180.76.159.126:27018,180.76.159.126:27019/articledb?connect=replicaSet&amp;slaveOk=true&amp;replicaSet=myrs</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>主机必须是副本集中所有的主机，包括主节点、副本节点、仲裁节点。</p><p>SpringDataMongoDB自动实现了读写分离：</p><p>写操作时，只打开主节点连接；读操作是，同时打开主节点和从节点连接，但使用从节点获取数据。</p><p>完整的连接字符串的参考（了解）：</p><p>MongoDB客户端连接语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb:&#x2F;&#x2F;[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][&#x2F;[database][?options]]</span><br></pre></td></tr></table></figure><ul><li><strong>mongodb://</strong> 这是固定的格式，必须要指定。</li><li><strong>username:password@</strong> 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库</li><li><strong>host1</strong> 必须的指定至少一个host, host1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</li><li><strong>portX</strong> 可选的指定端口，如果不填，默认为27017</li><li><strong>/database</strong> 如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开test 数据库。</li><li><strong>?options</strong> 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&amp;或;（分号）隔开</li></ul><p>标准的连接格式包含了多个选项(options)，如下所示：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>replicaSet=name</td><td>验证replica set的名称。 Impliesconnect=replicaSet.</td></tr><tr><td>slaveOk=true|false</td><td>true:在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。false: 在connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。</td></tr><tr><td>safe=true|false</td><td>true: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。</td></tr><tr><td>w=n</td><td>驱动添加 { w : n } 到getLastError命令. 应用于safe=true。</td></tr><tr><td>wtimeoutMS=ms</td><td>驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe=true.</td></tr><tr><td>fsync=true|false</td><td>true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于safe=true.false: 驱动不会添加到getLastError命令中。</td></tr><tr><td>journal=true|false</td><td>如果设置为 true, 同步到 journal (在提交到数据库前写入到实体中).应用于 safe=true</td></tr><tr><td>connectTimeoutMS=ms</td><td>可以打开连接的时间</td></tr><tr><td>socketTimeoutMS=ms</td><td>发送和接受sockets的时间</td></tr></tbody></table><h1 id="2-分片集群-Sharded-Cluster"><a href="#2-分片集群-Sharded-Cluster" class="headerlink" title="2.    分片集群-Sharded Cluster"></a>2.    分片集群-Sharded Cluster</h1><h2 id="2-1-分片概念"><a href="#2-1-分片概念" class="headerlink" title="2.1    分片概念"></a>2.1    分片概念</h2><p>分片（sharding）是一种跨多台机器分布数据的方法， MongoDB使用分片来支持具有非常大的数据集和高吞吐量操作的部署。</p><p>换句话说：分片(sharding)是指将数据拆分，将其分散存在不同的机器上的过程。有时也用分区(partitioning)来表示这个概念。将数据分散到不同的机器上，不需要功能强大的大型计算机就可以储存更多的数据，处理更多的负载。</p><p>具有大型数据集或高吞吐量应用程序的数据库系统可以会挑战单个服务器的容量。例如，高查询率会耗尽服务器的CPU容量。工作集大小大于系统的RAM会强调磁盘驱动器的I / O容量。</p><p>有两种解决系统增长的方法：垂直扩展和水平扩展。</p><p>垂直扩展意味着增加单个服务器的容量，例如使用更强大的CPU，添加更多RAM或增加存储空间量。可用技术的局限性可能会限制单个机器对于给定工作负载而言足够强大。此外，基于云的提供商基于可用的硬件配置具有硬性上限。结果，垂直缩放有实际的最大值。</p><p>水平扩展意味着划分系统数据集并加载多个服务器，添加其他服务器以根据需要增加容量。虽然单个机器的总体速度或容量可能不高，但每台机器处理整个工作负载的子集，可能提供比单个高速大容量服务器更高的效率。扩展部署容量只需要根据需要添加额外的服务器，这可能比单个机器的高端硬件的总体成本更低。权衡是基础架构和部署维护的复杂性增加。</p><p>MongoDB支持通过分片进行水平扩展。</p><h2 id="2-2-分片集群包含的组件"><a href="#2-2-分片集群包含的组件" class="headerlink" title="2.2    分片集群包含的组件"></a>2.2    分片集群包含的组件</h2><p>MongoDB分片群集包含以下组件：</p><ul><li>分片（存储）：每个分片包含分片数据的子集。 每个分片都可以部署为副本集。</li><li>mongos （路由）：mongos充当查询路由器，在客户端应用程序和分片集群之间提供接口。</li><li>config servers （“调度”的配置）：配置服务器存储群集的元数据和配置设置。 从MongoDB 3.4开始，必须将配置服务器部署为副本集（CSRS）。</li></ul><p>下图描述了分片集群中组件的交互：</p><p><img src="https://img-blog.csdnimg.cn/20200918165044703.png" alt="image-20200918110216367"></p><p>MongoDB在集合级别对数据进行分片，将集合数据分布在集群中的分片上。</p><h2 id="2-3-分片集群架构目标"><a href="#2-3-分片集群架构目标" class="headerlink" title="2.3    分片集群架构目标"></a>2.3    分片集群架构目标</h2><p>两个分片节点副本集（3+3）+一个配置节点副本集（3）+两个路由节点（2），共11个服务节点。</p><p><img src="https://img-blog.csdnimg.cn/20200918165105108.png" alt="image-20200918110313173"></p><h2 id="2-4-分片（存储）节点副本集的创建"><a href="#2-4-分片（存储）节点副本集的创建" class="headerlink" title="2.4    分片（存储）节点副本集的创建"></a>2.4    分片（存储）节点副本集的创建</h2><p>所有的的配置文件都直接放到 sharded_cluster 的相应的子目录下面，默认配置文件名字：mongod.conf</p><h3 id="2-4-1-第一套副本集"><a href="#2-4-1-第一套副本集" class="headerlink" title="2.4.1    第一套副本集"></a>2.4.1    第一套副本集</h3><p>准备存放数据和日志的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------myshardrs01</span></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs01_27018/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs01_27018/data/db \ &amp;</span><br><span class="line"></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs01_27118/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs01_27118/data/db \ &amp;</span><br><span class="line"></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs01_27218/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs01_27218/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</span><br></pre></td></tr></table></figure><p>myshardrs01_27018 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27018/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27018/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27018/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#bindIp</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27018</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="comment">#副本集的名称</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myshardrs01</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="comment">#分片角色</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">shardsvr</span></span><br></pre></td></tr></table></figure><p>sharding.clusterRole：</p><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>configsvr</td><td>Start this instance as a  config server. The instance starts on port  27019 by default.</td></tr><tr><td>shardsvr</td><td>Start this instance as a shard . The instance starts on port  27018 by default.</td></tr></tbody></table><p>注意：</p><p>设置sharding.clusterRole需要mongod实例运行复制。 要将实例部署为副本集成员，请使用replSetName设置并指定副本集的名称。</p><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</span><br></pre></td></tr></table></figure><p>myshardrs01_27118 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27118/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27118/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27118/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27118</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myshardrs01</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">shardsvr</span></span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</span><br></pre></td></tr></table></figure><p>myshardrs01_27218 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27218/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27218/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs01_27218/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27218</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myshardrs01</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">shardsvr</span></span><br></pre></td></tr></table></figure><p>启动第一套副本集：一主一副本一仲裁</p><p>依次启动三个mongod服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123223</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line"></span><br><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123292</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line"></span><br><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123326</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>查看服务是否启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]<span class="comment"># ps -ef |grep mongod</span></span><br><span class="line">polkitd  61622  61604  0 7月31 ?    00:04:29 mongod --bind_ip_all</span><br><span class="line">root   123223    1  1 01:10 ?     00:00:01 /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</span><br><span class="line">root   123292    1  4 01:11 ?     00:00:00 /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</span><br><span class="line">root   123326    1  6 01:11 ?     00:00:00 /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</span><br></pre></td></tr></table></figure><h4 id="2-4-1-1-初始化副本集和创建主节点："><a href="#2-4-1-1-初始化副本集和创建主节点：" class="headerlink" title="2.4.1.1    初始化副本集和创建主节点："></a>2.4.1.1    初始化副本集和创建主节点：</h4><p>使用客户端命令连接任意一个节点，但这里尽量要连接主节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongo --host 180.76.159.126 --port 27018</span><br></pre></td></tr></table></figure><p>执行初始化副本集命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate()</span><br></pre></td></tr></table></figure><p>查看副本集情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.status()</span><br></pre></td></tr></table></figure><p>主节点配置查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><h4 id="2-4-1-2-添加副本节点"><a href="#2-4-1-2-添加副本节点" class="headerlink" title="2.4.1.2    添加副本节点"></a>2.4.1.2    添加副本节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.add(<span class="string">"180.76.159.126:27118"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-4-1-3-添加仲裁节点"><a href="#2-4-1-3-添加仲裁节点" class="headerlink" title="2.4.1.3    添加仲裁节点"></a>2.4.1.3    添加仲裁节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.addArb(<span class="string">"180.76.159.126:27218"</span>)</span><br></pre></td></tr></table></figure><p>查看副本集的配置情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">myshardrs01:PRIMARY&gt; rs.conf()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : &quot;myshardrs01&quot;,</span><br><span class="line">    &quot;version&quot; : 3,</span><br><span class="line">    &quot;protocolVersion&quot; : NumberLong(1),</span><br><span class="line">    &quot;writeConcernMajorityJournalDefault&quot; : true,</span><br><span class="line">    &quot;members&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 0,</span><br><span class="line">            &quot;host&quot; : &quot;180.76.159.126:27018&quot;,</span><br><span class="line">            &quot;arbiterOnly&quot; : false,</span><br><span class="line">            &quot;buildIndexes&quot; : true,</span><br><span class="line">            &quot;hidden&quot; : false,</span><br><span class="line">            &quot;priority&quot; : 1,</span><br><span class="line">            &quot;tags&quot; : &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">            &quot;votes&quot; : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 1,</span><br><span class="line">            &quot;host&quot; : &quot;180.76.159.126:27118&quot;,</span><br><span class="line">            &quot;arbiterOnly&quot; : false,</span><br><span class="line">            &quot;buildIndexes&quot; : true,</span><br><span class="line">            &quot;hidden&quot; : false,</span><br><span class="line">            &quot;priority&quot; : 1,</span><br><span class="line">            &quot;tags&quot; : &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">            &quot;votes&quot; : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 2,</span><br><span class="line">            &quot;host&quot; : &quot;180.76.159.126:27218&quot;,</span><br><span class="line">            &quot;arbiterOnly&quot; : true,</span><br><span class="line">            &quot;buildIndexes&quot; : true,</span><br><span class="line">            &quot;hidden&quot; : false,</span><br><span class="line">            &quot;priority&quot; : 0,</span><br><span class="line">            &quot;tags&quot; : &#123;</span><br><span class="line">            </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">            &quot;votes&quot; : 1</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h3 id="2-4-2-第二套副本集"><a href="#2-4-2-第二套副本集" class="headerlink" title="2.4.2    第二套副本集"></a>2.4.2    第二套副本集</h3><p>准备存放数据和日志的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------myshardrs02</span></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs02_27318/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs02_27318/data/db \ &amp;</span><br><span class="line"></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs02_27418/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs02_27418/data/db \ &amp;</span><br><span class="line"></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs02_27518/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myshardrs02_27518/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myshardrs02_27318/mongod.conf</span><br></pre></td></tr></table></figure><p>myshardrs02_27318 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27318/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27318/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27318/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27318</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myshardrs02</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">shardsvr</span></span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myshardrs02_27418/mongod.conf</span><br></pre></td></tr></table></figure><p>myshardrs02_27418 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27418/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27418/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27418/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27418</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myshardrs02</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">shardsvr</span></span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myshardrs02_27518/mongod.conf</span><br></pre></td></tr></table></figure><p>myshardrs02_27518 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27518/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27518/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myshardrs02_27518/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27518</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myshardrs02</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">shardsvr</span></span><br></pre></td></tr></table></figure><p>启动第二套副本集：一主一副本一仲裁</p><p>依次启动三个mongod服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27318/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123223</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line"></span><br><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27418/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123292</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line"></span><br><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27518/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123326</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>查看服务是否启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]<span class="comment"># ps -ef |grep mongod</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-1-初始化副本集和创建主节点"><a href="#2-4-2-1-初始化副本集和创建主节点" class="headerlink" title="2.4.2.1    初始化副本集和创建主节点"></a>2.4.2.1    初始化副本集和创建主节点</h4><p>使用客户端命令连接任意一个节点，但这里尽量要连接主节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongo --host 180.76.159.126 --port 27318</span><br></pre></td></tr></table></figure><p>执行初始化副本集命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate()</span><br></pre></td></tr></table></figure><p>查看副本集情况 (节选内容)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.status()</span><br></pre></td></tr></table></figure><p>主节点配置查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><h4 id="2-4-2-2-添加副本节点"><a href="#2-4-2-2-添加副本节点" class="headerlink" title="2.4.2.2    添加副本节点"></a>2.4.2.2    添加副本节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.add(&quot;180.76.159.126:27418&quot;)</span><br></pre></td></tr></table></figure><h4 id="2-4-2-3-添加仲裁节点"><a href="#2-4-2-3-添加仲裁节点" class="headerlink" title="2.4.2.3    添加仲裁节点"></a>2.4.2.3    添加仲裁节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.addArb(&quot;180.76.159.126:27518&quot;)</span><br></pre></td></tr></table></figure><p>查看副本集的配置情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">myshardrs02:PRIMARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;set&quot; : &quot;myshardrs02&quot;,</span><br><span class="line">    &quot;date&quot; : ISODate(&quot;2019-07-31T21:38:22.463Z&quot;),</span><br><span class="line">    &quot;myState&quot; : 1,</span><br><span class="line">    &quot;term&quot; : NumberLong(1),</span><br><span class="line">    &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">    &quot;syncSourceId&quot; : -1,</span><br><span class="line">    &quot;heartbeatIntervalMillis&quot; : NumberLong(2000),</span><br><span class="line">    &quot;optimes&quot; : &#123;</span><br><span class="line">        &quot;lastCommittedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;readConcernMajorityOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;appliedOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;durableOpTime&quot; : &#123;</span><br><span class="line">            &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">            &quot;t&quot; : NumberLong(1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;lastStableCheckpointTimestamp&quot; : Timestamp(1564609074, 1),</span><br><span class="line">    &quot;members&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 0,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27318&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 1,</span><br><span class="line">            &quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">            &quot;uptime&quot; : 5086,</span><br><span class="line">            &quot;optime&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDate&quot; : ISODate(&quot;2019-07-31T21:38:14Z&quot;),</span><br><span class="line">            &quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : -1,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;electionTime&quot; : Timestamp(1564604032, 2),</span><br><span class="line">            &quot;electionDate&quot; : ISODate(&quot;2019-07-31T20:13:52Z&quot;),</span><br><span class="line">            &quot;configVersion&quot; : 3,</span><br><span class="line">            &quot;self&quot; : true,</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 1,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27418&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 2,</span><br><span class="line">            &quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">            &quot;uptime&quot; : 4452,</span><br><span class="line">            &quot;optime&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDurable&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDate&quot; : ISODate(&quot;2019-07-31T21:38:14Z&quot;),</span><br><span class="line">            &quot;optimeDurableDate&quot; : ISODate(&quot;2019-07-31T21:38:14Z&quot;),</span><br><span class="line">            &quot;lastHeartbeat&quot; : ISODate(&quot;2019-07-31T21:38:21.178Z&quot;),</span><br><span class="line">            &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2019-07-31T21:38:20.483Z&quot;),</span><br><span class="line">            &quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncingTo&quot; : &quot;180.76.159.126:27518&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;180.76.159.126:27518&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : 2,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;configVersion&quot; : 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_id&quot; : 2,</span><br><span class="line">            &quot;name&quot; : &quot;180.76.159.126:27518&quot;,</span><br><span class="line">            &quot;health&quot; : 1,</span><br><span class="line">            &quot;state&quot; : 2,</span><br><span class="line">            &quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">            &quot;uptime&quot; : 4448,</span><br><span class="line">            &quot;optime&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDurable&quot; : &#123;</span><br><span class="line">                &quot;ts&quot; : Timestamp(1564609094, 1),</span><br><span class="line">                &quot;t&quot; : NumberLong(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;optimeDate&quot; : ISODate(&quot;2019-07-31T21:38:14Z&quot;),</span><br><span class="line">            &quot;optimeDurableDate&quot; : ISODate(&quot;2019-07-31T21:38:14Z&quot;),</span><br><span class="line">            &quot;lastHeartbeat&quot; : ISODate(&quot;2019-07-31T21:38:21.178Z&quot;),</span><br><span class="line">            &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2019-07-31T21:38:22.096Z&quot;),</span><br><span class="line">            &quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">            &quot;lastHeartbeatMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;syncingTo&quot; : &quot;180.76.159.126:27318&quot;,</span><br><span class="line">            &quot;syncSourceHost&quot; : &quot;180.76.159.126:27318&quot;,</span><br><span class="line">            &quot;syncSourceId&quot; : 0,</span><br><span class="line">            &quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">            &quot;configVersion&quot; : 3</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h2 id="2-5-配置节点副本集的创建"><a href="#2-5-配置节点副本集的创建" class="headerlink" title="2.5    配置节点副本集的创建"></a>2.5    配置节点副本集的创建</h2><p>第一步：准备存放数据和日志的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------configrs</span></span><br><span class="line"><span class="comment">#建立数据节点data和日志目录</span></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myconfigrs_27019/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myconfigrs_27019/data/db \ &amp;</span><br><span class="line"></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myconfigrs_27119/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myconfigrs_27119/data/db \ &amp;</span><br><span class="line"></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myconfigrs_27219/<span class="built_in">log</span> \ &amp;</span><br><span class="line">mkdir -p /mongodb/sharded_cluster/myconfigrs_27219/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myconfigrs_27019/mongod.conf</span><br></pre></td></tr></table></figure><p>myconfigrs_27019 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27019/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27019/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27019/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27019</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myconfigrs</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">configsvr</span></span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myconfigrs_27119/mongod.conf</span><br></pre></td></tr></table></figure><p>myconfigrs_27119</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27119/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27119/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27119/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27119</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myconfigrs</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">configsvr</span></span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mongodb/sharded_cluster/myconfigrs_27219/mongod.conf</span><br></pre></td></tr></table></figure><p>myconfigrs_27219</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27219/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27219/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/sharded_cluster/myconfigrs_27219/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27219</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">    <span class="attr">replSetName:</span> <span class="string">myconfigrs</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">clusterRole:</span> <span class="string">configsvr</span></span><br></pre></td></tr></table></figure><p>启动配置副本集：一主两副本</p><p>依次启动三个mongod服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27019/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123223</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line"></span><br><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27119/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123292</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line"></span><br><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27219/mongod.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 123326</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>查看服务是否启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]<span class="comment"># ps -ef |grep mongod</span></span><br></pre></td></tr></table></figure><h3 id="2-5-1-初始化副本集和创建主节点"><a href="#2-5-1-初始化副本集和创建主节点" class="headerlink" title="2.5.1    初始化副本集和创建主节点"></a>2.5.1    初始化副本集和创建主节点</h3><p>使用客户端命令连接任意一个节点，但这里尽量要连接主节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongo --host 180.76.159.126 --port 27019</span><br></pre></td></tr></table></figure><p>执行初始化副本集命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate()</span><br></pre></td></tr></table></figure><p>查看副本集情况 (节选内容)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.status()</span><br></pre></td></tr></table></figure><p>主节点配置查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><h3 id="2-5-2-添加两个副本节点"><a href="#2-5-2-添加两个副本节点" class="headerlink" title="2.5.2    添加两个副本节点"></a>2.5.2    添加两个副本节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myshardrs01:PRIMARY&gt; rs.add(&quot;180.76.159.126:27119&quot;)</span><br><span class="line">myshardrs01:PRIMARY&gt; rs.add(&quot;180.76.159.126:27219&quot;)</span><br></pre></td></tr></table></figure><p>查看副本集的配置情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myshardrs01:PRIMARY&gt; rs.conf()</span><br><span class="line">myshardrs01:PRIMARY&gt; rs.status()</span><br></pre></td></tr></table></figure><h2 id="2-6-路由节点的创建和操作"><a href="#2-6-路由节点的创建和操作" class="headerlink" title="2.6    路由节点的创建和操作"></a>2.6    路由节点的创建和操作</h2><h3 id="2-6-1-第一个路由节点的创建和连接"><a href="#2-6-1-第一个路由节点的创建和连接" class="headerlink" title="2.6.1    第一个路由节点的创建和连接"></a>2.6.1    第一个路由节点的创建和连接</h3><p>第一步：准备存放数据和日志的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------mongos01</span></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/mymongos_27017/<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>mymongos_27017节点：</p><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /mongodb/sharded_cluster/mymongos_27017/mongos.conf</span><br></pre></td></tr></table></figure><p>mongos.conf：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/mymongos_27017/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">/mongodb/sharded_cluster/mymongos_27017/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#bindIp</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="comment">#指定配置节点副本集</span></span><br><span class="line">    <span class="attr">configDB:</span> <span class="string">myconfigrs/180.76.159.126:27019,180.76.159.126:27119,180.76.159.126:27219</span></span><br></pre></td></tr></table></figure><p>启动mongos：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]<span class="comment"># /usr/local/mongodb/bin/mongos -f /mongodb/sharded_cluster/mymongos_27017/mongos.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 129874</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>提示：启动如果失败，可以查看 log目录下的日志，查看失败原因。</p><p>客户端登录mongos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongo --host 180.76.159.126 --port 27017</span><br></pre></td></tr></table></figure><p>此时，写不进去数据，如果写数据会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; use aadb</span><br><span class="line">switched to db aadb</span><br><span class="line">mongos&gt; db.aa.insert(&#123;aa:&quot;aa&quot;&#125;)</span><br><span class="line">WriteCommandError(&#123;</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;unable to initialize targeter for write op for collection aa.aa :: caused by :: Database aa not found :: caused by :: No shards found&quot;,</span><br><span class="line">    &quot;code&quot; : 70,</span><br><span class="line">    &quot;codeName&quot; : &quot;ShardNotFound&quot;,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1564600123, 2),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">    &quot;clusterTime&quot; : Timestamp(1564600123, 2),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>原因：通过路由节点操作，现在只是连接了配置节点，还没有连接分片数据节点，因此无法写入业务数据。</p><h3 id="2-6-2-在路由节点上进行分片配置操作"><a href="#2-6-2-在路由节点上进行分片配置操作" class="headerlink" title="2.6.2    在路由节点上进行分片配置操作"></a>2.6.2    在路由节点上进行分片配置操作</h3><p>使用命令添加分片：</p><h4 id="2-6-2-1-添加分片："><a href="#2-6-2-1-添加分片：" class="headerlink" title="2.6.2.1    添加分片："></a>2.6.2.1    添加分片：</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh.addShard(&quot;IP:Port&quot;)</span><br></pre></td></tr></table></figure><p>将第一套分片副本集添加进来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt;sh.addShard(&quot;myshardrs01&#x2F;192.168.0.2:27018,180.76.159.126:27118,180.76.159.126:27218&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;shardAdded&quot; : &quot;myshardrs01&quot;,</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1564611970, 4),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">    &quot;clusterTime&quot; : Timestamp(1564611970, 4),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看分片状态情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.status()</span><br><span class="line">--- Sharding Status ---</span><br><span class="line">    sharding version: &#123;</span><br><span class="line">        &quot;_id&quot; : 1,</span><br><span class="line">        &quot;minCompatibleVersion&quot; : 5,</span><br><span class="line">        &quot;currentVersion&quot; : 6,</span><br><span class="line">        &quot;clusterId&quot; : ObjectId(&quot;5d4211b798f3f9a48522c68b&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    shards:</span><br><span class="line">        &#123;  &quot;_id&quot; : &quot;myshardrs01&quot;,  &quot;host&quot; : &quot;myshardrs01&#x2F;180.76.159.126:27018,180.76.159.126:27118&quot;,  &quot;state&quot; : 1 &#125;</span><br><span class="line">    active mongoses:</span><br><span class="line">    &quot;4.0.10&quot; : 1</span><br><span class="line">    autosplit:</span><br><span class="line">    Currently enabled: yes</span><br><span class="line">    balancer:</span><br><span class="line">        Currently enabled:  yes</span><br><span class="line">        Currently running:  no</span><br><span class="line">        Failed balancer rounds in last 5 attempts:  0</span><br><span class="line">        Migration Results for the last 24 hours:</span><br><span class="line">        No recent migrations</span><br><span class="line">    databases:</span><br><span class="line">    &#123;  &quot;_id&quot; : &quot;config&quot;,  &quot;primary&quot; : &quot;config&quot;,  &quot;partitioned&quot; : true &#125;</span><br></pre></td></tr></table></figure><p>继续将第二套分片副本集添加进来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt;sh.addShard(&quot;myshardrs02&#x2F;192.168.0.2:27318,180.76.159.126:27418,180.76.159.126:27518&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;shardAdded&quot; : &quot;myshardrs02&quot;,</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1564612147, 5),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">    &quot;clusterTime&quot; : Timestamp(1564612147, 5),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看分片状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.status()</span><br><span class="line">--- Sharding Status ---</span><br><span class="line">    sharding version: &#123;</span><br><span class="line">        &quot;_id&quot; : 1,</span><br><span class="line">        &quot;minCompatibleVersion&quot; : 5,</span><br><span class="line">        &quot;currentVersion&quot; : 6,</span><br><span class="line">        &quot;clusterId&quot; : ObjectId(&quot;5d4211b798f3f9a48522c68b&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    shards:</span><br><span class="line">        &#123;  &quot;_id&quot; : &quot;myshardrs01&quot;,  &quot;host&quot; : &quot;myshardrs01&#x2F;180.76.159.126:27018,180.76.159.126:27118&quot;,  &quot;state&quot; : 1 &#125;</span><br><span class="line">        &#123;  &quot;_id&quot; : &quot;myshardrs02&quot;,  &quot;host&quot; : &quot;myshardrs02&#x2F;180.76.159.126:27318,180.76.159.126:27418&quot;,  &quot;state&quot; : 1 &#125;</span><br><span class="line">    active mongoses:</span><br><span class="line">    &quot;4.0.10&quot; : 1</span><br><span class="line">    autosplit:</span><br><span class="line">    Currently enabled: yes</span><br><span class="line">    balancer:</span><br><span class="line">        Currently enabled:  yes</span><br><span class="line">        Currently running:  no</span><br><span class="line">        Failed balancer rounds in last 5 attempts:  0</span><br><span class="line">        Migration Results for the last 24 hours:</span><br><span class="line">        No recent migrations</span><br><span class="line">    databases:</span><br><span class="line">    &#123;  &quot;_id&quot; : &quot;config&quot;,  &quot;primary&quot; : &quot;config&quot;,  &quot;partitioned&quot; : true &#125;</span><br></pre></td></tr></table></figure><p>提示：如果添加分片失败，需要先手动移除分片，检查添加分片的信息的正确性后，再次添加分片。</p><p>移除分片参考(了解)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.runCommand( &#123; removeShard: &quot;myshardrs02&quot; &#125; )</span><br></pre></td></tr></table></figure><p>注意：如果只剩下最后一个 shard，是无法删除的</p><p>移除时会自动转移分片数据，需要一个时间过程。</p><p>完成后，再次执行删除分片命令才能真正删除。</p><h4 id="2-6-2-2-开启分片功能"><a href="#2-6-2-2-开启分片功能" class="headerlink" title="2.6.2.2    开启分片功能"></a>2.6.2.2    开启分片功能</h4><p>sh.enableSharding(“库名”)、sh.shardCollection(“库名.集合名”,{“key”:1})</p><p>在mongos上的articledb数据库配置sharding:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.enableSharding(&quot;articledb&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1564612296, 5),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1564612296, 5),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看分片状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.status()</span><br><span class="line">--- Sharding Status ---</span><br><span class="line">    sharding version: &#123;</span><br><span class="line">        &quot;_id&quot; : 1,</span><br><span class="line">        &quot;minCompatibleVersion&quot; : 5,</span><br><span class="line">        &quot;currentVersion&quot; : 6,</span><br><span class="line">        &quot;clusterId&quot; : ObjectId(&quot;5d4211b798f3f9a48522c68b&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    shards:</span><br><span class="line">        &#123;  &quot;_id&quot; : &quot;myshardrs01&quot;,  &quot;host&quot; : &quot;myshardrs01&#x2F;180.76.159.126:27018,180.76.159.126:27118&quot;,  &quot;state&quot; : 1 &#125;</span><br><span class="line">        &#123;  &quot;_id&quot; : &quot;myshardrs02&quot;,  &quot;host&quot; : &quot;myshardrs02&#x2F;180.76.159.126:27318,180.76.159.126:27418&quot;,  &quot;state&quot; : 1 &#125;</span><br><span class="line">    active mongoses:</span><br><span class="line">    &quot;4.0.10&quot; : 1</span><br><span class="line">    autosplit:</span><br><span class="line">    Currently enabled: yes</span><br><span class="line">    balancer:</span><br><span class="line">        Currently enabled:  yes</span><br><span class="line">        Currently running:  no</span><br><span class="line">        Failed balancer rounds in last 5 attempts:  0</span><br><span class="line">        Migration Results for the last 24 hours:</span><br><span class="line">        No recent migrations</span><br><span class="line">    databases:</span><br><span class="line">        &#123;  &quot;_id&quot; : &quot;articledb&quot;,  &quot;primary&quot; : &quot;myshardrs02&quot;,  &quot;partitioned&quot; : true, &quot;version&quot; : &#123;  &quot;uuid&quot; : UUID(&quot;788c9a3b-bb6a-4cc2-a597-974694772986&quot;), &quot;lastMod&quot; : 1 &#125; &#125;</span><br><span class="line">        &#123;  &quot;_id&quot; : &quot;config&quot;,  &quot;primary&quot; : &quot;config&quot;,  &quot;partitioned&quot; : true &#125;</span><br><span class="line">            config.system.sessions</span><br><span class="line">                shard key: &#123; &quot;_id&quot; : 1 &#125;</span><br><span class="line">                unique: false</span><br><span class="line">                balancing: true</span><br><span class="line">                chunks:</span><br><span class="line">            myshardrs01   1</span><br><span class="line">            &#123; &quot;_id&quot; : &#123; &quot;$minKey&quot; : 1 &#125; &#125; --&gt;&gt; &#123; &quot;_id&quot; : &#123; &quot;$maxKey&quot; : 1 &#125; &#125; on : myshardrs01 Timestamp(1, 0)</span><br></pre></td></tr></table></figure><h4 id="2-6-2-3-集合分片"><a href="#2-6-2-3-集合分片" class="headerlink" title="2.6.2.3    集合分片"></a>2.6.2.3    集合分片</h4><p>对集合分片，你必须使用 sh.shardCollection() 方法指定集合和分片键</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh.shardCollection(namespace, key, unique)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>namespace</td><td>string</td><td>要（分片）共享的目标集合的命名空间，格式： <database>.<collection></td></tr><tr><td>key</td><td>document</td><td>用作分片键的索引规范文档。shard键决定MongoDB如何在shard之间分发文档。除非集合为空，否则索引必须在shardcollection命令之前存在。如果集合为空，则MongoDB在对集合进行分片之前创建索引，前提是支持分片键的索引不存在。简单的说：由包含字段和该字段的索引遍历方向的文档组成。</td></tr><tr><td>unique</td><td>boolean</td><td>当值为true情况下，片键字段上会限制为确保是唯一索引。哈希策略片键不支持唯一索引。默认是false。</td></tr></tbody></table><p>对集合进行分片时,你需要选择一个 片键（Shard Key） , shard key 是每条记录都必须包含的,且建立了索引的单个字段或复合字段,MongoDB按照片键将数据划分到不同的 数据块 中,并将 数据块 均衡地分布到所有分片中.为了按照片键划分数据块,MongoDB使用 基于哈希的分片方式（随机平均分配）或者基于范围的分片方式（数值大小分配） 。</p><p>用什么字段当片键都可以，如：nickname作为片键，但一定是必填字段。</p><p><strong>分片规则一：哈希策略</strong></p><p>对于 基于哈希的分片 ,MongoDB计算一个字段的哈希值,并用这个哈希值来创建数据块.</p><p>在使用基于哈希分片的系统中,拥有”相近”片键的文档 很可能不会 存储在同一个数据块中,因此数据的分离性更好一些.</p><p>使用nickname作为片键，根据其值的哈希值进行数据分片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.shardCollection(&quot;articledb.comment&quot;,&#123;&quot;nickname&quot;:&quot;hashed&quot;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;collectionsharded&quot; : &quot;articledb.comment&quot;,</span><br><span class="line">    &quot;collectionUUID&quot; : UUID(&quot;ddea6ed8-ee61-4693-bd16-196acc3a45e8&quot;),</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1564612840, 28),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1564612840, 28),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看分片状态：sh.status()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> databases:</span><br><span class="line"> &#123;  &quot;_id&quot; : &quot;articledb&quot;,  &quot;primary&quot; : &quot;myshardrs02&quot;,  &quot;partitioned&quot; : true,  &quot;version&quot; : &#123;  &quot;uuid&quot; : UUID(&quot;251436b7-86c2-4cd8-9a88-70874af29364&quot;), &quot;lastMod&quot; : 1 &#125; &#125;</span><br><span class="line">     articledb.comment</span><br><span class="line">         shard key: &#123; &quot;nickname&quot; : &quot;hashed&quot; &#125;</span><br><span class="line">         unique: false</span><br><span class="line">         balancing: true</span><br><span class="line">         chunks:</span><br><span class="line">             myshardrs01   2</span><br><span class="line">             myshardrs02   2</span><br><span class="line">         &#123; &quot;nickname&quot; : &#123; &quot;$minKey&quot; : 1 &#125; &#125; --&gt;&gt; &#123; &quot;nickname&quot; : NumberLong(&quot;-4611686018427387902&quot;) &#125; on : myshardrs01 Timestamp(1, 0)</span><br><span class="line">         &#123; &quot;nickname&quot; : NumberLong(&quot;-4611686018427387902&quot;) &#125; --&gt;&gt; &#123; &quot;nickname&quot; : NumberLong(0) &#125; on : myshardrs01 Timestamp(1, 1)</span><br><span class="line">         &#123; &quot;nickname&quot; : NumberLong(0) &#125; --&gt;&gt; &#123; &quot;nickname&quot; : NumberLong(&quot;4611686018427387902&quot;) &#125; on : myshardrs02 Timestamp(1, 2)</span><br><span class="line">         &#123; &quot;nickname&quot; : NumberLong(&quot;4611686018427387902&quot;) &#125; --&gt;&gt; &#123; &quot;nickname&quot; : &#123; &quot;$maxKey&quot; : 1 &#125; &#125; on : myshardrs02 Timestamp(1, 3)</span><br><span class="line"></span><br><span class="line">&#123;  &quot;_id&quot; : &quot;config&quot;,  &quot;primary&quot; : &quot;config&quot;,  &quot;partitioned&quot; : true &#125;</span><br><span class="line">    config.system.sessions</span><br><span class="line">        shard key: &#123; &quot;_id&quot; : 1 &#125;</span><br><span class="line">        unique: false</span><br><span class="line">        balancing: true</span><br><span class="line">        chunks:</span><br><span class="line">        myshardrs01   1</span><br><span class="line">    &#123; &quot;_id&quot; : &#123; &quot;$minKey&quot; : 1 &#125; &#125; --&gt;&gt; &#123; &quot;_id&quot; : &#123; &quot;$maxKey&quot; : 1 &#125; &#125; on : myshardrs01 Timestamp(1, 0)</span><br></pre></td></tr></table></figure><p><strong>分片规则二：范围策略</strong></p><p>对于 基于范围的分片 ,MongoDB按照片键的范围把数据分成不同部分.假设有一个数字的片键:想象一个从负无穷到正无穷的直线,每一个片键的值都在直线上画了一个点.MongoDB把这条直线划分为更短的不重叠的片段,并称之为 数据块 ,每个数据块包含了片键在一定范围内的数据.</p><p>在使用片键做范围划分的系统中,拥有”相近”片键的文档很可能存储在同一个数据块中,因此也会存储在同一个分片中.</p><p>如使用作者年龄字段作为片键，按照点赞数的值进行分片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.shardCollection(&quot;articledb.author&quot;,&#123;&quot;age&quot;:1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;collectionsharded&quot; : &quot;articledb.author&quot;,</span><br><span class="line">    &quot;collectionUUID&quot; : UUID(&quot;9a47bdaa-213a-4039-9c18-e70bfc369df7&quot;),</span><br><span class="line">    &quot;ok&quot; : 1,</span><br><span class="line">    &quot;operationTime&quot; : Timestamp(1567512803, 13),</span><br><span class="line">    &quot;$clusterTime&quot; : &#123;</span><br><span class="line">        &quot;clusterTime&quot; : Timestamp(1567512803, 13),</span><br><span class="line">        &quot;signature&quot; : &#123;</span><br><span class="line">            &quot;hash&quot; : BinData(0,&quot;eE9QT5yE5sL1Tyr7+3U8GRy5+5Q&#x3D;&quot;),</span><br><span class="line">            &quot;keyId&quot; : NumberLong(&quot;6732061237309341726&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意的是：</p><ul><li>一个集合只能指定一个片键，否则报错。</li><li>一旦对一个集合分片，分片键和分片值就不可改变。 如：不能给集合选择不同的分片键、不能更新分片键的值。</li><li>根据age索引进行分配数据。</li></ul><p>查看分片状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">articledb.author</span><br><span class="line">    shard key: &#123; &quot;age&quot; : 1 &#125;</span><br><span class="line">    unique: false</span><br><span class="line">    balancing: true</span><br><span class="line">    chunks:</span><br><span class="line">    myshardrs01 1</span><br><span class="line">    &#123; &quot;age&quot; : &#123; &quot;$minKey&quot; : 1 &#125; &#125; --&gt;&gt; &#123; &quot;age&quot; : &#123; &quot;$maxKey&quot; : 1 &#125; &#125; on : myshardrs01 Timestamp(1, 0)</span><br></pre></td></tr></table></figure><p>基于范围的分片方式与基于哈希的分片方式性能对比：</p><p>基于范围的分片方式提供了更高效的范围查询,给定一个片键的范围,分发路由可以很简单地确定哪个数据块存储了请求需要的数据,并将请求转发到相应的分片中.</p><p>不过,基于范围的分片会导致数据在不同分片上的不均衡,有时候,带来的消极作用会大于查询性能的积极作用.比如,如果片键所在的字段是线性增长的,一定时间内的所有请求都会落到某个固定的数据块中,最终导致分布在同一个分片中.在这种情况下,一小部分分片承载了集群大部分的数据,系统并不能很好地进行扩展.</p><p>与此相比,基于哈希的分片方式以范围查询性能的损失为代价,保证了集群中数据的均衡.哈希值的随机性使数据随机分布在每个数据块中,因此也随机分布在不同分片中.但是也正由于随机性,一个范围查询很难确定应该请求哪些分片,通常为了返回需要的结果,需要请求所有分片.</p><p>如无特殊情况，一般推荐使用 Hash Sharding。</p><p>而使用 _id 作为片键是一个不错的选择，因为它是必有的，你可以使用数据文档 _id 的哈希作为片键。</p><p>这个方案能够是的读和写都能够平均分布，并且它能够保证每个文档都有不同的片键所以数据块能够很精细。</p><p>似乎还是不够完美，因为这样的话对多个文档的查询必将命中所有的分片。虽说如此，这也是一种比较好的方案了。</p><p>理想化的 shard key 可以让 documents 均匀地在集群中分布：</p><p><img src="https://img-blog.csdnimg.cn/2020091816513874.png" alt="image-20200918121206254"></p><p>显示集群的详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; db.printShardingStatus()</span><br></pre></td></tr></table></figure><p>查看均衡器是否工作（需要重新均衡时系统才会自动启动，不用管它）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.isBalancerRunning()</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>查看当前 Balancer状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.getBalancerState()</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="2-6-3-分片后插入数据测试"><a href="#2-6-3-分片后插入数据测试" class="headerlink" title="2.6.3    分片后插入数据测试"></a>2.6.3    分片后插入数据测试</h3><p>测试一（哈希规则）：登录mongs后，向comment循环插入1000条数据做测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">mongos&gt; for(var i&#x3D;1;i&lt;&#x3D;1000;i++)&#123;db.comment.insert(&#123;_id:i+&quot;&quot;,nickname:&quot;BoBo&quot;+i&#125;)&#125;</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">mongos&gt; db.comment.count()</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><p>提示： js的语法，因为mongo的shell是一个JavaScript的shell。</p><p>注意：从路由上插入的数据，必须包含片键，否则无法插入。</p><p>分别登陆两个片的主节点，统计文档数量</p><p>第一个分片副本集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27018</span><br><span class="line"></span><br><span class="line">myshardrs01:PRIMARY&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">myshardrs01:PRIMARY&gt; db.comment.count()</span><br><span class="line">507</span><br></pre></td></tr></table></figure><p>第二个分片副本集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27318</span><br><span class="line"></span><br><span class="line">myshardrs02:PRIMARY&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">myshardrs02:PRIMARY&gt; db.comment.count()</span><br><span class="line">493</span><br></pre></td></tr></table></figure><p>可以看到， 1000条数据近似均匀的分布到了2个shard上。是根据片键的哈希值分配的。</p><p>这种分配方式非常易于水平扩展：一旦数据存储需要更大空间，可以直接再增加分片即可，同时提升了性能。</p><p>使用db.comment.stats()查看单个集合的完整情况，mongos执行该命令可以查看该集合的数据分片的情况。</p><p>使用sh.status()查看本库内所有集合的分片信息。</p><p>测试二（范围规则）：登录mongs后，向comment循环插入1000条数据做测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">mongos&gt; for(var i&#x3D;1;i&lt;&#x3D;20000;i++)&#123;db.author.save(&#123;&quot;name&quot;:&quot;BoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBoBo&quot;+i,&quot;age&quot;:NumberInt(i%120)&#125;)&#125;</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">mongos&gt; db.comment.count()</span><br><span class="line">20000</span><br></pre></td></tr></table></figure><p>插入成功后，仍然要分别查看两个分片副本集的数据情况。</p><p>分片效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">articledb.author</span><br><span class="line">    shard key: &#123; &quot;age&quot; : 1 &#125;</span><br><span class="line">    unique: false</span><br><span class="line">    balancing: true</span><br><span class="line">    chunks:</span><br><span class="line">        myshardrs01 2</span><br><span class="line">        myshardrs02 1</span><br><span class="line">    &#123; &quot;age&quot; : &#123; &quot;$minKey&quot; : 1 &#125; &#125; --&gt;&gt; &#123; &quot;age&quot; : 0 &#125; on : myshardrs02 Timestamp(2, 0)</span><br><span class="line">    &#123; &quot;age&quot; : 0 &#125; --&gt;&gt; &#123; &quot;age&quot; : 112 &#125; on : myshardrs01 Timestamp(2, 1)</span><br><span class="line">    &#123; &quot;age&quot; : 112 &#125; --&gt;&gt; &#123; &quot;age&quot; : &#123; &quot;$maxKey&quot; : 1 &#125; &#125; on : myshardrs01 Timestamp(1, 3)</span><br></pre></td></tr></table></figure><p>提示：</p><p>如果查看状态发现没有分片，则可能是由于以下原因造成了：</p><ul><li><p>系统繁忙，正在分片中。</p></li><li><p>数据块（chunk）没有填满，默认的数据块尺寸（chunksize）是64M，填满后才会考虑向其他片的数据块填充数据，因此，为了测试，可以将其改小，这里改为1M，操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use config</span><br><span class="line">db.settings.save( &#123; _id:&quot;chunksize&quot;, value: 1 &#125; )</span><br></pre></td></tr></table></figure><p>测试完改回来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.settings.save( &#123; _id:&quot;chunksize&quot;, value: 64 &#125; )</span><br></pre></td></tr></table></figure></li></ul><p>注意：要先改小，再设置分片。为了测试，可以先删除集合，重新建立集合的分片策略，再插入数据测试即可。</p><h3 id="2-6-4-再增加一个路由节点"><a href="#2-6-4-再增加一个路由节点" class="headerlink" title="2.6.4    再增加一个路由节点"></a>2.6.4    再增加一个路由节点</h3><p>文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------mongos02</span></span><br><span class="line">mkdir -p /mongodb/sharded_cluster/mymongos_27117/<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>新建或修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /mongodb/sharded_cluster/mymongos_27117/mongos.conf</span><br></pre></td></tr></table></figure><p>mongos.conf：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/sharded_cluster/mymongos_27117/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">/mongodb/sharded_cluster/mymongos_27117/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip</span></span><br><span class="line">    <span class="comment">#bindIpAll: true</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#bindIp</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27117</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">    <span class="attr">configDB:</span> <span class="string">myconfigrs/180.76.159.126:27019,180.76.159.126:27119,180.76.159.126:27219</span></span><br></pre></td></tr></table></figure><p>启动mongos2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongos -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;mymongos_27117&#x2F;mongos.conf</span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 129874</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>使用mongo客户端登录27117，发现，第二个路由无需配置，因为分片配置都保存到了配置服务器中了。</p><h2 id="2-7-Compass-连接分片集群"><a href="#2-7-Compass-连接分片集群" class="headerlink" title="2.7    Compass 连接分片集群"></a>2.7    Compass 连接分片集群</h2><p>compass连接：</p><p><img src="https://img-blog.csdnimg.cn/2020091816515942.png" alt="image-20200918122259273"></p><p>提示：和连接单机 mongod一样。</p><p>连接成功后，上方有mongos和分片集群的提示：</p><p><img src="https://img-blog.csdnimg.cn/20200918165217814.png" alt="image-20200918122329943"></p><h2 id="2-8-SpringDataMongDB-连接分片集群"><a href="#2-8-SpringDataMongDB-连接分片集群" class="headerlink" title="2.8    SpringDataMongDB 连接分片集群"></a>2.8    SpringDataMongDB 连接分片集群</h2><p>Java客户端常用的是SpringDataMongoDB，其连接的是mongs路由，配置和单机mongod的配置是一样的。</p><p>多个路由的时候的SpringDataMongoDB的客户端配置参考如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment">#数据源配置</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">mongodb:</span></span><br><span class="line">            <span class="comment"># 主机地址</span></span><br><span class="line">            <span class="comment">#   host: 180.76.159.126</span></span><br><span class="line">            <span class="comment"># 数据库</span></span><br><span class="line">            <span class="comment">#   database: articledb</span></span><br><span class="line">            <span class="comment"># 默认端口是27017</span></span><br><span class="line">            <span class="comment">#   port: 27017</span></span><br><span class="line">            <span class="comment">#也可以使用uri连接</span></span><br><span class="line">            <span class="comment">#   uri: mongodb://192.168.40.134:28017/articledb</span></span><br><span class="line">            <span class="comment"># 连接副本集字符串</span></span><br><span class="line">            <span class="comment">#   uri: mongodb://180.76.159.126:27017,180.76.159.126:27018,180.76.159.126:27019/articledb?connect=replicaSet&amp;slaveOk=true&amp;replicaSet=myrs</span></span><br><span class="line">            <span class="comment">#连接路由字符串</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">mongodb://180.76.159.126:27017,180.76.159.126:27117/articledb</span></span><br></pre></td></tr></table></figure><p>通过日志发现，写入数据的时候，会选择一个路由写入</p><h2 id="2-9-清除所有的节点数据（备用）"><a href="#2-9-清除所有的节点数据（备用）" class="headerlink" title="2.9    清除所有的节点数据（备用）"></a>2.9    清除所有的节点数据（备用）</h2><p>如果在搭建分片的时候有操作失败或配置有问题，需要重新来过的，可以进行如下操作：</p><p>第一步：查询出所有的测试服务节点的进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost sharded_cluster]# ps -ef |grep mongo</span><br><span class="line">root    10184    1  0 06:04 ?     00:01:25 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs01_27018&#x2F;mongod.conf</span><br><span class="line">root    10219    1  0 06:04 ?     00:01:25 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs01_27118&#x2F;mongod.conf</span><br><span class="line">root    10253    1  0 06:04 ?     00:00:46 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs01_27218&#x2F;mongod.conf</span><br><span class="line">root    10312    1  0 06:04 ?     00:01:23 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs02_27318&#x2F;mongod.conf</span><br><span class="line">root    10346    1  0 06:05 ?     00:01:23 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs02_27418&#x2F;mongod.conf</span><br><span class="line">root    10380    1  0 06:05 ?     00:00:44 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs02_27518&#x2F;mongod.conf</span><br><span class="line">root    10414    1  1 06:05 ?     00:01:36 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myconfigrs_27019&#x2F;mongod.conf</span><br><span class="line">root    10453    1  1 06:05 ?     00:01:37 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myconfigrs_27119&#x2F;mongod.conf</span><br><span class="line">root    10492    1  1 06:05 ?     00:01:38 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;myconfigrs_27219&#x2F;mongod.conf</span><br><span class="line">root    11392    1  0 06:15 ?     00:00:24 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongos -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;mymongos_27017&#x2F;mongos.conf</span><br><span class="line">root    14829    1  0 07:15 ?     00:00:13 &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongos -f &#x2F;mongodb&#x2F;sharded_cluster&#x2F;mymongos_27117&#x2F;mongos.conf</span><br></pre></td></tr></table></figure><p>根据上述的进程编号，依次中断进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -2 进程编号</span><br></pre></td></tr></table></figure><p>第二步：清除所有的节点的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /mongodb/sharded_cluster/myconfigrs_27019/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myconfigrs_27119/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myconfigrs_27219/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myshardrs01_27018/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myshardrs01_27118/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myshardrs01_27218/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myshardrs02_27318/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myshardrs02_27418/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/myshardrs02_27518/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/mymongos_27017/data/db/*.* \ &amp;</span><br><span class="line">rm -rf /mongodb/sharded_cluster/mymongos_27117/data/db/*.*</span><br></pre></td></tr></table></figure><p>第三步：查看或修改有问题的配置</p><p>第四步：依次启动所有节点，不包括路由节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27318/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27418/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27518/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27019/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27119/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27219/mongod.conf</span><br></pre></td></tr></table></figure><p>第五步：对两个数据分片副本集和一个配置副本集进行初始化和相关配置</p><p>第六步：检查路由mongos的配置，并启动mongos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/mymongos_27017/mongos.cfg</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/mymongos_27017/mongos.cfg</span><br></pre></td></tr></table></figure><p>第七步：mongo登录mongos，在其上进行相关操作。</p><h1 id="3-安全认证"><a href="#3-安全认证" class="headerlink" title="3.    安全认证"></a>3.    安全认证</h1><h2 id="3-1-MongoDB-的用户和角色权限简介"><a href="#3-1-MongoDB-的用户和角色权限简介" class="headerlink" title="3.1    MongoDB 的用户和角色权限简介"></a>3.1    MongoDB 的用户和角色权限简介</h2><p>默认情况下，MongoDB实例启动运行时是没有启用用户访问权限控制的，也就是说，在实例本机服务器上都可以随意连接到实例进行各种操作，MongoDB不会对连接客户端进行用户验证，这是非常危险的。</p><p>mongodb官网上说，为了能保障mongodb的安全可以做以下几个步骤：</p><ul><li>使用新的端口，默认的27017端口如果一旦知道了ip就能连接上，不太安全。</li><li>设置mongodb的网络环境，最好将mongodb部署到公司服务器内网，这样外网是访问不到的。公司内部访问使用vpn等。</li><li>开启安全认证。认证要同时设置服务器之间的内部认证方式，同时要设置客户端连接到集群的账号密码认证方式。</li></ul><p>为了强制开启用户访问控制(用户验证)，则需要在MongoDB实例启动时使用选项 – auth 或在指定启动配置文件中添加选项 auth=true 。</p><p>在开始之前需要了解一下概念</p><p>1）启用访问控制：</p><p>MongoDB使用的是基于角色的访问控制(Role-Based Access Control,RBAC)来管理用户对实例的访问。通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限，在对用户分配角色之前，用户无法访问实例。</p><p>在实例启动时添加选项 – auth 或指定启动配置文件中添加选项 auth=true 。</p><p>2）角色：</p><p>在MongoDB中通过角色对用户授予相应数据库资源的操作权限，每个角色当中的权限可以显式指定，也可以通过继承其他角色的权限，或者两都都存在的权限。</p><p>3）权限：</p><p>权限由指定的数据库资源(resource)以及允许在指定资源上进行的操作(action)组成。</p><ul><li>资源(resource)包括：数据库、集合、部分集合和集群；</li><li>操作(action)包括：对资源进行的增、删、改、查(CRUD)操作。</li></ul><p>在角色定义时可以包含一个或多个已存在的角色，新创建的角色会继承包含的角色所有的权限。在同一个数据库中，新创建角色可以继承其他角色的权限，在 admin 数据库中创建的角色可以继承在其它任意数据库中角色的权限。</p><p>关于角色权限的查看，可以通过如下命令查询（了解）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查询所有角色权限(仅用户自定义角色)</span><br><span class="line">&gt; db.runCommand(&#123; rolesInfo: 1 &#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查询所有角色权限(包含内置角色)</span><br><span class="line">&gt; db.runCommand(&#123; rolesInfo: 1, showBuiltinRoles: true &#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查询当前数据库中的某角色的权限</span><br><span class="line">&gt; db.runCommand(&#123; rolesInfo: &quot;&lt;rolename&gt;&quot; &#125;)</span><br><span class="line">&#x2F;&#x2F; 查询其它数据库中指定的角色权限</span><br><span class="line">&gt; db.runCommand(&#123; rolesInfo: &#123; role: &quot;&lt;rolename&gt;&quot;, db: &quot;&lt;database&gt;&quot; &#125; &#125;</span><br><span class="line">&#x2F;&#x2F; 查询多个角色权限</span><br><span class="line">&gt; db.runCommand(</span><br><span class="line">    &#123;</span><br><span class="line">        rolesInfo: [</span><br><span class="line">            &quot;&lt;rolename&gt;&quot;,</span><br><span class="line">            &#123; role: &quot;&lt;rolename&gt;&quot;, db: &quot;&lt;database&gt;&quot; &#125;,</span><br><span class="line">            ...</span><br><span class="line">        ]  </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>示例：</p><p>查看所有内置角色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.runCommand(&#123; rolesInfo: 1, showBuiltinRoles: true &#125;)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;__queryableBackup&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;__system&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;backup&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;clusterAdmin&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;clusterManager&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;clusterMonitor&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;dbAdmin&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;dbAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;dbOwner&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;enableSharding&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;hostManager&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;read&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;readAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;readWrite&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;readWriteAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;restore&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;root&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdmin&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">            &quot;isBuiltin&quot; : true,</span><br><span class="line">            &quot;roles&quot; : [ ],</span><br><span class="line">            &quot;inheritedRoles&quot; : [ ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的内置角色：</p><ul><li>数据库用户角色： read、readWrite;</li><li>所有数据库用户角色： readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>数据库管理角色： dbAdmin、dbOwner、userAdmin；</li><li>集群管理角色： clusterAdmin、clusterManager、clusterMonitor、hostManager；</li><li>备份恢复角色： backup、restore；</li><li>超级用户角色： root</li><li>内部角色： system</li></ul><p>角色说明：</p><table><thead><tr><th>角色</th><th>权限描述</th></tr></thead><tbody><tr><td>read</td><td>可以读取指定数据库中任何数据</td></tr><tr><td>readWrite</td><td>可以读写指定数据库中任何数据，包括创建、重命名、删除集合</td></tr><tr><td>readAnyDatabase</td><td>可以读取所有数据库中任何数据(除了数据库config和local之外)</td></tr><tr><td>readWriteAnyDatabase</td><td>可以读写所有数据库中任何数据(除了数据库config和local之外)</td></tr><tr><td>userAdminAnyDatabase</td><td>可以在指定数据库创建和修改用户(除了数据库config和local之外)</td></tr><tr><td>dbAdminAnyDatabase</td><td>可以读取任何数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作(除了数据库config和local之外)</td></tr><tr><td>dbAdmin</td><td>可以读取指定数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作</td></tr><tr><td>userAdmin</td><td>可以在指定数据库创建和修改用户</td></tr><tr><td>clusterAdmin</td><td>可以对整个集群或数据库系统进行管理操作</td></tr><tr><td>backup</td><td>备份MongoDB数据最小的权限</td></tr><tr><td>restore</td><td>从备份文件中还原恢复MongoDB数据(除了system.profile集合)的权限</td></tr><tr><td>root</td><td>超级账号，超级权限</td></tr></tbody></table><h2 id="3-2-单实例环境"><a href="#3-2-单实例环境" class="headerlink" title="3.2    单实例环境"></a>3.2    单实例环境</h2><p>目标：对单实例的MongoDB服务开启安全认证，这里的单实例指的是未开启副本集或分片的MongoDB实例。</p><h3 id="3-2-1-关闭已开启的服务"><a href="#3-2-1-关闭已开启的服务" class="headerlink" title="3.2.1    关闭已开启的服务"></a>3.2.1    关闭已开启的服务</h3><p>增加mongod的单实例的安全认证功能，可以在服务搭建的时候直接添加，也可以在之前搭建好的服务上添加。</p><p>本文使用之前搭建好的服务，因此，先停止之前的服务</p><p>停止服务的方式有两种：快速关闭和标准关闭，下面依次说明：</p><p>（1）快速关闭方法（快速，简单，数据可能会出错）</p><p>目标：通过系统的kill命令直接杀死进程：</p><p>杀完要检查一下，避免有的没有杀掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过进程编号关闭节点</span></span><br><span class="line"><span class="built_in">kill</span> -2 54410</span><br></pre></td></tr></table></figure><p>【补充】</p><p>如果一旦是因为数据损坏，则需要进行如下操作（了解）：</p><p>1）删除lock文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /mongodb/single/data/db/*.lock</span><br></pre></td></tr></table></figure><p>2 ）修复数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod --repair --dbpath=/mongodb/single/data/db</span><br></pre></td></tr></table></figure><p>（2）标准的关闭方法（数据不容易出错，但麻烦）：</p><p>目标：通过mongo客户端中的shutdownServer命令来关闭服务</p><p>主要的操作步骤参考如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//客户端登录服务，注意，这里通过localhost登录，如果需要远程登录，必须先登录认证才行。</span><br><span class="line">mongo --port 27017</span><br><span class="line">//<span class="comment">#切换到admin库</span></span><br><span class="line">use admin</span><br><span class="line">//关闭服务</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure><h3 id="3-2-2-添加用户和权限"><a href="#3-2-2-添加用户和权限" class="headerlink" title="3.2.2    添加用户和权限"></a>3.2.2    添加用户和权限</h3><p>（1）先按照普通无授权认证的配置，来配置服务端的配置文件 /mongodb/single/mongod.conf </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/mongodb/single/log/mongod.log"</span></span><br><span class="line">    <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"/mongodb/single/data/db"</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">        <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">    <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">    <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID</span></span><br><span class="line">    <span class="attr">pidFilePath:</span> <span class="string">"/mongodb/single/log/mongod.pid"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#服务实例绑定的IP</span></span><br><span class="line">    <span class="attr">bindIp:</span> <span class="string">localhost,192.168.0.2</span></span><br><span class="line">    <span class="comment">#绑定的端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27017</span></span><br></pre></td></tr></table></figure><p>（2）按之前未开启认证的方式（不添加 – auth 参数）来启动MongoDB服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/single/mongod.conf</span><br></pre></td></tr></table></figure><p>提示：</p><p>在操作用户时，启动mongod服务时尽量不要开启授权。</p><p>（3）使用Mongo客户端登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27017</span><br></pre></td></tr></table></figure><p>（4）创建两个管理员用户，一个是系统的超级管理员 myroot ，一个是admin库的管理用户myadmin </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;切换到admin库</span><br><span class="line">&gt; use admin</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建系统超级用户 myroot,设置密码123456，设置角色root</span><br><span class="line">&#x2F;&#x2F;&gt; db.createUser(&#123;user:&quot;myroot&quot;,pwd:&quot;123456&quot;,roles:[ &#123; &quot;role&quot; : &quot;root&quot;, &quot;db&quot; : &quot;admin&quot; &#125; ]&#125;)</span><br><span class="line">&#x2F;&#x2F;或</span><br><span class="line">&gt; db.createUser(&#123;user:&quot;myroot&quot;,pwd:&quot;123456&quot;,roles:[&quot;root&quot;]&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建专门用来管理admin库的账号myadmin，只用来作为用户权限的管理</span><br><span class="line">&gt; db.createUser(&#123;user:&quot;myadmin&quot;,pwd:&quot;123456&quot;,roles: [&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看已经创建了的用户的情况：</span><br><span class="line">&gt; db.system.users.find()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除用户</span><br><span class="line">&gt; db.dropUser(&quot;myadmin&quot;)</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改密码</span><br><span class="line">&gt; db.changeUserPassword(&quot;myroot&quot;, &quot;123456&quot;)</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>本案例创建了两个用户，分别对应超管和专门用来管理用户的角色，事实上，你只需要一个用户即可。如果你对安全要求很高，防止超管泄漏，则不要创建超管用户。</li><li>和其它数据库（MySQL）一样，权限的管理都差不多一样，也是将用户和权限信息保存到数据库对应的表中。Mongodb存储所有的用户信息在admin 数据库的集合system.users中，保存用户名、密码和数据库信息。</li><li>如果不指定数据库，则创建的指定的权限的用户在所有的数据库上有效，如 {role: “userAdminAnyDatabase”, db:””}</li></ul><p>（5）认证测试</p><p>测试添加的用户是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;切换到admin</span><br><span class="line">&gt; use admin</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;密码输错</span><br><span class="line">&gt; db.auth(&quot;myroot&quot;,&quot;12345&quot;)</span><br><span class="line">Error: Authentication failed.</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;密码正确</span><br><span class="line">&gt; db.auth(&quot;myroot&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>（6）创建普通用户</p><p>创建普通用户可以在没有开启认证的时候添加，也可以在开启认证之后添加，但开启认证之后，必须使用有操作admin库的用户登录认证后才能操作。底层都是将用户信息保存在了admin数据库的集合system.users中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建(切换)将来要操作的数据库articledb,</span><br><span class="line">&gt; use articledb</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建用户，拥有articledb数据库的读写权限readWrite，密码是123456</span><br><span class="line">&gt; db.createUser(&#123;user: &quot;bobo&quot;, pwd: &quot;123456&quot;, roles: [&#123; role: &quot;readWrite&quot;, db: &quot;articledb&quot; &#125;]&#125;)</span><br><span class="line">&#x2F;&#x2F;&gt; db.createUser(&#123;user: &quot;bobo&quot;, pwd: &quot;123456&quot;, roles: [&quot;readWrite&quot;]&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试是否可用</span><br><span class="line">&gt; db.auth(&quot;bobo&quot;,&quot;123456&quot;)</span><br></pre></td></tr></table></figure><p>提示：</p><p>如果开启了认证后，登录的客户端的用户必须使用admin库的角色，如拥有root角色的myadmin用户，再通过myadmin用户去创建其他角色的用户</p><h3 id="3-2-3-服务端开启认证和客户端连接登录"><a href="#3-2-3-服务端开启认证和客户端连接登录" class="headerlink" title="3.2.3    服务端开启认证和客户端连接登录"></a>3.2.3    服务端开启认证和客户端连接登录</h3><h4 id="3-2-3-1-关闭已经启动的服务"><a href="#3-2-3-1-关闭已经启动的服务" class="headerlink" title="3.2.3.1    关闭已经启动的服务"></a>3.2.3.1    关闭已经启动的服务</h4><p>1）使用linux命令杀死进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost single]<span class="comment"># ps -ef |grep mongo</span></span><br><span class="line">root    23482    1  0 08:08 ?     00:00:55 /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/single/mongod.conf</span><br><span class="line">[root@bobohost single]<span class="comment"># kill -2 23482</span></span><br></pre></td></tr></table></figure><p>2 ）在mongo客户端中使用shutdownServer命令来关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.shutdownServer()</span><br><span class="line">shutdown command only works with the admin database; try &#39;use admin&#39;</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.shutdownServer()</span><br><span class="line">2019-08-14T11:20:16.450+0800 E QUERY  [js] Error: shutdownServer failed: &#123;</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;shutdown must run from localhost when running db without auth&quot;,</span><br><span class="line">    &quot;code&quot; : 13,</span><br><span class="line">    &quot;codeName&quot; : &quot;Unauthorized&quot;</span><br><span class="line">    &#125; :</span><br><span class="line">_getErrorWithCode@src&#x2F;mongo&#x2F;shell&#x2F;utils.js:25:13</span><br><span class="line">DB.prototype.shutdownServer@src&#x2F;mongo&#x2F;shell&#x2F;db.js:453:1</span><br><span class="line">@(shell):1:1</span><br></pre></td></tr></table></figure><p>需要几个条件：</p><ul><li>必须是在 admin库下执行该关闭服务命令。</li><li>如果没有开启认证，必须是从 localhost登陆的，才能执行关闭服务命令。</li><li>非 localhost的、通过远程登录的，必须有登录且必须登录用户有对admin操作权限才可以。</li></ul><h4 id="3-2-3-2-以开启认证的方式启动服务"><a href="#3-2-3-2-以开启认证的方式启动服务" class="headerlink" title="3.2.3.2    以开启认证的方式启动服务"></a>3.2.3.2    以开启认证的方式启动服务</h4><p>有两种方式开启权限认证启动服务：一种是参数方式，一种是配置文件方式</p><p>1）参数方式</p><p>在启动时指定参数 – auth ，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/single/mongod.conf --auth</span><br></pre></td></tr></table></figure><p>2）配置文件方式</p><p>在mongod.conf配置文件中加入：vim /mongodb/single/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#开启授权认证</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>启动时可不加 – auth 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/single/mongod.conf</span><br></pre></td></tr></table></figure><h4 id="3-2-3-3-开启了认证的情况下的客户端登录"><a href="#3-2-3-3-开启了认证的情况下的客户端登录" class="headerlink" title="3.2.3.3    开启了认证的情况下的客户端登录"></a>3.2.3.3    开启了认证的情况下的客户端登录</h4><p>有两种认证方式，一种是先登录，在mongo shell中认证；一种是登录时直接认证</p><p>1）先连接再认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27017</span><br><span class="line">MongoDB shell version v4.0.10</span><br><span class="line">connecting to: mongodb:&#x2F;&#x2F;180.76.159.126:27017&#x2F;?gssapiServiceName&#x3D;mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;53fef661-35d6-4d29-b07c-020291d62e1a&quot;)&#125;</span><br><span class="line">MongoDB server version: 4.0.10</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>提示：</p><p>开启认证后再登录，发现打印的日志比较少了。</p><p>相关操作需要认证才可以：</p><p>查询admin库中的system.users集合的用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.system.users.find()</span><br><span class="line">Error: error: &#123;</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;command find requires authentication&quot;,</span><br><span class="line">    &quot;code&quot; : 13,</span><br><span class="line">    &quot;codeName&quot; : &quot;Unauthorized&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.auth(&quot;myroot&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">&gt; db.system.users.find()</span><br></pre></td></tr></table></figure><p>查询articledb库中的comment集合的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">&gt; db.comment.find()</span><br><span class="line">Error: error: &#123;</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;not authorized on articledb to execute command &#123; find: \&quot;comment\&quot;, filter: &#123;&#125;, lsid: &#123; id: UUID(\&quot;53fef661-35d6-4d29-b07c-020291d62e1a\&quot;) &#125;, $db: \&quot;articledb\&quot; &#125;&quot;,</span><br><span class="line">    &quot;code&quot; : 13,</span><br><span class="line">    &quot;codeName&quot; : &quot;Unauthorized&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.auth(&quot;bobo&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">&gt; db.comment.find()</span><br><span class="line">Error: error: &#123;</span><br><span class="line">    &quot;ok&quot; : 0,</span><br><span class="line">    &quot;errmsg&quot; : &quot;too many users are authenticated&quot;,</span><br><span class="line">    &quot;code&quot; : 13,</span><br><span class="line">    &quot;codeName&quot; : &quot;Unauthorized&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：</p><p>这里可能出现错误，说是太多的用户正在认证了。因为我们确实连续登录了两个用户了。</p><p>解决方案：退出shell，重新进来登录认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; exit</span><br><span class="line">bye</span><br><span class="line">[root@bobohost bin]# .&#x2F;mongo --host 180.76.159.126 --port 27017</span><br><span class="line">MongoDB shell version v4.0.10</span><br><span class="line">connecting to: mongodb:&#x2F;&#x2F;180.76.159.126:27017&#x2F;?gssapiServiceName&#x3D;mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;329c1897-566d-4231-bcb3-b2acda301863&quot;)</span><br><span class="line">&#125;</span><br><span class="line">MongoDB server version: 4.0.10</span><br><span class="line">&gt; db.auth(&quot;bobo&quot;,&quot;123456&quot;)</span><br><span class="line">Error: Authentication failed.</span><br><span class="line">0</span><br><span class="line">&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">&gt; db.auth(&quot;bobo&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">&gt; db.comment.find()</span><br></pre></td></tr></table></figure><p>2）连接时直接认证</p><p>对admin数据库进行登录认证和相关操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost ~]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27017 --authenticationDatabase admin -u myroot -p 123456</span><br><span class="line">MongoDB shell version v4.0.10</span><br><span class="line">connecting to: mongodb:&#x2F;&#x2F;180.76.159.126:27017&#x2F;?</span><br><span class="line">authSource&#x3D;admin&amp;gssapiServiceName&#x3D;mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;f959b8d6-6994-44bc-9d35-09fc7cd00ba6&quot;)</span><br><span class="line">&#125;</span><br><span class="line">MongoDB server version: 4.0.10</span><br><span class="line">Server has startup warnings:</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten] ** WARNING: You are</span><br><span class="line">running this process as the root user, which is not recommended.</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten]</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten]</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten] ** WARNING:</span><br><span class="line">&#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled is &#39;always&#39;.</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten] **    We suggest</span><br><span class="line">setting it to &#39;never&#39;</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten]</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten] ** WARNING:</span><br><span class="line">&#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;defrag is &#39;always&#39;.</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten] **    We suggest</span><br><span class="line">setting it to &#39;never&#39;</span><br><span class="line">2019-09-10T15:23:40.102+0800 I CONTROL [initandlisten]</span><br><span class="line">&gt; show dbs;</span><br><span class="line">admin    0.000GB</span><br><span class="line">articledb  0.000GB</span><br><span class="line">config   0.000GB</span><br><span class="line">local    0.000GB</span><br></pre></td></tr></table></figure><p>对articledb数据库进行登录认证和相关操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost bin]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27017 --authenticationDatabase articledb -u bobo -p 123456</span><br><span class="line">MongoDB shell version v4.0.10</span><br><span class="line">connecting to: mongodb:&#x2F;&#x2F;180.76.159.126:27017&#x2F;?</span><br><span class="line">authSource&#x3D;articledb&amp;gssapiServiceName&#x3D;mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;e5d4148f-373b-45b8-9cff-a927ce617100&quot;)</span><br><span class="line">&#125;</span><br><span class="line">MongoDB server version: 4.0.10</span><br><span class="line">&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">&gt; db.comment.find()</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>-u</code> ：用户名</li><li><code>-p</code> ：密码</li><li><code>-- authenticationDatabase</code> ：指定连接到哪个库。当登录是指定用户名密码时，必须指定对应的数据库！</li></ul><h3 id="3-2-4-SpringDataMongoDB连接认证"><a href="#3-2-4-SpringDataMongoDB连接认证" class="headerlink" title="3.2.4    SpringDataMongoDB连接认证"></a>3.2.4    SpringDataMongoDB连接认证</h3><p>使用用户名和密码连接到 MongoDB 服务器，你必须使用<code>&#39;username:password@hostname/dbname&#39;</code> 格式，’username’为用户名，’password’ 为密码。</p><p>目标：使用用户bobo使用密码 123456 连接到MongoDB 服务上。</p><p>application.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment">#数据源配置</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">mongodb:</span></span><br><span class="line">            <span class="comment"># 主机地址</span></span><br><span class="line">            <span class="comment">#   host: 180.76.159.126</span></span><br><span class="line">            <span class="comment"># 数据库</span></span><br><span class="line">            <span class="comment">#   database: articledb</span></span><br><span class="line">            <span class="comment"># 默认端口是27017</span></span><br><span class="line">            <span class="comment">#   port: 27017</span></span><br><span class="line">            <span class="comment">#帐号</span></span><br><span class="line">            <span class="comment">#   username: bobo</span></span><br><span class="line">            <span class="comment">#密码</span></span><br><span class="line">            <span class="comment">#   password: 123456</span></span><br><span class="line">            <span class="comment">#单机有认证的情况下，也使用字符串连接</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">mongodb://bobo:123456@180.76.159.126:27017/articledb</span></span><br></pre></td></tr></table></figure><h2 id="3-3-副本集环境"><a href="#3-3-副本集环境" class="headerlink" title="3.3    副本集环境"></a>3.3    副本集环境</h2><h3 id="3-3-1-前言"><a href="#3-3-1-前言" class="headerlink" title="3.3.1    前言"></a>3.3.1    前言</h3><p>对于搭建好的mongodb副本集，为了安全，启动安全认证，使用账号密码登录。</p><p>副本集环境使用之前搭建好的，架构如下：</p><p><img src="https://img-blog.csdnimg.cn/20200918165235785.png" alt="image-20200918145643639"></p><p>对副本集执行访问控制需要配置两个方面 :</p><ul><li>副本集和共享集群的各个节点成员之间使用内部身份验证，可以使用密钥文件或x.509证书。密钥文件比较简单，本文使用密钥文件，官方推荐如果是测试环境可以使用密钥文件，但是正式环境，官方推荐x.509证书。原理就是，集群中每一个实例彼此连接的时候都检验彼此使用的证书的内容是否相同。只有证书相同的实例彼此才可以访问</li><li>使用客户端连接到mongodb集群时，开启访问授权。对于集群外部的访问。如通过可视化客户端，或者通过代码连接的时候，需要开启授权。</li></ul><p>在keyfile身份验证中，副本集中的每个mongod实例都使用keyfile的内容作为共享密码，只有具有正确密钥文件的mongod或者mongos实例可以连接到副本集。密钥文件的内容必须在6到1024个字符之间，并且在unix/linux系统中文件所有者必须有对文件至少有读的权限。</p><h3 id="3-3-2-关闭已开启的副本集服务"><a href="#3-3-2-关闭已开启的副本集服务" class="headerlink" title="3.3.2    关闭已开启的副本集服务"></a>3.3.2    关闭已开启的副本集服务</h3><p>增加副本集的安全认证和服务鉴权功能，可以在副本集搭建的时候直接添加，也可以在之前搭建好的副本集服务上添加。</p><p>本文使用之前搭建好的副本集服务，因此，先停止之前的集群服务</p><p>停止服务的方式有两种：快速关闭和标准关闭，下面依次说明：</p><p>（1）快速关闭方法（快速，简单，数据可能会出错）</p><p>目标：通过系统的kill命令直接杀死进程：</p><p>依次杀死仲裁者、副本节点、主节点，直到所有成员都离线。建议主节点最后kill，以避免潜在的回滚。杀完要检查一下，避免有的没有杀掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过进程编号关闭节点</span></span><br><span class="line"><span class="built_in">kill</span> -2 54410</span><br></pre></td></tr></table></figure><p>【补充】</p><p>如果一旦是因为数据损坏，则需要进行如下操作（了解）：</p><p>1）删除lock文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -f /mongodb/replica_sets/myrs_27017/data/db/*.lock \</span><br><span class="line">/mongodb/replica_sets/myrs_27018/data/db/*.lock \</span><br><span class="line">/mongodb/replica_sets/myrs_27019/data/db/mongod.lock \</span><br></pre></td></tr></table></figure><p>2 ）依次修复数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --dbpath&#x3D;&#x2F;mongodb&#x2F;replica_sets&#x2F;myrs_27017&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --dbpath&#x3D;&#x2F;mongodb&#x2F;replica_sets&#x2F;myrs_27018&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --dbpath&#x3D;&#x2F;mongodb&#x2F;replica_sets&#x2F;myrs_27019&#x2F;data&#x2F;db</span><br></pre></td></tr></table></figure><p>（2）标准的关闭方法（数据不容易出错，但麻烦）</p><p>目标：通过mongo客户端中的shutdownServer命令来依次关闭各个服务</p><p>关闭副本集中的服务，建议依次关闭仲裁节点、副本节点、主节点。主要的操作步骤参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;客户端登录服务，注意，这里通过localhost登录，如果需要远程登录，必须先登录认证才行。</span><br><span class="line">mongo --port 27017</span><br><span class="line">&#x2F;&#x2F;告知副本集说本机要下线</span><br><span class="line">rs.stepDown()</span><br><span class="line">&#x2F;&#x2F;#切换到admin库</span><br><span class="line">use admin</span><br><span class="line">&#x2F;&#x2F;关闭服务</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure><h3 id="3-3-3-通过主节点添加一个管理员帐号"><a href="#3-3-3-通过主节点添加一个管理员帐号" class="headerlink" title="3.3.3    通过主节点添加一个管理员帐号"></a>3.3.3    通过主节点添加一个管理员帐号</h3><p>只需要在主节点上添加用户，副本集会自动同步。</p><p>开启认证之前，创建超管用户：myroot，密码：123456</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myrs:PRIMARY&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">myrs:PRIMARY&gt; db.createUser(&#123;user:&quot;myroot&quot;,pwd:&quot;123456&quot;,roles:[&quot;root&quot;]&#125;)</span><br><span class="line">Successfully added user: &#123; &quot;user&quot; : &quot;myroot&quot;, &quot;roles&quot; : [ &quot;root&quot; ] &#125;</span><br></pre></td></tr></table></figure><p>该步骤也可以在开启认证之后，但需要通过localhost登录才允许添加用户，用户数据也会自动同步到副本集。</p><p>后续再创建其他用户，都可以使用该超管用户创建。</p><h3 id="3-3-4-创建副本集认证的key文件"><a href="#3-3-4-创建副本集认证的key文件" class="headerlink" title="3.3.4    创建副本集认证的key文件"></a>3.3.4    创建副本集认证的key文件</h3><p>第一步：生成一个key文件到当前文件夹中。</p><p>可以使用任何方法生成密钥文件。例如，以下操作使用openssl生成密码文件，然后使用chmod来更改文件权限，仅为文件所有者提供读取权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost ~]# openssl rand -base64 90 -out .&#x2F;mongo.keyfile</span><br><span class="line">[root@bobohost ~]# chmod 400 .&#x2F;mongo.keyfile</span><br><span class="line">[root@bobohost ~]# ll mongo.keyfile</span><br><span class="line">-r--------. 1 root root 122 8月  14 14:23 mongo.keyfile</span><br></pre></td></tr></table></figure><p>提示：</p><p>所有副本集节点都必须要用同一份keyfile，一般是在一台机器上生成，然后拷贝到其他机器上，且必须有读的权限，否则将来会报错： permissions on /mongodb/replica_sets/myrs_27017/mongo.keyfile are too open</p><p>一定要保证密钥文件一致，文件位置随便。但是为了方便查找，建议每台机器都放到一个固定的位置，都放到和配置文件一起的目录中。</p><p>这里将该文件分别拷贝到多个目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost ~]<span class="comment"># cp mongo.keyfile /mongodb/replica_sets/myrs_27017</span></span><br><span class="line">[root@bobohost ~]<span class="comment"># cp mongo.keyfile /mongodb/replica_sets/myrs_27018</span></span><br><span class="line">[root@bobohost ~]<span class="comment"># cp mongo.keyfile /mongodb/replica_sets/myrs_27019</span></span><br></pre></td></tr></table></figure><h3 id="3-3-5-修改配置文件指定keyfile"><a href="#3-3-5-修改配置文件指定keyfile" class="headerlink" title="3.3.5    修改配置文件指定keyfile"></a>3.3.5    修改配置文件指定keyfile</h3><p>分别编辑几个服务的mongod.conf文件，添加相关内容</p><p>/mongodb/replica_sets/myrs_27017/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/replica_sets/myrs_27017/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/replica_sets/myrs_27018/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/replica_sets/myrs_27018/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/replica_sets/myrs_27019/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/replica_sets/myrs_27019/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><h3 id="3-3-6-重新启动副本集"><a href="#3-3-6-重新启动副本集" class="headerlink" title="3.3.6    重新启动副本集"></a>3.3.6    重新启动副本集</h3><p>如果副本集是开启状态，则先分别关闭关闭复本集中的每个mongod，从次节点开始。直到副本集的所有成员都离线，包括任何仲裁者。主节点必须是最后一个成员关闭以避免潜在的回滚。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过进程编号关闭三个节点</span></span><br><span class="line"><span class="built_in">kill</span> -2 54410 54361 54257</span><br></pre></td></tr></table></figure><p>分别启动副本集节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27017/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27018/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27019/mongod.conf</span><br></pre></td></tr></table></figure><p>查看进程情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost replica_sets]<span class="comment"># ps -ef |grep mongod</span></span><br><span class="line">root    62425    1  5 14:43 ?     00:00:01 /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27017/mongod.conf</span><br><span class="line">root    62495    1  7 14:43 ?     00:00:01 /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27018/mongod.conf</span><br><span class="line">root    62567    1 11 14:43 ?     00:00:01 /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/replica_sets/myrs_27019/mongod.conf</span><br></pre></td></tr></table></figure><h3 id="3-3-7-在主节点上添加普通账号"><a href="#3-3-7-在主节点上添加普通账号" class="headerlink" title="3.3.7    在主节点上添加普通账号"></a>3.3.7    在主节点上添加普通账号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#先用管理员账号登录</span><br><span class="line">#切换到admin库</span><br><span class="line">use admin</span><br><span class="line">#管理员账号认证</span><br><span class="line">db.auth(&quot;myroot&quot;,&quot;123456&quot;)</span><br><span class="line">#切换到要认证的库</span><br><span class="line">use articledb</span><br><span class="line">#添加普通用户</span><br><span class="line">db.createUser(&#123;user: &quot;bobo&quot;, pwd: &quot;123456&quot;, roles: [&quot;readWrite&quot;]&#125;)</span><br></pre></td></tr></table></figure><p>重新连接，使用普通用户 bobo重新登录，查看数据。</p><h3 id="3-3-8-SpringDataMongoDB连接副本集"><a href="#3-3-8-SpringDataMongoDB连接副本集" class="headerlink" title="3.3.8    SpringDataMongoDB连接副本集"></a>3.3.8    SpringDataMongoDB连接副本集</h3><p>使用用户名和密码连接到 MongoDB 服务器，你必须使用<code>&#39;username:password@hostname/dbname&#39;</code> 格式，’username’为用户名，’password’ 为密码。</p><p>目标：使用用户bobo使用密码 123456 连接到MongoDB 服务上。</p><p>application.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment">#数据源配置</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">mongodb:</span></span><br><span class="line">            <span class="comment">#副本集有认证的情况下，字符串连接</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">mongodb://bobo:123456@180.76.159.126:27017,180.76.159.126:27018,180.76.159.126:27019/articledb?connect=replicaSet&amp;slaveOk=true&amp;replicaSet=myrs</span></span><br></pre></td></tr></table></figure><h2 id="3-4-分片集群环境-扩展"><a href="#3-4-分片集群环境-扩展" class="headerlink" title="3.4    分片集群环境(扩展)"></a>3.4    分片集群环境(扩展)</h2><h3 id="3-4-1-关闭已开启的集群服务"><a href="#3-4-1-关闭已开启的集群服务" class="headerlink" title="3.4.1    关闭已开启的集群服务"></a>3.4.1    关闭已开启的集群服务</h3><p>分片集群环境下的安全认证和副本集环境下基本上一样。</p><p>但分片集群的服务器环境和架构较为复杂，建议在搭建分片集群的时候，直接加入安全认证和服务器间的鉴权，如果之前有数据，可先将之前的数据备份出来，再还原回去。</p><p>本文使用之前搭建好的集群服务，因此，先停止之前的集群服务</p><p>停止服务的方式有两种：快速关闭和标准关闭，下面依次说明：</p><p>（1）快速关闭方法（快速，简单，数据可能会出错）</p><p>目标：通过系统的kill命令直接杀死进程：</p><p>依次杀死 mongos路由、配置副本集服务，分片副本集服务，从次节点开始。直到所有成员都离线。副本集杀的时候，建议先杀仲裁者，再杀副本节点，最后是主节点，以避免潜在的回滚。杀完要检查一下，避免有的没有杀掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过进程编号关闭节点</span></span><br><span class="line"><span class="built_in">kill</span> -2 54410</span><br></pre></td></tr></table></figure><p>【补充】</p><p>如果一旦是因为数据损坏，则需要进行如下操作（了解）：</p><p>1）删除lock文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rm -f /mongodb/sharded_cluster/myshardrs01_27018/data/db/*.lock \</span><br><span class="line">/mongodb/sharded_cluster/myshardrs01_27118/data/db/*.lock \</span><br><span class="line">/mongodb/sharded_cluster/myshardrs01_27218/data/db/mongod.lock \</span><br><span class="line">/mongodb/sharded_cluster/myshardrs02_27318/data/db/mongod.lock \</span><br><span class="line">/mongodb/sharded_cluster/myshardrs02_27418/data/db/mongod.lock \</span><br><span class="line">/mongodb/sharded_cluster/myshardrs02_27518/data/db/mongod.lock \</span><br><span class="line">/mongodb/sharded_cluster/myconfigrs_27019/data/db/mongod.lock \</span><br><span class="line">/mongodb/sharded_cluster/myconfigrs_27119/data/db/mongod.lock \</span><br><span class="line">/mongodb/sharded_cluster/myconfigrs_27219/data/db/mongod.lock</span><br></pre></td></tr></table></figure><p>2 ）依次修复数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs01_27018&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs01_27118&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs01_27218&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs02_27318&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs02_27418&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myshardrs02_27518&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myconfigrs_27019&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myconfigrs_27119&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;myconfigrs_27219&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;mymongos_27017&#x2F;data&#x2F;db</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod --repair --</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;sharded_cluster&#x2F;mymongos_27117&#x2F;data&#x2F;db</span><br></pre></td></tr></table></figure><p>（2）标准的关闭方法（数据不容易出错，但麻烦）：</p><p>目标：通过mongo客户端中的shutdownServer命令来依次关闭各个服务</p><p>关闭分片服务器副本集中的服务，建议依次关闭仲裁节点、副本节点、主节点。主要的操作步骤参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;客户端登录服务，注意，这里通过localhost登录，如果需要远程登录，必须先登录认证才行。</span><br><span class="line">mongo --port 27018</span><br><span class="line">&#x2F;&#x2F;告知副本集说本机要下线</span><br><span class="line">rs.stepDown()</span><br><span class="line">&#x2F;&#x2F;#切换到admin库</span><br><span class="line">use admin</span><br><span class="line">&#x2F;&#x2F;关闭服务</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure><p>关闭配置服务器副本集的服务，建议依次关闭副本节点、主节点。主要的操作步骤参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;客户端登录服务，注意，这里通过localhost登录，如果需要远程登录，必须先登录认证才行。</span><br><span class="line">mongo --port 27019</span><br><span class="line">&#x2F;&#x2F;告知副本集说本机要下线</span><br><span class="line">rs.stepDown()</span><br><span class="line">&#x2F;&#x2F;#切换到admin库</span><br><span class="line">use admin</span><br><span class="line">&#x2F;&#x2F;关闭服务</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure><p>关闭路由服务器的服务，建议依次关闭两个路由节点。主要的操作步骤参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;客户端登录服务，注意，这里通过localhost登录，如果需要远程登录，必须先登录认证才行。</span><br><span class="line">mongo --port 27017</span><br><span class="line">&#x2F;&#x2F;告知副本集说本机要下线</span><br><span class="line">rs.stepDown()</span><br><span class="line">&#x2F;&#x2F;#切换到admin库</span><br><span class="line">use admin</span><br><span class="line">&#x2F;&#x2F;关闭服务</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure><h3 id="3-4-2-创建副本集认证的key文件"><a href="#3-4-2-创建副本集认证的key文件" class="headerlink" title="3.4.2    创建副本集认证的key文件"></a>3.4.2    创建副本集认证的key文件</h3><p>第一步：生成一个key文件到当前文件夹中。</p><p>可以使用任何方法生成密钥文件。例如，以下操作使用openssl生成密码文件，然后使用chmod来更改文件权限，仅为文件所有者提供读取权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost ~]<span class="comment"># openssl rand -base64 90 -out ./mongo.keyfile</span></span><br><span class="line">[root@bobohost ~]<span class="comment"># chmod 400 ./mongo.keyfile</span></span><br><span class="line">[root@bobohost ~]<span class="comment"># ll mongo.keyfile</span></span><br><span class="line">-r--------. 1 root root 122 8月  14 14:23 mongo.keyfile</span><br></pre></td></tr></table></figure><p>提示：</p><p>所有副本集节点都必须要用同一份keyfile，一般是在一台机器上生成，然后拷贝到其他机器上，且必须<br>有读的权限，否则将来会报错： permissions on /mongodb/replica_sets/myrs_27017/mongo.keyfile are too open</p><p>一定要保证密钥文件一致，文件位置随便。但是为了方便查找，建议每台机器都放到一个固定的位置，都放到和配置文件一起的目录中。</p><p>这里将该文件分别拷贝到多个目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'/mongodb/sharded_cluster/myshardrs01_27018/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myshardrs01_27118/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myshardrs01_27218/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myshardrs02_27318/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myshardrs02_27418/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myshardrs02_27518/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myconfigrs_27019/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myconfigrs_27119/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/myconfigrs_27219/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/mymongos_27017/mongo.keyfile</span></span><br><span class="line"><span class="string">/mongodb/sharded_cluster/mymongos_27117/mongo.keyfile'</span> | xargs -n 1 cp -v /root/mongo.keyfile</span><br></pre></td></tr></table></figure><h3 id="3-4-3-修改配置文件指定keyfile"><a href="#3-4-3-修改配置文件指定keyfile" class="headerlink" title="3.4.3    修改配置文件指定keyfile"></a>3.4.3    修改配置文件指定keyfile</h3><p>分别编辑几个服务的mongod.conf文件，添加相关内容：</p><p>/mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myshardrs01_27018/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myshardrs01_27118/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myshardrs01_27218/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myshardrs02_27318/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myshardrs02_27318/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myshardrs02_27418/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myshardrs02_27418/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myshardrs02_27518/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myshardrs02_27518/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myconfigrs_27019/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myconfigrs_27019/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myconfigrs_27119/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myconfigrs_27119/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/myconfigrs_27219/mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/myconfigrs_27219/mongo.keyfile</span></span><br><span class="line">    <span class="comment">#开启认证方式运行</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/mymongos_27017/mongos.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/mymongos_27017/mongo.keyfile</span></span><br></pre></td></tr></table></figure><p>/mongodb/sharded_cluster/mymongos_27117/mongos.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="comment">#KeyFile鉴权文件</span></span><br><span class="line">    <span class="attr">keyFile:</span> <span class="string">/mongodb/sharded_cluster/mymongos_27117/mongo.keyfile</span></span><br></pre></td></tr></table></figure><p>mongos 比mongod少了authorization：enabled的配置。原因是，副本集加分片的安全认证需要配置两方面的，副本集各个节点之间使用内部身份验证，用于内部各个mongo实例的通信，只有相同keyfile才能相互访问。所以都要开启 keyFile: /mongodb/sharded_cluster/mymongos_27117/mongo.keyfile 。</p><p>然而对于所有的mongod，才是真正的保存数据的分片。mongos只做路由，不保存数据。所以所有的mongod开启访问数据的授权authorization:enabled。这样用户只有账号密码正确才能访问到数据。</p><h3 id="3-4-4-重新启动节点"><a href="#3-4-4-重新启动节点" class="headerlink" title="3.4.4    重新启动节点"></a>3.4.4    重新启动节点</h3><p>必须依次启动配置节点、分片节点、路由节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27019/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27119/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myconfigrs_27219/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27318/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27418/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/sharded_cluster/myshardrs02_27518/mongod.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongos -f /mongodb/sharded_cluster/mymongos_27017/mongos.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongos -f /mongodb/sharded_cluster/mymongos_27117/mongos.conf</span><br></pre></td></tr></table></figure><p>注意：</p><p>这里有个非常特别的情况，就是启动顺序。先启动配置节点，再启动分片节点，最后启动路由节点。</p><p>如果先启动分片节点，会卡住，提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">about to fork child process, waiting until server is ready for connections</span><br></pre></td></tr></table></figure><p>这也许是个 bug。原因未知。</p><h3 id="3-3-5-创建帐号和认证"><a href="#3-3-5-创建帐号和认证" class="headerlink" title="3.3.5    创建帐号和认证"></a>3.3.5    创建帐号和认证</h3><p>客户端mongo，通过localhost登录任意一个mongos路由，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost db]<span class="comment"># /usr/local/mongodb/bin/mongo --port 27017</span></span><br></pre></td></tr></table></figure><p>提示：相当于一个后门，只能在 admin下添加用户。</p><p>创建一个管理员帐号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">mongos&gt;  db.createUser(&#123;user:&quot;myroot&quot;,pwd:&quot;123456&quot;,roles:[&quot;root&quot;]&#125;)</span><br><span class="line">Successfully added user: &#123; &quot;user&quot; : &quot;myroot&quot;, &quot;roles&quot; : [ &quot;root&quot; ] &#125;</span><br></pre></td></tr></table></figure><p>提示：如果在开启认证之前已经创建了管理员账号，这里可以忽略</p><p>创建一个普通权限帐号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">mongos&gt; db.auth(&quot;myroot&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">mongos&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">mongos&gt; db.createUser(&#123;user: &quot;bobo&quot;, pwd: &quot;123456&quot;, roles: [&#123; role: &quot;readWrite&quot;,db: &quot;articledb&quot; &#125;]&#125;)</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">    &quot;user&quot; : &quot;bobo&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;role&quot; : &quot;readWrite&quot;,</span><br><span class="line">          &quot;db&quot; : &quot;articledb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">mongos&gt; db.auth(&quot;bobo&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>提示：</p><p>通过mongos添加的账号信息，只会保存到配置节点的服务中，具体的数据节点不保存账号信息，因此，分片中的账号信息不涉及到同步问题。</p><p>mongo客户端登录mongos路由，用管理员帐号登录可查看分片情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">mongos&gt;  db.auth(&quot;myroot&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">mongos&gt; sh.status()</span><br></pre></td></tr></table></figure><p>退出连接，重新连接服务，使用普通权限帐号访问数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@bobohost db]# &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo --host 180.76.159.126 --port 27017</span><br><span class="line">MongoDB shell version v4.0.10</span><br><span class="line">connecting to: mongodb:&#x2F;&#x2F;180.76.159.126:27017&#x2F;?gssapiServiceName&#x3D;mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;6f84fa91-2414-407e-b3ab-c0b7eedde825&quot;)</span><br><span class="line">&#125;</span><br><span class="line">MongoDB server version: 4.0.10</span><br><span class="line">mongos&gt; use articledb</span><br><span class="line">switched to db articledb</span><br><span class="line">mongos&gt; db.auth(&quot;bobo&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">mongos&gt; show collections</span><br><span class="line">comment</span><br><span class="line">comment2</span><br><span class="line">mongos&gt; db.comment.count()</span><br><span class="line">10001</span><br></pre></td></tr></table></figure><h3 id="3-3-6-SpringDataMongoDB连接认证"><a href="#3-3-6-SpringDataMongoDB连接认证" class="headerlink" title="3.3.6    SpringDataMongoDB连接认证"></a>3.3.6    SpringDataMongoDB连接认证</h3><p>使用用户名和密码连接到 MongoDB 服务器，你必须使用<code>&#39;username:password@hostname/dbname&#39;</code> 格式，’username’为用户名，’password’ 为密码。</p><p>目标：使用用户bobo使用密码 123456 连接到MongoDB 服务上。</p><p>application.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment">#数据源配置</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">mongodb:</span></span><br><span class="line">        <span class="comment"># 分片集群有认证的情况下，字符串连接</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">mongodb://bobo:123456@180.76.159.126:27017,180.76.159.126:27117/articledb</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-副本集-Replica-Sets&quot;&gt;&lt;a href=&quot;#1-副本集-Replica-Sets&quot; class=&quot;headerlink&quot; title=&quot;1.    副本集-Replica Sets&quot;&gt;&lt;/a&gt;1.    副本集-Replica Sets&lt;/h1&gt;&lt;h2 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.1    简介&quot;&gt;&lt;/a&gt;1.1    简介&lt;/h2&gt;&lt;p&gt;MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高可用性，是所有生产部署的基础。&lt;/p&gt;
&lt;p&gt;也可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用多台机器进行同一数据的异步同步，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动切换其他备份服务器做主库。而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="服务器中间件" scheme="https://wgy1993.gitee.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="NoSQL存储" scheme="https://wgy1993.gitee.io/tags/NoSQL%E5%AD%98%E5%82%A8/"/>
    
      <category term="MongoDB" scheme="https://wgy1993.gitee.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Linux(三)</title>
    <link href="https://wgy1993.gitee.io/archives/c09edc62.html"/>
    <id>https://wgy1993.gitee.io/archives/c09edc62.html</id>
    <published>2020-09-14T10:28:08.000Z</published>
    <updated>2020-09-14T10:29:40.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-CentOS7扩容根分区"><a href="#1-CentOS7扩容根分区" class="headerlink" title="1.    CentOS7扩容根分区"></a>1.    CentOS7扩容根分区</h1><h2 id="1-1-LVM根分区扩容"><a href="#1-1-LVM根分区扩容" class="headerlink" title="1.1    LVM根分区扩容"></a>1.1    LVM根分区扩容</h2><ul><li><p>查看现有分区大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -TH</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>  <img src="https://img-blog.csdnimg.cn/20200914181051698.png" alt="image-20200914161342481"></p><p>  LVM分区，磁盘总大小为20G,根分区总容量为17G</p><ul><li><p>关机增加大小为30G（测试环境使用的Vmware Workstation）</p><p><img src="https://img-blog.csdnimg.cn/20200914181123851.png" alt="image-20200914161431416"></p><p>扩展分区到30G</p></li><li><p>查看扩容后磁盘大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df -TH</span><br><span class="line"></span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181143830.png" alt="image-20200914161649148"></p><p>磁盘总大小为30G,根分区为17G</p></li><li><p>创建分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181210248.png" alt="image-20200914161748503"></p><p>将sda剩余空间全部给sda3</p></li><li><p>刷新分区并创建物理卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">partprobe /dev/sda</span><br><span class="line"></span><br><span class="line">pvcreate /dev/sda3</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181231575.png" alt="image-20200914161931473"></p></li><li><p>查看卷组名称，以及卷组使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgdisplay</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181253565.png" alt="image-20200914162113802"></p><p>VG Name为centos</p></li><li><p>将物理卷扩展到卷组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgextend centos /dev/sda3</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181317464.png" alt="image-20200914162231017"></p><p>使用sda3扩展VG  centos </p></li><li><p>查看当前逻辑卷的空间状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvdisplay</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181341824.png" alt="image-20200914162339574"></p><p>需要扩展LV  /dev/centos/root</p></li><li><p>将卷组中的空闲空间扩展到根分区逻辑卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/centos/root</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181413258.png" alt="image-20200914162534480"></p></li><li><p>刷新根分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfs_growfs /dev/centos/root</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181434901.png" alt="image-20200914162622842"></p></li><li><p>查看磁盘使用情况，扩展之前和之后是不一样的</p><p><img src="https://img-blog.csdnimg.cn/20200914181451478.png" alt="image-20200914163429737"></p><p>根分区已经变成27G</p></li></ul><h2 id="1-2-非LVM根分区扩容"><a href="#1-2-非LVM根分区扩容" class="headerlink" title="1.2    非LVM根分区扩容"></a>1.2    非LVM根分区扩容</h2><ul><li><p>查看现有的分区大小</p><p><img src="https://img-blog.csdnimg.cn/20200914181517644.png" alt="image-20200914163705284"></p><p>非LVM分区，目前磁盘大小为20G，根分区总容量为17G</p></li><li><p>关机增加磁盘大小为30G</p><p><img src="https://img-blog.csdnimg.cn/20200914181536405.png" alt="image-20200914164545805"></p></li><li><p>查看磁盘扩容后状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br><span class="line"></span><br><span class="line">df -TH</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181553435.png" alt="image-20200914164720515"></p><p>现在磁盘总大小为30G,根分区为17G</p></li><li><p>进行分区扩展磁盘，<strong>记住根分区起始位置和结束位置</strong></p><p><img src="https://img-blog.csdnimg.cn/20200914181612384.png" alt="image-20200914164820689"></p></li><li><p>删除根分区，切记不要保存</p><p><img src="https://img-blog.csdnimg.cn/20200914181632507.png" alt="image-20200914164926192"></p></li><li><p>创建分区，箭头位置为分区起始位置</p><p><img src="https://img-blog.csdnimg.cn/20200914181648751.png" alt="image-20200914165020762"></p></li><li><p>保存退出并刷新分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partpeobe /dev/sda</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181712652.png" alt="image-20200914165145227"></p></li><li><p>查看分区状态</p><p><img src="https://img-blog.csdnimg.cn/2020091418172814.png" alt="image-20200914165222001"></p></li><li><p>刷新根分区并查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfs_growfs /dev/sda3</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200914181744495.png" alt="image-20200914165330121"></p><p>根分区大小已变为27G</p></li></ul><h1 id="2-配置swap分区"><a href="#2-配置swap分区" class="headerlink" title="2.    配置swap分区"></a>2.    配置swap分区</h1><ul><li><p>创建分区</p><p><img src="https://img-blog.csdnimg.cn/20200914181803728.png" alt="image-20200914180226342"></p></li><li><p>设置分区的编号为2，选择分区的类型为linux swap</p><p><img src="https://img-blog.csdnimg.cn/20200914181820683.png" alt="image-20200914180305600"></p><p><img src="https://img-blog.csdnimg.cn/20200914181839685.png" alt="image-20200914180344474"></p></li><li><p>w键将分区信息写入，partprobe进行内核读取分区</p><p><img src="https://img-blog.csdnimg.cn/20200914181859206.png" alt="image-20200914180510487"></p></li><li><p>开启swap分区，命令为swapon 分区的名称</p><p><img src="https://img-blog.csdnimg.cn/20200914181916949.png" alt="image-20200914180604684"></p></li><li><p>查看swap的分区信息，命令为swapon -s或者free -m</p><p><img src="https://img-blog.csdnimg.cn/20200914181933278.png" alt="image-20200914180648289"></p><p><img src="https://img-blog.csdnimg.cn/20200914181946923.png" alt="image-20200914180712416"></p></li><li><p>编辑/etc/fstab文件，设置自动挂载的信息，挂载swap分区</p><p><img src="https://img-blog.csdnimg.cn/20200914182002144.png" alt="image-20200914180749766"></p><p>查看硬盘UUID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev/disk/by-uuid</span><br><span class="line">或</span><br><span class="line">blkid /dev/sda1</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-CentOS7扩容根分区&quot;&gt;&lt;a href=&quot;#1-CentOS7扩容根分区&quot; class=&quot;headerlink&quot; title=&quot;1.    CentOS7扩容根分区&quot;&gt;&lt;/a&gt;1.    CentOS7扩容根分区&lt;/h1&gt;&lt;h2 id=&quot;1-1-LVM根分区扩容&quot;&gt;&lt;a href=&quot;#1-1-LVM根分区扩容&quot; class=&quot;headerlink&quot; title=&quot;1.1    LVM根分区扩容&quot;&gt;&lt;/a&gt;1.1    LVM根分区扩容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看现有分区大小&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;df -TH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://wgy1993.gitee.io/tags/Linux/"/>
    
      <category term="操作系统" scheme="https://wgy1993.gitee.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB(一)</title>
    <link href="https://wgy1993.gitee.io/archives/d69f1e.html"/>
    <id>https://wgy1993.gitee.io/archives/d69f1e.html</id>
    <published>2020-09-12T14:21:16.000Z</published>
    <updated>2020-09-12T14:41:28.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MongoDB-相关概念"><a href="#1-MongoDB-相关概念" class="headerlink" title="1.    MongoDB 相关概念"></a>1.    MongoDB 相关概念</h1><h2 id="1-1-业务应用场景"><a href="#1-1-业务应用场景" class="headerlink" title="1.1    业务应用场景"></a>1.1    业务应用场景</h2><p>传统的关系型数据库（如MySQL），在数据操作的“三高”需求以及应对Web2.0的网站需求面前，显得力不从心。</p><p>解释：“三高”需求：</p><ul><li>High performance - 对数据库高并发读写的需求。</li><li>Huge Storage - 对海量数据的高效率存储和访问的需求。</li><li>High Scalability &amp;&amp; High Availability- 对数据库的高可扩展性和高可用性的需求。</li></ul><a id="more"></a><p><strong>而MongoDB可应对“三高”需求。</strong></p><p>具体的应用场景如：</p><ul><li>社交场景，使用 MongoDB 存储存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。</li><li>游戏场景，使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、高效率存储和访问。</li><li>物流场景，使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。</li><li>物联网场景，使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析。</li><li>视频直播，使用 MongoDB 存储用户信息、点赞互动信息等。</li></ul><p>这些应用场景中，数据操作方面的共同特点是：</p><ul><li>数据量大</li><li>写入操作频繁（读写都很频繁）</li><li>价值较低的数据，对事务性要求不高</li></ul><p>对于这样的数据，我们更适合使用MongoDB来实现数据的存储。</p><p><strong>什么时候选择MongoDB</strong></p><p>在架构选型上，除了上述的三个特点外，如果你还犹豫是否要选择它？可以考虑以下的一些问题：</p><ul><li>应用不需要事务及复杂 join 支持</li><li>新应用，需求会变，数据模型无法确定，想快速迭代开发</li><li>应用需要2000-3000以上的读写QPS（更高也可以）</li><li>应用需要TB甚至 PB 级别数据存储</li><li>应用发展迅速，需要能快速水平扩展</li><li>应用要求存储的数据不丢失</li><li>应用需要99.999%高可用</li><li>应用需要大量的地理位置查询、文本查询</li></ul><p>如果上述有1个符合，可以考虑 MongoDB，2个及以上的符合，选择 MongoDB 绝不会后悔。</p><h2 id="1-2-MongoDB-简介"><a href="#1-2-MongoDB-简介" class="headerlink" title="1.2    MongoDB 简介"></a>1.2    MongoDB 简介</h2><p>MongoDB是一个开源、高性能、无模式的文档型数据库，当初的设计就是用于简化开发和方便扩展，是NoSQL数据库产品中的一种。是最像关系型数据库（MySQL）的非关系型数据库。</p><p>它支持的数据结构非常松散，是一种类似于 JSON 的 格式叫BSON，所以它既可以存储比较复杂的数据类型，又相当的灵活。</p><p>MongoDB中的记录是一个文档，它是一个由字段和值对（field:value）组成的数据结构。MongoDB文档类似于JSON对象，即一个文档认为就是一个对象。字段的数据类型是字符型，它的值除了使用基本的一些类型外，还可以包括其他文档、普通数组和文档数组。</p><h2 id="1-3-体系结构"><a href="#1-3-体系结构" class="headerlink" title="1.3    体系结构"></a>1.3    体系结构</h2><p>MySQL和MongoDB对比</p><p><img src="https://img-blog.csdnimg.cn/20200912222258123.png" alt="image-20200912105858071"></p><table><thead><tr><th>SQL 术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td></td><td>嵌入文档</td><td>MongoDB通过嵌入式文档来替代多表连接</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h2 id="1-4-数据模型"><a href="#1-4-数据模型" class="headerlink" title="1.4    数据模型"></a>1.4    数据模型</h2><p>MongoDB的最小存储单位就是文档(document)对象。文档(document)对象对应于关系型数据库的行。数据在MongoDB中以BSON（Binary-JSON）文档的格式存储在磁盘上。</p><p>BSON（Binary Serialized Document Format）是一种类json的一种二进制形式的存储格式，简称Binary JSON。BSON和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和BinData类型。</p><p>BSON采用了类似于 C 语言结构体的名称、对表示方法，支持内嵌的文档对象和数组对象，具有轻量性、可遍历性、高效性的三个特点，可以有效描述非结构化数据和结构化数据。这种格式的优点是灵活性高，但它的缺点是空间利用率不是很理想。</p><p>Bson中，除了基本的JSON类型：string,integer,boolean,double,null,array和object，mongo还使用了特殊的数据类型。这些类型包括date,object id,binary data,regular expression 和code。每一个驱动都以特定语言的方式实现了这些类型，查看你的驱动的文档来获取详细信息。</p><p>BSON数据类型参考列表：</p><table><thead><tr><th>数据类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>字符串</td><td>UTF-8字符串都可表示为字符串类型的数据</td><td>{“x” : “foobar”}</td></tr><tr><td>对象id</td><td>对象id是文档的12字节的唯一 ID</td><td>{“X” :ObjectId() }</td></tr><tr><td>布尔值</td><td>真或者假：true或者false</td><td>{“x”:true}</td></tr><tr><td>数组</td><td>值的集合或者列表可以表示成数组</td><td>{“x” ： [“a”, “b”, “c”]}</td></tr><tr><td>32位整数</td><td>类型不可用。JavaScript仅支持64位浮点数，所以32位整数会被自动转换。</td><td>shell是不支持该类型的，shell中默认会转换成64位浮点数</td></tr><tr><td>64位整数</td><td>不支持这个类型。shell会使用一个特殊的内嵌文档来显示64位整数</td><td>shell是不支持该类型的，shell中默认会转换成64位浮点数</td></tr><tr><td>64位浮点数</td><td>shell中的数字就是这一种类型</td><td>{“x”：3.14159，”y”：3}</td></tr><tr><td>null</td><td>表示空值或者未定义的对象</td><td>{“x”:null}</td></tr><tr><td>undefined</td><td>文档中也可以使用未定义类型</td><td>{“x”:undefined}</td></tr><tr><td>符号</td><td>shell不支持，shell会将数据库中的符号类型的数据自动转换成字符串</td><td></td></tr><tr><td>正则表达式</td><td>文档中可以包含正则表达式，采用JavaScript的正则表达式语法</td><td>{“x” ： /foobar/i}</td></tr><tr><td>代码</td><td>文档中还可以包含JavaScript代码</td><td>{“x” ： function() { /* …… */ }}</td></tr><tr><td>二进制数据</td><td>二进制数据可以由任意字节的串组成，不过shell中无法使用</td><td></td></tr><tr><td>最大值/最小值</td><td>BSON包括一个特殊类型，表示可能的最大值。shell中没有这个类型。</td><td></td></tr></tbody></table><p>提示：</p><p>shell默认使用64位浮点型数值。{“x”：3.14}或{“x”：3}。对于整型值，可以使用NumberInt（4字节符号整数）或NumberLong（8字节符号整数），{“x”:NumberInt(“3”)}{“x”:NumberLong(“3”)}</p><h2 id="1-5-MongoDB-的特点"><a href="#1-5-MongoDB-的特点" class="headerlink" title="1.5    MongoDB 的特点"></a>1.5    MongoDB 的特点</h2><p>MongoDB主要有如下特点：</p><ul><li><p>高性能：</p><p>MongoDB提供高性能的数据持久性。特别是</p><p>对嵌入式数据模型的支持减少了数据库系统上的I/O活动。</p><p>索引支持更快的查询，并且可以包含来自嵌入式文档和数组的键。（文本索引解决搜索的需求、TTL索引解决历史数据自动过期的需求、地理位置索引可用于构建各种 O2O 应用）</p><p>mmapv1、wiredtiger、mongorocks（rocksdb）、in-memory 等多引擎支持满足各种场景需求。</p><p>Gridfs解决文件存储的需求。</p></li><li><p>高可用性：</p><p>MongoDB的复制工具称为副本集（replica set），它可提供自动故障转移和数据冗余。</p></li><li><p>高扩展性：</p><p>MongoDB提供了水平可扩展性作为其核心功能的一部分。</p><p>分片将数据分布在一组集群的机器上。（海量数据存储，服务能力水平扩展）</p><p>从3.4开始，MongoDB支持基于片键创建数据区域。在一个平衡的集群中，MongoDB将一个区域所覆盖的读写只定向到该区域内的那些片。</p></li><li><p>丰富的查询支持：</p><p>MongoDB支持丰富的查询语言，支持读和写操作(CRUD)，比如数据聚合、文本搜索和地理空间查询等。</p></li><li><p>其他特点：如无模式（动态模式）、灵活的文档模型、</p></li></ul><h1 id="2-单机部署"><a href="#2-单机部署" class="headerlink" title="2.    单机部署"></a>2.    单机部署</h1><h2 id="2-1-Windows-系统中的安装启动"><a href="#2-1-Windows-系统中的安装启动" class="headerlink" title="2.1    Windows 系统中的安装启动"></a>2.1    Windows 系统中的安装启动</h2><h3 id="2-1-1-下载安装包"><a href="#2-1-1-下载安装包" class="headerlink" title="2.1.1    下载安装包"></a>2.1.1    下载安装包</h3><p>MongoDB 提供了可用于 32 位和 64 位系统的预编译二进制包，你可以从MongoDB官网下载安装，MongoDB 预编译二进制包下地址：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a></p><p><img src="https://img-blog.csdnimg.cn/20200912222345916.png" alt="image-20200912113819545"></p><p>根据上图所示下载 zip 包。</p><p>提示：版本的选择：</p><p>MongoDB的版本命名规范如：x.y.z；</p><p>y为奇数时表示当前版本为开发版，如：1.5.2、4.1.13；</p><p>y为偶数时表示当前版本为稳定版，如：1.6.3、4.0.10；</p><p>z是修正版本号，数字越大越好。</p><p>详情： <a href="http://docs.mongodb.org/manual/release-notes/#release-version-numbers" target="_blank" rel="noopener">http://docs.mongodb.org/manual/release-notes/#release-version-numbers</a></p><h3 id="2-1-2-解压安装启动"><a href="#2-1-2-解压安装启动" class="headerlink" title="2.1.2    解压安装启动"></a>2.1.2    解压安装启动</h3><p>将压缩包解压到一个目录中。在解压目录中，手动建立一个目录用于存放数据文件，如 data/db</p><p><strong>方式1：命令行参数方式启动服务</strong></p><p>在 bin 目录中打开命令行提示符，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=..\data\db</span><br></pre></td></tr></table></figure><p>我们在启动信息中可以看到， mongoDB的默认端口是27017，如果我们想改变默认的启动端口，可以通过–port来指定端口。</p><p>为了方便我们每次启动，可以将安装目录的bin目录设置到环境变量的path中， bin 目录下是一些常用命令，比如 mongod 启动服务用的，mongo 客户端连接服务用的。</p><p><strong>方式2：配置文件方式启动服务</strong></p><p>在解压目录中新建 config 文件夹，该文件夹中新建配置文件 mongod.conf ，内如参考如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="comment">#The directory where the mongod instance stores its data.Default Value is "\data\db" on Windows.</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">D:\mongodb-win32-x86_64-2008plus-ssl-4.0.1\data</span></span><br></pre></td></tr></table></figure><p>详细配置项内容可以参考官方文档： <a href="https://docs.mongodb.com/manual/reference/configuration-options/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/configuration-options/</a></p><p><strong>【注意】</strong></p><ul><li><p>配置文件中如果使用双引号，比如路径地址，自动会将双引号的内容转义。如果不转义，则会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error-parsing-yaml-config-file-yaml-cpp-error-at-line-3-column-15-unknown-escape-character-d</span><br></pre></td></tr></table></figure><p>解决：</p><p>a. 对 \ 换成 / 或 \\</p><p>b. 如果路径中没有空格，则无需加引号。</p></li><li><p>配置文件中不能以Tab分割字段</p><p>解决：</p><p>将其转换成空格。</p></li></ul><p>启动方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -f ../config/mongod.conf</span><br><span class="line">或</span><br><span class="line">mongod --config ../config/mongod.conf</span><br></pre></td></tr></table></figure><p>更多参数配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="comment">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"D:/mongodb-win32-x86_64-2008plus-ssl-4.0.1/log/mongod.log"</span></span><br><span class="line">    <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="attr">journal:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#The directory where the mongod instance stores its data.Default Value is "/data/db".</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">"D:/mongodb-win32-x86_64-2008plus-ssl-4.0.1/data"</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">    <span class="comment">#bindIp: 127.0.0.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">setParameter:</span></span><br><span class="line">    <span class="attr">enableLocalhostAuthBypass:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Shell-连接-mongo命令"><a href="#2-2-Shell-连接-mongo命令" class="headerlink" title="2.2    Shell 连接(mongo命令)"></a>2.2    Shell 连接(mongo命令)</h2><p>在命令提示符输入以下shell命令即可完成登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">或</span><br><span class="line">mongo --host=127.0.0.1 --port=27017</span><br></pre></td></tr></table></figure><h3 id="2-2-1-查看已经有的数据库"><a href="#2-2-1-查看已经有的数据库" class="headerlink" title="2.2.1    查看已经有的数据库"></a>2.2.1    查看已经有的数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure><h3 id="2-2-2-退出-mongodb"><a href="#2-2-2-退出-mongodb" class="headerlink" title="2.2.2    退出 mongodb"></a>2.2.2    退出 mongodb</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>更多参数可以通过帮助查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --help</span><br></pre></td></tr></table></figure><p>提示：</p><p>MongoDB javascript shell是一个基于javascript的解释器，故是支持js程序的。</p><h2 id="2-3-Compass-图形化界面客户端"><a href="#2-3-Compass-图形化界面客户端" class="headerlink" title="2.3    Compass- 图形化界面客户端"></a>2.3    Compass- 图形化界面客户端</h2><p>到MongoDB官网下载MongoDB Compass，地址： <a href="https://www.mongodb.com/download-center/v2/compass?initial=true" target="_blank" rel="noopener">https://www.mongodb.com/download-center/v2/compass?initial=true</a></p><p>如果是下载安装版，则按照步骤安装；如果是下载加压缩版，直接解压，执行里面的MongoDBCompassCommunity.exe 文件即可。</p><p>在打开的界面中，输入主机地址、端口等相关信息，点击连接：</p><p><img src="https://img-blog.csdnimg.cn/20200912222408267.png" alt="image-20200912120121079"></p><h2 id="2-4-Linux-系统中的安装启动和连接"><a href="#2-4-Linux-系统中的安装启动和连接" class="headerlink" title="2.4    Linux 系统中的安装启动和连接"></a>2.4    Linux 系统中的安装启动和连接</h2><p>目标：在Linux中部署一个单机的MongoDB，作为生产环境下使用。</p><p>提示：和Windows下操作差不多。</p><p>步骤如下：</p><ul><li><p>先到官网下载压缩包 mongod -linux-x86_64-4.0.10.tgz 。</p></li><li><p>上传压缩包到Linux中，解压到当前目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mongodb-linux-x86_64-4.0.10.tgz</span><br></pre></td></tr></table></figure></li><li><p>移动解压后的文件夹到指定的目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mongodb-linux-x86_64-4.0.10 /usr/<span class="built_in">local</span>/mongodb</span><br></pre></td></tr></table></figure></li><li><p>新建几个目录，分别用来存储数据和日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据存储目录</span></span><br><span class="line">mkdir -p /mongodb/single/data/db</span><br><span class="line"><span class="comment">#日志存储目录</span></span><br><span class="line">mkdir -p /mongodb/single/<span class="built_in">log</span></span><br></pre></td></tr></table></figure></li><li><p>新建并修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /mongodb/single/mongod.conf</span><br></pre></td></tr></table></figure><p>配置文件的内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">      <span class="comment">#MongoDB发送所有日志输出的目标指定为文件</span></span><br><span class="line">      <span class="comment"># #The path of the log file to which mongod or mongos should send all diagnostic logging information</span></span><br><span class="line">      <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">      <span class="comment">#mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">"/mongodb/single/log/mongod.log"</span></span><br><span class="line">      <span class="comment">#当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。</span></span><br><span class="line">      <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">      <span class="comment">#mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。</span></span><br><span class="line">      <span class="comment">##The directory where the mongod instance stores its data.Default Value is "/data/db".</span></span><br><span class="line">      <span class="attr">dbPath:</span> <span class="string">"/mongodb/single/data/db"</span></span><br><span class="line">      <span class="attr">journal:</span></span><br><span class="line">          <span class="comment">#启用或禁用持久性日志以确保数据文件保持有效和可恢复。</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">      <span class="comment">#启用在后台运行mongos或mongod进程的守护进程模式。</span></span><br><span class="line">      <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">      <span class="comment">#服务实例绑定的IP，默认是localhost</span></span><br><span class="line">      <span class="attr">bindIp:</span> <span class="string">localhost,192.168.142.128</span></span><br><span class="line">      <span class="comment">#bindIp</span></span><br><span class="line">      <span class="comment">#绑定的端口，默认是27017</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br></pre></td></tr></table></figure></li><li><p>启动MongoDB服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /mongodb/single/mongod.conf</span><br></pre></td></tr></table></figure><p>注意：</p><p>如果启动后不是 successfully ，则是启动失败了。原因基本上就是配置文件有问题。</p><p>通过进程来查看服务是否启动了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep mongod</span><br></pre></td></tr></table></figure></li><li><p>分别使用mongo命令和compass工具来连接测试。</p><p>提示：如果远程连接不上，需要配置防火墙放行，或直接关闭linux防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment">#临时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">#开机禁止启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></li><li><p>停止关闭服务</p><p>停止服务的方式有两种：快速关闭和标准关闭，下面依次说明：</p><p><strong>（一）快速关闭方法（快速，简单，数据可能会出错）</strong></p><p>目标：通过系统的kill命令直接杀死进程：</p><p>杀完要检查一下，避免有的没有杀掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过进程编号关闭节点</span></span><br><span class="line"><span class="built_in">kill</span> -2 54410</span><br></pre></td></tr></table></figure><p>【补充】</p><p>如果一旦是因为数据损坏，则需要进行如下操作（了解）：</p><p>1）删除lock文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /mongodb/single/data/db/*.lock</span><br></pre></td></tr></table></figure><p>2 ）修复数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongdb/bin/mongod --repair --dbpath=/mongodb/single/data/db</span><br></pre></td></tr></table></figure><p><strong>（二）标准的关闭方法（数据不容易出错，但麻烦）：</strong></p><p>目标：通过mongo客户端中的shutdownServer命令来关闭服务</p><p>主要的操作步骤参考如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//客户端登录服务，注意，这里通过localhost登录，如果需要远程登录，必须先登录认证才行。</span><br><span class="line">mongo --port 27017</span><br><span class="line">//<span class="comment">#切换到admin库</span></span><br><span class="line">use admin</span><br><span class="line">//关闭服务</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-基本常用命令"><a href="#3-基本常用命令" class="headerlink" title="3.    基本常用命令"></a>3.    基本常用命令</h1><h2 id="3-1-案例需求"><a href="#3-1-案例需求" class="headerlink" title="3.1    案例需求"></a>3.1    案例需求</h2><p>存放文章评论的数据存放到MongoDB中，数据结构参考如下：</p><p>数据库：articledb</p><table><thead><tr><th>专栏文章评论</th><th>comment</th><th></th><th></th></tr></thead><tbody><tr><td>字段名称</td><td>字段含义</td><td>字段类型</td><td>备注</td></tr><tr><td>_id</td><td>ID</td><td>ObjectId或String</td><td>Mongo的主键的字段</td></tr><tr><td>articleid</td><td>文章ID</td><td>String</td><td></td></tr><tr><td>content</td><td>评论内容</td><td>String</td><td></td></tr><tr><td>userid</td><td>评论人ID</td><td>String</td><td></td></tr><tr><td>nickname</td><td>评论人昵称</td><td>String</td><td></td></tr><tr><td>createdatetime</td><td>评论的日期时间</td><td>Date</td><td></td></tr><tr><td>likenum</td><td>点赞数</td><td>Int32</td><td></td></tr><tr><td>replynum</td><td>回复数</td><td>Int32</td><td></td></tr><tr><td>state</td><td>状态</td><td>String</td><td>0：不可见；1：可见；</td></tr><tr><td>parentid</td><td>上级ID</td><td>String</td><td>如果为0表示文章的顶级评论</td></tr></tbody></table><h2 id="3-2-数据库操作"><a href="#3-2-数据库操作" class="headerlink" title="3.2    数据库操作"></a>3.2    数据库操作</h2><h3 id="3-2-1-选择和创建数据库"><a href="#3-2-1-选择和创建数据库" class="headerlink" title="3.2.1    选择和创建数据库"></a>3.2.1    选择和创建数据库</h3><p>选择和创建数据库的语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称</span><br></pre></td></tr></table></figure><p>如果数据库不存在则自动创建，例如，以下语句创建 articledb 数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use articledb</span><br></pre></td></tr></table></figure><p>查看有权限的所有的数据库命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br><span class="line">或</span><br><span class="line">show databases</span><br></pre></td></tr></table></figure><blockquote><p>注意 : 在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建。</p></blockquote><p>查看当前正在使用的数据库命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><p>MongoDB  中默认的数据库为 test，如果你没有选择数据库，集合将存放在 test 数据库中。</p><p>另外：</p><p>数据库名可以是满足以下条件的任意UTF-8字符串。</p><ul><li>不能是空字符串（ “”)。</li><li>不得含有 ‘ ‘（空格)、.、$、/、\和\0 (空字符)。</li><li>应全部小写。</li><li>最多 64字节。</li></ul><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p><ul><li>admin ： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li>local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li>config : 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li></ul><h3 id="3-2-2-数据库的删除"><a href="#3-2-2-数据库的删除" class="headerlink" title="3.2.2    数据库的删除"></a>3.2.2    数据库的删除</h3><p>MongoDB 删除数据库的语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p>提示：主要用来删除已经持久化的数据库</p><h2 id="3-3-集合操作"><a href="#3-3-集合操作" class="headerlink" title="3.3    集合操作"></a>3.3    集合操作</h2><p>集合，类似关系型数据库中的表。</p><p>可以显示的创建，也可以隐式的创建。</p><h3 id="3-3-1-集合的显式创建"><a href="#3-3-1-集合的显式创建" class="headerlink" title="3.3.1    集合的显式创建"></a>3.3.1    集合的显式创建</h3><p>基本语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>name:  要创建的集合名称</li></ul><p>例如：创建一个名为 mycollection 的普通集合。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(<span class="string">"mycollection"</span>)</span><br></pre></td></tr></table></figure><p>查看当前库中的表： show tables命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br><span class="line">或</span><br><span class="line">show tables</span><br></pre></td></tr></table></figure><p>集合的命名规范：</p><ul><li>集合名不能是空字符串 “”。</li><li>集合名不能含有 \0字符（空字符)，这个字符表示集合名的结尾。</li><li>集合名不能以 “system.”开头，这是为系统集合保留的前缀。</li><li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。</li></ul><h3 id="3-3-2-集合的隐式创建"><a href="#3-3-2-集合的隐式创建" class="headerlink" title="3.3.2    集合的隐式创建"></a>3.3.2    集合的隐式创建</h3><p>当向一个集合中插入一个文档的时候，如果集合不存在，则会自动创建集合。</p><p>详见 文档的插入 章节。</p><p>提示：通常我们使用隐式创建文档即可。</p><h3 id="3-3-3-集合的删除"><a href="#3-3-3-集合的删除" class="headerlink" title="3.3.3    集合的删除"></a>3.3.3    集合的删除</h3><p>集合删除语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br><span class="line">或</span><br><span class="line">db.集合.drop()</span><br></pre></td></tr></table></figure><p>返回值</p><p>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</p><p>例如：要删除mycollection集合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycollection.drop()</span><br></pre></td></tr></table></figure><h2 id="3-4-文档基本CRUD"><a href="#3-4-文档基本CRUD" class="headerlink" title="3.4    文档基本CRUD"></a>3.4    文档基本CRUD</h2><p>文档（document）的数据结构和 JSON 基本一样。</p><p>所有存储在集合中的数据都是 BSON 格式。</p><h3 id="3-4-1-文档的插入"><a href="#3-4-1-文档的插入" class="headerlink" title="3.4.1    文档的插入"></a>3.4.1    文档的插入</h3><h4 id="3-4-1-1-单个文档插入"><a href="#3-4-1-1-单个文档插入" class="headerlink" title="3.4.1.1    单个文档插入"></a>3.4.1.1    单个文档插入</h4><p>使用insert() 或 save() 方法向集合中插入文档，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.insert(</span><br><span class="line">    &lt;document or array of documents&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">        writeConcern: &lt;document&gt;,</span><br><span class="line">        ordered: &lt;boolean&gt;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>document</td><td>document or array</td><td>要插入到集合中的文档或文档数组。（(json格式）</td></tr><tr><td>writeConcern</td><td>document</td><td>Optional. A document expressing the write concern . Omit to use the default write concern. See Write Concern .Do not explicitly set the write concern for the operation if run in a transaction. To use write concern with transactions, see Transactions and Write Concern</td></tr><tr><td>ordered</td><td>boolean</td><td>可选。如果为真，则按顺序插入数组中的文档，如果其中一个文档出现错误，MongoDB将返回而不处理数组中的其余文档。如果为假，则执行无序插入，如果其中一个文档出现错误，则继续处理数组中的主文档。在版本2.6+中默认为true</td></tr></tbody></table><p>【示例】</p><p>要向comment的集合(表)中插入一条测试数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insert(&#123;<span class="string">"articleid"</span>:<span class="string">"100000"</span>,<span class="string">"content"</span>:<span class="string">"今天天气真好，阳光明媚"</span>,<span class="string">"userid"</span>:<span class="string">"1001"</span>,<span class="string">"nickname"</span>:<span class="string">"Rose"</span>,<span class="string">"createdatetime"</span>:new Date(),<span class="string">"likenum"</span>:NumberInt(10),<span class="string">"state"</span>:null&#125;)</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>comment集合如果不存在，则会隐式创建</li><li>mongo中的数字，默认情况下是double类型，如果要存整型，必须使用函数NumberInt(整型数字)，否则取出来就有问题了。</li><li>插入当前日期使用 new Date()</li><li>插入的数据没有指定 _id ，会自动生成主键值</li><li>如果某字段没值，可以赋值为null，或不写该字段。</li></ul><p>执行后，如下，说明插入一个数据成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>文档中的键/值对是有序的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li>MongoDB区分类型和大小写。</li><li>MongoDB的文档不能有重复的键。</li><li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li></ul><p>文档键命名规范：</p><ul><li>键不能含有 \0 (空字符)。这个字符用来表示键的结尾。</li><li>. 和$有特别的意义，只有在特定环境下才能使用。</li><li>以下划线 “_”开头的键是保留的(不是严格要求的)。</li></ul><h4 id="3-4-1-2-批量插入"><a href="#3-4-1-2-批量插入" class="headerlink" title="3.4.1.2    批量插入"></a>3.4.1.2    批量插入</h4><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.insertMany(</span><br><span class="line">     [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],</span><br><span class="line">     &#123;</span><br><span class="line">         writeConcern: &lt;document&gt;,</span><br><span class="line">         ordered: &lt;boolean&gt;</span><br><span class="line">     &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>【示例】</p><p>批量插入多条文章评论：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insertMany([</span><br><span class="line">    &#123;<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"我们不应该把清晨浪费在手机上，健康很重要，一杯温水幸福你我他。"</span>,<span class="string">"userid"</span>:<span class="string">"1002"</span>,<span class="string">"nickname"</span>:<span class="string">"相忘于江湖"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-05T22:08:15.522Z"</span>),<span class="string">"likenum"</span>:NumberInt(1000),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"_id"</span>:<span class="string">"2"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"我夏天空腹喝凉开水，冬天喝温开水"</span>,<span class="string">"userid"</span>:<span class="string">"1005"</span>,<span class="string">"nickname"</span>:<span class="string">"伊人憔悴"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-05T23:58:51.485Z"</span>),<span class="string">"likenum"</span>:NumberInt(888),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"_id"</span>:<span class="string">"3"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"我一直喝凉开水，冬天夏天都喝。"</span>,<span class="string">"userid"</span>:<span class="string">"1004"</span>,<span class="string">"nickname"</span>:<span class="string">"杰克船长"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-06T01:05:06.321Z"</span>),<span class="string">"likenum"</span>:NumberInt(666),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"_id"</span>:<span class="string">"4"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"专家说不能空腹吃饭，影响健康。"</span>,<span class="string">"userid"</span>:<span class="string">"1003"</span>,<span class="string">"nickname"</span>:<span class="string">"凯撒"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-06T08:18:35.288Z"</span>),<span class="string">"likenum"</span>:NumberInt(2000),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"_id"</span>:<span class="string">"5"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"研究表明，刚烧开的水千万不能喝，因为烫嘴。"</span>,<span class="string">"userid"</span>:<span class="string">"1003"</span>,<span class="string">"nickname"</span>:<span class="string">"凯撒"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-06T11:01:02.521Z"</span>),<span class="string">"likenum"</span>:NumberInt(3000),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;</span><br><span class="line"> </span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>提示：</p><p>插入时指定了 _id ，则主键就是该值。</p><p>如果某条数据插入失败，将会终止插入，但已经插入成功的数据不会回滚掉。</p><p>因为批量插入由于数据较多容易出现失败，因此，可以使用try catch进行异常捕捉处理，测试的时候可以不处理。如（了解）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    db.comment.insertMany([</span><br><span class="line">        &#123;<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"我们不应该把清晨浪费在手机上，健康很重要，一杯温水幸福你我他。"</span>,<span class="string">"userid"</span>:<span class="string">"1002"</span>,<span class="string">"nickname"</span>:<span class="string">"相忘于江湖"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-05T22:08:15.522Z"</span>),<span class="string">"likenum"</span>:NumberInt(1000),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"_id"</span>:<span class="string">"2"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"我夏天空腹喝凉开水，冬天喝温开水"</span>,<span class="string">"userid"</span>:<span class="string">"1005"</span>,<span class="string">"nickname"</span>:<span class="string">"伊人憔悴"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-05T23:58:51.485Z"</span>),<span class="string">"likenum"</span>:NumberInt(888),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"_id"</span>:<span class="string">"3"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"我一直喝凉开水，冬天夏天都喝。"</span>,<span class="string">"userid"</span>:<span class="string">"1004"</span>,<span class="string">"nickname"</span>:<span class="string">"杰克船长"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-06T01:05:06.321Z"</span>),<span class="string">"likenum"</span>:NumberInt(666),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"_id"</span>:<span class="string">"4"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"专家说不能空腹吃饭，影响健康。"</span>,<span class="string">"userid"</span>:<span class="string">"1003"</span>,<span class="string">"nickname"</span>:<span class="string">"凯撒"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-06T08:18:35.288Z"</span>),<span class="string">"likenum"</span>:NumberInt(2000),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"_id"</span>:<span class="string">"5"</span>,<span class="string">"articleid"</span>:<span class="string">"100001"</span>,<span class="string">"content"</span>:<span class="string">"研究表明，刚烧开的水千万不能喝，因为烫嘴。"</span>,<span class="string">"userid"</span>:<span class="string">"1003"</span>,<span class="string">"nickname"</span>:<span class="string">"凯撒"</span>,<span class="string">"createdatetime"</span>:new Date(<span class="string">"2019-08-06T11:01:02.521Z"</span>),<span class="string">"likenum"</span>:NumberInt(3000),<span class="string">"state"</span>:<span class="string">"1"</span>&#125;</span><br><span class="line"></span><br><span class="line">    ]);</span><br><span class="line"> </span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    <span class="built_in">print</span> (e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-文档的基本查询"><a href="#3-4-2-文档的基本查询" class="headerlink" title="3.4.2    文档的基本查询"></a>3.4.2    文档的基本查询</h3><p>查询数据的语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(&lt;query&gt;, [projection])</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>query</td><td>document</td><td>可选。使用查询运算符指定选择筛选器。若要返回集合中的所有文档，请省略此参数或传递空文档( {} )。</td></tr><tr><td>projection</td><td>document</td><td>可选。指定要在与查询筛选器匹配的文档中返回的字段（投影）。若要返回匹配文档中的所有字段，请省略此参数。</td></tr></tbody></table><p>【示例】</p><h4 id="3-4-2-1-查询所有"><a href="#3-4-2-1-查询所有" class="headerlink" title="3.4.2.1    查询所有"></a>3.4.2.1    查询所有</h4><p>如果我们要查询comment集合的所有文档，我们输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find()</span><br><span class="line">或</span><br><span class="line">db.comment.find(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这里你会发现每条文档会有一个叫 _id的字段，这个相当于我们原来关系数据库中表的主键，当你在插入文档记录时没有指定该字段，MongoDB会自动创建，其类型是ObjectID类型。</p><p>如果我们在插入文档记录时指定该字段也可以，其类型可以是ObjectID类型，也可以是MongoDB支持的任意类型。</p><p>如果我想按一定条件来查询，比如我想查询userid为1003的记录，怎么办？很简单！只 要在find()中添加参数即可，参数也是json格式，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:<span class="string">'1003'</span>&#125;)</span><br></pre></td></tr></table></figure><p>如果你只需要返回符合条件的第一条数据，我们可以使用findOne命令来实现，语法和find一样。</p><p>如：查询用户编号是1003的记录，但只最多返回符合条件的第一条记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.findOne(&#123;userid:<span class="string">'1003'</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-4-2-2-投影查询（Projection-Query）"><a href="#3-4-2-2-投影查询（Projection-Query）" class="headerlink" title="3.4.2.2    投影查询（Projection Query）"></a>3.4.2.2    投影查询（Projection Query）</h4><p>如果要查询结果返回部分字段，则需要使用投影查询（不显示所有字段，只显示指定的字段）。</p><p>如：查询结果只显示 _id 、userid、nickname :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:<span class="string">"1003"</span>&#125;,&#123;userid:1,nickname:1&#125;)</span><br></pre></td></tr></table></figure><p>默认 _id 会显示。</p><p>如：查询结果只显示 、 userid、nickname ，不显示 _id ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:<span class="string">"1003"</span>&#125;,&#123;userid:1,nickname:1,_id:0&#125;)</span><br></pre></td></tr></table></figure><p>再例如：查询所有数据，但只显示 _id 、userid、nickname :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;&#125;,&#123;userid:1,nickname:1&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-4-3-文档的更新"><a href="#3-4-3-文档的更新" class="headerlink" title="3.4.3    文档的更新"></a>3.4.3    文档的更新</h3><p>更新文档的语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(query, update, options)</span><br><span class="line">//或</span><br><span class="line">db.collection.update(</span><br><span class="line">    &lt;query&gt;,</span><br><span class="line">    &lt;update&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">        upsert: &lt;boolean&gt;,</span><br><span class="line">        multi: &lt;boolean&gt;,</span><br><span class="line">        writeConcern: &lt;document&gt;,</span><br><span class="line">        collation: &lt;document&gt;,</span><br><span class="line">        arrayFilters: [ &lt;filterdocument1&gt;, ... ],</span><br><span class="line">        hint:  &lt;document|string&gt;     // Available starting <span class="keyword">in</span> MongoDB 4.2</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>query</td><td>document</td><td>更新的选择条件。可以使用与find（）方法中相同的查询选择器，类似sql update查询内where后面的。。在3.0版中进行了更改：当使用upsert:true执行update（）时，如果查询使用点表示法在_id 字段上指定条件，则MongoDB将拒绝插入新文档。</td></tr><tr><td>multi</td><td>boolean</td><td>可选。如果设置为true，则更新符合查询条件的多个文档。如果设置为false，则更新一个文档。默认值为false。</td></tr></tbody></table><p>【示例】</p><h4 id="3-4-3-1-覆盖的修改"><a href="#3-4-3-1-覆盖的修改" class="headerlink" title="3.4.3.1    覆盖的修改"></a>3.4.3.1    覆盖的修改</h4><p>如果我们想修改_id为1的记录，点赞量为1001，输入以下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:<span class="string">"1"</span>&#125;,&#123;likenum:NumberInt(1001)&#125;)</span><br></pre></td></tr></table></figure><p>执行后，我们会发现，这条文档除了 likenum字段其它字段都不见了，</p><h4 id="3-4-3-2-局部修改"><a href="#3-4-3-2-局部修改" class="headerlink" title="3.4.3.2    局部修改"></a>3.4.3.2    局部修改</h4><p>为了解决这个问题，我们需要使用修改器$set来实现，命令如下：</p><p>我们想修改_id为2的记录，浏览量为889，输入以下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:<span class="string">"2"</span>&#125;,&#123;<span class="variable">$set</span>:&#123;likenum:NumberInt(889)&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-4-3-3-批量的修改"><a href="#3-4-3-3-批量的修改" class="headerlink" title="3.4.3.3    批量的修改"></a>3.4.3.3    批量的修改</h4><p>更新所有用户为 1003 的用户的昵称为 凯撒大帝 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//默认只修改第一条数据</span><br><span class="line">db.comment.update(&#123;userid:<span class="string">"1003"</span>&#125;,&#123;<span class="variable">$set</span>:&#123;nickname:<span class="string">"凯撒2"</span>&#125;&#125;)</span><br><span class="line">//修改所有符合条件的数据</span><br><span class="line">db.comment.update(&#123;userid:<span class="string">"1003"</span>&#125;,&#123;<span class="variable">$set</span>:&#123;nickname:<span class="string">"凯撒大帝"</span>&#125;&#125;,&#123;multi:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p>提示：如果不加后面的参数，则只更新符合条件的第一条记录</p><h4 id="3-4-3-4-列值增长的修改"><a href="#3-4-3-4-列值增长的修改" class="headerlink" title="3.4.3.4    列值增长的修改"></a>3.4.3.4    列值增长的修改</h4><p>如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用 $inc 运算符来实现。</p><p>需求：对3号数据的点赞数，每次递增1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:<span class="string">"3"</span>&#125;,&#123;<span class="variable">$inc</span>:&#123;likenum:NumberInt(1)&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-4-4-删除文档"><a href="#3-4-4-删除文档" class="headerlink" title="3.4.4    删除文档"></a>3.4.4    删除文档</h3><p>删除文档的语法结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.remove(条件)</span><br></pre></td></tr></table></figure><p>以下语句可以将数据全部删除，请慎用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>如果删除 _id=1的记录，输入以下语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.remove(&#123;_id:<span class="string">"1"</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-5-文档的分页查询"><a href="#3-5-文档的分页查询" class="headerlink" title="3.5    文档的分页查询"></a>3.5    文档的分页查询</h2><h3 id="3-5-1-统计查询"><a href="#3-5-1-统计查询" class="headerlink" title="3.5.1    统计查询"></a>3.5.1    统计查询</h3><p>统计查询使用count()方法，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.count(query, options)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>query</td><td>document</td><td>查询选择条件</td></tr><tr><td>options</td><td>document</td><td>可选。用于修改计数的额外选项</td></tr></tbody></table><p>【示例】</p><h4 id="3-5-1-1-统计所有记录数"><a href="#3-5-1-1-统计所有记录数" class="headerlink" title="3.5.1.1    统计所有记录数"></a>3.5.1.1    统计所有记录数</h4><p>统计comment集合的所有的记录数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.count()</span><br></pre></td></tr></table></figure><h4 id="3-5-1-2-按条件统计记录数"><a href="#3-5-1-2-按条件统计记录数" class="headerlink" title="3.5.1.2    按条件统计记录数"></a>3.5.1.2    按条件统计记录数</h4><p>例如：统计userid为1003的记录条数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.count(&#123;userid:<span class="string">"1003"</span>&#125;)</span><br></pre></td></tr></table></figure><p>提示：</p><p>默认情况下 count() 方法返回符合条件的全部记录条数。</p><h3 id="3-5-2-分页列表查询"><a href="#3-5-2-分页列表查询" class="headerlink" title="3.5.2    分页列表查询"></a>3.5.2    分页列表查询</h3><p>可以使用limit()方法来读取指定数量的数据，使用skip()方法来跳过指定数量的数据。</p><p>基本语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().<span class="built_in">limit</span>(NUMBER).skip(NUMBER)</span><br></pre></td></tr></table></figure><p>如果你想返回指定条数的记录，可以在find方法后调用limit来返回结果(TopN)，默认值20，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().<span class="built_in">limit</span>(3)</span><br></pre></td></tr></table></figure><p>skip 方法同样接受一个数字参数作为跳过的记录条数。（前N个不要）,默认值是0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().skip(3)</span><br></pre></td></tr></table></figure><p>分页查询：需求：每页2个，第二页开始：跳过前两条数据，接着值显示3和4条数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//第一页</span><br><span class="line">db.comment.find().skip(0).<span class="built_in">limit</span>(2)</span><br><span class="line">//第二页</span><br><span class="line">db.comment.find().skip(2).<span class="built_in">limit</span>(2)</span><br><span class="line">//第三页</span><br><span class="line">db.comment.find().skip(4).<span class="built_in">limit</span>(2)</span><br></pre></td></tr></table></figure><h3 id="3-5-3-排序查询"><a href="#3-5-3-排序查询" class="headerlink" title="3.5.3    排序查询"></a>3.5.3    排序查询</h3><p>sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1为升序排列，而 -1 是用于降序排列。</p><p>语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br><span class="line">或</span><br><span class="line">db.集合名称.find().sort(排序方式)</span><br></pre></td></tr></table></figure><p>例如：</p><p>对userid降序排列，并对访问量进行升序排列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().sort(&#123;userid:-1,likenum:1&#125;)</span><br></pre></td></tr></table></figure><p>提示：</p><p>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()，和命令编写顺序无关。</p><h2 id="3-6-文档的更多查询"><a href="#3-6-文档的更多查询" class="headerlink" title="3.6    文档的更多查询"></a>3.6    文档的更多查询</h2><h3 id="3-6-1-正则的复杂条件查询"><a href="#3-6-1-正则的复杂条件查询" class="headerlink" title="3.6.1    正则的复杂条件查询"></a>3.6.1    正则的复杂条件查询</h3><p>MongoDB的模糊查询是通过正则表达式的方式实现的。格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(&#123;field:/正则表达式/&#125;)</span><br><span class="line">或</span><br><span class="line">db.集合.find(&#123;字段:/正则表达式/&#125;)</span><br></pre></td></tr></table></figure><p>提示：正则表达式是 js的语法，直接量的写法。</p><p>例如，我要查询评论内容包含“开水”的所有文档，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;content:/开水/&#125;)</span><br></pre></td></tr></table></figure><p>如果要查询评论的内容中以 “专家”开头的，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;content:/^专家/&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-6-2-比较查询"><a href="#3-6-2-比较查询" class="headerlink" title="3.6.2    比较查询"></a>3.6.2    比较查询</h3><p>&lt;, &lt;=, &gt;, &gt;= 这个操作符也是很常用的，格式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find(&#123; <span class="string">"field"</span> : &#123; <span class="variable">$gt</span>: value &#125;&#125;) // 大于: field &gt; value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">"field"</span> : &#123; <span class="variable">$lt</span>: value &#125;&#125;) // 小于: field &lt; value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">"field"</span> : &#123; <span class="variable">$gte</span>: value &#125;&#125;) // 大于等于: field &gt;= value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">"field"</span> : &#123; <span class="variable">$lte</span>: value &#125;&#125;) // 小于等于: field &lt;= value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">"field"</span> : &#123; <span class="variable">$ne</span>: value &#125;&#125;) // 不等于: field != value</span><br></pre></td></tr></table></figure><p>示例：查询评论点赞数量大于 700的记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;likenum:&#123;<span class="variable">$gt</span>:NumberInt(700)&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-6-3-包含查询"><a href="#3-6-3-包含查询" class="headerlink" title="3.6.3    包含查询"></a>3.6.3    包含查询</h3><p>包含使用$in操作符。 示例：查询评论的集合中userid字段包含1003或1004的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#123;<span class="variable">$in</span>:[<span class="string">"1003"</span>,<span class="string">"1004"</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>不包含使用 $nin操作符。 示例：查询评论集合中userid字段不包含1003和1004的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#123;<span class="variable">$nin</span>:[<span class="string">"1003"</span>,<span class="string">"1004"</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-6-4-条件连接查询"><a href="#3-6-4-条件连接查询" class="headerlink" title="3.6.4    条件连接查询"></a>3.6.4    条件连接查询</h3><p>我们如果需要查询同时满足两个以上条件，需要使用$and操作符将条件进行关联。（相当于SQL的and） 格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$and</span>:[ &#123;  &#125;,&#123;  &#125;,&#123; &#125; ]</span><br></pre></td></tr></table></figure><p>示例：查询评论集合中 likenum大于等于700 并且小于2000的文档：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;<span class="variable">$and</span>:[&#123;likenum:&#123;<span class="variable">$gte</span>:NumberInt(700)&#125;&#125;,&#123;likenum:&#123;<span class="variable">$lt</span>:NumberInt(2000)&#125;&#125;]&#125;)</span><br></pre></td></tr></table></figure><p>如果两个以上条件之间是或者的关系，我们使用操作符进行关联，与前面 and的使用方式相同格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$or</span>:[ &#123;  &#125;,&#123;  &#125;,&#123;   &#125; ]</span><br></pre></td></tr></table></figure><p>示例：查询评论集合中 userid为1003，或者点赞数小于1000的文档记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;<span class="variable">$or</span>:[ &#123;userid:<span class="string">"1003"</span>&#125; ,&#123;likenum:&#123;<span class="variable">$lt</span>:1000&#125; &#125;]&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-7-常用命令小结"><a href="#3-7-常用命令小结" class="headerlink" title="3.7    常用命令小结"></a>3.7    常用命令小结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">选择切换数据库：use articledb</span><br><span class="line">插入数据：db.comment.insert(&#123;bson数据&#125;)</span><br><span class="line">查询所有数据：db.comment.find();</span><br><span class="line">条件查询数据：db.comment.find(&#123;条件&#125;)</span><br><span class="line">查询符合条件的第一条记录：db.comment.findOne(&#123;条件&#125;)</span><br><span class="line">查询符合条件的前几条记录：db.comment.find(&#123;条件&#125;).limit(条数)</span><br><span class="line">查询符合条件的跳过的记录：db.comment.find(&#123;条件&#125;).skip(条数)</span><br><span class="line">修改数据：db.comment.update(&#123;条件&#125;,&#123;修改后的数据&#125;) 或db.comment.update(&#123;条件&#125;,&#123;$set:&#123;要修改部分的字段:数据&#125;)</span><br><span class="line">修改数据并自增某字段值：db.comment.update(&#123;条件&#125;,&#123;$inc:&#123;自增的字段:步进值&#125;&#125;)</span><br><span class="line">删除数据：db.comment.remove(&#123;条件&#125;)</span><br><span class="line">统计查询：db.comment.count(&#123;条件&#125;)</span><br><span class="line">模糊查询：db.comment.find(&#123;字段名:&#x2F;正则表达式&#x2F;&#125;)</span><br><span class="line">条件比较运算：db.comment.find(&#123;字段名:&#123;$gt:值&#125;&#125;)</span><br><span class="line">包含查询：db.comment.find(&#123;字段名:&#123;$in:[值1，值2]&#125;&#125;)或db.comment.find(&#123;字段名:&#123;$nin:[值1，值2]&#125;&#125;)</span><br><span class="line">条件连接查询：db.comment.find(&#123;$and:[&#123;条件1&#125;,&#123;条件2&#125;]&#125;)或db.comment.find(&#123;$or:[&#123;条件1&#125;,&#123;条件2&#125;]&#125;)</span><br></pre></td></tr></table></figure><h1 id="4-索引-Index"><a href="#4-索引-Index" class="headerlink" title="4.    索引-Index"></a>4.    索引-Index</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1    概述"></a>4.1    概述</h2><p>索引支持在MongoDB中高效地执行查询。如果没有索引，MongoDB必须执行全集合扫描，即扫描集合中的每个文档，以选择与查询语句匹配的文档。这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p><p>如果查询存在适当的索引，MongoDB可以使用该索引限制必须检查的文档数。</p><p>索引是特殊的数据结构，它以易于遍历的形式存储集合数据集的一小部分。索引存储特定字段或一组字段的值，按字段值排序。索引项的排序支持有效的相等匹配和基于范围的查询操作。此外，MongoDB还可以使用索引中的排序返回排序结果。</p><p>官网文档： <a href="https://docs.mongodb.com/manual/indexes/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/indexes/</a></p><p>了解：</p><p>MongoDB索引使用B树数据结构（确切的说是B-Tree，MySQL是B+Tree）</p><h2 id="4-2-索引的类型"><a href="#4-2-索引的类型" class="headerlink" title="4.2    索引的类型"></a>4.2    索引的类型</h2><h3 id="4-2-1-单字段索引"><a href="#4-2-1-单字段索引" class="headerlink" title="4.2.1    单字段索引"></a>4.2.1    单字段索引</h3><p>MongoDB支持在文档的单个字段上创建用户定义的升序/降序索引，称为单字段索引（Single Field Index）。</p><p>对于单个字段索引和排序操作，索引键的排序顺序（即升序或降序）并不重要，因为MongoDB可以在任何方向上遍历索引。</p><p><img src="https://img-blog.csdnimg.cn/20200912222446304.png" alt="image-20200912175647643"></p><h3 id="4-2-2-复合索引"><a href="#4-2-2-复合索引" class="headerlink" title="4.2.2    复合索引"></a>4.2.2    复合索引</h3><p>MongoDB还支持多个字段的用户定义索引，即复合索引（Compound Index）。</p><p>复合索引中列出的字段顺序具有重要意义。例如，如果复合索引由 { userid: 1, score:  -1 } 组成，则索引首先按userid正序排序，然后在每个userid的值内，再在按score倒序排序。</p><p><img src="https://img-blog.csdnimg.cn/20200912222502355.png" alt="image-20200912175808078"></p><h3 id="4-2-3-其他索引"><a href="#4-2-3-其他索引" class="headerlink" title="4.2.3    其他索引"></a>4.2.3    其他索引</h3><p>地理空间索引（Geospatial Index）、文本索引（Text Indexes）、哈希索引（Hashed Indexes）。</p><ul><li><p>地理空间索引（Geospatial Index）</p><p>为了支持对地理空间坐标数据的有效查询，MongoDB提供了两种特殊的索引：返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引。</p></li><li><p>文本索引（Text Indexes）</p><p>MongoDB提供了一种文本索引类型，支持在集合中搜索字符串内容。这些文本索引不存储特定于语言的停止词（例如“the”、“a”、“or”），而将集合中的词作为词干，只存储根词。</p></li><li><p>哈希索引（Hashed Indexes）</p><p>为了支持基于散列的分片，MongoDB提供了散列索引类型，它对字段值的散列进行索引。这些索引在其范围内的值分布更加随机，但只支持相等匹配，不支持基于范围的查询。</p></li></ul><h2 id="4-3-索引的管理操作"><a href="#4-3-索引的管理操作" class="headerlink" title="4.3    索引的管理操作"></a>4.3    索引的管理操作</h2><h3 id="4-3-1-索引的查看"><a href="#4-3-1-索引的查看" class="headerlink" title="4.3.1    索引的查看"></a>4.3.1    索引的查看</h3><p>说明：</p><p>返回一个集合中的所有索引的数组。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.getIndexes()</span><br></pre></td></tr></table></figure><p>提示：该语法命令运行要求是 MongoDB 3.0+</p><p>【示例】</p><p>查看comment集合中所有的索引情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.comment.getIndexes()</span><br><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="string">"v"</span> : 2,</span><br><span class="line">        <span class="string">"key"</span> : &#123;</span><br><span class="line">            <span class="string">"_id"</span> : 1</span><br><span class="line">       &#125;,</span><br><span class="line">        <span class="string">"name"</span> : <span class="string">"_id_"</span>,</span><br><span class="line">        <span class="string">"ns"</span> : <span class="string">"articledb.comment"</span></span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>结果中显示的是默认 <code>_id</code> 索引。</p><p>默认<code>_id</code>索引：</p><p>MongoDB在创建集合的过程中，在<code>_id</code> 字段上创建一个唯一的索引，默认名字为<code>_id_</code>，该索引可防止客户端插入两个具有相同值的文档，您不能在<code>_id</code>字段上删除此索引。</p><p>注意：该索引是唯一索引，因此值不能重复，即 <code>_id</code> 值不能重复的。在分片集群中，通常使用 <code>_id</code> 作为片键。</p><h3 id="4-3-2-索引的创建"><a href="#4-3-2-索引的创建" class="headerlink" title="4.3.2    索引的创建"></a>4.3.2    索引的创建</h3><p>说明：在集合上创建索引。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.createIndex(keys, options)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>keys</td><td>document</td><td>包含字段和值对的文档，其中字段是索引键，值描述该字段的索引类型。对于字段上的升序索引，请<br/>指定值1；对于降序索引，请指定值-1。比如： { 字段:1或-1} ，其中1 为指定按升序创建索引，如果你<br/>想按降序来创建索引指定为 -1 即可。另外，MongoDB支持几种不同的索引类型，包括文本、地理空<br/>间和哈希索引。</td></tr><tr><td>options</td><td>document</td><td>可选。包含一组控制索引创建的选项的文档。有关详细信息，请参见选项详情列表。</td></tr></tbody></table><p>options（更多选项）列表：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>background</td><td>Boolean</td><td>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加<br/>“background” 可选参数。 “background” 默认值为false。</td></tr><tr><td>unique</td><td>Boolean</td><td>建立的索引是否唯一。指定为true创建唯一索引。默认值为false.</td></tr><tr><td>name</td><td>string</td><td>索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名<br/>称。</td></tr><tr><td>dropDups</td><td>Boolean</td><td>3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为<br/>false.</td></tr><tr><td>sparse</td><td>Boolean</td><td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索<br/>引字段中不会查询出不包含对应字段的文档.。默认值为 false.</td></tr><tr><td>expireAfterSeconds</td><td>integer</td><td>指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr><tr><td>v</td><td>index<br/>version</td><td>索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr><tr><td>weights</td><td>document</td><td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td>default_language</td><td>string</td><td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td>language_override</td><td>string</td><td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为<br/>language.</td></tr></tbody></table><p>提示：<br>注意在 3.0.0 版本前创建索引方法为  db.collection.ensureIndex() ，之后的版本使用了 db.collection.createIndex() 方法，ensureIndex() 还能用，但只是  createIndex() 的别名。</p><p>【示例】</p><h4 id="4-3-2-1-单字段索引"><a href="#4-3-2-1-单字段索引" class="headerlink" title="4.3.2.1    单字段索引"></a>4.3.2.1    单字段索引</h4><p>示例：对 userid 字段建立索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.createIndex(&#123;userid:1&#125;)</span><br></pre></td></tr></table></figure><p>参数 1：按升序创建索引</p><p>compass查看：</p><p><img src="https://img-blog.csdnimg.cn/20200912222523315.png" alt="image-20200912184832080"></p><h4 id="4-3-2-2-复合索引"><a href="#4-3-2-2-复合索引" class="headerlink" title="4.3.2.2    复合索引"></a>4.3.2.2    复合索引</h4><p>对 userid 和 nickname 同时建立复合（Compound）索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.createIndex(&#123;userid:1,nickname:-1&#125;)</span><br></pre></td></tr></table></figure><p>compass 中：</p><p><img src="https://img-blog.csdnimg.cn/20200912222541442.png" alt="image-20200912184915143"></p><h3 id="4-3-3-索引的移除"><a href="#4-3-3-索引的移除" class="headerlink" title="4.3.3    索引的移除"></a>4.3.3    索引的移除</h3><p>说明：可以移除指定的索引，或移除所有索引</p><h4 id="4-3-3-1-指定索引的移除"><a href="#4-3-3-1-指定索引的移除" class="headerlink" title="4.3.3.1    指定索引的移除"></a>4.3.3.1    指定索引的移除</h4><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.dropIndex(index)</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>index</td><td>string or<br/>document</td><td>指定要删除的索引。可以通过索引名称或索引规范文档指定索引。若要删除文本索引，请指定<br/>索引名称。</td></tr></tbody></table><p>【示例】</p><p>删除 comment 集合中 userid 字段上的升序索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.dropIndex(&#123;userid:1&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-3-3-2-所有索引的移除"><a href="#4-3-3-2-所有索引的移除" class="headerlink" title="4.3.3.2    所有索引的移除"></a>4.3.3.2    所有索引的移除</h4><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.dropIndexes()</span><br></pre></td></tr></table></figure><p>【示例】</p><p>删除 comment 集合中所有索引。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.dropIndexes()</span><br></pre></td></tr></table></figure><p>提示： _id 的字段的索引是无法删除的，只能删除非 _id 字段的索引。</p><h2 id="4-4-索引的使用"><a href="#4-4-索引的使用" class="headerlink" title="4.4    索引的使用"></a>4.4    索引的使用</h2><h3 id="4-4-1-执行计划"><a href="#4-4-1-执行计划" class="headerlink" title="4.4.1    执行计划"></a>4.4.1    执行计划</h3><p>分析查询性能（Analyze Query Performance）通常使用执行计划（解释计划、Explain Plan）来查看查询的情况，如查询耗费的时间、是否基于索引查询等。</p><p>那么，通常，我们想知道，建立的索引是否有效，效果如何，都需要通过执行计划查看。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query,options).explain(options)</span><br></pre></td></tr></table></figure><p>【示例】</p><p>查看根据userid查询数据的情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.comment.find(&#123;userid:<span class="string">"1003"</span>&#125;).explain()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"queryPlanner"</span> : &#123;</span><br><span class="line">        <span class="string">"plannerVersion"</span> : 1,</span><br><span class="line">        <span class="string">"namespace"</span> : <span class="string">"articledb.comment"</span>,</span><br><span class="line">        <span class="string">"indexFilterSet"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"parsedQuery"</span> : &#123;</span><br><span class="line">            <span class="string">"userid"</span> : &#123;</span><br><span class="line">            <span class="string">"<span class="variable">$eq</span>"</span> : <span class="string">"1003"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"winningPlan"</span> : &#123;</span><br><span class="line">            <span class="string">"stage"</span> : <span class="string">"COLLSCAN"</span>,</span><br><span class="line">            <span class="string">"filter"</span> : &#123;</span><br><span class="line">                <span class="string">"userid"</span> : &#123;</span><br><span class="line">                <span class="string">"<span class="variable">$eq</span>"</span> : <span class="string">"1003"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"direction"</span> : <span class="string">"forward"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"rejectedPlans"</span> : [ ]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"serverInfo"</span> : &#123;</span><br><span class="line">       <span class="string">"host"</span> : <span class="string">"9ef3740277ad"</span>,</span><br><span class="line">       <span class="string">"port"</span> : 27017,</span><br><span class="line">       <span class="string">"version"</span> : <span class="string">"4.0.10"</span>,</span><br><span class="line">       <span class="string">"gitVersion"</span> : <span class="string">"c389e7f69f637f7a1ac3cc9fae843b635f20b766"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"ok"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点看： “stage” : “COLLSCAN”, 表示全集合扫描</p><p><img src="https://img-blog.csdnimg.cn/20200912222603862.png" alt="image-20200912185953559"></p><p>下面对userid建立索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.createIndex(&#123;userid:1&#125;)</span><br></pre></td></tr></table></figure><p>再次查看执行计划：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.comment.find(&#123;userid:<span class="string">"1013"</span>&#125;).explain()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"queryPlanner"</span> : &#123;</span><br><span class="line">        <span class="string">"plannerVersion"</span> : 1,</span><br><span class="line">        <span class="string">"namespace"</span> : <span class="string">"articledb.comment"</span>,</span><br><span class="line">        <span class="string">"indexFilterSet"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"parsedQuery"</span> : &#123;</span><br><span class="line">            <span class="string">"userid"</span> : &#123;</span><br><span class="line">                <span class="string">"<span class="variable">$eq</span>"</span> : <span class="string">"1013"</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="string">"winningPlan"</span> : &#123;</span><br><span class="line">            <span class="string">"stage"</span> : <span class="string">"FETCH"</span>,</span><br><span class="line">            <span class="string">"inputStage"</span> : &#123;</span><br><span class="line">                <span class="string">"stage"</span> : <span class="string">"IXSCAN"</span>,</span><br><span class="line">                <span class="string">"keyPattern"</span> : &#123;</span><br><span class="line">                    <span class="string">"userid"</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"indexName"</span> : <span class="string">"userid_1"</span>,</span><br><span class="line">                <span class="string">"isMultiKey"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"multiKeyPaths"</span> : &#123;</span><br><span class="line">                    <span class="string">"userid"</span> : [ ]</span><br><span class="line">                 &#125;,</span><br><span class="line">                <span class="string">"isUnique"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"isSparse"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"isPartial"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"indexVersion"</span> : 2,</span><br><span class="line">                <span class="string">"direction"</span> : <span class="string">"forward"</span>,</span><br><span class="line">                <span class="string">"indexBounds"</span> : &#123;</span><br><span class="line">                    <span class="string">"userid"</span> : [</span><br><span class="line">                        <span class="string">"[\"1013\", \"1013\"]"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"rejectedPlans"</span> : [ ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"serverInfo"</span> : &#123;</span><br><span class="line">        <span class="string">"host"</span> : <span class="string">"9ef3740277ad"</span>,</span><br><span class="line">        <span class="string">"port"</span> : 27017,</span><br><span class="line">        <span class="string">"version"</span> : <span class="string">"4.0.10"</span>,</span><br><span class="line">        <span class="string">"gitVersion"</span> : <span class="string">"c389e7f69f637f7a1ac3cc9fae843b635f20b766"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"ok"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点看： “stage” : “IXSCAN” ,基于索引的扫描</p><p>compass查看：</p><p><img src="https://img-blog.csdnimg.cn/20200912222620711.png" alt="image-20200912190339355"></p><h3 id="4-4-2-涵盖的查询"><a href="#4-4-2-涵盖的查询" class="headerlink" title="4.4.2    涵盖的查询"></a>4.4.2    涵盖的查询</h3><p>Covered Queries</p><p>当查询条件和查询的投影仅包含索引字段时，MongoDB直接从索引返回结果，而不扫描任何文档或将文档带入内存。 这些覆盖的查询可以非常有效。</p><p><img src="https://img-blog.csdnimg.cn/20200912222637894.png" alt="image-20200912190507995"></p><p>更多：<a href="https://docs.mongodb.com/manual/core/query-optimization/#read-operations-covered-query" target="_blank" rel="noopener">https://docs.mongodb.com/manual/core/query-optimization/#read-operations-covered-query</a></p><p>【示例】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.comment.find(&#123;userid:<span class="string">"1003"</span>&#125;,&#123;userid:1,_id:0&#125;)</span><br><span class="line">&#123; <span class="string">"userid"</span> : <span class="string">"1003"</span> &#125;</span><br><span class="line">&#123; <span class="string">"userid"</span> : <span class="string">"1003"</span> &#125;</span><br><span class="line">&gt; db.comment.find(&#123;userid:<span class="string">"1003"</span>&#125;,&#123;userid:1,_id:0&#125;).explain()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"queryPlanner"</span> : &#123;</span><br><span class="line">        <span class="string">"plannerVersion"</span> : 1,</span><br><span class="line">        <span class="string">"namespace"</span> : <span class="string">"articledb.comment"</span>,</span><br><span class="line">        <span class="string">"indexFilterSet"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"parsedQuery"</span> : &#123;</span><br><span class="line">            <span class="string">"userid"</span> : &#123;</span><br><span class="line">                <span class="string">"<span class="variable">$eq</span>"</span> : <span class="string">"1003"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"winningPlan"</span> : &#123;</span><br><span class="line">            <span class="string">"stage"</span> : <span class="string">"PROJECTION"</span>,</span><br><span class="line">            <span class="string">"transformBy"</span> : &#123;</span><br><span class="line">                <span class="string">"userid"</span> : 1,</span><br><span class="line">                <span class="string">"_id"</span> : 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"inputStage"</span> : &#123;</span><br><span class="line">                <span class="string">"stage"</span> : <span class="string">"IXSCAN"</span>,</span><br><span class="line">                <span class="string">"keyPattern"</span> : &#123;</span><br><span class="line">                <span class="string">"userid"</span> : 1</span><br><span class="line">            &#125;,</span><br><span class="line">                <span class="string">"indexName"</span> : <span class="string">"userid_1"</span>,</span><br><span class="line">                <span class="string">"isMultiKey"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"multiKeyPaths"</span> : &#123;</span><br><span class="line">                    <span class="string">"userid"</span> : [ ]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"isUnique"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"isSparse"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"isPartial"</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"indexVersion"</span> : 2,</span><br><span class="line">                <span class="string">"direction"</span> : <span class="string">"forward"</span>,</span><br><span class="line">                <span class="string">"indexBounds"</span> : &#123;</span><br><span class="line">                    <span class="string">"userid"</span> : [</span><br><span class="line">                        <span class="string">"[\"1003\", \"1003\"]"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"rejectedPlans"</span> : [ ]</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="string">"serverInfo"</span> : &#123;</span><br><span class="line">        <span class="string">"host"</span> : <span class="string">"bobohost.localdomain"</span>,</span><br><span class="line">        <span class="string">"port"</span> : 27017,</span><br><span class="line">        <span class="string">"version"</span> : <span class="string">"4.0.10"</span>,</span><br><span class="line">        <span class="string">"gitVersion"</span> : <span class="string">"c389e7f69f637f7a1ac3cc9fae843b635f20b766"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"ok"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compass 中：</p><p><img src="https://img-blog.csdnimg.cn/20200912222653761.png" alt="image-20200912191627943"></p><h1 id="5-文章评论"><a href="#5-文章评论" class="headerlink" title="5.    文章评论"></a>5.    文章评论</h1><h2 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1    需求分析"></a>5.1    需求分析</h2><p>某头条的文章评论业务如下：</p><p><img src="https://img-blog.csdnimg.cn/20200912222709789.png" alt="image-20200912191728761"></p><p>文章示例参考：早晨空腹喝水，是对还是错？ <a href="https://www.toutiao.com/a6721476546088927748/" target="_blank" rel="noopener">https://www.toutiao.com/a6721476546088927748/</a></p><p>需要实现以下功能：</p><ul><li>基本增删改查API</li><li>根据文章id查询评论</li><li>评论点赞</li></ul><h2 id="5-2-表结构分析"><a href="#5-2-表结构分析" class="headerlink" title="5.2    表结构分析"></a>5.2    表结构分析</h2><p>数据库：articledb</p><table><thead><tr><th>专栏文章评论</th><th>comment</th><th></th><th></th></tr></thead><tbody><tr><td>字段名称</td><td>字段含义</td><td>字段类型</td><td>备注</td></tr><tr><td>_id</td><td>ID</td><td>ObjectId或String</td><td>Mongo的主键的字段</td></tr><tr><td>articleid</td><td>文章ID</td><td>String</td><td></td></tr><tr><td>content</td><td>评论内容</td><td>String</td><td></td></tr><tr><td>userid</td><td>评论人ID</td><td>String</td><td></td></tr><tr><td>nickname</td><td>评论人昵称</td><td>String</td><td></td></tr><tr><td>createdatetime</td><td>评论的日期时间</td><td>Date</td><td></td></tr><tr><td>likenum</td><td>点赞数</td><td>Int32</td><td></td></tr><tr><td>replynum</td><td>回复数</td><td>Int32</td><td></td></tr><tr><td>state</td><td>状态</td><td>String</td><td>0：不可见；1：可见；</td></tr><tr><td>parentid</td><td>上级ID</td><td>String</td><td>如果为0表示文章的顶级评论</td></tr></tbody></table><h2 id="5-3-技术选型"><a href="#5-3-技术选型" class="headerlink" title="5.3    技术选型"></a>5.3    技术选型</h2><h3 id="5-3-1-mongodb-driver"><a href="#5-3-1-mongodb-driver" class="headerlink" title="5.3.1    mongodb-driver"></a>5.3.1    mongodb-driver</h3><p>mongodb-driver是mongo官方推出的java连接mongoDB的驱动包，相当于JDBC驱动。我们通过一个入门的案例来了解mongodb-driver的基本使用。</p><p>官方驱动说明和下载： <a href="http://mongodb.github.io/mongo-java-driver/" target="_blank" rel="noopener">http://mongodb.github.io/mongo-java-driver/</a></p><p>官方驱动示例文档：<a href="http://mongodb.github.io/mongo-java-driver/3.8/driver/getting-started/quick-start/" target="_blank" rel="noopener">http://mongodb.github.io/mongo-java-driver/3.8/driver/getting-started/quick-start/</a></p><h3 id="5-3-2-SpringDataMongoDB"><a href="#5-3-2-SpringDataMongoDB" class="headerlink" title="5.3.2    SpringDataMongoDB"></a>5.3.2    SpringDataMongoDB</h3><p>SpringData家族成员之一，用于操作MongoDB的持久层框架，封装了底层的mongodb-driver。</p><p>官网主页： <a href="https://projects.spring.io/spring-data-mongodb/" target="_blank" rel="noopener">https://projects.spring.io/spring-data-mongodb/</a></p><p>我们十次方项目的吐槽微服务就采用SpringDataMongoDB框架。</p><h2 id="5-4-文章微服务模块搭建"><a href="#5-4-文章微服务模块搭建" class="headerlink" title="5.4    文章微服务模块搭建"></a>5.4    文章微服务模块搭建</h2><p>（1）搭建项目工程article，pom.xml引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>article<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（ 2）创建application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#数据源配置</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="comment"># 主机地址</span></span><br><span class="line">      <span class="comment">#host: 192.168.142.128</span></span><br><span class="line">      <span class="comment"># 数据库</span></span><br><span class="line">      <span class="comment">#database: articledb</span></span><br><span class="line">      <span class="comment"># 默认端口是27017</span></span><br><span class="line">      <span class="comment">#port: 27017</span></span><br><span class="line">      <span class="comment">#也可以使用uri连接</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://192.168.142.128:27017/articledb</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>（ 3）创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wgy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleApplication</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ArticleApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）启动项目，看是否能正常启动，控制台没有错误。</p><h2 id="5-5-文章评论实体类的编写"><a href="#5-5-文章评论实体类的编写" class="headerlink" title="5.5    文章评论实体类的编写"></a>5.5    文章评论实体类的编写</h2><p>创建实体类 创建包com.wgy.article，包下建包po用于存放实体类，创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//把一个java类声明为mongodb的文档，可以通过collection参数指定这个类对应的文档。</span></span><br><span class="line"><span class="comment">//@Document(collection="mongodb 对应 collection 名")</span></span><br><span class="line"><span class="comment">// 若未加 @Document ，该 bean save 到 mongo 的 comment collection</span></span><br><span class="line"><span class="comment">// 若添加 @Document ，则 save 到 comment collection</span></span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"comment"</span>)<span class="comment">//可以省略，如果省略，则默认使用类名小写映射集合</span></span><br><span class="line"><span class="comment">//复合索引</span></span><br><span class="line"><span class="comment">// @CompoundIndex( def = "&#123;'userid': 1, 'nickname': -1&#125;")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键标识，该属性的值会自动对应mongodb的主键字段"_id"，如果该属性名就叫“id”,则该注解可以省略，否则必须写</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;<span class="comment">//主键    //该属性对应mongodb的字段的名字，如果一致，则无需该注解</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"content"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//吐槽内容</span></span><br><span class="line">    <span class="keyword">private</span> Date publishtime;<span class="comment">//发布日期    //添加了一个单字段的索引</span></span><br><span class="line">    <span class="meta">@Indexed</span></span><br><span class="line">    <span class="keyword">private</span> String userid;<span class="comment">//发布人ID</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;<span class="comment">//昵称</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdatetime;<span class="comment">//评论的日期时间</span></span><br><span class="line">    <span class="keyword">private</span> Integer likenum;<span class="comment">//点赞数</span></span><br><span class="line">    <span class="keyword">private</span> Integer replynum;<span class="comment">//回复数</span></span><br><span class="line">    <span class="keyword">private</span> String state;<span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">private</span> String parentid;<span class="comment">//上级ID</span></span><br><span class="line">    <span class="keyword">private</span> String articleid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set/get/toString...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>索引可以大大提升查询效率，一般在查询字段上添加索引，索引的添加可以通过Mongo的命令来添加，也可以在Java的实体类中通过注解添加。</p><p>1）单字段索引注解@Indexed</p><p>org.springframework.data.mongodb.core.index.Indexed.class</p><p>声明该字段需要索引，建索引可以大大的提高查询效率。</p><p>Mongo命令参考：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.createIndex(&#123;<span class="string">"userid"</span>:1&#125;)</span><br></pre></td></tr></table></figure><p>2 ）复合索引注解@CompoundIndex</p><p>org.springframework.data.mongodb.core.index.CompoundIndex.class</p><p>复合索引的声明，建复合索引可以有效地提高多字段的查询效率。</p><p>Mongo命令参考：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.createIndex(&#123;<span class="string">"userid"</span>:1,<span class="string">"nickname"</span>:-1&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-6-文章评论的基本增删改查"><a href="#5-6-文章评论的基本增删改查" class="headerlink" title="5.6    文章评论的基本增删改查"></a>5.6    文章评论的基本增删改查</h2><p>（1）创建数据访问接口 com.wgy.article包下创建dao包，包下创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论的持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Comment</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（ 2）创建业务逻辑类 com.wgy.article包下创建service包，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论的业务层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentRepository commentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存一个评论</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveComment</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果需要自定义主键，可以在这里指定主键；如果不指定主键，MongoDB会自动生成主键</span></span><br><span class="line">        <span class="comment">//设置一些默认初始值。。。</span></span><br><span class="line">        <span class="comment">//调用dao</span></span><br><span class="line">        commentRepository.save(comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新评论</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateComment</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用dao</span></span><br><span class="line">        commentRepository.save(comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除评论</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCommentById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用dao</span></span><br><span class="line">        commentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有评论</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Comment&gt; <span class="title">findCommentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用dao</span></span><br><span class="line">        <span class="keyword">return</span> commentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询评论</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comment <span class="title">findCommentById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用dao</span></span><br><span class="line">        <span class="keyword">return</span> commentRepository.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（ 3）新建Junit测试类，测试保存和查询所有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CommentServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCommentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Comment&gt; commentList = commentService.findCommentList();</span><br><span class="line">        System.out.println(commentList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试根据id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCommentById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Comment commentById = commentService.findCommentById(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(commentById);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存一个评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Comment comment = <span class="keyword">new</span> Comment();</span><br><span class="line">        comment.setArticleid(<span class="string">"100000"</span>);</span><br><span class="line">        comment.setContent(<span class="string">"测试添加的数据"</span>);</span><br><span class="line">        comment.setCreatedatetime(LocalDateTime.now());</span><br><span class="line">        comment.setUserid(<span class="string">"1003"</span>);</span><br><span class="line">        comment.setNickname(<span class="string">"凯撒大帝"</span>);</span><br><span class="line">        comment.setState(<span class="string">"1"</span>);</span><br><span class="line">        comment.setLikenum(<span class="number">0</span>);</span><br><span class="line">        comment.setReplynum(<span class="number">0</span>);</span><br><span class="line">        commentService.saveComment(comment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-7-根据上级ID查询文章评论的分页列表"><a href="#5-7-根据上级ID查询文章评论的分页列表" class="headerlink" title="5.7    根据上级ID查询文章评论的分页列表"></a>5.7    根据上级ID查询文章评论的分页列表</h2><p>（1）CommentRepository新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据父id，查询子评论的分页列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Comment&gt; <span class="title">findByParentid</span><span class="params">(String parentid, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）CommentService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据父id查询分页列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Comment&gt; <span class="title">findCommentListByParentid</span><span class="params">(String parentid, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commentRepository.findByParentid(parentid, PageRequest.of(page - <span class="number">1</span>, size));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）junit测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试根据父id查询子评论的分页列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCommentListByParentid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;Comment&gt; pageResponse = commentService.findCommentListByParentid(<span class="string">"3"</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">"----总记录数："</span> + pageResponse.getTotalElements());</span><br><span class="line">    System.out.println(<span class="string">"----当前页数据："</span> + pageResponse.getContent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）测试</p><p>使用compass快速插入一条测试数据，数据的内容是对3号评论内容进行评论。</p><p><img src="https://img-blog.csdnimg.cn/20200912222735575.png" alt="image-20200912193206349"></p><p>执行测试，结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">----总记录数：1</span><br><span class="line">----当前页数据：[Comment&#123;id&#x3D;&#39;33&#39;, content&#x3D;&#39;你年轻，火力大&#39;, publishtime&#x3D;null, userid&#x3D;&#39;1003&#39;, nickname&#x3D;&#39;凯撒大帝&#39;,createdatetime&#x3D;null, likenum&#x3D;null, replynum&#x3D;null, state&#x3D;&#39;null&#39;, parentid&#x3D;&#39;3&#39;, articleid&#x3D;&#39;100001&#39;&#125;]</span><br></pre></td></tr></table></figure><h2 id="5-8-MongoTemplate-实现评论点赞"><a href="#5-8-MongoTemplate-实现评论点赞" class="headerlink" title="5.8    MongoTemplate 实现评论点赞"></a>5.8    MongoTemplate 实现评论点赞</h2><p>我们看一下以下点赞的临时示例代码： CommentService 新增updateThumbup方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点赞-效率低</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCommentThumbupToIncrementingOld</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">    Comment comment = CommentRepository.findById(id).get();</span><br><span class="line">    comment.setLikenum(comment.getLikenum()+<span class="number">1</span>);</span><br><span class="line">    CommentRepository.save(comment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上方法虽然实现起来比较简单，但是执行效率并不高，因为我只需要将点赞数加 1就可以了，没必要查询出所有字段修改后再更新所有字段。(蝴蝶效应)</p><p>我们可以使用MongoTemplate类来实现对某列的操作。 （1）修改CommentService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入MongoTemplate</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点赞数+1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCommentLikenum</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  查询条件</span></span><br><span class="line">    Query query = Query.query(Criteria.where(<span class="string">"_id"</span>).is(id));</span><br><span class="line">    <span class="comment">//  更新条件</span></span><br><span class="line">    Update update = <span class="keyword">new</span> Update();</span><br><span class="line">    <span class="comment">//局部更新，相当于$set</span></span><br><span class="line"><span class="comment">//        update.set(key, value)</span></span><br><span class="line">    <span class="comment">//递增$inc</span></span><br><span class="line">    update.inc(<span class="string">"likenum"</span>);</span><br><span class="line">    <span class="comment">//参数3：集合的名字或实体类的类型Comment.class</span></span><br><span class="line">    mongoTemplate.updateFirst(query, update, Comment<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（ 2）测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试点赞数+1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCommentLikenum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    commentService.updateCommentLikenum(<span class="string">"3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试用例后，发现点赞数+1了：</p><p><img src="https://img-blog.csdnimg.cn/20200912222748699.png" alt="image-20200912193644179"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-MongoDB-相关概念&quot;&gt;&lt;a href=&quot;#1-MongoDB-相关概念&quot; class=&quot;headerlink&quot; title=&quot;1.    MongoDB 相关概念&quot;&gt;&lt;/a&gt;1.    MongoDB 相关概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-业务应用场景&quot;&gt;&lt;a href=&quot;#1-1-业务应用场景&quot; class=&quot;headerlink&quot; title=&quot;1.1    业务应用场景&quot;&gt;&lt;/a&gt;1.1    业务应用场景&lt;/h2&gt;&lt;p&gt;传统的关系型数据库（如MySQL），在数据操作的“三高”需求以及应对Web2.0的网站需求面前，显得力不从心。&lt;/p&gt;
&lt;p&gt;解释：“三高”需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High performance - 对数据库高并发读写的需求。&lt;/li&gt;
&lt;li&gt;Huge Storage - 对海量数据的高效率存储和访问的需求。&lt;/li&gt;
&lt;li&gt;High Scalability &amp;amp;&amp;amp; High Availability- 对数据库的高可扩展性和高可用性的需求。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="服务器中间件" scheme="https://wgy1993.gitee.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="NoSQL存储" scheme="https://wgy1993.gitee.io/tags/NoSQL%E5%AD%98%E5%82%A8/"/>
    
      <category term="MongoDB" scheme="https://wgy1993.gitee.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>ElasticStack(二)</title>
    <link href="https://wgy1993.gitee.io/archives/1b8ebebc.html"/>
    <id>https://wgy1993.gitee.io/archives/1b8ebebc.html</id>
    <published>2020-09-03T11:10:20.000Z</published>
    <updated>2020-09-03T11:22:58.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Nginx日志分析系统"><a href="#1-Nginx日志分析系统" class="headerlink" title="1.    Nginx日志分析系统"></a>1.    Nginx日志分析系统</h1><h2 id="1-1-项目需求"><a href="#1-1-项目需求" class="headerlink" title="1.1    项目需求"></a>1.1    项目需求</h2><p>Nginx是一款非常优秀的web服务器，往往nginx服务会作为项目的访问入口，那么，nginx的性能保障就变得非常重要了，如果nginx的运行出现了问题就会对项目有较大的影响，所以，我们需要对nginx的运行有监控措施，实时掌握nginx的运行情况，那就需要收集nginx的运行指标和分析nginx的运行日志了。</p><a id="more"></a><h2 id="1-2-业务流程"><a href="#1-2-业务流程" class="headerlink" title="1.2    业务流程"></a>1.2    业务流程</h2><p><img src="https://img-blog.csdnimg.cn/20200903185009212.png" alt="image-20200903162441676"></p><p>说明：</p><ul><li>通过Beats采集Nginx的指标数据和日志数据</li><li>Beats采集到数据后发送到Elasticsearch中</li><li>Kibana读取数据进行分析</li><li>用户通过Kibana进行查看分析报表</li></ul><h2 id="1-3-部署安装Nginx"><a href="#1-3-部署安装Nginx" class="headerlink" title="1.3    部署安装Nginx"></a>1.3    部署安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.11.6.tar.gz</span><br><span class="line">yum -y install pcre-devel zlib-devel</span><br><span class="line">./configure</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过浏览器访问页面并且查看日志</span></span><br><span class="line"><span class="comment">#访问地址：http://192.168.142.128/</span></span><br><span class="line">tail -f /usr/<span class="built_in">local</span>/nginx/logs/access.log</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185039227.png" alt="image-20200903162728549"></p><p>具体操作参考：<a href="https://wgy1993.gitee.io/archives/65b69107.html">https://wgy1993.gitee.io/archives/65b69107.html</a></p><h1 id="2-Beats-简介"><a href="#2-Beats-简介" class="headerlink" title="2.    Beats 简介"></a>2.    Beats 简介</h1><p><img src="https://img-blog.csdnimg.cn/20200903185039288.png" alt="image-20200903162935568"></p><p>官网：<a href="https://www.elastic.co/cn/products/beats" target="_blank" rel="noopener">https://www.elastic.co/cn/products/beats</a></p><p><img src="https://img-blog.csdnimg.cn/20200903185136251.png" alt="image-20200903162951060"></p><p>Beats系列产品：</p><p><img src="https://img-blog.csdnimg.cn/20200903185136254.png" alt="image-20200903163337531"></p><h2 id="2-1-Filebeat"><a href="#2-1-Filebeat" class="headerlink" title="2.1    Filebeat"></a>2.1    Filebeat</h2><p><img src="https://img-blog.csdnimg.cn/20200903185136266.png" alt="image-20200903164540282"></p><h3 id="2-1-1-架构"><a href="#2-1-1-架构" class="headerlink" title="2.1.1    架构"></a>2.1.1    架构</h3><p>用于监控、收集服务器日志文件.</p><p><img src="https://img-blog.csdnimg.cn/20200903185136307.png" alt="image-20200903164606341"></p><h3 id="2-1-2-部署与运行"><a href="#2-1-2-部署与运行" class="headerlink" title="2.1.2    部署与运行"></a>2.1.2    部署与运行</h3><p>下载（或使用资料中提供的安装包，版本为：filebeat-6.5.4）：<a href="https://www.elastic.co/downloads/beats" target="_blank" rel="noopener">https://www.elastic.co/downloads/beats</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;itcast&#x2F;beats</span><br><span class="line">tar -xvf filebeat-6.5.4-linux-x86_64.tar.gz</span><br><span class="line">cd filebeat-6.5.4-linux-x86_64</span><br><span class="line"></span><br><span class="line">#创建如下配置文件 itcast.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: stdin</span><br><span class="line">    enabled: true</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.console:</span><br><span class="line">    pretty: true</span><br><span class="line">    enable: true</span><br><span class="line">    </span><br><span class="line">#启动filebeat</span><br><span class="line">.&#x2F;filebeat -e -c itcast.yml</span><br><span class="line"></span><br><span class="line">#输入hello运行结果如下：</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T12:50:03.585Z&quot;,</span><br><span class="line">    &quot;@metadata&quot;: &#123; #元数据信息</span><br><span class="line">                  &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">                  &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">                  &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">                 &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&quot;,</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;message&quot;: &quot;hello&quot;,  #输入的内容</span><br><span class="line">    &quot;prospector&quot;: &#123; #标准输入勘探器</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&quot;input&quot;: &#123;  #控制台标准输入</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123; #beat版本以及主机信息</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-读取文件"><a href="#2-1-3-读取文件" class="headerlink" title="2.1.3    读取文件"></a>2.1.3    读取文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#配置读取文件项 itcast-log.yml</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">    enabled: true</span><br><span class="line">    paths:</span><br><span class="line">        - &#x2F;itcast&#x2F;beats&#x2F;logs&#x2F;*.log</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.console:</span><br><span class="line">    pretty: true</span><br><span class="line">    enable: true</span><br><span class="line">    </span><br><span class="line">#启动filebeat</span><br><span class="line">.&#x2F;filebeat -e -c itcast-log.yml</span><br><span class="line"></span><br><span class="line">#&#x2F;haoke&#x2F;beats&#x2F;logs下创建a.log文件，并输入如下内容</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line">#观察filebeat输出</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T14:16:10.192Z&quot;,</span><br><span class="line">     &quot;@metadata&quot;: &#123;</span><br><span class="line">        &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&#x2F;haoke&#x2F;beats&#x2F;logs&#x2F;a.log&quot;,</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;message&quot;: &quot;hello&quot;,</span><br><span class="line">    &quot;prospector&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;input&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123;</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T14:16:10.192Z&quot;,</span><br><span class="line">    &quot;@metadata&quot;: &#123;</span><br><span class="line">        &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;prospector&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;input&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123;</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&#x2F;haoke&#x2F;beats&#x2F;logs&#x2F;a.log&quot;,</span><br><span class="line">    &quot;offset&quot;: 6,</span><br><span class="line">    &quot;message&quot;: &quot;world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，已经检测到日志文件有更新，立刻就会读取到更新的内容，并且输出到控制台。</p><h3 id="2-1-4-自定义字段"><a href="#2-1-4-自定义字段" class="headerlink" title="2.1.4    自定义字段"></a>2.1.4    自定义字段</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置读取文件项 itcast-log.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/itcast/beats/logs/*.log</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">["web"]</span>  <span class="comment">#添加自定义tag，便于后续的处理</span></span><br><span class="line">    <span class="attr">fields:</span>  <span class="comment">#添加自定义字段</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">itcast-im</span></span><br><span class="line">    <span class="attr">fields_under_root:</span> <span class="literal">true</span> <span class="comment">#true为添加到根节点，false为添加到子节点中</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">    <span class="attr">index.number_of_shards:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">output.console:</span></span><br><span class="line">    <span class="attr">pretty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动filebeat</span></span><br><span class="line"><span class="string">./filebeat</span> <span class="string">-e</span> <span class="string">-c</span> <span class="string">itcast-log.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#/haoke/beats/logs下创建a.log文件，并输入如下内容</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行效果</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="string">"@timestamp"</span><span class="string">:</span> <span class="string">"2019-01-12T14:37:19.845Z"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"@metadata"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"beat":</span> <span class="string">"filebeat"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"type":</span> <span class="string">"doc"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"version":</span> <span class="string">"6.5.4"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"offset":</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"tags":</span> <span class="string">[</span></span><br><span class="line">    <span class="string">"web"</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">    <span class="attr">"prospector":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"type":</span> <span class="string">"log"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"beat":</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"name":</span> <span class="string">"itcast01"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"hostname":</span> <span class="string">"itcast01"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"version":</span> <span class="string">"6.5.4"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"host":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"name":</span> <span class="string">"itcast01"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"source":</span> <span class="string">"/itcast/beats/logs/a.log"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"message":</span> <span class="string">"123"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"input":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"type":</span> <span class="string">"log"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"from":</span> <span class="string">"haoke-im"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-输出到Elasticsearch"><a href="#2-1-5-输出到Elasticsearch" class="headerlink" title="2.1.5    输出到Elasticsearch"></a>2.1.5    输出到Elasticsearch</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># itcast-log.yml</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/itcast/beats/logs/*.log</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">["haoke-im"]</span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">        <span class="attr">from:</span> <span class="string">haoke-im</span></span><br><span class="line">    <span class="attr">fields_under_root:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">    <span class="attr">index.number_of_shards:</span> <span class="number">3</span> <span class="comment">#指定索引的分区数</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span> <span class="comment">#指定ES的配置</span></span><br><span class="line">    <span class="attr">hosts:</span> <span class="string">["192.168.1.7:9200","192.168.1.7:9201","192.168.1.7:9202"]</span></span><br></pre></td></tr></table></figure><p>在日志文件中输入新的内容进行测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903185136258.png" alt="image-20200903170731296"></p><p>查看数据：</p><p><img src="https://img-blog.csdnimg.cn/20200903185136286.png" alt="image-20200903170743531"></p><h3 id="2-1-6-Filebeat工作原理"><a href="#2-1-6-Filebeat工作原理" class="headerlink" title="2.1.6    Filebeat工作原理"></a>2.1.6    Filebeat工作原理</h3><p>Filebeat由两个主要组件组成：prospector 和 harvester。</p><ul><li>harvester：<ul><li>负责读取单个文件的内容。</li><li>如果文件在读取时被删除或重命名，Filebeat将继续读取文件。</li></ul></li><li>prospector<ul><li>prospector 负责管理harvester并找到所有要读取的文件来源。</li><li>如果输入类型为日志，则查找器将查找路径匹配的所有文件，并为每个文件启动一个harvester。</li><li>Filebeat目前支持两种prospector类型：log和stdin。</li></ul></li><li>Filebeat如何保持文件的状态<ul><li>Filebeat 保存每个文件的状态并经常将状态刷新到磁盘上的注册文件中。</li><li>该状态用于记住harvester正在读取的最后偏移量，并确保发送所有日志行。</li><li>如果输出（例如Elasticsearch或Logstash）无法访问，Filebeat会跟踪最后发送的行，并在输出再次可用时继续读取文件。</li><li>在Filebeat运行时，每个prospector内存中也会保存的文件状态信息，当重新启动Filebeat时，将使用注册文件的数据来重建文件状态，Filebeat将每个harvester在从保存的最后偏移量继续读取。</li><li>文件状态记录在data/registry文件中。</li></ul></li></ul><p>启动命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat -e -c itcast.yml</span><br><span class="line">.&#x2F;filebeat -e -c itcast.yml -d &quot;publish&quot;</span><br><span class="line"></span><br><span class="line">#参数说明</span><br><span class="line">    -e: 输出到标准输出，默认输出到syslog和logs下</span><br><span class="line">    -c: 指定配置文件</span><br><span class="line">    -d: 输出debug信息</span><br><span class="line"></span><br><span class="line">#测试： .&#x2F;filebeat -e -c itcast-log.yml -d &quot;publish&quot;</span><br><span class="line">DEBUG  [publish]    pipeline&#x2F;processor.go:308    Publish event: &#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-12T15:03:50.820Z&quot;,</span><br><span class="line">    &quot;@metadata&quot;: &#123;</span><br><span class="line">        &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;tags&quot;: [</span><br><span class="line">    &quot;haoke-im&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;prospector&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;itcast01&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;source&quot;: &quot;&#x2F;haoke&#x2F;beats&#x2F;logs&#x2F;a.log&quot;,</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">    &quot;from&quot;: &quot;haoke-im&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;itcast01&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;message&quot;: &quot;456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-7-读取Nginx日志文件"><a href="#2-1-7-读取Nginx日志文件" class="headerlink" title="2.1.7    读取Nginx日志文件"></a>2.1.7    读取Nginx日志文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># itcast-nginx.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">    enabled: true</span><br><span class="line">    paths:</span><br><span class="line">    - &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;*.log</span><br><span class="line">    tags: [&quot;nginx&quot;]</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3 #指定索引的分区数</span><br><span class="line">output.elasticsearch: #指定ES的配置</span><br><span class="line">    hosts: [&quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;filebeat -e -c itcast-nginx.yml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185335428.png" alt="image-20200903174244014"></p><p>启动后，可以在Elasticsearch中看到索引以及查看数据：</p><p><img src="https://img-blog.csdnimg.cn/20200903185354525.png" alt="image-20200903174303071"></p><p><img src="https://img-blog.csdnimg.cn/2020090318541164.png" alt="image-20200903174315409"></p><p>可以看到，在message中已经获取到了nginx的日志，但是，内容并没有经过处理，只是读取到原数据，那么对于我们后期的操作是不利的，有办法解决吗？</p><h3 id="2-1-8-Module"><a href="#2-1-8-Module" class="headerlink" title="2.1.8    Module"></a>2.1.8    Module</h3><p>前面要想实现日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我们的配置，直接就可以使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat modules list</span><br><span class="line"></span><br><span class="line">Enabled:</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">apache2</span><br><span class="line">auditd</span><br><span class="line">elasticsearch</span><br><span class="line">haproxy</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">osquery</span><br><span class="line">postgresql</span><br><span class="line">redis</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br></pre></td></tr></table></figure><p>可以看到，内置了很多的module，但是都没有启用，如果需要启用需要进行enable操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat modules enable nginx #启动</span><br><span class="line">.&#x2F;filebeat modules disable nginx #禁用</span><br><span class="line"></span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">apache2</span><br><span class="line">auditd</span><br><span class="line">elasticsearch</span><br><span class="line">haproxy</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">redis</span><br><span class="line">osquery</span><br><span class="line">postgresql</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br></pre></td></tr></table></figure><p>可以发现，nginx的module已经被启用。</p><h4 id="2-1-8-1-nginx-module-配置"><a href="#2-1-8-1-nginx-module-配置" class="headerlink" title="2.1.8.1    nginx module 配置"></a>2.1.8.1    nginx module 配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">nginx</span></span><br><span class="line"> <span class="comment"># Access logs</span></span><br><span class="line"><span class="attr">access:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">var.paths:</span> <span class="string">["/usr/local/nginx/logs/access.log*"]</span></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="comment">#var.paths:</span></span><br><span class="line">    <span class="comment"># Error logs</span></span><br><span class="line"><span class="attr">error:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">var.paths:</span> <span class="string">["/usr/local/nginx/logs/error.log*"]</span></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="comment">#var.paths:</span></span><br></pre></td></tr></table></figure><h4 id="2-1-8-2-配置filebeat"><a href="#2-1-8-2-配置filebeat" class="headerlink" title="2.1.8.2    配置filebeat"></a>2.1.8.2    配置filebeat</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim itcast-nginx.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="comment">#- type: log</span></span><br><span class="line"><span class="comment"># enabled: true</span></span><br><span class="line"><span class="comment"># paths:</span></span><br><span class="line"><span class="comment">#  - /usr/local/nginx/logs/*.log</span></span><br><span class="line"><span class="comment"># tags: ["nginx"]</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">    <span class="attr">index.number_of_shards:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">    <span class="attr">hosts:</span> <span class="string">["192.168.40.133:9200","192.168.40.134:9200","192.168.40.135:9200"]</span></span><br><span class="line"><span class="attr">filebeat.config.modules:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line">    <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="2-1-8-3-测试"><a href="#2-1-8-3-测试" class="headerlink" title="2.1.8.3    测试"></a>2.1.8.3    测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filebeat -e -c itcast-nginx.yml</span><br><span class="line"></span><br><span class="line">#启动会出错，如下</span><br><span class="line">ERROR  fileset&#x2F;factory.go:142 Error loading pipeline: Error loading pipeline for fileset nginx&#x2F;access: This module requires the following Elasticsearch plugins:</span><br><span class="line">ingest-user-agent, ingest-geoip. You can install them by running the following commands on all the Elasticsearch nodes:</span><br><span class="line">  sudo bin&#x2F;elasticsearch-plugin install ingest-user-agent</span><br><span class="line">  sudo bin&#x2F;elasticsearch-plugin install ingest-geoip</span><br><span class="line"> </span><br><span class="line">#解决：需要在Elasticsearch中安装ingest-user-agent、ingest-geoip插件</span><br><span class="line">#在资料中可以找到，ingest-user-agent.tar、ingest-geoip.tar、ingest-geoip-conf.tar 3个文件</span><br><span class="line">#其中，ingest-user-agent.tar、ingest-geoip.tar解压到plugins下</span><br><span class="line">#ingest-geoip-conf.tar解压到config下</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185436109.png" alt="image-20200903174940658"></p><p>测试发现，数据已经写入到了Elasticsearch中，并且拿到的数据更加明确了：</p><p><img src="https://img-blog.csdnimg.cn/20200903185506128.png" alt="image-20200903175057846"></p><p>当然了，其他的Module的用法参加官方文档：</p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200903185528148.png" alt="image-20200903175130212"></p><h2 id="2-2-Metricbeat"><a href="#2-2-Metricbeat" class="headerlink" title="2.2    Metricbeat"></a>2.2    Metricbeat</h2><p><img src="https://img-blog.csdnimg.cn/20200903185547704.png" alt="image-20200903175152818"></p><ul><li>定期收集操作系统或应用服务的指标数据</li><li>存储到Elasticsearch中，进行实时分析</li></ul><h3 id="2-2-1-Metricbeat组成"><a href="#2-2-1-Metricbeat组成" class="headerlink" title="2.2.1    Metricbeat组成"></a>2.2.1    Metricbeat组成</h3><p>Metricbeat有2部分组成，一部分是Module，另一部分为Metricset。</p><ul><li>Module<ul><li>收集的对象，如：mysql、redis、nginx、操作系统等；</li></ul></li><li>Metricset<ul><li>收集指标的集合，如：cpu、memory、network等；</li></ul></li></ul><p>以Redis Module为例：</p><p><img src="https://img-blog.csdnimg.cn/20200903185609236.png" alt="image-20200903175347729"></p><h3 id="2-2-2-部署与收集系统指标"><a href="#2-2-2-部署与收集系统指标" class="headerlink" title="2.2.2    部署与收集系统指标"></a>2.2.2    部署与收集系统指标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf metricbeat-6.5.4-linux-x86_64.tar.gz</span><br><span class="line">cd metricbeat-6.5.4-linux-x86_64</span><br><span class="line">vim metricbeat.yml</span><br><span class="line"></span><br><span class="line">metricbeat.config.modules:</span><br><span class="line">    path: $&#123;path.config&#125;&#x2F;modules.d&#x2F;*.yml</span><br><span class="line">    reload.enabled: false</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 1</span><br><span class="line">    index.codec: best_compression</span><br><span class="line">setup.kibana:</span><br><span class="line">output.elasticsearch:</span><br><span class="line">    hosts: [&quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">processors:</span><br><span class="line">    - add_host_metadata: ~</span><br><span class="line">    - add_cloud_metadata: ~</span><br><span class="line">    </span><br><span class="line">#启动</span><br><span class="line">.&#x2F;metricbeat -e</span><br></pre></td></tr></table></figure><p>在ELasticsearch中可以看到，系统的一些指标数据已经写入进去了：</p><p><img src="https://img-blog.csdnimg.cn/20200903185627175.png" alt="image-20200903175524645"></p><p>system module配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Module: system</span></span><br><span class="line"><span class="comment"># Docs: https://www.elastic.co/guide/en/beats/metricbeat/6.5/metricbeat-module-system.html</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">metricsets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cpu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">load</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">memory</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">network</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">process</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">process_summary</span></span><br><span class="line">        <span class="comment">#- core</span></span><br><span class="line">        <span class="comment">#- diskio</span></span><br><span class="line">        <span class="comment">#- socket</span></span><br><span class="line">    <span class="attr">process.include_top_n:</span></span><br><span class="line">        <span class="attr">by_cpu:</span> <span class="number">5</span>    <span class="comment"># include top 5 processes by CPU</span></span><br><span class="line">        <span class="attr">by_memory:</span> <span class="number">5</span>  <span class="comment"># include top 5 processes by memory</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">metricsets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">filesystem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">fsstat</span></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">drop_event.when.regexp:</span></span><br><span class="line">        <span class="attr">system.filesystem.mount_point:</span> <span class="string">'^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">15m</span></span><br><span class="line">    <span class="attr">metricsets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">uptime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#- module: system</span></span><br><span class="line"><span class="comment"># period: 5m</span></span><br><span class="line"><span class="comment"># metricsets:</span></span><br><span class="line"><span class="comment">#  - raid</span></span><br><span class="line"><span class="comment"># raid.mount_point: '/'</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-Module"><a href="#2-2-3-Module" class="headerlink" title="2.2.3    Module"></a>2.2.3    Module</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;metricbeat modules list  #查看列表</span><br><span class="line"></span><br><span class="line">Enabled:</span><br><span class="line">system #默认启用</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">aerospike</span><br><span class="line">apache</span><br><span class="line">ceph</span><br><span class="line">couchbase</span><br><span class="line">docker</span><br><span class="line">dropwizard</span><br><span class="line">elasticsearch</span><br><span class="line">envoyproxy</span><br><span class="line">etcd</span><br><span class="line">golang</span><br><span class="line">graphite</span><br><span class="line">haproxy</span><br><span class="line">http</span><br><span class="line">jolokia</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">kubernetes</span><br><span class="line">kvm</span><br><span class="line">logstash</span><br><span class="line">memcached</span><br><span class="line">mongodb</span><br><span class="line">munin</span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">php_fpm</span><br><span class="line">postgresql</span><br><span class="line">prometheus</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">traefik</span><br><span class="line">uwsgi</span><br><span class="line">vsphere</span><br><span class="line">windows</span><br><span class="line">zookeeper</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Nginx-Module"><a href="#2-2-4-Nginx-Module" class="headerlink" title="2.2.4    Nginx Module"></a>2.2.4    Nginx Module</h3><h4 id="2-2-4-1-开启nginx的状态查询"><a href="#2-2-4-1-开启nginx的状态查询" class="headerlink" title="2.2.4.1    开启nginx的状态查询"></a>2.2.4.1    开启nginx的状态查询</h4><p>在nginx中，需要开启状态查询，才能查询到指标数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#重新编译nginx</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">.&#x2F;nginx -V  #查询版本信息</span><br><span class="line">nginx version: nginx&#x2F;1.11.6</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC)</span><br><span class="line">configure arguments: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line">#配置nginx</span><br><span class="line">vim nginx.conf</span><br><span class="line">location &#x2F;nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903185649308.png" alt="image-20200903180139156"></p><p>结果说明：</p><ul><li>Active connections：正在处理的活动连接数</li><li>server accepts handled requests<ul><li>第一个 server 表示Nginx启动到现在共处理了9个连接</li><li>第二个 accepts 表示Nginx启动到现在共成功创建 9 次握手</li><li>第三个 handled requests 表示总共处理了 21 次请求</li><li>请求丢失数 = 握手数 - 连接数 ，可以看出目前为止没有丢失请求</li></ul></li><li>Reading: 0 Writing: 1 Waiting: 1<ul><li>Reading：Nginx 读取到客户端的 Header 信息数</li><li>Writing：Nginx 返回给客户端 Header 信息数</li><li>Waiting：Nginx 已经处理完正在等候下一次请求指令的驻留链接（开启keep-alive的情况下，这个值等于Active - (Reading+Writing)）</li></ul></li></ul><h4 id="2-2-4-2-配置Nginx-Module"><a href="#2-2-4-2-配置Nginx-Module" class="headerlink" title="2.2.4.2    配置Nginx Module"></a>2.2.4.2    配置Nginx Module</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#启用redis module</span><br><span class="line">.&#x2F;metricbeat modules enable nginx</span><br><span class="line"></span><br><span class="line">#修改nginx module配置</span><br><span class="line">vim modules.d&#x2F;nginx.yml</span><br><span class="line"></span><br><span class="line"># Module: nginx</span><br><span class="line"># Docs: https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;beats&#x2F;metricbeat&#x2F;6.5&#x2F;metricbeat-module-nginx.html</span><br><span class="line">- module: nginx</span><br><span class="line">    #metricsets:</span><br><span class="line">    # - stubstatus</span><br><span class="line">    period: 10s</span><br><span class="line">     </span><br><span class="line">    # Nginx hosts</span><br><span class="line">    hosts: [&quot;http:&#x2F;&#x2F;192.168.40.133&quot;]</span><br><span class="line">     </span><br><span class="line">    # Path to server status. Default server-status</span><br><span class="line">    server_status_path: &quot;nginx-status&quot;</span><br><span class="line">    </span><br><span class="line">    #username: &quot;user&quot;</span><br><span class="line">    #password: &quot;secret&quot;</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;metricbeat -e</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903185707520.png" alt="image-20200903180801087"></p><p>可以看到，nginx的指标数据已经写入到了Elasticsearch。</p><p>更多的Module使用参见官方文档：</p><p><a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html</a></p><h1 id="3-Kibana"><a href="#3-Kibana" class="headerlink" title="3.    Kibana"></a>3.    Kibana</h1><p><img src="https://img-blog.csdnimg.cn/20200903185727214.png" alt="image-20200903180901698"></p><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><p>官网：<a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/products/kibana</a></p><h2 id="3-1-配置安装"><a href="#3-1-配置安装" class="headerlink" title="3.1    配置安装"></a>3.1    配置安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#解压安装包</span><br><span class="line">tar -xvf kibana-6.5.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">vim config&#x2F;kibana.yml</span><br><span class="line"></span><br><span class="line">server.host: &quot;192.168.40.133&quot;  #对外暴露服务的地址</span><br><span class="line">elasticsearch.url: &quot;http:&#x2F;&#x2F;192.168.40.133:9200&quot;  #配置Elasticsearch</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;kibana</span><br><span class="line"></span><br><span class="line">#通过浏览器进行访问</span><br><span class="line">http:&#x2F;&#x2F;192.168.40.133:5601&#x2F;app&#x2F;kibana</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903185744504.png" alt="image-20200903181114126"></p><p>可以看到kibana页面，并且可以看到提示，导入数据到Kibana。</p><h2 id="3-2-功能说明"><a href="#3-2-功能说明" class="headerlink" title="3.2    功能说明"></a>3.2    功能说明</h2><p><img src="https://img-blog.csdnimg.cn/20200903185802181.png" alt="image-20200903181134649"></p><h2 id="3-3-数据探索"><a href="#3-3-数据探索" class="headerlink" title="3.3    数据探索"></a>3.3    数据探索</h2><p>首先先添加索引信息：</p><p><img src="https://img-blog.csdnimg.cn/2020090318582126.png" alt="image-20200903181457622"></p><p>即可查看索引数据：</p><p><img src="https://img-blog.csdnimg.cn/20200903185837249.png" alt="image-20200903181518004"></p><h2 id="3-4-Metricbeat-仪表盘"><a href="#3-4-Metricbeat-仪表盘" class="headerlink" title="3.4    Metricbeat 仪表盘"></a>3.4    Metricbeat 仪表盘</h2><p>可以将Metricbeat的数据在Kibana中展示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#修改metricbeat配置</span><br><span class="line">setup.kibana:</span><br><span class="line">    host: &quot;192.168.40.133:5601&quot;</span><br><span class="line"></span><br><span class="line">#安装仪表盘到Kibana</span><br><span class="line">.&#x2F;metricbeat setup --dashboards</span><br></pre></td></tr></table></figure><p>即可在Kibana中看到仪表盘数据：</p><p><img src="https://img-blog.csdnimg.cn/2020090318585597.png" alt="image-20200903181757756"></p><p>查看系统信息：</p><p><img src="https://img-blog.csdnimg.cn/20200903185915516.png" alt="image-20200903181813949"></p><h2 id="3-5-Nginx-指标仪表盘"><a href="#3-5-Nginx-指标仪表盘" class="headerlink" title="3.5    Nginx 指标仪表盘"></a>3.5    Nginx 指标仪表盘</h2><p><img src="https://img-blog.csdnimg.cn/20200903185934619.png" alt="image-20200903181831725"></p><p><img src="https://img-blog.csdnimg.cn/20200903185951211.png" alt="image-20200903181839630"></p><h2 id="3-6-Nginx-日志仪表盘"><a href="#3-6-Nginx-日志仪表盘" class="headerlink" title="3.6    Nginx 日志仪表盘"></a>3.6    Nginx 日志仪表盘</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#修改配置文件 vim itcast-nginx.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">#- type: log</span><br><span class="line"># enabled: true</span><br><span class="line"># paths:</span><br><span class="line">#  - &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;*.log</span><br><span class="line"># tags: [&quot;nginx&quot;]</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.elasticsearch:</span><br><span class="line">    hosts: [&quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">    path: $&#123;path.config&#125;&#x2F;modules.d&#x2F;*.yml</span><br><span class="line">    reload.enabled: false</span><br><span class="line">setup.kibana:</span><br><span class="line">    host: &quot;192.168.40.133:5601&quot;</span><br><span class="line"></span><br><span class="line">#安装仪表盘到kibana</span><br><span class="line">.&#x2F;filebeat -c itcast-nginx.yml setup</span><br></pre></td></tr></table></figure><p>可以看到nginx的FileBeat的仪表盘了：</p><p><img src="https://img-blog.csdnimg.cn/20200903190016237.png" alt="image-20200903182017071"></p><p><img src="https://img-blog.csdnimg.cn/20200903190036736.png" alt="image-20200903182023969"></p><p><img src="https://img-blog.csdnimg.cn/20200903190055940.png" alt="image-20200903182036698"></p><h2 id="3-7-自定义图表"><a href="#3-7-自定义图表" class="headerlink" title="3.7    自定义图表"></a>3.7    自定义图表</h2><p>在Kibana中，也可以进行自定义图表，如制作柱形图：</p><p><img src="https://img-blog.csdnimg.cn/2020090319011314.png" alt="image-20200903182054642"></p><p>将图表添加到自定义Dashboard中：</p><p><img src="https://img-blog.csdnimg.cn/20200903190134522.png" alt="image-20200903182137844"></p><h2 id="3-8-开发者工具"><a href="#3-8-开发者工具" class="headerlink" title="3.8    开发者工具"></a>3.8    开发者工具</h2><p>在Kibana中，为开发者的测试提供了便捷的工具使用，如下：</p><p><img src="https://img-blog.csdnimg.cn/20200903190152971.png" alt="image-20200903182212864"></p><h1 id="4-Logstash"><a href="#4-Logstash" class="headerlink" title="4.    Logstash"></a>4.    Logstash</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1    简介"></a>4.1    简介</h2><p><img src="https://img-blog.csdnimg.cn/20200903190210198.png" alt="image-20200903182248277"></p><p>用途：</p><p><img src="https://img-blog.csdnimg.cn/20200903190226796.png" alt="image-20200903182304044"></p><h2 id="4-2-部署安装"><a href="#4-2-部署安装" class="headerlink" title="4.2    部署安装"></a>4.2    部署安装</h2><p><img src="https://img-blog.csdnimg.cn/2020090319024343.png" alt="image-20200903182345875"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查jdk环境，要求jdk1.8+</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压安装包</span></span><br><span class="line">tar -xvf logstash-6.5.4.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个logstash示例</span></span><br><span class="line">bin/logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br></pre></td></tr></table></figure><p>执行效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200903190258178.png" alt="image-20200903182431993"></p><h2 id="4-3-配置详解"><a href="#4-3-配置详解" class="headerlink" title="4.3    配置详解"></a>4.3    配置详解</h2><p>Logstash的配置有三部分，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123; #输入</span><br><span class="line">    stdin &#123; ... &#125; #标准输入</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; #过滤，对数据进行分割、截取等处理</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; #输出</span><br><span class="line">    stdout &#123; ... &#125; #标准输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-1-输入"><a href="#4-3-1-输入" class="headerlink" title="4.3.1    输入"></a>4.3.1    输入</h3><ul><li>采集各种样式、大小和来源的数据，数据往往以各种各样的形式，或分散或集中地存在于很多系统中。</li><li>Logstash 支持各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200903190317426.png" alt="image-20200903182600405"></p><h3 id="4-3-2-过滤"><a href="#4-3-2-过滤" class="headerlink" title="4.3.2    过滤"></a>4.3.2    过滤</h3><ul><li>实时解析和转换数据</li><li>数据从源传输到存储库的过程中，Logstash 过滤器能够解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200903190336152.png" alt="image-20200903182653229"></p><h3 id="4-3-3-输出"><a href="#4-3-3-输出" class="headerlink" title="4.3.3    输出"></a>4.3.3    输出</h3><p>Logstash 提供众多输出选择，您可以将数据发送到您要指定的地方，并且能够灵活地解锁众多下游用例。</p><p><img src="https://img-blog.csdnimg.cn/20200903190354717.png" alt="image-20200903182721846"></p><h2 id="4-4-读取自定义日志"><a href="#4-4-读取自定义日志" class="headerlink" title="4.4    读取自定义日志"></a>4.4    读取自定义日志</h2><p>前面我们通过Filebeat读取了nginx的日志，如果是自定义结构的日志，就需要读取处理后才能使用，所以，这个时候就需要使用Logstash了，因为Logstash有着强大的处理能力，可以应对各种各样的场景。</p><h3 id="4-4-1-日志结构"><a href="#4-4-1-日志结构" class="headerlink" title="4.4.1    日志结构"></a>4.4.1    日志结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-03-15 21:21:21|ERROR|读取数据出错|参数：id&#x3D;1002</span><br></pre></td></tr></table></figure><p>可以看到，日志中的内容是使用“|”进行分割的，使用，我们在处理的时候，也需要对数据做分割处理。</p><h3 id="4-4-2-编写配置文件"><a href="#4-4-2-编写配置文件" class="headerlink" title="4.4.2    编写配置文件"></a>4.4.2    编写配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#vim itcast-pipeline.conf</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path &#x3D;&gt; &quot;&#x2F;itcast&#x2F;logstash&#x2F;logs&#x2F;app.log&quot;</span><br><span class="line">        start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">    split &#x3D;&gt; &#123;&quot;message&quot;&#x3D;&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec &#x3D;&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-启动测试"><a href="#4-4-3-启动测试" class="headerlink" title="4.4.3    启动测试"></a>4.4.3    启动测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;logstash -f .&#x2F;itcast-pipeline.conf</span><br><span class="line"></span><br><span class="line">#写日志到文件</span><br><span class="line">echo &quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id&#x3D;1002&quot; &gt;&gt; app.log</span><br><span class="line"></span><br><span class="line">#输出的结果</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot; &#x3D;&gt; 2019-03-15T08:44:04.749Z,</span><br><span class="line">    &quot;path&quot; &#x3D;&gt; &quot;&#x2F;itcast&#x2F;logstash&#x2F;logs&#x2F;app.log&quot;,</span><br><span class="line">    &quot;@version&quot; &#x3D;&gt; &quot;1&quot;,</span><br><span class="line">    &quot;host&quot; &#x3D;&gt; &quot;node01&quot;,</span><br><span class="line">    &quot;message&quot; &#x3D;&gt; [</span><br><span class="line">        [0] &quot;2019-03-15 21:21:21&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;读取数据出错&quot;,</span><br><span class="line">        [3] &quot;参数：id&#x3D;1002&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，数据已经被分割了。</p><h3 id="4-4-4-输出到Elasticsearch"><a href="#4-4-4-输出到Elasticsearch" class="headerlink" title="4.4.4    输出到Elasticsearch"></a>4.4.4    输出到Elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path &#x3D;&gt; &quot;&#x2F;itcast&#x2F;logstash&#x2F;logs&#x2F;app.log&quot;</span><br><span class="line">        #type &#x3D;&gt; &quot;system&quot;</span><br><span class="line">        start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">    split &#x3D;&gt; &#123;&quot;message&quot;&#x3D;&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts &#x3D;&gt; [ &quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;logstash -f .&#x2F;itcast-pipeline.conf</span><br><span class="line"></span><br><span class="line">#写入数据</span><br><span class="line">echo &quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id&#x3D;1003&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://img-blog.csdnimg.cn/20200903190439712.png" alt="image-20200903183213936"></p><p><img src="https://img-blog.csdnimg.cn/20200903190418290.png" alt="image-20200903183220282"></p><h1 id="5-综合练习"><a href="#5-综合练习" class="headerlink" title="5.    综合练习"></a>5.    综合练习</h1><p>下面我们将前面所学习到的Elasticsearch + Logstash + Beats + Kibana整合起来做一个综合性的练习，目的就是让学生们能够更加深刻的理解Elastic Stack的使用。</p><h2 id="5-1-流程说明"><a href="#5-1-流程说明" class="headerlink" title="5.1    流程说明"></a>5.1    流程说明</h2><p><img src="https://img-blog.csdnimg.cn/20200903190458505.png" alt="image-20200903183300907"></p><ul><li>应用APP生产日志，用来记录用户的操作<ul><li>[INFO] 2019-03-15 22:55:20 [cn.itcast.dashboard.Main] - DAU|5206|使用优惠券|2019-03-15 03:37:20</li><li>[INFO] 2019-03-15 22:55:21 [cn.itcast.dashboard.Main] - DAU|3880|浏览页面|2019-03-15 07:25:09</li></ul></li><li>通过Filebeat读取日志文件中的内容，并且将内容发送给Logstash，原因是需要对内容做处理</li><li>Logstash接收到内容后，进行处理，如分割操作，然后将内容发送到Elasticsearch中</li><li>Kibana会读取Elasticsearch中的数据，并且在Kibana中进行设计Dashboard，最后进行展示</li></ul><blockquote><p>说明：日志格式、图表、Dashboard都是自定义的。</p></blockquote><h2 id="5-2-APP介绍"><a href="#5-2-APP介绍" class="headerlink" title="5.2    APP介绍"></a>5.2    APP介绍</h2><p>APP在生产环境应该是真实的系统，然而，我们现在仅仅的学习，为了简化操作，所以就做数据的模拟生成即可。</p><p>业务代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] VISIT = <span class="keyword">new</span> String[]&#123;<span class="string">"浏览页面"</span>, <span class="string">"评论商品"</span>, <span class="string">"加入收藏"</span>, <span class="string">"加入购物车"</span>, <span class="string">"提交订单"</span>, <span class="string">"使用优惠券"</span>, <span class="string">"领取优惠券"</span>, <span class="string">"搜索"</span>, <span class="string">"查看订单"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Long sleep = RandomUtils.nextLong(<span class="number">200</span>, <span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">            Thread.sleep(sleep);</span><br><span class="line">            Long maxUserId = <span class="number">9999L</span>;</span><br><span class="line">            Long userId = RandomUtils.nextLong(<span class="number">1</span>, maxUserId);</span><br><span class="line">            String visit = VISIT[RandomUtils.nextInt(<span class="number">0</span>, VISIT.length)];</span><br><span class="line">            DateTime now = <span class="keyword">new</span> DateTime();</span><br><span class="line">            <span class="keyword">int</span> maxHour = now.getHourOfDay();</span><br><span class="line">            <span class="keyword">int</span> maxMillis = now.getMinuteOfHour();</span><br><span class="line">            <span class="keyword">int</span> maxSeconds = now.getSecondOfMinute();</span><br><span class="line">            String date = now.plusHours(-(RandomUtils.nextInt(<span class="number">0</span>, maxHour)))</span><br><span class="line">                    .plusMinutes(-(RandomUtils.nextInt(<span class="number">0</span>, maxMillis)))</span><br><span class="line">                    .plusSeconds(-(RandomUtils.nextInt(<span class="number">0</span>, maxSeconds)))</span><br><span class="line">                    .toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">            String result = <span class="string">"DAU|"</span> + userId + <span class="string">"|"</span> + visit + <span class="string">"|"</span> + date;</span><br><span class="line">            LOGGER.info(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[INFO] 2019-03-15 22:54:42 [cn.itcast.dashboard.Main] - DAU|4645|领取优惠券|2019-03-15 07:40:29</span><br><span class="line">[INFO] 2019-03-15 22:54:44 [cn.itcast.dashboard.Main] - DAU|3482|领取优惠券|2019-03-15 18:34:04</span><br><span class="line">[INFO] 2019-03-15 22:54:48 [cn.itcast.dashboard.Main] - DAU|5607|加入收藏|2019-03-15 22:44:09</span><br><span class="line">[INFO] 2019-03-15 22:54:50 [cn.itcast.dashboard.Main] - DAU|9619|加入收藏|2019-03-15 21:39:47</span><br><span class="line">[INFO] 2019-03-15 22:54:53 [cn.itcast.dashboard.Main] - DAU|7666|加入收藏|2019-03-15 17:47:18</span><br><span class="line">[INFO] 2019-03-15 22:54:54 [cn.itcast.dashboard.Main] - DAU|4871|提交订单|2019-03-15 02:36:27</span><br><span class="line">[INFO] 2019-03-15 22:54:55 [cn.itcast.dashboard.Main] - DAU|7126|加入收藏|2019-03-15 16:11:06</span><br><span class="line">[INFO] 2019-03-15 22:55:00 [cn.itcast.dashboard.Main] - DAU|9606|评论商品|2019-03-15 02:12:00</span><br><span class="line">[INFO] 2019-03-15 22:55:02 [cn.itcast.dashboard.Main] - DAU|7698|查看订单|2019-03-15 08:17:02</span><br></pre></td></tr></table></figure><p>代码在资料中可以找到，itcast-dashboard-generate.zip。</p><p>部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#打包成jar包，在linux上运行</span><br><span class="line">java -jar itcast-dashboard-generate-1.0-SNAPSHOT.jar</span><br><span class="line">#运行之后，就可以将日志写入到&#x2F;itcast&#x2F;logs&#x2F;app.log文件中</span><br></pre></td></tr></table></figure><h2 id="5-3-Filebeat"><a href="#5-3-Filebeat" class="headerlink" title="5.3    Filebeat"></a>5.3    Filebeat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#vim itcast-dashboard.yml</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">    enabled: true</span><br><span class="line">    paths:</span><br><span class="line">    - &#x2F;itcast&#x2F;logs&#x2F;*.log</span><br><span class="line">setup.template.settings:</span><br><span class="line">    index.number_of_shards: 3</span><br><span class="line">output.logstash:</span><br><span class="line">    hosts: [&quot;192.168.40.133:5044&quot;]</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;filebeat -e -c itcast-dashboard.yml</span><br></pre></td></tr></table></figure><h2 id="5-4-Logstash"><a href="#5-4-Logstash" class="headerlink" title="5.4    Logstash"></a>5.4    Logstash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#vim itcast-dashboard.conf</span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">    port &#x3D;&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123; </span><br><span class="line">    split &#x3D;&gt; &#123;&quot;message&quot;&#x3D;&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        add_field &#x3D;&gt; &#123;</span><br><span class="line">            &quot;userId&quot; &#x3D;&gt; &quot;%&#123;message[1]&#125;&quot;</span><br><span class="line">            &quot;visit&quot; &#x3D;&gt; &quot;%&#123;message[2]&#125;&quot;</span><br><span class="line">            &quot;date&quot; &#x3D;&gt; &quot;%&#123;message[3]&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        convert &#x3D;&gt; &#123;</span><br><span class="line">            &quot;userId&quot; &#x3D;&gt; &quot;integer&quot;</span><br><span class="line">            &quot;visit&quot; &#x3D;&gt; &quot;string&quot;</span><br><span class="line">            &quot;date&quot; &#x3D;&gt; &quot;string&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#output &#123;</span><br><span class="line">#  stdout &#123; codec &#x3D;&gt; rubydebug &#125;</span><br><span class="line">#&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts &#x3D;&gt; [ &quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;logstash -f itcast-dashboard.conf</span><br></pre></td></tr></table></figure><h2 id="5-5-Kibana"><a href="#5-5-Kibana" class="headerlink" title="5.5    Kibana"></a>5.5    Kibana</h2><p>启动Kibana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">.&#x2F;bin&#x2F;kibana</span><br><span class="line"></span><br><span class="line">#通过浏览器进行访问</span><br><span class="line">http:&#x2F;&#x2F;192.168.40.133:5601&#x2F;app&#x2F;kibana</span><br></pre></td></tr></table></figure><p>添加Logstash索引到Kibana中：</p><p><img src="https://img-blog.csdnimg.cn/2020090319051996.png" alt="image-20200903184049472"></p><h3 id="5-5-1-时间间隔的柱形图"><a href="#5-5-1-时间间隔的柱形图" class="headerlink" title="5.5.1    时间间隔的柱形图"></a>5.5.1    时间间隔的柱形图</h3><p><img src="https://img-blog.csdnimg.cn/20200903190536862.png" alt="image-20200903184150143"></p><p>说明：x轴是时间，以天为单位，y轴是count数</p><p>保存：（my-dashboard-时间间隔的柱形图）</p><p><img src="https://img-blog.csdnimg.cn/20200903190602159.png" alt="image-20200903184211005"></p><h3 id="5-5-2-各个操作的饼图分布"><a href="#5-5-2-各个操作的饼图分布" class="headerlink" title="5.5.2    各个操作的饼图分布"></a>5.5.2    各个操作的饼图分布</h3><p><img src="https://img-blog.csdnimg.cn/20200903190618493.png" alt="image-20200903184231635"></p><p>统计各个操作的数量，形成饼图。</p><p>保存：（my-dashboard-各个操作的饼图）</p><p><img src="https://img-blog.csdnimg.cn/2020090319063553.png" alt="image-20200903184253645"></p><h3 id="5-5-3-数据表格"><a href="#5-5-3-数据表格" class="headerlink" title="5.5.3    数据表格"></a>5.5.3    数据表格</h3><p><img src="https://img-blog.csdnimg.cn/20200903190709843.png" alt="image-20200903184309960"></p><p>在数据探索中进行保存，并且保存，将各个操作的数据以表格的形式展现出来。</p><p>保存：（my-dashboard-表格）</p><p><img src="https://img-blog.csdnimg.cn/20200903190650555.png" alt="image-20200903184330119"></p><h2 id="5-6-制作Dashboard"><a href="#5-6-制作Dashboard" class="headerlink" title="5.6    制作Dashboard"></a>5.6    制作Dashboard</h2><p><img src="https://img-blog.csdnimg.cn/20200903190737319.png" alt="image-20200903184343891"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Nginx日志分析系统&quot;&gt;&lt;a href=&quot;#1-Nginx日志分析系统&quot; class=&quot;headerlink&quot; title=&quot;1.    Nginx日志分析系统&quot;&gt;&lt;/a&gt;1.    Nginx日志分析系统&lt;/h1&gt;&lt;h2 id=&quot;1-1-项目需求&quot;&gt;&lt;a href=&quot;#1-1-项目需求&quot; class=&quot;headerlink&quot; title=&quot;1.1    项目需求&quot;&gt;&lt;/a&gt;1.1    项目需求&lt;/h2&gt;&lt;p&gt;Nginx是一款非常优秀的web服务器，往往nginx服务会作为项目的访问入口，那么，nginx的性能保障就变得非常重要了，如果nginx的运行出现了问题就会对项目有较大的影响，所以，我们需要对nginx的运行有监控措施，实时掌握nginx的运行情况，那就需要收集nginx的运行指标和分析nginx的运行日志了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="ElasticStack" scheme="https://wgy1993.gitee.io/tags/ElasticStack/"/>
    
  </entry>
  
  <entry>
    <title>ElasticStack(一)</title>
    <link href="https://wgy1993.gitee.io/archives/b4bf25de.html"/>
    <id>https://wgy1993.gitee.io/archives/b4bf25de.html</id>
    <published>2020-09-01T14:24:37.000Z</published>
    <updated>2020-09-01T15:18:50.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Elastic-Stack简介"><a href="#1-Elastic-Stack简介" class="headerlink" title="1.    Elastic Stack简介"></a>1.    Elastic Stack简介</h1><p>如果你没有听说过Elastic Stack，那你一定听说过ELK，实际上ELK是三款软件的简称，分别是Elasticsearch、Logstash、Kibana组成，在发展的过程中，又有新成员Beats的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200901223646724.png" alt="image-20200901075610228"></p><p>全系的Elastic Stack技术栈包括：</p><p><img src="https://img-blog.csdnimg.cn/20200901223646760.png" alt="image-20200901075637504"></p><p><strong>Elasticsearch</strong></p><p>Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p><strong>Logstash</strong></p><p>Logstash 基于java，是一个开源的用于收集,分析和存储日志的工具。</p><p><strong>Kibana</strong></p><p>Kibana 基于nodejs，也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的Web 界面，可以汇总、分析和搜索重要数据日志。</p><p><strong>Beats</strong></p><p>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch，然后进行后续的数据分析活动。</p><p>Beats由如下组成:</p><ul><li>Packetbeat：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议；</li><li>Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder；</li><li>Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务；</li><li>Winlogbeat：用于监控、收集Windows系统的日志信息；</li></ul><h1 id="2-Elasticsearch"><a href="#2-Elasticsearch" class="headerlink" title="2.    Elasticsearch"></a>2.    Elasticsearch</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1    简介"></a>2.1    简介</h2><p><img src="https://img-blog.csdnimg.cn/20200901223646663.png" alt="image-20200901080306083"></p><p>官网：<a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/products/elasticsearch</a></p><p><img src="https://img-blog.csdnimg.cn/20200901223646704.png" alt="image-20200901080346341"></p><h2 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2    安装"></a>2.2    安装</h2><h3 id="2-2-1-版本说明"><a href="#2-2-1-版本说明" class="headerlink" title="2.2.1    版本说明"></a>2.2.1    版本说明</h3><p>Elasticsearch的发展是非常快速的，所以在ES5.0之前，ELK的各个版本都不统一，出现了版本号混乱的状态，所以从5.0开始，所有Elastic Stack中的项目全部统一版本号。目前最新版本是6.5.4，我们将基于这一版本进行学习。</p><p><img src="https://img-blog.csdnimg.cn/20200901223646722.png" alt="image-20200901080434209"></p><h3 id="2-2-2-下载"><a href="#2-2-2-下载" class="headerlink" title="2.2.2    下载"></a>2.2.2    下载</h3><p>地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p><img src="https://img-blog.csdnimg.cn/20200901223646666.png" alt="image-20200901080459373"></p><p>或者，使用资料中提供的已下载好的安装包。</p><h3 id="2-2-3-单机版安装"><a href="#2-2-3-单机版安装" class="headerlink" title="2.2.3    单机版安装"></a>2.2.3    单机版安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#创建elsearch用户，Elasticsearch不支持root用户运行</span><br><span class="line">useradd elsearch</span><br><span class="line"></span><br><span class="line">#解压安装包</span><br><span class="line">tar -zxvf elasticsearch-6.5.4.tar.gz -C &#x2F;wgy&#x2F;es&#x2F;</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">vim conf&#x2F;elasticsearch.yml</span><br><span class="line">network.host: 0.0.0.0  #设置ip地址，任意网络均可访问</span><br><span class="line"></span><br><span class="line">#说明：在Elasticsearch中如果，network.host不是localhost或者127.0.0.1的话，就会认为是生产环境，</span><br><span class="line">#会对环境的要求比较高，我们的测试环境不一定能够满足，一般情况下需要修改2处配置，如下：</span><br><span class="line">#1：修改jvm启动参数</span><br><span class="line">vim conf&#x2F;jvm.options</span><br><span class="line">-Xms128m #根据自己机器情况修改</span><br><span class="line">-Xmx128m</span><br><span class="line"></span><br><span class="line">#2：一个进程在VMAs(虚拟内存区域)创建内存映射最大数量</span><br><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">vm.max_map_count&#x3D;655360</span><br><span class="line"></span><br><span class="line">sysctl -p #配置生效</span><br><span class="line"></span><br><span class="line">#启动ES服务</span><br><span class="line">su elsearch</span><br><span class="line">cd bin</span><br><span class="line">.&#x2F;elasticsearch 或 .&#x2F;elasticsearch -d #后台启动</span><br><span class="line"></span><br><span class="line">#通过访问进行测试，看到如下信息，就说明ES启动成功了</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;dSQV6I8&quot;,</span><br><span class="line">  &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot;: &quot;v5GPTWAtT5emxFdjigFg-w&quot;,</span><br><span class="line">  &quot;version&quot;: &#123;</span><br><span class="line">    &quot;number&quot;: &quot;6.5.4&quot;,</span><br><span class="line">    &quot;build_flavor&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot;: &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot;: &quot;d2ef93d&quot;,</span><br><span class="line">    &quot;build_date&quot;: &quot;2018-12-17T21:17:40.758843Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot;: false,</span><br><span class="line">    &quot;lucene_version&quot;: &quot;7.5.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot;: &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot;: &quot;5.0.0&quot;</span><br><span class="line"> &#125;,</span><br><span class="line">  &quot;tagline&quot;: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#停止服务</span><br><span class="line">root@itcast:~# jps</span><br><span class="line">68709 Jps</span><br><span class="line">68072 Elasticsearch</span><br><span class="line">kill 68072  #通过kill结束进程</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#启动出错，环境：Centos6</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">#解决：切换到root用户，编辑limits.conf 添加类似如下内容</span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line">添加如下内容:</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line"></span><br><span class="line">[2]: max number of threads [1024] for user [elsearch] is too low, increase to at least [4096]</span><br><span class="line">#解决：切换到root用户，进入limits.d目录下修改配置文件。</span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf</span><br><span class="line">#修改如下内容：</span><br><span class="line">* soft nproc 1024</span><br><span class="line">#修改为</span><br><span class="line">* soft nproc 4096</span><br><span class="line"></span><br><span class="line">[3]: system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</span><br><span class="line">#解决：Centos6不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为true</span><br><span class="line">vim config&#x2F;elasticsearch.yml</span><br><span class="line">添加：</span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure><h3 id="2-2-4-elasticsearch-head"><a href="#2-2-4-elasticsearch-head" class="headerlink" title="2.2.4    elasticsearch-head"></a>2.2.4    elasticsearch-head</h3><p>由于ES官方并没有为ES提供界面管理工具，仅仅是提供了后台的服务。elasticsearch-head是一个为ES开发的一个页面客户端工具，其源码托管于GitHub，地址为：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></p><p>head提供了4种安装方式：</p><ul><li>源码安装，通过npm run start启动（不推荐）</li><li>通过docker安装（推荐）</li><li>通过chrome插件安装（推荐）</li><li>通过ES的plugin方式安装（不推荐）</li></ul><p><strong>通过docker安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker create --name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker start elasticsearch-head</span><br></pre></td></tr></table></figure><p>通过浏览器进行访问：</p><p><img src="https://img-blog.csdnimg.cn/20200901223646686.png" alt="image-20200901081429960"></p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置，如下：</span><br><span class="line">vim elasticsearch.yml</span><br><span class="line">http.cors.enabled: true http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">通过chrome插件的方式安装不存在该问题。</span><br></pre></td></tr></table></figure><p><strong>chrome插件的方式安装</strong></p><p>打开chrome的应用商店，即可安装<a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm</a></p><p><img src="https://img-blog.csdnimg.cn/20200901223646679.png" alt="image-20200901081631006"></p><p>建议：推荐使用chrome插件的方式安装，如果网络环境不允许，就采用其它方式安装。</p><h2 id="2-3-基本概念"><a href="#2-3-基本概念" class="headerlink" title="2.3    基本概念"></a>2.3    基本概念</h2><p><strong>索引</strong></p><ul><li>索引（index）是Elasticsearch对逻辑数据的逻辑存储，所以它可以分为更小的部分。</li><li>可以把索引看成关系型数据库的表，索引的结构是为快速有效的全文索引准备的，特别是它不存储原始值。</li><li>Elasticsearch可以把索引存放在一台机器或者分散在多台服务器上，每个索引有一或多个分片（shard），每个分片可以有多个副本（replica）。</li></ul><p><strong>文档</strong></p><ul><li>存储在Elasticsearch中的主要实体叫文档（document）。用关系型数据库来类比的话，一个文档相当于数据库表中的一行记录。</li><li>Elasticsearch和MongoDB中的文档类似，都可以有不同的结构，但Elasticsearch的文档中，相同字段必须有相同类型。</li><li>文档由多个字段组成，每个字段可能多次出现在一个文档里，这样的字段叫多值字段（multivalued）。</li><li>每个字段的类型，可以是文本、数值、日期等。字段类型也可以是复杂类型，一个字段包含其他子文档或者数组。</li></ul><p><strong>映射</strong></p><ul><li>所有文档写进索引之前都会先进行分析，如何将输入的文本分割为词条、哪些词条又会被过滤，这种行为叫做映射（mapping）。一般由用户自己定义规则。</li></ul><p><strong>文档类型</strong></p><ul><li>在Elasticsearch中，一个索引对象可以存储很多不同用途的对象。例如，一个博客应用程序可以保存文章和评论。</li><li>每个文档可以有不同的结构。</li><li>不同的文档类型不能为相同的属性设置不同的类型。例如，在同一索引中的所有文档类型中，一个叫title的字段必须具有相同的类型。</li></ul><h2 id="2-4-RESTful-API"><a href="#2-4-RESTful-API" class="headerlink" title="2.4    RESTful API"></a>2.4    RESTful API</h2><p>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。</p><h3 id="2-4-1-创建非结构化索引"><a href="#2-4-1-创建非结构化索引" class="headerlink" title="2.4.1    创建非结构化索引"></a>2.4.1    创建非结构化索引</h3><p>在Lucene中，创建索引是需要定义字段名称以及字段的类型的，在Elasticsearch中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在Elasticsearch底层会进行结构化操作，此操作对用户是透明的。</p><p>创建空索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;haoke</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;2&quot;, #分片数</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot; #副本数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#删除索引</span><br><span class="line">DELETE &#x2F;haoke</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901223646673.png" alt="image-20200901082637834"></p><h3 id="2-4-2-插入数据"><a href="#2-4-2-插入数据" class="headerlink" title="2.4.2    插入数据"></a>2.4.2    插入数据</h3><p>URL规则：POST /{索引}/{类型}/{id}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;1001</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;:1001,</span><br><span class="line">    &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;age&quot;:20,</span><br><span class="line">    &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#响应</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 0,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901223646685.png" alt="image-20200901082857440"></p><blockquote><p>说明：非结构化的索引，不需要事先创建，直接插入数据默认创建索引。</p></blockquote><p>不指定id插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;:1002,</span><br><span class="line">    &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;age&quot;:20,</span><br><span class="line">    &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224229231.png" alt="image-20200901083109482"></p><h3 id="2-4-3-更新数据"><a href="#2-4-3-更新数据" class="headerlink" title="2.4.3    更新数据"></a>2.4.3    更新数据</h3><p>在Elasticsearch中，文档数据是不为修改的，但是可以通过覆盖的方式进行更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;haoke&#x2F;user&#x2F;1001</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;:1001,</span><br><span class="line">    &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;age&quot;:21,</span><br><span class="line">    &quot;sex&quot;:&quot;女&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200901224253509.png" alt="image-20200901083307888"></p><p><img src="https://img-blog.csdnimg.cn/20200901224309990.png" alt="image-20200901083314377"></p><p>可以看到数据已经被覆盖了。</p><p>问题来了，可以局部更新吗？ – 可以的。</p><p>前面不是说，文档数据不能更新吗？ 其实是这样的：</p><p>在内部，依然会查询到这个文档数据，然后进行覆盖操作，步骤如下：</p><ul><li>从旧文档中检索JSON</li><li>修改它</li><li>删除旧文档</li><li>索引新文档</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#注意：这里多了_update标识</span><br><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;1001&#x2F;_update</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;:&#123;</span><br><span class="line">        &quot;age&quot;:23</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224330607.png" alt="image-20200901083512106"></p><p><img src="https://img-blog.csdnimg.cn/20200901224349552.png" alt="image-20200901083516956"></p><p>可以看到数据已经被局部更新了。</p><h3 id="2-4-4-删除数据"><a href="#2-4-4-删除数据" class="headerlink" title="2.4.4    删除数据"></a>2.4.4    删除数据</h3><p>在Elasticsearch中，删除文档数据，只需要发起DELETE请求即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;haoke&#x2F;user&#x2F;1001</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224409204.png" alt="image-20200901083557773"></p><p>需要注意的是，result表示已经删除，version也更加了。</p><p>如果删除一条不存在的数据，会响应404：</p><p><img src="https://img-blog.csdnimg.cn/20200901224434971.png" alt="image-20200901083613904"></p><p>说明：</p><blockquote><p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。</p></blockquote><h3 id="2-4-5-搜索数据"><a href="#2-4-5-搜索数据" class="headerlink" title="2.4.5    搜索数据"></a>2.4.5    搜索数据</h3><p><strong>根据id搜索数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;BbPe_WcB9cFOnF3uebvr</span><br><span class="line"></span><br><span class="line">#返回的数据如下</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;BbPe_WcB9cFOnF3uebvr&quot;,</span><br><span class="line">    &quot;_version&quot;: 8,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;  #原始数据在这里</span><br><span class="line">                &quot;id&quot;: 1002,</span><br><span class="line">                &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">                &quot;age&quot;: 40,</span><br><span class="line">                &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">               &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>搜索全部数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;_search </span><br><span class="line"></span><br><span class="line">#响应：（默认返回10条数据）</span><br><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 26,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 2,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 4,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BbPe_WcB9cFOnF3uebvr&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1002,</span><br><span class="line">                    &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">                    &quot;age&quot;: 40,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1001&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1001,</span><br><span class="line">                    &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">                    &quot;age&quot;: 20,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1003&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1003,</span><br><span class="line">                    &quot;name&quot;: &quot;王五&quot;,</span><br><span class="line">                    &quot;age&quot;: 30,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1004&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;id&quot;: 1004,</span><br><span class="line">                    &quot;name&quot;: &quot;赵六&quot;,</span><br><span class="line">                    &quot;age&quot;: 30,</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键字搜素数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询年龄等于20的用户</span><br><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;_search?q&#x3D;age:20</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224507746.png" alt="image-20200901084106303"></p><h3 id="2-4-6-DSL搜索"><a href="#2-4-6-DSL搜索" class="headerlink" title="2.4.6    DSL搜索"></a>2.4.6    DSL搜索</h3><p>Elasticsearch提供丰富且灵活的查询语言叫做<strong>DSL查询(Query DSL)</strong>,它允许你构建更加复杂、强大的查询。</p><p><strong>DSL(Domain Specific Language特定领域语言)</strong>以JSON请求体的形式出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;  #match只是查询的一种</span><br><span class="line">                   &quot;age&quot; : 20</span><br><span class="line">                  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应数据：</p><p><img src="https://img-blog.csdnimg.cn/20200901224527504.png" alt="image-20200901084549255"></p><p><strong>实现：查询年龄大于30岁的男性用户。</strong></p><p>现有数据：</p><p><img src="https://img-blog.csdnimg.cn/20200901224552556.png" alt="image-20200901084631014"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                    &quot;age&quot;: &#123;</span><br><span class="line">                        &quot;gt&quot;: 30</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                    &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224618687.png" alt="image-20200901084737578"></p><p><strong>全文搜索</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三 李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224641910.png" alt="image-20200901084937381"></p><h3 id="2-4-7-高亮显示"><a href="#2-4-7-高亮显示" class="headerlink" title="2.4.7    高亮显示"></a>2.4.7    高亮显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三 李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224712488.png" alt="image-20200901085051218"></p><h3 id="2-4-8-聚合"><a href="#2-4-8-聚合" class="headerlink" title="2.4.8    聚合"></a>2.4.8    聚合</h3><p>在Elasticsearch中，支持聚合操作，类似SQL中的group by操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;all_interests&quot;: &#123;</span><br><span class="line">            &quot;terms&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;age&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224743963.png" alt="image-20200901093159274"></p><p>从结果可以看出，年龄30的有2条数据，20的有一条，40的一条。</p><h1 id="3-核心详解"><a href="#3-核心详解" class="headerlink" title="3.    核心详解"></a>3.    核心详解</h1><h2 id="3-1-文档"><a href="#3-1-文档" class="headerlink" title="3.1    文档"></a>3.1    文档</h2><p>在Elasticsearch中，文档以JSON格式进行存储，可以是复杂的结构，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1005"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1005</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"孙七"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">37</span>,</span><br><span class="line">        <span class="attr">"sex"</span>: <span class="string">"女"</span>,</span><br><span class="line">        <span class="attr">"card"</span>: &#123;</span><br><span class="line">            <span class="attr">"card_number"</span>: <span class="string">"123456789"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，card是一个复杂对象，嵌套的Card对象。</p><p><strong>元数据（metadata）</strong></p><p>一个文档不只有数据。它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是：</p><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td>_index</td><td>文档存储的地方</td></tr><tr><td>_type</td><td>文档代表的对象的类</td></tr><tr><td>_id</td><td>文档的唯一标识</td></tr></tbody></table><p><strong>_index</strong></p><p>索引(index)类似于关系型数据库里的“数据库”——它是我们存储和索引关联数据的地方。</p><blockquote><p>提示：<br>事实上，我们的数据被存储和索引在分片(shards)中，索引只是一个把一个或多个分片分组在一起的逻辑空间。然而，这只是一些内部细节——我们的程序完全不用关心分片。对于我们的程序而言，文档存储在索引(index)中。剩下的细节由Elasticsearch关心既可。</p></blockquote><p><strong>_type</strong></p><p>在应用中，我们使用对象表示一些“事物”，例如一个用户、一篇博客、一个评论，或者一封邮件。每个对象都属于一个类(class)，这个类定义了属性或与对象关联的数据。 user 类的对象可能包含姓名、性别、年龄和Email地址。</p><p>在关系型数据库中，我们经常将相同类的对象存储在一个表里，因为它们有着相同的结构。同理，在Elasticsearch中，我们使用相同类型(type)的文档表示相同的“事物”，因为他们的数据结构也是相同的。</p><p>每个类型(type)都有自己的映射(mapping)或者结构定义，就像传统数据库表中的列一样。所有类型下的文档被存储在同一个索引下，但是类型的映射(mapping)会告诉Elasticsearch不同的文档如何被索引。</p><p>_type 的名字可以是大写或小写，不能包含下划线或逗号。我们将使用 blog 做为类型名。</p><p><strong>_id</strong></p><p>id仅仅是一个字符串，它与 _index 和 _type 组合时，就可以在Elasticsearch中唯一标识一个文档。当创建一个文档，你可以自定义 _id ，也可以让Elasticsearch帮你自动生成（32位长度）。</p><h2 id="3-2-查询响应"><a href="#3-2-查询响应" class="headerlink" title="3.2    查询响应"></a>3.2    查询响应</h2><h3 id="3-2-1-pretty"><a href="#3-2-1-pretty" class="headerlink" title="3.2.1    pretty"></a>3.2.1    pretty</h3><p>可以在查询url后面添加pretty参数，使得返回的json更易查看。</p><p><img src="https://img-blog.csdnimg.cn/20200901224807568.png" alt="image-20200901095201071"></p><h3 id="3-2-2-指定响应字段"><a href="#3-2-2-指定响应字段" class="headerlink" title="3.2.2    指定响应字段"></a>3.2.2    指定响应字段</h3><p>在响应的数据中，如果我们不需要全部的字段，可以指定某些需要的字段进行返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;1005?_source&#x3D;id,name</span><br><span class="line"></span><br><span class="line">#响应</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;haoke&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1005&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;孙七&quot;,</span><br><span class="line">        &quot;id&quot;: 1005</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不需要返回元数据，仅仅返回原始数据，可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;1005&#x2F;_source</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224830548.png" alt="image-20200901095416042"></p><p>还可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;1005&#x2F;_source?_source&#x3D;id,name</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224859288.png" alt="image-20200901095436293"></p><h2 id="3-3-判断文档是否存在"><a href="#3-3-判断文档是否存在" class="headerlink" title="3.3    判断文档是否存在"></a>3.3    判断文档是否存在</h2><p>如果我们只需要判断文档是否存在，而不是查询文档内容，那么可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD &#x2F;haoke&#x2F;user&#x2F;1005</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224919533.png" alt="image-20200901095525632"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD &#x2F;haoke&#x2F;user&#x2F;1006</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901224936298.png" alt="image-20200901095543845"></p><p>当然，这只表示你在查询的那一刻文档不存在，但并不表示几毫秒后依旧不存在。另一个进程在这期间可能创建新文档。</p><h2 id="3-4-批量操作"><a href="#3-4-批量操作" class="headerlink" title="3.4    批量操作"></a>3.4    批量操作</h2><p>有些情况下可以通过批量操作以减少网络请求。如：批量查询、批量插入数据。</p><h3 id="3-4-1-批量查询"><a href="#3-4-1-批量查询" class="headerlink" title="3.4.1    批量查询"></a>3.4.1    批量查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_mget</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ids&quot; : [ &quot;1001&quot;, &quot;1003&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901224956264.png" alt="image-20200901095719268"></p><p>如果，某一条数据不存在，不影响整体响应，需要通过found的值进行判断是否查询到数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_mget</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ids&quot; : [ &quot;1001&quot;, &quot;1006&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225020386.png" alt="image-20200901095816045"></p><h3 id="3-4-2-bulk操作"><a href="#3-4-2-bulk操作" class="headerlink" title="3.4.2    _bulk操作"></a>3.4.2    _bulk操作</h3><p>在Elasticsearch中，支持批量的插入、修改、删除操作，都是通过_bulk的api完成的。</p><p>请求格式如下：（请求格式不同寻常）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body    &#125;\n</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body    &#125;\n</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>批量插入数据：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"create"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2001</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2001</span>,<span class="attr">"name"</span>:<span class="string">"name1"</span>,<span class="attr">"age"</span>: <span class="number">20</span>,<span class="attr">"sex"</span>: <span class="string">"男"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"create"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2002</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2002</span>,<span class="attr">"name"</span>:<span class="string">"name2"</span>,<span class="attr">"age"</span>: <span class="number">20</span>,<span class="attr">"sex"</span>: <span class="string">"男"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"create"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2003</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2003</span>,<span class="attr">"name"</span>:<span class="string">"name3"</span>,<span class="attr">"age"</span>: <span class="number">20</span>,<span class="attr">"sex"</span>: <span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure><p>注意最后一行的回车。</p><p><img src="https://img-blog.csdnimg.cn/20200901225047107.png" alt="image-20200901100005729"></p><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"create"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2001"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">24</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">201</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"create"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2002"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">201</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"create"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2003"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">201</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>批量删除：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"delete"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2001</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"delete"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2002</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"delete"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"haoke"</span>,<span class="attr">"_type"</span>:<span class="string">"user"</span>,<span class="attr">"_id"</span>:<span class="number">2003</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>由于delete没有请求体，所以，action的下一行直接就是下一个action。</p><p><img src="https://img-blog.csdnimg.cn/20200901225110908.png" alt="image-20200901100150714"></p><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"delete"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2001"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">25</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"delete"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2002"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"delete"</span>: &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"haoke"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"user"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"2003"</span>,</span><br><span class="line">                <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">                <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">                    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"_seq_no"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他操作就类似了。</p><p>一次请求多少性能最高？</p><ul><li>整个批量请求需要被加载到接受我们请求节点的内存里，所以请求越大，给其它请求可用的内存就越小。有一个最佳的bulk请求大小。超过这个大小，性能不再提升而且可能降低。</li><li>最佳大小，当然并不是一个固定的数字。它完全取决于你的硬件、你文档的大小和复杂度以及索引和搜索的负载。</li><li>幸运的是，这个最佳点(sweetspot)还是容易找到的：试着批量索引标准的文档，随着大小的增长，当性能开始降低，说明你每个批次的大小太大了。开始的数量可以在1000~5000个文档之间，如果你的文档非常大，可以使用较小的批次。</li><li>通常着眼于你请求批次的物理大小是非常有用的。一千个1kB的文档和一千个1MB的文档大不相同。一个好的批次最好保持在5-15MB大小间。</li></ul><h2 id="3-5-分页"><a href="#3-5-分页" class="headerlink" title="3.5    分页"></a>3.5    分页</h2><p>和SQL使用 LIMIT 关键字返回只有一页的结果一样，Elasticsearch接受 from 和 size 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size: 结果数，默认10</span><br><span class="line">from: 跳过开始的结果数，默认0</span><br></pre></td></tr></table></figure><p>如果你想每页显示5个结果，页码从1到3，那请求如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search?size&#x3D;5</span><br><span class="line">GET &#x2F;_search?size&#x3D;5&amp;from&#x3D;5</span><br><span class="line">GET &#x2F;_search?size&#x3D;5&amp;from&#x3D;10</span><br></pre></td></tr></table></figure><p>应该当心分页太深或者一次请求太多的结果。结果在返回前会被排序。但是记住一个搜索请求常常涉及多个分片。每个分片生成自己排好序的结果，它们接着需要集中起来排序以确保整体排序正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;haoke&#x2F;user&#x2F;_search?size&#x3D;1&amp;from&#x3D;2</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225140388.png" alt="image-20200901102410178"></p><p><strong>在集群系统中深度分页</strong></p><p>为了理解为什么深度分页是有问题的，让我们假设在一个有5个主分片的索引中搜索。当我们请求结果的第一页（结果1到10）时，每个分片产生自己最顶端10个结果然后返回它们给请求节点(requesting node)，它再排序这所有的50个结果以选出顶端的10个结果。</p><p>现在假设我们请求第1000页——结果10001到10010。工作方式都相同，不同的是每个分片都必须产生顶端的10010个结果。然后请求节点排序这50050个结果并丢弃50040个！</p><p>你可以看到在分布式系统中，排序结果的花费随着分页的深入而成倍增长。这也是为什么网络搜索引擎中任何语句不能返回多于1000个结果的原因。</p><h2 id="3-6-映射"><a href="#3-6-映射" class="headerlink" title="3.6    映射"></a>3.6    映射</h2><p>前面我们创建的索引以及插入数据，都是由Elasticsearch进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则，自动判断的类型和实际需求是不相符的。</p><p>自动判断的规则如下：</p><table><thead><tr><th>JSON type</th><th>Field type</th></tr></thead><tbody><tr><td>Boolean:  true or  false</td><td>“boolean”</td></tr><tr><td>Whole number:  123</td><td>“long”</td></tr><tr><td>Floating point:  123.45</td><td>“double”</td></tr><tr><td>String, valid date:  “2014-09-15”</td><td>“date”</td></tr><tr><td>String:  “foo bar”</td><td>“string”</td></tr></tbody></table><p>Elasticsearch中支持的类型如下：</p><table><thead><tr><th>类型</th><th>表示的数据类型</th></tr></thead><tbody><tr><td>String</td><td>string , text , keyword</td></tr><tr><td>Whole number</td><td>byte ,  short ,  integer ,  long</td></tr><tr><td>Floating point</td><td>float ,  double</td></tr><tr><td>Boolean</td><td>boolean</td></tr><tr><td>Date</td><td>date</td></tr></tbody></table><ul><li>string类型在ElasticSearch 旧版本中使用较多，从ElasticSearch 5.x开始不再支持string，由text和keyword类型替代。</li><li>text 类型，当一个字段是要被全文搜索的，比如Email内容、产品描述，应该使用text类型。设置text类型以后，字段内容会被分析，在生成倒排索引以前，字符串会被分析器分成一个一个词项。text类型的字段不用于排序，很少用于聚合。</li><li>keyword类型适用于索引结构化的字段，比如email地址、主机名、状态码和标签。如果字段需要进行过滤(比如查找已发布博客中status属性为published的文章)、排序、聚合。keyword类型的字段只能通过精确值搜索到。</li></ul><p>创建明确类型的索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;itcast</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;2&quot;,</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;person&quot;: &#123;</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;age&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;mail&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;hobby&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;itcast&#x2F;_mapping</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225206892.png" alt="image-20200901103311660"></p><p>插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;_bulk</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;: 20,&quot;mail&quot;: &quot;111@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;: 21,&quot;mail&quot;: &quot;222@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球、篮球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;: 22,&quot;mail&quot;: &quot;333@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、篮球、游泳、听音乐&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;赵六&quot;,&quot;age&quot;: 23,&quot;mail&quot;: &quot;444@qq.com&quot;,&quot;hobby&quot;:&quot;跑步、游泳&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;孙七&quot;,&quot;age&quot;: 24,&quot;mail&quot;: &quot;555@qq.com&quot;,&quot;hobby&quot;:&quot;听音乐、看电影&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225229436.png" alt="image-20200901103400413"></p><p>测试搜索：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match"</span> : &#123; </span><br><span class="line">            <span class="attr">"hobby"</span> : <span class="string">"音乐"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225249801.png" alt="image-20200901103440349"></p><h2 id="3-7-结构化查询"><a href="#3-7-结构化查询" class="headerlink" title="3.7    结构化查询"></a>3.7    结构化查询</h2><h3 id="3-7-1-term查询"><a href="#3-7-1-term查询" class="headerlink" title="3.7.1    term查询"></a>3.7.1    term查询</h3><p>term 主要用于精确匹配哪些值，比如数字，日期，布尔值或  not_analyzed 的字符串(未经分析的文本数据类)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &#123; &quot;term&quot;: &#123; &quot;age&quot;:   26      &#125;&#125;</span><br><span class="line"> &#123; &quot;term&quot;: &#123; &quot;date&quot;:  &quot;2014-09-01&quot; &#125;&#125;</span><br><span class="line"> &#123; &quot;term&quot;: &#123; &quot;public&quot;: true     &#125;&#125;</span><br><span class="line"> &#123; &quot;term&quot;: &#123; &quot;tag&quot;:   &quot;full_text&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;term&quot; : &#123; </span><br><span class="line">            &quot;age&quot; : 20</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225320292.png" alt="image-20200901105024006"></p><h3 id="3-7-2-terms查询"><a href="#3-7-2-terms查询" class="headerlink" title="3.7.2    terms查询"></a>3.7.2    terms查询</h3><p>terms 跟  term 有点类似，但  terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;tag&quot;: [ &quot;search&quot;, &quot;full_text&quot;, &quot;nosql&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;terms&quot; : &#123; </span><br><span class="line">            &quot;age&quot; : [20,21]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225344253.png" alt="image-20200901105329305"></p><h3 id="3-7-3-range查询"><a href="#3-7-3-range查询" class="headerlink" title="3.7.3    range查询"></a>3.7.3    range查询</h3><p>range 过滤允许我们按照指定范围查找一批数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;:  20,</span><br><span class="line">            &quot;lt&quot;:  30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范围操作符包含：</p><p><code>gt</code>  大于<br><code>gte</code>  大于等于<br><code>lt</code>  小于<br><code>lte</code>  小于等于</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">                &quot;gte&quot;: 20,</span><br><span class="line">                &quot;lte&quot;: 22</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020090122540786.png" alt="image-20200901105701894"></p><h3 id="3-7-4-exists-查询"><a href="#3-7-4-exists-查询" class="headerlink" title="3.7.4    exists 查询"></a>3.7.4    exists 查询</h3><p>exists 查询可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的 IS_NULL 条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;exists&quot;:  &#123;</span><br><span class="line">        &quot;field&quot;:   &quot;title&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个查询只是针对已经查出一批数据来，但是想区分出某个字段是否存在的时候使用。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;user&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;  #必须包含</span><br><span class="line">                   &quot;field&quot;: &quot;card&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225445746.png" alt="image-20200901105900901"></p><h3 id="3-7-5-match查询"><a href="#3-7-5-match查询" class="headerlink" title="3.7.5    match查询"></a>3.7.5    match查询</h3><p>match 查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。</p><p>如果你使用  match 查询一个全文本字段，它会在真正查询之前用分析器先分析 match 一下查询字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">        &quot;tweet&quot;: &quot;About Search&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用 match 下指定了一个确切值，在遇到数字，日期，布尔值或者 not_analyzed 的字符串时，它将为你搜索你给定的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;match&quot;: &#123; &quot;age&quot;:   26      &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;date&quot;:  &quot;2014-09-01&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;public&quot;: true     &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;tag&quot;:   &quot;full_text&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-6-bool查询"><a href="#3-7-6-bool查询" class="headerlink" title="3.7.6    bool查询"></a>3.7.6    bool查询</h3><p>bool 查询可以用来合并多个条件查询结果的布尔逻辑，它包含一下操作符：</p><p>must  多个查询条件的完全匹配,相当于  and 。</p><p>must_not  多个查询条件的相反匹配，相当于  not 。</p><p>should  至少有一个查询条件匹配, 相当于  or 。</p><p>这些参数可以分别继承一个查询条件或者一个查询条件的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">        &quot;must&quot;:   &#123; &quot;term&quot;: &#123; &quot;folder&quot;: &quot;inbox&quot; &#125;&#125;,</span><br><span class="line">        &quot;must_not&quot;: &#123; &quot;term&quot;: &#123; &quot;tag&quot;:   &quot;spam&quot; &#125;&#125;,</span><br><span class="line">        &quot;should&quot;: [</span><br><span class="line">            &#123; &quot;term&quot;: &#123; &quot;starred&quot;: true  &#125;&#125;,</span><br><span class="line">            &#123; &quot;term&quot;: &#123; &quot;unread&quot;:  true  &#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-过滤查询"><a href="#3-8-过滤查询" class="headerlink" title="3.8    过滤查询"></a>3.8    过滤查询</h2><p>前面讲过结构化查询，Elasticsearch也支持过滤查询，如term、range、match等。</p><p>示例：查询年龄为20岁的用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;term&quot;: &#123;</span><br><span class="line">                    &quot;age&quot;: 20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225512953.png" alt="image-20200901112744756"></p><p><strong>查询和过滤的对比</strong></p><ul><li>一条过滤语句会询问每个文档的字段值是否包含着特定值。</li><li>查询语句会询问每个文档的字段值与特定值的匹配程度如何。<ul><li>一条查询语句会计算每个文档与查询语句的相关性，会给出一个相关性评分 _score，并且按照相关性对匹配到的文档进行排序。 这种评分方式非常适用于一个没有完全配置结果的全文本搜索。</li></ul></li><li>一个简单的文档列表，快速匹配运算并存入内存是十分方便的， 每个文档仅需要1个字节。这些缓存的过滤结果集与后续请求的结合使用是非常高效的。</li><li>查询语句不仅要查找相匹配的文档，还需要计算每个文档的相关性，所以一般来说查询语句要比过滤语句更耗时，并且查询结果也不可缓存。</li></ul><blockquote><p>建议：<br>做精确匹配搜索时，最好用过滤语句，因为过滤语句可以缓存数据。</p></blockquote><h1 id="4-中文分词"><a href="#4-中文分词" class="headerlink" title="4.    中文分词"></a>4.    中文分词</h1><h2 id="4-1-什么是分词"><a href="#4-1-什么是分词" class="headerlink" title="4.1    什么是分词"></a>4.1    什么是分词</h2><p>分词就是指将一个文本转化成一系列单词的过程，也叫文本分析，在Elasticsearch中称之为Analysis。</p><p>举例：我是中国人 –&gt; 我/是/中国人</p><h2 id="4-2-分词api"><a href="#4-2-分词api" class="headerlink" title="4.2    分词api"></a>4.2    分词api</h2><p><strong>指定分词器进行分词</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_analyze</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;:&quot;standard&quot;,</span><br><span class="line">    &quot;text&quot;:&quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225545753.png" alt="image-20200901113211950"></p><p>在结果中不仅可以看出分词的结果，还返回了该词在文本中的位置。</p><p><strong>指定索引分词</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;_analyze</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">    &quot;field&quot;: &quot;hobby&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;听音乐&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225608997.png" alt="image-20200901113340343"></p><h2 id="4-3-中文分词"><a href="#4-3-中文分词" class="headerlink" title="4.3    中文分词"></a>4.3    中文分词</h2><p>中文分词的难点在于，在汉语中没有明显的词汇分界点，如在英语中，空格可以作为分隔符，如果分隔不正确就会造成歧义。</p><p>如：</p><p>我/爱/炒肉丝</p><p>我/爱/炒/肉丝</p><p>常用中文分词器，IK、jieba、THULAC等，推荐使用IK分词器。</p><blockquote><p>IK Analyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出了3个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IK Analyzer 3.0则发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。</p><p>采用了特有的“正向迭代最细粒度切分算法“，具有80万字/秒的高速处理能力 采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。 优化的词典存储，更小的内存占用。</p></blockquote><p>IK分词器 Elasticsearch插件地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#安装方法：将下载到的elasticsearch-analysis-ik-6.5.4.zip解压到&#x2F;elasticsearch&#x2F;plugins&#x2F;ik目录下即可。</span><br><span class="line"></span><br><span class="line">mkdir es&#x2F;plugins&#x2F;ik</span><br><span class="line">cp elasticsearch-analysis-ik-6.5.4.zip .&#x2F;es&#x2F;plugins&#x2F;ik</span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">unzip elasticsearch-analysis-ik-6.5.4.zip</span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line">.&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_analyze</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tokens&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;我&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 0,</span><br><span class="line">            &quot;end_offset&quot;: 1,</span><br><span class="line">            &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">            &quot;position&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;是&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 1,</span><br><span class="line">            &quot;end_offset&quot;: 2,</span><br><span class="line">            &quot;type&quot;: &quot;CN_CHAR&quot;,</span><br><span class="line">            &quot;position&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;中国人&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 2,</span><br><span class="line">            &quot;end_offset&quot;: 5,</span><br><span class="line">            &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">            &quot;position&quot;: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;中国&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 2,</span><br><span class="line">            &quot;end_offset&quot;: 4,</span><br><span class="line">            &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">            &quot;position&quot;: 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot;: &quot;国人&quot;,</span><br><span class="line">            &quot;start_offset&quot;: 3,</span><br><span class="line">            &quot;end_offset&quot;: 5,</span><br><span class="line">            &quot;type&quot;: &quot;CN_WORD&quot;,</span><br><span class="line">            &quot;position&quot;: 4</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，已经对中文进行了分词。</p><h1 id="5-全文搜索"><a href="#5-全文搜索" class="headerlink" title="5.    全文搜索"></a>5.    全文搜索</h1><p>全文搜索两个最重要的方面是：</p><ul><li>相关性（Relevance） 它是评价查询与其结果间的相关程度，并根据这种相关程度对结果排名的一种能力，这种计算方式可以是 TF/IDF 方法、地理位置邻近、模糊相似，或其他的某些算法。</li><li>分词（Analysis） 它是将文本块转换为有区别的、规范化的 token 的一个过程，目的是为了创建倒排索引以及查询倒排索引。</li></ul><h2 id="5-1-构造数据"><a href="#5-1-构造数据" class="headerlink" title="5.1    构造数据"></a>5.1    构造数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;itcast</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;person&quot;: &#123;</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;age&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;mail&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;hobby&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                    &quot;analyzer&quot;:&quot;ik_max_word&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http:&#x2F;&#x2F;172.16.55.185:9200&#x2F;itcast&#x2F;_bulk</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;: 20,&quot;mail&quot;: &quot;111@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;: 21,&quot;mail&quot;: &quot;222@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、乒乓球、足球、篮球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;: 22,&quot;mail&quot;: &quot;333@qq.com&quot;,&quot;hobby&quot;:&quot;羽毛球、篮球、游泳、听音乐&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;赵六&quot;,&quot;age&quot;: 23,&quot;mail&quot;: &quot;444@qq.com&quot;,&quot;hobby&quot;:&quot;跑步、游泳、篮球&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;itcast&quot;,&quot;_type&quot;:&quot;person&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;孙七&quot;,&quot;age&quot;: 24,&quot;mail&quot;: &quot;555@qq.com&quot;,&quot;hobby&quot;:&quot;听音乐、看电影、羽毛球&quot;&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225632987.png" alt="image-20200901115151680"></p><h2 id="5-2-单词搜索"><a href="#5-2-单词搜索" class="headerlink" title="5.2    单词搜索"></a>5.2    单词搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&quot;音乐&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 9,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;max_score&quot;: 0.6841192,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Uv0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6841192,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;王五&quot;,</span><br><span class="line">                    &quot;age&quot;: 22,</span><br><span class="line">                    &quot;mail&quot;: &quot;333@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;羽毛球、篮球、游泳、听音乐&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;羽毛球、篮球、游泳、听&lt;em&gt;音乐&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;VP0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6841192,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;孙七&quot;,</span><br><span class="line">                    &quot;age&quot;: 24,</span><br><span class="line">                    &quot;mail&quot;: &quot;555@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;听音乐、看电影、羽毛球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;听&lt;em&gt;音乐&lt;&#x2F;em&gt;、看电影、羽毛球&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程说明：</p><ul><li><p>检查字段类型</p><p>爱好 hobby 字段是一个 text 类型（ 指定了IK分词器），这意味着查询字符串本身也应该被分词。</p></li><li><p>分析查询字符串 。</p><p>将查询的字符串 “音乐” 传入IK分词器中，输出的结果是单个项 音乐。因为只有一个单词项，所以 match 查询执行的是单个底层 term 查询。</p></li><li><p>查找匹配文档 。</p><p>用 term 查询在倒排索引中查找 “音乐” 然后获取一组包含该项的文档，本例的结果是文档：3 、5 。</p></li><li><p>为每个文档评分 。</p><p>用 term 查询计算每个文档相关度评分 _score ，这是种将 词频（term frequency，即词 “音乐” 在相关文档的hobby 字段中出现的频率）和 反向文档频率（inverse document frequency，即词 “音乐” 在所有文档的hobby 字段中出现的频率），以及字段的长度（即字段越短相关度越高）相结合的计算方式。</p></li></ul><h2 id="5-3-多词搜索"><a href="#5-3-多词搜索" class="headerlink" title="5.3    多词搜索"></a>5.3    多词搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&quot;音乐 篮球&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 3,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 4,</span><br><span class="line">        &quot;max_score&quot;: 1.3192271,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Uv0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3192271,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;王五&quot;,</span><br><span class="line">                    &quot;age&quot;: 22,</span><br><span class="line">                    &quot;mail&quot;: &quot;333@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;羽毛球、篮球、游泳、听音乐&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;羽毛球、&lt;em&gt;篮球&lt;&#x2F;em&gt;、游泳、听&lt;em&gt;音乐&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;VP0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.81652206,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;孙七&quot;,</span><br><span class="line">                    &quot;age&quot;: 24,</span><br><span class="line">                    &quot;mail&quot;: &quot;555@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;听音乐、看电影、羽毛球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;听&lt;em&gt;音乐&lt;&#x2F;em&gt;、看电影、羽毛球&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Vf0gDWgBR-bSw8-LOdm_&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6987338,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;赵六&quot;,</span><br><span class="line">                    &quot;age&quot;: 23,</span><br><span class="line">                    &quot;mail&quot;: &quot;444@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;跑步、游泳、篮球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;跑步、游泳、&lt;em&gt;篮球&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;itcast&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;person&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;Uf0cDWgBR-bSw8-LpdkZ&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.50270504,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">                    &quot;age&quot;: 21,</span><br><span class="line">                    &quot;mail&quot;: &quot;222@qq.com&quot;,</span><br><span class="line">                    &quot;hobby&quot;: &quot;羽毛球、乒乓球、足球、篮球&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: [</span><br><span class="line">                        &quot;羽毛球、乒乓球、足球、&lt;em&gt;篮球&lt;&#x2F;em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，包含了“音乐”、“篮球”的数据都已经被搜索到了。</p><p>可是，搜索的结果并不符合我们的预期，因为我们想搜索的是既包含“音乐”又包含“篮球”的用户，显然结果返回的“或”的关系。</p><p>在Elasticsearch中，可以指定词之间的逻辑关系，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;音乐 篮球&quot;,</span><br><span class="line">                &quot;operator&quot;:&quot;and&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225658708.png" alt="image-20200901115953661"></p><p>可以看到结果符合预期。</p><p>前面我们测试了“OR” 和 “AND”搜索，这是两个极端，其实在实际场景中，并不会选取这2个极端，更有可能是选取这种，或者说，只需要符合一定的相似度就可以查询到数据，在Elasticsearch中也支持这样的查询，通过minimum_should_match来指定匹配度，如：70%；</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;游泳 羽毛球&quot;,</span><br><span class="line">                &quot;minimum_should_match&quot;:&quot;80%&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#结果：省略显示</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 4, #相似度为80%的情况下，查询到4条数据</span><br><span class="line">    &quot;max_score&quot;: 1.621458,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设置40%进行测试：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;hobby&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;游泳 羽毛球&quot;,</span><br><span class="line">                &quot;minimum_should_match&quot;:&quot;40%&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#结果：</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,  #相似度为40%的情况下，查询到5条数据</span><br><span class="line">    &quot;max_score&quot;: 1.621458,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相似度应该多少合适，需要在实际的需求中进行反复测试，才可得到合理的值。</p><h2 id="5-4-组合搜索"><a href="#5-4-组合搜索" class="headerlink" title="5.4    组合搜索"></a>5.4    组合搜索</h2><p>在搜索时，也可以使用过滤器中讲过的bool组合查询，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:&#123;</span><br><span class="line">                &quot;match&quot;:&#123;</span><br><span class="line">                    &quot;hobby&quot;:&quot;篮球&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;must_not&quot;:&#123;</span><br><span class="line">                &quot;match&quot;:&#123;</span><br><span class="line">                    &quot;hobby&quot;:&quot;音乐&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;游泳&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面搜索的意思是：搜索结果中必须包含篮球，不能包含音乐，如果包含了游泳，那么它的相似度更高。</p><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225726867.png" alt="image-20200901120419828"></p><blockquote><p><strong>评分的计算规则</strong></p><p>bool 查询会为每个文档计算相关度评分 _score ， 再将所有匹配的 must 和 should 语句的分数 _score 求和，最后除以 must 和 should 语句的总数。</p><p>must_not 语句不会影响评分； 它的作用只是将不相关的文档排除。</p></blockquote><p>默认情况下，should中的内容不是必须匹配的，如果查询语句中没有must，那么就会至少匹配其中一个。当然了，也可以通过minimum_should_match参数进行控制，该值可以是数字也可以的百分比。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;游泳&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;篮球&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;:&quot;音乐&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;minimum_should_match&quot;:2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>minimum_should_match为2，意思是should中的三个词，至少要满足2个。</p></blockquote><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/2020090122574985.png" alt="image-20200901120846759"></p><h2 id="5-5-权重"><a href="#5-5-权重" class="headerlink" title="5.5    权重"></a>5.5    权重</h2><p>有些时候，我们可能需要对某些词增加权重来影响该条数据的得分。如下：</p><p>搜索关键字为“游泳篮球”，如果结果中包含了“音乐”权重为10，包含了“跑步”权重为2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;itcast&#x2F;person&#x2F;_search</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                    &quot;hobby&quot;: &#123;</span><br><span class="line">                        &quot;query&quot;: &quot;游泳篮球&quot;,</span><br><span class="line">                        &quot;operator&quot;: &quot;and&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;should&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;: &#123;</span><br><span class="line">                            &quot;query&quot;: &quot;音乐&quot;,</span><br><span class="line">                            &quot;boost&quot;: 10</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;hobby&quot;: &#123;</span><br><span class="line">                            &quot;query&quot;: &quot;跑步&quot;,</span><br><span class="line">                            &quot;boost&quot;: 2</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;hobby&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/20200901225819957.png" alt="image-20200901121150556"></p><p>如果不设置权重的查询结果是这样：</p><p><img src="https://img-blog.csdnimg.cn/20200901225838157.png" alt="image-20200901121202334"></p><h1 id="6-Elasticsearch集群"><a href="#6-Elasticsearch集群" class="headerlink" title="6.    Elasticsearch集群"></a>6.    Elasticsearch集群</h1><h2 id="6-1-集群节点"><a href="#6-1-集群节点" class="headerlink" title="6.1    集群节点"></a>6.1    集群节点</h2><p>ELasticsearch的集群是由多个节点组成的，通过cluster.name设置集群名称，并且用于区分其它的集群，每个节点通过node.name指定节点的名称。</p><p>在Elasticsearch中，节点的类型主要有4种：</p><ul><li>master节点<ul><li>配置文件中node.master属性为true(默认为true)，就有资格被选为master节点。</li><li>master节点用于控制整个集群的操作。比如创建或删除索引，管理其它非master节点等。</li></ul></li><li>data节点<ul><li>配置文件中node.data属性为true(默认为true)，就有资格被设置成data节点。</li><li>data节点主要用于执行数据相关的操作。比如文档的CRUD。</li></ul></li><li>客户端节点<ul><li>配置文件中node.master属性和node.data属性均为false。    </li><li>该节点不能作为master节点，也不能作为data节点。</li><li>可以作为客户端节点，用于响应用户的请求，把请求转发到其他节点</li></ul></li><li>部落节点<ul><li>当一个节点配置tribe.*的时候，它是一个特殊的客户端，它可以连接多个集群，在所有连接的集群上执行搜索和其他操作。</li></ul></li></ul><h2 id="6-2-搭建集群"><a href="#6-2-搭建集群" class="headerlink" title="6.2    搭建集群"></a>6.2    搭建集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#启动3个虚拟机，分别在3台虚拟机上部署安装Elasticsearch</span><br><span class="line">mkdir &#x2F;itcast&#x2F;es-cluster</span><br><span class="line"></span><br><span class="line">#分发到其它机器</span><br><span class="line">scp -r es-cluster elsearch@192.168.40.134:&#x2F;itcast</span><br><span class="line"></span><br><span class="line">#node01的配置：</span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node01</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.40.133&quot;,&quot;192.168.40.134&quot;,&quot;192.168.40.135&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">#node02的配置：</span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node02</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.40.133&quot;,&quot;192.168.40.134&quot;,&quot;192.168.40.135&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">#node03的配置：</span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.40.133&quot;,&quot;192.168.40.134&quot;,&quot;192.168.40.135&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">#分别启动3个节点</span><br><span class="line">.&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901225859990.png" alt="image-20200901171856903"></p><p>创建索引：</p><p><img src="https://img-blog.csdnimg.cn/20200901225915699.png" alt="image-20200901171911178"></p><p><img src="https://img-blog.csdnimg.cn/2020090122593159.png" alt="image-20200901171918014"></p><p>查询集群状态：/_cluster/health</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    cluster_name: &quot;es-itcast-cluster&quot;</span><br><span class="line">    status: &quot;green&quot;</span><br><span class="line">    timed_out: false</span><br><span class="line">    number_of_nodes: 3</span><br><span class="line">    number_of_data_nodes: 3</span><br><span class="line">    active_primary_shards: 5</span><br><span class="line">    active_shards: 10</span><br><span class="line">    relocating_shards: 0</span><br><span class="line">    initializing_shards: 0</span><br><span class="line">    unassigned_shards: 0</span><br><span class="line">    delayed_unassigned_shards: 0</span><br><span class="line">    number_of_pending_tasks: 0</span><br><span class="line">    number_of_in_flight_fetch: 0</span><br><span class="line">    task_max_waiting_in_queue_millis: 0</span><br><span class="line">    active_shards_percent_as_number: 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集群状态的三种颜色：</p><table><thead><tr><th>颜色</th><th>意义</th></tr></thead><tbody><tr><td>green</td><td>所有主要分片和复制分片都可用</td></tr><tr><td>yellow</td><td>所有主要分片可用，但不是所有复制分片都可用</td></tr><tr><td>red</td><td>不是所有的主要分片都可用</td></tr></tbody></table><h2 id="6-3-分片和副本"><a href="#6-3-分片和副本" class="headerlink" title="6.3    分片和副本"></a>6.3    分片和副本</h2><p>为了将数据添加到Elasticsearch，我们需要索引(index)——一个存储关联数据的地方。实际上，索引只是一个用来指向一个或多个分片(shards)的“逻辑命名空间(logical namespace)”.</p><ul><li>一个分片(shard)是一个最小级别“工作单元(worker unit)”,它只是保存了索引中所有数据的一部分。</li><li>我们需要知道是分片就是一个Lucene实例，并且它本身就是一个完整的搜索引擎。应用程序不会和它直接通信。</li><li>分片可以是主分片(primary shard)或者是复制分片(replica shard)。</li><li>索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。</li><li>复制分片只是主分片的一个副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索或者从别的shard取回文档。</li><li>当索引创建完成的时候，主分片的数量就固定了，但是复制分片的数量可以随时调整。</li></ul><h2 id="6-4-故障转移"><a href="#6-4-故障转移" class="headerlink" title="6.4    故障转移"></a>6.4    故障转移</h2><h3 id="6-4-1-将data节点停止"><a href="#6-4-1-将data节点停止" class="headerlink" title="6.4.1    将data节点停止"></a>6.4.1    将data节点停止</h3><p>这里选择将node02停止：</p><p><img src="https://img-blog.csdnimg.cn/20200901225958456.png" alt="image-20200901172356031"></p><p>说明：</p><p>当前集群状态为黄色，表示主节点可用，副本节点不完全可用</p><p>过一段时间观察，发现节点列表中看不到node02，副本节点分配到了node01和node03，集群状态恢复到绿色。</p><p><img src="https://img-blog.csdnimg.cn/20200901230017461.png" alt="image-20200901172603651"></p><p>将node02恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;node02&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901230037943.png" alt="image-20200901172629130"></p><p>可以看到，node02恢复后，重新加入了集群，并且重新分配了节点信息。</p><h3 id="6-4-2-将master节点停止"><a href="#6-4-2-将master节点停止" class="headerlink" title="6.4.2    将master节点停止"></a>6.4.2    将master节点停止</h3><p>接下来，测试将node01停止，也就是将主节点停止。</p><p><img src="https://img-blog.csdnimg.cn/20200901230100366.png" alt="image-20200901172704741"></p><p>从结果中可以看出，集群对master进行了重新选举，选择node03为master。并且集群状态变成黄色。</p><p>等待一段时间后，集群状态从黄色变为了绿色：</p><p><img src="https://img-blog.csdnimg.cn/2020090123011827.png" alt="image-20200901172722131"></p><p>恢复node01节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;node01&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p>重启之后，发现node01可以正常加入到集群中，集群状态依然为绿色：</p><p><img src="https://img-blog.csdnimg.cn/20200901230136418.png" alt="image-20200901172752045"></p><blockquote><p><strong>特别说明：</strong></p><p>如果在配置文件中discovery.zen.minimum_master_nodes设置的不是N/2+1时，会出现脑裂问题，之前宕机的主节点恢复后不会加入到集群。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200901230156217.png" alt="image-20200901172831509"></p><h2 id="6-5-分布式文档"><a href="#6-5-分布式文档" class="headerlink" title="6.5    分布式文档"></a>6.5    分布式文档</h2><h3 id="6-5-1-路由"><a href="#6-5-1-路由" class="headerlink" title="6.5.1    路由"></a>6.5.1    路由</h3><p>首先，来看个问题：</p><p><img src="https://img-blog.csdnimg.cn/20200901230213690.png" alt="image-20200901172928908"></p><p>如图所示：当我们想一个集群保存文档时，文档该存储到哪个节点呢？ 是随机吗？ 是轮询吗？</p><p>实际上，在ELasticsearch中，会采用计算的方式来确定存储到哪个节点，计算公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard &#x3D; hash(routing) % number_of_primary_shards</span><br></pre></td></tr></table></figure><ul><li>outing值是一个任意字符串，它默认是_id但也可以自定义。</li><li>这个routing字符串通过哈希函数生成一个数字，然后除以主切片的数量得到一个余数(remainder)，余数的范围永远是0到number_of_primary_shards - 1，这个数字就是特定文档所在的分片。</li></ul><p>这就是为什么创建了主分片后，不能修改的原因。</p><h3 id="6-5-2-文档的写操作"><a href="#6-5-2-文档的写操作" class="headerlink" title="6.5.2    文档的写操作"></a>6.5.2    文档的写操作</h3><p>新建索引和删除请求都是写(write)操作，它们必须在主分片上成功完成才能复制到相关的复制分片上。</p><p><img src="https://img-blog.csdnimg.cn/20200901230229616.png" alt="image-20200901173347981"></p><p>下面我们罗列在主分片和复制分片上成功新建索引或删除一个文档必要的顺序步骤：</p><ul><li>客户端给 Node 1 发送新建索引或删除请求。</li><li>节点使用文档的 _id 确定文档属于分片 0 。它转发请求到 Node 3 ，分片 0 位于这个节点上。</li><li>Node 3 在主分片上执行请求，如果成功，它转发请求到相应的位于 Node 1 和 Node 2 的复制节点上。当所有的复制节点报告成功， Node 3 报告成功到请求的节点，请求的节点再报告给客户端。</li><li>客户端接收到成功响应的时候，文档的修改已经被应用于主分片和所有的复制分片。你的修改生效了。</li></ul><h3 id="6-5-3-搜索文档（单个文档）"><a href="#6-5-3-搜索文档（单个文档）" class="headerlink" title="6.5.3    搜索文档（单个文档）"></a>6.5.3    搜索文档（单个文档）</h3><p>文档能够从主分片或任意一个复制分片被检索。</p><p><img src="https://img-blog.csdnimg.cn/20200901230249137.png" alt="image-20200901173639946"></p><p>下面我们罗列在主分片或复制分片上检索一个文档必要的顺序步骤：</p><ul><li>客户端给 Node 1 发送get请求。</li><li>节点使用文档的 _id 确定文档属于分片 0 。分片 0 对应的复制分片在三个节点上都有。此时，它转发请求到Node 2 。</li><li>Node 2 返回文档(document)给 Node 1 然后返回给客户端。</li></ul><p>对于读请求，为了平衡负载，请求节点会为每个请求选择不同的分片——它会循环所有分片副本。</p><p>可能的情况是，一个被索引的文档已经存在于主分片上却还没来得及同步到复制分片上。这时复制分片会报告文档未找到，主分片会成功返回文档。一旦索引请求成功返回给用户，文档则在主分片和复制分片都是可用的。</p><h3 id="6-5-4-全文搜索"><a href="#6-5-4-全文搜索" class="headerlink" title="6.5.4    全文搜索"></a>6.5.4    全文搜索</h3><p>对于全文搜索而言，文档可能分散在各个节点上，那么在分布式的情况下，如何搜索文档呢？</p><p>搜索，分为2个阶段，搜索（query）+取回（fetch）。</p><p><strong>搜索（query）</strong></p><p><img src="https://img-blog.csdnimg.cn/2020090123030738.png" alt="image-20200901173951314"></p><p>查询阶段包含以下三步：</p><ul><li>客户端发送一个 search（搜索） 请求给 Node 3 , Node 3 创建了一个长度为 from+size 的空优先级队</li><li>Node 3 转发这个搜索请求到索引中每个分片的原本或副本。每个分片在本地执行这个查询并且结果将结果到一个大小为 from+size 的有序本地优先队列里去。</li><li>每个分片返回document的ID和它优先队列里的所有document的排序值给协调节点 Node 3 。 Node 3 把这些值合并到自己的优先队列里产生全局排序结果。</li></ul><p><strong>取回（fetch）</strong></p><p><img src="https://img-blog.csdnimg.cn/20200901230325470.png" alt="image-20200901174116151"></p><p>分发阶段由以下步骤构成：</p><ul><li>协调节点辨别出哪个document需要取回，并且向相关分片发出 GET 请求。</li><li>每个分片加载document并且根据需要丰富（enrich）它们，然后再将document返回协调节点。</li><li>一旦所有的document都被取回，协调节点会将结果返回给客户端。</li></ul><h1 id="7-Java客户端"><a href="#7-Java客户端" class="headerlink" title="7.    Java客户端"></a>7.    Java客户端</h1><p>在Elasticsearch中，为java提供了2种客户端，一种是REST风格的客户端，另一种是Java API的客户端。</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200901230342573.png" alt="image-20200901174257058"></p><h2 id="7-1-REST客户端"><a href="#7-1-REST客户端" class="headerlink" title="7.1    REST客户端"></a>7.1    REST客户端</h2><p>Elasticsearch提供了2种REST客户端，一种是低级客户端，一种是高级客户端。</p><ul><li>Java Low Level REST Client：官方提供的低级客户端。该客户端通过http来连接Elasticsearch集群。用户在使用该客户端时需要将请求数据手动拼接成Elasticsearch所需JSON格式进行发送，收到响应时同样也需要将返回的JSON数据手动封装成对象。虽然麻烦，不过该客户端兼容所有的Elasticsearch版本。</li><li>Java High Level REST Client：官方提供的高级客户端。该客户端基于低级客户端实现，它提供了很多便捷的API来解决低级客户端需要手动转换数据格式的问题。</li></ul><h2 id="7-2-构造数据"><a href="#7-2-构造数据" class="headerlink" title="7.2    构造数据"></a>7.2    构造数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;haoke&#x2F;house&#x2F;_bulk</span><br><span class="line"></span><br><span class="line">#请求体</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1001&quot;,&quot;title&quot;:&quot;整租 · 南丹大楼 1居室 7500&quot;,&quot;price&quot;:&quot;7500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1002&quot;,&quot;title&quot;:&quot;陆家嘴板块，精装设计一室一厅，可拎包入住诚意租。&quot;,&quot;price&quot;:&quot;8500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1003&quot;,&quot;title&quot;:&quot;整租 · 健安坊 1居室 4050&quot;,&quot;price&quot;:&quot;7500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1004&quot;,&quot;title&quot;:&quot;整租 · 中凯城市之光+视野开阔+景色秀丽+拎包入住&quot;,&quot;price&quot;:&quot;6500&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1005&quot;,&quot;title&quot;:&quot;整租 · 南京西路品质小区 21213三轨交汇 配套齐* 拎包入住&quot;,&quot;price&quot;:&quot;6000&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;haoke&quot;,&quot;_type&quot;:&quot;house&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1006&quot;,&quot;title&quot;:&quot;祥康里 简约风格 *南户型 拎包入住 看房随时&quot;,&quot;price&quot;:&quot;7000&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200901230359287.png" alt="image-20200901174510495"></p><h2 id="7-3-REST低级客户端"><a href="#7-3-REST低级客户端" class="headerlink" title="7.3    REST低级客户端"></a>7.3    REST低级客户端</h2><h3 id="7-3-1-创建工程"><a href="#7-3-1-创建工程" class="headerlink" title="7.3.1    创建工程"></a>7.3.1    创建工程</h3><p>创建工程itcast-elasticsearch：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- java编译插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2-编写测试用例"><a href="#7-3-2-编写测试用例" class="headerlink" title="7.3.2    编写测试用例"></a>7.3.2    编写测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestESREST</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">private</span> RestClient restClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(</span><br><span class="line">            <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">            <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9201</span>, <span class="string">"http"</span>),</span><br><span class="line">            <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9202</span>, <span class="string">"http"</span>));</span><br><span class="line">        restClientBuilder.setFailureListener(<span class="keyword">new</span> RestClient.FailureListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"出错了 -&gt; "</span> + node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.restClient = restClientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        restClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询集群状态</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetInfo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/_cluster/state"</span>);</span><br><span class="line">        request.addParameter(<span class="string">"pretty"</span>,<span class="string">"true"</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"POST"</span>, <span class="string">"/haoke/house"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"id"</span>,<span class="string">"2001"</span>);</span><br><span class="line">        data.put(<span class="string">"title"</span>,<span class="string">"张江高科"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>,<span class="string">"3500"</span>);</span><br><span class="line">        request.setJsonEntity(MAPPER.writeValueAsString(data));</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据id查询数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/haoke/house/G0pfE2gBCKv8opxuRz1y"</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"POST"</span>, <span class="string">"/haoke/house/_search"</span>);</span><br><span class="line">        String searchJson = <span class="string">"&#123;\"query\": &#123;\"match\": &#123;\"title\": \"拎包入住\"&#125;&#125;&#125;"</span>;</span><br><span class="line">        request.setJsonEntity(searchJson);</span><br><span class="line">        request.addParameter(<span class="string">"pretty"</span>,<span class="string">"true"</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从使用中，可以看出，基本和我们使用RESTful api使用几乎是一致的。</p><h2 id="7-4-REST高级客户端"><a href="#7-4-REST高级客户端" class="headerlink" title="7.4    REST高级客户端"></a>7.4    REST高级客户端</h2><h3 id="7-4-1-引入依赖"><a href="#7-4-1-引入依赖" class="headerlink" title="7.4.1    引入依赖"></a>7.4.1    引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-2-编写测试用例"><a href="#7-4-2-编写测试用例" class="headerlink" title="7.4.2    编写测试用例"></a>7.4.2    编写测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRestHighLevel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9201</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"172.16.55.185"</span>, <span class="number">9202</span>, <span class="string">"http"</span>));</span><br><span class="line">        <span class="keyword">this</span>.client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增文档，同步操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"id"</span>, <span class="string">"2002"</span>);</span><br><span class="line">        data.put(<span class="string">"title"</span>, <span class="string">"南京西路 拎包入住 一室一厅"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>, <span class="string">"4500"</span>);</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>).source(data);</span><br><span class="line">        IndexResponse indexResponse = <span class="keyword">this</span>.client.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"id-&gt;"</span> + indexResponse.getId());</span><br><span class="line">        System.out.println(<span class="string">"index-&gt;"</span> + indexResponse.getIndex());</span><br><span class="line">        System.out.println(<span class="string">"type-&gt;"</span> + indexResponse.getType());</span><br><span class="line">        System.out.println(<span class="string">"version-&gt;"</span> + indexResponse.getVersion());</span><br><span class="line">        System.out.println(<span class="string">"result-&gt;"</span> + indexResponse.getResult());</span><br><span class="line">        System.out.println(<span class="string">"shardInfo-&gt;"</span> + indexResponse.getShardInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增文档，异步操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"id"</span>, <span class="string">"2003"</span>);</span><br><span class="line">        data.put(<span class="string">"title"</span>, <span class="string">"南京东路 最新房源 二室一厅"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>, <span class="string">"5500"</span>);</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>).source(data);</span><br><span class="line">        <span class="keyword">this</span>.client.indexAsync(indexRequest, RequestOptions.DEFAULT, <span class="keyword">new</span></span><br><span class="line">                ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(IndexResponse indexResponse)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"id-&gt;"</span> + indexResponse.getId());</span><br><span class="line">                        System.out.println(<span class="string">"index-&gt;"</span> + indexResponse.getIndex());</span><br><span class="line">                        System.out.println(<span class="string">"type-&gt;"</span> + indexResponse.getType());</span><br><span class="line">                        System.out.println(<span class="string">"version-&gt;"</span> + indexResponse.getVersion());</span><br><span class="line">                        System.out.println(<span class="string">"result-&gt;"</span> + indexResponse.getResult());</span><br><span class="line">                        System.out.println(<span class="string">"shardInfo-&gt;"</span> + indexResponse.getShardInfo());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>,<span class="string">"GkpdE2gBCKv8opxuOj12"</span>);</span><br><span class="line">        <span class="comment">// 指定返回的字段</span></span><br><span class="line">        String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"title"</span>, <span class="string">"id"</span>&#125;;</span><br><span class="line">        String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">        FetchSourceContext fetchSourceContext = <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">        getRequest.fetchSourceContext(fetchSourceContext);</span><br><span class="line">        GetResponse response = <span class="keyword">this</span>.client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"数据 -&gt; "</span> + response.getSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否存在</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExists</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>,<span class="string">"GkpdE2gBCKv8opxuOj12"</span>);</span><br><span class="line">        <span class="comment">// 不返回的字段</span></span><br><span class="line">        getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">boolean</span> exists = <span class="keyword">this</span>.client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"exists -&gt; "</span> + exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>, <span class="string">"GkpdE2gBCKv8opxuOj12"</span>);</span><br><span class="line">        DeleteResponse response = <span class="keyword">this</span>.client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());<span class="comment">// OK or NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">"haoke"</span>, <span class="string">"house"</span>, <span class="string">"G0pfE2gBCKv8opxuRz1y"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">"title"</span>, <span class="string">"张江高科2"</span>);</span><br><span class="line">        data.put(<span class="string">"price"</span>, <span class="string">"5000"</span>);</span><br><span class="line">        updateRequest.doc(data);</span><br><span class="line">        UpdateResponse response = <span class="keyword">this</span>.client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"version -&gt; "</span> + response.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试搜索</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"haoke"</span>);</span><br><span class="line">        searchRequest.types(<span class="string">"house"</span>);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">"title"</span>, <span class="string">"拎包入住"</span>));</span><br><span class="line">        sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">        sourceBuilder.size(<span class="number">5</span>);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        SearchResponse search = <span class="keyword">this</span>.client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">"搜索到 "</span> + search.getHits().totalHits + <span class="string">" 条数据."</span>);</span><br><span class="line">        SearchHits hits = search.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Elastic-Stack简介&quot;&gt;&lt;a href=&quot;#1-Elastic-Stack简介&quot; class=&quot;headerlink&quot; title=&quot;1.    Elastic Stack简介&quot;&gt;&lt;/a&gt;1.    Elastic Stack简介&lt;/h1&gt;&lt;p&gt;如果你没有听说过Elastic Stack，那你一定听说过ELK，实际上ELK是三款软件的简称，分别是Elasticsearch、Logstash、Kibana组成，在发展的过程中，又有新成员Beats的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="ElasticStack" scheme="https://wgy1993.gitee.io/tags/ElasticStack/"/>
    
  </entry>
  
  <entry>
    <title>Lucene(二)</title>
    <link href="https://wgy1993.gitee.io/archives/6c0148b0.html"/>
    <id>https://wgy1993.gitee.io/archives/6c0148b0.html</id>
    <published>2020-08-31T04:02:36.000Z</published>
    <updated>2020-08-31T04:03:45.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Lucene高级搜索"><a href="#1-Lucene高级搜索" class="headerlink" title="1.    Lucene高级搜索"></a>1.    Lucene高级搜索</h1><h2 id="1-1-文本搜索"><a href="#1-1-文本搜索" class="headerlink" title="1.1    文本搜索"></a>1.1    文本搜索</h2><p>QueryParser支持默认搜索域, 第一个参数为默认搜索域。</p><p>如果在执行parse方法的时候，查询语法中包含域名则从指定的这个域名中搜索， 如果只有查询的关键字，则从默认搜索域中搜索结果。</p><a id="more"></a><p><strong>需求描述 :</strong> 查询名称中包含华为手机关键字的结果。</p><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建Query搜索对象</span></span><br><span class="line">    <span class="comment">//1.1 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//1.2 创建搜索解析器</span></span><br><span class="line">    <span class="comment">//第一个参数: 默认查询域, 如果查询的关键字中带搜索的域名, 则从指定域中查询, 如果不带域名则从, 默认搜索域中查询</span></span><br><span class="line">    <span class="comment">//queryParser.parse("brandName:华为手机");</span></span><br><span class="line">    <span class="comment">//第二个参数: 使用的分词器</span></span><br><span class="line">    QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">    <span class="comment">//1.3 创建搜索对象</span></span><br><span class="line">    <span class="comment">//华 OR  为   手   机</span></span><br><span class="line">    Query query = queryParser.parse(<span class="string">"华为手机"</span>);</span><br><span class="line">    <span class="comment">//2. 创建Directory流对象,声明索引库位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//3. 创建索引读取对象IndexReader</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//4. 创建索引搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//5. 使用索引搜索对象，执行搜索，返回结果集TopDocs</span></span><br><span class="line">    <span class="comment">// 第一个参数：搜索对象，第二个参数：返回的数据条数，指定查询结果最顶部的n条数据返回</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line">    <span class="comment">//5.1 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">    <span class="comment">//6. 解析结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-数值范围搜索"><a href="#1-2-数值范围搜索" class="headerlink" title="1.2    数值范围搜索"></a>1.2    数值范围搜索</h2><p><strong>需求描述 :</strong> 查询价格大于等于100, 小于等于1000的商品<br>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数值范围查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建查询对象,</span></span><br><span class="line">    Query query = IntPoint.newRangeQuery(<span class="string">"price"</span>, <span class="number">100</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//7. 搜索, 并返回结果</span></span><br><span class="line">    <span class="comment">//第二个参数: 是返回多少条数据用于展示, 分页使用</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. 遍历结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-组合搜索"><a href="#1-3-组合搜索" class="headerlink" title="1.3    组合搜索"></a>1.3    组合搜索</h2><p><strong>需求描述 :</strong> 查询价格大于等于100, 小于等于1000, 并且名称中不包含华为手机关键字的商品</p><p><code>BooleanClause.Occur.MUST</code> 必须 相当于and, 并且</p><p><code>BooleanClause.Occur.MUST_NOT</code> 不必须 相当于not, 非</p><p><code>BooleanClause.Occur.SHOULD</code> 应该 相当于or, 或者</p><p><strong>注意 :</strong> 如果逻辑条件中, 只有MUST_NOT, 或者多个逻辑条件都是MUST_NOT, 无效, 查询不出任何数据.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBooleanQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建查询对象,</span></span><br><span class="line">    Query query1 = IntPoint.newRangeQuery(<span class="string">"price"</span>, <span class="number">100</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">    <span class="comment">//3. 设置搜索关键词</span></span><br><span class="line">    <span class="comment">//华 OR  为   手   机</span></span><br><span class="line">    Query query2 = queryParser.parse(<span class="string">"华为手机"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建布尔查询对象(组合查询对象)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  BooleanClause.Occur.MUST 必须相当于and, 也就是并且的关系</span></span><br><span class="line"><span class="comment">     *  BooleanClause.Occur.SHOULD 应该相当于or, 也就是或者的关系</span></span><br><span class="line"><span class="comment">     *  BooleanClause.Occur.MUST_NOT 不必须, 相当于not, 非</span></span><br><span class="line"><span class="comment">     *  注意: 如果查询条件都是MUST_NOT, 或者只有一个查询条件, 然后这一个查询条件是MUST_NOT则</span></span><br><span class="line"><span class="comment">     *  查询不出任何数据.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BooleanQuery.Builder query = <span class="keyword">new</span> BooleanQuery.Builder();</span><br><span class="line">    query.add(query1, BooleanClause.Occur.MUST);</span><br><span class="line">    query.add(query2, BooleanClause.Occur.MUST);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//7. 搜索, 并返回结果</span></span><br><span class="line">    <span class="comment">//第二个参数: 是返回多少条数据用于展示, 分页使用</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query.build(), <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. 遍历结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-搜索案例"><a href="#2-搜索案例" class="headerlink" title="2.    搜索案例"></a>2.    搜索案例</h1><p>成品效果:</p><p><img src="https://img-blog.csdnimg.cn/20200831115607469.png" alt="image-20200831080552651"></p><h2 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1    引入依赖"></a>2.1    引入依赖</h2><p>在项目的pom.xml中引入依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- IK中文分词器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入thymeleaf --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Json转换工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-项目加入页面和资源"><a href="#2-2-项目加入页面和资源" class="headerlink" title="2.2    项目加入页面和资源"></a>2.2    项目加入页面和资源</h2><p>将Lucene课程资料\资源\页面和静态资源, 下的页面和静态资源拷贝到项目的resources目录下</p><p><img src="https://img-blog.csdnimg.cn/20200831115623539.png" alt="image-20200831080617902"></p><h2 id="2-3-创建包和启动类"><a href="#2-3-创建包和启动类" class="headerlink" title="2.3    创建包和启动类"></a>2.3    创建包和启动类</h2><p>创建目录, 并加入启动类:</p><p><img src="https://img-blog.csdnimg.cn/20200831115639263.png" alt="image-20200831080936303"></p><p>启动类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-配置文件"><a href="#2-4-配置文件" class="headerlink" title="2.4    配置文件"></a>2.4    配置文件</h2><p>项目的resources目录下创建application.yml内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h2 id="2-5-业务代码"><a href="#2-5-业务代码" class="headerlink" title="2.5    业务代码"></a>2.5    业务代码</h2><h3 id="2-5-1-封装pojo"><a href="#2-5-1-封装pojo" class="headerlink" title="2.5.1    封装pojo"></a>2.5.1    封装pojo</h3><p>pojo包下加入ResultModel实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分页实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商品列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Sku&gt; skuList;</span><br><span class="line">    <span class="comment">// 商品总数</span></span><br><span class="line">    <span class="keyword">private</span> Long recordCount;</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> Long pageCount;</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> curPage;</span><br><span class="line">    </span><br><span class="line">    .....get和set方法.......略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-controller代码"><a href="#2-5-2-controller代码" class="headerlink" title="2.5.2    controller代码"></a>2.5.2    controller代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryString 查询的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price       查询价格范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page        当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(String queryString, String price, Integer page, Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理当前页</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(page)) &#123;</span><br><span class="line">            page = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (page &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            page = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用service查询</span></span><br><span class="line">        ResultModel resultModel = searchService.query(queryString, price, page);</span><br><span class="line">        model.addAttribute(<span class="string">"result"</span>, resultModel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询条件回显到页面</span></span><br><span class="line">        model.addAttribute(<span class="string">"queryString"</span>, queryString);</span><br><span class="line">        model.addAttribute(<span class="string">"price"</span>, price);</span><br><span class="line">        model.addAttribute(<span class="string">"page"</span>, page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"search"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-service代码"><a href="#2-5-3-service代码" class="headerlink" title="2.5.3    service代码"></a>2.5.3    service代码</h3><p>service接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel <span class="title">query</span><span class="params">(String queryString, String price, Integer page)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServiceImpl</span> <span class="keyword">implements</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每页查询20条数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Integer PAGE_SIZE = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel <span class="title">query</span><span class="params">(String queryString, String price, Integer page)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 需要使用的对象封装</span></span><br><span class="line">        ResultModel resultModel = <span class="keyword">new</span> ResultModel();</span><br><span class="line">        <span class="comment">//从第几条开始查询</span></span><br><span class="line">        <span class="keyword">int</span> start = (page - <span class="number">1</span>) * PAGE_SIZE;</span><br><span class="line">        <span class="comment">//查询到多少条为止</span></span><br><span class="line">        Integer end = page * PAGE_SIZE;</span><br><span class="line">        <span class="comment">//创建分词器</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</span><br><span class="line">        <span class="comment">//创建组合查询对象</span></span><br><span class="line">        BooleanQuery.Builder builder = <span class="keyword">new</span> BooleanQuery.Builder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 根据查询关键字封装查询对象</span></span><br><span class="line">        QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">        Query query1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断传入的查询关键字是否为空, 如果为空查询所有, 如果不为空, 则根据关键字查询</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(queryString)) &#123;</span><br><span class="line">            query1 = queryParser.parse(<span class="string">"*:*"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            query1 = queryParser.parse(queryString);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将关键字查询对象, 封装到组合查询对象中</span></span><br><span class="line">        builder.add(query1, BooleanClause.Occur.MUST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 根据价格范围封装查询对象</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(price)) &#123;</span><br><span class="line">            String[] split = price.split(<span class="string">"-"</span>);</span><br><span class="line">            Query query2 = IntPoint.newRangeQuery(<span class="string">"price"</span>, Integer.parseInt(split[<span class="number">0</span>]), Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">            <span class="comment">//将价格查询对象, 封装到组合查询对象中</span></span><br><span class="line">            builder.add(query2, BooleanClause.Occur.MUST);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用MMapDirectory消耗的查询时间</span></span><br><span class="line"><span class="comment">         * ====消耗时间为=========324ms</span></span><br><span class="line"><span class="comment">         * ====消耗时间为=========18ms</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">        <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">        IndexReader reader = DirectoryReader.open(directory);</span><br><span class="line">        <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">        IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">        <span class="comment">//7. 搜索并获取搜索结果</span></span><br><span class="line">        TopDocs topDocs = indexSearcher.search(builder.build(), end);</span><br><span class="line">        <span class="comment">//8. 获取查询到的总条数</span></span><br><span class="line">        resultModel.setRecordCount(topDocs.totalHits);</span><br><span class="line">        <span class="comment">//9. 获取查询到的结果集</span></span><br><span class="line">        ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"====消耗时间为========="</span> + (endTime - startTime) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//10. 遍历结果集封装返回的数据</span></span><br><span class="line">        List&lt;Sku&gt; skuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">                <span class="comment">//通过查询到的文档编号, 找到对应的文档对象</span></span><br><span class="line">                Document document = reader.document(scoreDocs[i].doc);</span><br><span class="line">                <span class="comment">//封装Sku对象</span></span><br><span class="line">                Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">                sku.setId(document.get(<span class="string">"id"</span>));</span><br><span class="line">                sku.setPrice(Integer.parseInt(document.get(<span class="string">"price"</span>)));</span><br><span class="line">                sku.setImage(document.get(<span class="string">"image"</span>));</span><br><span class="line">                sku.setName(document.get(<span class="string">"name"</span>));</span><br><span class="line">                sku.setBrandName(document.get(<span class="string">"brandName"</span>));</span><br><span class="line">                sku.setCategoryName(document.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">                skuList.add(sku);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装查询到的结果集</span></span><br><span class="line">        resultModel.setSkuList(skuList);</span><br><span class="line">        <span class="comment">//封装当前页</span></span><br><span class="line">        resultModel.setCurPage(page);</span><br><span class="line">        <span class="comment">//总页数</span></span><br><span class="line">        Long pageCount = topDocs.totalHits % PAGE_SIZE &gt; <span class="number">0</span> ? (topDocs.totalHits / PAGE_SIZE) + <span class="number">1</span> : topDocs.totalHits / PAGE_SIZE;</span><br><span class="line">        resultModel.setPageCount(pageCount);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Lucene-底层储存结构-高级"><a href="#3-Lucene-底层储存结构-高级" class="headerlink" title="3.    Lucene 底层储存结构(高级)"></a>3.    Lucene 底层储存结构(高级)</h1><h2 id="3-1-详细理解lucene存储结构"><a href="#3-1-详细理解lucene存储结构" class="headerlink" title="3.1    详细理解lucene存储结构"></a>3.1    详细理解lucene存储结构</h2><p><strong>存储结构 :</strong></p><p><img src="https://img-blog.csdnimg.cn/20200831115646464.png" alt="image-20200831101308400"></p><p><strong>索引 (Index) ：</strong></p><ul><li>一个目录一个索引，在 Lucene中一个索引是放在一个文件夹中的。</li></ul><p><strong>段(Segment) :</strong></p><ul><li>一个索引 (逻辑索引)由多个段组成, 多个段可以合并, 以减少读取内容时候的磁盘IO.</li><li>Lucene 中的数据写入会先写内存的一个Buffer，当Buffer内数据到一定量后会被flush成一个Segment，每个Segment有自己独立的索引，可独立被查询，但数据永远不能被更改。这种模式避免了随机写，数据写入都是批量追加，能达到很高的吞吐量。Segment中写入的文档不可被修改，但可被删除，删除的方式也不是在文件内部原地更改，而是会由另外一个文件保存需要被删除的文档的DocID，保证数据文件不可被修改。Index的查询需要对多个Segment进行查询并对结果进行合并，还需要处理被删除的文档，为了对查询进行优化，Lucene会有策略对多个Segment进行合并。</li></ul><p><strong>文档(Document) ：</strong></p><ul><li>文档是我们建索引的基本单位，不同的文档是保存在不同的段中的，一个段可以包含多篇文档。</li><li>新添加的文档是单独保存在一个新生成的段中，随着段的合并，不同的文档合并到同一个段中。</li></ul><p><strong>域(Field) ：</strong></p><ul><li>一篇文档包含不同类型的信息，可以分开索引，比如标题，时间，正文，描述等，都可以保存在不同的域里。</li><li>不同域的索引方式可以不同。</li></ul><p><strong>词(Term) ：</strong></p><ul><li>词是索引的最小单位，是经过词法分析和语言处理后的字符串。</li></ul><h2 id="3-2-索引库物理文件"><a href="#3-2-索引库物理文件" class="headerlink" title="3.2    索引库物理文件"></a>3.2    索引库物理文件</h2><p><img src="https://img-blog.csdnimg.cn/20200831115653959.png" alt="image-20200831101323814"></p><h2 id="3-3-索引库文件扩展名对照表"><a href="#3-3-索引库文件扩展名对照表" class="headerlink" title="3.3    索引库文件扩展名对照表"></a>3.3    索引库文件扩展名对照表</h2><table><thead><tr><th>名称</th><th>文件扩展名</th><th>简短描述</th></tr></thead><tbody><tr><td>Segments File</td><td>segments_N</td><td>保存了一个提交点（a commit point）的信息</td></tr><tr><td>Lock File</td><td>write.lock</td><td>防止多个IndexWriter同时写到一份索引文件中</td></tr><tr><td>Segment Info</td><td>.si</td><td>保存了索引段的元数据信息</td></tr><tr><td>Compound File</td><td>.cfs，.cfe</td><td>一个可选的虚拟文件，把所有索引信息都存储到复合索引文件中</td></tr><tr><td>Fields</td><td>.fnm</td><td>保存fields的相关信息</td></tr><tr><td>Field Index</td><td>.fdx</td><td>保存指向field data的指针</td></tr><tr><td>Field Data</td><td>.fdt</td><td>文档存储的字段的值</td></tr><tr><td>Term Dictionary</td><td>.tim</td><td>term词典，存储term信息</td></tr><tr><td>Term Index</td><td>.tip</td><td>到Term Dictionary的索引</td></tr><tr><td>Frequencies</td><td>.doc</td><td>由包含每个term以及频率的docs列表组成</td></tr><tr><td>Positions</td><td>.pos</td><td>存储出现在索引中的term的位置信息</td></tr><tr><td>Payloads</td><td>.pay</td><td>存储额外的per-position元数据信息，例如字符偏移和用户payloads</td></tr><tr><td>Norms</td><td>.nvd，.nvm</td><td>.nvm文件保存索引字段加权因子的元数据，.nvd文件保存索引字段加权数据</td></tr><tr><td>Per-Document Values</td><td>.dvd，.dvm</td><td>.dvm文件保存索引文档评分因子的元数据，.dvd文件保存索引文档评分数据</td></tr><tr><td>Term Vector Index</td><td>.tvx</td><td>将偏移存储到文档数据文件中</td></tr><tr><td>Term Vector Documents</td><td>.tvd</td><td>包含有term vectors的每个文档信息</td></tr><tr><td>Term Vector Fields</td><td>.tvf</td><td>字段级别有关term vectors的信息</td></tr><tr><td>Live Documents</td><td>.liv</td><td>哪些是有效文件的信息</td></tr><tr><td>Point values</td><td>.dii，.dim</td><td>保留索引点，如果有的话</td></tr></tbody></table><h2 id="3-4-词典的构建"><a href="#3-4-词典的构建" class="headerlink" title="3.4    词典的构建"></a>3.4    词典的构建</h2><p><strong>为何Lucene大数据量搜索快, 要分两部分来看 :</strong></p><ul><li>一点是因为底层的倒排索引存储结构 .</li><li>另一点就是查询关键字的时候速度快 , 因为词典的索引结构.</li></ul><h3 id="3-4-1-词典数据结构对比"><a href="#3-4-1-词典数据结构对比" class="headerlink" title="3.4.1    词典数据结构对比"></a>3.4.1    词典数据结构对比</h3><p>倒排索引中的词典位于内存，其结构尤为重要，有很多种词典结构，各有各的优缺点，最简单如排序数组，通过二分查找来检索数据，更快的有哈希表，磁盘查找有B树、B+树，但一个能支持TB级数据的倒排索引结构需要在时间和空间上有个平衡，下图列了一些常见词典的优缺点：</p><table><thead><tr><th>数据结构</th><th>优缺点</th></tr></thead><tbody><tr><td>跳跃表</td><td>占用内存小，且可调，但是对模糊查询支持不好</td></tr><tr><td>排序列表Array/List</td><td>使用二分法查找，不平衡</td></tr><tr><td>字典树</td><td>查询效率跟字符串长度有关，但只适合英文词典</td></tr><tr><td>哈希表</td><td>性能高，内存消耗大，几乎是原始数据的三倍</td></tr><tr><td>双数组字典树</td><td>适合做中文词典，内存占用小，很多分词工具均采用此种算法</td></tr><tr><td>Finite State Transducers (FST)</td><td>一种有限状态转移机，Lucene 4有开源实现，并大量使用</td></tr><tr><td>B树</td><td>磁盘索引，更新方便，但检索速度慢，多用于数据库</td></tr></tbody></table><p>Lucene3.0之前使用的也是跳跃表结构，后换成了FST，但跳跃表在Lucene其他地方还有应用如倒排表合并和文档号索引。</p><h3 id="3-4-2-跳跃表原理"><a href="#3-4-2-跳跃表原理" class="headerlink" title="3.4.2    跳跃表原理"></a>3.4.2    跳跃表原理</h3><p>Lucene3.0版本之前使用的跳跃表结构后换成了FST结构</p><p><strong>优点 ：</strong>结构简单、跳跃间隔、级数可控，Lucene3.0之前使用的也是跳跃表结构，，但跳跃表在Lucene其他地方还有应用如倒排表合并和文档号索引。 缺点 ：模糊查询支持不好.</p><p><strong>单链表 :</strong></p><p>单链表中查询一个元素即使是有序的，我们也不能通过二分查找法的方式缩减查询时间。</p><p><strong>通俗的讲也就是按照链表顺序一个一个找.</strong></p><p>举例: 查找85这个节点, 需要查找7次.</p><p><img src="https://img-blog.csdnimg.cn/20200831115700748.png" alt="image-20200831101346895"></p><p><strong>跳跃表 :</strong></p><p>举例: 查询85这个节点, 一共需要查询6次.</p><ul><li>在level3层, 查询3次, 查询到1结尾, 退回到37节点</li><li>在level2层, 从37节点开始查询, 查询2次, 查询到1结尾, 退回到71节点</li><li>在level1层, 从71节点开始查询, 查询1次, 查询到85节点.</li></ul><p><img src="https://img-blog.csdnimg.cn/2020083111570749.png" alt="image-20200831101353607"></p><h3 id="3-4-3-FST原理简析"><a href="#3-4-3-FST原理简析" class="headerlink" title="3.4.3    FST原理简析"></a>3.4.3    FST原理简析</h3><p>Lucene现在采用的数据结构为FST，它的特点就是： </p><ul><li>优点：内存占用率低，压缩率一般在 3 倍~20倍之间、模糊查询支持好、查询快 </li><li>缺点：结构复杂、输入要求有序、更新不易</li></ul><p>已知FST要求输入有序，所以Lucene会将解析出来的文档单词预先排序，然后构建FST，我们假设输入为abd,abe,acf,acg，那么整个构建过程如下：</p><p><img src="https://img-blog.csdnimg.cn/20200831115713438.png" alt="image-20200831101402124"></p><p><img src="https://img-blog.csdnimg.cn/2020083111572071.png" alt="image-20200831101408735"></p><p>输入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String inputValues[] &#x3D; &#123;&quot;hei&quot;,&quot;ma&quot;,&quot;cheng&quot;,&quot;xu&quot;,&quot;yuan&quot;,&quot;good&quot;&#125;;</span><br><span class="line">long outputValues[] &#x3D; &#123;0,1,2,3,4,5&#125;;</span><br></pre></td></tr></table></figure><p>输入的数据如下 :</p><p>hei/0 ma/1 cheng/2 xu/3 yuan/4 good/5</p><p>存储结果如下:</p><p><img src="https://img-blog.csdnimg.cn/2020083111572678.png" alt="image-20200831101506805"></p><h1 id="4-Lucene-优化-高级"><a href="#4-Lucene-优化-高级" class="headerlink" title="4.    Lucene 优化(高级)"></a>4.    Lucene 优化(高级)</h1><h2 id="4-1-解决大量磁盘IO"><a href="#4-1-解决大量磁盘IO" class="headerlink" title="4.1    解决大量磁盘IO"></a>4.1    解决大量磁盘IO</h2><ul><li><p>config.setMaxBufferedDocs(100000);  控制写入一个新的segment前内存中保存的document的数目，设置较大的数目可以加快建索引速度。</p><p><strong>数值越大索引速度越快, 但是会消耗更多的内存</strong></p></li><li><p>indexWriter.forceMerge( 文档数量); 设置N个文档合并为一个段</p><p><strong>数值越大索引速度越快, 搜索速度越慢; 值越小索引速度越慢, 搜索速度越快</strong></p><p>更高的值意味着索引期间更低的段合并开销，但同时也意味着更慢的搜索速度，因为此时的索引通常会包含更多的段。如果该值设置的过高，能获得更高的索引性能。但若在最后进行索引优化，那么较低的值会带来更快的搜索速度，因为在索引操作期间程序会利用并发机制完成段合并操作。故建议对程序分别进行高低多种值的测试，利用计算机的实际性能来告诉你最优值。</p></li></ul><p>创建索引代码优化测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试创建索引速度优化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexTest2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 采集数据</span></span><br><span class="line">    SkuDao skuDao = <span class="keyword">new</span> SkuDaoImpl();</span><br><span class="line">    List&lt;Sku&gt; skuList = skuDao.querySkuList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文档集合</span></span><br><span class="line">    List&lt;Document&gt; docList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">        <span class="comment">//2. 创建文档对象</span></span><br><span class="line">        Document document = <span class="keyword">new</span> Document();</span><br><span class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>, sku.getId(), Field.Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, sku.getName(), Field.Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> IntPoint(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line">        document.add(<span class="keyword">new</span> StoredField(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line">        document.add(<span class="keyword">new</span> StoredField(<span class="string">"image"</span>, sku.getImage()));</span><br><span class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"categoryName"</span>, sku.getCategoryName(), Field.Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> StringField(<span class="string">"brandName"</span>, sku.getBrandName(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文档对象放入到文档集合中</span></span><br><span class="line">        docList.add(document);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有优化 小100万条数据, 创建索引需要7725ms</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//设置在内存中多少个文档向磁盘中批量写入一次数据</span></span><br><span class="line">    <span class="comment">//如果设置的数字过大, 会过多消耗内存, 但是会提升写入磁盘的速度</span></span><br><span class="line">    <span class="comment">//config.setMaxBufferedDocs(500000);</span></span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line">    <span class="comment">//设置多少给文档合并成一个段文件,数值越大索引速度越快, 搜索速度越慢;  值越小索引速度越慢, 搜索速度越快</span></span><br><span class="line">    <span class="comment">//indexWriter.forceMerge(1000000);</span></span><br><span class="line">    <span class="comment">//7. 写入文档到索引库</span></span><br><span class="line">    <span class="keyword">for</span> (Document doc : docList) &#123;</span><br><span class="line">        indexWriter.addDocument(doc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"=====消耗的时间为:=========="</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-选择合适的分词器"><a href="#4-2-选择合适的分词器" class="headerlink" title="4.2    选择合适的分词器"></a>4.2    选择合适的分词器</h2><p>不同的分词器分词效果不同, 所用时间也不同</p><p><strong>虽然StandardAnalyzer切分词速度快过IKAnalyzer, 但是由于StandardAnalyzer对中文支持不好, 所以为了追求好的分词效果, 为了追求查询时的准确率, 也只能用IKAnalyzer分词器, IKAnalyzer支持停用词典和扩展词典, 可以通过调整两个词典中的内容, 来提升查询匹配的精度</strong></p><h2 id="4-3-选择合适的位置存放索引库"><a href="#4-3-选择合适的位置存放索引库" class="headerlink" title="4.3    选择合适的位置存放索引库"></a>4.3    选择合适的位置存放索引库</h2><table><thead><tr><th>类</th><th>写操作</th><th>读操作</th><th>特点</th></tr></thead><tbody><tr><td>SimpleFSDirectory</td><td>java.io.RandomAccessFile</td><td>java.io.RandomAccessFile</td><td>简单实现，并发能力差</td></tr><tr><td>NIOFSDirectory</td><td>java.nio.FileChannel</td><td>FSDirectory.FSIndexOutput</td><td>并发能力强,windows平台下有重大bug</td></tr><tr><td>MMapDirectory</td><td>内存映射</td><td>FSDirectory.FSIndexOutput</td><td>读取操作基于内存</td></tr></tbody></table><p>测试代码修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Directory directory = MMapDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br></pre></td></tr></table></figure><h2 id="4-4-搜索api的选择"><a href="#4-4-搜索api的选择" class="headerlink" title="4.4    搜索api的选择"></a>4.4    搜索api的选择</h2><p>1、尽量使用TermQuery代替QueryParser</p><p>2、尽量避免大范围的日期查询</p><h1 id="5-Lucene-相关度排序-高级"><a href="#5-Lucene-相关度排序-高级" class="headerlink" title="5.    Lucene 相关度排序(高级)"></a>5.    Lucene 相关度排序(高级)</h1><h2 id="5-1-什么是相关度排序"><a href="#5-1-什么是相关度排序" class="headerlink" title="5.1    什么是相关度排序"></a>5.1    什么是相关度排序</h2><p>Lucene对查询关键字和索引文档的相关度进行打分，得分高的就排在前边。</p><h3 id="5-1-1-如何打分"><a href="#5-1-1-如何打分" class="headerlink" title="5.1.1    如何打分"></a>5.1.1    如何打分</h3><p>Lucene是在用户进行检索时实时根据搜索的关键字计算出来的，分两步：</p><p>1、计算出词（Term）的权重</p><p>2、根据词的权重值，计算文档相关度得分。</p><h3 id="5-1-2-什么是词的权重"><a href="#5-1-2-什么是词的权重" class="headerlink" title="5.1.2    什么是词的权重"></a>5.1.2    什么是词的权重</h3><p>明确索引的最小单位是一个Term(索引词典中的一个词)，搜索也是要从Term中搜索，再根据Term找到文档，Term对文档的重要性称为权重，影响Term权重有两个因素：</p><ul><li><p>Term Frequency (tf) ： 指此Term在此文档中出现了多少次。tf 越大说明越重要。 词(Term)在文档中出现的次数越多，说明此词(Term)对该文档越重要，如“Lucene”这个词，在文档中出现的次数很多，说明该文档主要就是讲Lucene技术的。</p></li><li><p>Document Frequency (df) ： 指有多少文档包含次Term。df 越大说明越不重要。 比如，在一篇英语文档中，this出现的次数更多，就说明越重要吗？不是的，有越多的文档包含此词(Term), 说明此词(Term)太普通，不足以区分这些文档，因而重要性越低。</p></li></ul><h3 id="5-1-3-怎样影响相关度排序"><a href="#5-1-3-怎样影响相关度排序" class="headerlink" title="5.1.3    怎样影响相关度排序"></a>5.1.3    怎样影响相关度排序</h3><p>boost是一个加权值（默认加权值为1.0f），它可以影响权重的计算。</p><ul><li>在索引时对某个文档中的 field设置加权值高，在搜索时匹配到这个文档就可能排在前边。</li><li>在搜索时对某个域进行加权，在进行组合域查询时，匹配到加权值高的域最后计算的相关度得分就高。</li></ul><p>设置boost是给域（field）或者Document设置的</p><h2 id="5-2-人为影响相关度排序"><a href="#5-2-人为影响相关度排序" class="headerlink" title="5.2    人为影响相关度排序"></a>5.2    人为影响相关度排序</h2><p>查询的时候, 通过设置查询域的权重, 可以人为影响查询结果.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试相关度排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexSearch2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">    <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求: 不管是名称域还是品牌域或者是分类域有关于手机关键字的查询出来</span></span><br><span class="line">    <span class="comment">//查询的多个域名</span></span><br><span class="line">    String[] fields = &#123;<span class="string">"name"</span>, <span class="string">"categoryName"</span>, <span class="string">"brandName"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置影响排序的权重, 这里设置域的权重</span></span><br><span class="line">    Map&lt;String, Float&gt; boots = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    boots.put(<span class="string">"categoryName"</span>, <span class="number">10000000000f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从多个域查询对象</span></span><br><span class="line">    MultiFieldQueryParser multiFieldQueryParser = <span class="keyword">new</span> MultiFieldQueryParser(fields, analyzer, boots);</span><br><span class="line">    <span class="comment">//设置查询的关键词</span></span><br><span class="line">    Query query = multiFieldQueryParser.parse(<span class="string">"手机"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 指定索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建输入流对象</span></span><br><span class="line">    IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">    <span class="comment">//6. 创建搜索对象</span></span><br><span class="line">    IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">    <span class="comment">//7. 搜索, 并返回结果</span></span><br><span class="line">    <span class="comment">//第二个参数: 是返回多少条数据用于展示, 分页使用</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">    System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 获取结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. 遍历结果集</span></span><br><span class="line">    <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">            <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">            <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">            Document doc = indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">            <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">            System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">            System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 关闭流</span></span><br><span class="line">    indexReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-Lucene-使用注意事项-高级"><a href="#6-Lucene-使用注意事项-高级" class="headerlink" title="6.    Lucene 使用注意事项(高级)"></a>6.    Lucene 使用注意事项(高级)</h1><ul><li>关键词区分大小写 OR AND TO等关键词是区分大小写的，lucene只认大写的，小写的当做普通单词。</li><li>读写互斥性 同一时刻只能有一个对索引的写操作，在写的同时可以进行搜索</li><li>文件锁 在写索引的过程中强行退出将在tmp目录留下一个lock文件，使以后的写操作无法进行，可以将其手工删除</li><li>时间格式 lucene只支持一种时间格式yyMMddHHmmss，所以你传一个yy-MM-dd HH:mm:ss的时间给lucene它是不会当作时间来处理的</li><li>设置 boost 有些时候在搜索时某个字段的权重需要大一些，例如你可能认为标题中出现关键词的文章比正文中出现关键词的文章更有价值，你可以把标题的boost设置的更大，那么搜索结果会优先显示标题中出现关键词的文章.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Lucene高级搜索&quot;&gt;&lt;a href=&quot;#1-Lucene高级搜索&quot; class=&quot;headerlink&quot; title=&quot;1.    Lucene高级搜索&quot;&gt;&lt;/a&gt;1.    Lucene高级搜索&lt;/h1&gt;&lt;h2 id=&quot;1-1-文本搜索&quot;&gt;&lt;a href=&quot;#1-1-文本搜索&quot; class=&quot;headerlink&quot; title=&quot;1.1    文本搜索&quot;&gt;&lt;/a&gt;1.1    文本搜索&lt;/h2&gt;&lt;p&gt;QueryParser支持默认搜索域, 第一个参数为默认搜索域。&lt;/p&gt;
&lt;p&gt;如果在执行parse方法的时候，查询语法中包含域名则从指定的这个域名中搜索， 如果只有查询的关键字，则从默认搜索域中搜索结果。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="Lucene" scheme="https://wgy1993.gitee.io/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>Lucene(一)</title>
    <link href="https://wgy1993.gitee.io/archives/c330d3d2.html"/>
    <id>https://wgy1993.gitee.io/archives/c330d3d2.html</id>
    <published>2020-08-15T07:24:06.000Z</published>
    <updated>2020-08-15T08:49:22.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-搜索技术理论基础"><a href="#1-搜索技术理论基础" class="headerlink" title="1.    搜索技术理论基础"></a>1.    搜索技术理论基础</h1><h2 id="1-1-为什么要学习Lucene"><a href="#1-1-为什么要学习Lucene" class="headerlink" title="1.1    为什么要学习Lucene"></a>1.1    为什么要学习Lucene</h2><p>原来的方式实现搜索功能，我们的搜索流程如下图：</p><p><img src="https://img-blog.csdnimg.cn/2020081515031765.png" alt="image-20200815130627095"></p><p>上图就是原始搜索引擎技术，如果用户比较少而且数据库的数据量比较小，那么这种方式实现搜索功能在企业中是比较常见的。</p><p>但是数据量过多时，数据库的压力就会变得很大，查询速度会变得非常慢。我们需要使用更好的解决方案来分担数据库的压力。</p><a id="more"></a><p>现在的方案（使用Lucene），如下图</p><p><img src="https://img-blog.csdnimg.cn/20200815150332900.png" alt="image-20200815130744850"></p><p>为了解决数据库压力和速度的问题，我们的数据库就变成了索引库，我们使用Lucene的API的来操作服务器上的索引库。这样完全和数据库进行了隔离。</p><h2 id="1-2-数据查询方法"><a href="#1-2-数据查询方法" class="headerlink" title="1.2    数据查询方法"></a>1.2    数据查询方法</h2><h3 id="1-2-1-顺序扫描法"><a href="#1-2-1-顺序扫描法" class="headerlink" title="1.2.1    顺序扫描法"></a>1.2.1    顺序扫描法</h3><p><strong>算法描述：</strong></p><p>所谓顺序扫描，例如要找内容包含一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。</p><p><strong>优点：</strong></p><p>查询准确率高</p><p><strong>缺点：</strong></p><p>查询速度会随着查询数据量的增大， 越来越慢</p><p><strong>使用场景：</strong></p><ul><li>数据库中的like关键字模糊查询</li><li>文本编辑器的Ctrl + F 查询功能</li></ul><h3 id="1-2-2-倒排索引"><a href="#1-2-2-倒排索引" class="headerlink" title="1.2.2    倒排索引"></a>1.2.2    倒排索引</h3><p>先举一个栗子：</p><p>例如我们使用新华字典查询汉字，新华字典有偏旁部首的目录（索引），我们查字首先查这个目录，找到这个目录中对应的偏旁部首，就可以通过这个目录中的偏旁部首找到这个字所在的位置（文档）。</p><p>Lucene会对文档建立倒排索引</p><p>1 、 提取资源中关键信息， 建立索引 （目录）</p><p>2 、 搜索时，根据关键字（目录），找到资源的位置</p><p><strong>算法描述：</strong></p><p>查询前会先将查询的内容提取出来组成文档(正文), 对文档进行切分词组成索引(目录), 索引和文档有关联关系, 查询的时候先查询索引, 通过索引找文档的这个过程叫做全文检索。</p><p><strong>切分词 :</strong> </p><p>就是将一句一句话切分成一个一个的词, 去掉停用词(的, 地, 得, a, an, the等)。去掉空格, 去掉标点符号, 大写字母转成小写字母, 去掉重复的词。</p><p><strong>为什么倒排索引比顺序扫描快?</strong></p><p>理解 : 因为索引可以去掉重复的词, 汉语常用的字和词大概等于, 字典加词典, 常用的英文在牛津词典也有收录.如果用计算机的速度查询, 字典+词典+牛津词典这些内容是非常快的. 但是用这些字典, 词典组成的文章却是千千万万不计其数. 索引的大小最多也就是字典+词典. 所以通过查询索引, 再通过索引和文档的关联关系找到文档速度比较快. 顺序扫描法则是直接去逐个查询那些不计其数的文章就算是计算的速度也会很慢.</p><p><strong>优点：</strong></p><p>查询准确率高</p><p>查询速度快， 并且不会因为查询内容量的增加， 而使查询速度逐渐变慢</p><p><strong>缺点：</strong></p><p>索引文件会占用额外的磁盘空间， 也就是占用磁盘量会增大。</p><p><strong>使用场景：</strong></p><p>海量数据查询</p><h2 id="1-3-全文检索技术应用场景"><a href="#1-3-全文检索技术应用场景" class="headerlink" title="1.3    全文检索技术应用场景"></a>1.3    全文检索技术应用场景</h2><p>应用场景 ：</p><p>1 、 站内搜索 （baidu贴吧、论坛、 京东、 taobao）</p><p>2 、 垂直领域的搜索 （ 818 工作网）</p><p>3 、 专业搜索引擎公司 （google、baidu）</p><h1 id="2-Lucene介绍"><a href="#2-Lucene介绍" class="headerlink" title="2.    Lucene介绍"></a>2.    Lucene介绍</h1><h2 id="2-1-什么是全文检索"><a href="#2-1-什么是全文检索" class="headerlink" title="2.1    什么是全文检索"></a>2.1    什么是全文检索</h2><p>计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式</p><h2 id="2-2-什么是Lucene"><a href="#2-2-什么是Lucene" class="headerlink" title="2.2    什么是Lucene"></a>2.2    什么是Lucene</h2><p><img src="https://img-blog.csdnimg.cn/20200815150340362.png" alt="image-20200815130843062"></p><p><strong>他是Lucene、Nutch 、Hadoop等项目的发起人Doug Cutting</strong></p><p>Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。</p><p>Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。</p><p>目前已经有很多应用程序的搜索功能是基于 Lucene 的，比如 Eclipse 的帮助系统的搜索功能。Lucene能够为文本类型的数据建立索引，所以你只要能把你要索引的数据格式转化的文本的，Lucene 就能对你的文档进行索引和搜索。比如你要对一些 HTML 文档，PDF 文档进行索引的话你就首先需要把HTML 文档和 PDF 文档转化成文本格式的，然后将转化后的内容交给 Lucene 进行索引，然后把创建好的索引文件保存到磁盘或者内存中，最后根据用户输入的查询条件在索引文件上进行查询。不指定要索引的文档的格式也使 Lucene 能够几乎适用于所有的搜索应用程序。</p><ul><li>Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供</li><li>Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻， 在Java开发环境里Lucene是一个成熟的免费开放源代码工具</li><li>Lucene并不是现成的搜索引擎产品，但可以用来制作搜索引擎产品</li></ul><h2 id="2-3-Lucene官网"><a href="#2-3-Lucene官网" class="headerlink" title="2.3    Lucene官网"></a>2.3    Lucene官网</h2><p>官网： <a href="http://lucene.apache.org/" target="_blank" rel="noopener">http://lucene.apache.org/</a></p><p><img src="https://img-blog.csdnimg.cn/20200815150351517.png" alt="image-20200815130906273"></p><h1 id="3-Lucene全文检索的流程"><a href="#3-Lucene全文检索的流程" class="headerlink" title="3.    Lucene全文检索的流程"></a>3.    Lucene全文检索的流程</h1><h2 id="3-1-索引和搜索流程图"><a href="#3-1-索引和搜索流程图" class="headerlink" title="3.1    索引和搜索流程图"></a>3.1    索引和搜索流程图</h2><p><img src="https://img-blog.csdnimg.cn/20200815150359937.png" alt="image-20200815130940539"></p><p>1 、绿色表示索引过程，对要搜索的原始内容进行索引构建一个索引库，索引过程包括：</p><p>确定原始内容即要搜索的内容</p><ul><li>获得文档</li><li>创建文档</li><li>分析文档</li><li>索引文档</li></ul><p>2 、红色表示搜索过程，从索引库中搜索内容，搜索过程包括：</p><p>用户通过搜索界面</p><ul><li>创建查询</li><li>执行搜索，从索引库搜索</li><li>渲染搜索结果</li></ul><h2 id="3-2-索引流程"><a href="#3-2-索引流程" class="headerlink" title="3.2    索引流程"></a>3.2    索引流程</h2><p>对文档索引的过程，将用户要搜索的文档内容进行索引，索引存储在索引库（index）中。</p><h3 id="3-2-1-原始内容"><a href="#3-2-1-原始内容" class="headerlink" title="3.2.1    原始内容"></a>3.2.1    原始内容</h3><p>原始内容是指要索引和搜索的内容。</p><p>原始内容包括互联网上的网页、数据库中的数据、磁盘上的文件等。</p><h3 id="3-2-2-获得文档（采集数据）"><a href="#3-2-2-获得文档（采集数据）" class="headerlink" title="3.2.2    获得文档（采集数据）"></a>3.2.2    获得文档（采集数据）</h3><p>从互联网上、数据库、文件系统中等获取需要搜索的原始信息，这个过程就是信息采集，采集数据的目的是为了对原始内容进行索引。</p><p>采集数据分类：</p><p>1 、对于互联网上网页，可以使用工具将网页抓取到本地生成html文件。</p><p>2 、数据库中的数据，可以直接连接数据库读取表中的数据。</p><p>3 、文件系统中的某个文件，可以通过I/O操作读取文件的内容。</p><p>在Internet上采集信息的软件通常称为爬虫或蜘蛛，也称为网络机器人，爬虫访问互联网上的每一个网页，将获取到的网页内容存储起来。</p><h3 id="3-2-3-创建文档"><a href="#3-2-3-创建文档" class="headerlink" title="3.2.3    创建文档"></a>3.2.3    创建文档</h3><p>获取原始内容的目的是为了索引，在索引前需要将原始内容创建成文档（Document），文档中包括一个一个的域（Field），域中存储内容。</p><p>这里我们可以将磁盘上的一个文件当成一个document，Document中包括一些Field，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150408368.png" alt="image-20200815131021214"></p><p>注意：每个Document可以有多个Field，不同的Document可以有不同的Field，同一个Document可以有相同的Field（域名和域值都相同）</p><h3 id="3-2-4-分析文档"><a href="#3-2-4-分析文档" class="headerlink" title="3.2.4    分析文档"></a>3.2.4    分析文档</h3><p>将原始内容创建为包含域（Field）的文档（document），需要再对域中的内容进行分析，分析成为一个一个的单词。</p><p>比如下边的文档经过分析如下：</p><p><strong>原文档内容：</strong></p><p>vivo X23 8GB+128GB 幻夜蓝 全网通4G手机</p><p>华为 HUAWEI 麦芒7 6G+64G 亮黑色 全网通4G手机</p><p><strong>分析后得到的词：</strong></p><p>vivo, x23, 8GB, 128GB, 幻夜, 幻夜蓝, 全网, 全网通, 网通, 4G, 手机, 华为, HUAWEI, 麦芒 7 。。。。</p><h3 id="3-2-5-索引文档"><a href="#3-2-5-索引文档" class="headerlink" title="3.2.5    索引文档"></a>3.2.5    索引文档</h3><p>对所有文档分析得出的语汇单元进行索引，索引的目的是为了搜索，最终要实现只搜索被索引的语汇单元从而找到Document（文档）。</p><p>创建索引是对语汇单元索引，通过词语找文档，这种索引的结构叫倒排索引结构。</p><p>倒排索引结构是根据内容（词汇）找文档，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150415482.png" alt="image-20200815131058163"></p><p><strong>倒排索引结构也叫反向索引结构，包括索引和文档两部分，索引即词汇表，它的规模较小，而文档集合较大。</strong></p><h3 id="3-2-6-Lucene底层存储结构"><a href="#3-2-6-Lucene底层存储结构" class="headerlink" title="3.2.6    Lucene底层存储结构"></a>3.2.6    Lucene底层存储结构</h3><p><img src="https://img-blog.csdnimg.cn/20200815150422408.png" alt="image-20200815131127933"></p><h2 id="3-3-搜索流程"><a href="#3-3-搜索流程" class="headerlink" title="3.3    搜索流程"></a>3.3    搜索流程</h2><p>搜索就是用户输入关键字，从索引中进行搜索的过程。根据关键字搜索索引，根据索引找到对应的文档，从而找到要搜索的内容。</p><h3 id="3-3-1-用户"><a href="#3-3-1-用户" class="headerlink" title="3.3.1    用户"></a>3.3.1    用户</h3><p>就是使用搜索的角色，用户可以是自然人，也可以是远程调用的程序。</p><h3 id="3-3-2-用户搜索界面"><a href="#3-3-2-用户搜索界面" class="headerlink" title="3.3.2    用户搜索界面"></a>3.3.2    用户搜索界面</h3><p>全文检索系统提供用户搜索的界面供用户提交搜索的关键字，搜索完成展示搜索结果。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150429916.png" alt="image-20200815131152718"></p><p>Lucene不提供制作用户搜索界面的功能，需要根据自己的需求开发搜索界面。</p><h3 id="3-3-3-创建查询"><a href="#3-3-3-创建查询" class="headerlink" title="3.3.3    创建查询"></a>3.3.3    创建查询</h3><p>用户输入查询关键字执行搜索之前需要先构建一个查询对象，查询对象中可以指定查询要查询关键字、要搜索的Field文档域等，查询对象会生成具体的查询语法，比如：</p><p><strong>name:手机</strong> : 表示要搜索name这个Field域中，内容为“手机”的文档。</p><p><strong>name:华为 AND 手机</strong> : 表示要搜索即包括关键字“华为” 并且也包括“手机”的文档。</p><h3 id="3-3-4-执行搜索"><a href="#3-3-4-执行搜索" class="headerlink" title="3.3.4    执行搜索"></a>3.3.4    执行搜索</h3><p>搜索索引过程：</p><p>1.根据查询语法在倒排索引词典表中分别找出对应搜索词的索引，从而找到索引所链接的文档链表。</p><p>例如搜索语法为 “<strong>name:华为 AND 手机</strong> ” 表示搜索出的文档中既要包括”华为”也要包括”手机”。</p><p><img src="https://img-blog.csdnimg.cn/20200815150437497.png" alt="image-20200815131224846"></p><p>2 、由于是AND，所以要对包含 华为 和 手机 词语的链表进行交集，得到文档链表应该包括每一个搜索词语</p><p>3 、获取文档中的Field域数据。</p><h3 id="3-3-5-渲染结果"><a href="#3-3-5-渲染结果" class="headerlink" title="3.3.5    渲染结果"></a>3.3.5    渲染结果</h3><p>以一个友好的界面将查询结果展示给用户，用户根据搜索结果找自己想要的信息，为了帮助用户很快找到自己的结果，提供了很多展示的效果，比如搜索结果中将关键字高亮显示，百度提供的快照等。</p><p><img src="https://img-blog.csdnimg.cn/20200815150444171.png" alt="image-20200815131315023"></p><h1 id="4-Lucene入门"><a href="#4-Lucene入门" class="headerlink" title="4.    Lucene入门"></a>4.    Lucene入门</h1><h2 id="4-1-Lucene准备"><a href="#4-1-Lucene准备" class="headerlink" title="4.1    Lucene准备"></a>4.1    Lucene准备</h2><p>Lucene可以在官网上下载。课程已经准备好了Lucene的文件，我们使用的是7.7.2版本，文件位置如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150452424.png" alt="image-20200815131337840"></p><p>解压后的效果：</p><p><img src="https://img-blog.csdnimg.cn/20200815150459178.png" alt="image-20200815131422005"></p><p>使用这三个文件的jar包，就可以实现lucene功能</p><h2 id="4-2-开发环境"><a href="#4-2-开发环境" class="headerlink" title="4.2    开发环境"></a>4.2    开发环境</h2><p>JDK： 1.8 （Lucene7以上，必须使用JDK1.8及以上版本）</p><p>数据库： MySQL</p><p>数据库脚本位置如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150506393.png" alt="image-20200815131448543"></p><p>导入到MySQL效果如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150513780.png" alt="image-20200815131517726"></p><h2 id="4-3-创建Java工程"><a href="#4-3-创建Java工程" class="headerlink" title="4.3    创建Java工程"></a>4.3    创建Java工程</h2><p>创建maven工程不依赖骨架, 测试即可，效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200815150522356.png" alt="image-20200815131537797"></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>luceneDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- IK中文分词器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入thymeleaf --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Json转换工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-4-索引流程"><a href="#4-4-索引流程" class="headerlink" title="4.4    索引流程"></a>4.4    索引流程</h2><h3 id="4-4-1-数据采集"><a href="#4-4-1-数据采集" class="headerlink" title="4.4.1    数据采集"></a>4.4.1    数据采集</h3><p>在电商网站中，全文检索的数据源在数据库中，需要通过jdbc访问数据库中 <strong>sku</strong> 表的内容。</p><h4 id="4-4-1-1-创建pojo"><a href="#4-4-1-1-创建pojo" class="headerlink" title="4.4.1.1    创建pojo"></a>4.4.1.1    创建pojo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sku</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品主键id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="comment">//库存数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">//品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line">    <span class="comment">//规格</span></span><br><span class="line">    <span class="keyword">private</span> String spec;</span><br><span class="line">    <span class="comment">//销量</span></span><br><span class="line">    <span class="keyword">private</span> Integer saleNum;</span><br><span class="line">    </span><br><span class="line">    get/set/toString...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-1-2-创建DAO接口"><a href="#4-4-1-2-创建DAO接口" class="headerlink" title="4.4.1.2    创建DAO接口"></a>4.4.1.2    创建DAO接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的Sku数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">querySkuList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-1-3-创建DAO接口实现类"><a href="#4-4-1-3-创建DAO接口实现类" class="headerlink" title="4.4.1.3    创建DAO接口实现类"></a>4.4.1.3    创建DAO接口实现类</h4><p>使用jdbc实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuDaoImpl</span> <span class="keyword">implements</span> <span class="title">SkuDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">querySkuList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据库链接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 预编译statement</span></span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 结果集</span></span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 商品列表</span></span><br><span class="line">        List&lt;Sku&gt; list = <span class="keyword">new</span> ArrayList&lt;Sku&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">// 连接数据库</span></span><br><span class="line">            connection = (Connection) DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/lucene"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// SQL语句</span></span><br><span class="line">            String sql = <span class="string">"SELECT * FROM tb_sku"</span>;</span><br><span class="line">            <span class="comment">// 创建preparedStatement</span></span><br><span class="line">            preparedStatement = (PreparedStatement) connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 获取结果集</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">// 结果集解析</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">                sku.setId(resultSet.getString(<span class="string">"id"</span>));</span><br><span class="line">                sku.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">                sku.setSpec(resultSet.getString(<span class="string">"spec"</span>));</span><br><span class="line">                sku.setBrandName(resultSet.getString(<span class="string">"brand_name"</span>));</span><br><span class="line">                sku.setCategoryName(resultSet.getString(<span class="string">"category_name"</span>));</span><br><span class="line">                sku.setImage(resultSet.getString(<span class="string">"image"</span>));</span><br><span class="line">                sku.setNum(resultSet.getInt(<span class="string">"num"</span>));</span><br><span class="line">                sku.setPrice(resultSet.getInt(<span class="string">"price"</span>));</span><br><span class="line">                sku.setSaleNum(resultSet.getInt(<span class="string">"sale_num"</span>));</span><br><span class="line">                list.add(sku);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-实现索引流程"><a href="#4-4-2-实现索引流程" class="headerlink" title="4.4.2    实现索引流程"></a>4.4.2    实现索引流程</h3><ol><li>采集数据</li><li>创建Document文档对象</li><li>创建分析器（分词器）</li><li>创建Directory对象，声明索引库存储位置</li><li>创建IndexWriterConfig配置信息类</li><li>创建IndexWriter写入对象</li><li>把Document写入到索引库中</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引库维护</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIndexManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 采集数据</span></span><br><span class="line">        SkuDao skuDao = <span class="keyword">new</span> SkuDaoImpl();</span><br><span class="line">        List&lt;Sku&gt; skuList = skuDao.querySkuList();</span><br><span class="line">        <span class="comment">// 2. 创建Document文档对象</span></span><br><span class="line">        List&lt;Document&gt; documents = <span class="keyword">new</span> ArrayList&lt;Document&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">            Document document = <span class="keyword">new</span> Document();</span><br><span class="line">            <span class="comment">// Document文档中添加Field域</span></span><br><span class="line">            <span class="comment">// 商品Id</span></span><br><span class="line">            <span class="comment">// Store.YES:表示存储到文档域中</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"id"</span>, sku.getId(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 商品名称</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, sku.getName(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 商品价格</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"price"</span>, String.valueOf(sku.getPrice()), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 品牌名称</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"brandName"</span>, sku.getBrandName(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 分类名称</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"categoryName"</span>, sku.getCategoryName(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 图片地址</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"image"</span>, sku.getImage(), Field.Store.YES));</span><br><span class="line">            <span class="comment">// 把Document放到list中</span></span><br><span class="line">            documents.add(document);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">//4. 创建Directory目录对象，目录对象表示索引库的位置</span></span><br><span class="line">        Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">        <span class="comment">//5. 创建IndexWriterConfig对象，这个对象中指定切分词使用的分词器</span></span><br><span class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">        <span class="comment">//6. 创建IndexWriter输出流对象，指定输出的位置和使用的config初始化对象</span></span><br><span class="line">        IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line">        <span class="comment">//7. 写入文档到索引库</span></span><br><span class="line">        <span class="keyword">for</span> (Document document : docList) &#123;</span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//8. 释放资源</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果：</p><p>在文件夹中出现了以下文件，表示创建索引成功</p><p><img src="https://img-blog.csdnimg.cn/20200815150529629.png" alt="image-20200815131603652"></p><h2 id="4-5-使用Luke查看索引"><a href="#4-5-使用Luke查看索引" class="headerlink" title="4.5    使用Luke查看索引"></a>4.5    使用Luke查看索引</h2><p>Luke作为Lucene工具包中的一个工具（<a href="http://www.getopt.org/luke/），可以通过界面来进行索引文件的查询、修改" target="_blank" rel="noopener">http://www.getopt.org/luke/），可以通过界面来进行索引文件的查询、修改</a></p><p>luke所在位置如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150536998.png" alt="image-20200815131624673"></p><p><strong>将luke-swing-8.0.0里面的内容, 放到一个硬盘根目录的文件夹下, 不能有空格和中文名称.</strong></p><p>运行luke.bat</p><p><img src="https://img-blog.csdnimg.cn/2020081515054950.png" alt="image-20200815131645625"></p><p>打开后，使用如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150556986.png" alt="image-20200815131706005"></p><p>下图是索引域的展示效果：</p><p><img src="https://img-blog.csdnimg.cn/20200815150604765.png" alt="image-20200815131718235"></p><p>下图是文档域展示效果</p><p><img src="https://img-blog.csdnimg.cn/20200815150611755.png" alt="image-20200815131727551"></p><h2 id="4-6-搜索流程"><a href="#4-6-搜索流程" class="headerlink" title="4.6    搜索流程"></a>4.6    搜索流程</h2><h3 id="4-6-1-输入查询语句"><a href="#4-6-1-输入查询语句" class="headerlink" title="4.6.1    输入查询语句"></a>4.6.1    输入查询语句</h3><p>Lucene可以通过query对象输入查询语句。同数据库的sql一样，lucene也有固定的查询语法：</p><p>最基本的有比如：AND, OR, NOT 等（必须大写）</p><p>举个栗子:</p><p>用户想找一个 <strong>name</strong> 域中包括 <strong>手</strong> 或 <strong>机</strong> 关键字的文档。</p><p>它对应的查询语句：<strong>name:手 OR name:机</strong></p><p>如下图是使用luke搜索的例子：</p><p><img src="https://img-blog.csdnimg.cn/20200815150619367.png" alt="image-20200815131738854"></p><h4 id="4-6-1-1-搜索分词"><a href="#4-6-1-1-搜索分词" class="headerlink" title="4.6.1.1    搜索分词"></a>4.6.1.1    搜索分词</h4><p>和索引过程的分词一样，这里要对用户输入的关键字进行分词，一般情况索引和搜索使用的分词器一致。</p><p>比如：输入搜索关键字“java学习”，分词后为java和学习两个词，与java和学习有关的内容都搜索出来了，如下：</p><p> <img src="https://img-blog.csdnimg.cn/20200815150626582.png" alt="image-20200815131842554"></p><h3 id="4-6-2-代码实现"><a href="#4-6-2-代码实现" class="headerlink" title="4.6.2    代码实现"></a>4.6.2    代码实现</h3><ol><li>创建Query搜索对象</li><li>创建Directory流对象,声明索引库位置</li><li>创建索引读取对象IndexReader</li><li>创建索引搜索对象IndexSearcher</li><li>使用索引搜索对象，执行搜索，返回结果集TopDocs</li><li>解析结果集</li><li>释放资源</li></ol><p>IndexSearcher搜索方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>indexSearcher.search(query, n)</td><td>根据Query搜索，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query, filter, n)</td><td>根据Query搜索，添加过滤策略，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query, n, sort)</td><td>根据Query搜索，添加排序策略，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query,filter, n, sort)</td><td>根据Query搜索，添加过滤策略，添加排序策略，返回评分最高的n条记录</td></tr></tbody></table><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试搜索过程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建Query搜索对象</span></span><br><span class="line">        <span class="comment">//1.1 创建分词器(对搜索的关键词进行分词使用)</span></span><br><span class="line">        <span class="comment">//注意: 分词器要和创建索引的时候使用的分词器一模一样</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">//1.2 创建搜索解析器</span></span><br><span class="line">        <span class="comment">//第一个参数: 默认查询域, 如果查询的关键字中带搜索的域名, 则从指定域中查询, 如果不带域名则从, 默认搜索域中查询</span></span><br><span class="line">        <span class="comment">//queryParser.parse("brandName:华为手机");</span></span><br><span class="line">        <span class="comment">//第二个参数: 使用的分词器</span></span><br><span class="line">        QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"name"</span>, analyzer);</span><br><span class="line">        <span class="comment">//1.3 创建搜索对象</span></span><br><span class="line">        <span class="comment">//华 OR  为   手   机</span></span><br><span class="line">        Query query = queryParser.parse(<span class="string">"华为手机"</span>);</span><br><span class="line">        <span class="comment">//2. 创建Directory流对象,声明索引库位置</span></span><br><span class="line">        Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">        <span class="comment">//3. 创建索引读取对象IndexReader</span></span><br><span class="line">        IndexReader indexReader = DirectoryReader.open(dir);</span><br><span class="line">        <span class="comment">//4. 创建索引搜索对象</span></span><br><span class="line">        IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">        <span class="comment">//5. 使用索引搜索对象，执行搜索，返回结果集TopDocs</span></span><br><span class="line">        <span class="comment">// 第一个参数：搜索对象，第二个参数：返回的数据条数，指定查询结果最顶部的n条数据返回</span></span><br><span class="line">        TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取查询到的结果集的总数, 打印</span></span><br><span class="line">        System.out.println(<span class="string">"=======count======="</span> + topDocs.totalHits);</span><br><span class="line">        <span class="comment">//5.1 获取结果集</span></span><br><span class="line">        ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">        <span class="comment">//6. 解析结果集</span></span><br><span class="line">        <span class="keyword">if</span> (scoreDocs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">                <span class="comment">//获取查询到的文档唯一标识, 文档id, 这个id是lucene在创建文档的时候自动分配的</span></span><br><span class="line">                <span class="keyword">int</span> docID = scoreDoc.doc;</span><br><span class="line">                <span class="comment">//通过文档id, 读取文档</span></span><br><span class="line">                Document doc = indexSearcher.doc(docID);</span><br><span class="line">                System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">                <span class="comment">//通过域名, 从文档中获取域值</span></span><br><span class="line">                System.out.println(<span class="string">"===id=="</span> + doc.get(<span class="string">"id"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===name=="</span> + doc.get(<span class="string">"name"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===price=="</span> + doc.get(<span class="string">"price"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===image=="</span> + doc.get(<span class="string">"image"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===brandName=="</span> + doc.get(<span class="string">"brandName"</span>));</span><br><span class="line">                System.out.println(<span class="string">"===categoryName=="</span> + doc.get(<span class="string">"categoryName"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 关闭流</span></span><br><span class="line">        indexReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Field域类型"><a href="#5-Field域类型" class="headerlink" title="5.    Field域类型"></a>5.    Field域类型</h1><h2 id="5-1-Field属性"><a href="#5-1-Field属性" class="headerlink" title="5.1    Field属性"></a>5.1    Field属性</h2><p>Field是文档中的域，包括Field名和Field值两部分，一个文档可以包括多个Field，Document只是Field的一个承载体，Field值即为要索引的内容，也是要搜索的内容。</p><p><strong>是否分词(tokenized)</strong></p><p>是：作分词处理，即将Field值进行分词，分词的目的是为了索引。</p><p>比如：商品名称、商品描述等，这些内容用户要输入关键字搜索，由于搜索的内容格式大、内容多需要分词后将语汇单元建立索引</p><p>否：不作分词处理</p><p>比如：商品id、订单号、身份证号等</p><p><strong>是否索引(indexed)</strong></p><p>是：进行索引。将Field分词后的词或整个Field值进行索引，存储到索引域，索引的目的是为了搜索。</p><p>比如：商品名称、商品描述分析后进行索引，订单号、身份证号不用分词但也要索引，这些将来都要作为查询条件。</p><p>否：不索引。</p><p>比如：图片路径、文件路径等，不用作为查询条件的不用索引。</p><p><strong>是否存储(stored)</strong></p><p>是：将Field值存储在文档域中，存储在文档域中的Field才可以从Document中获取。</p><p>比如：商品名称、订单号，凡是将来要从Document中获取的Field都要存储。</p><p>否：不存储Field值</p><p>比如：商品描述，内容较大不用存储。如果要向用户展示商品描述可以从系统的关系数据库中获取。</p><h2 id="5-2-Field常用类型"><a href="#5-2-Field常用类型" class="headerlink" title="5.2    Field常用类型"></a>5.2    Field常用类型</h2><p>下边列出了开发中常用 的Filed类型，注意Field的属性，根据需求选择：</p><table><thead><tr><th align="left">Field类</th><th>数据类型</th><th>Analyzed是否分词</th><th>Indexed是否索引</th><th>Stored是否存储</th><th>说明</th></tr></thead><tbody><tr><td align="left">StringField(FieldName,FieldValue,Store.YES))</td><td>字符串</td><td>N</td><td>Y</td><td>Y或N</td><td>这个Field用来构建一个字符串Field，但是不会进行分词，会将整个串存储在索引中，比如(订单号,身份证号等)是否存储在文档中用Store.YES或Store.NO决定</td></tr><tr><td align="left">FloatPoint(FieldName, FieldValue)</td><td>Float型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Float数字型Field，进行分词和索引，不存储, 比如(价格) 存储在文档中</td></tr><tr><td align="left">DoublePoint(FieldName,FieldValue)</td><td>Double型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Double数字型Field，进行分词和索引，不存储</td></tr><tr><td align="left">LongPoint(FieldName, FieldValue)</td><td>Long型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Long数字型Field，进行分词和索引，不存储</td></tr><tr><td align="left">IntPoint(FieldName, FieldValue)</td><td>Integer型</td><td>Y</td><td>Y</td><td>N</td><td>这个Field用来构建一个Integer数字型Field，进行分词和索引，不存储</td></tr><tr><td align="left">StoredField(FieldName, FieldValue)</td><td>重载方法，支持多种类型</td><td>N</td><td>N</td><td>Y</td><td>这个Field用来构建不同类型Field不分析，不索引，但要Field存储在文档中</td></tr><tr><td align="left">TextField(FieldName, FieldValue,Store.NO) 或 TextField(FieldName,reader)</td><td>字符串或流</td><td>Y</td><td>Y</td><td>Y或N</td><td>如果是一个Reader, lucene猜测内容比较多,会采用Unstored的策略.</td></tr><tr><td align="left">NumericDocValuesField(FieldName,FieldValue)</td><td>数值</td><td>_</td><td>_</td><td>_</td><td>配合其他域排序使用</td></tr></tbody></table><h2 id="5-3-Field修改"><a href="#5-3-Field修改" class="headerlink" title="5.3    Field修改"></a>5.3    Field修改</h2><p>对之前编写的testCreateIndex()方法进行修改。</p><p>代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建域对象并且放入文档对象中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为主键分词后无意义</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 如果根据id主键查询, 就必须索引</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为主键id比较特殊, 可以确定唯一的一条数据, 在业务上一般有重要所用, 所以存储存储后, 才可以获取到id具体的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("id", sku.getId(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>, sku.getId(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 是, 因为名称字段需要查询, 并且分词后有意义所以需要分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 因为需要根据名称字段查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示商品名称, 所以需要存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, sku.getName(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 是(因为lucene底层算法规定, 如果根据价格范围查询, 必须分词)</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 需要根据价格进行范围查询, 所以必须索引</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示价格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("price", String.valueOf(sku.getPrice()), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> IntPoint(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line">document.add(<span class="keyword">new</span> StoredField(<span class="string">"price"</span>, sku.getPrice()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为不查询, 所以不索引, 因为不索引所以不分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 否, 因为不需要根据图片地址路径查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示商品图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("image", sku.getImage(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StoredField(<span class="string">"image"</span>, sku.getImage()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为分类是专有名词, 是一个整体, 所以不分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 因为需要根据分类查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("categoryName", sku.getCategoryName(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StringField(<span class="string">"categoryName"</span>, sku.getCategoryName(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 是否分词: 否, 因为品牌是专有名词, 是一个整体, 所以不分词</span></span><br><span class="line"><span class="comment"> * 是否索引: 是, 因为需要根据品牌进行查询</span></span><br><span class="line"><span class="comment"> * 是否存储: 是, 因为页面需要展示品牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//document.add(new TextField("brandName", sku.getBrandName(), Field.Store.YES));</span></span><br><span class="line">document.add(<span class="keyword">new</span> StringField(<span class="string">"brandName"</span>, sku.getBrandName(), Field.Store.YES));</span><br></pre></td></tr></table></figure><h1 id="6-索引维护"><a href="#6-索引维护" class="headerlink" title="6.    索引维护"></a>6.    索引维护</h1><h2 id="6-1-需求"><a href="#6-1-需求" class="headerlink" title="6.1    需求"></a>6.1    需求</h2><p>管理人员通过电商系统更改图书信息，这时更新的是关系数据库，如果使用lucene搜索图书信息，需要在数据库表book信息变化时及时更新lucene索引库。</p><h2 id="6-2-添加索引"><a href="#6-2-添加索引" class="headerlink" title="6.2    添加索引"></a>6.2    添加索引</h2><p>调用 indexWriter.addDocument（doc）添加索引。</p><p>参考入门程序的创建索引。</p><h2 id="6-3-修改索引"><a href="#6-3-修改索引" class="headerlink" title="6.3    修改索引"></a>6.3    修改索引</h2><p>更新索引是先删除再添加，建议对更新需求采用此方法并且要保证对已存在的索引执行更新，可以先查询出来，确定更新记录存在执行更新操作。</p><p>如果更新索引的目标文档对象不存在，则执行添加。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引库修改操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//需要变更成的内容</span></span><br><span class="line">    Document document = <span class="keyword">new</span> Document();</span><br><span class="line"></span><br><span class="line">    document.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>, <span class="string">"100000003145"</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"xxxx"</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> IntPoint(<span class="string">"price"</span>, <span class="number">123</span>));</span><br><span class="line">    document.add(<span class="keyword">new</span> StoredField(<span class="string">"price"</span>, <span class="number">123</span>));</span><br><span class="line">    document.add(<span class="keyword">new</span> StoredField(<span class="string">"image"</span>, <span class="string">"xxxx.jpg"</span>));</span><br><span class="line">    document.add(<span class="keyword">new</span> StringField(<span class="string">"categoryName"</span>, <span class="string">"手机"</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> StringField(<span class="string">"brandName"</span>, <span class="string">"华为"</span>, Field.Store.YES));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 修改, 第一个参数: 修改条件, 第二个参数: 修改成的内容</span></span><br><span class="line">    indexWriter.updateDocument(<span class="keyword">new</span> Term(<span class="string">"id"</span>, <span class="string">"100000003145"</span>), document);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-删除索引"><a href="#6-4-删除索引" class="headerlink" title="6.4    删除索引"></a>6.4    删除索引</h2><h3 id="6-4-1-删除指定索引"><a href="#6-4-1-删除指定索引" class="headerlink" title="6.4.1    删除指定索引"></a>6.4.1    删除指定索引</h3><p>根据Term项删除索引，满足条件的将全部删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试根据条件删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 测试根据条件删除</span></span><br><span class="line">    indexWriter.deleteDocuments(<span class="keyword">new</span> Term(<span class="string">"id"</span>, <span class="string">"998188"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下图：索引域没有变化</p><p><img src="https://img-blog.csdnimg.cn/20200815150636544.png" alt="image-20200815142234343"></p><p>文档域数据被删除掉</p><p><img src="https://img-blog.csdnimg.cn/20200815150645283.png" alt="image-20200815142300903"></p><h3 id="6-4-2-删除全部索引（慎用）"><a href="#6-4-2-删除全部索引（慎用）" class="headerlink" title="6.4.2    删除全部索引（慎用）"></a>6.4.2    删除全部索引（慎用）</h3><p>将索引目录的索引信息全部删除，直接彻底删除，无法恢复。</p><p>建议参照关系数据库基于主键删除方式，所以在创建索引时需要创建一个主键Field，删除时根据此主键Field删除。</p><p>索引删除后将放在Lucene的回收站中，Lucene3.X版本可以恢复删除的文档，3.X之后无法恢复。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试根据条件删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//3. 创建分词器, StandardAnalyzer标准分词器, 对英文分词效果好, 对中文是单字分词, 也就是一个字就认为是一个词.</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">    <span class="comment">//4. 创建Directory目录对象, 目录对象表示索引库的位置</span></span><br><span class="line">    Directory dir = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line">    <span class="comment">//5. 创建IndexWriterConfig对象, 这个对象中指定切分词使用的分词器</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">    <span class="comment">//6. 创建IndexWriter输出流对象, 指定输出的位置和使用的config初始化对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试删除所有内容</span></span><br><span class="line">    indexWriter.deleteAll();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引域数据清空</p><p><img src="https://img-blog.csdnimg.cn/20200815150756623.png" alt="image-20200815142540727"></p><p>文档域数据也清空</p><p><img src="https://img-blog.csdnimg.cn/20200815150859956.png" alt="image-20200815142558764"></p><h1 id="7-分词器"><a href="#7-分词器" class="headerlink" title="7.    分词器"></a>7.    分词器</h1><h2 id="7-1-分词理解"><a href="#7-1-分词理解" class="headerlink" title="7.1    分词理解"></a>7.1    分词理解</h2><p>在对Document中的内容进行索引之前，需要使用分词器进行分词 ，分词的目的是为了搜索。分词的主要过程就是先分词后过滤。</p><ul><li>分词：采集到的数据会存储到document对象的Field域中，分词就是将Document中Field的value值切分成一个一个的词。</li><li>过滤：包括去除标点符号过滤、去除停用词过滤（的、是、a、an、the等）、大写转小写、词的形还原（复数形式转成单数形参、过去式转成现在式。。。）等。</li></ul><p>什么是停用词？停用词是为节省存储空间和提高搜索效率，搜索引擎在索引页面或处理搜索请求时会自动忽略某些字或词，这些字或词即被称为Stop Words(停用词)。比如语气助词、副词、介词、连接词等，通常自身并无明确的意义，只有将其放入一个完整的句子中才有一定作用，如常见的“的”、“在”、“是”、“啊”等。</p><p>对于分词来说，不同的语言，分词规则不同。Lucene作为一个工具包提供不同国家的分词器</p><h2 id="7-2-Analyzer使用时机"><a href="#7-2-Analyzer使用时机" class="headerlink" title="7.2    Analyzer使用时机"></a>7.2    Analyzer使用时机</h2><h3 id="7-2-1-索引时使用Analyzer"><a href="#7-2-1-索引时使用Analyzer" class="headerlink" title="7.2.1    索引时使用Analyzer"></a>7.2.1    索引时使用Analyzer</h3><p>输入关键字进行搜索，当需要让该关键字与文档域内容所包含的词进行匹配时需要对文档域内容进行分析，需要经过Analyzer分析器处理生成语汇单元（Token）。分析器分析的对象是文档中的Field域。当Field的属性tokenized（是否分词）为true时会对Field值进行分析，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200815150909595.png" alt="image-20200815142747012"></p><p>对于一些Field可以不用分析：</p><p>1 、不作为查询条件的内容，比如文件路径</p><p>2 、不是匹配内容中的词而匹配Field的整体内容，比如订单号、身份证号等。</p><h3 id="7-2-2-搜索时使用Analyzer"><a href="#7-2-2-搜索时使用Analyzer" class="headerlink" title="7.2.2    搜索时使用Analyzer"></a>7.2.2    搜索时使用Analyzer</h3><p>对搜索关键字进行分析和索引分析一样，使用Analyzer对搜索关键字进行分析、分词处理，使用分析后每个词语进行搜索。比如：搜索关键字：spring web ，经过分析器进行分词，得出：spring web拿词去索引词典表查找 ，找到索引链接到Document，解析Document内容。</p><p>对于匹配整体Field域的查询可以在搜索时不分析，比如根据订单号、身份证号查询等。</p><p><strong>注意：搜索使用的分析器要和索引使用的分析器一致。</strong></p><h2 id="7-3-Lucene原生分词器"><a href="#7-3-Lucene原生分词器" class="headerlink" title="7.3    Lucene原生分词器"></a>7.3    Lucene原生分词器</h2><p>以下是Lucene中自带的分词器</p><h3 id="7-3-1-StandardAnalyzer"><a href="#7-3-1-StandardAnalyzer" class="headerlink" title="7.3.1    StandardAnalyzer"></a>7.3.1    StandardAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>Lucene提供的标准分词器, 可以对用英文进行分词, 对中文是单字分词, 也就是一个字就认为是一个词.</strong></p><p>如下是org.apache.lucene.analysis.standard.standardAnalyzer的部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TokenStreamComponents <span class="title">createComponents</span><span class="params">(String fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> StandardTokenizer src = <span class="keyword">new</span> StandardTokenizer();</span><br><span class="line">    src.setMaxTokenLength(<span class="keyword">this</span>.maxTokenLength);</span><br><span class="line">    TokenStream tok = <span class="keyword">new</span> LowerCaseFilter(src);</span><br><span class="line">    TokenStream tok = <span class="keyword">new</span> StopFilter(tok, <span class="keyword">this</span>.stopwords);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenStreamComponents(src, tok) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setReader</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">            src.setMaxTokenLength(StandardAnalyzer.<span class="keyword">this</span>.maxTokenLength);</span><br><span class="line">            <span class="keyword">super</span>.setReader(reader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tokenizer就是分词器，负责将reader转换为语汇单元即进行分词处理，Lucene提供了很多的分词器，也可以使用第三方的分词，比如IKAnalyzer一个中文分词器。</p><p>TokenFilter是分词过滤器，负责对语汇单元进行过滤，TokenFilter可以是一个过滤器链儿，Lucene提供了很多的分词器过滤器，比如大小写转换、去除停用词等。</p><p>如下图是语汇单元的生成过程：</p><p><img src="https://img-blog.csdnimg.cn/20200815150916637.png" alt="image-20200815143028559"></p><p>从一个Reader字符流开始，创建一个基于Reader的Tokenizer分词器，经过三个TokenFilter生成语汇单元Token。</p><p>比如下边的文档经过分析器分析如下：</p><p>原文档内容：</p><p><img src="https://img-blog.csdnimg.cn/20200815150924987.png" alt="image-20200815143041788"></p><p>分析后得到的多个语汇单元：</p><p><img src="https://img-blog.csdnimg.cn/20200815150931100.png" alt="image-20200815143051262"></p><h3 id="7-3-2-WhitespaceAnalyzer"><a href="#7-3-2-WhitespaceAnalyzer" class="headerlink" title="7.3.2    WhitespaceAnalyzer"></a>7.3.2    WhitespaceAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>仅仅是去掉了空格，没有其他任何操作，不支持中文。</strong></p><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去掉空格分词器, 不支持中文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestWhitespaceAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> WhitespaceAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo X23 8GB+128GB 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150937730.png" alt="image-20200815143249169"></p><h3 id="7-3-3-SimpleAnalyzer"><a href="#7-3-3-SimpleAnalyzer" class="headerlink" title="7.3.3    SimpleAnalyzer"></a>7.3.3    SimpleAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>将除了字母以外的符号全部去除，并且将所有字母变为小写，需要注意的是这个分词器同样把数字也去除了，同样不支持中文。</strong></p><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单分词器: 不支持中文, 将除了字母之外的所有符号全部取出, 所有大写字母转换成小写字母, 对于数字也会去除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSimpleAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> SimpleAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo，X23。 8GB+128GB； 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150944708.png" alt="image-20200815143515285"></p><h3 id="7-3-4-CJKAnalyzer"><a href="#7-3-4-CJKAnalyzer" class="headerlink" title="7.3.4    CJKAnalyzer"></a>7.3.4    CJKAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>这个支持中日韩文字，前三个字母也就是这三个国家的缩写。对中文是二分法分词, 去掉空格, 去掉标点符号。个人感觉对中文支持依旧很烂。</strong></p><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中日韩分词器: 使用二分法分词, 去掉空格, 去掉标点符号, 所有大写字母转换成小写字母</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestCJKAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> CJKAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo，X23。 8GB+128GB； 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150951573.png" alt="image-20200815143641813"></p><h3 id="7-3-5-SmartChineseAnalyzer"><a href="#7-3-5-SmartChineseAnalyzer" class="headerlink" title="7.3.5    SmartChineseAnalyzer"></a>7.3.5    SmartChineseAnalyzer</h3><p><strong>特点 :</strong></p><p><strong>对中文支持也不是很好，扩展性差，扩展词库，禁用词库和同义词库等不好处理。</strong></p><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSmartChineseAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> SmartChineseAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo，X23。 8GB+128GB； 幻夜蓝"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://img-blog.csdnimg.cn/20200815150957583.png" alt="image-20200815143911478"></p><h2 id="7-4-第三方中文分词器"><a href="#7-4-第三方中文分词器" class="headerlink" title="7.4    第三方中文分词器"></a>7.4    第三方中文分词器</h2><h3 id="7-4-1-什么是中文分词器"><a href="#7-4-1-什么是中文分词器" class="headerlink" title="7.4.1    什么是中文分词器"></a>7.4.1    什么是中文分词器</h3><p>学过英文的都知道，英文是以单词为单位的，单词与单词之间以空格或者逗号句号隔开。所以对于英文，我们可以简单以空格判断某个字符串是否为一个单词，比如I love China，love 和 China很容易被程序区分开来。</p><p>而中文则以字为单位，字又组成词，字和词再组成句子。中文“我爱中国”就不一样了，电脑不知道“中国”是一个词语还是“爱中”是一个词语。</p><p>把中文的句子切分成有意义的词，就是中文分词，也称切词。我爱中国，分词的结果是：我、爱、中国。</p><h3 id="7-4-2-第三方中文分词器简介"><a href="#7-4-2-第三方中文分词器简介" class="headerlink" title="7.4.2    第三方中文分词器简介"></a>7.4.2    第三方中文分词器简介</h3><ul><li>paoding： 庖丁解牛最新版在 <a href="https://code.google.com/p/paoding/" target="_blank" rel="noopener">https://code.google.com/p/paoding/</a> 中最多支持Lucene 3.0，且最新提交的代码在 2008-06-03，在svn中最新也是 2010 年提交，已经过时，不予考虑。</li><li>mmseg4j：最新版已从 <a href="https://code.google.com/p/mmseg4j/" target="_blank" rel="noopener">https://code.google.com/p/mmseg4j/</a> 移至 <a href="https://github.com/chenlb/mmseg4j-solr，支持Lucene" target="_blank" rel="noopener">https://github.com/chenlb/mmseg4j-solr，支持Lucene</a> 4.10，且在github中最新提交代码是 2014 年 6 月，从 09 年～ 14 年一共有： 18 个版本，也就是一年几乎有 3 个大小版本，有较大的活跃度，用了mmseg算法。</li><li>IK-analyzer： 最新版在<a href="https://code.google.com/p/ik-analyzer/上，支持Lucene" target="_blank" rel="noopener">https://code.google.com/p/ik-analyzer/上，支持Lucene</a> 4.10从 2006 年12 月推出1.0版开始， IKAnalyzer已经推出了 4 个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。从3.0版本开 始，IK发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。在 2012 版本中，IK实现了简单的分词 歧义排除算法，标志着IK分词器从单纯的词典分词向模拟语义分词衍化。 但是也就是2012 年 12 月后没有在更新。</li><li>ansj_seg：最新版本在 <a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="noopener">https://github.com/NLPchina/ansj_seg</a> tags仅有1.1版本，从 2012 年到2014 年更新了大小 6 次，但是作者本人在 2014 年 10 月 10 日说明：“可能我以后没有精力来维护ansj_seg了”，现在由”nlp_china”管理。 2014 年 11 月有更新。并未说明是否支持Lucene，是一个由CRF（条件随机场）算法所做的分词算法。</li><li>imdict-chinese-analyzer：最新版在 <a href="https://code.google.com/p/imdict-chinese-analyzer/" target="_blank" rel="noopener">https://code.google.com/p/imdict-chinese-analyzer/</a> ， 最新更新也在 2009 年 5 月，下载源码，不支持Lucene 4.10 。是利用HMM（隐马尔科夫链）算法。</li><li>Jcseg：最新版本在git.oschina.net/lionsoul/jcseg，支持Lucene 4.10，作者有较高的活跃度。利用mmseg算法。</li></ul><h3 id="7-4-3-使用中文分词器IKAnalyzer"><a href="#7-4-3-使用中文分词器IKAnalyzer" class="headerlink" title="7.4.3    使用中文分词器IKAnalyzer"></a>7.4.3    使用中文分词器IKAnalyzer</h3><p>IKAnalyzer继承Lucene的Analyzer抽象类，使用IKAnalyzer和Lucene自带的分析器方法一样，将Analyzer测试代码改为IKAnalyzer测试中文分词效果。</p><p>如果使用中文分词器ik-analyzer，就需要在索引和搜索程序中使用一致的分词器：IK-analyzer。</p><p>1、添加依赖, pom.xml中加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- IK中文分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、加入配置文件:</p><p><img src="https://img-blog.csdnimg.cn/20200815151004109.png" alt="image-20200815144413628"></p><p>3、测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用第三方分词器(IK分词)</span></span><br><span class="line"><span class="comment"> * 特点: 支持中文语义分析, 提供停用词典, 提供扩展词典, 供程序员扩展使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestIKAnalyzer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建分词器,分析文档，对文档进行分词</span></span><br><span class="line">    Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建Directory对象,声明索引库的位置</span></span><br><span class="line">    Directory directory = FSDirectory.open(Paths.get(<span class="string">"E:\\LuceneDir"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建IndexWriteConfig对象，写入索引需要的配置</span></span><br><span class="line">    IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建IndexWriter写入对象</span></span><br><span class="line">    IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.写入到索引库，通过IndexWriter添加文档对象document</span></span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"vivo X23 8GB+128GB 幻夜蓝,水滴屏全面屏,游戏手机.移动联通电信全网通4G手机"</span>, Field.Store.YES));</span><br><span class="line">    indexWriter.addDocument(doc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.释放资源</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试结果</p><p><img src="https://img-blog.csdnimg.cn/20200815151010320.png" alt="image-20200815144534111"></p><h3 id="7-4-4-扩展中文词库"><a href="#7-4-4-扩展中文词库" class="headerlink" title="7.4.4    扩展中文词库"></a>7.4.4    扩展中文词库</h3><p>如果想配置扩展词和停用词，就创建扩展词的文件和停用词的文件。</p><p>从ikanalyzer包中拷贝配置文件</p><p><img src="https://img-blog.csdnimg.cn/20200815151028230.png" alt="image-20200815144603035"></p><p>拷贝到资源文件夹中</p><p><img src="https://img-blog.csdnimg.cn/20200815151038797.png" alt="image-20200815144637464"></p><p><strong>IKAnalyzer.cfg.xml配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>ext.dic;<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_stopwords"</span>&gt;</span>stopword.dic;<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>停用词典stopword.dic作用 :</strong></p><p>停用词典中的词例如: a, an, the, 的, 地, 得等词汇, 凡是出现在停用词典中的字或者词, 在切分词的时候会被过滤掉.</p><p><strong>扩展词典ext.dic作用 :</strong></p><p>扩展词典中的词例如: 程序员, 贵州茅台等专有名词, 在汉语中一些公司名称, 行业名称, 分类, 品牌等不是汉语中的词汇, 是专有名词. 这些分词器默认不识别, 所以需要放入扩展词典中, 效果是被强制分成一个词.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-搜索技术理论基础&quot;&gt;&lt;a href=&quot;#1-搜索技术理论基础&quot; class=&quot;headerlink&quot; title=&quot;1.    搜索技术理论基础&quot;&gt;&lt;/a&gt;1.    搜索技术理论基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-为什么要学习Lucene&quot;&gt;&lt;a href=&quot;#1-1-为什么要学习Lucene&quot; class=&quot;headerlink&quot; title=&quot;1.1    为什么要学习Lucene&quot;&gt;&lt;/a&gt;1.1    为什么要学习Lucene&lt;/h2&gt;&lt;p&gt;原来的方式实现搜索功能，我们的搜索流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020081515031765.png&quot; alt=&quot;image-20200815130627095&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图就是原始搜索引擎技术，如果用户比较少而且数据库的数据量比较小，那么这种方式实现搜索功能在企业中是比较常见的。&lt;/p&gt;
&lt;p&gt;但是数据量过多时，数据库的压力就会变得很大，查询速度会变得非常慢。我们需要使用更好的解决方案来分担数据库的压力。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="业务解决方案" scheme="https://wgy1993.gitee.io/tags/%E4%B8%9A%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="Lucene" scheme="https://wgy1993.gitee.io/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="https://wgy1993.gitee.io/archives/6f2612a2.html"/>
    <id>https://wgy1993.gitee.io/archives/6f2612a2.html</id>
    <published>2020-08-12T06:17:29.000Z</published>
    <updated>2020-08-12T06:37:06.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1.    SpringBoot简介"></a>1.    SpringBoot简介</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化老的Spring 应用开发。该框架使用了自动方式来对开发工程进行配置，减少开发人员定义配置复杂度。</p><a id="more"></a><h2 id="1-1-设计初衷"><a href="#1-1-设计初衷" class="headerlink" title="1.1    设计初衷"></a>1.1    设计初衷</h2><ul><li>为Spring开发者提供一种，更快速、体验更好的Spring应用开发方式。</li><li>开箱即用，同时也可快速扩展，嵌入式的Tomcat。</li><li>绝对没有冗余代码，无需XML配置。</li></ul><h2 id="1-2-核心功能"><a href="#1-2-核心功能" class="headerlink" title="1.2    核心功能"></a>1.2    核心功能</h2><ul><li>核心能力：Spring容器、日志、<strong>自动配置AutoCongfiguration</strong>、<strong>Starters</strong></li><li>web应用的能力：MVC、嵌入式容器</li><li>数据访问(持久化)：关系型数据库、非关系型数据库</li><li>强大的整合其他技术的能力</li><li>测试：强悍的应用测试</li></ul><h3 id="1-2-1-SpringBoot在开发中的地位"><a href="#1-2-1-SpringBoot在开发中的地位" class="headerlink" title="1.2.1    SpringBoot在开发中的地位"></a>1.2.1    SpringBoot在开发中的地位</h3><p>1、农业时代Java开发方式：</p><ul><li>基于Java底层原生API，纯手动去实现，典型技术Html、JavaScript、CSS，JDBC，DBUtils，Socket…..</li><li>框架是拯救者，解放了农业时代的程序猿们，框架为我们做的更多</li></ul><p>2、工业时代Java开发方式：</p><ul><li>各种框架一顿搞：典型代表Spring，SpringMVC，Mybatis，Hibernate，Struts，Freemaker，JBPM…</li><li>微服务是拯救者，解放了工业时代的程序猿们，微服务让我们过上了小康生活</li></ul><p>3、现代化Java开发方式：</p><ul><li>SpringBoot整合并简化一切Spring应用开发中的技术</li><li>各种SpringCloud微服务：服务注册与发现，负载均衡与熔断，网关和集群</li><li>想要学习SpringCloud的整套微服务架构系统，必先学习SpringBoot，它是SpringCloud的基础。SpringCloud项目都是SpringBoot开发出来的。</li></ul><p>4、人工智能化的Java开发方式：</p><ul><li>在未来。智能Ai可以替我们写代码，到时候我们都就做机器人的指挥者，不用干活。闲余时间天天玩游戏…</li></ul><p><img src="https://img-blog.csdnimg.cn/20200812140155328.png" alt="image-20200812101442950"></p><h2 id="1-3-开发环境要求"><a href="#1-3-开发环境要求" class="headerlink" title="1.3    开发环境要求"></a>1.3    开发环境要求</h2><ul><li>Spring Boot 的2.1.7.RELEASES正式发行版</li><li>使用Java8或 Java 11</li><li>Spring版本是5.1.9及以上</li><li>构建工具版本：Maven ，版本要求是3.3及以上。</li><li>Servlet容器版本：Spring Boot应用程序最低支持到Servlet 3.1的容器</li></ul><table><thead><tr><th>Name</th><th>Servlet Version</th></tr></thead><tbody><tr><td>Tomcat 9.0</td><td>4.0</td></tr><tr><td>Jetty 9.4</td><td>3.1</td></tr><tr><td>Undertow 2.0</td><td>4.0</td></tr></tbody></table><h2 id="1-4-Spring怎么做Web开发？"><a href="#1-4-Spring怎么做Web开发？" class="headerlink" title="1.4    Spring怎么做Web开发？"></a>1.4    Spring怎么做Web开发？</h2><p>我们怎么开发一个web项目：</p><ol><li>web.xml配置：SpringMVC核心控制器(DispatchServlet)，Spring容器监听器，编码过滤器….</li><li>Spring 配置：包扫描(service、dao)，配置数据源，配置事务….</li><li>SpringMVC配置：包扫描(controller)，视图解析器，注解驱动，拦截器，静态资源….</li><li>日志配置</li><li>少量业务代码</li><li>…</li><li>部署 Tomcat 调试，每次测试都需要部署</li><li>…</li></ol><p>但是如果用 Spring Boot 呢？</p><p>超简单！无需配置！！无感Tomcat！超迅速搭建功能强大的整套 Web！到底多简单？入门案例揭晓。</p><h1 id="2-SpringBoot快速入门"><a href="#2-SpringBoot快速入门" class="headerlink" title="2.    SpringBoot快速入门"></a>2.    SpringBoot快速入门</h1><h2 id="2-1-Maven搭建SpringBoot工程"><a href="#2-1-Maven搭建SpringBoot工程" class="headerlink" title="2.1    Maven搭建SpringBoot工程"></a>2.1    Maven搭建SpringBoot工程</h2><p>Maven搭建SpringBoot工程，实现web的请求响应。浏览器访问在页面中输出 helloworld 。</p><h3 id="2-1-1-实现步骤"><a href="#2-1-1-实现步骤" class="headerlink" title="2.1.1    实现步骤"></a>2.1.1    实现步骤</h3><ol><li>创建Maven工程</li><li>pom.xml文件中配置起步依赖</li><li>编写SpringBoot启动引导类</li><li>编写Controller</li><li>访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a> 测试</li></ol><h3 id="2-1-2-实现过程"><a href="#2-1-2-实现过程" class="headerlink" title="2.1.2    实现过程"></a>2.1.2    实现过程</h3><h4 id="2-1-2-1-创建Maven工程"><a href="#2-1-2-1-创建Maven工程" class="headerlink" title="2.1.2.1    创建Maven工程"></a>2.1.2.1    创建Maven工程</h4><h4 id="2-1-2-2-配置起步依赖"><a href="#2-1-2-2-配置起步依赖" class="headerlink" title="2.1.2.2    配置起步依赖"></a>2.1.2.2    配置起步依赖</h4><p>在pom.xml文件中配置父坐标和web的起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承SpringBoot父POM文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web 开发的相关依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-3-编写SpringBoot引导类"><a href="#2-1-2-3-编写SpringBoot引导类" class="headerlink" title="2.1.2.3    编写SpringBoot引导类"></a>2.1.2.3    编写SpringBoot引导类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写SpringBoot引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span><span class="comment">//开启自动配置</span></span><br><span class="line"><span class="meta">@ComponentScan</span>()<span class="comment">//包扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-4-编写Controller"><a href="#2-1-2-4-编写Controller" class="headerlink" title="2.1.2.4    编写Controller"></a>2.1.2.4    编写Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-5-访问测试"><a href="#2-1-2-5-访问测试" class="headerlink" title="2.1.2.5    访问测试"></a>2.1.2.5    访问测试</h4><p><img src="https://img-blog.csdnimg.cn/20200812140422623.png" alt="image-20200812103150555"></p><h2 id="2-2-使用IDEA快速创建SpringBoot项目"><a href="#2-2-使用IDEA快速创建SpringBoot项目" class="headerlink" title="2.2    使用IDEA快速创建SpringBoot项目"></a>2.2    使用IDEA快速创建SpringBoot项目</h2><p>使用Spring Initializr 方式创建SpringBoot工程。然后实现入门案例的代码。</p><h3 id="2-2-1-实现步骤"><a href="#2-2-1-实现步骤" class="headerlink" title="2.2.1    实现步骤"></a>2.2.1    实现步骤</h3><ol><li>创建SpringBoot项目：使用Spring Initializr</li><li>配置项目元信息</li><li>勾选起步依赖</li><li>再次编写controller</li><li>访问接口测试：<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></li></ol><h3 id="2-2-2-实现过程"><a href="#2-2-2-实现过程" class="headerlink" title="2.2.2    实现过程"></a>2.2.2    实现过程</h3><h4 id="2-2-2-1-使用Spring-Initializr创建工程"><a href="#2-2-2-1-使用Spring-Initializr创建工程" class="headerlink" title="2.2.2.1    使用Spring Initializr创建工程"></a>2.2.2.1    使用Spring Initializr创建工程</h4><p><img src="https://img-blog.csdnimg.cn/20200812140511500.png" alt="image-20200812103611201"></p><h4 id="2-2-2-2-配置项目信息"><a href="#2-2-2-2-配置项目信息" class="headerlink" title="2.2.2.2    配置项目信息"></a>2.2.2.2    配置项目信息</h4><p><img src="https://img-blog.csdnimg.cn/20200812140554328.png" alt="image-20200812103645650"></p><h4 id="2-2-2-3-勾选起步依赖"><a href="#2-2-2-3-勾选起步依赖" class="headerlink" title="2.2.2.3    勾选起步依赖"></a>2.2.2.3    勾选起步依赖</h4><p><img src="https://img-blog.csdnimg.cn/20200812140617521.png" alt="image-20200812103807655"></p><p>创建完成后工程目录结构</p><p><img src="https://img-blog.csdnimg.cn/20200812140641978.png" alt="image-20200812103852555"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//组合注解，一个顶三个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootFasterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootFasterApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom文件介绍</p><p><img src="https://img-blog.csdnimg.cn/2020081214070931.png" alt="image-20200812103937407"></p><h4 id="2-2-2-4-编写Controller"><a href="#2-2-2-4-编写Controller" class="headerlink" title="2.2.2.4    编写Controller"></a>2.2.2.4    编写Controller</h4><p>同上案例</p><h4 id="2-2-2-5-访问测试"><a href="#2-2-2-5-访问测试" class="headerlink" title="2.2.2.5    访问测试"></a>2.2.2.5    访问测试</h4><p><a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><h2 id="2-3-SpringBoot工程热部署-LiveReload"><a href="#2-3-SpringBoot工程热部署-LiveReload" class="headerlink" title="2.3    SpringBoot工程热部署(LiveReload)"></a>2.3    SpringBoot工程热部署(LiveReload)</h2><p>每次重启服务很麻烦，可以使用热部署方式</p><h3 id="2-3-1-实现步骤"><a href="#2-3-1-实现步骤" class="headerlink" title="2.3.1    实现步骤"></a>2.3.1    实现步骤</h3><h4 id="2-3-1-1-添加热部署支持的依赖坐标"><a href="#2-3-1-1-添加热部署支持的依赖坐标" class="headerlink" title="2.3.1.1    添加热部署支持的依赖坐标"></a>2.3.1.1    添加热部署支持的依赖坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-boot开发工具jar包，支持热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-2-开启自动编译"><a href="#2-3-1-2-开启自动编译" class="headerlink" title="2.3.1.2    开启自动编译"></a>2.3.1.2    开启自动编译</h4><p>默认情况IDEA不会自动编译</p><ul><li><p>如何开启自动编译：需要设置 <code>Build Project Automatically</code></p><p><img src="https://img-blog.csdnimg.cn/20200812140754243.png" alt="image-20200812105539548"></p></li><li><p>如何开启运行时自动编译：快捷键<code>Shift + Ctrl + Alt + /</code> 打开Maintenance维护，选择Registry(注册表)开启运行时自动编译</p><p><img src="https://img-blog.csdnimg.cn/20200812140923160.png" alt="image-20200812105637910"></p></li></ul><p>注意：配置完成之后，IDEA进行热部署，偶尔也会失败。</p><h1 id="3-SpringBoot原理分析"><a href="#3-SpringBoot原理分析" class="headerlink" title="3.    SpringBoot原理分析"></a>3.    SpringBoot原理分析</h1><h2 id="3-1-依赖管理的原理"><a href="#3-1-依赖管理的原理" class="headerlink" title="3.1    依赖管理的原理"></a>3.1    依赖管理的原理</h2><p>继承了SpringBoot的父pom文件，继承了很多东西，其中最重要的要数<code>&lt;dependency management&gt;</code>。</p><ul><li>继承 <code>spring-boot-starter-parent</code> 的<code>&lt;dependency management&gt;</code></li><li><code>spring-boot-denpendencies</code>通过Maven的<code>&lt;dependency management&gt;</code>标签特性实现jar版本管理</li><li>通过<code>spring-boot-denpendencies</code>的pom管理所有公共Starter依赖的版本</li><li>Starter是随用随去，避免一下子继承父类所有的starter依赖</li></ul><h2 id="3-2-starters的原理"><a href="#3-2-starters的原理" class="headerlink" title="3.2    starters的原理"></a>3.2    starters的原理</h2><p><strong>starters是依赖关系的整理和封装</strong>。是一套依赖坐标的整合，可以让导入应用开发的依赖坐标更方便。</p><p>有了这些Starters，你获得Spring和其整合的所有技术的一站式服务。无需配置(自动配置)、无需复制粘贴依赖坐标，一个坐标即可完成所有入门级别操作。举例：JPA or Web开发，只需要导入 <code>spring-boot-starter-data-jpa</code> 或 <code>spring-boot-starter-web</code> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个Starter包含了当前功能下的许多必备依赖坐标，这些依赖坐标是项目开发，上线和运行必须的。同时这些依赖也支持依赖传递。举例： <code>spring-boot-starter-web</code> 包含了所有web开发必须的依赖坐标</p><p><img src="https://img-blog.csdnimg.cn/20200812140955719.png" alt="image-20200812113843440"></p><p>starter的命名规范：官方的starter写法 <code>spring-boot-starter-*</code> ，非官方的starter写法<code>thirdpartyproject-spring-boot-starter</code></p><p><a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/using-boot-build-systems.html#using-boot-starter" target="_blank" rel="noopener">常用的starters有哪些？</a></p><p>非常多，一下只列举部分：</p><p><img src="https://img-blog.csdnimg.cn/20200812141025956.png" alt="image-20200812114052518"></p><h2 id="3-3-自动配置-AutoConfiguration-原理"><a href="#3-3-自动配置-AutoConfiguration-原理" class="headerlink" title="3.3    自动配置(AutoConfiguration)原理"></a>3.3    自动配置(AutoConfiguration)原理</h2><ul><li>每个Starter基本都会有自动配置AutoConfiguration</li><li>AutoConfiguration的jar包定义了约定的默认配置信息。</li><li>SpringBoot采用约定大于配置设计思想。</li></ul><p><strong>自动配置的值在哪里？</strong></p><p><img src="https://img-blog.csdnimg.cn/20200812141109607.png" alt="image-20200812114314649"></p><p><strong>自动配置的值怎么才能生效？</strong></p><p>查看启动类注解@SpringBootApplication</p><p>追踪步骤：</p><ol><li>@EnableAutoConfiguration</li><li>@Import({AutoConfigurationImportSelector.class})</li><li>spring.factories</li><li>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</li><li>@EnableConfigurationProperties({ServerProperties.class})</li><li>private final ServerProperties.Tomcat tomcat = new ServerProperties.Tomcat();</li></ol><p><img src="https://img-blog.csdnimg.cn/20200812141133913.png" alt="image-20200812114757734"></p><p>有了自动配置，那么基本全部采用默认配置。当然也可以更改默认配置。</p><h1 id="4-SpringBoot的配置文件"><a href="#4-SpringBoot的配置文件" class="headerlink" title="4.    SpringBoot的配置文件"></a>4.    SpringBoot的配置文件</h1><p>我们知道SpringBoot是<strong>约定大于配置</strong>的，所以很多配置都有默认值。如果想修改默认配置，可以使用application.properties或application.yml(application.yaml)自定义配置。SpringBoot默认从Resource目录加载自定义配置文件。application.properties是键值对类型。application.yml是SpringBoot中一种新的配置文件方式。</p><p><strong>例如：</strong></p><p>application.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">demo</span></span><br></pre></td></tr></table></figure><p>application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">    <span class="comment"># Path路径</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/demo</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">server.servlet.context-path:</span> <span class="string">/demo</span></span><br></pre></td></tr></table></figure><h2 id="4-1-application-yml配置文件"><a href="#4-1-application-yml配置文件" class="headerlink" title="4.1    application.yml配置文件"></a>4.1    application.yml配置文件</h2><p>YML文件格式是YAML(YAML Aint Markup Language)编写的文件格式。可以直观被电脑识别的格式。容易阅读，容易与脚本语言交互。可以支持各种编程语言(C/C++、Ruby、Python、Java、Perl、C#、PHP)。以数据为核心，比XML更简洁。扩展名为.yml或.yaml</p><h3 id="4-1-1-配置普通数据语法"><a href="#4-1-1-配置普通数据语法" class="headerlink" title="4.1.1    配置普通数据语法"></a>4.1.1    配置普通数据语法</h3><p>key: value</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">haohao</span></span><br></pre></td></tr></table></figure><p>注意：Value之前有一个空格</p><h3 id="4-1-2-配置对象数据"><a href="#4-1-2-配置对象数据" class="headerlink" title="4.1.2    配置对象数据"></a>4.1.2    配置对象数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">haohao</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">31</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 行内配置</span></span><br><span class="line"><span class="attr">person:</span> <span class="string">&#123;name:</span> <span class="string">haohao,age:</span> <span class="number">31</span><span class="string">,addr:</span> <span class="string">beijing&#125;</span></span><br></pre></td></tr></table></figure><p>注意：yml语法中，相同缩进代表同一个级别</p><h3 id="4-1-3-配置集合、数组数据语法"><a href="#4-1-3-配置集合、数组数据语法" class="headerlink" title="4.1.3    配置集合、数组数据语法"></a>4.1.3    配置集合、数组数据语法</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="attr">citys:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tianjin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chongqing</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 或者行内注入</span></span><br><span class="line"><span class="attr">citys:</span> <span class="string">[beijing,tianjin,shanghai,chongqing]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合中的元素是对象形式</span></span><br><span class="line"><span class="attr">students:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">      <span class="attr">score:</span> <span class="number">100</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">28</span></span><br><span class="line">      <span class="attr">score:</span> <span class="number">88</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wangwu</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">38</span></span><br><span class="line">      <span class="attr">score:</span> <span class="number">90</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># 或者使用行内注入</span></span><br><span class="line"><span class="attr">student:</span> <span class="string">[&#123;name:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">,score:</span> <span class="number">100</span><span class="string">&#125;,&#123;name:</span> <span class="string">lisi,age:</span> <span class="number">28</span><span class="string">,score:</span> <span class="number">88</span><span class="string">&#125;,&#123;name:</span> <span class="string">wangwu,age:</span> <span class="number">38</span><span class="string">,score:</span> <span class="number">90</span><span class="string">&#125;]</span></span><br></pre></td></tr></table></figure><p>注意：value与-之间存在一个空格</p><h2 id="4-2-SpringBoot配置信息的查询"><a href="#4-2-SpringBoot配置信息的查询" class="headerlink" title="4.2    SpringBoot配置信息的查询"></a>4.2    SpringBoot配置信息的查询</h2><p>修改配置时，配置项目查询方式</p><p>第一种：自动配置jar包中的META-INF文件夹下，spring-configuration-metadata.json文件中</p><p><img src="https://img-blog.csdnimg.cn/20200812141202409.png" alt="image-20200812115920515"></p><p><img src="https://img-blog.csdnimg.cn/20200812141223122.png" alt="image-20200812115939216"></p><p>第二种：官方配置文件地址</p><p>官方查询地址：<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties</a></p><h2 id="4-3-配置文件属性注入Bean"><a href="#4-3-配置文件属性注入Bean" class="headerlink" title="4.3    配置文件属性注入Bean"></a>4.3    配置文件属性注入Bean</h2><h3 id="4-3-1-使用注解-Value映射"><a href="#4-3-1-使用注解-Value映射" class="headerlink" title="4.3.1    使用注解@Value映射"></a>4.3.1    使用注解@Value映射</h3><p>@value注解将配置文件的值映射到Spring管理的Bean属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;persion.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-使用注解-ConfigurationProperties映射"><a href="#4-3-2-使用注解-ConfigurationProperties映射" class="headerlink" title="4.3.2    使用注解@ConfigurationProperties映射"></a>4.3.2    使用注解@ConfigurationProperties映射</h3><p>通过注解@ConfigurationProperties(prefix=’’配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射。</p><p>使用@ConfigurationProperties方式必须提供Setter方法，使用@Value注解不需要Setter方法。</p><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">citys:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">guangzhou</span></span><br><span class="line">    <span class="attr">birthday:</span> <span class="number">2019</span><span class="string">/08/13</span></span><br><span class="line">    <span class="attr">animals:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dog</span></span><br><span class="line">          <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cat</span></span><br><span class="line">          <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String[] citys;</span><br><span class="line">    <span class="keyword">private</span> List&lt;animal&gt; animals;</span><br><span class="line">    </span><br><span class="line">    get/setter方法,toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-SpringBoot集成一切"><a href="#5-SpringBoot集成一切" class="headerlink" title="5.    SpringBoot集成一切"></a>5.    SpringBoot集成一切</h1><h2 id="5-1-集成-Spring-Data-JPA"><a href="#5-1-集成-Spring-Data-JPA" class="headerlink" title="5.1    集成 Spring Data JPA"></a>5.1    集成 Spring Data JPA</h2><p>Spring Data是一个用于<strong>简化数据访问</strong>，并支持云服务的开源框架。其主要目标是<strong>使得对数据的访问变得方便快捷</strong>。Spring Data JPA 是其中之一。</p><p><img src="https://img-blog.csdnimg.cn/20200812141253553.png" alt="image-20200812121504134"></p><p>Spring Data JPA 是Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用简的代码即可实现对数据库的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！</p><p>目标：使用SpringBoot整合SpringDataJPA，完成数据的增删改查基本功能。</p><h3 id="5-1-1-实现步骤"><a href="#5-1-1-实现步骤" class="headerlink" title="5.1.1    实现步骤"></a>5.1.1    实现步骤</h3><ol><li>创建SpringBoot工程</li><li>勾选依赖坐标</li><li>配置：数据库连接、jpa相关</li><li>创建User表、创建实体User配置实体</li><li>编写UserRepository</li><li>编写Controller、Service</li><li>访问测试</li></ol><h3 id="5-1-2-实现过程"><a href="#5-1-2-实现过程" class="headerlink" title="5.1.2    实现过程"></a>5.1.2    实现过程</h3><h4 id="5-1-2-1-创建SpringBoot工程"><a href="#5-1-2-1-创建SpringBoot工程" class="headerlink" title="5.1.2.1    创建SpringBoot工程"></a>5.1.2.1    创建SpringBoot工程</h4><p><img src="https://img-blog.csdnimg.cn/20200812141319955.png" alt="image-20200812121740659"></p><h4 id="5-1-2-2-勾选依赖坐标"><a href="#5-1-2-2-勾选依赖坐标" class="headerlink" title="5.1.2.2    勾选依赖坐标"></a>5.1.2.2    勾选依赖坐标</h4><p><img src="https://img-blog.csdnimg.cn/20200812141341100.png" alt="image-20200812121818334"></p><h4 id="5-1-2-3-配置：数据库连接、jpa相关"><a href="#5-1-2-3-配置：数据库连接、jpa相关" class="headerlink" title="5.1.2.3    配置：数据库连接、jpa相关"></a>5.1.2.3    配置：数据库连接、jpa相关</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="comment"># DB 配置(可以不写，有嵌入式数据库，如果不写必须显示导入嵌入式数据库starter，h2database)</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment">#jpa 相关配置(可以不写，有默认值)</span></span><br><span class="line"><span class="comment"># 数据库类型</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"># 是否显示sql</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># hibernate初始化数据库表策略</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="comment"># 是否生成数据库定义表语句</span></span><br><span class="line"><span class="meta">spring.jpa.generate-ddl</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="5-1-2-4-创建表，创建实体配置实体"><a href="#5-1-2-4-创建表，创建实体配置实体" class="headerlink" title="5.1.2.4    创建表，创建实体配置实体"></a>5.1.2.4    创建表，创建实体配置实体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for &#96;user&#96;</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">    &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;username&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;password&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;name&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;zhangsan&#39;, &#39;123&#39;, &#39;张三&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;lisi&#39;, &#39;123&#39;, &#39;李四&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span><span class="comment">//实体类注解</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)<span class="comment">//关联数据库表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注解设置当前id为注解</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">//注解值生成策略</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="comment">//getter setter</span></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-5-编写UserRepository"><a href="#5-1-2-5-编写UserRepository" class="headerlink" title="5.1.2.5    编写UserRepository"></a>5.1.2.5    编写UserRepository</h4><p>泛型需要实体类，和实体类的ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-6-编写Controller、Service"><a href="#5-1-2-6-编写Controller、Service" class="headerlink" title="5.1.2.6    编写Controller、Service"></a>5.1.2.6    编写Controller、Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        userDao.delete(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-集成MyBatis"><a href="#5-2-集成MyBatis" class="headerlink" title="5.2    集成MyBatis"></a>5.2    集成MyBatis</h2><p>使用SpringBoot整合MyBatis，完成查询所有功能</p><h3 id="5-2-1-实现步骤"><a href="#5-2-1-实现步骤" class="headerlink" title="5.2.1    实现步骤"></a>5.2.1    实现步骤</h3><ol><li>创建SpringBoot工程</li><li>勾选依赖坐标</li><li>数据库连接信息</li><li>创建User表、创建实体User</li><li>编写三层架构：Mapper、Service、controller，编写查询所有的方法</li><li>配置Mapper映射文件</li><li>在application.properties中添加MyBatis配置，扫描mapper.xml和mapper</li><li>访问测试地址<a href="http://localhost:8080/queryUsers" target="_blank" rel="noopener">http://localhost:8080/queryUsers</a></li></ol><h3 id="5-2-2-实现过程"><a href="#5-2-2-实现过程" class="headerlink" title="5.2.2    实现过程"></a>5.2.2    实现过程</h3><h4 id="5-2-2-1-创建SpringBoot工程"><a href="#5-2-2-1-创建SpringBoot工程" class="headerlink" title="5.2.2.1    创建SpringBoot工程"></a>5.2.2.1    创建SpringBoot工程</h4><p><img src="https://img-blog.csdnimg.cn/20200812141408437.png" alt="image-20200812123235526"></p><h4 id="5-2-2-2-勾选依赖坐标"><a href="#5-2-2-2-勾选依赖坐标" class="headerlink" title="5.2.2.2    勾选依赖坐标"></a>5.2.2.2    勾选依赖坐标</h4><p><img src="https://img-blog.csdnimg.cn/20200812141428569.png" alt="image-20200812123304187"></p><h4 id="5-2-2-3-数据库连接信息"><a href="#5-2-2-3-数据库连接信息" class="headerlink" title="5.2.2.3    数据库连接信息"></a>5.2.2.3    数据库连接信息</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="comment"># DB 配置</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure><p>数据库连接地址后加 <code>?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</code> ，不然会报错</p><h4 id="5-2-2-4-创建User表、实体User"><a href="#5-2-2-4-创建User表、实体User" class="headerlink" title="5.2.2.4    创建User表、实体User"></a>5.2.2.4    创建User表、实体User</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for &#96;user&#96;</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">    &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;username&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;password&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    &#96;name&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;zhangsan&#39;, &#39;123&#39;, &#39;张三&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;lisi&#39;, &#39;123&#39;, &#39;李四&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="comment">//getter setter...</span></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-5-编写Mapper"><a href="#5-2-2-5-编写Mapper" class="headerlink" title="5.2.2.5    编写Mapper"></a>5.2.2.5    编写Mapper</h4><p>使用@Mapper标记该类是一个Mapper接口，可以被SpringBoot自动扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span><span class="comment">//表明当前接口是一个Mapper，被Mybatis框架扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-6-配置Mapper映射文件"><a href="#5-2-2-6-配置Mapper映射文件" class="headerlink" title="5.2.2.6    配置Mapper映射文件"></a>5.2.2.6    配置Mapper映射文件</h4><p>在src/main/resources/mapper路径下加入UserMapper.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        INSERT into user (username, password, name)</span><br><span class="line">        VALUES (#&#123;username&#125;, #&#123;password&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        set username=#&#123;username&#125;,</span><br><span class="line">            password=#&#123;password&#125;,</span><br><span class="line">            name=#&#123;name&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-7-添加MyBatis信息"><a href="#5-2-2-7-添加MyBatis信息" class="headerlink" title="5.2.2.7    添加MyBatis信息"></a>5.2.2.7    添加MyBatis信息</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描实体</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.wgy.domain</span></span><br><span class="line"><span class="comment"># mapper.xml配置文件路径</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*Mapper.xml</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-8-编写Controller"><a href="#5-2-2-8-编写Controller" class="headerlink" title="5.2.2.8    编写Controller"></a>5.2.2.8    编写Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-集成Spring-Data-Redis"><a href="#5-3-集成Spring-Data-Redis" class="headerlink" title="5.3    集成Spring Data Redis"></a>5.3    集成Spring Data Redis</h2><p>SpringBoot整合了Redis之后，做用户数据查询缓存</p><h3 id="5-3-1-实现步骤"><a href="#5-3-1-实现步骤" class="headerlink" title="5.3.1    实现步骤"></a>5.3.1    实现步骤</h3><ol><li>添加Redis的Starter</li><li>在application.properties中配置redis端口、地址</li><li>注入RedisTemplate操作Redis缓存查询所有用户数据</li><li>测试缓存</li></ol><h3 id="5-3-2-实现过程"><a href="#5-3-2-实现过程" class="headerlink" title="5.3.2    实现过程"></a>5.3.2    实现过程</h3><h4 id="5-3-2-1-添加Redis起步依赖"><a href="#5-3-2-1-添加Redis起步依赖" class="headerlink" title="5.3.2.1    添加Redis起步依赖"></a>5.3.2.1    添加Redis起步依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring data redis 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-2-2-配置Redis连接信息"><a href="#5-3-2-2-配置Redis连接信息" class="headerlink" title="5.3.2.2    配置Redis连接信息"></a>5.3.2.2    配置Redis连接信息</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis 配置(不填也是可以的)</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.142.128</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><h4 id="5-3-2-3-注入RedisTemplate测试Redis操作"><a href="#5-3-2-3-注入RedisTemplate测试Redis操作" class="headerlink" title="5.3.2.3    注入RedisTemplate测试Redis操作"></a>5.3.2.3    注入RedisTemplate测试Redis操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        Object findAllusers = redisTemplate.boundValueOps(<span class="string">"findAllusers"</span>).get();</span><br><span class="line">        <span class="comment">//从缓存取值</span></span><br><span class="line">        <span class="comment">//如果没有，从数据库中查询,放到缓存然后返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(findAllusers)) &#123;</span><br><span class="line">            List&lt;User&gt; all = userService.findAll();</span><br><span class="line">            ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            findAllusers = objectMapper.writeValueAsString(all);<span class="comment">//把对象数据格式转化为json字符串</span></span><br><span class="line">            redisTemplate.boundValueOps(<span class="string">"findAllusers"</span>).set(findAllusers);<span class="comment">//数据存储到缓存中</span></span><br><span class="line">            <span class="keyword">return</span> findAllusers + <span class="string">"从数据库查询"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果有直接返回</span></span><br><span class="line">        <span class="keyword">return</span> findAllusers + <span class="string">"从redis缓存中查询"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-集成定时器"><a href="#5-4-集成定时器" class="headerlink" title="5.4    集成定时器"></a>5.4    集成定时器</h2><p>使用SpringBoot开发定时器，每隔5秒输出一个当前时间。</p><p>实现步骤：</p><h3 id="5-4-1-开启定时器注解"><a href="#5-4-1-开启定时器注解" class="headerlink" title="5.4.1    开启定时器注解"></a>5.4.1    开启定时器注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-配置定时器方法"><a href="#5-4-2-配置定时器方法" class="headerlink" title="5.4.2    配置定时器方法"></a>5.4.2    配置定时器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Timer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0/5 * * * * ?")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initialDelay = 项目启动后，多久执行,fixedRate = 固定的频率执行</span></span><br><span class="line"><span class="comment">     * initialDelay = 项目启动后, 多久执行，fixedDelay = 上一个任务执行完成，多久之后执行下一个任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(initialDelay = <span class="number">1000</span>, fixedRate = <span class="number">5000</span>)</span><br><span class="line"><span class="comment">//    @Scheduled(initialDelay = 1000,fixedDelay = 5000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前系统时间："</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-扩展了解"><a href="#5-5-扩展了解" class="headerlink" title="5.5    扩展了解"></a>5.5    扩展了解</h2><ol><li>集成 MongoDB</li><li>集成 ElasticSearch</li><li>集成 Memcached</li><li>集成邮件服务：普通邮件、模板邮件、验证码、带Html的邮件</li><li>集成RabbitMQ消息中间件</li><li>集成Freemarker或者Thymeleaf</li><li>…………….</li></ol><h1 id="6-SpringBoot如何代码测试"><a href="#6-SpringBoot如何代码测试" class="headerlink" title="6.    SpringBoot如何代码测试"></a>6.    SpringBoot如何代码测试</h1><p>SpringBoot集成JUnit测试功能，进行查询用户接口测试。</p><p>实现步骤：</p><h2 id="6-1-添加Junit起步依赖-默认就有"><a href="#6-1-添加Junit起步依赖-默认就有" class="headerlink" title="6.1    添加Junit起步依赖(默认就有)"></a>6.1    添加Junit起步依赖(默认就有)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring boot测试依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-编写测试类"><a href="#6-2-编写测试类" class="headerlink" title="6.2    编写测试类"></a>6.2    编写测试类</h2><p>SpringRunner继承SpringJUnit4ClassRunner，使用哪一个Spring提供的测试引擎都可以。指定运行测试的引擎</p><p>@SpringBootTest的属性值指的是引导类的字节码对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SpringbootMybatisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-Spring-Boot-如何打包部署"><a href="#7-Spring-Boot-如何打包部署" class="headerlink" title="7.    Spring Boot 如何打包部署"></a>7.    Spring Boot 如何打包部署</h1><p>启动方式有两种，一种是打成jar直接执行，另一种是打包成war包放到Tomcat服务下，启动Tomcat。</p><h2 id="7-1-打成Jar包部署"><a href="#7-1-打成Jar包部署" class="headerlink" title="7.1    打成Jar包部署"></a>7.1    打成Jar包部署</h2><p>执行maven打包命令或者使用IDEA的Maven工具打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 移动至项目根目录，与pom.xml同级</span></span><br><span class="line">mvn clean package</span><br><span class="line"><span class="comment">## 或者执行下面的命令 排除测试代码后进行打包</span></span><br><span class="line">mvn clean package  -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>需要注意项目pom.xml文件中的打包类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动命令：启动之前先检查自己的pom.xml文件中是否有springboot的maven插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/springboot_demo.jar</span><br></pre></td></tr></table></figure><p>启动命令的时候配置jvm参数也是可以的。然后查看一下Java的参数配置结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx80m -Xms20m --server.port=8090  -jar target/springboot_demo.jar</span><br></pre></td></tr></table></figure><h2 id="7-2-打成war包部署"><a href="#7-2-打成war包部署" class="headerlink" title="7.2    打成war包部署"></a>7.2    打成war包部署</h2><p>执行maven打包命令或者使用IDEA的Maven工具打包，需要修改pom.xml文件中的打包类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure><p>注册启动类：</p><p>创建 ServletInitializer.java，继承 SpringBootServletInitializer ，覆盖 configure()，把启动类Application 注册进去。外部 Web 应用服务器构建 Web Application Context 的时候，会把启动类添加进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web.xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(DemoApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行打包操作。同6.1 小节打包是一样的</p><ul><li>拷贝到Tomcat的webapp下，启动Tomcat访问即可</li><li>因为访问地址不再是根目录了，所有路径中需要加入项目名称：<a href="http://localhost:8080/springboot_demo/hello" target="_blank" rel="noopener">http://localhost:8080/springboot_demo/hello</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringBoot简介&quot;&gt;&lt;a href=&quot;#1-SpringBoot简介&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringBoot简介&quot;&gt;&lt;/a&gt;1.    SpringBoot简介&lt;/h1&gt;&lt;p&gt;Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化老的Spring 应用开发。该框架使用了自动方式来对开发工程进行配置，减少开发人员定义配置复杂度。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringBoot" scheme="https://wgy1993.gitee.io/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
