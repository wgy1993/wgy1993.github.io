<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wgy的博客</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wgy1993.gitee.io/"/>
  <updated>2020-11-25T05:25:36.982Z</updated>
  <id>https://wgy1993.gitee.io/</id>
  
  <author>
    <name>Wgy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类比推理</title>
    <link href="https://wgy1993.gitee.io/archives/112e0f47.html"/>
    <id>https://wgy1993.gitee.io/archives/112e0f47.html</id>
    <published>2020-11-25T05:18:48.000Z</published>
    <updated>2020-11-25T05:25:36.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-常见题型"><a href="#1-常见题型" class="headerlink" title="1.    常见题型"></a>1.    常见题型</h1><ul><li><p>两词型——A：B</p></li><li><p>三词型——A：B：C</p></li><li><p>填空型——A对于（）相当于（）对于B</p></li></ul><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20201125131250836.png" alt="image-20201125130135414"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-常见题型&quot;&gt;&lt;a href=&quot;#1-常见题型&quot; class=&quot;headerlink&quot; title=&quot;1.    常见题型&quot;&gt;&lt;/a&gt;1.    常见题型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;两词型——A：B&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三词型——A：B：C&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填空型——A对于（）相当于（）对于B&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="公务员" scheme="https://wgy1993.gitee.io/tags/%E5%85%AC%E5%8A%A1%E5%91%98/"/>
    
      <category term="判断推理" scheme="https://wgy1993.gitee.io/tags/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/"/>
    
      <category term="类比推理" scheme="https://wgy1993.gitee.io/tags/%E7%B1%BB%E6%AF%94%E6%8E%A8%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>图形推理</title>
    <link href="https://wgy1993.gitee.io/archives/b3af1734.html"/>
    <id>https://wgy1993.gitee.io/archives/b3af1734.html</id>
    <published>2020-11-25T05:07:55.000Z</published>
    <updated>2020-11-25T05:20:10.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概要"><a href="#1-概要" class="headerlink" title="1.    概要"></a>1.    概要</h1><p>图形推理一般分为平面推理和空间推理两大类题型。</p><p>平面推理规律包括：</p><ul><li>位置规律</li><li>样式规律</li><li>属性规律</li><li>数量规律</li><li>特殊规律</li></ul><a id="more"></a><p>空间推理规律包括：</p><ul><li>空间重构</li><li>立体拼合</li><li>截面图和三视图</li></ul><p><img src="https://img-blog.csdnimg.cn/20201125131226816.png" alt="image-20201123133808746"></p><h1 id="2-平面推理"><a href="#2-平面推理" class="headerlink" title="2.    平面推理"></a>2.    平面推理</h1><p>给出一组或两组图形，要求通过观察分析找出图形排列的规律。</p><p><strong>图形构成特点至上</strong></p><p>当看到数字时，要立刻告诉自己：这不是数字！这是图形！什么等差、奇偶统统抛到脑后，只看图形构成。</p><p>“图形构成特点至上”这一思维，同样可以应用到字母、汉字、星星、月亮等各种图形上，除少数省份会涉及字母的顺序、图形实际含义等考点之外，绝大多数图形推理都需要重点关注图形的构成特点。</p><h2 id="2-1-位置规律"><a href="#2-1-位置规律" class="headerlink" title="2.1    位置规律"></a>2.1    位置规律</h2><p><img src="https://img-blog.csdnimg.cn/20201125131004180.png" alt="image-20201122140905409"></p><h3 id="2-1-1-平移"><a href="#2-1-1-平移" class="headerlink" title="2.1.1    平移"></a>2.1.1    平移</h3><p>平移指图形中的某一个或几个元素沿特定方向进行有规律的移动。</p><ul><li><p>在平移题目中，“从头跑”比较普遍，应优先考虑。如果“从头跑”不构成规律，则考虑：“折返跑“（即平移到头后原路返回），其他”变态“规律，如左移1格，右移3格；再左移1格，右移3格……构成周期性变化规律。</p></li><li><p>宫格方向判定：</p><ul><li>九宫格优先横着看。</li><li>如果元素只在最外圈出现，优先考虑最外圈按时钟方向平移；</li><li>如果平移元素出现在非最外圈位置，优先考虑直线方向平移。</li><li>按行看黑块数量一致，优先考虑左右平移；</li><li>按列看黑块数量一致，优先考虑上下平移。</li></ul></li><li><p>秒杀技巧：</p><ul><li>看中间黑块的数量：中间颜色数量相同，优先考虑内外圈分开看；中间颜色数量不同，优先考虑直线走。</li><li>看哪里空，某行有纯白——按列（上下）走；某列有纯白——按行（左右）走</li></ul></li><li><p>元素位置互换</p><ul><li>当元素组成相同，整体上没有找到上下左右或时钟方向的平移规律，可以用相邻两幅图做对比，观察是否为元素位置互换</li></ul></li></ul><h3 id="2-1-2-旋转和翻转"><a href="#2-1-2-旋转和翻转" class="headerlink" title="2.1.2    旋转和翻转"></a>2.1.2    旋转和翻转</h3><p>旋转指图形在平面上按特定规律进行转动。</p><p>翻转指图形仅通过平面转动无法变化得到，必须要经过类似于“翻书”的动作才能得到。</p><ul><li><p>快速判断旋转、翻转：</p><ul><li>左右翻转：左右变、上下不变；</li><li>上下翻转：上下变、左右不变；</li><li>180°旋转：左右上下全都变。</li></ul></li><li><p>秒杀技巧：</p><ul><li>左右翻左右变，上下翻上下变，180全都变。</li></ul></li><li><p>“米”字形推理路线</p><ul><li>九宫格中间图形特殊（空白面），优先考虑“米”字形推理路线：”米“字形的上下左右以及对角线两端的图形都是由自身旋转180°得到对方的。</li></ul></li><li><p>时钟法</p><ul><li>当小元素比较多，并且呈环形排布（即可以连成一个圈）的时候，可以考虑用”时针法“。但是要注意，选定某种顺序后，所有图形都要按照相同顺序来画时针。</li></ul></li></ul><h2 id="2-2-样式规律"><a href="#2-2-样式规律" class="headerlink" title="2.2    样式规律"></a>2.2    样式规律</h2><p><img src="https://img-blog.csdnimg.cn/20201125131011110.png" alt="image-20201122151622349"></p><h3 id="2-2-1-遍历"><a href="#2-2-1-遍历" class="headerlink" title="2.2.1    遍历"></a>2.2.1    遍历</h3><p>图形特征：元素重复出现</p><p>遍历常见考法：</p><ul><li>外框的遍历；</li><li>内部图案的遍历。</li></ul><h3 id="2-2-2-加减同异"><a href="#2-2-2-加减同异" class="headerlink" title="2.2.2    加减同异"></a>2.2.2    加减同异</h3><p>图形特征：相同线条重复出现</p><p>相加：讲两图形中所有的元素（或线条）拼合成一幅新图形，重复的位置保留1次。</p><p>相减：当第一幅图的元素（或线条）完全包含第二幅图时，两图相减的结果，就是第一幅图去掉第二幅图所有元素（或线条）之后的图形。</p><p>求同：将两图形所有不同的元素（或线条）去掉，只留下相同的部分，形成一幅新图形。</p><p>求异：将两图形中所有相同的元素（或线条）去掉，只留下各自不同的部分，形成一幅新图形。</p><ul><li>小技巧：从选项挑差异线条入手</li><li>保留图形外框，只对内部线条进行求异。（近两年经常出现）</li><li>当样式运算特征明显，但单纯考虑加减同异做不出来，考虑样式规律与位置规律结合（平移、旋转、翻转）。<ul><li>先运算还是先位置？——谁搞特殊，先转谁：<ul><li>图1与图2更像，先运算最后转；</li><li>图1与图3更像，转图2；</li><li>图2与图3更像，转图1.</li></ul></li></ul></li></ul><h3 id="2-2-3-黑白运算"><a href="#2-2-3-黑白运算" class="headerlink" title="2.2.3    黑白运算"></a>2.2.3    黑白运算</h3><p>图形特征：图形轮廓和分割区域相同，不同区域“黑白”颜色不同，切黑块数量不成规律</p><ul><li>运算规则具体题目找，只要将4个公式全部列出，既可以保证不出错</li><li>黑+白不一定等于白+黑，要具体题目具体验证。</li><li>黑块数量相同，优先平移；</li><li>黑块数量不同，优先黑白运算。</li><li>黑白运算可优先找大面积相同色块运算</li></ul><h2 id="2-3-属性规律"><a href="#2-3-属性规律" class="headerlink" title="2.3    属性规律"></a>2.3    属性规律</h2><p><img src="https://img-blog.csdnimg.cn/20201125131029682.png" alt="image-20201122155758983"></p><h3 id="2-3-1-对称性"><a href="#2-3-1-对称性" class="headerlink" title="2.3.1    对称性"></a>2.3.1    对称性</h3><ul><li><p>轴对称：</p><ul><li>特征图：“等腰”图形</li><li>根据对称轴数量/方向选不出唯一答案，关注对称轴与图形的线、点、面的位置关系</li></ul></li><li><p>中心对称：</p><ul><li>特征图：平行四边形、S、N、Z变形图、相同图形反着放</li></ul></li><li><p>轴对称+中心对称</p><ul><li>特征图：图形存在相互垂直的对称轴</li></ul></li></ul><h3 id="2-3-2-曲直性"><a href="#2-3-2-曲直性" class="headerlink" title="2.3.2    曲直性"></a>2.3.2    曲直性</h3><p>出现明显的圆、弧等全曲线图，优先考虑曲直性</p><h3 id="2-3-3-开闭性"><a href="#2-3-3-开闭性" class="headerlink" title="2.3.3    开闭性"></a>2.3.3    开闭性</h3><p>图形特征：完整的图形留了小开口，考虑开闭性；生活化、主线条图形。</p><h2 id="2-4-数量规律"><a href="#2-4-数量规律" class="headerlink" title="2.4    数量规律"></a>2.4    数量规律</h2><p><img src="https://img-blog.csdnimg.cn/20201125131110232.png" alt="image-20201123122837221"></p><h3 id="2-4-1-面数量"><a href="#2-4-1-面数量" class="headerlink" title="2.4.1    面数量"></a>2.4.1    面数量</h3><ul><li><p>面：白色的封闭区域</p></li><li><p>曲直性：直线构成的面、曲线构成的面、直线和曲线构成的面。</p></li></ul><h3 id="2-4-2-线数量"><a href="#2-4-2-线数量" class="headerlink" title="2.4.2    线数量"></a>2.4.2    线数量</h3><ul><li><p>线：直线、曲线</p></li><li><p>曲线：出现明显拐点的曲线不算一条</p></li><li><p>数横/竖线：出现横竖特征图，但数直线无规律，可数横竖线</p></li><li><p>汉字部首：汉字里面包含的“一“、“丿”数量等</p></li><li><p>连通图：在不能重复的情况下，能够一笔画成的图形</p></li><li><p>奇点：发射奇数条线的点，注：端点也是奇点</p></li><li><p>如果存在多部分，则每部分的笔画数单独算，再相加</p></li><li><p>“日”：一个面分成两个面</p></li></ul><h3 id="2-4-3-点数量"><a href="#2-4-3-点数量" class="headerlink" title="2.4.3    点数量"></a>2.4.3    点数量</h3><ul><li>线与线的交点，端点不是交点</li><li>先数笔画再交点</li><li>出现数点特征，但整体数点无规律且存在曲直相交，考虑曲直交点</li><li>出现数点特征，但整体数点无规律，切图图形都有框架图形（圆居多），考虑框上、框内分开数</li></ul><h3 id="2-4-4-素数量"><a href="#2-4-4-素数量" class="headerlink" title="2.4.4    素数量"></a>2.4.4    素数量</h3><ul><li>颜色不同算2种</li><li>大小不同比例缩放算1种</li><li>出现小元素做题思路：<ul><li>优先考虑元素种类和个数</li><li>选不出唯一答案，考虑分开数每一种元素的个数在运算（加减乘除）</li></ul></li><li>部分数：连在一起就是一部分</li><li>生活化粗线条图形常见考法：<ul><li>部分数</li><li>面（粗线条内部留白较多）</li><li>属性规律（对称、开闭）</li></ul></li></ul><h3 id="2-4-5-角数量"><a href="#2-4-5-角数量" class="headerlink" title="2.4.5    角数量"></a>2.4.5    角数量</h3><ul><li>角的个数</li><li>直线明显，优先考虑直角</li></ul><h2 id="2-5-特殊规律"><a href="#2-5-特殊规律" class="headerlink" title="2.5    特殊规律"></a>2.5    特殊规律</h2><p><img src="https://img-blog.csdnimg.cn/20201125131050810.png" alt="image-20201122165010997"></p><h3 id="2-5-1-图形间关系"><a href="#2-5-1-图形间关系" class="headerlink" title="2.5.1    图形间关系"></a>2.5.1    图形间关系</h3><p>图形特征：题干出现两个或多个封闭图形连在一起</p><ul><li><p>相离：相离</p></li><li><p>相交：图形间有公共部分</p></li><li><p>相压：两图形上下覆盖，被压图形有部分线条被覆盖。</p></li></ul><h3 id="2-5-2-功能元素"><a href="#2-5-2-功能元素" class="headerlink" title="2.5.2    功能元素"></a>2.5.2    功能元素</h3><p>图形特征：每幅图都出现黑点、白点或箭头等小元素</p><h1 id="3-空间推理"><a href="#3-空间推理" class="headerlink" title="3.    空间推理"></a>3.    空间推理</h1><h2 id="3-1-空间重构"><a href="#3-1-空间重构" class="headerlink" title="3.1    空间重构"></a>3.1    空间重构</h2><p><img src="https://img-blog.csdnimg.cn/20201125131208140.png" alt="imagep><h3 id="3-1-1-相对面"><a href="#3-1-1-相对面" class="headerlink" title="3.1.1    相对面"></a>3.1.1    相对面</h3><p>判断相对面：</p><ul><li>同行或同列相隔一个面；</li><li>“Z”字形两端，且紧靠着“Z”字形中间那条线</li></ul><h3 id="3-1-2-相邻面"><a href="#3-1-2-相邻面" class="headerlink" title="3.1.2    相邻面"></a>3.1.2    相邻面</h3><p>如何确定公共边：</p><ul><li>直接相邻的两个面的公共边</li><li>平面图中构成直角的两条边是同一条边；</li><li>一列/行4个面，两头的两条边是同一条边</li></ul><p>相对位置法：如果有自带方向的面、看相对位置解题</p><p>如何确定公共点：</p><ul><li>相邻三个面的公共点是唯一的</li><li>注：公共点发射出的线条的数量或公共点挨着的图案折叠前后不变</li></ul><p>画边法：</p><ul><li>结合选项，找一个特殊面的唯一点或唯一边</li><li>顺/逆时针方向描边标号（描同一个面）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.    概要&quot;&gt;&lt;/a&gt;1.    概要&lt;/h1&gt;&lt;p&gt;图形推理一般分为平面推理和空间推理两大类题型。&lt;/p&gt;
&lt;p&gt;平面推理规律包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位置规律&lt;/li&gt;
&lt;li&gt;样式规律&lt;/li&gt;
&lt;li&gt;属性规律&lt;/li&gt;
&lt;li&gt;数量规律&lt;/li&gt;
&lt;li&gt;特殊规律&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="公务员" scheme="https://wgy1993.gitee.io/tags/%E5%85%AC%E5%8A%A1%E5%91%98/"/>
    
      <category term="判断推理" scheme="https://wgy1993.gitee.io/tags/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/"/>
    
      <category term="图形推理" scheme="https://wgy1993.gitee.io/tags/%E5%9B%BE%E5%BD%A2%E6%8E%A8%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>新《公务员法》考点梳理</title>
    <link href="https://wgy1993.gitee.io/archives/8e85f58f.html"/>
    <id>https://wgy1993.gitee.io/archives/8e85f58f.html</id>
    <published>2020-11-18T11:37:30.000Z</published>
    <updated>2020-11-18T11:38:14.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概要"><a href="#1-概要" class="headerlink" title="1.    概要"></a>1.    概要</h1><ul><li>本节课讲解新的《公务员法》，新法自2019年6月1日起施行，如果有些题目或资料和讲解不同，按照老师讲解为准。</li><li>授课思路：对于未修改的地方学习怎么考，哪里是出题点：哪里修改哪里是重要考点；面对比较难背的地方用口诀快速记忆。</li></ul><a id="more"></a><h1 id="2-考点梳理一"><a href="#2-考点梳理一" class="headerlink" title="2.    考点梳理一"></a>2.    考点梳理一</h1><h2 id="2-1-公务员定义"><a href="#2-1-公务员定义" class="headerlink" title="2.1    公务员定义"></a>2.1    公务员定义</h2><p>本法所称公务员，是指依法履行公职、纳入国家行政编制、由国家财政负担工资福利的工作人员。</p><p>公务员是干部队伍的重要组成部分，是社会主义事业的中坚力量，是<strong>人民的公仆</strong>。</p><blockquote><p>【解析】</p><ul><li>本法所称公务员，是指依法履行公职、纳入国家行政编制、由国家财政负担工资福利的工作人员。<ul><li>依法履行公职：公职就是从事公务活动，体现公务员最本质特征。</li><li>行政编制：要进行广义理解，并不仅仅指政府工作人员，包括中共、人大、政府、政协、法检等，只要是机关工作人员都属于行政编制范畴。</li><li>常见的“坑”：普通党员、国企职工(企业性质)、工勤人员(食堂的厨师、保洁员等，签订劳动合同)不是公务员。</li><li>工资福利由财政负担。</li></ul></li><li>“人民公仆”是新增的，老《公务员法》没有这样的表述，公务员是提供服务的，因此是人民的公仆。</li></ul></blockquote><h3 id="2-1-1-试题"><a href="#2-1-1-试题" class="headerlink" title="2.1.1    试题"></a>2.1.1    试题</h3><ul><li><p>1.（2019-420 联考）下列法律法规中，哪一项不是从2019年1月1日起施行？（ ）</p><p>A.《中华人民共和国电子商务法》</p><p>B.《中华人民共和国土壤污染防治法》</p><p>C.新修订的《中华人民共和国公务员法》</p><p>D.新修订的《中华人民共和国个人所得税法实施条例》</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.</span><br><span class="line">新修订的《中华人民共和国公务员法》2019年6月1日开始已正式实行。其余选项是2019年1月1日起实行。 【选 C】</span><br></pre></td></tr></table></figure></li><li><p>2.（2018-天津选调）公务员法对公务员的范围重新做了界定，根据规定，公务员必须具备三个条件，其中体现公务员最本质特征的是（ ）。</p><p>A.依法履行公职</p><p>B.纳入国家行政编制</p><p>C.由国家财政负担工资福利</p><p>D.三项均属于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.</span><br><span class="line">公务员最本质特征是依法履行公职。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>3.（2016-北京）根据《中华人民共和国公务员法》 ，公务员是指（ ） 、纳入国家行政编制、由国家财政负担工资福利的工作人员。</p><p>A.在国家行政机关工作</p><p>B.在党政机关工作</p><p>C.行使公共权力</p><p>D.依法履行公职</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】 3.</span><br><span class="line">三个条件是依法履行公职、 行政编制、 财政负担工资和福利。 【选D】</span><br></pre></td></tr></table></figure></li><li><p>4.（2011-内蒙古）下列不属于公务员的是（ ） 。</p><p>A.某县党委委员</p><p>B.某市工商行政管理局干部</p><p>C.某国有企业工人</p><p>D.某民主党派机关干部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】4.选非题。</span><br><span class="line">A 项正确：属于机关工作人员。</span><br><span class="line">B 项正确：属于机关工作人员。</span><br><span class="line">C 项错误：不属于公务员，是企业性质。</span><br><span class="line">D 项正确：属于机关工作人员。【选 C】</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-公务员的管理原则"><a href="#2-2-公务员的管理原则" class="headerlink" title="2.2    公务员的管理原则"></a>2.2    公务员的管理原则</h2><p>公务员制度<strong>坚持中国共产党领导</strong>，坚持以马克思列宁主义、毛泽东思想、邓小平理论、 “三个代表”重要思想、<strong>科学发展观、习近平新时代中国特色社会主义思想为指导</strong>，贯彻社会主义初级阶段的基本路线，贯彻新时代中国共产党的组织路线，坚持党管干部原则。</p><p>公务员的管理，坚持公开、平等、竞争、择优的原则，依照法定的权限、条件、标准和程序进行。</p><p>公务员的管理，坚持监督约束与激励保障并重的原则。</p><p>公务员的任用，坚持德才兼备、<strong>以德为先</strong>，坚持五湖四海、任人唯贤，坚持事业为上、公道正派，突出<strong>政治标准</strong>，注重工作实绩。</p><p>公务员就职时应当依照法律规定公开进行<strong>宪法宣誓</strong>。</p><p><img src="https://img-blog.csdnimg.cn/20201118193457352.png" alt="image-20201118142853028"></p><blockquote><p>【解析】</p><ul><li>“坚持党的领导“是新增内容，为了与十九大相关内容相匹配，十九大中表述为“党政军民学，东西南北中，党领导一切” ，因此要坚持党的领导</li><li>增加 “科学发展观、 习近平新时代中国特色社会主义思想为指导”：老《公务员法》时还没有这些思想。</li><li>“党管干部” ：如果题目表述为我国公务员坚持政治中立（错误），原因：西方某些国家是可以的，但我国是党管干部，要坚决拥护我党的领导。</li><li>新增“以德为先”：德才兼备，更强调德的问题。</li><li>新增“政治标准”：为了和十九大保持一致。</li><li>如果将工作实绩表述为注重工作实效是错误的。</li><li>“宪法宣誓”是新增规定，图中是习近平总书记在进行宪法宣誓。</li></ul></blockquote><h2 id="2-3-公务员的条件"><a href="#2-3-公务员的条件" class="headerlink" title="2.3    公务员的条件"></a>2.3    公务员的条件</h2><p>公务员应当具备下列条件：</p><ul><li>具有中华人民共和国国籍；</li><li>年满十八周岁；</li><li>拥护中华人民共和国宪法，<strong>拥护中国共产党领导和社会主义制度</strong>；</li><li>具有良好的<strong>政治素质</strong>和道德品行；</li><li>具有正常履行职责的身体条件和<strong>心理素质</strong>；</li><li>具有符合职位要求的文化程度和工作能力；</li><li>法律规定的其他条件。</li></ul><blockquote><p>【解析】</p><ul><li>公务员应当具备下列条件：<ul><li>具有中华人民共和国国籍：有中国国籍才是中国公民，外国人不能成为中国公务员。</li><li>年满十八周岁：成年人。</li><li>拥护中华人民共和国宪法，拥护中国共产党领导和社会主义制度：“拥护中国共产党领导和社会主义制度”是新法新增的内容。各个章节体现了加强党的领导，这是最大的特色。</li><li>具有良好的政治素质和道德品行： “政治素质”是新法新增的，与十九大保持一致。</li><li>具有正常履行职责的身体条件和心理素质： “心理素质” 是新法新增的，当公务员需要有好的心理素质。</li><li>具有符合职位要求的文化程度和工作能力：不同岗位有不同要求，比如某些岗位要求本科，某些岗位要求硕士。</li><li>法律规定的其他条件：有些岗位特殊的要求，比如某些岗位要求党员，某些岗位要求有基层工作经验。</li></ul></li><li>记忆口诀： 买正品 （对应政治素质和道德品行），写公文（对应工作能力、文化程度），身心健康中国人（对应身体条件和心理素质，中国人）；十八岁（对应年满十八周岁），党领导，社会主义宪法好（对应党的领导、拥护我国宪法）。</li></ul></blockquote><h2 id="2-4-公务员的义务与权利"><a href="#2-4-公务员的义务与权利" class="headerlink" title="2.4    公务员的义务与权利"></a>2.4    公务员的义务与权利</h2><h3 id="2-4-1-公务员应当履行下列义务"><a href="#2-4-1-公务员应当履行下列义务" class="headerlink" title="2.4.1    公务员应当履行下列义务"></a>2.4.1    公务员应当履行下列义务</h3><ul><li>忠于宪法，模范遵守、自觉维护宪法和法律，<strong>自觉接受中国共产党领导</strong>；</li><li>忠于国家，维护国家的安全、荣誉和利益；</li><li>忠于人民，全心全意为人民服务，接受人民监督；</li><li>忠于职守，勤勉尽责，服从和执行上级依法作出的决定和命令，按照规定的权限和程序履行职责，努力提高工作质量和效率；</li><li>保守国家秘密和工作秘密；</li><li><strong>带头践行社会主义核心价值观</strong>， 坚守法治， 遵守纪律， 恪守职业道德，模范遵守社会公德、家庭美德；</li><li>清正廉洁，公道正派；</li><li>法律规定的其他义务。</li></ul><blockquote><p>【解析】</p><ul><li>公务员应当履行下列义务：<ul><li>新增：自觉接受中国共产党领导。</li><li>新增“带头践行社会主义核心价值观” ：24 个字，富强、民主、文明、和谐、自由、平等、公正、法治、爱国、敬业、诚信、友善。</li></ul></li><li>记忆口诀：爱祖国（对应忠于国家），爱人民（对应忠于人民，为人民服务），法律三德记在心（对应忠于宪法，社会公德、职业道德、家庭美德等）；党领导（对应接受党的领导），价值观（对应带头践行社会主义核心价值观），尽职保密做清官（对应忠于职守、保守国家工作秘密、清正廉洁）。  </li></ul></blockquote><h3 id="2-4-2-公务员享有下列权利"><a href="#2-4-2-公务员享有下列权利" class="headerlink" title="2.4.2    公务员享有下列权利"></a>2.4.2    公务员享有下列权利</h3><ul><li>获得履行职责应当具有的工作条件；</li><li>非因法定事由、非经法定程序，不被免职、降职、辞退或者处分；</li><li>获得工资报酬，享受福利、保险待遇；</li><li>参加培训；  </li><li>对机关工作和领导人员提出批评和建议；</li><li>提出申诉和控告；</li><li>申请辞职；</li><li>法律规定的其他权利。</li></ul><blockquote><p>  【解析】  </p><ul><li><p>公务员享有下列权利：  </p></li><li><p>获得履行职责应当具有的工作条件：比如完成某项任务需要配备工具，  如警察需要配备警车。  </p></li><li><p>非因法定事由、非经法定程序，不被免职、降职、辞退或者处分：“铁饭碗”，企业如果业绩不好或不能带来收益会被开除。  </p></li><li><p>获得工资报酬，享受福利、保险待遇。  </p></li><li><p>参加培训。  </p></li><li><p>对机关工作和领导人员提出批评和建议。 </p></li><li><p>提出申诉和控告。  </p></li><li><p>申请辞职。  </p></li><li><p>法律规定的其他权利。  </p></li><li><p>口诀：干活配铁锹（对应有相应的工作条件），饭碗端的牢（对应铁饭碗），  拿钱参培（对应工资、报酬、福利等，参加培训）把毛病找（对应给机关领导提    出批评建议）；遇到不平事，申诉与控告（对应申诉、控告），实在不爽就不干了（对应申请辞职）。  </p></li></ul></blockquote><h3 id="2-4-3-试题"><a href="#2-4-3-试题" class="headerlink" title="2.4.3    试题"></a>2.4.3    试题</h3><ul><li><p>1.（2016-广州）根据我国《公务员法》 ，公务员应当履行的义务包括（）。</p><p>①模范遵守宪法和法律</p><p>②获得履行职责应当具有的工作条件</p><p>③清正廉洁，公道正派</p><p>④参加培训</p><p>⑤遵守纪律，恪守职业道德，模范遵守社会公德</p><p>A.①④⑤</p><p>B.①③⑤</p><p>C.②③④⑤</p><p>D.①②③④⑤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.考查义务。</span><br><span class="line">口诀是爱祖国，爱人民，法律三德记在心；党领导，价值观，尽职保密做清官。</span><br><span class="line">①属于义务， ②属于权利， ③属于义务， ④属于权利，⑤属于义务。 【选 B】</span><br></pre></td></tr></table></figure></li><li><p>2.（2012-安徽）下列哪项不属于公务员所享受的权利（）。</p><p>A.公务员非经所在地人大许可不受公安机关逮捕</p><p>B.非因法定事由、法定程序不被免职、降职、辞退或处分</p><p>C.小李因个人原因向所在单位申请辞职</p><p>D.小王不满上级给予的处分，提出申诉和控告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.选非题。</span><br><span class="line">A 项错误：无此规定，将人大代表的权利进行混淆，县级以上各级代表在开会期间，非经主席团许可不受逮捕或刑事审判；闭会期间非经本级人常许可，不受逮捕或刑事审判。</span><br><span class="line">B 项正确：属于“铁饭碗” ，属于权利。</span><br><span class="line">C 项正确：属于权利。</span><br><span class="line">D 项正确：属于权利。 【选 A】</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-5-考点总结"><a href="#2-5-考点总结" class="headerlink" title="2.5    考点总结"></a>2.5    考点总结</h2><p><img src="https://img-blog.csdnimg.cn/20201118193503741.png" alt="image-20201118191533269"></p><h1 id="3-考点梳理二"><a href="#3-考点梳理二" class="headerlink" title="3.    考点梳理二"></a>3.    考点梳理二</h1><h2 id="3-1-公务员的职务、职级与级别"><a href="#3-1-公务员的职务、职级与级别" class="headerlink" title="3.1    公务员的职务、职级与级别"></a>3.1    公务员的职务、职级与级别</h2><h3 id="3-1-1-职位分类"><a href="#3-1-1-职位分类" class="headerlink" title="3.1.1    职位分类"></a>3.1.1    职位分类</h3><p>国家实行公务员职位分类制度。公务员职位类别按照公务员职位的性质、特点和管理需要，划分为综合管理类、专业技术类和行政执法类等类别。</p><p>国家实行公务员职务与职级并行制度， 根据公务员职位类别和职责设置公务员领导职务、<strong>职级序列</strong>。</p><h3 id="3-1-2-领导职务"><a href="#3-1-2-领导职务" class="headerlink" title="3.1.2    领导职务"></a>3.1.2    领导职务</h3><p>领导职务层次分为：国家级正职、国家级副职、省部级正职、省部级副职、厅局级正职、 厅局级副职、 县处级正职、 县处级副职、 乡科级正职、 乡科级副职。</p><blockquote><p>【解析】</p><ul><li>国家实行公务员职位分类制度，公务员职位类别按照公务员职位的性质、特点和管理需要，划分为综合管理类、专业技术类和行政执法类等类别。<ul><li>行政执法类：工作在基层管理市场、社会，比如质监、税务、环保。</li><li>专业技术类：某些高端技术，比如法医、高级翻译。</li><li>综合管理类。</li></ul></li><li>国家实行公务员职务与职级并行制度：新修改的内容，过去分为领导职务和非领导职务，非领导职务由于缺乏上升空间，造成工作没有动力和积极性，为了激发非领导职务工作人员的积极性，改为职级，具有更加通畅的上升空间。</li><li>领导职务层次（没有变化）分为国家级正职、国家级副职、省部级正职、省部级副职、 厅局级正职、 厅局级副职、 县处级正职、 县处级副职、 乡科级正职、乡科级副职。</li></ul></blockquote><h3 id="3-1-3-公务员职级"><a href="#3-1-3-公务员职级" class="headerlink" title="3.1.3    公务员职级"></a>3.1.3    公务员职级</h3><p>公务员职级在厅局级以下设置。</p><p>综合管理类公务员职级序列分为：<strong>一级巡视员、二级巡视员、一级调研员、二级调研员、三级调研员、四级调研员、一级主任科员、二级主任科员、三级主任科员、四级主任科员、一级科员、二级科员</strong>。</p><h3 id="3-1-4-级别"><a href="#3-1-4-级别" class="headerlink" title="3.1.4    级别"></a>3.1.4    级别</h3><p>公务员的领导职务、职级应当对应相应的级别。</p><p>公务员的级别根据所任领导职务、 职级及其德才表现、 工作实绩和资历确定。公务员在同一领导职务、职级上，可以按照国家规定晋升级别。</p><blockquote><p>【解析】</p><ul><li>公务员职级：从非领导职务改为职级，厅局级以下设置。分为：一级巡视员、二级巡视员、一级调研员、二级调研员、三级调研员、四级调研员、一级主任科员、二级主任科员、三级主任科员、四级主任科员、一级科员、二级科员。过去非领导职务只有八个职级，新公务员法变为12个层级。</li><li>无论时领导职务或职级都有对应的级别：国务院总理是1级即正国级，公务员级别分为27级。</li></ul></blockquote><h2 id="3-2-公务员的职务、职级任免"><a href="#3-2-公务员的职务、职级任免" class="headerlink" title="3.2    公务员的职务、职级任免"></a>3.2    公务员的职务、职级任免</h2><p>公务员领导职务实行选任制、委任制和<strong>聘任制</strong>。公务员职级实行委任制和<strong>聘任制</strong>。</p><p>领导成员职务按照国家规定实行任期制。</p><p>公务员因工作需要在机关外兼职，应当经有关机关批准，并不得领取兼职报酬。</p><blockquote><p>【解析】</p><p>公务员领导职务实行选任制（选举）、委任制（组织任命）和聘任制（签合同，新增）。公务员职级（非领导职务）实行委任制和聘任制（新增）。</p><ul><li>聘任制：更加灵活，目前用于专业性较强的岗位、辅助性岗位，需要签合同，合同期限是1-5年，试用期1个月-12个月，常规公务员试用期和这里不同。</li><li>领导成员职务按照国家规定实行任期制：一般5年一届，不是终身制。</li><li>公务员因工作需要在机关外兼职，应当经有关机关批准，并不得领取兼职报酬。经过批准且不领取兼职报酬的情况下可以兼职。</li></ul></blockquote><h3 id="3-2-1-试题"><a href="#3-2-1-试题" class="headerlink" title="3.2.1    试题"></a>3.2.1    试题</h3><ul><li><p>1.2018年12月29日，十三届全国人大常委会第七次会议表决通过了《中华人民共和国公务员法 （修订草案） 》 ， 习近平主席签发第二十号主席令予以公布。公务员法首次修订， 标志着我国公务员管理法治化、 规范化、 科学化进入新阶段。根据新修订公务员法，将非领导职务改造为（）。</p><p>A.职系</p><p>B.专业技术职称</p><p>C.专业技术职务</p><p>D.职级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.</span><br><span class="line">D 项正确：根据新《公务员法》将非领导职务改造为职级,为了调动非领导职务公务员的工作积极性，有更加高效、畅通的上升空间。 【选 D】</span><br></pre></td></tr></table></figure></li><li><p>2.（2017-湖北选调生）下列关于我国公务员制度的说法，正确的是（）。</p><p>A.职能常任制</p><p>B.强调政治中立</p><p>C.宗旨是为国家服务</p><p>D.实行分类管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.</span><br><span class="line">A 项错误：领导职务是任期制。</span><br><span class="line">B 项错误：党管干部。</span><br><span class="line">C 项错误：宗旨是为人民服务。</span><br><span class="line">D 项正确：我国公务员制度实行分类管理，分成综合管理、专业技术、行政执法三类。 【选 D】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-公务员的录用"><a href="#3-3-公务员的录用" class="headerlink" title="3.3    公务员的录用"></a>3.3    公务员的录用</h2><p>录用担任一级主任科员以下及其他相当职级层次的公务员，采取公开考试、严格考察、平等竞争、择优录取的办法。</p><p>国家对行政机关中初次从事行政处罚决定审核、行政复议、行政裁决、法律顾问的公务员实行统一<strong>法律职业资格考试制度</strong>， 由国务院司法行政部门商有关部门组织实施。</p><blockquote><p>【解析】</p><ul><li>如考公务员不能考省长和市长，而是人大选举产生。录用担任一级主任科员以下及其他相当职级层次的公务员，采取公开考试、严格考察、平等竞争、择优录取的办法。</li><li>新增法考制度：过去是司法考试，后改为法律职业资格考试制度。行政机关中初次从事行政处罚决定审核、行政复议、行政裁决、法律顾问的公务员实行统一法律职业资格考试制度。</li></ul></blockquote><p>下列人员不得录用为公务员：</p><ul><li>因犯罪受过刑事处罚的；</li><li><strong>被开除中国共产党党籍的</strong>；</li><li>被开除公职的；</li><li><strong>被依法列为失信联合惩戒对象的</strong>；</li><li>有法律规定不得录用为公务员的其他情形的。</li></ul><p>新录用的公务员试用期为一年。试用期满合格的，予以任职；不合格的，取消录用。</p><blockquote><p>【解析】</p><ul><li>下列人员不得录用为公务员：重点。<ul><li>因犯罪受过刑事处罚的：包括主刑、附加刑。受过行政处罚如被行政拘留等可以考公务员，受过刑事处罚不可以考公务员。</li><li>被开除中国共产党党籍的（新增）：开除党籍表明受过严重处分。</li><li>被开除公职的：如果被辞退则可以再考公务员，开除是处分，而辞退不是处分，定性不同。</li><li>被依法列为失信联合惩戒对象的（新增）：我国建立了比较完善的信用体系，追求的目标是一处失信、处处受限，信用是很重要的。如信用记录有污点的人可能没办法乘坐飞机、高铁，不能考取公务员。信用有污点有很多情形，如逃税骗税、 恶意欠薪、 进行传销、 进行非法集资、 不履行法院判决、 逃避兵役等。</li><li>有法律规定不得录用为公务员的其他情形的。</li></ul></li><li>记忆口诀：判过刑（对应受过刑事处罚）、被双开（开除党籍、公职）、没信用（被列为失信联合惩戒对象）</li><li>新录用的公务员试用期为1年。普通企业签订签劳动合同，试用期最长6个月。</li></ul></blockquote><h3 id="3-3-1-试题"><a href="#3-3-1-试题" class="headerlink" title="3.3.1    试题"></a>3.3.1    试题</h3><ul><li><p>1.（2012-浙江）根据我国公务员制度的相关规定，录用担任（）及其他相当职务层次的非领导职务公务员，采取公开考试、严格考察、平等竞争、择优录取的办法。</p><p>A.科员以上</p><p>B.主任科员以上</p><p>C.科员以下</p><p>D.主任科员以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.</span><br><span class="line">D 项正确:之前的表述是主任科员以下,新法变为一级主任科员以下。【选 D】</span><br></pre></td></tr></table></figure></li><li><p>2.（2010-黑龙江）依照我国《公务员法》 ，下述情况，可录用为公务员的人员是（）。</p><p>A.曾受过行政处分的</p><p>B.外籍人士</p><p>C.曾被开除公职的</p><p>D.曾因犯罪受过刑事处罚的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.</span><br><span class="line">A 项正确：受过行政处分可以考公务员。</span><br><span class="line">B 项错误：不是中国国籍不能考公务员。</span><br><span class="line">C 项错误：开出公职不能考公务员</span><br><span class="line">D 项错误：判过刑不能考公务员。 【选 A】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-4-公务员的考核"><a href="#3-4-公务员的考核" class="headerlink" title="3.4    公务员的考核"></a>3.4    公务员的考核</h2><p>公务员的考核应当按照管理权限，全面考核公务员的德、能、勤、绩、廉，重点考核<strong>政治素质</strong>和工作实绩。考核指标根据不同职位类别、不同层级机关分别设置。</p><p>公务员的考核分为平时考核、<strong>专项考核</strong>和定期考核等方式。定期考核以平时考核、专项考核为基础。</p><p>定期考核的结果分为优秀、称职、基本称职和不称职四个等次。</p><blockquote><p>【解析】</p><ul><li>全面考核公务员的德、能、勤、绩、廉：五个字必须一字不差、多、少、换都是错误的，考试时常将“廉”换成“才”是错误的。</li><li>重点考核政治素质（新增）和工作实绩：重点考核政治素质和工作实绩。</li><li>公务员的考核分为平时考核（日常考勤、工作检查等）、专项考核（新增，针对某个具体项目）和定期考核（一年进行一次全面考核）等方式。</li><li>定期考核的结果分为优秀、称职、基本称职和不称职四个等次。如果改为合格是错误的，事业单位考核是合格，完整为优秀、合格、基本合格和不合格。</li><li>定期考核等次后果：<ul><li>优秀、称职：可以获得年终奖金。</li><li>基本称职：无奖金，领导要将进行谈话并要求限期改进。</li><li>不称职（常考）：降低一个职务/职级的层次任职，如果连续两年不称职要被辞退。</li></ul></li></ul></blockquote><h2 id="3-5-考点总结"><a href="#3-5-考点总结" class="headerlink" title="3.5    考点总结"></a>3.5    考点总结</h2><p><img src="https://img-blog.csdnimg.cn/2020111819351092.png" alt="image-20201118192036597"></p><h1 id="4-考点梳理三"><a href="#4-考点梳理三" class="headerlink" title="4.    考点梳理三"></a>4.    考点梳理三</h1><h2 id="4-1-公务员的奖励"><a href="#4-1-公务员的奖励" class="headerlink" title="4.1    公务员的奖励"></a>4.1    公务员的奖励</h2><p>对工作表现突出，有显著成绩和贡献，或者有其他突出事迹的公务员或者公务员集体，给予奖励。奖励坚持定期奖励与及时奖励相结合，精神奖励与物质奖励相结合、以精神奖励为主的原则。</p><p>奖励分为：嘉奖、记三等功、记二等功、记一等功、授予称号。</p><blockquote><p>【解析】</p><ul><li>奖励坚持定期奖励与及时奖励相结合，精神奖励与物质奖励相结合、以精神奖励为主的原则。精神奖励如颁发证书、奖章等，提升职业荣誉感。</li><li>奖励：嘉奖、记三等功、记二等功、记一等功、授予称号（老法为“授予荣誉称号”）。级别递增，嘉奖最低，授予称号最高。</li></ul></blockquote><p>公务员或者公务员集体有下列情形之一的，撤销奖励：</p><ul><li>弄虚作假，骗取奖励的；</li><li>申报奖励时隐瞒严重错误或者严重违反规定程序的；</li><li>有严重违纪违法等行为，影响称号声誉的；</li><li>有法律、法规规定应当撤销奖励的其他情形的。</li></ul><blockquote><p>【解析】</p><ul><li>公务员或者公务员集体有下列情形之一的，撤销奖励：<ul><li>弄虚作假，骗取奖励的。</li><li>申报奖励时隐瞒严重错误或者严重违反规定程序的。</li><li>有严重违纪违法等行为，影响称号声誉的：比如结果进行贪污。</li><li>有法律、法规规定应当撤销奖励的其他情形的。</li></ul></li><li>记忆口诀：瞒（隐瞒严重错误）着家（谐音假，弄虚作假）人生育（影响称号声誉）。</li></ul></blockquote><h2 id="4-2-公务员的监督与惩戒"><a href="#4-2-公务员的监督与惩戒" class="headerlink" title="4.2    公务员的监督与惩戒"></a>4.2    公务员的监督与惩戒</h2><p>机关应当对公务员的思想政治、履行职责、作风表现、遵纪守法等情况进行监督，开展勤政廉政教育，建立日常管理监督制度。对公务员监督发现问题的，应当区分不同情况，予以谈话提醒、批评教育、责令检查、诫勉、组织调整、处分。对公务员涉嫌职务违法和职务犯罪的，应当依法移送监察机关处理。</p><p>公务员执行公务时，认为上级的决定或者命令有错误的，可以向上级提出改正或者撤销该决定或者命令的意见；上级不改变该决定或者命令，或者要求立即执行的，公务员应当执行该决定或者命令，执行的后果由上级负责，公务员不承担责任；但是，公务员执行明显违法的决定或者命令的，应当依法承担相应的责任。</p><blockquote><p>【解析】</p><ul><li>对公务员监督发现问题的， 应当区分不同情况， 予以谈话提醒、 批评教育、责令检查、诫勉、组织调整、处分。</li><li>公务员执行公务时，认为上级的决定或者命令有错误的，可以向上级提出改正或者撤销该决定或者命令的意见；上级不改变该决定或者命令，或者要求立即执行的，公务员应当执行该决定或者命令，执行的后果由上级负责，否则公务员无法开展工作，如果上级安排的工作甲乙都认为有问题而不执行，由于每个人意见不同导致无法完成工作。但是，公务员执行明显违法的决定或者命令的，应当依法承担相应的责任。如局长让小王晚上杀人，杀人这一行为明显违法，小王杀人后由局长承担责任是错误的，小王要承担相应的责任。</li></ul></blockquote><p>处分分为：警告、记过、记大过、降级、撤职、开除。</p><p>公务员在受处分期间不得晋升职务、职级和级别，其中受记过、记大过、降级、撤职处分的，不得晋升工资档次。</p><p>受处分的期间为：警告，六个月；记过，十二个月；记大过，十八个月；降级、撤职，二十四个月。</p><blockquote><p>【解析】</p><ul><li>处分：警告、记过、记大过、降级、撤职、开除。<ul><li>注意没有“降职” ，处分是“降级、撤职”，如考核不称职要降职任用，但不是处分。</li><li>开除：被追究刑事责任是必须开除，如醉酒驾车被抓获并定危险驾驶罪，要被开除。</li></ul></li><li>公务员在受处分期间不得晋升职务、职级和级别，其中受记过、记大过、降级、撤职处分的，不得晋升工资档次。注意：警告处分可以涨工资，其他处分不得涨工资。</li><li>受处分的期间为：警告，6 个月；记过，12个月；记大过，18个月；降级、撤职，24个月。</li></ul></blockquote><p>公务员受开除以外的处分，在受处分期间有悔改表现，并且没有再发生违纪违法行为的，处分期满后自动解除。</p><p>解除处分后， 晋升工资档次、 级别和职务、 职级不再受原处分的影响。 但是，解除降级、撤职处分的，不视为恢复原级别、原职务、原职级。</p><blockquote><p>【解析】</p><ul><li>公务员受开除以外的处分，在受处分期间有悔改表现，并且没有再发生违纪违法行为的，处分期满后自动解除：之前需要处分决定机关解除并书面通知，为了防止关系不好“穿小鞋” ，如果处分期满不通知会引起不必要的麻烦。</li><li>解除处分后，晋升工资档次、级别和职务、职级不再受原处分的影响。犯错后也有上升空间。</li><li>解除降级、撤职处分的，不视为恢复原级别、原职务、原职级。比如甲原来是 10 级，被降到 15 级，降级期限是24个月，在 24 个月之后解除，此时仍然是 15 级，但是之后表现好可以再次上升，晋升不受原处分影响。</li></ul></blockquote><h3 id="4-2-1-试题"><a href="#4-2-1-试题" class="headerlink" title="4.2.1    试题"></a>4.2.1    试题</h3><ul><li><p>1.（2019-河北选调） 《公务员法》规定，公务员定期考核的结果分为优秀、称职、基本称职和不称职四个等次。在年度考核中被确定为不称职的，按照规定程序（ ） 。</p><p>A.降低一个职务或者职级层次任职</p><p>B.降级使用</p><p>C.降低一级工资或者降低一级职务</p><p>D.予以辞退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.</span><br><span class="line">不称职要降低职务或职级层次任职 【选 A】</span><br></pre></td></tr></table></figure></li><li><p>2.（2019-河北选调）2018年12月修订的《中华人民共和国公务员法》规定，公务员的考核应当接照管理权限，全面考核公务员的德、能、勤、绩、廉，重点考核（）。考核分为平时考核、专项考核和定期考核等方式。定期考核以平时考核、专项考核为基础。</p><p>A.政治素质和工作能力</p><p>B.工作能力和工作态度</p><p>C.工作态度和工作实绩</p><p>D.政治素质和工作实绩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.</span><br><span class="line">重点考核政治素质和工作实绩，政治素质是新增内容。 【选 D】</span><br></pre></td></tr></table></figure></li><li><p>3.（2010-浙江 A 类） 以下不属于 《公务员法》 中对公务员处分的种类是（）。</p><p>A.警告</p><p>B.记大过</p><p>C.开除</p><p>D.降职</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】3.</span><br><span class="line">D 项正确：降职是一种任用方式，不是处分，降级和撤职是处分。【选 D】</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-公务员的培训"><a href="#4-3-公务员的培训" class="headerlink" title="4.3    公务员的培训"></a>4.3    公务员的培训</h2><p>机关根据公务员工作职责的要求和提高公务员素质的需要， 对公务员进行分类分级培训。</p><p>国家建立专门的公务员培训机构。 机关根据需要也可以委托其他培训机构承担公务员培训任务。</p><p>培训包括：初任培训、任职培训、专门业务培训、在职培训。</p><blockquote><p>【解析】</p><ul><li>专门的公务员培训机构：国家行政学院、地方行政学院。机关根据需要也可以委托其他培训机构（一般委托高校、科研单位等）承担公务员培训任务。</li><li>培训包括：初任培训、任职培训、专门业务培训、在职培训。<ul><li>初任培训：对新录用的公务员进行初任培训。</li><li>任职培训：对晋升领导职务的公务员进行培训。</li><li>专门业务培训：对从事专项工作的公务员培训，如特殊的专业知识。</li><li>在职培训：针对全体公务员，提升政治素质、工作能力等。</li></ul></li></ul></blockquote><h2 id="4-4-公务员的交流"><a href="#4-4-公务员的交流" class="headerlink" title="4.4    公务员的交流"></a>4.4    公务员的交流</h2><p>国家实行公务员交流制度。</p><p>公务员可以在公务员和参照本法管理的工作人员队伍内部交流， 也可以与国有企业和不参照本法管理的事业单位中从事公务的人员交流。</p><p>交流的方式包括调任、转任。</p><blockquote><p>【解析】</p><ul><li>公务员可以在公务员和参照本法管理的工作人员（参公管理）队伍内部交流，也可以与国有企业和不参照本法管理的事业单位中从事公务的人员交流。</li><li>交流的方式包括调任、转任。调任是从机关外调入机关内，而转任是内部转任，可以跨地区、跨部门，新法删除挂职锻炼，意味着如果按照新法交流方式只有两种。</li></ul></blockquote><p>国有企业、 高等院校和科研院所以及其他不参照本法管理的事业单位中从事公务的人员,可以调入机关担任领导职务或者四级调研员以上及其他相当层次的职级。</p><p>根据工作需要， 机关可以采取<strong>挂职</strong>方式选派公务员承担重大工程、 重大项目、重点任务或者其他专项工作。公务员在挂职期间，不改变与原机关的人事关系。</p><blockquote><p>【解析】</p><ul><li>挂职锻炼在新法中变为挂职，机关可以采取挂职方式选派公务员承担重大工程、重大项目、重点任务或者其他专项工作。挂职目的发生变化，从过去的培养干部转换为承担专项任务和专项工作。公务员在挂职期间，不改变与原机关的人事关系，人事档案还在原机关。</li><li>国有企业、 高等院校和科研院所以及其他不参照本法管理的事业单位中从事公务的人员,可以调入机关担任领导职务或者四级调研员以上及其他相当层次的职级。常见的是国企老总调入机关成为领导。</li></ul></blockquote><h2 id="4-5-公务员的回避"><a href="#4-5-公务员的回避" class="headerlink" title="4.5    公务员的回避"></a>4.5    公务员的回避</h2><p>公务员之间有夫妻关系、直系血亲关系、三代以内旁系血亲关系以及近姻亲关系的， 不得在同一机关双方直接隶属于同一领导人员的职位或者有直接上下级领导关系的职位工作，也不得在其中一方担任领导职务的机关从事组织、人事、纪检、监察、审计和财务工作。</p><p><strong>公务员不得在其配偶、子女及其配偶经营的企业、营利性组织的行业监管或者主管部门担任领导成员。</strong></p><blockquote><p>【解析】</p><ul><li>夫妻关系、直系血亲关系、三代以内旁系血亲关系以及近姻亲关系。<ul><li>不得在同一机关双方直接隶属于同一领导人员的职位，如甲和乙是夫妻，在同一个科室上班，有一个共同的科长是不可以的。</li><li>有直接上下级领导关系的职位工作，如丈夫是科长，妻子是丈夫手下的科员，有直接上下级领导关系无法开展工作。</li><li>不得在其中一方担任领导职务的机关从事组织、人事、纪检、监察、审计和财务工作，如丈夫是局长，妻子是同一单位的会计，可能钱会被贪污。</li></ul></li><li>新增：公务员不得在其配偶、子女及其配偶经营的企业、营利性组织的行业监管或者主管部门担任领导成员，防止企业将该行业垄断，如张三的儿子开办石油企业，可能石油行业被垄断。</li></ul></blockquote><p>公务员担任乡级机关、县级机关、设区的市级机关及其有关部门主要领导职务的，应当按照有关规定实行地域回避。</p><p>公务员执行公务时，有下列情形之一的，应当回避：</p><ul><li>涉及本人利害关系的；</li><li>涉及与本人有亲属关系人员的利害关系的；</li><li>其他可能影响公正执行公务的。</li></ul><blockquote><p>【解析】</p><ul><li>地域回避：乡级机关、县级机关、设区的市级机关及其有关部门主要领导职务，主要领导不能原籍任职，防止成为“土皇帝” ，如果甲在本县当县长，可能会安排七大姑、八大姨到机关工作。</li><li>新法将设区的市加入，乡级、县级、设区的市一级不能原籍任职。</li><li>公务回避：可能导致徇私枉法。<ul><li>涉及本人利害关系的。</li><li>涉及与本人有亲属关系人员的利害关系的。</li><li>其他可能影响公正执行公务的。</li></ul></li></ul></blockquote><h3 id="4-5-1-试题"><a href="#4-5-1-试题" class="headerlink" title="4.5.1    试题"></a>4.5.1    试题</h3><ul><li><p>1.（2018-广州单区）以下情形，不违反《中华人民共和国公务员法》规定的任职回避情形的是（）。</p><p>A.甲乙为夫妻，在同一机关工作，甲担任领导职务，乙在组织部门任普通科员</p><p>B.甲乙为表兄妹，在同一机关工作，甲担任领导职务，乙是甲的下级由甲直接领导</p><p>C.甲乙为兄妹，在同一机关工作，甲在组织部门担任部长，乙在行政部门担任普通科员</p><p>D.甲乙为父子，在同一机关工作，两人都在人事部门任普通科员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.考查任职回避</span><br><span class="line">A 项错误：不得在其中一方担任领导职务的机关从事组织、人事、纪检、监察、审计和财务工作，甲是领导，而其妻子在组织部门是不可以的，需要任职回避。</span><br><span class="line">B 项错误：有直接的上下级关系需要任职回避。</span><br><span class="line">C 项正确：两个部门没有关系，不需要任职回避。</span><br><span class="line">D 项错误：父子在同一部门有共同领导，需要任职回避。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>2.（2018-北京） 根据 《中华人民共和国公务员法》 ， 下列说法中正确的是（）</p><p>A.新录用的公务员，试用期为六个月</p><p>B.公务员解除降级、撤职处分的，不视为恢复原级别、原职务</p><p>C.公务员在挂职锻炼期间，人事关系转到挂职的单位</p><p>D.曾被开除公职的人员，可以被再次录用为公务员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.</span><br><span class="line">A 项错误：公务员试用期为 1 年。</span><br><span class="line">C 项错误：挂职&#x2F;挂职锻炼时，人事关系不转移。</span><br><span class="line">D 项错误：被开除的不能再次录用。【选 B】</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-5-考点总结"><a href="#4-5-考点总结" class="headerlink" title="4.5    考点总结"></a>4.5    考点总结</h2><p><img src="https://img-blog.csdnimg.cn/20201118193527973.png" alt="image-20201118192251518"></p><h1 id="5-考点梳理四"><a href="#5-考点梳理四" class="headerlink" title="5.    考点梳理四"></a>5.    考点梳理四</h1><h2 id="5-1-公务员的工资、福利与保险"><a href="#5-1-公务员的工资、福利与保险" class="headerlink" title="5.1    公务员的工资、福利与保险"></a>5.1    公务员的工资、福利与保险</h2><p>公务员实行国家统一规定的工资制度。 国家建立公务员工资的正常增长机制。</p><p>公务员工资包括基本工资、津贴、补贴和奖金。</p><p>公务员按照国家规定享受福利待遇。 国家根据经济社会发展水平提高公务员的福利待遇。公务员执行国家规定的工时制度，按照国家规定享受休假。公务员在法定工作日之外加班的，应当给予相应的补休，不能补休的按照国家规定给予补助。</p><p>公务员依法参加社会保险，按照国家规定享受保险待遇。公务员因公牺牲或者病故的，其亲属享受国家规定的抚恤和优待。</p><blockquote><p>【解析】</p><ul><li>建立公务员工资的正常增长机制，根据国家的经济状况和财力上涨工资。</li><li>常考：工资分为基本工资、津贴、补贴和奖金。</li><li>参加社会保险如五险一金、职业年金，福利待遇，因公牺牲或病故后家属有抚恤和优待等。</li></ul></blockquote><h2 id="5-2-公务员的辞职与辞退"><a href="#5-2-公务员的辞职与辞退" class="headerlink" title="5.2    公务员的辞职与辞退"></a>5.2    公务员的辞职与辞退</h2><h3 id="5-2-1-辞职"><a href="#5-2-1-辞职" class="headerlink" title="5.2.1    辞职"></a>5.2.1    辞职</h3><p>公务员辞去公职，应当向任免机关提出书面申请。任免机关应当自接到申请之日起三十日内予以审批，其中对领导成员辞去公职的申请，应当自接到申请之日起九十日内予以审批。</p><p>公务员有下列情形之一的，不得辞去公职：</p><ul><li>未满国家规定的最低服务年限的；</li><li>在涉及国家秘密等特殊职位任职或者离开上述职位不满国家规定的脱密期限的；</li><li>重要公务尚未处理完毕，且须由本人继续处理的；</li><li>正在接受审计、纪律审查、监察调查，或者涉嫌犯罪，司法程序尚未终结的；</li><li>法律、行政法规规定的其他不得辞去公职的情形。</li></ul><blockquote><p>【解析】</p><ul><li>公务员辞去公职，应当向任免机关提出书面申请。任免机关应当自接到申请之日起三十日内予以审批，其中对领导成员辞去公职的申请，应当自接到申请之日起九十日内予以审批。</li><li>不能辞去公职（重点） 。<ul><li>未满国家规定的最低服务年限的。如甲签订最低服务期5年的合同，如果辞职要承担高额违约金。</li><li>在涉及国家秘密等特殊职位任职或者离开上述职位不满国家规定的脱密期限的。</li><li>重要公务尚未处理完毕，且须由本人继续处理的。</li><li>正在接受审计、纪律审查、监察调查，或者涉嫌犯罪，司法程序尚未终结的。</li><li>法律、行政法规规定的其他不得辞去公职的情形。</li></ul></li><li>口诀：签了卖身契（对应最低服务年限），掌握大秘密（对应涉密岗位不满国家规定的脱密期限），大活待处理（对应重要公务尚未处理完毕），有人调查你（对应接受审计、纪律审查、监察调查，或者涉嫌犯罪，司法程序尚未终结）。</li></ul></blockquote><h3 id="5-2-2-引咎辞职与责令辞职"><a href="#5-2-2-引咎辞职与责令辞职" class="headerlink" title="5.2.2    引咎辞职与责令辞职"></a>5.2.2    引咎辞职与责令辞职</h3><p>领导成员因工作严重失误、失职造成重大损失或者恶劣社会影响的，或者对重大事故负有领导责任的，应当引咎辞去领导职务。</p><p>领导成员因其他原因不再适合担任现任领导职务的， 或者应当引咎辞职本人不提出辞职的，应当责令其辞去领导职务。</p><blockquote><p>【解析】</p><ul><li>引咎辞职与责令辞职：失职造成重大损失或者恶劣社会影响的，或者对重大事故负有领导责任的，应当引咎辞去领导职务；如果应当引咎辞职但本人并不提出要责令辞去领导职务，一个主动、一个被动</li><li>辞职包括四类，分别是因公辞职、自愿辞职、引咎辞职和责令辞职。因公辞职是工作需要， 工作调动要走一个辞旧履新的程序；自愿辞职如想要下海精神；引咎辞职和责令辞职是针对领导，领导主动提出是引咎辞职，被动就是责令辞职</li></ul></blockquote><h3 id="5-2-3-辞退"><a href="#5-2-3-辞退" class="headerlink" title="5.2.3    辞退"></a>5.2.3    辞退</h3><p>公务员有下列情形之一的，予以辞退：</p><ul><li>在年度考核中，连续两年被确定为不称职的；</li><li>不胜任现职工作，又不接受其他安排的；</li><li>因所在机关调整、撤销、合并或者缩减编制员额需要调整工作，本人拒绝合理安排的；</li><li>不履行公务员义务，不遵守法律和公务员纪律，经教育仍无转变，不适合继续在机关工作，又不宜给予开除处分的；</li><li>旷工或者因公外出、请假期满无正当理由逾期不归连续超过十五天，或者一年内累计超过三十天的。</li></ul><blockquote><p>【解析】</p><ul><li>辞职和辞退的区别：辞职是自己提出，而辞退是单位主动提出。</li><li>辞退的情形：<ul><li>在年度考核中，连续两年被确定为不称职，如第一年不称职、第二年称职、第三年不称职不能辞退。</li><li>不胜任现职工作，又不接受其他安排的。</li><li>因所在机关调整、撤销、合并或者缩减编制员额需要调整工作，本人拒绝合理安排的。</li><li>不履行公务员义务，不遵守法律和公务员纪律，经教育仍无转变，不适合继续在机关工作，又不宜给予开除处分的。比如《人民的名义》中的孙连成不作为，但不贪污、不受贿，就是不履行公务员义务，给予辞退。</li><li>旷工或者因公外出、请假期满无正当理由逾期不归连续超过十五天，或者一年内累计超过三十天的。旷工是没有请假。连续是15天，累计是30天。</li></ul></li><li>记忆口诀：连续两年打领导（连续两年不称职），啥活我都干不了（不胜任现职工作，又不接受其他安排，调整了也不服从）；目无法纪不干活（不遵守法律、纪律，不履行公务员义务），十五三十往外跑（超过十五天，或者一年内累计超过三十天）。</li></ul></blockquote><h3 id="5-2-4-不得辞退"><a href="#5-2-4-不得辞退" class="headerlink" title="5.2.4    不得辞退"></a>5.2.4    不得辞退</h3><p>对有下列情形之一的公务员，不得辞退：</p><ul><li>因公致残，被确认丧失或者部分丧失工作能力的；</li><li>患病或者负伤，在规定的医疗期内的；</li><li>女性公务员在孕期、产假、哺乳期内的；</li><li>法律、行政法规规定的其他不得辞退的情形。</li></ul><blockquote><p>【解析】</p><ul><li>不能辞退：为了保护某些特定公务员。<ul><li>因公致残，被确认丧失或者部分丧失工作能力的：如甲为了国家而残疾不得被辞退，非因公致残可以辞退。</li><li>患病或者负伤，在规定的医疗期内的：仅限于医疗期内，如果医疗期满可以辞退。</li><li>女性公务员在孕期、产假、哺乳期内的，为了保护女星。</li><li>法律、行政法规规定的其他不得辞退的情形。</li></ul></li><li>口诀：因公致残，看病生娃。</li></ul></blockquote><h2 id="5-3-公务员的退休"><a href="#5-3-公务员的退休" class="headerlink" title="5.3    公务员的退休"></a>5.3    公务员的退休</h2><p>公务员达到国家规定的退休年龄或者完全丧失工作能力的，应当退休。</p><p>公务员符合下列条件之一的，本人自愿提出申请，经任免机关批准，可以提前退休：</p><ul><li>工作年限满三十年的；</li><li>距国家规定的退休年龄不足五年，且工作年限满二十年的；</li><li>符合国家规定的可以提前退休的其他情形的。</li></ul><blockquote><p>【解析】</p><ul><li>退休年龄，男60周岁，女55周岁，以后延迟：男65周岁，女60周岁。或完全丧失工作能力，如因病或因意外事故。</li><li>提前退休：<ul><li>工作年限满三十年的。</li><li>距国家规定的退休年龄不足五年，且工作年限满二十年的。如某女姓55岁退休，31岁考上公务员，干了20年后为51岁，距离55岁差4年，此时可以申请提前退休。</li><li>符合国家规定的可以提前退休的其他情形的。</li></ul></li></ul></blockquote><h2 id="5-4-公务员的申诉与控告"><a href="#5-4-公务员的申诉与控告" class="headerlink" title="5.4    公务员的申诉与控告"></a>5.4    公务员的申诉与控告</h2><p>公务员对涉及本人的下列人事处理不服的， 可以自知道该人事处理之日起三十日内向原处理机关申请复核；对复核结果不服的，可以自接到复核决定之日起十五日内， 按照规定向同级公务员主管部门或者作出该人事处理的机关的上一级机关提出申诉；也可以不经复核，自知道该人事处理之日起三十日内直接提出申诉：</p><ul><li>处分；</li><li>辞退或者取消录用；</li><li>降职；</li><li>定期考核定为不称职；</li><li>免职；</li><li>申请辞职、提前退休未予批准；</li><li>不按照规定确定或者扣减工资、福利、保险待遇；</li><li>法律、法规规定可以申诉的其他情形。</li></ul><blockquote><p>【解析】</p><p>对人事问题不服可以找原处理机关申请复核， 同级公务员主管部门或者作出该人事处理的机关的上一级机关提出申诉，不可以到法院提起诉讼，因为属于内部的行为。</p></blockquote><p>对省级以下机关作出的申诉处理决定不服的， 可以向作出处理决定的上一级机关提出再申诉。</p><p><strong>受理公务员申诉的机关应当组成公务员申诉公正委员会， 负责受理和审理公务员的申诉案件</strong>。</p><p>复核、申诉期间不停止人事处理的执行。</p><p>公务员不因申请复核、提出申诉而被加重处理。</p><p>公务员认为机关及其领导人员侵犯其合法权益的， 可以依法向上级机关或者监察机关提出控告。受理控告的机关应当按照规定及时处理。</p><blockquote><p>【解析】</p><ul><li>对省级以下机关作出的申诉处理决定不服，可以再申诉</li><li>总结：<ul><li>复核：找原机关，谁做决定找谁。</li><li>申诉：找同级的主管部门或者决定机关的上一级机关。</li><li>再申诉，谁做出的申诉决定找作出申诉决定的上一级。</li></ul></li><li>受理公务员申诉的机关应当组成公务员申诉公正委员会， 负责受理和审理公务员的申诉案件。 （新增，为了更好的解决争议）</li><li>复核、申诉期间不停止人事处理的执行。复核、申诉成功则停止人事处理执行。</li><li>公务员不因申请复核、提出申诉而被加重处理。如原本要降一级，不服后提出复核，改为降两级是不可以的，为了打消申请复核和申诉的顾虑。</li><li>控告：公务员认为机关及其领导人员侵犯其合法权益的，可以依法向上级机关或者监察机关提出控告。受理控告的机关应当按照规定及时处理。侵犯合法权益既包括侵犯公务的合法权益，也包括侵犯个人的合法权益。<ul><li>公务，公务员执行公务有执行保障权，如警察抓持枪匪徒，别人都配备防弹衣，但是甲和领导关系不好，领导不给甲防弹衣，此时侵犯合法权益，甲可以提出控告。</li><li>个人：如政治权利，领导不让某人参加投票，此时可以提出控告。</li></ul></li></ul></blockquote><h2 id="5-5-任职限制"><a href="#5-5-任职限制" class="headerlink" title="5.5    任职限制"></a>5.5    任职限制</h2><p>公务员辞去公职或者退休的，原系领导成员、县处级以上领导职务的公务员在离职三年内，其他公务员在离职两年内，不得到与原工作业务直接相关的企业或者其他营利性组织任职，不得从事与原工作业务直接相关的营利性活动。</p><blockquote><p>【解析】</p><ul><li>领导成员、县处级以上领导职务的公务员在离职三年内，其他公务员在离职两年内，不得到与原工作业务直接相关的企业或者其他营利性组织任职，不得从事与原工作业务直接相关的营利性活动。防止以权谋私，可能会利用过去的权力谋私利，注意区别时间限制。</li><li>如某法官在离任以后2年内不能以律师身份担任诉讼代理人（营利），属于竞业限制。</li></ul></blockquote><h2 id="5-6-试题"><a href="#5-6-试题" class="headerlink" title="5.6    试题"></a>5.6    试题</h2><ul><li><p>1.（2019-北京）公务员王某准备辞去公职，下列说法中错误的是（）</p><p>A.王某辞去公职后，不再具有公务员身份</p><p>B.王某辞去公职的申请，应交由任免机关审批</p><p>C.王某辞去公职后，可以自由选择企业或社会组织任职</p><p>D.王某离职前，应当办理公务交接手续</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】 1.选非题。</span><br><span class="line">C 项错误： 领导3年限制，或普通人2年的限制。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>2.（2018-山东选调） 某公安分局发生了以下事实， 公务员甲2015年和2017年两年被确定为不称职，公务员乙2017年10月怀孕、不能胜任现职，公务员丙2017年累计旷工 35 天，公务员丁在执行公务时受伤致残、无法胜任现职。2018年1月公安局可以对（）作辞退处理。</p><p>A.甲</p><p>B.乙</p><p>C.丙</p><p>D.丁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.</span><br><span class="line">A 项错误：不符合连续两年的要求。</span><br><span class="line">B 项错误：怀孕期间不能辞退。</span><br><span class="line">C 项正确：连续15日累计30日可以辞退。</span><br><span class="line">D 项错误：因公致残不可以辞退。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>3.（2018 下半年-全国事业单位联考-职测）下列说法不符合我国相关法律法规的是（）。</p><p>A.某财政局处长甲正在接受纪律审查，所以不得辞去公职</p><p>B.某税务局科长乙因连续两年年度考核不称职而被辞退</p><p>C.某国安局科员丙在涉密岗位工作一年后辞职</p><p>D.某分管工业的副县长丁对重大生产事故负有领导责任而引咎辞职</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】3.选非题。</span><br><span class="line">A 项正确：表述正确。</span><br><span class="line">B 项正确：连续两年不称职可以被辞退。</span><br><span class="line">C 项错误：掌握秘密不能辞职。</span><br><span class="line">D 项正确：负有责任可以提出引咎辞职。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>4.（2016-国考地市级）下列处理问题的做法不符合我国相关法律法规的是（）</p><p>A.某公安局处长对本人被辞退的决定不服，当天即向法院提起行政诉讼</p><p>B.某工商局科员拒不赡养父母，情节严重，单位给予其开除处分</p><p>C.某省商务厅厅长退休后第二年到商务厅下属商贸公司任职， 该省公务员主管部门责令其限期改正</p><p>D.某税务局科长执行公务时，认为局长的决定有错误，向局长提出改正意见</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】4.选非题。</span><br><span class="line">A 项错误：内部人事问题不能起诉。</span><br><span class="line">B 项正确：拒不赡养父母情节严重构成遗弃罪，可以被开除。</span><br><span class="line">C 项正确：厅长违背了3年内不能到相关企业进行营利性活动的规定，可以责令其改正。</span><br><span class="line">D 项正确：有问题可以提出意见，如果局长说要求执行则必须执行。 【选 A】</span><br></pre></td></tr></table></figure></li><li><p>5.（2014-412 联考）关于我国公务员制度，下列叙述正确的是（）</p><p>A.正在接受纪律审查的公务员不得辞去公职</p><p>B.我国公务员培训基地是党校</p><p>C.公务员对降职不服，可以向人民法院提出申诉</p><p>D.公务员考核的基本内容包括德、能、勤、绩、才</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】5.</span><br><span class="line">A 项正确:有人调查你，不能辞去公职。</span><br><span class="line">B 项错误：培训基地为行政学院， 党校是对党员干部进行培训。</span><br><span class="line">C 项错误： 不能到法院申诉。</span><br><span class="line">D 项错误：应是德、能、勤、绩、廉。 【选 A】</span><br></pre></td></tr></table></figure></li><li><p>6.（2013-浙江省考A类）下列关于我国公务员制度的表述， 不正确的是（）</p><p>A.根据《公务员法》 ，我国公务员职位类别划分为综合管理类、专业技术类和行政执法类等类别</p><p>B.已被开除的公职人员，不得录用为公务员</p><p>C.工作年满三十年的公务员，可以申请提前退休</p><p>D.对公务员考核的内容包括德、能、勤、绩、廉五个方面，重点考核思想道德与工作能力</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解析】6.选非题。</span><br><span class="line">B 项正确：被开除不得录用。</span><br><span class="line">C 项正确：符合申请提前退休的条件。</span><br><span class="line">D 项错误：根据新法重点考核政治素质、工作实绩。【选 D】</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-7-考点总结"><a href="#5-7-考点总结" class="headerlink" title="5.7    考点总结"></a>5.7    考点总结</h2><p><img src="https://img-blog.csdnimg.cn/20201118193534579.png" alt="image-20201118192536922"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.    概要&quot;&gt;&lt;/a&gt;1.    概要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本节课讲解新的《公务员法》，新法自2019年6月1日起施行，如果有些题目或资料和讲解不同，按照老师讲解为准。&lt;/li&gt;
&lt;li&gt;授课思路：对于未修改的地方学习怎么考，哪里是出题点：哪里修改哪里是重要考点；面对比较难背的地方用口诀快速记忆。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="公务员" scheme="https://wgy1993.gitee.io/tags/%E5%85%AC%E5%8A%A1%E5%91%98/"/>
    
      <category term="常识" scheme="https://wgy1993.gitee.io/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="新《公务员法》考点梳理" scheme="https://wgy1993.gitee.io/tags/%E6%96%B0%E3%80%8A%E5%85%AC%E5%8A%A1%E5%91%98%E6%B3%95%E3%80%8B%E8%80%83%E7%82%B9%E6%A2%B3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>航天史和古代天文历法</title>
    <link href="https://wgy1993.gitee.io/archives/50286772.html"/>
    <id>https://wgy1993.gitee.io/archives/50286772.html</id>
    <published>2020-11-18T05:44:51.000Z</published>
    <updated>2020-11-18T05:45:33.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概要"><a href="#1-概要" class="headerlink" title="1.    概要"></a>1.    概要</h1><p>这节课学习航天史和古代天文历法，共有两部分内容。考试的时候两部分内容都有涉及，但古代天文历法考查更多。</p><a id="more"></a><h1 id="2-航空航天"><a href="#2-航空航天" class="headerlink" title="2.    航空航天"></a>2.    航空航天</h1><p>这部分从国内、国际两个维度来讲解，同时归纳一些重点，大家只需要掌握重点即可。航天史是一部很长的历史，有很多的事件，只要掌握考试考的高频内容即可。</p><h2 id="2-1-国际航空航天发展史"><a href="#2-1-国际航空航天发展史" class="headerlink" title="2.1    国际航空航天发展史"></a>2.1    国际航空航天发展史</h2><ul><li>第一个进入宇宙的人：加加林；</li><li>第一个太空行走的人：列昂洛夫；</li><li>第一个登上月球的人：阿姆斯特朗；</li><li>第一个发射升空的人造卫星的国家：前苏联；</li><li>全球四大导航系统：<ul><li>GPS 系统；</li><li>北斗系统；</li><li>GLONASS 系统；</li><li>伽利略卫星导航系统。</li></ul></li></ul><blockquote><p>【解析】</p><ul><li>第一个进入宇宙的人：加加林（前苏联） 。进入宇宙是很多人的梦想，中国古代有很多人想上天，由于当时的条件限制没有达成。1961 年 4 月 12 日，加加林乘坐东方一号宇宙飞船从拜科鲁尔发射场起飞，最终到达太空，实现了人类进入太空的愿望，东方一号飞船也成为第一个载人进入外层空间的航天器。后来加加林在 1968 年因为飞机失事遇难。</li><li>第一个太空行走的人：列昂洛夫（前苏联） 。1965 年，列昂洛夫和他的伙伴乘坐上升 2 号宇宙飞船进入太空，飞行过程中，列昂洛夫在舱外停留了 20 多分钟时间，本来预计停留时间还要长，但因为他的宇航服压力过大，使得他很难返回上升 2 号舱口，最后还是回去了。</li><li>第一个登上月球的人：阿姆斯特朗。考试会考人名和对应的事迹，注意即可。 阿姆斯特朗在 1969 年乘坐阿波罗 11 号宇宙飞船进入太空，最终踏上月球的土地。他的名言：这是个人的一小步，但是人类迈出的一大步。</li><li>第一个发射升空的人造卫星的国家：前苏联。前苏联曾经为了争夺世界霸权，和美国展开了各个维度的竞争，包括军备竞赛、空间竞争。1957 年，苏联研发出斯普特尼克一号人造卫星， 直径 58 厘米， 重 83.6 千克， 有四个鞭状天线，有科学仪器， 升空后发射了三个星期左右的信号， 后来在轨道中度过了 3 个多月，再后来就不见了。中国发射的第一颗人造卫星东方红一号在太空中失联后，直到现在还在太空中飞行，2020 年我国捕获了东方红一号卫星。</li><li>全球四大导航系统：考试会问哪些属于导航系统，哪些不属于。如墨子号卫星、风云气象卫星，不是定位卫星。<ul><li>GPS 系统：是美国全球卫星定位系统的简称，始于 1958 年美国军方开始的一个定位项目， 1964 年投入使用。 最开始的目的是为了给陆海军提供实时、全天候的全球导航服务，到现在在民用方面也有重要用途。如车载的导航卫星、导航系统、手机等都会用到 GPS。</li><li>北斗系统：中国。1994 年开始建，分成北斗一号、北斗二号、北斗三号系统， 北斗系统整个由 55 颗卫星组成， 北斗三号有 30 颗， 还有 5 颗实验卫星。2020 年 7 月 31 日，习近平总书记向全世界宣布，北斗全球卫星导航系统正式建成运营，开始向 120 多个国家和地区输出导航服务。</li><li>GLONASS 系统：是俄罗斯继承前苏联的研究成果，俄罗斯自 1993 年开始独自在原先苏联技术的基础之上，开始建立俄罗斯的导航系统。2007 年开始运营，2009 年拓展到全球服务范围。</li><li>伽利略卫星导航系统： 中国曾经是伽利略卫星导航系统的研发成员国，付了 2 亿多欧元后，请求分享原子钟相关的技术，没有得到同意后退出。2019年 7 月份，伽利略导航系统因为技术故障导致服务中断，8 月份才恢复。</li></ul></li></ul></blockquote><h2 id="2-2-中国航空航天发展史"><a href="#2-2-中国航空航天发展史" class="headerlink" title="2.2    中国航空航天发展史"></a>2.2    中国航空航天发展史</h2><p><img src="https://img-blog.csdnimg.cn/20201118134300116.png" alt="image-20201118131456477"></p><blockquote><p>【解析】</p><ul><li>考试会考重要航空航天器的名称和标志性内容之间的对应关系。如 1970年 4 月 24 日，东方红一号，我国第一颗自主建造的人造卫星飞上天空，4 月 24日也是我国的航天日。</li><li>2003 年 10 月发射神舟 5 号，是我国首次发射的载人航天飞行器，杨利伟成为我国第一个进入太空的人。</li><li>2016 年 10 月发射了神舟 11 号，自从 2016 年以后，我国再没有发射过载人飞船，神舟 11 号是截至当时持续时间最长的一次载人飞行，连同返回共有 33天。</li><li>天宫 2 号于 2016 年 9 月发射，是我国自主研发的第二个空间实验室。2016-2017 年的考题中曾经表述为“空间站” ，两者是有区别的，空间实验室是前期比较基础的、 比较小的， 空间站对接口多、 舱位多， 能容纳人活动的时间长。我国将在未来成为唯一一个独立拥有空间站的国家。 考试中如果出现空间站也不能选错，因为以前的公务员考试题目中曾经出现过，而且选项是正确的。</li><li>嫦娥 4 号 2018 年发射升空，上面携带着玉兔 2 号月球车，着陆在月球表面之后，把玉兔 2 号放出来，玉兔 2 号借助太阳能发电进行行走。嫦娥 4 号成功实现了人类首次月背软着陆，月球永远一面向着地球，另一面是不知道的，月背软着陆能够对月背进行详细的了解。</li><li>最早的长征 5 号于 2016 年发射， 是我国最大推力的新一代运载火箭。 2019年我国发射了长征五号遥三，2020 年发射了长征五号遥四火箭。</li><li>长征 7 号的作用是运送货运飞船，我国的货运飞船是天舟系列。注意：神州系列是送人的，天舟系列是送货的。</li><li>长征 11 号是海上发射的运载火箭，我国 2019 年、2020 年都在海上进行了发射，首次海上发射是 2019 年。海上发射成功后我们可以把发射台拖到赤道附近，可以用更小的推力送向更高的轨道。</li><li>天问 1 号是我国天问系列行星探测任务中的第一颗探测器， 主要任务是探测火星。太阳系有八大行星：水星、金星、地球、火星、木星、土星、天王星、海王星。</li><li>神州系列是我国的载人飞船，天宫系列是空间实验室，嫦娥系列是登月探测器， 长征系列是运载火箭， 东风系列是我国的导弹， 北斗卫星是用于导航的，风云系列卫星用于气象观测。我国重要的航天发射场：海南文昌、四川西昌、甘肃酒泉、山西太原。</li></ul></blockquote><h2 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3    总结"></a>2.3    总结</h2><p><img src="https://img-blog.csdnimg.cn/20201118134331352.png" alt="image-20201118131837944"></p><blockquote><p>【解析】</p><ul><li>国际航空航天发展史：加加林进入太空，列昂洛夫太空行走，阿姆斯特朗上月球， 斯普特尼克一号人造卫星， 四大导航系统： 美国 GPS， 俄罗斯格洛纳斯，欧盟伽利略，中国北斗。</li><li>中国航空航天发展史： 东方红一号——第一颗人造卫星上天。神舟 5 号——首个载人飞船。神舟 11 号——当时持续时间最长。天宫 2 号——第一个真正意义上的空间实验室。嫦娥 4 号——携带玉兔 2 号月球车，在月背软着陆。长征五号——推力最大。长征七号——搭载货运飞船。长征 11 号——海上发射。天问 1 号——我国首个火星探测器。</li></ul></blockquote><h2 id="2-4-试题"><a href="#2-4-试题" class="headerlink" title="2.4    试题"></a>2.4    试题</h2><ul><li><p>【例 1】 （2017 江西-省考）2016 年 11 月 3 日 20 时 43 分，从中国文昌航天发射场点火升空， 完成首次发射任务并取得圆满成功的我国最大推力新一代运载火箭是（ ） 。</p><p>A．长征七号</p><p>B．长征六号</p><p>C．长征五号</p><p>D．长征八号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【例 2】 （2016 下半年联考-事业单位） 关于航天科技， 下列表述错误的是 （ ） 。</p><p>A．1969 年，苏联宇航员加加林在月球上留下人类第一个脚印</p><p>B．中国嫦娥三号探月器上搭载的月球车名为“玉兔”</p><p>C．中国第一位进入太空的宇航员是杨利伟</p><p>D．目前，中国已有女宇航员进入太空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.选非题。</span><br><span class="line">A 项错误：应该是美国宇航员阿姆斯特朗。</span><br><span class="line">D 项正确：刘洋、王亚平。 【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【例 3】 （2017 国考）下列关于航天器的说法正确的是（ ） 。</p><p>A． “风云”系列气象卫星通过光纤实现与地面的数据传输</p><p>B． “玉兔”号月球车在月球上行走的动力驱动是电动车</p><p>C． “长征一号”属于二级运载火箭</p><p>D． “北斗二号”属于通信广播卫星</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解析】3.</span><br><span class="line">A 项错误：光纤是实体，不能在卫星后面拖一条长长的线。</span><br><span class="line">C 项错误：属于三级运载火箭。</span><br><span class="line">D 项错误：属于导航卫星。 【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 4】 （2011 国考）下列关于人类航天史的说法，正确的是（ ） 。</p><p>A．成功将世界上第一颗人造地球卫星送入太空的是美国</p><p>B．前苏联宇航员加加林是世界上第一个进行太空行走的人</p><p>C．首次实现登月的载人飞船是“阿波罗 13 号”</p><p>D．载人飞船首次在地球轨道上实现交会和对接是在 20 世纪 60 年代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解析】4.</span><br><span class="line">A 项错误：是苏联。</span><br><span class="line">B 项错误：是列昂洛夫。</span><br><span class="line">C 项错误：是阿波罗 11 号。 【选 D】</span><br></pre></td></tr></table></figure></li><li><p>【例 5】 （2015 政法干警）马航 MH370 航班失踪后，人们开始重新考虑在客机上强制安装全球导航系统的可行性和必要性。 下列哪一项不能提供这样的全球导航服务（ ） 。</p><p>A．全球定位系统</p><p>B．北斗卫星导航定位系统</p><p>C．欧盟的“伽利略”计划</p><p>D．阿波罗——联盟测试系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】5.选非题。 【选 D】</span><br></pre></td></tr></table></figure></li><li><p>【例 6】 （2016 省考-多省联考）洲际导弹通常指射程大于 8000 公里的远程弹道式导弹。目前，中国研制的洲际弹道导弹主要是什么系列的（ ） 。</p><p>A． “东风”系列</p><p>B． “长征”系列</p><p>C． “红旗”系列</p><p>D． “天宫”系列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【解析】6.</span><br><span class="line">B 项错误：长征系列是运载火箭。</span><br><span class="line">D 项错误：天宫系列是空间实验室。 【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【例 7】 （2014 省考-山东） 我国已有或正在建设的航天发射场不包括 （ ） 。</p><p>A．文昌  </p><p>B．西安</p><p>C．酒泉  </p><p>D．太原</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】7.选非题。 【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 8】 （2013 国考）下列卫星系列不属于我国对地观测卫星的是（ ） 。</p><p>A． “海洋”  </p><p>B． “风云”</p><p>C． “天绘”  </p><p>D． “北斗”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】 8.选非题。 </span><br><span class="line">D 项错误： 北斗卫星是导航卫星， 不是对地观测。 【选 D】</span><br></pre></td></tr></table></figure></li><li><p>【例 9】 （2019 多省联考）2019 年 1 月 3 日上午 10 时 26 分， （ ）探测器成功在月球背面着陆，此次任务实现了人类探测器首次月背软着陆、首次月背与地球的中继通信。</p><p>A．玉兔二号  </p><p>B．嫦娥四号</p><p>C．天宫二号  </p><p>D．鹊桥号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】 9.</span><br><span class="line">A 项错误： 玉兔二号是月球车， 嫦娥四号着陆后才会放出月球车。【选 B】</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-古代天文历法成就"><a href="#3-古代天文历法成就" class="headerlink" title="3.    古代天文历法成就"></a>3.    古代天文历法成就</h1><h2 id="3-1-古代天文历法成就"><a href="#3-1-古代天文历法成就" class="headerlink" title="3.1    古代天文历法成就"></a>3.1    古代天文历法成就</h2><ul><li><p>夏商时期</p><ul><li>《夏小正》 。</li><li>殷历。</li></ul></li><li><p>春秋战国时期</p><ul><li>《春秋》记载，公元前 613 年， “有星孛入于北斗” 。</li><li>《甘石星经》 。</li></ul></li><li><p>秦汉时期</p><ul><li>汉武帝时，制定出中国第一部比较完整的历书——《太初历》 。</li><li>西汉时期太黑子的记录。</li></ul></li><li><p>隋唐时期</p><p>僧一行——《大衍历》 。</p></li><li><p>宋元时期</p><p>郭守敬——《授时历》 。</p></li></ul><blockquote><p>【解析】</p><ul><li>这部分比较简单，知道有哪些成就，了解并且把考试重点圈出来即可。</li><li>夏商时期：<ul><li>《夏小正》 ： 作者是谁无从考察， 通常认为这本书介于战国和两汉期间，反映的是夏朝立法，本身可能有残缺和其他错误。真正成书、完全被人记载可能已经到了后期。虽然这一作品无从可考，但目前所存的版本，一定程度上反映了先秦时期中原农业生产发展的水平，也保存了我国比较古老、珍贵的历法知识。</li><li>殷历：殷商时期所用的历法，是中国古代历法中的一种，据说把每年分为春、秋，大月 30 天，小月 20 天，闰月置于年末，是我国古代重要的历法。</li></ul></li><li>3.春秋战国时期：<ul><li>《春秋》 记载， 公元前 613 年， “有星孛入于北斗” 。 描写的是哈雷彗星，是世界上最早关于哈雷彗星的记载， 英国物理学家哈雷首先测定了其轨道数据并成功预言了回归时间，最终命名为哈雷彗星，中国虽然先发现，但并没有以中国发现者的名字命名。</li><li>《甘石星经》 ：是世界上现存最早的天文学著作之一，是中国古代天文学专著和记录， “甘”指甘德， “石”指石申，甘德有人说是楚国人，有人说是鲁国人，石申是魏国人，两人各自写了一部天文著作，合起来成为《甘石星经》 ，他们观测了金、 木、 水、 火、 土五颗行星的运行， 还总结了五颗行星运行的规律，是非常重要的天文历法成就。</li></ul></li><li>秦汉时期：<ul><li>汉武帝时，制定出中国第一部比较完整的历书——《太初历》 。司马迁42 岁时倡导并参与制定了《太初历》 。 《太初历》是中国第一部有完整文字记载的历法，它的朔望月和回归年数据不是很精确，但已经非常不错了。</li><li>西汉时期太阳黑子的记录。我国历史上有非常丰富的对太阳黑子的记录，现存世界上最早的明确记录太阳黑子的时间是公元前 28 年，是汉朝人观测到的。在《汉书·五行志》里写到， “三月乙未，日出黄，有黑气大如钱，居日中央” ，就是太阳黑子。哈雷彗星和太阳黑子都是中国最早记录的。</li></ul></li><li>隋唐时期：僧一行——《大衍历》 。僧一行是唐朝僧人，是我国唐朝著名的天文学家，在佛法研究方面也具有非常重要的贡献。 《大衍历》系统周密、比较准确的反映了太阳运行的规律，也表明了中国古代立法体系的成熟。僧一行用科学实地测量的方法，测量了子午线的长度，子午线是经线。</li><li>宋元时期：郭守敬——《授时历》 。元朝颁布此历法的时候，郭守敬不是主编， 但考试的时候经常把郭守敬和 《授时历》 放在一起考， 大家对应记忆即可。《授时历》的精度与现行的相当，又比现行历法早了 300 多年。 《授时历》是元世祖忽必烈赐书得来的，它测得一年有 365.2425 天，现在的观测测得一年有365.2422 天。</li></ul></blockquote><h3 id="3-1-1-试题"><a href="#3-1-1-试题" class="headerlink" title="3.1.1    试题"></a>3.1.1    试题</h3><ul><li><p>【例 10】 （2015 北京市考）下列关于哈雷彗星的说法，错误的是（ ） 。</p><p>A．哈雷彗星的运行周期最早是英国人爱德蒙•哈雷测量出来的</p><p>B．公元前 613 年，我国在世界上第一次确切记录了哈雷彗星的回归</p><p>C．哈雷彗星的平均公转周期为 100 年</p><p>D．哈雷彗星是人类首颗有记录的周期彗星</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】10.选非题。</span><br><span class="line">C 项错误：应该是 76 周年。 【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【例 11】 （2019 多省联考）下列关于我国古代天文学成就的说法错误的是（ ） 。</p><p>A． 《太初历》精度与公历相当</p><p>B．唐代僧一行制作了金属黄道游仪</p><p>C． 《天文》记录了上百颗恒星的赤道坐标位置</p><p>D． 《汉书·五行志》记录了太阳黑子活动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【解析】11.选非题。</span><br><span class="line">A 项错误：与公历相当的是元朝郭守敬主编的《授时历》 ， 《太初历》基本上来说还可以，但还差很多。</span><br><span class="line">B、C、D 项不建议记忆，不是常考的点，只会出现一次，只是凑数的。黄道游仪是用来观测日夜星辰位置变化的一种仪器，是机械制造家梁令瓒用木料制造的模型，后来在僧一行主持下铸成铜器。 《天文》的作者是战国时期的天文学家石申。一般来说不知道、不熟悉的选项不会是题目的正确答案，一般常识题解题的核心和关键是大家所熟知的、高频的知识。 【选 A】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-常考古代历法概念"><a href="#3-2-常考古代历法概念" class="headerlink" title="3.2    常考古代历法概念"></a>3.2    常考古代历法概念</h2><ul><li><p>日、月、年</p><ul><li>日：反映太阳出没；</li><li>月：反映月相变化；</li><li>年：反映冷暖交替的周期。</li></ul></li><li><p>中国历法</p><p>中国历法是阴阳合历。</p></li></ul><blockquote><p>【解析】</p><ul><li>日、月、年<ul><li>日：反映太阳出没。即太阳升起、落下、再升起。日出日落变化为一日。</li><li>月：反映月相变化。从开始看不见到朔望变化，从新月到满月。</li><li>年：反映冷暖交替的周期。如春夏秋冬四季更迭。</li></ul></li><li>中国历法： 中国历法是阴阳合历。 如果一个历法只有月的变化叫做阴历，只以年来记录叫做阳历，年就是反映地球绕太阳公转的变化状况。中国历法的农历既有年，也有月，所以是阴阳合历。</li></ul></blockquote><h3 id="3-2-1-试题"><a href="#3-2-1-试题" class="headerlink" title="3.2.1    试题"></a>3.2.1    试题</h3><ul><li><p>【例 12】 （2017 多省联考）历法是推算年月日、使其与相关天象对应并协调时间的方法。现行历法主要有三种：阳历即太阳历，主要依据为回归年；阴历或称太阴历，主要依据为朔望月；阴阳历的平均历年为回归年，历月为朔望月。那么，我国农历属于（ ）</p><p>A．阴历  </p><p>B．阳历</p><p>C．阴阳历  </p><p>D．以上都不是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】12.【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【例 13】 （2016 年江西法检）二十四节气是以（ ）为依据确定的。</p><p>A．太阴历  </p><p>B．太阳历</p><p>C．阴阳合历  </p><p>D．潮汐运动规律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】13.</span><br><span class="line">B 项正确：二十四节气是把地球绕太阳公转过程分成 24 份，24节气完成一圈，春夏秋冬就更替了一圈，是以年为基准的。 【选 B】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-二十四节气"><a href="#3-3-二十四节气" class="headerlink" title="3.3    二十四节气"></a>3.3    二十四节气</h2><ul><li>中国古代指导农事的补充历法，属于阳历系统。将地球绕着太阳公转的轨道分成 24 份，因公转的速度不均匀，因此节气便有，14 天，16 天之分。</li><li>早在春秋战国时代，汉族劳动人民就有了“日南至” 、 “日北至”的概念，到了秦汉年间，二十四节气已经完全确立。</li><li>《淮南子》一书记载了和现代完全一样的二十四节气的名称，公元 104年， 《太初历》正式把二十四节气定于历法，明确了二十四节气在天文历法中的位置。</li></ul><blockquote><p>【解析】</p><p>二十四节气：了解即可，不需要精准记忆。</p><ul><li>中国古代指导农事的补充历法，属于阳历系统。将地球绕着太阳公转的轨道分成 24 份，因公转的速度不均匀，因此节气便有，14 天，16 天之分。</li><li>早在春秋战国时代，汉族劳动人民就有了“日南至” 、 “日北至”的概念，到了秦汉年间，二十四节气已经完全确立。</li><li>《淮南子》一书记载了和现代完全一样的二十四节气的名称，公元 104年， 《太初历》正式把二十四节气定于历法，明确了二十四节气在天文历法中的位置。</li></ul></blockquote><p>二十四节气的顺序是：</p><p>正月：立春、雨水；二月：惊蛰、春分；三月：清明、谷雨；</p><p>四月：立夏、小满；五月：芒种、夏至；六月：小暑、大暑；</p><p>七月：立秋、处暑；八月：白露、秋分；九月：寒露、霜降；</p><p>十月：立冬、小雪；十一月：大雪、冬至；十二月：小寒、大寒</p><blockquote><p>【解析】</p><ul><li>首先要把 24 节气的名称记清楚，口诀：春雨惊春清谷天，夏满芒夏暑相连，秋处露秋寒霜降，冬雪雪冬小大寒。考试一是考顺序，二是考具体某个节气的特点。 不需要把全部都掌握， 只需要掌握核心的知识， 考试基本上就能够做对。</li><li>惊蛰：大约在每年的 3 月 5 日到 3 月 6 日，意味着春雷开始，蛰伏在地下的昆虫苏醒过来，春雷惊百虫。</li><li>春分：太阳直射赤道，南北半球昼夜等长。</li><li>清明：大概在 4 月 4 日至 4 月 6 日。清明节在 4 月 5 日。清明是一个非常重要的节气，清明节这一天通常会祭祖。清明节气意思是清明过后，万物生长、发芽， 出现了春和景明之象， 和万物生长发育有一定的关系。 清明时节气候清爽、温暖。</li><li>小满：大概在 5 月 20 日至 5 月 22 日，意思是作物开始成熟、开始灌浆。二十四节气传到南方以后，小满时节是南方的梅雨季节，所以又有“小满大满江河满”的说法，但小满最初的说法就是指作物籽粒开始灌浆饱满但尚未成熟。</li><li>芒种：作物成熟，准备收割。大概是 6 月 5 日到 6 月 6 日。 “芒”是指有芒一类的作物，中国古代的小麦都是有芒的。 “种”有两种说法，一种说法是种子，另外的说法是种东西。</li><li>夏至：太阳直射北回归线。</li><li>处暑：不是夏季的节气，是秋季的节气。 “处”的意思是结束、终结，意味着结束炎热，即不热了。</li></ul></blockquote><h3 id="3-3-1-试题"><a href="#3-3-1-试题" class="headerlink" title="3.3.1    试题"></a>3.3.1    试题</h3><ul><li><p>【例 14】 （2014 黑龙江） “二十四节气”中的“夏满芒夏暑相连”包含了多少个节气（ ） 。</p><p>A．6</p><p>B．5</p><p>C．4</p><p>D．7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】14.</span><br><span class="line">A 项正确：立夏、小满、芒种、夏至、小暑、大暑。 【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【例 15】 （2015 国考-地市级）下列说法符合生活实际的是（ ） 。</p><p>A．小满时节，我国东部由低温导致呼吸疾病明显增多</p><p>B．芒种时节，我国南方居民发现春困的感觉有所加剧</p><p>C．处暑时节，我国北方医院里中暑病人相对有所减少</p><p>D．雨水过后我国西部蚊蝇所传播的疾病开始明显增多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】15.</span><br><span class="line">A 项错误：小满是夏季的节气，温度应该高了。</span><br><span class="line">B 项错误：芒种是夏季的节气，不会春困。</span><br><span class="line">C 项正确：处暑以后，热就终结了。</span><br><span class="line">D 项错误：雨水大约是每年的 2 月 18 日至 2 月 19 日，是低温时期，蚊蝇不多。 【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【例 16】 （2013 四川省考） 下列对 “惊蛰” 这一节气的描述最准确的是 （ ） 。</p><p>A．标志着冬天的结束，春天开始</p><p>B．降雨量充沛，利于谷物生长</p><p>C．天气晴朗，气温较高，春天已接近尾声</p><p>D．温度逐渐升高，渐渐有了春雷，冬眠动物复苏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解析】16.</span><br><span class="line">A 项错误：应该是立春。</span><br><span class="line">B 项错误：应该是谷雨。</span><br><span class="line">C 项错误：没有具体的时间，大约在清明谷雨期间。 【选 D】</span><br></pre></td></tr></table></figure></li><li><p>【例 17】 （2018 多省联考）下列四个节气所表示的含义错误的是（ ）</p><p>A．处暑：炎热夏季即将到来</p><p>B．惊蛰：天气回暖，春雷始鸣</p><p>C．冬至：冬季最寒冷的日子开始</p><p>D．小满：夏熟作物籽粒开始灌浆饱满但未成熟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】17.选非题。</span><br><span class="line">A 项错误：处暑意味着夏季已经结束了，是秋天的节气。 【选 A】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-4-干支纪年法"><a href="#3-4-干支纪年法" class="headerlink" title="3.4    干支纪年法"></a>3.4    干支纪年法</h2><p>十天干：甲、乙、丙、丁、戊、己、庚、辛、壬、癸。</p><p>十二地支：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥</p><p>将天干地支组成六十个数的周期用以纪念，从甲子开始，以癸亥结束，这种方式就是干支纪年法。</p><blockquote><p>【解析】</p><ul><li>天干地支纪年法在考试中经常出现，而且在我国古代也是非常重要的。现在很多老黄历上还会标天干地支， 干支记年考试非常简单， 大家要先掌握十天干、十二地支。</li><li>将天干地支组成六十个数的周期用以纪念，从甲子开始，以癸亥结束，这种方式就是干支纪年法。当甲子重新出现就是 60 年。</li><li>考试题目一般会给出初始年份的干支记年，如某年是甲子年，然后问 5年或者 6 年以后是什么年，假设是 5 年，天干往后数 5 个数，是己，地支数 5个数，是巳，即五年后是己巳年，六年后是庚午年。癸申年下一个是甲酉年。</li></ul></blockquote><h3 id="3-4-1-试题"><a href="#3-4-1-试题" class="headerlink" title="3.4.1    试题"></a>3.4.1    试题</h3><ul><li><p>【例 18】 （2011 多省联考-下半年） 中国古代以天干地支纪年， 天干是： 甲、乙、丙、丁、戊、己、庚、辛、壬、癸。地支是：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥。甲午战争发生在 1894 年，1900 年八国联军侵华以干支纪年是（ ） 。</p><p>A．乙亥年</p><p>B．庚子年</p><p>C．辛丑年</p><p>D．壬寅年</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】18.</span><br><span class="line">B 项正确：1900 年和 1894 年相差 6 年，往后数 6 个数，得到庚子年。 【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 19】 （2011 上海市考）我国农历中以天干、地支的搭配来纪年，其中十天干为甲、乙、丙、丁、戊、己、庚、辛、壬、癸；十二地支为子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥。搭配的方式是：在天干中和地支中依次各取一字搭配来纪年， 例如 1920 年是庚申年， 下一年的天干为辛， 地支为酉， 故 1921年，也就是中国共产党成立的这年，是辛酉年。那么，中国共产党成立后的下一个辛酉年是公元多少年（ ） 。</p><p>A．1981  </p><p>B．1991</p><p>C．2000  </p><p>D．2001</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】19.</span><br><span class="line">A 项正确：周期是 60 年。 【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【例 20】 （2015 河北省考） 我国农历采用天干地支纪年法， 天干是： 甲、 乙、丙、丁、戊、己、庚、辛、壬、癸。地支是：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥。以天干地支纪年，2015 年是乙未年，2020 年是（ ） 。</p><p>A．丙申年  </p><p>B．甲子年</p><p>C．庚子年  </p><p>D．壬申年</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】20.</span><br><span class="line">C 项正确：往后数 5 个数，得到庚子年。 【选 C】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5    总结"></a>3.5    总结</h2><p><img src="https://img-blog.csdnimg.cn/2020111813433768.png" alt="image-20201118132712344"></p><blockquote><p>【注意】</p><ul><li>古代天文历法成就：夏商时期的《夏小正》 、殷历。春秋战国时期：哈雷彗星、 《甘石星经》 。秦汉时期： 《太初历》 、太阳黑子。隋唐时期：僧一行《大衍历》 、子午线。宋元时期：郭守敬《授时历》 。</li><li>常考古代历法概念：日：反映太阳出没；月：反映月相变化；年：反映冷暖交替的周期。</li><li>二十四节气：春雨惊春清谷天，夏满芒夏暑相连，秋处露秋寒霜降，冬雪雪冬小大寒。</li><li>干支纪年法：甲、乙、丙、丁、戊、己、庚、辛、王、癸；子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.    概要&quot;&gt;&lt;/a&gt;1.    概要&lt;/h1&gt;&lt;p&gt;这节课学习航天史和古代天文历法，共有两部分内容。考试的时候两部分内容都有涉及，但古代天文历法考查更多。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="公务员" scheme="https://wgy1993.gitee.io/tags/%E5%85%AC%E5%8A%A1%E5%91%98/"/>
    
      <category term="常识" scheme="https://wgy1993.gitee.io/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="航天史和古代天文历法" scheme="https://wgy1993.gitee.io/tags/%E8%88%AA%E5%A4%A9%E5%8F%B2%E5%92%8C%E5%8F%A4%E4%BB%A3%E5%A4%A9%E6%96%87%E5%8E%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>我国民族节日及文化习俗</title>
    <link href="https://wgy1993.gitee.io/archives/8ac59bb5.html"/>
    <id>https://wgy1993.gitee.io/archives/8ac59bb5.html</id>
    <published>2020-11-18T05:02:03.000Z</published>
    <updated>2020-11-18T14:01:28.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概要"><a href="#1-概要" class="headerlink" title="1.    概要"></a>1.    概要</h1><ul><li>本节课讲解我国民族节日及文化习俗，内容相对比较简单，离日常生活很近，大家都比较熟悉，因此学习可以轻松一点，尽量课上都记住。</li><li>我国有 56 个民族，节日和文化习俗丰富多样，课程时间有限，不会全部讲到， 针对考试挑一些重点来讲。 从课程安排上来说， 会多花一点时间讲解汉族，因为考试考查较多，也会涉及到常考的少数民族的相关内容。</li><li>56 个民族中人口最多的就是汉族，大多数同学应该都很了解汉族的传统节日，重大的传统节日会放假，但现在传统节日的味道越来越淡，很多人忽略了节日背后的意义及其文化习俗，希望大家通过这节课能够重新认识这些传统节日。</li><li>应对考试，重点掌握各个节日的时间、别称、习俗和相关诗句。</li></ul><a id="more"></a><h1 id="2-汉族传统节日及习俗"><a href="#2-汉族传统节日及习俗" class="headerlink" title="2.    汉族传统节日及习俗"></a>2.    汉族传统节日及习俗</h1><h2 id="2-1-春节"><a href="#2-1-春节" class="headerlink" title="2.1    春节"></a>2.1    春节</h2><ul><li><p>时间及古称</p><p>农历正月初一，古称元日、元旦等</p></li><li><p>起源</p></li><li><p>主要习俗</p><p>祭灶、扫尘、贴春联、除夕守岁、拜年、给压岁钱等</p></li><li><p>文化意蕴</p><p>团聚、对幸福生活的向往</p></li><li><p>常考相关诗词句</p><ul><li>爆竹声中一岁除，春风送暖入屠苏，千门万户瞳瞳日，总把新桃换旧符。——王安石《元日》</li><li>桃符呵笔写，椒酒过花斜。——陆游《己酉元旦》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201118124439276.png" alt="image-20201118113235402"></p><blockquote><p>【解析】</p><p>春节：</p><ul><li><p>时间：农历正月初一。按照习俗，春节会从上一年农历腊月初八（腊八粥）或腊月二十三开始，一直到农历正月十五结束，但做题时要知道春节时间是农历正月初一，这是最能够代表春节的一天。</p></li><li><p>古称元日、元旦：</p><ul><li>元日：很多诗句中都提到过，看到这个词要知道说的是春节。</li><li>元旦： 古时称农历正月初一为元旦， 辛亥革命之后称公历 1 月 1 号为元旦，农历正月初一称为春节， 做题时要加以区分， 古诗词题目看到元旦要知道是春节。</li></ul></li><li><p>起源（了解即可）：春节和年的概念最初都是来源于农业，以前的历法规定农历十月为一年中的第一个月，直到西汉汉武帝时颁布了《太初历》，将农历正月定为一年的开始。</p></li><li><p>主要习俗：联系生活记忆。</p><ul><li>祭灶：每年腊月二十三送灶神的仪式，也称为“送灶”。灶神就是灶王爷，传说灶神每年腊月二十三晚上要上天汇报工作，这一天百姓会供上红烛、糖果、瓜果等送灶王爷上天，希望灶王爷上天多说点自家的好话，回来的时候可以给自家多多增福，这就是祭灶。</li><li>扫尘：“尘”与“陈”谐音，新春扫尘就是除尘布新，小时候过春节父母会拉着小孩大扫除，很多同学应该都有这样的体验。</li><li>贴春联：小时候会跟着长辈帮忙贴春联。春联起源于“桃符”，古人辞旧迎新之际会在桃木板上写上驱鬼辟邪的神仙的名字，希望能够祈福灭祸，后来人们会在上面写上一些吉利话，桃符由驱鬼的桃木牌变成了表达思想的对联。做题时看到“桃符”要知道是古时候的春联，与春节有关。</li><li>除夕守岁： 除夕之夜全家团聚在一起点蜡烛、 吃年夜饭， 需要守过十二点，甚至会通宵，守岁意在驱除邪病、瘟疫，祈祷新一年的吉祥、如意。</li><li>拜年：从大年初一开始走亲访友、互相拜年，传统的拜年不像现在发个微信、抢个红包，而是有规矩的，一拜诸神仙、祖先，二拜长辈亲友，仪式感更强。</li><li>给压岁钱：小孩子最喜欢的环节。传统上给压岁钱不只是为了给钱，而是有寓意的，“岁”与“祟”谐音，长辈给晚辈压岁钱，是为了驱除未来一年可能遭遇的灾祸。</li><li>除以上习俗以外，春节还有吃饺子、贴年画、放鞭炮、逛庙会等习俗。</li></ul></li><li><p>文化意蕴：过春节最大的意义在于团圆，每年的春运可以看出，在外的游子踏上回家的归途，内心非常开心，期盼团圆，与家人团聚也是中国人最朴素的愿望，祭灶、贴春联、守岁等都表达了对幸福、美好生活的向往。</p></li><li><p>相关诗词句：节日部分最大的考点，也是近几年命题人最喜欢的出题角度，需要重视。</p><ul><li>爆竹声中一岁除，春风送暖入屠苏，千门万户瞳瞳日，总把新桃换旧符。——北宋王安石《元日》：<ul><li>描写春节最出名的诗作，考试如果出现需要知道与春节相关，“元日”即春节，如果不知道诗作的名字，通过诗句中的关键词，如“爆竹”（放鞭炮）、“桃符”（春联）等判断即可。</li><li>不要求每一句都背下来，通过诗句中的关键词判断与哪个节日相关即可。</li><li>屠苏：饮屠苏酒是古时过年的一种习俗，喝用屠苏草浸泡的酒可以驱邪避瘟疫求得长寿。</li></ul></li><li>桃符呵笔写，椒酒过花斜。——南宋陆游《己酉元旦》：“元旦”可知与春节有关，古时元旦即为春节，关键词“桃符”（春联）。</li></ul></li></ul></blockquote><h2 id="2-2-元宵节"><a href="#2-2-元宵节" class="headerlink" title="2.2    元宵节"></a>2.2    元宵节</h2><ul><li><p>时间及古称</p><p>农历正月十五，古称上元节、元夕等</p></li><li><p>起源</p></li><li><p>主要习俗</p><p>吃元宵、赏花灯、猜灯谜、迎紫姑等</p></li><li><p>文化意蕴</p><p>如意太平、团团圆圆</p></li><li><p>常考相关诗词句</p><ul><li>去年元夜时，花市灯如昼。月到柳梢头，人约黄昏后。——欧阳修《生查子·元夕》</li><li>众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。——辛弃疾《青玉案·元夕》</li><li>身闲不睹中兴盛，羞逐乡人赛紫姑。——李商隐《观灯乐行》</li><li>火树银花合，星桥铁锁开。暗尘随马去，明月逐人来。游伎皆秾李，行歌尽落梅。金吾不禁夜，玉漏莫相催。——苏味道《正月十五夜》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201118124444631.png" alt="image-20201118114414531"></p><blockquote><p>【解析】</p><p>元宵节：</p><ul><li>时间：农历正月十五。</li><li>古称上元节、元夕：重点记忆。</li><li>元宵节的起源有三种说法：<ul><li>一是来源于佛事活动，东汉明帝刘庄时期提倡佛教，听说佛教有正月十五僧人观佛舍利、 点灯敬佛的做法， 就命令这一天夜晚在皇宫和寺庙里要点灯敬佛，这种礼佛仪式慢慢变成了民间盛大的节日。</li><li>二是起源于道教活动， 道教把正月十五称为上元节、 七月十五称为中元节、十月十五称为下元节，合称“三元”，道教说上元节天官赐福、中元节地官赦罪、下元节水官解厄，上元节慢慢形成元宵节，中元节和下元节主要是为了祭祀，后来过得比较少。</li><li>三是来源于汉代民众在乡野持火把驱赶虫兽，希望减轻虫害、祈祷获得好收成，这样的习俗演变成为今天的元宵节。</li></ul></li><li>主要习俗：<ul><li>吃元宵：宋代已经开始流行，当时叫浮元子。</li><li>赏花灯：每年元宵之夜街上、公园里会摆出各种各样的花灯，一家人同游赏花灯，非常好看。</li><li>猜灯谜：由谜语发展而来，元宵节人们会把谜语绑在花灯上做成灯谜，才出来会有奖品，如“一去就变坏”为“坯”字，下方的“一”去掉就为“坏”字。</li><li>迎紫姑：传说紫姑是一个善良的姑娘，家庭条件不好，辛勤劳作，需要做很多粗活，正月十五这一天紫姑去世，老百姓非常同情她、怀念她，有些地方就出现了正月十五迎紫姑的习俗，每到这天夜晚，人们会用稻草扎成真人大小的紫姑像，到紫姑常干活的厕所、厨房旁边去迎接她。看到紫姑要能联想到元宵节。</li></ul></li><li>文化意蕴：自古以来人们把吃元宵看做吉祥、如意、太平的象征，一家人赏花灯也表现出中国人对阖家团圆的期盼。</li><li>相关诗词句：<ul><li>去年元夜时， 花市灯如昼。 月到柳梢头， 人约黄昏后。 ——北宋欧阳修 《生查子·元夕》：列出的是词的上阙，写的是去年元宵节发生的关于爱情的故事，这一天游花灯、赏歌舞，非常适合约会。关键词“元夕”“元夜”“花灯”，需要知道与元宵节相关。</li><li>众里寻他千百度， 蓦然回首， 那人却在， 灯火阑珊处。 ——南宋辛弃疾 《青玉案·元夕》：“元夕”即元宵节，元宵节灯市这天寻寻觅觅，虽然周围美女如云，但就是没有看对眼的那一个，一个转身眼前一亮，看到了心仪的那个她。考试中知道对应的是元宵节即可。</li><li>身闲不睹中兴盛，羞逐乡人赛紫姑。——唐李商隐《观灯乐行》：关键词“紫姑”。</li><li>火树银花合，星桥铁锁开。暗尘随马去，明月逐人来。游伎皆秾李，行歌尽落梅。金吾不禁夜，玉漏莫相催。——唐苏味道《正月十五夜》：<ul><li>近两年出现频次较高， 苏轼是苏味道的十一世孙， 可见苏轼能成为大文豪，祖上的基因很强大。</li><li>“火树银花合”比喻灿烂的上元节的灯光和烟火；“星桥铁锁开”表明京城开禁，唐朝时期都城有宵禁，正月十五会取消宵禁，平民百姓可以自由通行，《长安十二时辰》讲的就是元宵节取消宵禁，敌人可能趁机制造混乱，张小敬、李必携手拯救长安的故事；“金吾不禁夜”即正月十五这天取消宵禁。通过这些关键词判断是元宵节即可。</li></ul></li></ul></li></ul></blockquote><h2 id="2-3-寒食节"><a href="#2-3-寒食节" class="headerlink" title="2.3    寒食节"></a>2.3    寒食节</h2><ul><li><p>时间及别称</p><p>清明节前二日，亦称“禁烟节”、“冷节”</p></li><li><p>起源</p><p>纪念介子推</p></li><li><p>主要习俗</p><p>禁烟、冷食等</p></li><li><p>文化意蕴</p><p>拜扫祭祖</p></li><li><p>常考相关诗词句</p><ul><li>马上逢寒食，途中属暮春。——宋之问《途中寒食》</li><li>雨中禁火空斋冷，江上流莺独坐听。把酒看花想诸弟，杜陵寒食草青青。——韦应物《寒食寄京师诸弟》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201118124450855.png" alt="image-20201118115006017"></p><blockquote><p>【解析】</p><p>寒食节：相对来说比较陌生，古时有这个节日，慢慢地与清明节合二为一。</p><ul><li><p>时间：清明节的前二日。</p></li><li><p>别称：禁烟节、冷节。</p></li><li><p>起源：纪念春秋时期介子推。春秋时期晋国发生内乱，晋文公重耳遭到晋献公的追杀，颠沛流离十九年，介子推与晋文公患难与共、吃尽苦头，最艰难的时候介子推曾割下自己大腿上的肉给重耳充饥，重耳大为感动，承诺如果有一天自己做了君王一定会好好报答他，但重耳成为晋文公后忘记了介子推，介子推心灰意冷与母亲归隐绵山，晋文公听信谗言为了迫其出山相见下令放火烧山，意外烧死了介子推和他的母亲，晋文公十分懊悔，于是下令这一天家家户户禁烟火，吃三天的冷食，以纪念介子推，因此寒食节又称为“禁烟节”、“冷节”。</p></li><li><p>主要习俗：禁烟（不能生火）、冷食（不需要生火加热就可以吃的食物）等。</p></li><li><p>文化意蕴：寒食节慢慢与清明节合并，演变为拜扫祭祖为主的节日。</p></li><li><p>相关诗词句：</p><ul><li>马上逢寒食，途中属暮春。——宋之问《途中寒食》：关键词“寒食”。</li><li>雨中禁火空斋冷，江上流莺独坐听。把酒看花想诸弟，杜陵寒食草青青。——韦应物《寒食寄京师诸弟》：关键词“禁火”“寒食”。</li><li>补充关键词：新火。寒食节禁烟禁火，寒食节过后可以重新烧火，被称为“新火”，需要注意与寒食节相关，说的是寒食节之后的情景。</li></ul></li></ul></blockquote><h2 id="2-4-清明节"><a href="#2-4-清明节" class="headerlink" title="2.4    清明节"></a>2.4    清明节</h2><ul><li><p>时间</p><p>春分后十五日</p></li><li><p>起源</p><p>清明节得名源于中国农历二十四节气中的清明节气</p></li><li><p>主要习俗</p><p>扫墓、戴柳、植树、踏青、荡秋千、放风筝等</p></li><li><p>文化意蕴</p><p>对先人的缅怀、人与自然的和谐相处</p></li><li><p>常考相关诗词句</p><ul><li>清明时节雨纷纷，路上行人欲断魂。——杜牧《清明》</li><li>好风胧月清明夜，碧砌红轩刺史家。——白居易《清明夜》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201118124456570.png" alt="image-20201118115053798"></p><blockquote><p>【解析】</p><p>清明节：</p><ul><li>时间：春分后十五日，大约在农历三月份、农历四月初，清明节是法定节假日，大约是公历四月四日至六日</li><li>起源：清明节得名源于中国农历二十四节气中的清明节。如果题目中问到传统节日中哪一个是以节气命名的，要知道是清明节。</li><li>习俗：<ul><li>扫墓：上坟，祭祀先人。</li><li>戴柳：“柳”与“留”谐音，古时柳多指留恋，清明正值春节，戴柳表现出对青春年华的珍惜和留恋。</li><li>植树、踏青、荡秋千、放风筝：适合春天的活动。</li></ul></li><li>文化意蕴：扫墓体现了对先人的缅怀，植树、踏青、荡秋千、放风筝等体现了人与自然和谐相处的美好愿景。</li><li>相关诗词句：<ul><li>清明时节雨纷纷，路上行人欲断魂。——唐杜牧《清明》：知道与清明节相关即可。</li><li>好风胧月清明夜，碧砌红轩刺史家。——白居易《清明夜》：清明节的晚上，白居易独自在走廊中欣赏眼下的风景，非常惬意。</li></ul></li></ul></blockquote><h2 id="2-5-端午节"><a href="#2-5-端午节" class="headerlink" title="2.5    端午节"></a>2.5    端午节</h2><ul><li><p>时间及别称</p><p>农历五月初五，又称五月节、浴兰节、重五等</p></li><li><p>传说</p></li><li><p>主要习俗</p><p>吃粽子，赛龙舟，挂菖蒲、艾草，佩香囊，饮雄黄酒等</p></li><li><p>文化意蕴</p><p>爱国情怀、适应节令、驱邪避害</p></li><li><p>常考相关诗词句</p><ul><li>粽包分两髻，艾束著危冠。——陆游《乙卯重五诗》</li><li>轻汗微微透碧纨，明朝端午浴芳兰。——苏轼《浣溪沙·端午》</li><li>莫唱江南古调，怨抑难招，楚江沉魄。——吴文英的《澡兰香·淮安重午》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201118124501959.png" alt="image-20201118115129954"></p><blockquote><p>【解析】</p><p>端午节：</p><ul><li>时间：农历五月初五。</li><li>别称：五月节（时间在五月）、浴兰节（夏天皮肤病多发，古人以兰草汤沐浴）、重五（月、日都是五）等，见到这几个别称知道是端午节即可。</li><li>传说/起源：有很多个，主要是三种。<ul><li>一是为了纪念春秋末期吴国大夫伍子胥，伍子胥是吴王夫差身边的大臣，对夫差说勾践是心腹大患、必须杀掉勾践，夫差不听，而且听信谗言认为伍子胥密谋反吴，于是派人给伍子胥一把剑，让伍子胥自杀，又将伍子胥的尸体在五月初五投了江，因而相传五月初五是纪念伍子胥的。</li><li>二是为了纪念东汉孝女曹娥， 曹娥的父亲溺水而亡， 好多天也没找到尸体，当时曹娥年仅十四岁，昼夜号哭，十七天后五月初五夜里投了江，抱出了她父亲的尸首，就此传为神话。</li><li>三是为了纪念屈原，屈原是战国时期的楚国人，遭到排挤被流放，楚国亡国之后，屈原投汨罗江以身殉国，这是三个传说中流传最广的，一般认为端午节是为了纪念屈原，考试中以端午节纪念屈原为准即可。韩国曾提出端午节是他们的节日。</li></ul></li><li>主要习俗：<ul><li>吃粽子：传说屈原投汨罗江死后为蛟龙所困，蛟龙最怕五色丝线和艾叶，人们怕屈原饿着，于是用艾叶包裹糯米饭，用五色丝线捆绑，投入水中以驱赶蛟龙，这就是端午节吃粽子的来历。</li><li>赛龙舟：屈原投汨罗江后，当地百姓闻讯马上划船来救，一直划到了洞庭湖，这就是端午节赛龙舟的来历。</li><li>挂菖蒲、挂艾草：端午是入夏后的第一个节日，气温上升、疾病多发，人们往往会在家门口挂菖蒲、艾草以驱病、辟邪、防蚊。</li><li>佩香囊、饮雄黄酒：都是为了驱病防病。雄黄酒有杀菌、解五毒的功效，饮了雄黄酒，病魔都远走，《新白娘子传奇》中白素贞饮下雄黄酒就现了原形，变成了大蟒蛇。</li></ul></li><li>文化意蕴：我国的传统节日多是求吉纳祥，端午则是关于屈原的传说，体现了国人的国家意识和民族意识，屈原是楚国亡国后投江，体现了爱国情怀；挂菖蒲、挂艾草、佩香囊、饮雄黄酒体现了适应节令、驱邪避害的追求。</li><li>相关诗词句：<ul><li>粽包分两髻，艾束著危冠。——陆游《乙卯重五诗》：关键词“粽包” “艾束”。</li><li>轻汗微微透碧纨，明朝端午浴芳兰。——苏轼《浣溪沙·端午》：关键词“端午”“浴兰”。</li><li>莫唱江南古调， 怨抑难招， 楚江沉魄。 ——吴文英的 《澡兰香· 淮安重午》 ：关键词“楚江沉魄”，屈原是楚国人，楚江沉魄指的是屈原。</li></ul></li></ul></blockquote><h2 id="2-6-七夕节"><a href="#2-6-七夕节" class="headerlink" title="2.6    七夕节"></a>2.6    七夕节</h2><ul><li><p>时间及别称</p><p>农历七月初七，又称乞巧节等</p></li><li><p>传说</p></li><li><p>主要习俗</p><p>乞巧、拜魁星</p></li><li><p>文化意蕴</p><p>崇尚美好与幸福</p></li><li><p>常考相关诗词句</p><ul><li>柔情似水，佳期如梦，忍顾鹊桥归路。两情若是久长时，又岂在朝朝暮暮。——秦观《鹊桥仙·纤云弄巧》</li><li>天阶夜色凉如水，坐看牵牛织女星。——杜牧《秋夕》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020111812450766.png" alt="image-20201118115210227"></p><blockquote><p>【解析】</p><p>七夕节：</p><ul><li>时间：农历七月初七。</li><li>别称：乞巧节。</li><li>传说：与牛郎织女的故事相关。牛郎织女非常相爱，天帝认为两人门不当、户不对，神仙不能爱上凡人，于是将两人拆散，后来被二人的真情感动，准许二人每年七月初七相会一次，相传这天喜鹊要飞上天庭，在银河搭起鹊桥让牛郎织女相会。</li><li>主要习俗：<ul><li>乞巧：七夕晚上女子会在院子里摆上水果，向织女星祈祷，请求帮助她们提高刺绣、缝纫等技巧，还会穿针引线做一些小物品来比赛，因为古代女子手巧才能嫁得好，图中就是乞巧的场景。</li><li>拜魁星：七月七日是魁星的生日，魁星是主宰文章的神，想求取功名的读书人非常崇拜魁星， 七夕这一天会祭拜祈求保佑自己能够高中， 从而迎娶白富美、走上人生巅峰。</li></ul></li><li>文化意蕴：崇尚美好与幸福，祈祷找到能够陪伴自己一生、相爱一生的那个人。</li><li>相关诗词句：<ul><li>柔情似水， 佳期如梦， 忍顾鹊桥归路。 两情若是久长时， 又岂在朝朝暮暮。——北宋秦观《鹊桥仙·纤云弄巧》。</li><li>天阶夜色凉如水，坐看牵牛织女星。——杜牧《秋夕》：描写一个宫女在七夕之夜借羡慕牛郎织女表达自己孤独寂寞的心情。</li></ul></li></ul></blockquote><h2 id="2-7-中秋节"><a href="#2-7-中秋节" class="headerlink" title="2.7    中秋节"></a>2.7    中秋节</h2><ul><li><p>时间及别称</p><p>农历八月十五，又称团圆节、八月节、追月节等</p></li><li><p>起源</p><p>“中秋”一词，最早见于《周礼》</p></li><li><p>传说</p></li><li><p>主要习俗</p><p>拜月、吃月饼</p></li><li><p>文化意蕴</p><p>对团圆的渴望</p></li><li><p>常考相关诗词句</p><ul><li>但愿人长久，千里共婵娟。——苏轼《水调歌头·明月几时有》</li><li>此生此夜不长好，明月明年何处看。——苏轼《阳关曲·中秋作》</li><li>十轮霜影转庭梧，此夕羁人独向隅。未必素娥无怅恨，玉蟾清冷桂花孤。——晏殊《中秋月》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201118124512660.png" alt="image-20201118115244345"></p><blockquote><p>【解析】</p><p>中秋节：</p><ul><li>时间：农历八月十五。</li><li>别称：团圆节、八月节、追月节（八月十五的月亮比其他月份更圆更明亮）等。</li><li>起源（了解即可）：“中秋”一词，最早见于先秦时期儒家经典《周礼》；我国古代有“夕月”的习俗，即祭拜月神。</li><li>传说：与后羿嫦娥相关。后羿射掉九个太阳后，王母娘娘为了奖励他就赐给他一颗长生不老的仙丹， 后羿舍不得吃， 于是交给了自己的媳妇嫦娥保管，后羿有个门徒叫逄蒙，特别想要得到仙丹，趁后羿不在家去逼迫嫦娥交出仙丹，嫦娥无奈之下吃下仙丹飞上天去，当天是八月十五，嫦娥舍不得后羿，于是选择住在了离地球最近的月亮上，后羿回到家发现媳妇不见了很伤心，于是每年八月十五摆下宴席希望与嫦娥相聚。</li><li>主要习俗：<ul><li>拜月：院子里摆上香案，放上食物、红烛，全家跪拜，祈求一家人平平安安、团团圆圆。</li><li>吃月饼：“月饼”一词最早收录于南宋吴自牧的《梦梁录》，那时月饼只是一种饼形的食品，后来逐渐将中秋赏月与品尝月饼结合在一起，意为希望家人团员。</li></ul></li><li>文化意蕴：对团圆的渴望。</li><li>相关诗词句：<ul><li>但愿人长久，千里共婵娟。——苏轼《水调歌头·明月几时有》：最常考，“婵娟”即月亮，中秋节这一天月亮比较圆。</li><li>此生此夜不长好，明月明年何处看。——苏轼《阳关曲·中秋作》：苏轼与他的弟弟苏辙久别重逢共赏中秋月的情景，两人相聚之后又要分离，不知道明年此时都在什么地方。</li><li>十轮霜影转庭梧，此夕羁人独向隅。未必素娥无怅恨，玉蟾清冷桂花孤。——北宋晏殊《中秋月》：“素娥”指嫦娥，意为嫦娥未必不感到遗憾，毕竟陪伴她的只有清冷的月宫和孤寂的桂树。</li></ul></li></ul></blockquote><h2 id="2-8-重阳节"><a href="#2-8-重阳节" class="headerlink" title="2.8    重阳节"></a>2.8    重阳节</h2><ul><li><p>时间及别称</p><p>农历九月初九，又称重九节、登高节等</p></li><li><p>起源</p></li><li><p>主要习俗</p><p>登高、赏菊、饮菊花酒、佩茱萸等</p></li><li><p>文化意蕴</p><p>步步升高、高寿的意愿；对亲朋好友的思念</p></li><li><p>常考相关诗词句</p><ul><li>独在异乡为异客，每逢佳节倍思亲。遥知兄弟登高处，遍插茱萸少一人。——王维《九月九日忆山东兄弟》</li><li>九日黄花酒，登高会昔闻。——岑参《奉陪封大夫九日登高》</li><li>佳节又重阳，玉枕纱厨，半夜凉初透。东篱把酒黄昏后，有暗香盈袖。——李清照《醉花阴·薄雾浓云愁永昼》</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020111812451834.png" alt="image-20201118115317422"></p><blockquote><p>【解析】</p><p>重阳节：</p><ul><li>时间：农历九月初九。</li><li>别称：重九节、登高节等。《易经》将六定为阴数，将九定为阳数，<br>金庸武侠小说中张无忌练的就是九阳神功，九九相重为重九、重阳，古人认为这一天很吉利，很早就开始过重阳节。</li><li>主要习俗：<ul><li>登高：重阳节正值秋天，这个季节登高望远可以心旷神怡、健身祛病。</li><li>赏菊：菊花象征长寿，菊花大会一般在这天举行，许多人赴会赏菊希望自己能够长寿。</li><li>饮菊花酒：古人过节喜欢喝酒，这个时节菊花开得好，菊花酒也被看做驱灾祈福的吉祥酒。</li><li>佩茱萸：如图，茱萸可以入药、制药酒，人们喜欢在重阳节佩戴茱萸辟邪求吉。</li></ul></li><li>文化意蕴：登高、赏菊表现出人们步步升高、高寿的意愿；佩戴茱萸表达对亲朋好友的思念，如王维的名句“遥知兄弟登高处，遍插茱萸少一人”。</li><li>相关诗词句：<ul><li>独在异乡为异客，每逢佳节倍思亲。遥知兄弟登高处，遍插茱萸少一人。——王维《九月九日忆山东兄弟》：“登高”“茱萸”可以看出是重阳节，如果考试只给出前两句，要知道佳节指的是重阳节。</li><li>九日黄花酒， 登高会昔闻。 ——岑参 《奉陪封大夫九日登高》 ： 关键词“九月”“黄花酒”“登高”，黄花酒即为菊花酒。</li><li>佳节又重阳，玉枕纱厨，半夜凉初透。东篱把酒黄昏后，有暗香盈袖。——宋李清照《醉花阴·薄雾浓云愁永昼》：描述重阳节把酒赏菊的情景，表达对丈夫赵明诚的思念，关键词“重阳”。陶渊明写过“采菊东篱下，悠然见南山”，“东篱”代指种菊花的地方，“把酒”喝的是菊花酒，是重阳节的习俗。</li></ul></li></ul></blockquote><h2 id="2-9-总结"><a href="#2-9-总结" class="headerlink" title="2.9    总结"></a>2.9    总结</h2><p><img src="https://img-blog.csdnimg.cn/20201118124526912.png" alt="image-20201118120649476"></p><p><img src="https://img-blog.csdnimg.cn/20201118124532174.png" alt="image-20201118120654751"></p><p><strong>【注意】</strong></p><p>汉族传统节日及习俗：考查时间、别称、习俗和相关诗词句。</p><ul><li><p>春节：</p><ul><li>农历正月初一，古称元日、元旦（需要注意，古今称呼有差别）等。</li><li>主要习俗：祭灶、扫尘、贴春联（古称桃符）、除夕守岁、拜年、给压岁钱等。</li><li>相关诗词句：典型关键词“桃符”“爆竹”，不要全部背诵，通过关键词判断即可。</li></ul></li><li><p>元宵节：</p><ul><li>农历正月十五，古称上元节、元夕等。</li><li>主要习俗：吃元宵、赏花灯、猜灯谜、迎紫姑（注意）等。</li><li>相关诗词句：典型关键词“元夕”“花灯”“紫姑”“火树银花”“不禁夜”。“火树银花”形容元宵节赏花灯、放烟花的情景，元宵节取消宵禁，因而称为“不禁夜”。</li></ul></li><li><p>寒食节：</p><ul><li>清明节前二日，纪念介子推。</li><li>主要习俗：禁烟、冷食等。</li><li>相关诗词句：典型关键词“寒食”“冷食”“禁烟”。</li></ul></li><li><p>清明节：</p><ul><li>春分后十五日。唯一一个得名于二十四节气的传统节日。</li><li>主要习俗：扫墓、戴柳、植树、踏青、荡秋千、放风筝等。</li><li>相关诗词句：典型关键词“清明”。</li></ul></li><li><p>端午节：</p><ul><li>农历五月初五，又称五月节、浴兰节、重五等。</li><li>主要习俗：吃粽子、赛龙舟、挂菖蒲、挂艾草、佩香囊、饮雄黄酒等。</li><li>相关诗词句：典型关键词“粽包”“艾束”“浴兰”。</li></ul></li><li><p>七夕节：</p><ul><li>农历七月初七，又称乞巧节等，这一天牛郎织女鹊桥相会。</li><li>主要习俗：乞巧、拜魁星。</li><li>相关诗词句：典型关键词“鹊桥”“牛郎星”“织女星”。</li></ul></li><li><p>中秋节：</p><ul><li>农历八月十五，又称团圆节、八月节、追月节（中秋月圆）等，与后羿、嫦娥有关。。</li><li>主要习俗：拜月、吃月饼等。</li><li>相关诗词句：典型关键词“婵娟”“素娥”。</li></ul></li><li><p>重阳节：</p><ul><li>农历九月初九，又称重九节、登高节等。</li><li>主要习俗：登高、赏菊、饮菊花酒、佩茱萸等。</li><li>相关诗词句：典型关键词“茱萸”“黄花酒”“登高”。</li></ul></li></ul><h2 id="2-10-试题"><a href="#2-10-试题" class="headerlink" title="2.10    试题"></a>2.10    试题</h2><ul><li><p>【2010-下联考】1.下列哪项中的民俗均与端午节有关（ ）。</p><p>A.剪窗花、踏青、燃放灯火、放风筝</p><p>B.饮菊花酒、赏月、插茱萸、猜灯谜</p><p>C.赏菊花、放孔明灯、插柳、贴春联</p><p>D.饮雄黄酒、吃粽子、赛龙舟、插菖蒲</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.通过排除法做题。</span><br><span class="line">A 项错误：踏青、放风筝是清明节的习俗。</span><br><span class="line">B项错误：饮菊花酒、插茱萸是重阳节的习俗，赏月是中秋节的习俗，猜灯谜是元宵节的习俗。</span><br><span class="line">C 项错误：赏菊花是重阳节的习俗，插柳是清明节的习俗，贴春联是春节的习俗，放孔明灯一般是元宵节。【选 D】</span><br></pre></td></tr></table></figure></li><li><p>【2013-山东】2.关于中国传统节日寒食节，下列说法不正确的是（ ）。</p><p>A.是农历中的二十四节气之一</p><p>B.这一天人们按照习俗吃冷食</p><p>C.是为了纪念春秋时的介子推</p><p>D.“且将新火试新茶”说的是节日之后的情景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.选非题。</span><br><span class="line">A 项错误：得名于二十四节气的传统节日是清明节，古时寒食节和清明节是两个节日。</span><br><span class="line">D 项正确：“且将新火试新茶”说的是寒食节之后的情景。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【2014-国考】 3.下列诗句按其所描写节日的先后顺序， 排列正确的是 （ ） 。</p><p>①桃符呵笔写，椒酒过花斜</p><p>②九日黄花酒，登高会昔闻</p><p>③粽包分两髻，艾束著危冠</p><p>④马上逢寒食，途中属暮春</p><p>A.④②③① </p><p>B.①④③②</p><p>C.②④③① </p><p>D.③①②④</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】3.</span><br><span class="line">B 项正确：①句“桃符”“椒酒”指春节，</span><br><span class="line">②句“九日黄花酒”指重阳节，</span><br><span class="line">③句“粽包”“艾束”指端午节，</span><br><span class="line">④句“寒食”指寒食节，按时间顺序为春节、寒食节、端午节、重阳节。【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【2015-黑龙江】4.下列哪组词语全都与端午节有关？（ ）。</p><p>A.屈原、雄黄酒 </p><p>B.汨罗江、银河</p><p>C.桃木符、楚国 </p><p>D.介子推、龙舟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】 4.</span><br><span class="line">A 项正确： 屈原的传说与端午节相关， 饮雄黄酒是端午节的习俗，知道知识点可以直接选，其他选项平时做题要做好积累。</span><br><span class="line">B 项错误：汨罗江与端午节有关，屈原投的是汨罗江，银河与端午节无关。</span><br><span class="line">C 项错误：桃符与春节相关。</span><br><span class="line">D 项错误：介子推与寒食节相关，龙舟与端午节相关。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【2016-江苏】5.下列诗句与传统节日对应不正确的是（ ）。</p><p>A.总把新桃换旧符——清明节</p><p>B.遍插茱萸少一人——重阳节</p><p>C.蓦然回首，那人却在灯火阑珊处——元宵节</p><p>D.两情若是久长时，又岂在朝朝暮暮——七夕节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】5.选非题。</span><br><span class="line">A 项错误：“桃符”与春节相关。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【2017-联考】6.下列关于古诗名句的说法，错误的是（ ）。</p><p>A.“独在异乡为异客，每逢佳节倍思亲”中的“佳节”指的是中秋</p><p>B.“但使龙城飞将在，不教胡马度阴山”中的“飞将”指的是李广</p><p>C.“窗含西岭千秋雪，门泊东吴万里船”中的“西岭”指的是岷山</p><p>D.“忽如一夜春风来，千树万树梨花开”中的“梨花”指的是雪花</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】6.选非题。常识题考查很杂，其实仔细看看，正确答案并不难，不要被题目蒙蔽。</span><br><span class="line">A 项错误：“独在异乡为异客，每逢佳节倍思亲”出自王维《九月九日忆山东兄弟》，佳节指的是重阳节。</span><br><span class="line">B 项正确：“但使龙城飞将在，不教胡马度阴山”出自王昌龄《出塞》，飞将一般指西汉大将李广。</span><br><span class="line">C 项正确：“窗含西岭千秋雪，门泊东吴万里船”出自杜甫《绝句》，西岭指的是岷山山脉中的西岭雪山，在程度大邑县境内。</span><br><span class="line">D 项正确：“忽如一夜春风来，千树万树梨花开”出自唐代岑参《白雪歌送武判官归京》，梨花指雪花，因为他是在雪天送他的好朋友武判官的。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【2017-山东】7.关于诗句所描述的节日，下列对应正确的是（ ）。</p><p>①东篱把酒黄昏后，有暗香盈袖</p><p>②雨中禁火空斋冷，江上流莺独坐听</p><p>③莫唱江南古调，怨抑难招，楚江沉魄</p><p>A.元宵 清明 中秋</p><p>B.重阳 寒食 端午</p><p>C.中秋 寒食 端午 </p><p>D.元宵 清明 重阳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解析】7.</span><br><span class="line">B 项正确：①句出自李清照《醉花阴》，“东篱”“把酒”可以想到菊花酒，对应重阳节；</span><br><span class="line">②句“禁火”对应寒食节；</span><br><span class="line">③句“楚江沉魄”指屈原，对应端午节。【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【2018-浙江】8.下列诗句中，没有涉及节日的是（ ）。</p><p>A.遥知兄弟登高处，遍插茱萸少一人</p><p>B.千门万户曈曈日，总把新桃换旧符</p><p>C.绿蚁新醅酒，红泥小火炉</p><p>D.金吾不禁夜，玉漏莫相催</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】8.选非题。</span><br><span class="line">A 项正确：重阳节。</span><br><span class="line">B 项正确：春节。</span><br><span class="line">D 项正确：元宵节。</span><br><span class="line">C 项错误：“绿蚁新醅酒，红泥小火炉”出自唐代白居易《问刘十九》，描写诗人冬天邀请朋友来喝酒的情形， 新酿的米酒还没有过滤， 表面浮着一层酒渣，颜色微绿，细如小蚁，因此用“绿蚁”形容新酿的酒，燃烧的炭火把炉子烧得通红，坐在炉子旁边喝着小酒感觉很舒服，与节日无关。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【2019-广东】9.俗话说：正月十五闹元宵。“闹”元宵的习俗包括张灯、观灯、舞龙、舞狮等。以下诗句与元宵节有关的是（ ）。</p><p>A.火树银花合 </p><p>B.千里共婵娟</p><p>C.遍插茱萸少一人 </p><p>D.爆竹声中一岁除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】9.</span><br><span class="line">A 项正确：“火树银花”描述元宵节放烟花、掌灯火的场景，出自唐代苏味道《正月十五夜》。</span><br><span class="line">B 项错误：中秋节。</span><br><span class="line">C 项错误：重阳节。</span><br><span class="line">D 项错误：关键词“爆竹”，春节。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【2019-河北】10.下列诗词与所描写节令不相符的是（ ）。</p><p>A.东风夜放花千树，更吹落，星如雨。宝马雕车香满路，凤萧声动，玉壶光转，一夜鱼龙舞。——元宵节</p><p>B.十轮霜影转庭梧，此夕羁人独向隅。未必素娥无怅恨，玉蟾清冷桂花孤。——七夕节</p><p>C.冷食方多病，开襟一忻然。终令思故郡，烟火满晴川。杏粥犹堪食，榆羹已稍煎。唯恨乖亲燕，坐度此芳年。——寒食节</p><p>D.无云世界秋三五，共看蟾盘上海涯。直到天头天尽处，不曾私照一人家。——中秋节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】10.选非题。题干很长，但比较简单。</span><br><span class="line">B 项错误：素娥指嫦娥，与中秋节相关。</span><br><span class="line">A 项正确：南宋辛弃疾《青玉案·元夕》。</span><br><span class="line">C 项正确：关键词“冷食”。</span><br><span class="line">D 项正确：唐代曹松《中秋对月》，可做积累，如果考试只给出前半句要知道与中秋节相关。【选 B】</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-少数民族特色节日、代表性饮食及文化"><a href="#3-少数民族特色节日、代表性饮食及文化" class="headerlink" title="3.    少数民族特色节日、代表性饮食及文化"></a>3.    少数民族特色节日、代表性饮食及文化</h1><p>针对考试中常考的少数民族文化节日讲解，考查相对较简单，能够将节日、代表饮食文化与民族对应即可。</p><h2 id="3-1-壮族"><a href="#3-1-壮族" class="headerlink" title="3.1    壮族"></a>3.1    壮族</h2><p>【特色节日】三月三歌节</p><p>【代表性饮食】五色糯米饭</p><p><img src="https://img-blog.csdnimg.cn/20201118124538346.png" alt="image-20201118115850135"></p><blockquote><p>【解析】</p><p>壮族：我国人口最多的少数民族，集中在广西。</p><ul><li>特色节日：三月三歌节。<ul><li>时间是农历三月初三， 广西壮族自治区政府将每年的三月初三定为法定节假日，全区可以放两天假。</li><li>传说是为了纪念歌仙刘三妹 （壮族民间传说中的名字） ， 后来改名刘三姐，刘三姐与秀才对歌相爱，双双化为石像，人们为了纪念他们，在每年的农历三月初三唱山歌表达怀念，一直到今天，壮族人山歌都唱得非常好。</li><li>当天除了对歌，还有很多小节目，姑娘们会绣绣球抛给中意的小伙，小伙如果没有接住就要受罚做游戏、唱山歌；一些地方的青年男女会将煮熟的鸭蛋、鸡蛋、鹅蛋等染成红色，用绳子串成串，与异性碰撞，如果两人愿意交朋友，就会离开人群聊天，如果姑娘不愿意，就会用手护住红蛋，不让小伙碰撞，表示拒绝。</li><li>农历三月初三是很多民族的节日，黎族也有三月三，与壮族的三月三歌节差别很大。传说远古时期海南发大水，有一对表兄妹漂到了五指山下，洪水退去后其他人都没了，只剩下他们两个，二人为了传宗接代结为夫妻、生儿育女，到了今天的三月三，黎族夫妇要领着孩子聚集到一起欢度节日，知道黎族也有三月三，与壮族的三月三歌节习俗不一样即可。</li></ul></li><li>代表性饮食：五色糯米饭。如图，因黑、红、白、紫、黄五种颜色得名，也称为“乌饭”，象征吉祥如意、五谷丰登。</li></ul></blockquote><h2 id="3-2-傣族"><a href="#3-2-傣族" class="headerlink" title="3.2    傣族"></a>3.2    傣族</h2><p>【特色节日】泼水节</p><p>【代表性文化】孔雀舞</p><p><img src="https://img-blog.csdnimg.cn/20201118124544586.png" alt="image-20201118115916847"></p><p><img src="https://img-blog.csdnimg.cn/20201118124550312.png" alt="image-20201118115942785"></p><blockquote><p>【解析】</p><p>傣族： 泰国、 老挝的主体民族， 在我国属于少数民族， 主要分布在云南一带。</p><ul><li>特色节日：泼水节，多在公历四月中旬举行。<ul><li>一般认为这个节日起源于印度，为了纪念佛祖释迦牟尼的诞生，佛祖诞生时“龙喷香雨浴佛身”，因而泼水节也称为“浴佛节”。</li><li>一般举行 3-4 天，节日开始时女子要打扫竹楼、街道、家具等，男子要采花到佛寺献佛，听佛爷讲经，中午把一尊佛像摆到院子里，用清水浴佛，此后互相泼水表示祝福， 左图即为泼水节的场景， 被泼的水越多就代表大家的祝福越多。</li></ul></li><li>代表性文化：孔雀舞，是傣族最为喜闻乐见的舞蹈。空缺在傣族人心中地位很高，是吉祥、幸福、美丽、善良的象征，每逢佳节傣族人就要云聚一堂看孔雀舞的表演，右图即为舞蹈家杨丽萍，她的孔雀舞惟妙惟肖。</li></ul></blockquote><h2 id="3-3-藏族"><a href="#3-3-藏族" class="headerlink" title="3.3    藏族"></a>3.3    藏族</h2><p>【特色节日】雪顿节</p><p>【代表性饮食】青稞酒、酥油茶</p><p>【代表性文化】格萨尔王、唐卡</p><p><img src="https://img-blog.csdnimg.cn/202011181245565.png" alt="image-20201118120010712"></p><p><img src="https://img-blog.csdnimg.cn/20201118124601168.png" alt="image-20201118120013985"></p><blockquote><p>【解析】</p><p>藏族：青藏高原的原住民，主要分布在西藏、青海、四川西部、甘肃甘南等地区。</p><ul><li>特色节日：雪顿节。<ul><li>时间在藏历七月初一，藏语中“雪”指酸奶，“顿”指宴会，雪顿节意为酸奶宴，后来演变为演藏戏为主，因而又称为“藏戏节”。</li><li>起源于藏传佛教格鲁派的规定，每年夏天有几十天禁止喇嘛外出活动，以免他们踏死小虫、小蚂蚁，禁令解除之后才可以下山，这时候牧民会进献酸奶招待他们， 因而形成了这个节日。 现在这天藏族人民要身着盛装看藏戏， 互串帐篷，主人向客人敬酒，客人要三口喝干。</li></ul></li><li>代表性饮食：青稞酒、酥油茶。</li><li>代表性文化：<ul><li>格萨尔王：藏族传说中的英雄人物，人们根据他的传说故事创作了《格萨尔王传》。很久以前天灾人祸在西藏横行，观世音菩萨为了普度众生，派天神之子格萨尔下凡， 格萨尔降临人间之后为民除害、 造福百姓， 十二岁就获得了王位，从此格萨尔东征西讨、南征北战、除魔除妖，战胜了几十个部落和小国家，后来功德圆满回归天界。</li><li>唐卡：即卷轴画。<ul><li>藏族大多信奉藏传佛教， 唐卡对于藏传佛教的僧尼来说是修行必不可少的用具，礼拜唐卡可以获得功德。</li><li>唐卡的题材很多，主要以佛教为主，历史、民俗、天文等都可以画，但制作过程非常讲究， 画师绘制唐卡前要沐浴焚香， 针对不同的内容要念不同的经文，画完之后再由高僧活佛开封加持，一幅简单的唐卡需要十几天到几十天，复杂的唐卡甚至需要几年，因为唐卡的制作必须要用纯天然的颜料，色彩可以保持很长时间，甚至数百年不变色。</li><li>长期供奉唐卡可以保佑风调雨顺、四季平安或者被超度到极乐世界，因此很多人非常喜欢唐卡。</li></ul></li></ul></li></ul></blockquote><h2 id="3-4-回族"><a href="#3-4-回族" class="headerlink" title="3.4    回族"></a>3.4    回族</h2><p>【特色节日】开斋节、古尔邦节</p><p>【代表性饮食】馓子</p><p><img src="https://img-blog.csdnimg.cn/20201118124606351.png" alt="image-20201118120049286"></p><blockquote><p>【解析】</p><p>回族：主要聚集在宁夏回族自治区，新疆、青海、甘肃等一些地方也有许多聚集区。回族人较多的地方会建造清真寺，回族信奉伊斯兰教（真主安拉），信徒自称穆斯林，看到这些内容可以联系到回族。</p><ul><li>特色节日：<ul><li>开斋节：伊斯兰教历九月为斋月，斋月期间要在日出之前吃饭，白天不能吃喝，要克制私欲、断绝邪念，以示对真主的信服，只有小孩和老弱的病人可以除外，斋月满后的开斋节一清早，教民要沐浴、去清真寺做礼拜、相互祝贺。封斋的目的是让人们体验饥饿和干渴的痛苦， 珍惜眼下的幸福生活， 有很大的意义，现在粮食危机的同时浪费粮食非常严重。</li><li>古尔邦节：牺牲献身，又称“牺牲节”“宰牲节”，时间在伊斯兰教历的12 月 10 号，传说与古代先知易卜拉欣相关，易卜拉欣梦见真主安拉，真主安拉启示他杀掉自己的亲生儿子向真主表示虔诚，正当易卜拉欣准备执行这个命令时，安拉派使者牵来一头羊，说“我已经领略到你的忠心了，你就用宰羊来代替献子”，此后当地部族就保留了宰牲献祭的习俗。这一天教民要打扫庭院盛装打扮，听阿訇（回族穆斯林主持清真寺的教务人员）讲经，宰杀牛羊（不满两岁的小羊、不满三岁的小牛、小骆驼除外），肉要分成三份，一份自己吃，一份送亲友待客，一份施舍给贫穷的孤寡老人，不能出售。</li></ul></li><li>代表性实物：馓子，是一种油炸食品，每逢民族节日，回族人家都要炸馓子招待客人。</li></ul></blockquote><h2 id="3-5-蒙古族"><a href="#3-5-蒙古族" class="headerlink" title="3.5    蒙古族"></a>3.5    蒙古族</h2><p>【特色节日】那达慕大会</p><p>【代表性饮食】马奶酒、手抓羊肉</p><p>【代表性文化】蒙古长调、嘎达梅林</p><p><img src="https://img-blog.csdnimg.cn/20201118124611378.png" alt="image-20201118120138206"></p><blockquote><p>【解析】</p><p>蒙古族：传统的游牧民族，在我国主要分布于内蒙古地区。</p><ul><li>特色节日：那达慕大会，每年农历七八月间举办，“那达慕”是蒙古语，有娱乐游戏的意思，现在那达慕大会除了有摔跤、射箭、骑马等传统内容之外，还增加了马球、武术、摩托车等项目，会有一些奖品，比如摔跤冠军会奖一头羊或一匹马。</li><li>代表性饮食：<ul><li>马奶酒：每年七八月份牛肥马壮，蒙古族妇女就将马奶发酵成酒，如果去蒙古旅游，当地人会把马奶酒倒入碗中唱敬酒歌，酒必须要喝，否则会被认为瞧不起主人，到少数民族地区旅游要尊重当地少数民族的习俗。</li><li>手抓羊肉：蒙古族非常喜爱的传统食物，用手抓着吃，因而得名，没有膻味，原汁原味，分量很足。</li></ul></li><li>代表性文化：<ul><li>蒙古长调： 很难唱， 特点是字少腔长高亢悠扬， 歌声一起， 就像草原骏马、蓝天白云就在眼前，非常惬意。</li><li>嘎达梅林：蒙古族的英雄。清朝末期，政府逐渐开始在蒙古开垦土地，牧场缩小，牧民被迫背井离乡，张学良继续开垦蒙古土地，嘎达梅林等人就发起了起义，嘎达梅林不幸战死，虽然他们的起义失败了，但张学良开垦草原的计划被延迟了，嘎达梅林保护了蒙族牧民的利益。开垦草原会破坏环境，科尔沁草原目前出现了将近五千多万亩的沙地，小时候课本里“风吹草低见牛羊”的场景现在已经很难见到了，要好好保护草原。</li></ul></li></ul></blockquote><h2 id="3-6-维吾尔族"><a href="#3-6-维吾尔族" class="headerlink" title="3.6    维吾尔族"></a>3.6    维吾尔族</h2><p>【代表性饮食】馕</p><p>【代表性文化】阿凡提的故事</p><p><img src="https://img-blog.csdnimg.cn/202011181246168.png" alt="image-20201118120204692"></p><p><img src="https://img-blog.csdnimg.cn/20201118124622103.png" alt="image-20201118120207299"></p><blockquote><p>【解析】</p><p>维吾尔族：主要聚集在新疆天山以南的地区，如喀什、和田，主要信奉伊斯兰教，也有开斋节、古尔邦节，习俗与回族类似。</p><ul><li>代表性饮食：馕。岳云鹏说披萨就是打卤馕，如左图，以面粉为主要原料，大多是圆形，非常能抗饿。</li><li>代表性文化：阿凡提的故事。阿凡提是一个勤劳勇敢、幽默聪明、富有正义感的人，经常帮助老百姓，右图为上海美术电影制片厂动画片《阿凡提的故事》中的阿凡提形象，阿凡提骑着小毛驴，捉弄巴依老爷。</li></ul></blockquote><h2 id="3-7-满族"><a href="#3-7-满族" class="headerlink" title="3.7    满族"></a>3.7    满族</h2><p>【特色节日】背灯祭</p><p>【代表性饮食】萨其马、满汉全席</p><p><img src="https://img-blog.csdnimg.cn/20201118124627681.png" alt="image-20201118120228393"></p><blockquote><p>【解析】</p><p>满族：世居我国东北，最开始称为女真，有很多部落，努尔哈赤起兵统一女真各部落后改国号为金，史称后金，皇太极时期改女真为满洲，后来将东北的女真和其他民族混在一起，形成满族。</p><ul><li>特色节日：背灯祭。每年秋冬举行专祭万历妈妈的节日，传说明朝辽东总兵李成梁想要加害努尔哈赤，他的小妾心善放走了努尔哈赤，李成梁发现之后将小妾赤身裸体打死，满族人为了报答小妾的救主之恩，设立了一个神位，小妾死于万历年间，于是称为万历妈妈，因被赤身裸体打死，怕她害羞，因而这一天各家会在祭台上供奉猪肉，用黑布遮住门窗熄灯灭火，在黑暗中念诵祝词。</li><li>代表性饮食：<ul><li>萨其马：满语音译，意为胡麻、砂糖制成的小吃，汉语中比较难翻译，因而音译，与徐福记沙琪玛差不多。</li><li>满汉全席：没有固定的席面，满足建立大清之后希望满汉一家，于是就有了满汉全席，让汉族和满族坐在一起吃饭，大家和和睦睦，汉族和满族喜欢的菜都放在一起，传统的满汉全席有一道菜叫双烤，就是把满族人喜欢的烤小猪和汉族人喜欢的烤鸭拼在一起。康熙帝 66 岁寿宴时就特地制作了满汉全席，设宴三天款待大臣，共有三百多道菜，山珍海味应有尽有。</li></ul></li></ul></blockquote><h2 id="3-8-朝鲜族"><a href="#3-8-朝鲜族" class="headerlink" title="3.8    朝鲜族"></a>3.8    朝鲜族</h2><p>【特色节日】老人节</p><p>【代表性饮食】泡菜、打糕</p><p>【代表性文化】《阿里郎》《桔梗谣》民谣</p><p><img src="https://img-blog.csdnimg.cn/2020111812463312.png" alt="image-20201118120255542"></p><p><img src="https://img-blog.csdnimg.cn/20201118124638768.png" alt="image-20201118120258120"></p><blockquote><p>【解析】</p><p>朝鲜族：主要分布在朝鲜半岛，在我国主要分布于东北地区。</p><ul><li>特色节日：老人节。<ul><li>因地区不同时间有所差异，黑龙江省一些地方是农历六月二十四，吉林省延边朝鲜族自治州是八月十五。</li><li>这一天全村会向 60 岁以上的老人祝寿，给他们戴红花，并进行摔跤、歌舞等表演活动，有老人的家庭要酿制米酒、做打糕为老人祝寿，是敬老尊老的节日。</li></ul></li><li>代表性饮食：<ul><li>泡菜：朝鲜族饮食中非常重要的组成部分，很多菜都可以用来做泡菜，如萝卜、白菜、桔梗，热量低，纤维素、维生素多。</li><li>打糕：糯米煮熟后反复捶打而成，左图为制作打糕，是个体力活，制作不易， 因而朝鲜族历来是将打糕当作上等美味，每逢佳节或接待贵宾时都要制作打糕，外形像驴打滚。</li></ul></li><li>代表性文化：朝鲜族能歌善舞，代表性的民谣有《阿里郎》 《桔梗谣》 。<ul><li>桔梗是朝鲜族特别喜欢吃的一种野菜，东北同学可能吃过泡桔梗， 《桔梗谣》 表现的就是朝鲜族姑娘采摘桔梗的欢乐场面， 朝鲜语中桔梗音为 “do la ji” 。</li><li>《阿里郎》：阿里郎，阿里郎，阿里郎哟，我的郎君翻山越岭，路途遥远，你真无情啊把我扔下， 出了门不到十里路你会想家； 阿里郎， 阿里郎， 阿里郎哟，我的郎君翻山越岭，路途遥远，晴天的黑夜里满天星辰，我们的离别情话千遍难尽。记住是朝鲜族民谣即可。</li></ul></li></ul></blockquote><h2 id="3-9-高山族"><a href="#3-9-高山族" class="headerlink" title="3.9    高山族"></a>3.9    高山族</h2><p>【特色节日】背篓会、观月祭</p><p><img src="https://img-blog.csdnimg.cn/20201118124644215.png" alt="image-20201118120329705"></p><blockquote><p>【解析】</p><p>高山族：简单了解即可。主要居住在台湾省，因地区、语言的差异，内部分为阿美人、泰雅人、排湾人、卑南人等。</p><ul><li>背篓会：农历八月十五晚上，青年男女会到槟榔林里，小伙上树摘槟榔， 扔到姑娘的背篓里， 姑娘只接自己喜欢的人丢来的， 其他人扔来的一概不接，接到槟榔后悔掏出准备好的荷包送给小伙，两人单独到槟榔林里共度良宵。</li><li>观月祭：阿美人的传统祭祀节日，祈盼年年丰收、岁岁平安，一般在九月选一个明月之夜举行，男子在林中宰杀水牛，女子盛装与男子一边吃一边唱歌跳舞，阿美人很会唱歌，台湾很多歌手，如张震岳（作品《爱的初体验》《思念是一种病》）、萧敬腾等都是阿美人。</li></ul></blockquote><h2 id="3-10-彝族"><a href="#3-10-彝族" class="headerlink" title="3.10    彝族"></a>3.10    彝族</h2><p>【特色节日】火把节</p><p><img src="https://img-blog.csdnimg.cn/20201118124650165.png" alt="image-20201118120354626"></p><blockquote><p>【解析】</p><p>彝族：主要生活在四川、云南等地，特色节日是火把节。</p><ul><li>四川西南有凉山彝族自治州，火把节是凉山彝族节日中规模最大、内容最丰富、参与人最多、场面最壮观的盛大节日，历时三天三夜。</li><li>传说很久之前的一个夏天，天神派斯惹阿比到人间收租，当时人间青黄不接，没有粮食交租还债，斯惹阿比的行为激怒了人间的英雄阿体拉巴，斯惹阿比被杀死，天神为了报复放出天虫吃光地上的庄稼，阿体拉巴带领人们燃起火把烧光了天虫取得了胜利，人们为了庆祝这个胜利，就在农历六月二十四这天点燃火把、载歌载舞，世代相传就形成了火把节。</li><li>节日期间，人们要举着火把在庄稼地里游走，因为要烧死害虫，祈求庄稼丰收。</li></ul></blockquote><h2 id="3-11-总结"><a href="#3-11-总结" class="headerlink" title="3.11    总结"></a>3.11    总结</h2><p><img src="https://img-blog.csdnimg.cn/20201118124657193.png" alt="image-20201118120736368"></p><p><strong>【注意】</strong></p><p>能将节日、习俗、饮食、文化等与民族对应即可，如：</p><ul><li>壮族三月三歌节，特色饮食是五色糯米饭；</li><li>傣族有泼水节、孔雀舞；</li><li>藏族雪顿节又称酸奶宴，喜欢吃青稞酒、酥油茶，有格萨尔王和唐卡；</li><li>回族特别重要的宗教节日是古尔邦节和开斋节，喜欢吃馓子；</li><li>蒙古族有那达慕大会，喜欢吃马奶酒、手抓羊肉，蒙古长调非常悠扬，民族英雄嘎达梅林；</li><li>维吾尔族的特色饮食是馕，特色文化是阿凡提的故事；</li><li>满族有背灯祭，特色饮食有萨其马、满汉全席；</li><li>朝鲜族有老人节（敬老尊老的节日），喜欢吃泡菜、打糕，特色民谣《阿里郎》《桔梗谣》；</li><li>高山族有背篓会、观月祭；</li><li>彝族有火把节。</li></ul><h2 id="3-12-试题"><a href="#3-12-试题" class="headerlink" title="3.12    试题"></a>3.12    试题</h2><ul><li><p>【2010-联考】1.下列依次与蒙古族、回族、藏族、维吾尔族、壮族有关的是（ ）。</p><p>A.酥油茶、馓子、青稞酒、馕、萨其马</p><p>B.《嘎达梅林》、《穆斯林的葬礼》、《格萨尔王传》、《阿凡提的故事》、《刘三姐》</p><p>C.那达慕大会、开斋节、雪顿节、古尔邦节、泼水节</p><p>D.马头琴、冬不拉、铜钦、葫芦丝、芦笙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.</span><br><span class="line">A 项错误：酥油茶是藏族的，馓子是回族的，青稞酒是藏族的，馕是维吾尔族的，萨其马是满族的。</span><br><span class="line">B 项正确：《嘎达梅林》是蒙古族的英雄，《穆斯林的葬礼》与回族相关，是一篇长篇小说，主人公是回族的手工匠人，《格萨尔王传》对应藏族，《阿凡提的故事》对应维吾尔族，《刘三姐》对应壮族。</span><br><span class="line">C 项错误：蒙古族那达慕大会，回族开斋节，藏族雪顿节，维吾尔族古尔邦节（回族也过这个节日），傣族泼水节。</span><br><span class="line">D 项错误：音乐戏曲有专门的课程，会讲到民族乐器。马头琴是蒙古族的，冬不拉是哈萨克族的，铜钦是藏族的，葫芦丝流行于云南，主要是傣族、彝族使用，芦笙主要是苗族、瑶族用到的乐器。【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【2011-联考】2.下列选项正确的是（ ）。</p><p>A.黎族同胞说：“我们每年举行盛大的赛马会”</p><p>B.朝鲜族同胞说：“我们种的莲雾又获得丰收”</p><p>C.傣族同胞说：“泼水节是我们传统的盛大节日”</p><p>D.高山族同胞说：“我们用青稞酒招待远方来客”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.</span><br><span class="line">C 项正确：傣族泼水节。</span><br><span class="line">A 项错误：黎族三月三，赛马最少要在草原上，黎族主要生活在海南。</span><br><span class="line">B 项错误：莲雾主要生长在台湾和广东，是一种热带水果，朝鲜族分布在我国东北。</span><br><span class="line">D 项错误：青稞酒与藏族相关，高山族主要居住在台湾。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【2015-河北】3.下列依次与蒙古族、回族、傣族关系最密切的是（ ）。</p><p>A.酥油茶、馓子、青稞酒</p><p>B.马头琴、冬不拉、葫芦丝</p><p>C.那达慕大会、开斋节、泼水节</p><p>D.努尔哈赤、阿凡提、刘三姐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】3.</span><br><span class="line">A 项错误：酥油茶、青稞酒都是藏族的特色饮食。</span><br><span class="line">B 项错误：冬不拉是哈萨克族的乐器。</span><br><span class="line">C 项正确：蒙古族那达慕大会，回族开斋节，傣族泼水节。</span><br><span class="line">D 项错误：努尔哈赤是清王朝的奠基者，满族；阿凡提维吾尔族；刘三姐壮族。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【2016-江苏】4.下列关于我国少数民族的名称、特色饮食与代表性文化对应错误的是（ ）。</p><p>A.傣族—馕—孔雀舞</p><p>B.蒙古族—手抓羊肉—蒙古长调</p><p>C.朝鲜族—泡菜—《阿里郎》民谣</p><p>D.藏族—酥油茶—《格萨尔王》长诗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【解析】4.选非题。</span><br><span class="line">A 项错误：馕是维吾尔族的特色食物。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【2018-国考】 5.某高校学生会干事小王负责策划一个民族文化展示周活动，下列哪个设计方案不合适？（ ）</p><p>A.请维吾尔族学生表演手鼓舞</p><p>B.请蒙古族学生制作奶茶</p><p>C.请朝鲜族学生展示唐卡</p><p>D.请彝族学生展示花腰刺绣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】5.选非题。</span><br><span class="line">C 项错误：唐卡是藏族的特色文化。</span><br><span class="line">A 项正确：手鼓舞是维吾尔族的民间舞蹈。</span><br><span class="line">B 项正确：马奶酒、奶茶是蒙古族的特色饮食。</span><br><span class="line">D 项正确： 花腰是云南彝族的一个分支， 女子服饰颜色艳丽、 精美大方， 被称为花腰彝，刺绣功力很好。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【2018-河南职测】6.下列关于我国少数民族特征的说法正确的是（ ）。</p><p>A.黎族的主要节日为泼水节</p><p>B.高山族主要信仰喇嘛教</p><p>C.傣族喜欢摔跤、善骑射</p><p>D.壮族的山歌令人陶醉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【解析】6.</span><br><span class="line">A 项错误：傣族泼水节。</span><br><span class="line">B 项错误：高山族信仰高山族宗教，喇嘛教一般指藏传佛教，信仰喇嘛教的主要是藏族。</span><br><span class="line">C 项错误：喜欢摔跤、善骑射的是蒙古族。</span><br><span class="line">D 项正确：壮族人山歌唱得很好。【选 D】</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.    概要&quot;&gt;&lt;/a&gt;1.    概要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本节课讲解我国民族节日及文化习俗，内容相对比较简单，离日常生活很近，大家都比较熟悉，因此学习可以轻松一点，尽量课上都记住。&lt;/li&gt;
&lt;li&gt;我国有 56 个民族，节日和文化习俗丰富多样，课程时间有限，不会全部讲到， 针对考试挑一些重点来讲。 从课程安排上来说， 会多花一点时间讲解汉族，因为考试考查较多，也会涉及到常考的少数民族的相关内容。&lt;/li&gt;
&lt;li&gt;56 个民族中人口最多的就是汉族，大多数同学应该都很了解汉族的传统节日，重大的传统节日会放假，但现在传统节日的味道越来越淡，很多人忽略了节日背后的意义及其文化习俗，希望大家通过这节课能够重新认识这些传统节日。&lt;/li&gt;
&lt;li&gt;应对考试，重点掌握各个节日的时间、别称、习俗和相关诗句。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="公务员" scheme="https://wgy1993.gitee.io/tags/%E5%85%AC%E5%8A%A1%E5%91%98/"/>
    
      <category term="常识" scheme="https://wgy1993.gitee.io/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="我国民族节日及文化习俗" scheme="https://wgy1993.gitee.io/tags/%E6%88%91%E5%9B%BD%E6%B0%91%E6%97%8F%E8%8A%82%E6%97%A5%E5%8F%8A%E6%96%87%E5%8C%96%E4%B9%A0%E4%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>生活常识</title>
    <link href="https://wgy1993.gitee.io/archives/1319ee66.html"/>
    <id>https://wgy1993.gitee.io/archives/1319ee66.html</id>
    <published>2020-11-17T13:27:01.000Z</published>
    <updated>2020-11-17T13:41:08.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概要"><a href="#1-概要" class="headerlink" title="1.    概要"></a>1.    概要</h1><p>主要讲解生活常识有关的知识点，生活常识不是一门严谨的学科，主要来源于生活中的物理、化学、生物中的现象或常识。</p><p>根据考试的情况，分为食品与健康（食品添加剂、维生素等相关知识）、环境保护、应急自救三方面。</p><a id="more"></a><h1 id="2-食品与健康"><a href="#2-食品与健康" class="headerlink" title="2.    食品与健康"></a>2.    食品与健康</h1><h2 id="2-1-食品制作"><a href="#2-1-食品制作" class="headerlink" title="2.1    食品制作"></a>2.1    食品制作</h2><p>发酵工艺： 发酵指人们借助微生物在有氧或无氧条件下的生命活动来制备微生物菌体本身，或者直接代谢产物或次级代谢产物的过程。</p><p>发酵是人类较早接触的一种生物化学反应，如今在食品工业、生物和化学工业中均有广泛应用。</p><blockquote><p>【解析】</p><ul><li>食品制作：中国作为舌尖上的国家，有很多美食的制作方式，包括炸、烹饪等制作方式，发酵工艺（也叫微生物发酵工艺）是和考试密切相关的，也是自2018 年至今考题几率很高的食品制作方式。</li><li>发酵工艺： 是指人们借助微生物在有氧或无氧条件下的生命活动来制备微生物菌体本身，或者产生代谢产物，如酵母菌产生二氧化碳等。</li><li>发酵是人类较早接触的一种生物化学反应，如今在食品工业、生物和化学工业中均有广泛应用。</li><li>考点：常见的发酵中用到的菌种是酵母菌、乳酸菌；生活种哪些食品用到了发酵工艺。</li></ul></blockquote><p>常见的发酵中用到的菌种是酵母菌、乳酸菌。</p><p><img src="https://img-blog.csdnimg.cn/20201117211719774.png" alt="image-20201117191759403"></p><blockquote><p>【解析】</p><ul><li>常见的发酵中用到的菌种是酵母菌、乳酸菌。<ul><li>酵母菌是一种单细胞的真菌，是一种肉眼看不见的微小的单细胞微生物， 但是可以发酵， 将糖发酵成酒精和二氧化碳， 所有用酵母菌发酵过的食品 （如馒头），蒸熟以后会有蓬松感，有很多微小的孔洞，就是因为二氧化碳气体等充斥形成的。酵母菌在地球上分布十分广泛，是一种典型的异养兼厌氧型微生物，在有氧、无氧条件下都可以存活，是一种天然的发酵剂。</li><li>乳酸菌：可以利用乳酸菌将碳水化合物发酵产生大量乳酸的细菌的统称。</li><li>区别：乳酸菌是细菌，酵母菌是真菌；细菌是原核生物，没有成型的细胞核，真菌是一种真核生物，有成型的细胞核。</li></ul></li><li>考试中乳酸菌出现的频率较高，在自然界分布十分广泛，具有多样性，包含 18 个属，共计 200 多种，除极少数以外，大部分是人体必不可少的，且具非常重要的功能。重要的乳酸菌具有重要的生理功能，广泛存在于人的肠道之中，能够促进人类机体的生长，维持肠道菌群的平衡，保证大家正常的消化和吸收，还可以提高免疫力，抑制有害菌群的生长，帮助人体更加健康的成长。常见的乳酸菌发酵食品有酸奶、泡菜。</li></ul></blockquote><p>常见的发酵产品有白酒、醋、馒头等。</p><p><img src="https://img-blog.csdnimg.cn/20201117211725434.png" alt="image-20201117192438028"></p><blockquote><p>常见的发酵产品有白酒、醋、馒头、酱油、味精（谷氨酸钠）等。</p></blockquote><h3 id="2-1-1-试题"><a href="#2-1-1-试题" class="headerlink" title="2.1.1    试题"></a>2.1.1    试题</h3><ul><li><p>【例 1】（2013 多省联考）发酵是人类较早接触的一种生物化学反应，如今在食品工业、 生物和化学工业中均有广泛应用。 以下没有用到发酵工艺的是 （ ） 。</p><p>A．酱油</p><p>B．醋</p><p>C．蔗糖</p><p>D．味精</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.选非题。C 项错误：糖是蔗糖通过提炼加工所形成的，没有用到发酵工艺。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【例 2】 （2018 年多省联考）面包制作过程中使用酵母主要是利用其哪一种特性（ ）。</p><p>A．酵母在生长过程中可合成蛋白</p><p>B．酵母在生长过程中可分解淀粉</p><p>C．酵母在生长过程中可产生乙醇</p><p>D．酵母在生长过程中可产生二氧化碳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】2.D 项正确：面包是软大蓬松的，主要是利用了酵母在生长过程中可产生二氧化碳。【选 D】</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-食品添加剂"><a href="#2-2-食品添加剂" class="headerlink" title="2.2    食品添加剂"></a>2.2    食品添加剂</h2><h3 id="2-2-1-着色剂"><a href="#2-2-1-着色剂" class="headerlink" title="2.2.1    着色剂"></a>2.2.1    着色剂</h3><p>改善食品外观，如胡萝卜素、胭脂红、柠檬黄。</p><p><img src="https://img-blog.csdnimg.cn/20201117211732302.png" alt="image-20201117200026847"></p><h3 id="2-2-2-调味剂"><a href="#2-2-2-调味剂" class="headerlink" title="2.2.2    调味剂"></a>2.2.2    调味剂</h3><p>增添食品味道，如食盐、醋、味精。</p><p><img src="https://img-blog.csdnimg.cn/20201117211739344.png" alt="image-20201117200032038"></p><h3 id="2-2-3-防腐剂"><a href="#2-2-3-防腐剂" class="headerlink" title="2.2.3    防腐剂"></a>2.2.3    防腐剂</h3><p>防止食品腐烂、变质，如山梨酸钾、硝酸盐、茶多酚、二氧化硫等。</p><p><img src="https://img-blog.csdnimg.cn/20201117211752283.png" alt="image-20201117200036615"></p><h3 id="2-2-4-营养强化剂"><a href="#2-2-4-营养强化剂" class="headerlink" title="2.2.4    营养强化剂"></a>2.2.4    营养强化剂</h3><p>增强食品的营养价值，如食盐中加碘、酱油中加铁。</p><h3 id="2-2-5-凝固剂"><a href="#2-2-5-凝固剂" class="headerlink" title="2.2.5    凝固剂"></a>2.2.5    凝固剂</h3><p>盐卤。</p><p><img src="https://img-blog.csdnimg.cn/2020111721175926.png" alt="image-20201117200044922"></p><blockquote><p>【解析】</p><ul><li>着色剂：可以改善食品外观，如胡萝卜素、胭脂红、柠檬黄。<ul><li>胡萝卜素：一种重要营养元素，维生素 A 的主要原物质，如β胡萝卜素，主要来源于蔬菜和水果，可以将食物染成胡萝卜的颜色。</li><li>胭脂红：食用色素，常用于果汁、碳酸饮料、糖果、糕点、冰淇淋、酸奶等， 一般不用于肉类， 主要是防止不法分子通过胭脂红色素将不良的原料肉，如将变质肉通过胭脂红掩盖其原有的颜色，从而显的新鲜，欺骗消费者。</li><li>柠檬黄：呈黄色粉末，溶于水，主要在涂料、油墨行业使用，在食品行业使用较少。</li></ul></li><li>调味剂——增添食品味道，如食盐（咸）、醋（酸）、味精<ul><li>味精：化学名字叫谷氨酸钠，是一种鲜味调味剂，溶于水，水溶液，据说稀释 1000 倍以后依旧可以尝到它的鲜味，在以前的时候，味精主要是以面筋、大豆为原料来提炼的，这样的方式劳动强度大，对设备要求高，要求设备耐酸碱腐蚀， 现在主要是通过谷物发酵的方式提纯， 所以现在的味精也是发酵产品。</li><li>注意：辣不是一种味觉，而是化学物质灼伤口腔产生的痛觉。</li></ul></li><li>防腐剂：顾名思义，可以防止食品腐烂、变质，比如山梨酸钾、硝酸盐、茶多酚、二氧化硫等。<ul><li>山梨酸钾：一种不饱和的脂肪酸，而且是一种具有广谱杀菌性的食品防腐剂，应用较为广泛，如图中的饮料瓶中的配料中就含有山梨酸钾。山梨酸和山梨酸钾获得了联合国粮农组织和世界卫生组织安全公认的安全高效的防腐剂，因此应用广泛，而且在食品防腐剂中毒性是最低的，在食品、饲料加工等方面用途非常广泛。</li><li>硝酸盐：使用量有严格限制，在实际生活中，食品加工要使用硝酸盐的量是有严格控制的，因为硝酸盐在人体内可以被还原为亚硝酸盐，而亚硝酸盐与人体血液作用之后， 可以形成高铁血红蛋白， 从而使血液失去携带氧气的功能，使人中毒，轻则头晕、呕吐，重则神志不清，甚至有可能会危机生命。</li><li>茶多酚：重要的防腐剂，本来是决定茶叶的颜色、味道，大家尝到的茶的味道，实际上是茶多酚的味道，占整个茶叶干重的 20%-30%，其中含量较大的是儿茶素。茶多酚对自然界的近百种细菌均具有抗菌活性，抗菌具有广谱性，也能作为防腐剂，主要用于乳酸饮料、农畜产品加工中。</li><li>二氧化硫：是一种酸性气体，同时也是我国非常重要的防腐剂，在工业中应用非常广泛，只不多用量有严格限制。</li><li>拓展：甲醛的水溶液叫福尔马林，考试中经常出现“福尔马林的水溶液可以用于防腐，比如制作泡椒鸡爪”（错误）。原因：福尔马林有毒，食用以后会导致人中毒。</li></ul></li><li>营养强化剂：在食品中添加可以增强食品的营养价值，如食盐中加碘、酱油中加铁。</li><li>凝固剂：液体或者是流状物体等凝结成固体，最常见的就是盐卤，通常是把海水或者是盐湖里的水制盐之后残留在池子内部的一些母液， 蒸发冷却之后析出的氯化镁的结晶， 形成的卤块， 是中国数千年来用来制作豆腐的传统凝固剂，它可以使蛋白质溶液凝结为凝胶，用盐卤做的豆腐，其硬度、弹性、韧性都比较强，就是大家俗称的老豆腐。</li></ul></blockquote><h3 id="2-2-6-试题"><a href="#2-2-6-试题" class="headerlink" title="2.2.6    试题"></a>2.2.6    试题</h3><ul><li><p>【例 3】（2018 吉林）食品添加剂被誉为现代食品工业的灵魂。下列食品工业中所应用的食品添加剂与其所属类型，对应错误的是（ ）。</p><p>A.制作罐头时使用的山梨酸钾——防腐剂</p><p>B.制作香肠时使用的谷氨酸钠——增味剂</p><p>C.制作老豆腐时使用的盐卤——凝固剂</p><p>D.制作面包时使用的碳酸氢钠——酸度调节剂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】3.选非题。D 项错误：没有该说法。【选 D】</span><br></pre></td></tr></table></figure></li><li><p>【例 4】（2012 联考）下列说法错误的是（ ）。</p><p>A.高浓度糖液破坏微生物的细胞结构，可延长食品保存期</p><p>B.山梨酸钾是一种食品添加剂，可用于增加食品的风味</p><p>C.茶多酚能够抑制自由基的活性，可以作为食品防腐剂</p><p>D.β-胡萝卜素可以作为食用性色素，可以用于食品调色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】4.选非题。B 项错误：山梨酸钾是防腐剂，不是增味剂。A 项正确：说的是罐头。【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 5】（2019 多省联考）下列关于盐的说法错误的是（ ）。</p><p>A.盐又称“百味之王”，是咸味的载体，具有去腥增鲜之用</p><p>B.人体如果摄入过多的盐份，容易产生高血压、水肿等问题</p><p>C.按来源及开采方式分类，盐可分为：井盐、海盐、湖盐等</p><p>D.日常生活中的低钠盐加入了一定比例的氰化钾，其咸味较淡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】5.选非题。D 项错误：氰化钾是剧毒物质。【选 D】</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-食品营养"><a href="#2-3-食品营养" class="headerlink" title="2.3    食品营养"></a>2.3    食品营养</h2><h3 id="2-3-1-维生素"><a href="#2-3-1-维生素" class="headerlink" title="2.3.1    维生素"></a>2.3.1    维生素</h3><p>维生素是参与生物生长发育和新陈代谢所必需的一类小分子有机化合物，在天然食物中含量极少。</p><ul><li>维生素 A</li><li>维生素 B1</li><li>维生素 C</li><li>维生素 D</li><li>维生素 E</li><li>维生素 K</li></ul><blockquote><p>【解析】</p><ul><li>食品营养：主要包括维生素和微量元素，人体能够补充正常的维生素和微量元素，能够保证人体正常运转，也是人体不可或缺/重要的一部分。</li><li>维生素：是参与生物生长发育和新陈代谢所必需的一类小分子有机化合物，这类物质在体内既不构成身体组织的原料（如蛋白质、肌肉、毛发），也不是能量来源，人体的主要能量来源是糖类、脂肪。维生素是一类调节物质，调节人体内物质分泌以及人体机能，在物质代谢中起到了非常重要的作用，这些物质由于在体内不能全部合成，虽然需要量少，但是也需要体外摄入。考试中一般会考查缺少哪一类维生素会导致哪一类病症或者是出现哪种情况。<ul><li>维生素 A：缺少会得夜盲症（晚上看不清东西），具有促进生长、维持结膜、角膜等正常功能的作用，参与紫红质的合成，增强视网膜的感光力，维生素 A 对于视线具有非常重要的作用，胡萝卜素是维生素 A 的原物质。因为能够预防夜盲症，因此又称为“抗干眼病因子”，主要存在于鱼肝油、动物肝脏、绿色蔬菜之中。</li><li>维生素 B1：维生素 B 是一个非常大的家族，维生素 B1 又称“抗脚气病因子”，缺少维生素 B1 易患脚气病，脚气病不等于脚气，脚气是脚部真菌感染所形成的，脚气病是因为缺少维生素 B1 引起的全身疾病。维生素 B1 是水溶性维生素，主要存在于谷物、动物肝脏、大豆、肉类等食品中。维生素 B9 又称叶酸，很多孕妇在怀孕期间都需要补充的，是一种水溶性维生素，叶酸在蛋白质合成以及细胞分裂和生长过程中具有非常重要的作用，且能够预防红细胞贫血。</li><li>维生素 C：又被称为抗坏血酸，体内缺少维生素 C 会得坏血病，像牙龈出血一样的病症。维生素 C 是一种水溶性维生素，经常流失，所以需要经常去补，广泛存在于蔬菜、水果、西红柿、菜花、柿子、苦瓜、橘子、柚子、苹果、猕猴桃等。补充：虽然大多数动物都可以靠肝脏合成维生素 C，但是人类是不可以自身合成维生素 C，因此必须要通过食物摄入。</li><li>维生素 D：是一种脂溶性维生素，缺乏维生素 D 易患佝偻病，可以预防佝偻病，主要来源是脂肪高的海鱼、动物肝脏、蛋黄、奶油等。小孩子为了长身体，就会吃很多的鱼肝油，因为鱼肝油中有丰富的维生素 D，可以促进钙质的吸收，进而使小朋友体格健壮。</li><li>维生素 E：脂溶性维生素，主要和生育功能、美容功能有关，在蔬菜、坚果中含量较多，能够延缓衰老，有效减少皱纹的产生，保持青春貌美，同时可以促进激素分泌，提高生育能力，防止流产等。</li><li>维生素 K：又叫凝血维生素，血液流的时候流血不止，有可能是缺乏维生素 K，可以防止新生婴儿出血的疾病，可以预防内出血，可以促进血液正常凝固等一系列的作用，因此在临床医学中，维生素 K 比较重要。</li></ul></li><li>分类：根据溶解性，分为水溶性（溶于水）维生素和脂溶性（溶于有机溶剂）维生素。<ul><li>水溶性维生素：常见的是维生素 B 族和维生素 C。</li><li>脂溶性维生素：维生素 A、维生素 D、维生素 E 和维生素 K 等。</li></ul></li></ul></blockquote><h3 id="2-3-2-微量元素"><a href="#2-3-2-微量元素" class="headerlink" title="2.3.2    微量元素"></a>2.3.2    微量元素</h3><p>在人体内含量极少，不到体重的万分之一，但是对维持生命活动，促进健康生长和发育具有重要作用。</p><ul><li>碘——缺乏会引起甲状腺肿大</li><li>铁——缺铁会引起贫血</li><li>锌——缺锌会引起食欲不振、生长迟缓、发育不良</li><li>氟——缺乏会得龋(/qǔ/)齿</li></ul><blockquote><p>【解析】</p><p>微量元素：在人体内含量极少，不到体重的万分之一，万分之一以上的被称之为常量元素，如氧、钙等，微量元素对于维持生命活动，促进健康生长和发育具有重要作用。常见的微量元素有：</p><ul><li>碘：缺乏会引起甲状腺肿大（甲状腺肿大和甲亢是两回事）。</li><li>铁：缺铁会引起贫血，主要通过食补的方式进行，铁锅炒菜虽然有一定的作用，但是并不能有效的预防。</li><li>锌：被称之为智力元素，缺锌会引起食欲不振、生长迟缓、发育不良，现在很多广告都在说补锌的重要性。</li><li>氟：缺乏会得龋齿，即虫牙、蛀牙，一般情况下会通过改善水质的方式来解决。</li></ul></blockquote><h3 id="2-3-3-试题"><a href="#2-3-3-试题" class="headerlink" title="2.3.3    试题"></a>2.3.3    试题</h3><ul><li><p>【例 6】（2019 多省联考）下列关于维生素说法错误的是（ ）。</p><p>A.人体无法完全依靠自身合成维生素，食物是人类获取维生素的主要来源</p><p>B.维生素 E、K 的重要作用分别是抗氧化、延缓衰老和维持视力、免疫力</p><p>C.维生素可分为水溶性维生素和脂溶性维生素，维生素 D 属于后者</p><p>D.新鲜的西红柿、猕猴桃、辣椒等果蔬含有丰富的维生素 C</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】6.选非题。B 项错误：维持视力（预防夜盲症）是维生素 A 的主要作用。【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 7】（2012 多省联考）紫外线促使人体合成（ ）以预防佝偻病。</p><p>A.维生素 A</p><p>B.维生素 B</p><p>C.维生素 C</p><p>D.维生素 D</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】1.D 项正确：维生素 D 可以预防佝偻病。【选 D】</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4    总结"></a>2.4    总结</h2><p><img src="https://img-blog.csdnimg.cn/20201117211803862.png" alt="image-20201117201350793"></p><p><strong>【注意】</strong></p><ul><li>食品制作：发酵工艺，常见菌种有酵母菌（制作馒头）、乳酸菌（制作酸奶、泡菜）。馒头、醋、酱油、味精都是通过发酵得到的。</li><li>食品添加剂：<ul><li>着色剂：胡萝卜素、胭脂红、柠檬黄，胭脂红和柠檬黄用量较少。</li><li>调味剂：食盐、醋、味精，辣不是味道。</li><li>防腐剂：山梨酸钾、硝酸盐、茶多酚、二氧化硫。重点注意山梨酸钾和二氧化硫。</li><li>营养强化剂：食盐中加碘、酱油中加铁（了解即可）。</li><li>凝固剂：盐卤，制作豆腐。</li></ul></li><li>维生素：<ul><li>维生素 A：夜盲症。</li><li>维生素 B1：脚气病。</li><li>维生素 C：坏血病。</li><li>维生素 D：佝偻病。</li><li>维生素 E：美容养颜、抗衰老，和生育功能有关。</li><li>维生素 K：主要作用凝血。</li></ul></li><li>微量元素：<ul><li>碘缺乏会引起甲状腺肿大。</li><li>缺铁会引起贫血。</li><li>缺锌会引起食欲不振、生长迟缓、发育不良。</li><li>缺氟会得龋齿。</li></ul></li></ul><h1 id="3-环境保护"><a href="#3-环境保护" class="headerlink" title="3.    环境保护"></a>3.    环境保护</h1><h2 id="3-1-大气环境保护"><a href="#3-1-大气环境保护" class="headerlink" title="3.1    大气环境保护"></a>3.1    大气环境保护</h2><h3 id="3-1-1-酸雨"><a href="#3-1-1-酸雨" class="headerlink" title="3.1.1    酸雨"></a>3.1.1    酸雨</h3><p>pH 小于 5.6 的降水，主要是人为排放硫氧化物和氮氧化物</p><h3 id="3-1-2-臭氧层受损"><a href="#3-1-2-臭氧层受损" class="headerlink" title="3.1.2    臭氧层受损"></a>3.1.2    臭氧层受损</h3><p>20 世纪 80 年代在南极测到臭氧空洞，人类活动排出的氟卤代烷和含溴的卤代烷烃(/tīng/)是主要原因。</p><h3 id="3-1-3-温室效应"><a href="#3-1-3-温室效应" class="headerlink" title="3.1.3    温室效应"></a>3.1.3    温室效应</h3><p>二氧化碳等温室气体排入大气，使得大气平均温度上升，进而导致全球气候变暖。</p><h3 id="3-1-4-PM2-5"><a href="#3-1-4-PM2-5" class="headerlink" title="3.1.4    PM2.5"></a>3.1.4    PM2.5</h3><p>细颗粒物又称细粒、细颗粒、PM2.5。细颗粒物指环境空气中空气动力学当量直径小于等于 2.5 微米的颗粒物。它能较长时间悬浮于空气中，其在空气中含量浓度越高，就代表空气污染越严重。</p><h3 id="3-1-5-水污染"><a href="#3-1-5-水污染" class="headerlink" title="3.1.5    水污染"></a>3.1.5    水污染</h3><p>随着工农业生产的加剧和人口的膨胀，水资源在日益减少的同时， 因为工农业生产排放的污水量增加进而导致水污染。常见的有重金属污染和水体富营养化</p><blockquote><p>【解析】</p><ul><li>酸雨：pH 小于 5.6 的降水，主要是人为排放硫氧化物和氮氧化物，我国主要是二氧化碳、二氧化硫，我国以前燃煤较多，煤中含有硫化物，因此硫酸雨是我国的主要酸雨类型，当酸雨落到地球表面，会对农作物造成损害，如下图中的西瓜表面坑坑洼洼，就是由于酸雨滴到了西瓜表皮，还会对建筑物、人体皮肤造成腐蚀，这就要求我们减少含硫化学燃料的使用，增加清洁能源的使用。二氧化硫即使一种酸性气体，也是一种防腐剂，大气中的二氧化碳遇水会反应成为碳酸，但是问题不大。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201117211809534.png" alt="image-20201117202204382"></p><ul><li>臭氧层受损：20 世纪 80 年代在南极测到臭氧空洞，南极没有重工业，但是出现了臭氧空洞， 和大气环流有关， 只需要注意是在南极测到的臭氧空洞即可。人类活动排出的氟卤代烷和含溴的卤代烷烃是主要原因，最常见的就是氟利昂，如冰箱、空调中的氟利昂会加速臭氧层的受损，但是现在南极上空臭氧空洞正在逐渐减少。意义：正是因为臭氧层的存在，人体才免于来自于太阳光的强紫外线的照射，才能保持人体的正常发育，否则人类患皮肤癌的疾病会大大增加。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201117211814216.png" alt="image-20201117202241919"></p><ul><li>温室效应：是指二氧化碳等温室气体排入大气，使得大气平均温度上升，进而导致全球气候变暖，两极冰川融化，海平面上升，很多地方会变成沼泽，对人类的影响比较大。二氧化碳并不是唯一的温室气体，还有甲烷、水蒸气。下图中的北极熊，就是因为北极地区的冰川融化，找不到食物，饿的瘦骨嶙峋。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201117211819471.png" alt="image-20201117202254867"></p><ul><li>PM2.5：又称细颗粒物，又称细粒、细颗粒、PM2.5。细颗粒物指环境空气中空气动力学当量直径小于等于 2.5 微米的颗粒物，能较长时间悬浮于空气中，其在空气中含量浓度越高，就代表空气污染越严重，也就是大家生活中提到的雾霾。注意：雾和霾是两回事，小水滴、小冰晶形成的是雾，固体悬浮的颗粒叫霾。PM10 是直径小于等于 10 微米的颗粒物。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201117211824747.png" alt="image-20201117202305677"></p><ul><li>水污染：随着工农业生产的加剧和人口的膨胀，水资源在日益减少的同时，因为工农业生产排放的污水量增加进而导致水污染。<ul><li>常见的有重金属污染，曾经在日本就发生过水俣(/yǔ/)病事件，就是因为工业生产的水银大量流入水体中， 进而造成人体残疾， 一般情况下， 如果水被污染，千万不要去吃污染水体的鱼类，尤其是鱼头，鱼头中的中重金属含量更高，要吃生活在水体状态良好中的鱼。</li><li>水体富营养化是指含磷等营养元素的生活污水、工业污水大量排入江河湖泊，使水中的营养元素增加，进而导致藻类大量繁殖，使水体缺氧，鱼类大量死亡。在淡水中典型的就是水华，看到水特别绿，手伸到水中绿色可以沾到手上（如下图中间），在海洋中，典型的就是赤潮，赤指的是藻类为红色，但并不唯一。</li><li>水葫芦不是水体富营养化，属于物种入侵（生物入侵），如小龙虾，先从中国以外的地方引进，最初是为了观赏和饲养，但是由于暴雨等情况，会导致从人工水体跑到自然水体中，由于缺少天敌，会大量繁殖。</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201117211829985.png" alt="image-20201117202324101"></p></blockquote><h3 id="3-1-6-试题"><a href="#3-1-6-试题" class="headerlink" title="3.1.6    试题"></a>3.1.6    试题</h3><ul><li><p>【例 8】（2016 国考）某城市空气质量较差，检测结果显示，在主要污染物中，PM10 颗粒浓度严重超标，PM2.5 颗粒浓度及有害气体浓度尚在正常范围。如果你是城市决策者，采取以下哪些措施能在影响最小的情况下，最有效地改善空气质量？</p><p>①整改郊区水泥厂</p><p>②整改郊区造纸厂</p><p>③市区车辆限号行驶</p><p>④改善郊区植被环境</p><p>A.①②</p><p>B.①④</p><p>C.③④</p><p>D.②③</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】8.②造纸厂主要是水体污染，在清洗纸浆的时候会用到水，可能会对水体造成一定的污染，不会有烟尘产生。排除 A、D 选项。①水泥厂造成的污染颗粒更大一些，汽车尾气由于燃烧较为充分，产生的颗粒相对较小，题干中指出 PM2.5 在正常范围之内，所以应该整改水泥厂，①当选，排除 C 选项。 【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 9】（2012 江西）2011 年，一场关于 PM2.5 的讨论，牵动着国人神经。PM2.5是指（ ）。</p><p>A.极细颗粒物</p><p>B.细颗粒物</p><p>C.微颗粒物</p><p>D.超微颗粒物</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】9.考查概念。B 项正确：PM2.5 是指细颗粒物。【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 10】（2019 广东）赤潮是指在特定的环境条件下，海水中某些浮游生物爆发性增殖，引起水体变色的一种生态现象。下列关于赤潮的说法中，正确的是（ ）。</p><p>A．海水富营养化是赤潮爆发的基础</p><p>B．赤潮爆发与人类活动关系不大</p><p>C．多数赤潮对环境没有危害</p><p>D．所有的赤潮都是红色的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】10.A 项正确：海水富营养化是赤潮爆发的基础。B 项错误：赤潮爆发是由于人类破坏了生态平衡，向水中排放了大量的营养物质造成的。C 项错误：赤潮爆发以后，水中含氧量会降低，鱼类会大量死亡。D 项错误：赤潮主要是红色的，但不都是红色的。【选 A】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-垃圾分类处理"><a href="#3-2-垃圾分类处理" class="headerlink" title="3.2    垃圾分类处理"></a>3.2    垃圾分类处理</h2><p>根据 2019 年住房和城乡建设部发布的《生活垃圾分类标志》标准，共分为4 个大类，11 个小类。</p><p><img src="https://img-blog.csdnimg.cn/20201117211836463.png" alt="image-20201117203259609"></p><h3 id="3-2-1-垃圾的分类"><a href="#3-2-1-垃圾的分类" class="headerlink" title="3.2.1    垃圾的分类"></a>3.2.1    垃圾的分类</h3><h4 id="3-2-1-1-可回收物"><a href="#3-2-1-1-可回收物" class="headerlink" title="3.2.1.1    可回收物"></a>3.2.1.1    可回收物</h4><p>可回收物表示适宜回收利用的生活垃圾，包括纸类、塑料、金属、玻璃、织物等。</p><h4 id="3-2-1-2-有害垃圾"><a href="#3-2-1-2-有害垃圾" class="headerlink" title="3.2.1.2    有害垃圾"></a>3.2.1.2    有害垃圾</h4><p>有害垃圾表示《国家危险废物名录》中的家庭源危险废物，包括灯管、家用化学品和电池等。</p><h4 id="3-2-1-3-厨余垃圾"><a href="#3-2-1-3-厨余垃圾" class="headerlink" title="3.2.1.3    厨余垃圾"></a>3.2.1.3    厨余垃圾</h4><p>厨余垃圾表示易腐烂的、含有机质的生活垃圾，包括家庭厨余垃圾、餐厨垃圾和其他厨余垃圾等。</p><h4 id="3-2-1-4-其他垃圾"><a href="#3-2-1-4-其他垃圾" class="headerlink" title="3.2.1.4    其他垃圾"></a>3.2.1.4    其他垃圾</h4><p>其他垃圾表示除可回收物、有害垃圾、厨余垃圾外的生活垃圾。</p><blockquote><p>【解析】</p><ul><li><p>垃圾的分类：</p><ul><li><p>可回收物表示适宜回收利用的生活垃圾，包括纸类（如图书等）、塑料、金属、玻璃、织物等，标志如下图。</p><p><img src="https://img-blog.csdnimg.cn/20201117211842572.png" alt="image-20201117203438587"></p></li><li><p>有害垃圾：对人体和环境都是有害的，表示《国家危险废物名录》中的家庭源危险废物， 包括灯管、 家用化学品、 过期药品和电池等， 如水银温度计，标志如下图。</p><p><img src="https://img-blog.csdnimg.cn/20201117211847419.png" alt="image-20201117203516422"></p></li><li><p>厨余垃圾：表示容易腐烂的、含有机质的生活垃圾，包括家庭厨余垃圾（剩饭）、餐厨垃圾（菜叶、果核、果皮）和其他厨余垃圾等，标志如下图。</p><p><img src="https://img-blog.csdnimg.cn/20201117211852351.png" alt="image-20201117203525972"></p></li><li><p>其他垃圾：表示除可回收物、有害垃圾、厨余垃圾外的生活垃圾。如碎陶瓷、厕纸等，标志如下图。</p><p><img src="https://img-blog.csdnimg.cn/20201117211859839.png" alt="image-20201117203533916"></p></li></ul></li><li><p>重点记忆垃圾分类的标志，如其他垃圾的标志下方是开口的。</p></li></ul></blockquote><h3 id="3-2-2-垃圾处理方式"><a href="#3-2-2-垃圾处理方式" class="headerlink" title="3.2.2    垃圾处理方式"></a>3.2.2    垃圾处理方式</h3><ul><li>垃圾填埋</li><li>堆肥</li><li>焚烧</li></ul><blockquote><p>【解析】</p><p>垃圾处理方式：包括垃圾填埋、堆肥、焚烧，现在会使用微生物降解，因为焚烧可能会产生二噁英等有害物质，而堆肥、填埋对于塑料等物质很难分解。</p><p><img src="https://img-blog.csdnimg.cn/2020111721190598.png" alt="image-20201117203939161"></p></blockquote><h3 id="3-2-3-试题"><a href="#3-2-3-试题" class="headerlink" title="3.2.3    试题"></a>3.2.3    试题</h3><ul><li><p>【例 11】（2020 浙江选调）生活垃圾一般可分为四大类：可回收垃圾、厨余垃圾（湿垃圾）、有害垃圾和其他垃圾（干垃圾）。下列说法正确的是（ ）</p><p>A.报纸和陶瓷属于可回收垃圾</p><p>B.蛋壳和塑料餐盒属于厨余垃圾</p><p>C.人体毛发和厕纸属于其他垃圾</p><p>D.废旧蓄电池和玻璃碎片属于有害垃圾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】11.A 项错误：陶瓷属于其他垃圾。B 项错误：塑料餐盒不属于厨余垃圾。D 项错误：玻璃属于可回收垃圾。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【例 12】（2018 年多省联考）日常中，垃圾一般分为可回收垃圾、有毒垃圾、厨余垃圾和其它垃圾（不可回收垃圾）。据此，下列说法错误的是（ ）。</p><p>A.可回收垃圾、其它垃圾的标志分别为</p><p><img src="https://img-blog.csdnimg.cn/20201117211909764.png" alt="image-20201117204240287"></p><p>B.充电电池、废旧灯管灯泡属于有毒垃圾</p><p>C.受污染的纸张、过期药品等都应归为其它垃圾</p><p>D.厨余垃圾包括饭菜、过期食品、菜梗菜叶等废弃的生热食物残渣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】12.选非题。C 项错误：过期药品属于有害垃圾，纸张要看受污染程度而定。【选 C】</span><br></pre></td></tr></table></figure></li><li><p>【例 13】（2017 天津）根据我国生活垃圾分类制度的规定，下列物品均为有害垃圾的是（ ）。</p><p>A.废血压计和废胶片</p><p>B.餐厨垃圾和废电池</p><p>C.废塑料和废温度计</p><p>D.废玻璃和废油漆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】13.B 项错误：餐厨垃圾不是有害垃圾。C 项错误：废塑料不是有害垃圾。D 项错误：废玻璃不是有害垃圾。【选 A】</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3    总结"></a>3.3    总结</h2><p><img src="https://img-blog.csdnimg.cn/20201117211922337.png" alt="image-20201117204934030"></p><p><strong>【注意】</strong></p><ul><li>大气环境保护：<ul><li>酸雨： 我国主要以硫酸雨为主。 二氧化硫既是酸性气体 （酸雨的元凶） ，也是防腐剂。</li><li>臭氧层受损：会使紫外线到达地球表面，使人患皮肤癌的几率增加。</li><li>温室效应：是温室气体二氧化碳导致的。</li><li>PM2.5：是一种细颗粒物，注意雾和霾的区别和联系。</li><li>水污染：水的重金属污染、水体富营养化，重点关注淡水中的水华和海水中的赤潮，水葫芦属于物种入侵。</li></ul></li><li>垃圾分类处理：一般会给出一类具体垃圾，选择属于哪一种垃圾分类。<ul><li>可回收物。</li><li>有害垃圾。</li><li>厨余垃圾。</li><li>其他垃圾：如陶瓷、厕纸、人体毛发等。</li></ul></li></ul><h1 id="4-应急自救"><a href="#4-应急自救" class="headerlink" title="4.    应急自救"></a>4.    应急自救</h1><h2 id="4-1-雷雨天气"><a href="#4-1-雷雨天气" class="headerlink" title="4.1    雷雨天气"></a>4.1    雷雨天气</h2><ul><li>蹲下，降低自己的高度，同时将双脚并拢。</li><li>不要在大树底下避雨。</li><li>不要在水体边(江、河、湖、海、塘、渠等)、洼地及山顶、楼顶上停留。</li><li>不要拿着金属物品及接打手机。</li><li>不要触摸或者靠近防雷接地线，自来水管、家用电器的接地线。</li></ul><blockquote><p>【解析】</p><p>雷雨天气：最大的危害来自于打雷，部分地区遇到强暴雨会有山洪灾害。</p><ul><li><p>蹲下，降低自己的高度，同时将双脚并拢，如下图穿红衣服的人踩在行李上，可以隔绝自己和地面的联系。</p></li><li><p>不要在大树底下避雨，因为树容易引雷。</p><p><img src="https://img-blog.csdnimg.cn/20201117211928423.png" alt="image-20201117205333962"></p></li><li><p>不要在水体边(江、河、湖、海、塘、渠等)、洼地及山顶、楼顶上停留，因为水可以导电。</p></li><li><p>不要拿着金属物品及接打手机。</p><p><img src="https://img-blog.csdnimg.cn/20201117211933383.png" alt="image-20201117205357811"></p></li><li><p>不要触摸或者靠近防雷接地线，自来水管（钢铁材质）、家用电器的接地线。</p><p><img src="https://img-blog.csdnimg.cn/20201117211938137.png" alt="image-20201117205418124"></p></li><li><p>在野外，如果遇到雷雨天气，可以选择躲在汽车里。</p></li></ul></blockquote><h3 id="4-1-1-试题"><a href="#4-1-1-试题" class="headerlink" title="4.1.1    试题"></a>4.1.1    试题</h3><ul><li><p>【例 14】（2013 山东）遇到雷电天气时，下列说法不正确的是（ ）。</p><p>A.要及时从汽车中逃离</p><p>B.在建筑物中应远离电话、电视等</p><p>C.要远离单独的高大树木</p><p>D.在野外可以蜷缩在地面较低的区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】14.选非题。A 项错误：汽车是密闭的环境，可以有效防雷击。 【选A】</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-火灾自救"><a href="#4-2-火灾自救" class="headerlink" title="4.2    火灾自救"></a>4.2    火灾自救</h2><h3 id="4-2-1-自救注意事项"><a href="#4-2-1-自救注意事项" class="headerlink" title="4.2.1    自救注意事项"></a>4.2.1    自救注意事项</h3><ul><li>不要贪恋财物。</li><li>受到火势威胁时，要当机立断披上浸湿的衣物、被褥等向安全出口方向冲出去。</li><li>穿过浓烟逃生时，要尽量使身体贴近地面，并用湿毛巾捂住口鼻。</li><li>遇火灾不可乘坐电梯，要向安全出口方向逃生。</li><li>室外着火，门已发烫，千万不要开门，以防大火蹿入室内，要用浸湿的被褥、衣物等堵塞门窗缝，并泼水降温。</li><li>若所在逃生线路被大火封锁，要立即退回室内，用打手电筒、挥舞衣物、呼叫等方式向窗外发送求救信号，等待救援。</li><li>千万不要盲目跳楼，可利用疏散楼梯、阳台、落水管等逃生自救；也可用绳子把床单、被套撕成条状连成绳索，紧拴在窗框、暖气管、铁栏杆等固定物上，用毛巾、布条等保护手心，顺绳滑下，或下到未着火的楼层脱离险境。</li></ul><blockquote><p>【解析】</p><p>火灾自救注意事项：</p><ul><li><p>不要贪恋财物。</p></li><li><p>受到火势威胁时，要当机立断披上浸湿的衣物、被褥等向安全出口方向冲出去。</p></li><li><p>重点：穿过浓烟逃生时，要尽量使身体贴近地面，并用湿毛巾捂住口鼻。发生火灾之后，很多人都是被浓烟呛死的，烟比较轻，会自上而下的扩散，因此匍匐前进或者是趴着/贴着地面前进可以保证视线相对清晰，看清楚路线，且底部有足够的空气，不至于被呛死。</p><p><img src="https://img-blog.csdnimg.cn/20201117211942830.png" alt="image-20201117205921472"></p></li><li><p>遇火灾不可乘坐电梯，要向安全出口方向逃生，因为发生火灾可能会造成电路短路，容易困在电梯里。</p><p><img src="https://img-blog.csdnimg.cn/20201117211949311.png" alt="image-20201117205946374"></p></li><li><p>室外着火，门已发烫，千万不要开门，以防大火蹿入室内，因为大火之后会有气体，内外会产生气压差，要用浸湿的被褥、衣物等堵塞门窗缝，并泼水降温。</p></li><li><p>若所在逃生线路被大火封锁，要立即退回室内，用打手电筒、挥舞衣物、呼叫等方式向窗外发送求救信号，等待救援。</p></li><li><p>千万不要盲目跳楼，可利用疏散楼梯、阳台、落水管等逃生自救；也可用绳子把床单、被套撕成条状连成绳索（确保结实），紧拴在窗框、暖气管、铁栏杆等固定物上，用毛巾、布条等保护手心，顺绳滑下，或下到未着火的楼层脱离险境。</p><p><img src="https://img-blog.csdnimg.cn/20201117211955610.png" alt="image-20201117205957732"></p></li><li><p>注意：因为燃气泄漏而导致的火灾，也要遵守以上原则，不要吸烟、不要开灯，开灯的瞬间会有火花。</p></li></ul></blockquote><h4 id="4-2-1-1-试题"><a href="#4-2-1-1-试题" class="headerlink" title="4.2.1.1    试题"></a>4.2.1.1    试题</h4><ul><li><p>【例 15】（2016 江苏 A）发生火灾时应匍匐前进以逃生，其原因的下列说法，错误的是（ ）。</p><p>A.低处有残留的新鲜空气            </p><p>B.有毒有害气体集中于高处</p><p>C.浓烟自下而上扩散                    </p><p>D.低处视野比较清晰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】15.选非题。C 项错误：浓烟是自上而下扩散。【选 C】</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-2-灭火器"><a href="#4-2-2-灭火器" class="headerlink" title="4.2.2    灭火器"></a>4.2.2    灭火器</h3><ul><li>干粉灭火器</li><li>泡沫灭火器</li><li>二氧化碳灭火器</li><li>清水灭火器</li></ul><blockquote><p>【解析】</p><p>灭火器：</p><ul><li><p>干粉灭火器：内部装有磷酸铵盐等，呈粉末状，具有易流动、干燥性，由无机盐和干燥剂组成，可以有效扑灭刚刚发生的火灾，考试出现的几率一般。</p><p><img src="https://img-blog.csdnimg.cn/20201117212000765.png" alt="image-20201117210435218"></p></li><li><p>泡沫灭火器（如左下图）：灭火的原理是喷出大量的二氧化碳泡沫，粘附在可燃物上，使可燃物于空气隔绝，达到灭火的目的。特点：外壳由铁皮制成，里面装有两部分，一部分是碳酸氢钠、发泡剂的混合物，另外一部分是硫酸铝的水溶液，使用时要将泡沫灭火器上下颠倒，碳酸氢钠和硫酸铝的水溶液会发生反应，产生大量的二氧化碳泡沫。考试会常考泡沫灭火器使用时要上下颠倒，发生反应产生二氧化碳泡沫之后在使用。</p></li><li><p>二氧化碳灭火器：内部装的是液态二氧化碳，在加压时将二氧化碳压缩在小钢瓶中（如右下图），在灭火时喷出，有降温和隔绝空气的作用，考试也会考，主要用于扑救一些贵重的设备，一期、仪表、档案、书籍等火灾中需要挽救的物品。</p><p><img src="https://img-blog.csdnimg.cn/2020111721200612.png" alt="image-20201117210501497"></p></li><li><p>清水灭火器。</p></li></ul></blockquote><h4 id="4-2-2-1-试题"><a href="#4-2-2-1-试题" class="headerlink" title="4.2.2.1    试题"></a>4.2.2.1    试题</h4><ul><li><p>【例 16】（2015 山东）关于灭火器的原理和使用方法，下列说法不正确的是（ ）。</p><p>A.泡沫灭火器使用时会产生大量的二氧化碳，将燃烧物与空气隔绝</p><p>B.使用干粉灭火器时需要将灭火器倒立，使两种物质混合产生干粉</p><p>C.在使用二氧化碳灭火器时，要将手放在钢瓶的木柄上以防冻伤</p><p>D.电路失火在没切断电源之前不能使用泡沫灭火器灭火</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】16.选非题。B 项错误：干粉灭火器使用时不需要上下颠倒，使用时需要上下颠倒的是泡沫灭火器。 C 项正确： 二氧化碳从液态变为气态的过程中，会吸收大量的热，周围温度就会降低。D 项正确：泡沫灭火器中有硫酸铝的水溶液，如果没切断电源使用，会造成短路。【选 B】</span><br></pre></td></tr></table></figure></li><li><p>【例 17】（2011 联考）下列说法错误的是（ ）。</p><p>A.家用冰箱不宜存放汽油、乙醇等易燃性液体</p><p>B.使用干粉灭火器灭火时，应对准火焰的底部喷射</p><p>C.火灾现场中首先对人体造成危害的一般是烟雾和毒气</p><p>D.发现室内燃气泄漏，应打开门窗，关闭气源和大功率家用电器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】17.选非题。D 项错误：在关闭大功率家用电器时，产生火花的概率会更高。【选 D】</span><br></pre></td></tr></table></figure></li><li><p>【例 18】（2014 四川）下列说法正确的是（ ）。</p><p>A.油锅起火立即用水扑灭，并迅速熄灭炉火</p><p>B.电路保险丝（片）熔断，用铜线代替以保护电器</p><p>C.身上着火，就地打滚，或用厚重衣物覆盖压灭火苗</p><p>D.停电的夜晚发现煤气泄漏后，点燃蜡烛查找泄漏原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】18.A 项错误：油锅起火应该使用锅盖盖住。B 项错误铜线的熔点更低，起不到保护的作用。D 项错误：煤气泄露不应该点蜡烛。【选 C】</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-身体伤害应急处理"><a href="#4-3-身体伤害应急处理" class="headerlink" title="4.3    身体伤害应急处理"></a>4.3    身体伤害应急处理</h2><h3 id="4-3-1-运动扭伤"><a href="#4-3-1-运动扭伤" class="headerlink" title="4.3.1    运动扭伤"></a>4.3.1    运动扭伤</h3><p>运动型扭伤，如轻度足踝扭伤，应先冷敷患处，24 小时后改用热敷，用绷带缠住足踝，把脚垫高，即可减轻症状。</p><blockquote><p>【解析】</p><p>运动型扭伤，如轻度足踝扭伤，应先冷敷患处，24 小时后改用热敷，运动型扭伤，先采用热敷的话容易导致血管破裂。</p><p><img src="https://img-blog.csdnimg.cn/20201117212012179.png" alt="image-20201117210830850"></p></blockquote><h4 id="4-3-1-1-试题"><a href="#4-3-1-1-试题" class="headerlink" title="4.3.1.1    试题"></a>4.3.1.1    试题</h4><ul><li><p>【例 19】（2010 福建）运动中扭伤后可采取的正确措施是（ ）。</p><p>A.立即用冰袋冷敷，以防止毛细血管破裂后充血</p><p>B.立即用热水袋热敷，以促进血液循环，加快痊愈</p><p>C.立即用手揉捏受伤处，以散解淤血，防止肿胀</p><p>D.不做任何处理，等待其自然恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】19.B 项错误：应该先冷敷，24 小时以后在热敷。C 项错误：揉捏受伤处， 也会使毛细血管破裂。 D 项错误： 应该先冷敷， 24 小时以后再热敷。 【选A】</span><br></pre></td></tr></table></figure></li><li><p>【例 20】（2014 河北）小张打篮球不慎扭伤脚踝，脚踝肿胀但并未划破。如果小张脚踝扭伤在 24 小时以内，以下哪种处理方法最合理（ ）。</p><p>A.立即冷敷</p><p>B.立即热敷</p><p>C.立即用 75%酒精消毒</p><p>D.立即用碘酒擦洗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】20.A 项正确：题干说的是 24 小时内，应该立即冷敷。【选 A】</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-2-毒蛇咬伤"><a href="#4-3-2-毒蛇咬伤" class="headerlink" title="4.3.2    毒蛇咬伤"></a>4.3.2    毒蛇咬伤</h3><ul><li>不要惊慌奔走，更不要奔跑，要保持镇静，以免加速毒物的吸收和扩散。</li><li>立刻对伤口进行局部处理， 立即在伤口近心端 2～5 厘米处用绳带结扎，每 15 分钟左右放松 1 分钟，防止肢体缺血坏死。</li><li>尽快到医院急诊室进行处理，伤口切开、冲洗、吸毒和排毒。</li><li>特效解毒抗毒血清注射应用越早越好，最好选用多价抗毒血清。</li><li>对症及支持治疗，防止继发感染等。</li></ul><blockquote><p>【解析】</p><p>毒蛇咬伤应急处理：</p><ul><li>不要惊慌奔走，更不要奔跑，要保持镇静，不要喝酒，以免加速毒物的吸收和扩散。</li><li>立刻对伤口进行局部处理，立即在伤口近心端（靠近心脏一端）2～5厘米处用绳带结扎，每 15 分钟左右放松 1 分钟，防止肢体缺血坏死。</li><li>尽快到医院急诊室进行处理，伤口切开、冲洗、吸毒和排毒。</li><li>特效解毒抗毒血清注射应用越早越好，最好选用多价抗毒血清。</li><li>对症及支持治疗，防止继发感染等。</li></ul></blockquote><h4 id="4-3-2-1-试题"><a href="#4-3-2-1-试题" class="headerlink" title="4.3.2.1    试题"></a>4.3.2.1    试题</h4><ul><li><p>【例 21】（2009 河南）被毒蛇咬以后，不可采取的措施是（ ）。</p><p>A.立即喝酒解毒</p><p>B.用清水冲洗伤口或灼烧伤口，除去伤口毒液</p><p>C.放低上肢，用布条在咬伤处近心端 5 公分处扎紧</p><p>D.将伤口割开，放出有毒的血液</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】21.选非题。A 项错误：喝酒会加速血液循环，加快毒物吸收和扩散。B 项正确：灼烧可以使蛋白质变性，可以达到消毒的作用。【选 A】</span><br></pre></td></tr></table></figure></li><li><p>【例 22】（2016 吉林）当遇到下列情况时，你的正确选择是（ ）。</p><p>A.被农药污染的食品一定要充分煮熟再食用</p><p>B.被毒蛇咬伤手臂后，应首先扎住伤口处的近心端</p><p>C.进行人工呼吸过程中，吹气者应始终捏紧被救者的鼻孔</p><p>D.处方药和非处方药都必须在医生的指导下购买和使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【解析】22.A 项错误：被农药污染的食品不要食用。C 项错误：始终捏紧被救者的鼻孔会导致被救者呼吸不畅。D 项错误：非处方药可以自行购买和使用。【选 B】</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4    总结"></a>4.4    总结</h2><p><img src="https://img-blog.csdnimg.cn/20201117212017308.png" alt="image-20201117211308099"></p><p><strong>【注意】</strong></p><ul><li>雷雨天气：<ul><li>蹲下,同时将双脚并拢。</li><li>不要在大树底下避雨。</li><li>不要在水体边、洼地及山顶、楼顶上停留。</li><li>不要拿着金属物品及接打手机。</li><li>汽车内是安全的。</li></ul></li><li>火灾自救：<ul><li>不要贪恋财物。</li><li>穿过浓烟逃生时，要尽量使身体贴近地面遇火灾。</li><li>不可乘坐电梯。</li></ul></li><li>灭火器：<ul><li>干粉灭火器。</li><li>泡沫灭火器：上下颠倒使用。</li><li>二氧化碳灭火器：扑救贵重物品，如档案、仪器、仪表等。</li></ul></li><li>身体伤害应急处理：<ul><li>运动扭伤：先冷敷，24 小时以后再热敷。</li><li>毒蛇咬伤：<ul><li>不要奔跑，要保持镇静，不要喝酒。</li><li>近心端 2-5 厘米处用绳带结扎。</li><li>最好选用多价抗毒血清。</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.    概要&quot;&gt;&lt;/a&gt;1.    概要&lt;/h1&gt;&lt;p&gt;主要讲解生活常识有关的知识点，生活常识不是一门严谨的学科，主要来源于生活中的物理、化学、生物中的现象或常识。&lt;/p&gt;
&lt;p&gt;根据考试的情况，分为食品与健康（食品添加剂、维生素等相关知识）、环境保护、应急自救三方面。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="公务员" scheme="https://wgy1993.gitee.io/tags/%E5%85%AC%E5%8A%A1%E5%91%98/"/>
    
      <category term="常识" scheme="https://wgy1993.gitee.io/tags/%E5%B8%B8%E8%AF%86/"/>
    
      <category term="生活常识" scheme="https://wgy1993.gitee.io/tags/%E7%94%9F%E6%B4%BB%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(四)</title>
    <link href="https://wgy1993.gitee.io/archives/ebe8f13b.html"/>
    <id>https://wgy1993.gitee.io/archives/ebe8f13b.html</id>
    <published>2020-11-16T11:30:47.000Z</published>
    <updated>2020-11-16T11:32:06.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring-Cloud-Stream"><a href="#1-Spring-Cloud-Stream" class="headerlink" title="1.    Spring Cloud Stream"></a>1.    Spring Cloud Stream</h1><p>在实际的企业开发中，消息中间件是至关重要的组件之一。消息中间件主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。不同的中间件其实现方式，内部结构是不一样的。如常见的RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange，kafka有Topic，partitions分区，这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候 <code>springcloud Stream</code> 给我们提供了一种解耦合的方式。</p><a id="more"></a><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1    概述"></a>1.1    概述</h2><p>Spring Cloud Stream由一个中间件中立的核组成。应用通过Spring Cloud Stream插入的input(相当于消费者consumer，它是从队列中接收消息的)和output(相当于生产者producer，它是从队列中发送消息的。)通道与外界交流。通道通过指定中间件的Binder实现与外部代理连接。业务开发者不再关注具体消息中间件，只需关注Binder对应用程序提供的抽象概念来使用消息中间件实现业务即可。</p><p><img src="https://img-blog.csdnimg.cn/20201116192322400.png" alt="image-20201116164635672"></p><p><strong>说明</strong>：最底层是消息服务，中间层是绑定层，绑定层和底层的消息服务进行绑定，顶层是消息生产者和消息消费者，顶层可以向绑定层生产消息和和获取消息消费</p><p><img src="https://img-blog.csdnimg.cn/20201116192330828.png" alt="image-20201116170116630"></p><h2 id="1-2-核心概念"><a href="#1-2-核心概念" class="headerlink" title="1.2    核心概念"></a>1.2    核心概念</h2><h3 id="1-2-1-绑定器"><a href="#1-2-1-绑定器" class="headerlink" title="1.2.1    绑定器"></a>1.2.1    绑定器</h3><p><code>Binder</code> 绑定器是Spring Cloud Stream中一个非常重要的概念。在没有绑定器这个概念的情况下，我们的Spring Boot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性，这使得我们实现的消息交互逻辑就会非常笨重，因为对具体的中间件实现细节有太重的依赖，当中间件有较大的变动升级、或是更换中间件的时候，我们就需要付出非常大的代价来实施。</p><p>通过定义绑定器作为中间层，实现了应用程序与消息中间件(Middleware)细节之间的隔离。通过向应用程序暴露统一的Channel通过，使得应用程序不需要再考虑各种不同的消息中间件的实现。当需要升级消息中间件，或者是更换其他消息中间件产品时，我们需要做的就是更换对应的Binder绑定器而不需要修改任何应用逻辑 。甚至可以任意的改变中间件的类型而不需要修改一行代码。</p><p>Spring Cloud Stream支持各种binder实现，下表包含GitHub项目的链接。</p><table><thead><tr><th>RabbitMQ</th></tr></thead><tbody><tr><td>Apache Kafka</td></tr><tr><td>Amazon Kinesis</td></tr><tr><td>Google PubSub (partner maintained)</td></tr><tr><td>Solace PubSub+ (partner maintained)</td></tr><tr><td>Azure Event Hubs (partner maintained)</td></tr></tbody></table><p>通过配置把应用和spring cloud stream 的 binder 绑定在一起，之后我们只需要修改 binder 的配置来达到动态修改topic、exchange、type等一系列信息而不需要修改一行代码。</p><h3 id="1-2-2-发布-订阅模型"><a href="#1-2-2-发布-订阅模型" class="headerlink" title="1.2.2    发布/订阅模型"></a>1.2.2    发布/订阅模型</h3><p>在Spring Cloud Stream中的消息通信方式遵循了发布-订阅模式，当一条消息被投递到消息中间件之后，它会通过共享的 <code>Topic</code> 主题进行广播，消息消费者在订阅的主题中收到它并触发自身的业务逻辑处理。这里所提到的 Topic 主题是Spring Cloud Stream中的一个抽象概念，用来代表发布共享消息给消费者的地方。在不同的消息中间件中， <code>Topic</code> 可能对应着不同的概念，比如：在RabbitMQ中的它对应了Exchange、而在Kakfa中则对应了Kafka中的Topic。</p><p><img src="https://img-blog.csdnimg.cn/20201116192337750.png" alt="image-20201116170610489"></p><h2 id="1-3-入门案例"><a href="#1-3-入门案例" class="headerlink" title="1.3    入门案例"></a>1.3    入门案例</h2><h3 id="1-3-1-准备工作"><a href="#1-3-1-准备工作" class="headerlink" title="1.3.1    准备工作"></a>1.3.1    准备工作</h3><p>案例中通过rabbitMQ作为消息中间件，完成SpringCloud Stream的案例。需要自行安装</p><p>参考：<a href="https://wgy1993.gitee.io/archives/b543ced0.html">https://wgy1993.gitee.io/archives/b543ced0.html</a></p><h3 id="1-3-2-消息生产者"><a href="#1-3-2-消息生产者" class="headerlink" title="1.3.2    消息生产者"></a>1.3.2    消息生产者</h3><h4 id="1-3-2-1-创建工程引入依赖"><a href="#1-3-2-1-创建工程引入依赖" class="headerlink" title="1.3.2.1    创建工程引入依赖"></a>1.3.2.1    创建工程引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-2-定义bingding"><a href="#1-3-2-2-定义bingding" class="headerlink" title="1.3.2.2    定义bingding"></a>1.3.2.2    定义bingding</h4><p>发送消息时需要定义一个接口，不同的是接口方法的返回对象是 MessageChannel，下面是 Spring Cloud Stream 内置的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String OUTPUT = <span class="string">"output"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Output</span>(Source.OUTPUT)</span><br><span class="line"><span class="function">MessageChannel <span class="title">output</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就接口声明了一个 binding 命名为 “output”。这个binding 声明了一个消息输出流，也就是消息的生产者。</p><h4 id="1-3-2-3-配置application-yml"><a href="#1-3-2-3-配置application-yml" class="headerlink" title="1.3.2.3    配置application.yml"></a>1.3.2.3    配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stream_producer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span> <span class="comment">#指定消息发送的目的地,在rabbitmq中,发送到一个wgy-default的exchange中</span></span><br><span class="line">      <span class="attr">binders:</span>  <span class="comment">#配置绑定器</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-4-测试发送消息"><a href="#1-3-2-4-测试发送消息" class="headerlink" title="1.3.2.4    测试发送消息"></a>1.3.2.4    测试发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> * 入门案例:</span></span><br><span class="line"><span class="comment"> *      1.引入依赖</span></span><br><span class="line"><span class="comment"> *      2.配置application.yml文件</span></span><br><span class="line"><span class="comment"> *      3.发送消息的话,定义一个通道接口,通过接口中内置的messagechannel</span></span><br><span class="line"><span class="comment"> *                      SpringCloudStream中内置接口  Source</span></span><br><span class="line"><span class="comment"> *      4.<span class="doctag">@EnableBinding</span> : 绑定对应通道</span></span><br><span class="line"><span class="comment"> *      5.发送消息的话,通过MessageChannel发送消息</span></span><br><span class="line"><span class="comment"> *                      如果需要MessageChannel --&gt; 通过绑定的内置接口获取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Source<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProducerApplicationDemo</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplicationDemo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//发送MQ消息</span></span><br><span class="line">        <span class="comment">//messagesBuilder:工具类：创建消息</span></span><br><span class="line">        output.send(MessageBuilder.withPayload(<span class="string">"hello world"</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-消息消费者"><a href="#1-3-3-消息消费者" class="headerlink" title="1.3.3    消息消费者"></a>1.3.3    消息消费者</h3><h4 id="1-3-3-1-创建工程引入依赖"><a href="#1-3-3-1-创建工程引入依赖" class="headerlink" title="1.3.3.1    创建工程引入依赖"></a>1.3.3.1    创建工程引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-2-定义bingding"><a href="#1-3-3-2-定义bingding" class="headerlink" title="1.3.3.2    定义bingding"></a>1.3.3.2    定义bingding</h4><p>同发送消息一致，在Spring Cloud Stream中接受消息，需要定义一个接口，如下是内置的一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String INPUT = <span class="string">"input"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Input</span>(Sink.INPUT)</span><br><span class="line"><span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释 <code>@Input</code> 对应的方法，需要返回 <code>SubscribableChannel</code> ，并且参入一个参数值。</p><p>这就接口声明了一个 <code>binding</code> 命名为 <strong>“input”</strong> 。</p><h4 id="1-3-3-3-配置application-yml"><a href="#1-3-3-3-配置application-yml" class="headerlink" title="1.3.3.3    配置application.yml"></a>1.3.3.3    配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-consumer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span>  <span class="comment">#内置的获取消息的通道 , 从wgy-default中获取消息</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-4-测试"><a href="#1-3-3-4-测试" class="headerlink" title="1.3.3.4    测试"></a>1.3.3.4    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> * 入门案例:</span></span><br><span class="line"><span class="comment"> *      1.引入依赖</span></span><br><span class="line"><span class="comment"> *      2.配置application.yml</span></span><br><span class="line"><span class="comment"> *      3.需要配置一个通道的接口</span></span><br><span class="line"><span class="comment"> *              内置获取消息的通道接口 sink</span></span><br><span class="line"><span class="comment"> *      4.绑定通道</span></span><br><span class="line"><span class="comment"> *      5.配置一个监听方法 : 当程序从中间件获取数据之后,执行的业务逻辑方法</span></span><br><span class="line"><span class="comment"> *              需要在监听方法上配置<span class="doctag">@StreamListener</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ConsumerApplicationDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplicationDemo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听binding中的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到消息："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-定义工具类"><a href="#1-3-4-定义工具类" class="headerlink" title="1.3.4    定义工具类"></a>1.3.4    定义工具类</h3><h4 id="1-3-4-1-消息生产者"><a href="#1-3-4-1-消息生产者" class="headerlink" title="1.3.4.1    消息生产者"></a>1.3.4.1    消息生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责向中间件发送数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Source<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        output.send(MessageBuilder.withPayload(obj).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-2-消息消费者"><a href="#1-3-4-2-消息消费者" class="headerlink" title="1.3.4.2    消息消费者"></a>1.3.4.2    消息消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责向中间件获取数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听binding中的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到消息："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-3-测试"><a href="#1-3-4-3-测试" class="headerlink" title="1.3.4.3    测试"></a>1.3.4.3    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSender messageSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        messageSender.send(<span class="string">"hello 工具类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201116192348109.png" alt="image-20201116175003277"></p><h2 id="1-4-自定义消息通道"><a href="#1-4-自定义消息通道" class="headerlink" title="1.4    自定义消息通道"></a>1.4    自定义消息通道</h2><p>Spring Cloud Stream 内置了两种接口，分别定义了 binding 为 “input” 的输入流，和 “output” 的输出流，而在我们实际使用中，往往是需要定义各种输入输出流。使用方法也很简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的消息通道</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息生产者的配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String MYOUTPUT = <span class="string">"myoutput"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息消费者的配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String MYINPUT = <span class="string">"myinput"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(<span class="string">"myoutput"</span>)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">myoutput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(<span class="string">"myinput"</span>)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">myinput</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个接口中，可以定义无数个输入输出流，可以根据实际业务情况划分。上述的接口，定义了一个订单输入，和订单输出两个 binding。</li><li>使用时，需要在 <code>@EnableBinding</code> 注解中，添加自定义的接口。</li><li>使用 <code>@StreamListener</code> 做监听的时候，需要指定 <code>MyProcessor.MYINPUT</code></li></ul><h3 id="1-4-1-消息生产者"><a href="#1-4-1-消息生产者" class="headerlink" title="1.4.1    消息生产者"></a>1.4.1    消息生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责向中间件发送数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(MyProcessor<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"myoutput"</span>)</span><br><span class="line">    <span class="keyword">private</span> MessageChannel myoutput;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        myoutput.send(MessageBuilder.withPayload(obj).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stream_producer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span> <span class="comment">#指定消息发送的目的地,在rabbitmq中,发送到一个wgy-default的exchange中</span></span><br><span class="line">        <span class="attr">myoutput:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-custom-output</span></span><br><span class="line">      <span class="attr">binders:</span>  <span class="comment">#配置绑定器</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-消息消费者"><a href="#1-4-2-消息消费者" class="headerlink" title="1.4.2    消息消费者"></a>1.4.2    消息消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责向中间件获取数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(MyProcessor<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听binding中的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StreamListener</span>(MyProcessor.MYINPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到消息："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-consumer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span>  <span class="comment">#内置的获取消息的通道 , 从wgy-default中获取消息</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span></span><br><span class="line">        <span class="attr">myinput:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-custom-output</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><h2 id="1-5-消息分组"><a href="#1-5-消息分组" class="headerlink" title="1.5    消息分组"></a>1.5    消息分组</h2><p>通常在生产环境，我们的每个服务都不会以单节点的方式运行在生产环境，当同一个服务启动多个实例的时候，这些实例都会绑定到同一个消息通道的目标主题（Topic）上。默认情况下，当生产者发出一条消息到绑定通道上，这条消息会产生多个副本被每个消费者实例接收和处理，但是有些业务场景之下，我们希望生产者产生的消息只被其中一个实例消费，这个时候我们需要为这些消费者设置消费组来实现这样的功能。</p><p><img src="https://img-blog.csdnimg.cn/20201116192354753.png" alt="image-20201116175027196"></p><p>实现的方式非常简单，我们只需要在服务消费者端设置<code>spring.cloud.stream.bindings.input.group</code> 属性即可，比如我们可以这样实现：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-consumer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span>  <span class="comment">#内置的获取消息的通道 , 从wgy-default中获取消息</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span></span><br><span class="line">        <span class="attr">myinput:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-custom-output</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">group1</span> <span class="comment">#设置消息的组名称（同名组中的多个消费者，只会有一个去消费消息）</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><p>在同一个group中的多个消费者只有一个可以获取到消息并消费</p><h2 id="1-6-消息分区"><a href="#1-6-消息分区" class="headerlink" title="1.6    消息分区"></a>1.6    消息分区</h2><p>有一些场景需要满足, 同一个特征的数据被同一个实例消费, 比如同一个id的传感器监测数据必须被同一个实例统计计算分析, 否则可能无法获取全部的数据。又比如部分异步任务，首次请求启动task，二次请求取消task，此场景就必须保证两次请求至同一实例.</p><p><img src="https://img-blog.csdnimg.cn/20201116192401287.png" alt="image-20201116175204891"></p><h3 id="1-6-1-消息消费者0"><a href="#1-6-1-消息消费者0" class="headerlink" title="1.6.1    消息消费者0"></a>1.6.1    消息消费者0</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-consumer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">instanceCount:</span> <span class="number">2</span>  <span class="comment">#消费者总数</span></span><br><span class="line">      <span class="attr">instanceIndex:</span> <span class="number">0</span>  <span class="comment">#当前消费者的索引</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span>  <span class="comment">#内置的获取消息的通道 , 从wgy-default中获取消息</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span></span><br><span class="line">        <span class="attr">myinput:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-custom-output</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">group1</span> <span class="comment">#设置消息的组名称（同名组中的多个消费者，只会有一个去消费消息）</span></span><br><span class="line">          <span class="attr">consumer:</span></span><br><span class="line">            <span class="attr">partitioned:</span> <span class="literal">true</span>  <span class="comment">#开启分区支持</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><p>从上面的配置中，我们可以看到增加了这三个参数：</p><ul><li><code>spring.cloud.stream.bindings.input.consumer.partitioned</code> ：通过该参数开启消费者分区功能；</li><li><code>spring.cloud.stream.instanceCount</code>：该参数指定了当前消费者的总实例数量；</li><li><code>spring.cloud.stream.instanceIndex</code> ：该参数设置当前实例的索引号，从0开始，最大值为<code>spring.cloud.stream.instanceCount</code> 参数 - 1。我们试验的时候需要启动多个实例，可以通过运行参数来为不同实例设置不同的索引值。</li></ul><h3 id="1-6-2-消息消费者1"><a href="#1-6-2-消息消费者1" class="headerlink" title="1.6.2    消息消费者1"></a>1.6.2    消息消费者1</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-consumer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">instanceCount:</span> <span class="number">2</span>  <span class="comment">#消费者总数</span></span><br><span class="line">      <span class="attr">instanceIndex:</span> <span class="number">1</span>  <span class="comment">#当前消费者的索引</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span>  <span class="comment">#内置的获取消息的通道 , 从wgy-default中获取消息</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span></span><br><span class="line">        <span class="attr">myinput:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-custom-output</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">group1</span> <span class="comment">#设置消息的组名称（同名组中的多个消费者，只会有一个去消费消息）</span></span><br><span class="line">          <span class="attr">consumer:</span></span><br><span class="line">            <span class="attr">partitioned:</span> <span class="literal">true</span>  <span class="comment">#开启分区支持</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><h3 id="1-6-3-消息生产者"><a href="#1-6-3-消息生产者" class="headerlink" title="1.6.3    消息生产者"></a>1.6.3    消息生产者</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stream_producer</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-default</span> <span class="comment">#指定消息发送的目的地,在rabbitmq中,发送到一个wgy-default的exchange中</span></span><br><span class="line">        <span class="attr">myoutput:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">wgy-custom-output</span></span><br><span class="line">          <span class="attr">producer:</span></span><br><span class="line">            <span class="attr">partition-key-expression:</span> <span class="string">payload</span>  <span class="comment">#分区关键字   对象中的id,对象</span></span><br><span class="line">            <span class="attr">partition-count:</span> <span class="number">2</span>  <span class="comment">#分区大小</span></span><br><span class="line">      <span class="attr">binders:</span>  <span class="comment">#配置绑定器</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br></pre></td></tr></table></figure><p>从上面的配置中，我们可以看到增加了这两个参数：</p><ul><li><code>spring.cloud.stream.bindings.output.producer.partitionKeyExpression</code> ：通过该参数指定了分区键的表达式规则，我们可以根据实际的输出消息规则来配置SpEL来生成合适的分区键；</li><li><code>spring.cloud.stream.bindings.output.producer.partitionCount</code> ：该参数指定了消息分区的数量。</li></ul><p>到这里消息分区配置就完成了，我们可以再次启动这两个应用，同时消费者启动多个，但需要注意的是要为消费者指定不同的实例索引号，这样当同一个消息被发给消费组时，我们可以发现只有一个消费实例在接收和处理这些相同的消息。</p><h1 id="2-SpringCloud-Config"><a href="#2-SpringCloud-Config" class="headerlink" title="2.    SpringCloud Config"></a>2.    SpringCloud Config</h1><h2 id="2-1-什么是配置中心"><a href="#2-1-什么是配置中心" class="headerlink" title="2.1    什么是配置中心"></a>2.1    什么是配置中心</h2><h3 id="2-1-1-配置中心概述"><a href="#2-1-1-配置中心概述" class="headerlink" title="2.1.1    配置中心概述"></a>2.1.1    配置中心概述</h3><p>对于传统的单体应用而言，常使用配置文件来管理所有配置，比如SpringBoot的application.yml文件，但是在微服务架构中全部手动修改的话很麻烦而且不易维护。微服务的配置管理一般有以下需求：</p><ul><li>集中配置管理，一个微服务架构中可能有成百上千个微服务，所以集中配置管理是很重要的。</li><li>不同环境不同配置，比如数据源配置在不同环境（开发，生产，测试）中是不同的。</li><li>运行期间可动态调整。例如，可根据各个微服务的负载情况，动态调整数据源连接池大小等</li><li>配置修改后可自动更新。如配置内容发生变化，微服务可以自动更新配置</li></ul><p>综上所述对于微服务架构而言，一套统一的，通用的管理配置机制是不可缺少的总要组成部分。常见的做法就是通过配置服务器进行管理。</p><p><img src="https://img-blog.csdnimg.cn/20201116192407240.png" alt="image-20201116180011234"></p><h3 id="2-1-2-常见配置中心"><a href="#2-1-2-常见配置中心" class="headerlink" title="2.1.2    常见配置中心"></a>2.1.2    常见配置中心</h3><p><strong>Spring Cloud Config</strong>为分布式系统中的外部配置提供服务器和客户端支持。</p><p><strong>Apollo</strong>（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><p><strong>Disconf</strong> 专注于各种「分布式系统配置管理」的「通用组件」和「通用平台」, 提供统一的「配置管理服务」包括 百度、滴滴出行、银联、网易、拉勾网、苏宁易购、顺丰科技 等知名互联网公司正在使用!「disconf」在「2015 年度新增开源软件排名 TOP 100(OSC开源中国提供)」中排名第16强。</p><h2 id="2-2-Spring-Cloud-Config简介"><a href="#2-2-Spring-Cloud-Config简介" class="headerlink" title="2.2    Spring Cloud Config简介"></a>2.2    Spring Cloud Config简介</h2><p>Spring Cloud Config项目是一个解决分布式系统的配置管理方案。它包含了Client和Server两个部分，server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，client通过接口获取数据、并依据此数据初始化自己的应用。</p><p><img src="https://img-blog.csdnimg.cn/20201116192413556.png" alt="image-20201116180030788"></p><p>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持。使用Config Server，您可以为所有环境中的应用程序管理其外部属性。它非常适合spring应用，也可以使用在其他语言的应用上。随着应用程序通过从开发到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。</p><p>Spring Cloud Config服务端特性：</p><ul><li>HTTP，为外部配置提供基于资源的API（键值对，或者等价的YAML内容）</li><li>属性值的加密和解密（对称加密和非对称加密）</li><li>通过使用@EnableConfigServer在Spring boot应用中非常简单的嵌入。</li></ul><p>Config客户端的特性（特指Spring应用）</p><ul><li>绑定Config服务端，并使用远程的属性源初始化Spring环境。</li><li>属性值的加密和解密（对称加密和非对称加密）</li></ul><h2 id="2-3-Spring-Cloud-Config入门"><a href="#2-3-Spring-Cloud-Config入门" class="headerlink" title="2.3    Spring Cloud Config入门"></a>2.3    Spring Cloud Config入门</h2><h3 id="2-3-1-准备工作"><a href="#2-3-1-准备工作" class="headerlink" title="2.3.1    准备工作"></a>2.3.1    准备工作</h3><p>Config Server是一个可横向扩展、集中式的配置服务器，它用于集中管理应用程序各个环境下的配置，默认使用Git存储配置文件内容，也可以使用SVN存储，或者是本地文件存储。这里使用git作为学习的环境</p><p>使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。如果我们希望体验Git飞一般的速度，可以使用国内的Git托管服务——码云（gitee.com）。和GitHub相比，码云也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务。</p><h4 id="2-3-1-1-注册码云"><a href="#2-3-1-1-注册码云" class="headerlink" title="2.3.1.1    注册码云"></a>2.3.1.1    注册码云</h4><p><img src="https://img-blog.csdnimg.cn/20201116192419492.png" alt="image-20201116180427609"></p><h4 id="2-3-1-2-创建项目config-repo"><a href="#2-3-1-2-创建项目config-repo" class="headerlink" title="2.3.1.2    创建项目config-repo"></a>2.3.1.2    创建项目config-repo</h4><h4 id="2-3-1-3-上传配置文件"><a href="#2-3-1-3-上传配置文件" class="headerlink" title="2.3.1.3    上传配置文件"></a>2.3.1.3    上传配置文件</h4><p>将product_service工程的application.yml改名为product-dev.yml后上传</p><p><img src="https://img-blog.csdnimg.cn/20201116192426533.png" alt="image-20201116180502950"></p><p>文件命名规则：</p><ul><li>{application}-{profile}.yml</li><li>{application}-{profile}.properties</li><li>application为应用名称 profile指的开发环境（用于区分开发环境，测试环境、生产环境等）</li></ul><h3 id="2-3-2-搭建服务端程序"><a href="#2-3-2-搭建服务端程序" class="headerlink" title="2.3.2    搭建服务端程序"></a>2.3.2    搭建服务端程序</h3><h4 id="2-3-2-1-引入依赖"><a href="#2-3-2-1-引入依赖" class="headerlink" title="2.3.2.1    引入依赖"></a>2.3.2.1    引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-配置启动类"><a href="#2-3-2-2-配置启动类" class="headerlink" title="2.3.2.2    配置启动类"></a>2.3.2.2    配置启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">//开启配置中心服务端功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-配置application-yml"><a href="#2-3-2-3-配置application-yml" class="headerlink" title="2.3.2.3    配置application.yml"></a>2.3.2.3    配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10000</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/wgy1993/config-repo.git</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-测试"><a href="#2-3-2-4-测试" class="headerlink" title="2.3.2.4    测试"></a>2.3.2.4    测试</h4><p>启动此微服务，可以在浏览器上，通过server端访问到git服务器上的文件</p><p><img src="https://img-blog.csdnimg.cn/20201116192432817.png" alt="image-20201116180824927"></p><h3 id="2-3-3-修改客户端程序"><a href="#2-3-3-修改客户端程序" class="headerlink" title="2.3.3    修改客户端程序"></a>2.3.3    修改客户端程序</h3><h4 id="2-3-3-1-引入依赖"><a href="#2-3-3-1-引入依赖" class="headerlink" title="2.3.3.1    引入依赖"></a>2.3.3.1    引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-删除application-yml"><a href="#2-3-3-2-删除application-yml" class="headerlink" title="2.3.3.2    删除application.yml"></a>2.3.3.2    删除application.yml</h4><p>springboot的应用配置文件，需要通过Config-server获取，这里不再需要。</p><h4 id="2-3-3-3-添加bootstrap-yml"><a href="#2-3-3-3-添加bootstrap-yml" class="headerlink" title="2.3.3.3    添加bootstrap.yml"></a>2.3.3.3    添加bootstrap.yml</h4><p>使用加载级别更高的 <code>bootstrap.yml</code> 文件进行配置。启动应用时会检查此配置文件，在此文件中指定配置中心的服务地址。会自动的拉取所有应用配置并启用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">product</span> <span class="comment">#应用名称,需要对应git中配置文件名称的前半部分</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#git中的分支</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:10000</span> <span class="comment">#config-server的请求地址</span></span><br></pre></td></tr></table></figure><h3 id="2-3-4-手动刷新"><a href="#2-3-4-手动刷新" class="headerlink" title="2.3.4    手动刷新"></a>2.3.4    手动刷新</h3><p>我们已经在客户端取到了配置中心的值，但当我们修改GitHub上面的值时，服务端（Config Server）能实时获取最新的值，但客户端（Config Client）读的是缓存，无法实时获取最新值。SpringCloud已经为我们解决了这个问题，那就是客户端使用post去触发refresh，获取最新数据，需要依赖spring-boot-starter-actuator</p><p><img src="https://img-blog.csdnimg.cn/20201116192440651.png" alt="image-20201116185425476"></p><h4 id="2-3-4-1-引入依赖"><a href="#2-3-4-1-引入依赖" class="headerlink" title="2.3.4.1    引入依赖"></a>2.3.4.1    引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-2-对应的controller类加上-RefreshScope"><a href="#2-3-4-2-对应的controller类加上-RefreshScope" class="headerlink" title="2.3.4.2    对应的controller类加上@RefreshScope"></a>2.3.4.2    对应的controller类加上@RefreshScope</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//开启动态刷新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-4-3-配置文件中开发端点"><a href="#2-3-4-3-配置文件中开发端点" class="headerlink" title="2.3.4.3    配置文件中开发端点"></a>2.3.4.3    配置文件中开发端点</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">product</span> <span class="comment">#应用名称,需要对应git中配置文件名称的前半部分</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#git中的分支</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:10000</span> <span class="comment">#config-server的请求地址</span></span><br><span class="line"><span class="comment">#开启动态刷新的请求路径端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-4-测试"><a href="#2-3-4-4-测试" class="headerlink" title="2.3.4.4    测试"></a>2.3.4.4    测试</h4><p>在postman中访问 <a href="http://localhost:9002/actuator/refresh,使用post提交,查看数据已经发生了变化" target="_blank" rel="noopener">http://localhost:9002/actuator/refresh,使用post提交,查看数据已经发生了变化</a></p><h2 id="2-4-配置中心的高可用"><a href="#2-4-配置中心的高可用" class="headerlink" title="2.4    配置中心的高可用"></a>2.4    配置中心的高可用</h2><p>在之前的代码中，客户端都是直接调用配置中心的server端来获取配置文件信息。这样就存在了一个问题，客户端和服务端的耦合性太高，如果server端要做集群，客户端只能通过原始的方式来路由，server端改变IP地址的时候，客户端也需要修改配置，不符合springcloud服务治理的理念。springcloud提供了这样的解决方案，我们只需要将server端当做一个服务注册到eureka中，client端去eureka中去获取配置中心server端的服务既可。</p><h3 id="2-4-1-配置服务端改造"><a href="#2-4-1-配置服务端改造" class="headerlink" title="2.4.1    配置服务端改造"></a>2.4.1    配置服务端改造</h3><h4 id="2-4-1-1-添加依赖"><a href="#2-4-1-1-添加依赖" class="headerlink" title="2.4.1.1    添加依赖"></a>2.4.1.1    添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-1-2-配置文件"><a href="#2-4-1-2-配置文件" class="headerlink" title="2.4.1.2    配置文件"></a>2.4.1.2    配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10000</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/wgy1993/config-repo.git</span></span><br><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment">#向注册中心中注册服务id #spring.cloud.client.ip-address:获取ip地址</span></span><br><span class="line">    <span class="comment">#lease-renewal-interval-in-seconds: 5 #发送心跳续约间隔</span></span><br><span class="line">    <span class="comment">#lease-expiration-duration-in-seconds: 10 #eureka client发送心跳给server端后，续约到期时间（默认90秒）</span></span><br></pre></td></tr></table></figure><p>这样server端的改造就完成了。先启动eureka注册中心，在启动server端，在浏览器中访问：<a href="http://localhost:9000/" target="_blank" rel="noopener">http://localhost:9000/</a> 就会看到server端已经注册了到注册中心了。</p><h3 id="2-4-2-客户端改造"><a href="#2-4-2-客户端改造" class="headerlink" title="2.4.2    客户端改造"></a>2.4.2    客户端改造</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">product</span> <span class="comment">#应用名称,需要对应git中配置文件名称的前半部分</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#git中的分支</span></span><br><span class="line">      <span class="comment">#通过注册中心获取config-server配置</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启服务发现</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment">#向注册中心中注册服务id #spring.cloud.client.ip-address:获取ip地址</span></span><br><span class="line">    <span class="comment">#lease-renewal-interval-in-seconds: 5 #发送心跳续约间隔</span></span><br><span class="line">    <span class="comment">#lease-expiration-duration-in-seconds: 10 #eureka client发送心跳给server端后，续约到期时间（默认90秒）</span></span><br></pre></td></tr></table></figure><h2 id="2-5-消息总线bus"><a href="#2-5-消息总线bus" class="headerlink" title="2.5    消息总线bus"></a>2.5    消息总线bus</h2><p>在微服务架构中，通常会使用轻量级的消息代理来构建一个共用的消息主题来连接各个微服务实例，它广播的消息会被所有在注册中心的微服务实例监听和消费，也称消息总线。SpringCloud中也有对应的解决方案，SpringCloud Bus 将分布式的节点用轻量的消息代理连接起来，可以很容易搭建消息总线，配合SpringCloud config 实现微服务应用配置信息的动态更新。</p><p><img src="https://img-blog.csdnimg.cn/20201116192448621.png" alt="image-20201116185521475"></p><p>根据此图我们可以看出利用Spring Cloud Bus做配置更新的步骤:</p><ul><li>提交代码触发post请求给bus/refresh</li><li>server端接收到请求并发送给Spring Cloud Bus</li><li>Spring Cloud bus接到消息并通知给其它客户端</li><li>其它客户端接收到通知，请求Server端获取最新配置</li><li>全部客户端均获取到最新的配置</li></ul><h2 id="2-6-消息总线整合配置中心"><a href="#2-6-消息总线整合配置中心" class="headerlink" title="2.6    消息总线整合配置中心"></a>2.6    消息总线整合配置中心</h2><h3 id="2-6-1-引入依赖"><a href="#2-6-1-引入依赖" class="headerlink" title="2.6.1    引入依赖"></a>2.6.1    引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--消息总线的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-2-服务端配置"><a href="#2-6-2-服务端配置" class="headerlink" title="2.6.2    服务端配置"></a>2.6.2    服务端配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10000</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/wgy1993/config-repo.git</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line"><span class="comment">#开启动态刷新的请求路径端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment">#向注册中心中注册服务id #spring.cloud.client.ip-address:获取ip地址</span></span><br><span class="line">    <span class="comment">#lease-renewal-interval-in-seconds: 5 #发送心跳续约间隔</span></span><br><span class="line">    <span class="comment">#lease-expiration-duration-in-seconds: 10 #eureka client发送心跳给server端后，续约到期时间（默认90秒）</span></span><br></pre></td></tr></table></figure><h3 id="2-6-3-微服务客户端配置"><a href="#2-6-3-微服务客户端配置" class="headerlink" title="2.6.3    微服务客户端配置"></a>2.6.3    微服务客户端配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">product</span> <span class="comment">#应用名称,需要对应git中配置文件名称的前半部分</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#git中的分支</span></span><br><span class="line">      <span class="comment">#通过注册中心获取config-server配置</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启服务发现</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment">#向注册中心中注册服务id #spring.cloud.client.ip-address:获取ip地址</span></span><br><span class="line">    <span class="comment">#lease-renewal-interval-in-seconds: 5 #发送心跳续约间隔</span></span><br><span class="line">    <span class="comment">#lease-expiration-duration-in-seconds: 10 #eureka client发送心跳给server端后，续约到期时间（默认90秒）</span></span><br></pre></td></tr></table></figure><p>需要在码云对应的配置文件中添加rabbitmq的配置信息</p><p><img src="https://img-blog.csdnimg.cn/20201116192455897.png" alt="image-20201116190040576"></p><p>重新启动对应的eureka-server ， config-server ， product-service。配置信息刷新后，只需要向配置中心发送对应的请求，即可刷新每个客户端的配置</p><p><a href="http://localhost:10000/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:10000/actuator/bus-refresh</a></p><h1 id="3-开源配置中心Apollo"><a href="#3-开源配置中心Apollo" class="headerlink" title="3.    开源配置中心Apollo"></a>3.    开源配置中心Apollo</h1><p><img src="https://img-blog.csdnimg.cn/20201116192505690.png" alt="image-20201116190457226"></p><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。</p><h2 id="3-1-Apollo概述"><a href="#3-1-Apollo概述" class="headerlink" title="3.1    Apollo概述"></a>3.1    Apollo概述</h2><p>Apollo（阿波罗）是携程框架部门研发的开源配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。</p><p>正是基于配置的特殊性，所以Apollo从设计之初就立志于成为一个有治理能力的配置发布平台，目前提供了以下的特性：</p><ul><li>统一管理不同环境、不同集群的配置<ul><li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。</li><li>同一份代码部署在不同的集群，可以有不同的配置，比如zookeeper的地址等</li><li>通过命名空间（namespace）可以很方便地支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</li></ul></li><li>配置修改实时生效（热发布）<ul><li>用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序</li></ul></li><li>版本发布管理<ul><li>所有的配置发布都有版本概念，从而可以方便地支持配置的回滚</li></ul></li><li>灰度发布<ul><li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例</li></ul></li><li>权限管理、发布审核、操作审计<ul><li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。</li><li>所有的操作都有审计日志，可以方便地追踪问题</li></ul></li><li>客户端配置信息监控<ul><li>可以在界面上方便地看到配置在被哪些实例使用</li></ul></li><li>提供Java和.Net原生客户端<ul><li>提供了Java和.Net的原生客户端，方便应用集成</li><li>支持Spring Placeholder, Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）</li><li>同时提供了Http接口，非Java和.Net应用也可以方便地使用</li></ul></li><li>提供开放平台API<ul><li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。不过Apollo出于通用性考虑，不会对配置的修改做过多限制，只要符合基本的格式就能保存，不会针对不同的配置值进行针对性的校验，如数据库用户名、密码，Redis服务地址等</li><li>对于这类应用配置，Apollo支持应用方通过开放平台API在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制</li></ul></li><li>部署简单<ul><li>配置中心作为基础服务，可用性要求非常高，这就要求Apollo对外部依赖尽可能地少</li><li>目前唯一的外部依赖是MySQL，所以部署非常简单，只要安装好Java和MySQL就可以让Apollo跑起来</li><li>Apollo还提供了打包脚本，一键就可以生成所有需要的安装包，并且支持自定义运行时参数</li></ul></li></ul><h2 id="3-2-Apollo的实现方式"><a href="#3-2-Apollo的实现方式" class="headerlink" title="3.2    Apollo的实现方式"></a>3.2    Apollo的实现方式</h2><p><img src="https://img-blog.csdnimg.cn/20201116192512296.png" alt="image-20201116190911616"></p><p>上图简要描述了Apollo客户端的实现原理：</p><ul><li><p>客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。</p></li><li><p>客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。</p><ul><li>这是一个fallback机制，为了防止推送机制失效导致配置不更新</li><li>客户端定时拉取会上报本地版本，所以一般情况下，对于定时拉取的操作，服务端都会返回304 - Not Modified</li><li>定时频率默认为每5分钟拉取一次，客户端也可以通过在运行时指定System Property: <code>apollo.refreshInterval</code> 来覆盖，单位为分钟。</li></ul></li><li><p>客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中</p></li><li><p>客户端会把从服务端获取到的配置在本地文件系统缓存一份</p><ul><li>在遇到服务不可用，或网络不通的时候，依然能从本地恢复配置</li></ul></li><li><p>应用程序从Apollo客户端获取最新的配置、订阅配置更新通知</p></li></ul><p><img src="https://img-blog.csdnimg.cn/2020111619251916.png" alt="image-20201116191124259"></p><h2 id="3-3-搭建Apollo服务端"><a href="#3-3-搭建Apollo服务端" class="headerlink" title="3.3    搭建Apollo服务端"></a>3.3    搭建Apollo服务端</h2><h3 id="3-3-1-环境要求"><a href="#3-3-1-环境要求" class="headerlink" title="3.3.1    环境要求"></a>3.3.1    环境要求</h3><h4 id="3-3-1-1-Java"><a href="#3-3-1-1-Java" class="headerlink" title="3.3.1.1    Java"></a>3.3.1.1    Java</h4><ul><li>Apollo服务端：1.8+</li><li>Apollo客户端：1.7+</li></ul><p>由于需要同时运行服务端和客户端，所以建议安装Java 1.8+。</p><h4 id="3-3-1-2-MySQL"><a href="#3-3-1-2-MySQL" class="headerlink" title="3.3.1.2    MySQL"></a>3.3.1.2    MySQL</h4><ul><li>版本要求：5.6.5+</li></ul><p>Apollo的表结构对 <code>timestamp</code> 使用了多个default声明，所以需要5.6.5以上版本</p><h3 id="3-3-2-环境搭建"><a href="#3-3-2-环境搭建" class="headerlink" title="3.3.2    环境搭建"></a>3.3.2    环境搭建</h3><h4 id="3-3-2-1-下载Apollo"><a href="#3-3-2-1-下载Apollo" class="headerlink" title="3.3.2.1    下载Apollo"></a>3.3.2.1    下载Apollo</h4><p>通过官网提供的<a href="https://github.com/nobodyiam/apollo-build-scripts" target="_blank" rel="noopener">下载连接</a>下载安装包</p><h4 id="3-3-2-2-配置数据库"><a href="#3-3-2-2-配置数据库" class="headerlink" title="3.3.2.2    配置数据库"></a>3.3.2.2    配置数据库</h4><p>Apollo服务端共需要两个数据库： <code>ApolloPortalDB</code> 和 <code>ApolloConfigDB</code> ，我们把数据库、表的创建和样例数据都分别准备了sql文件，只需要导入数据库即可。</p><blockquote><p>注意：如果你本地已经创建过Apollo数据库，请注意备份数据。我们准备的sql文件会清空Apollo相关的表。</p></blockquote><h4 id="3-3-2-3-配置数据库连接"><a href="#3-3-2-3-配置数据库连接" class="headerlink" title="3.3.2.3    配置数据库连接"></a>3.3.2.3    配置数据库连接</h4><p>Apollo服务端需要知道如何连接到你前面创建的数据库，所以需要编辑demo.sh，修改ApolloPortalDB和ApolloConfigDB相关的数据库连接串信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apollo config db info</span></span><br><span class="line">apollo_config_db_url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8</span><br><span class="line">apollo_config_db_username=root</span><br><span class="line">apollo_config_db_password=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># apollo portal db info</span></span><br><span class="line">apollo_portal_db_url=jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8</span><br><span class="line">apollo_portal_db_username=root</span><br><span class="line">apollo_portal_db_password=root</span><br></pre></td></tr></table></figure><h4 id="3-3-2-4-启动Apollo配置中心"><a href="#3-3-2-4-启动Apollo配置中心" class="headerlink" title="3.3.2.4    启动Apollo配置中心"></a>3.3.2.4    启动Apollo配置中心</h4><p>启动脚本会在本地启动3个服务，分别使用8070, 8080, 8090端口，请确保这3个端口当前没有被使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./demo.sh start</span><br></pre></td></tr></table></figure><p>当看到如下输出后，就说明启动成功了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==== starting service ====</span><br><span class="line">Service logging file is ./service/apollo-service.log</span><br><span class="line">Started [18357]</span><br><span class="line">Waiting <span class="keyword">for</span> config service startup.......</span><br><span class="line">Config service started. You may visit http://localhost:8080 <span class="keyword">for</span> service status now!</span><br><span class="line">Waiting <span class="keyword">for</span> admin service startup.</span><br><span class="line">Admin service started</span><br><span class="line">==== starting portal ====</span><br><span class="line">Portal logging file is ./portal/apollo-portal.log</span><br><span class="line">Started [18618]</span><br><span class="line">Waiting <span class="keyword">for</span> portal startup....</span><br><span class="line">Portal started. You can visit http://localhost:8070 now!</span><br></pre></td></tr></table></figure><h4 id="3-3-2-5-测试"><a href="#3-3-2-5-测试" class="headerlink" title="3.3.2.5    测试"></a>3.3.2.5    测试</h4><p>通过浏览器打开 <a href="http://ip:8070" target="_blank" rel="noopener">http://ip:8070</a> 即可访问Apollo配置中心的前端页面</p><p><img src="https://img-blog.csdnimg.cn/20201116192529427.png" alt="image-20201116191635779"></p><p>输入默认用户名密码apollo/admin即可登录到应用中</p><p><img src="https://img-blog.csdnimg.cn/20201116192537216.png" alt="image-20201116191646056"></p><h2 id="3-4-客户端集成"><a href="#3-4-客户端集成" class="headerlink" title="3.4    客户端集成"></a>3.4    客户端集成</h2><h3 id="3-4-1-引入依赖"><a href="#3-4-1-引入依赖" class="headerlink" title="3.4.1    引入依赖"></a>3.4.1    引入依赖</h3><p>Apollo的客户端jar包已经上传到中央仓库，应用在实际使用时只需要按照如下方式引入即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--apollo客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apollo-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-配置文件"><a href="#3-4-2-配置文件" class="headerlink" title="3.4.2    配置文件"></a>3.4.2    配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-product</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">apollo:</span></span><br><span class="line">  <span class="attr">bootstrap:</span>  <span class="comment">#开启apollo</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="string">http://192.168.142.128:8080</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">product-service</span>  <span class="comment">#指定apollo配置中心中的appid</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201116192543899.png" alt="image-20201116192152664"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Spring-Cloud-Stream&quot;&gt;&lt;a href=&quot;#1-Spring-Cloud-Stream&quot; class=&quot;headerlink&quot; title=&quot;1.    Spring Cloud Stream&quot;&gt;&lt;/a&gt;1.    Spring Cloud Stream&lt;/h1&gt;&lt;p&gt;在实际的企业开发中，消息中间件是至关重要的组件之一。消息中间件主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。不同的中间件其实现方式，内部结构是不一样的。如常见的RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange，kafka有Topic，partitions分区，这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候 &lt;code&gt;springcloud Stream&lt;/code&gt; 给我们提供了一种解耦合的方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringCloud" scheme="https://wgy1993.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(三)</title>
    <link href="https://wgy1993.gitee.io/archives/11ab1e34.html"/>
    <id>https://wgy1993.gitee.io/archives/11ab1e34.html</id>
    <published>2020-11-11T12:59:21.000Z</published>
    <updated>2020-11-11T13:11:05.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-微服务网关概述"><a href="#1-微服务网关概述" class="headerlink" title="1.    微服务网关概述"></a>1.    微服务网关概述</h1><p>在学习完前面的知识后，微服务架构已经初具雏形。但还有一些问题：不同的微服务一般会有不同的网络地址，客户端在访问这些微服务时必须记住几十甚至几百个地址，这对于客户端方来说太复杂也难以维护。如下图：</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20201111201954380.png" alt="image-20201111141155636"></p><p>如果让客户端直接与各个微服务通讯，可能会有很多问题：</p><ul><li>客户端会请求多个不同的服务，需要维护不同的请求地址，增加开发难度</li><li>在某些场景下存在跨域请求的问题</li><li>加大身份认证的难度，每个微服务需要独立认证</li></ul><p>因此，我们需要一个微服务网关，介于客户端与服务器之间的中间层，所有的外部请求都会先经过微服务网关。客户端只需要与网关交互，只知道一个网关地址即可，这样简化了开发还有以下优点：</p><ul><li>易于监控</li><li>易于认证</li><li>减少了客户端与各个微服务之间的交互次数</li></ul><p><img src="https://img-blog.csdnimg.cn/20201111202000711.png" alt="image-20201111141340387"></p><h2 id="1-1-服务网关的概念"><a href="#1-1-服务网关的概念" class="headerlink" title="1.1    服务网关的概念"></a>1.1    服务网关的概念</h2><h3 id="1-1-1-什么是微服务网关"><a href="#1-1-1-什么是微服务网关" class="headerlink" title="1.1.1    什么是微服务网关"></a>1.1.1    什么是微服务网关</h3><p>API网关是一个服务器，是系统对外的唯一入口。API网关封装了系统内部架构，为每个客户端提供一个定制的API。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。</p><h3 id="1-1-2-作用和应用场景"><a href="#1-1-2-作用和应用场景" class="headerlink" title="1.1.2    作用和应用场景"></a>1.1.2    作用和应用场景</h3><p>网关具有的职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。当然，最主要的职责还是与“外界联系”。</p><h2 id="1-2-常见的API网关实现方式"><a href="#1-2-常见的API网关实现方式" class="headerlink" title="1.2    常见的API网关实现方式"></a>1.2    常见的API网关实现方式</h2><ul><li><p>Kong</p><p>基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用。<br>问题：只支持Http协议；二次开发，自由扩展困难；提供管理API，缺乏更易用的管控、配置方式。</p></li><li><p>Zuul</p><p>Netflix开源，功能丰富，使用JAVA开发，易于二次开发；需要运行在web容器中，如Tomcat。<br>问题：缺乏管控，无法动态配置；依赖组件较多；处理Http请求依赖的是Web容器，性能不如Nginx；</p></li><li><p>Traefik</p><p>Go语言开发；轻量易用；提供大多数的功能：服务路由，负载均衡等等；提供WebUI<br>问题：二进制文件部署，二次开发难度大；UI更多的是监控，缺乏配置、管理能力；</p></li><li><p>Spring Cloud Gateway</p><p>SpringCloud提供的网关服务</p></li><li><p>Nginx+lua实现</p><p>使用Nginx的反向代理和负载均衡可实现对api服务器的负载均衡及高可用<br>问题：自注册的问题和网关本身的扩展性</p></li></ul><h2 id="1-3-基于Ngi-inx的网关实现"><a href="#1-3-基于Ngi-inx的网关实现" class="headerlink" title="1.3    基于Ngi inx的网关实现"></a>1.3    基于Ngi inx的网关实现</h2><h3 id="1-3-1-Nginx介绍"><a href="#1-3-1-Nginx介绍" class="headerlink" title="1.3.1    Nginx介绍"></a>1.3.1    Nginx介绍</h3><p><img src="https://img-blog.csdnimg.cn/202011112020150.png" alt="image-20201111141810534"></p><h3 id="1-3-2-正向-反向代理"><a href="#1-3-2-正向-反向代理" class="headerlink" title="1.3.2    正向/反向代理"></a>1.3.2    正向/反向代理</h3><h4 id="1-3-2-1-正向代理"><a href="#1-3-2-1-正向代理" class="headerlink" title="1.3.2.1    正向代理"></a>1.3.2.1    正向代理</h4><p><img src="https://img-blog.csdnimg.cn/20201111202021842.png" alt="image-20201111141855868"></p><p>正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><h4 id="1-3-2-2-反向代理"><a href="#1-3-2-2-反向代理" class="headerlink" title="1.3.2.2    反向代理"></a>1.3.2.2    反向代理</h4><p><img src="https://img-blog.csdnimg.cn/20201111202027572.png" alt="image-20201111141936929"></p><p>多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息</p><p>如果只是单纯的需要一个最基础的具备转发功能的网关，那么使用Ngnix是一个不错的选择。</p><h3 id="1-3-3-准备工作"><a href="#1-3-3-准备工作" class="headerlink" title="1.3.3    准备工作"></a>1.3.3    准备工作</h3><p>启动 <code>shop_service_order</code> 微服务，单独请求地址： <a href="http://127.0.0.1:9002/" target="_blank" rel="noopener">http://127.0.0.1:9002/</a></p><p>启动 <code>shop_service_product</code> 微服务,单独请求地址：<a href="http://127.0.0.1:9001/" target="_blank" rel="noopener">http://127.0.0.1:9001/</a></p><p>安装ngnix。参考：<a href="https://wgy1993.gitee.io/archives/65b69107.html">https://wgy1993.gitee.io/archives/65b69107.html</a></p><p><img src="https://img-blog.csdnimg.cn/20201111202043464.png" alt="image-20201111142207789"></p><h3 id="1-3-4-配置Nginx的请求转发"><a href="#1-3-4-配置Nginx的请求转发" class="headerlink" title="1.3.4    配置Nginx的请求转发"></a>1.3.4    配置Nginx的请求转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#路由到订单服务</span><br><span class="line">location &#x2F;api-order &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:9002&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#路由到商品服务</span><br><span class="line">location &#x2F;api-product &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:9001&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-微服务网关Zuul"><a href="#2-微服务网关Zuul" class="headerlink" title="2.    微服务网关Zuul"></a>2.    微服务网关Zuul</h1><h2 id="2-1-Zuul简介"><a href="#2-1-Zuul简介" class="headerlink" title="2.1    Zuul简介"></a>2.1    Zuul简介</h2><p>ZUUL是Netflix开源的微服务网关，它可以和Eureka、Ribbon、Hystrix等组件配合使用，Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p><ul><li>动态路由：动态将请求路由到不同后端集群</li><li>压力测试：逐渐增加指向集群的流量，以了解性能</li><li>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</li><li>静态响应处理：边缘位置进行响应，避免转发到内部集群</li><li>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求。Spring Cloud对Zuul进行了整合和增强。</li></ul><p>Spring Cloud对Zuul进行了整合和增强</p><h2 id="2-2-搭建Zuul网关服务器"><a href="#2-2-搭建Zuul网关服务器" class="headerlink" title="2.2    搭建Zuul网关服务器"></a>2.2    搭建Zuul网关服务器</h2><h3 id="2-2-1-创建工程导入依赖"><a href="#2-2-1-创建工程导入依赖" class="headerlink" title="2.2.1    创建工程导入依赖"></a>2.2.1    创建工程导入依赖</h3><p>在IDEA中创建ZUUL网关工程 shop_zuul_server ，并添加响应依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-编写启动类"><a href="#2-2-2-编写启动类" class="headerlink" title="2.2.2    编写启动类"></a>2.2.2    编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启zuul网关功能</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-编写配置"><a href="#2-2-3-编写配置" class="headerlink" title="2.2.3    编写配置"></a>2.2.3    编写配置</h3><p>创建配置文件 <code>application.yml</code> ，并添加相应配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-zuul-server</span> <span class="comment">#服务名称</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Zuul-中的路由转发"><a href="#2-3-Zuul-中的路由转发" class="headerlink" title="2.3    Zuul 中的路由转发"></a>2.3    Zuul 中的路由转发</h2><p>最直观的理解：“路由”是指根据请求URL，将请求分配到对应的处理程序。在微服务体系中，Zuul负责接收所有的请求。根据不同的URL匹配规则，将不同的请求转发到不同的微服务处理。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##路由配置</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment">#以商品微服务</span></span><br><span class="line">    <span class="attr">product-service:</span> <span class="comment">#路由id,随便写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/product-service/**</span> <span class="comment">#映射路径  #localhost:8080/product-service/sxxssds</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://127.0.0.1:9001</span> <span class="comment">#映射路径对应的实际微服务url地址</span></span><br><span class="line">      <span class="attr">sensitiveHeaders:</span> <span class="comment">#默认zuul会屏蔽cookie，cookie不会传到下游服务，这里设置为空则取消默认的黑名单，如果设置了具体的头信息则不会传到下游服务</span></span><br></pre></td></tr></table></figure><p>这里将所有请求前缀为/product-service/的请求，转发到 <a href="http://127.0.0.1:9001" target="_blank" rel="noopener">http://127.0.0.1:9001</a></p><p>配置好Zuul路由之后启动服务，在浏览器中输入 <a href="http://localhost:8080/product-service/product/1" target="_blank" rel="noopener">http://localhost:8080/product-service/product/1</a> ，即可访问到商品微服务。</p><p><img src="https://img-blog.csdnimg.cn/20201111202053270.png" alt="image-20201111143535491"></p><h3 id="2-3-1-面向服务的路由"><a href="#2-3-1-面向服务的路由" class="headerlink" title="2.3.1    面向服务的路由"></a>2.3.1    面向服务的路由</h3><p>微服务一般是由几十、上百个服务组成，对于一个URL请求，最终会确认一个服务实例进行处理。如果对每个服务实例手动指定一个唯一访问地址，然后根据URL去手动实现请求匹配，这样做显然就不合理。</p><p>Zuul支持与Eureka整合开发，根据ServiceID自动的从注册中心中获取服务地址并转发请求，这样做的好处不仅可以通过单个端点来访问应用的所有服务，而且在添加或移除服务实例的时候不用修改Zuul的路由配置。</p><h4 id="2-3-1-1-添加Eureka客户端依赖"><a href="#2-3-1-1-添加Eureka客户端依赖" class="headerlink" title="2.3.1.1    添加Eureka客户端依赖"></a>2.3.1.1    添加Eureka客户端依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-2-开启Eureka客户端发现功能"><a href="#2-3-1-2-开启Eureka客户端发现功能" class="headerlink" title="2.3.1.2    开启Eureka客户端发现功能"></a>2.3.1.2    开启Eureka客户端发现功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启zuul网关功能</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="comment">//eureka的服务发现</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-3-添加Eureka配置，获取服务信息"><a href="#2-3-1-3-添加Eureka配置，获取服务信息" class="headerlink" title="2.3.1.3    添加Eureka配置，获取服务信息"></a>2.3.1.3    添加Eureka配置，获取服务信息</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span></span><br><span class="line">      <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-4-修改映射配置，通过服务名称获取"><a href="#2-3-1-4-修改映射配置，通过服务名称获取" class="headerlink" title="2.3.1.4    修改映射配置，通过服务名称获取"></a>2.3.1.4    修改映射配置，通过服务名称获取</h4><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##路由配置</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment">#以商品微服务</span></span><br><span class="line">    <span class="attr">product-service:</span> <span class="comment">#路由id,随便写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/product-service/**</span> <span class="comment">#映射路径</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">service-product</span> <span class="comment">#配置转发的微服务的服务名称</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-简化的路由配置"><a href="#2-3-2-简化的路由配置" class="headerlink" title="2.3.2    简化的路由配置"></a>2.3.2    简化的路由配置</h3><p>在刚才的配置中，我们的规则是这样的：</p><ul><li><code>zuul.routes.&lt;route&gt;.path=/xxx/**</code> ： 来指定映射路径。 <code>&lt;route&gt;</code> 是自定义的路由名</li><li><code>zuul.routes.&lt;route&gt;.serviceId=/product -service</code> ：来指定服务名。</li></ul><p>而大多数情况下，我们的 <code>&lt;route&gt;</code> 路由名称往往和服务名会写成一样的。因此Zuul就提供了一种简化的配置语法： <code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code></p><p>上面的配置可以简化为一条：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##路由配置</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment">#简化路由配置：如果路由id 和 对应的微服务的serviceId一致的话  zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</span></span><br><span class="line">    <span class="attr">service-product:</span> <span class="string">/product-service/**</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-默认的路由规则"><a href="#2-3-3-默认的路由规则" class="headerlink" title="2.3.3    默认的路由规则"></a>2.3.3    默认的路由规则</h3><p>在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则：</p><p>默认情况下，一切服务的映射路径就是服务名本身。</p><p>例如服务名为： <code>service-product</code> ，则默认的映射路径就是： <code>/service-product/**</code></p><h3 id="2-3-4-Zuul加入后的架构"><a href="#2-3-4-Zuul加入后的架构" class="headerlink" title="2.3.4    Zuul加入后的架构"></a>2.3.4    Zuul加入后的架构</h3><p><img src="https://img-blog.csdnimg.cn/20201111202109111.png" alt="image-20201111144452263"></p><h2 id="2-4-Zuul-中的过滤器"><a href="#2-4-Zuul-中的过滤器" class="headerlink" title="2.4    Zuul 中的过滤器"></a>2.4    Zuul 中的过滤器</h2><p>通过之前的学习，我们得知 Zuul它包含了两个核心功能：对请求的<strong>路由</strong>和<strong>过滤</strong>。其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础；而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础。其实，路由功能在真正运行时，它的路由映射和请求转发同样也由几个不同的过滤器完成的。所以，过滤器可以说是Zuul实现API网关功能最为核心的部件，每一个进入Zuul的HTTP请求都会经过一系列的过滤器处理链得到请求响应并返回给客户端。</p><h3 id="2-4-1-ZuulFilter简介"><a href="#2-4-1-ZuulFilter简介" class="headerlink" title="2.4.1    ZuulFilter简介"></a>2.4.1    ZuulFilter简介</h3><p>Zuul 中的过滤器跟我们之前使用的 javax.servlet.Filter 不一样，javax.servlet.Filter 只有一种类型，可以通过配置 urlPatterns 来拦截对应的请求。而 Zuul 中的过滤器总共有 4 种类型，且每种类型都有对应的使用场景。</p><ul><li>PRE：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li><li>ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。</li><li>POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</li><li>ERROR：在其他阶段发生错误时执行该过滤器。</li></ul><p>Zuul提供了自定义过滤器的功能实现起来也十分简单，只需要编写一个类去实现zuul提供的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">// 来自IZuulFilter</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">// IZuulFilter</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ZuulFilter 是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法</li><li>shouldFilter ：返回一个 Boolean 值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</li><li>run ：过滤器的具体业务逻辑。</li><li>filterType ：返回字符串，代表过滤器的类型。包含以下4种：<ul><li>pre ：请求在被路由之前执行</li><li>routing ：在路由请求时调用</li><li>post ：在routing和errror过滤器之后调用</li><li>error ：处理请求时发生错误调用</li></ul></li><li>filterOrder ：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</li></ul><h3 id="2-4-2-生命周期"><a href="#2-4-2-生命周期" class="headerlink" title="2.4.2    生命周期"></a>2.4.2    生命周期</h3><p><img src="https://img-blog.csdnimg.cn/20201111202115940.png" alt="image-20201111145330080"></p><ul><li>正常流程：<ul><li>请求到达首先会经过 pre类型过滤器，而后到达routing类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。</li></ul></li><li>异常流程：<ul><li>整个过程中， pre或者routing过滤器出现异常，都会直接进入error过滤器，再error处理完毕后，会将请求交给POST过滤器，最后返回给用户。</li><li>如果是 error过滤器自己出现异常，最终也会进入POST过滤器，而后返回。</li><li>如果是 POST过滤器出现异常，会跳转到error过滤器，但是与pre和routing不同的时，请求不会再到达POST过滤器了。</li></ul></li><li>不同过滤器的场景：<ul><li>请求鉴权：一般放在 pre类型，如果发现没有访问权限，直接就拦截了</li><li>异常处理：一般会在 error类型和post类型过滤器中结合来处理。</li><li>服务调用时长统计： pre和post结合使用。</li></ul></li></ul><p>所有内置过滤器列表：</p><p><img src="https://img-blog.csdnimg.cn/20201111202125224.png" alt="image-20201111145609806"></p><h3 id="2-4-3-自定义过滤器"><a href="#2-4-3-自定义过滤器" class="headerlink" title="2.4.3    自定义过滤器"></a>2.4.3    自定义过滤器</h3><p>接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。</p><p><img src="https://img-blog.csdnimg.cn/20201111202131483.png" alt="image-20201111151615261"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的zuul过滤器</span></span><br><span class="line"><span class="comment"> *      继承抽象父类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义过滤器类型</span></span><br><span class="line"><span class="comment">     *      pre</span></span><br><span class="line"><span class="comment">     *      routing</span></span><br><span class="line"><span class="comment">     *      post</span></span><br><span class="line"><span class="comment">     *      error</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定过滤器的执行顺序</span></span><br><span class="line"><span class="comment">     *      返回值越小,执行顺序越高</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前过滤器是否生效</span></span><br><span class="line"><span class="comment">     *      true : 使用此过滤器</span></span><br><span class="line"><span class="comment">     *      false : 不使用此过滤器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定过滤器中的业务逻辑</span></span><br><span class="line"><span class="comment">     * 身份认证:</span></span><br><span class="line"><span class="comment">     *      1.所有的请求需要携带一个参数 : access-token</span></span><br><span class="line"><span class="comment">     *      2.获取request请求</span></span><br><span class="line"><span class="comment">     *      3.通过request获取参数access-token</span></span><br><span class="line"><span class="comment">     *      4.判断token是否为空</span></span><br><span class="line"><span class="comment">     *          4.1 token==null : 身份验证失败</span></span><br><span class="line"><span class="comment">     *          4.2 token!=null : 执行后续操作</span></span><br><span class="line"><span class="comment">     * 在zuul网关中,通过RequestContext的上下文对象,可以获取对象request对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("执行了过滤器");</span></span><br><span class="line">        <span class="comment">//1.获取zuul提供的上下文对象RequestContext</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">//2.从RequestContext中获取request</span></span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">//3.获取请求参数access-token</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"access-token"</span>);</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4.1 如果token==null ,拦截请求,返回认证失败</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//返回401状态码</span></span><br><span class="line">            ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.2 如果token!=null ,继续后续操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RequestContext ：用于在过滤器之间传递消息。它的数据保存在每个请求的ThreadLocal中。它用于存储请求路由到哪里、错误、HttpServletRequest、HttpServletResponse都存储在RequestContext中。RequestContext扩展了ConcurrentHashMap，所以，任何数据都可以存储在上下文中</p><h2 id="2-5-服务网关Zuul的核心源码解析"><a href="#2-5-服务网关Zuul的核心源码解析" class="headerlink" title="2.5    服务网关Zuul的核心源码解析"></a>2.5    服务网关Zuul的核心源码解析</h2><p><img src="https://img-blog.csdnimg.cn/20201111202137576.png" alt="image-20201111151648963"></p><p>在 Zuul中， 整个请求的过程是这样的，首先将请求给zuulservlet处理，zuulservlet中有一个zuulRunner对象，该对象中初始化了RequestContext：作为存储整个请求的一些数据，并被所有的zuulfilter共享。zuulRunner中还有 FilterProcessor，FilterProcessor作为执行所有的zuulfilter的管理器。FilterProcessor从filterloader 中获取zuulfilter，而zuulfilter是被filterFileManager所加载，并支持groovy热加载，采用了轮询的方式热加载。有了这些filter之后，zuulservelet首先执行的Pre类型的过滤器，再执行 route类型的过滤器，最后执行的是post 类型的过滤器，如果在执行这些过滤器有错误的时候则会执行error类型的过滤器。执行完这些过滤器，最终将请求的结果返回给客户端。</p><p><img src="https://img-blog.csdnimg.cn/20201111202143191.png" alt="image-20201111151828688"></p><h2 id="2-6-Zuul网关存在的问题"><a href="#2-6-Zuul网关存在的问题" class="headerlink" title="2.6    Zuul网关存在的问题"></a>2.6    Zuul网关存在的问题</h2><p>在实际使用中我们会发现直接使用Zuul会存在诸多问题，包括：</p><ul><li>性能问题<ul><li>Zuul1x 版本本质上就是一个同步Servlet，采用多线程阻塞模型进行请求转发。简单讲，每来一个请求，Servlet容器要为该请求分配一个线程专门负责处理这个请求，直到响应返回客户端这个线程才会被释放返回容器线程池。如果后台服务调用比较耗时，那么这个线程就会被阻塞，阻塞期间线程资源被占用，不能干其它事情。我们知道Servlet容器线程池的大小是有限制的，当前端请求量大，而后台慢服务比较多时，很容易耗尽容器线程池内的线程，造成容器无法接受新的请求。</li></ul></li><li>不支持任何长连接，如 websocket</li></ul><h2 id="2-7-Zuul网关的替换方案"><a href="#2-7-Zuul网关的替换方案" class="headerlink" title="2.7    Zuul网关的替换方案"></a>2.7    Zuul网关的替换方案</h2><ul><li>Zuul2.x版本</li><li>SpringCloud Gateway</li></ul><h1 id="3-微服务网关GateWay"><a href="#3-微服务网关GateWay" class="headerlink" title="3.    微服务网关GateWay"></a>3.    微服务网关GateWay</h1><p>Zuul 1.x 是一个基于阻塞 IO 的 API Gateway 以及 Servlet；直到 2018 年 5 月，Zuul 2.x（基于Netty，也是非阻塞的，支持长连接）才发布，但 Spring Cloud 暂时还没有整合计划。Spring Cloud Gateway 比 Zuul 1.x 系列的性能和功能整体要好。</p><h2 id="3-1-Gateway简介"><a href="#3-1-Gateway简介" class="headerlink" title="3.1    Gateway简介"></a>3.1    Gateway简介</h2><h3 id="3-1-1-简介"><a href="#3-1-1-简介" class="headerlink" title="3.1.1    简介"></a>3.1.1    简介</h3><p>Spring Cloud Gateway 是 Spring 官方基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，旨在为微服务架构提供一种简单而有效的统一的 API 路由管理方式，统一访问接口。Spring Cloud Gateway 作为 Spring Cloud 生态系中的网关，目标是替代 Netflix ZUUL，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。它是基于Nttey的响应式开发模式。</p><table><thead><tr><th>组件</th><th>RPS(request per second)</th></tr></thead><tbody><tr><td>Spring Cloud Gateway</td><td>Requests/sec: 32213.38</td></tr><tr><td>Zuul1X</td><td>Requests/sec: 20800.13</td></tr></tbody></table><p>上表为Spring Cloud Gateway与Zuul的性能对比，从结果可知，Spring Cloud Gateway的RPS是Zuul的1.6倍</p><h3 id="3-1-2-核心概念"><a href="#3-1-2-核心概念" class="headerlink" title="3.1.2    核心概念"></a>3.1.2    核心概念</h3><p><img src="https://img-blog.csdnimg.cn/2020111120215016.png" alt="image-20201111155644753"></p><ul><li>路由（route） 路由是网关最基础的部分，路由信息由一个ID、一个目的URL、一组断言工厂和一组Filter组成。如果断言为真，则说明请求URL和配置的路由匹配。</li><li>断言（predicates） Java8中的断言函数，Spring Cloud Gateway中的断言函数输入类型是Spring5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自Http Request中的任何信息，比如请求头和参数等。</li><li>过滤器（filter） 一个标准的Spring webFilter，Spring Cloud Gateway中的Filter分为两种类型，分别是Gateway Filter和Global Filter。过滤器Filter可以对请求和响应进行处理。</li></ul><h2 id="3-2-入门案例"><a href="#3-2-入门案例" class="headerlink" title="3.2    入门案例"></a>3.2    入门案例</h2><h3 id="3-2-1-入门案例"><a href="#3-2-1-入门案例" class="headerlink" title="3.2.1    入门案例"></a>3.2.1    入门案例</h3><h4 id="3-2-1-1-创建工程导入依赖"><a href="#3-2-1-1-创建工程导入依赖" class="headerlink" title="3.2.1.1    创建工程导入依赖"></a>3.2.1.1    创建工程导入依赖</h4><p>在项目中添加新的模块 <code>shop_gateway_server</code> ，并导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    SpringCloudGateway的内部是通过netty+webflux实现</span></span><br><span class="line"><span class="comment">    webflux实现和SpringMVC存在冲突</span></span><br><span class="line"><span class="comment">    引入的限流组件是hystrix。redis底层不再使用jedis，而是lettuce。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-1-2-配置启动类"><a href="#3-2-1-2-配置启动类" class="headerlink" title="3.2.1.2    配置启动类"></a>3.2.1.2    配置启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-1-3-编写配置文件"><a href="#3-2-1-3-编写配置文件" class="headerlink" title="3.2.1.3    编写配置文件"></a>3.2.1.3    编写配置文件</h4><p>创建 <code>application.yml</code> 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>  <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span>  <span class="comment">#服务名称</span></span><br><span class="line">  <span class="comment">#配置SpringCloudGateway的路由</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#配置路由 : 路由id,路由到微服务的uri,断言(判断条件)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product-service</span>  <span class="comment">#保持唯一</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://127.0.0.1:9001</span>  <span class="comment">#目标微服务请求地址</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/product/**</span>  <span class="comment">#路由条件  path : 路由匹配条件</span></span><br></pre></td></tr></table></figure><p>上面这段配置的意思是，配置了一个 id 为 <code>product-service</code> 的路由规则，当访问网关请求地址以 <code>product</code> 开头时，会自动转发到地址： <a href="http://127.0.0.1:9001/" target="_blank" rel="noopener">http://127.0.0.1:9001/</a> 。配置完成启动项目即可在浏览器访问进行测试，当我们访问地址 <a href="http://localhost:8080/product/1" target="_blank" rel="noopener">http://localhost:8080/product/1</a> 时会展示页面展示如下：</p><p><img src="https://img-blog.csdnimg.cn/20201111202158220.png" alt="image-20201111160546278"></p><h3 id="3-2-2-路由规则"><a href="#3-2-2-路由规则" class="headerlink" title="3.2.2    路由规则"></a>3.2.2    路由规则</h3><p>Spring Cloud Gateway 的功能很强大，前面我们只是使用了 predicates 进行了简单的条件匹配，其实Spring Cloud Gataway 帮我们内置了很多 Predicates 功能。在 Spring Cloud Gateway 中 Spring 利用Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由。</p><p><img src="https://img-blog.csdnimg.cn/20201111202208530.png" alt="image-20201111160650291"></p><p><strong>示例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求时间满足在配置时间之后</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=xxxxx</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#请求时间满足在配置时间之前</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">before_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Before=xxxxx</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#请求时间满足在配置时间之间</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">between_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Between=xxxx,xxxx</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#请求指定Cookie正则匹配指定值,此predicate匹配给定名称(chocolate)和正则表达式(ch.p)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=chocolate,ch.p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#请求指定Header正则匹配指定值,header名称匹配X-Request-Id,且正则表达式匹配\d+ </span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,\d+</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#请求Host匹配指定值,匹配下面Host主机列表,**代表可变参数</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#请求Method匹配配置的method,匹配的是请求的HTTP方法</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#请求路径正则匹配指定值,&#123;segment&#125;为可变参数</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">path_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/foo/&#123;segment&#125;,/bar/&#123;segment&#125;</span>        </span><br><span class="line">        </span><br><span class="line"><span class="comment">#请求查询参数正则匹配指定值,将请求的参数param(baz)进行匹配，也可以进行regexp正则表达式匹配 (参数包含foo,并且foo的值匹配ba.)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=baz</span> <span class="string">或</span> <span class="string">Query=foo,ba.</span>   </span><br><span class="line">  </span><br><span class="line"><span class="comment">#请求远程地址正则匹配指定值,将匹配192.168.1.1~192.168.1.254之间的ip地址，其中24为子网掩码位数即255.255.255.0</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">remoteaddr_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://xxxx.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-动态路由"><a href="#3-2-3-动态路由" class="headerlink" title="3.2.3    动态路由"></a>3.2.3    动态路由</h3><p>和zuul网关类似，在SpringCloud GateWay中也支持动态路由：即自动的从注册中心中获取服务列表并访问。</p><h4 id="3-2-3-1-添加注册中心依赖"><a href="#3-2-3-1-添加注册中心依赖" class="headerlink" title="3.2.3.1    添加注册中心依赖"></a>3.2.3.1    添加注册中心依赖</h4><p>在工程的pom文件中添加注册中心的客户端依赖（这里以Eureka为例）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-3-2-配置动态路由"><a href="#3-2-3-2-配置动态路由" class="headerlink" title="3.2.3.2    配置动态路由"></a>3.2.3.2    配置动态路由</h4><p>修改 <code>application.yml</code> 配置文件，添加eureka注册中心的相关配置，并修改访问映射的URL为服务名称</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>  <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span>  <span class="comment">#服务名称</span></span><br><span class="line">  <span class="comment">#配置SpringCloudGateway的路由</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#配置路由 : 路由id,路由到微服务的uri,断言(判断条件)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product-service</span>  <span class="comment">#保持唯一</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://service-product</span>    <span class="comment">#lb:// 根据微服务名称从注册中心中拉取服务请求路径</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/product/**</span>  <span class="comment">#路由条件  path : 路由匹配条件</span></span><br><span class="line"><span class="comment">#eureka注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span></span><br><span class="line">      <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-重写转发路径"><a href="#3-2-4-重写转发路径" class="headerlink" title="3.2.4    重写转发路径"></a>3.2.4    重写转发路径</h3><p>在SpringCloud Gateway中，路由转发是直接将匹配的路由path直接拼接到映射路径（URI）之后，那么在微服务开发中往往没有那么便利。这里就可以通过RewritePath机制来进行路径重写。</p><h4 id="3-2-4-1-案例改造"><a href="#3-2-4-1-案例改造" class="headerlink" title="3.2.4.1    案例改造"></a>3.2.4.1    案例改造</h4><p>修改 <code>application.yml</code> ，将匹配路径改为 <code>/product -service/**</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span>  <span class="comment">#服务名称</span></span><br><span class="line">  <span class="comment">#配置SpringCloudGateway的路由</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#配置路由 : 路由id,路由到微服务的uri,断言(判断条件)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product-service</span>  <span class="comment">#保持唯一</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://service-product</span>    <span class="comment">#lb:// 根据微服务名称从注册中心中拉取服务请求路径</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/product-service/**</span>  <span class="comment">#路由条件  path : 路由匹配条件</span></span><br></pre></td></tr></table></figure><p>重新启动网关，我们在浏览器访问 <a href="http://127.0.0.1:8080/product-service/product/1，会抛出404。这是由于路由转发规则默认转发到商品微服务（" target="_blank" rel="noopener">http://127.0.0.1:8080/product-service/product/1，会抛出404。这是由于路由转发规则默认转发到商品微服务（</a> <a href="http://127.0.0.1:9001/product-service/product/1" target="_blank" rel="noopener">http://127.0.0.1:9001/product-service/product/1</a> ）路径上，而商品微服务又没有 product -service 对应的映射配置。</p><h4 id="3-2-4-2-添加RewritePath重写转发路径"><a href="#3-2-4-2-添加RewritePath重写转发路径" class="headerlink" title="3.2.4.2    添加RewritePath重写转发路径"></a>3.2.4.2    添加RewritePath重写转发路径</h4><p>修改 <code>application.yml</code> ，添加重写规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span>  <span class="comment">#服务名称</span></span><br><span class="line">  <span class="comment">#配置SpringCloudGateway的路由</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#配置路由 : 路由id,路由到微服务的uri,断言(判断条件)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product-service</span>  <span class="comment">#保持唯一</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://service-product</span>    <span class="comment">#lb:// 根据微服务名称从注册中心中拉取服务请求路径</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/product-service/**</span> <span class="comment">#将当前请求转发到   http://127.0.0.1:9001/product/1</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="comment">#配置路由过滤器   http://localhost:8080/product-service/product/1    --&gt;   http://127.0.0.1:9001/product/1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/product-service/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span> <span class="comment"># 路径重写的过滤器  ,在yml中 $ 写为 $\</span></span><br></pre></td></tr></table></figure><p>通过 RewritePath配置重写转发的url，将/product-service/(?.*)，重写为{segment}，然后转发到商品微服务。比如在网页上请求 <a href="http://localhost:8080/product-service/product，此时会将请求转发到http://127.0.0.1:9001/product/1（" target="_blank" rel="noopener">http://localhost:8080/product-service/product，此时会将请求转发到http://127.0.0.1:9001/product/1（</a> <code>值得注意的是在 yml文档中 $ 要写成 $\</code> ）</p><h4 id="3-2-4-3-微服务名路由转发"><a href="#3-2-4-3-微服务名路由转发" class="headerlink" title="3.2.4.3    微服务名路由转发"></a>3.2.4.3    微服务名路由转发</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment">#配置自动的根据微服务名称进行路由转发    http://localhost:8080/service-product/product/1</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启根据服务名称自动转发</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment">#微服务名称已小写形式呈现</span></span><br></pre></td></tr></table></figure><h2 id="3-3-过滤器"><a href="#3-3-过滤器" class="headerlink" title="3.3    过滤器"></a>3.3    过滤器</h2><p>Spring Cloud Gateway除了具备请求路由功能之外，也支持对请求的过滤。通过Zuul网关类似，也是通过过滤器的形式来实现的。那么接下来我们一起来研究一下Gateway中的过滤器</p><h3 id="3-3-1-过滤器基础"><a href="#3-3-1-过滤器基础" class="headerlink" title="3.3.1    过滤器基础"></a>3.3.1    过滤器基础</h3><h4 id="3-3-1-1-过滤器的生命周期"><a href="#3-3-1-1-过滤器的生命周期" class="headerlink" title="3.3.1.1    过滤器的生命周期"></a>3.3.1.1    过滤器的生命周期</h4><p>Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre” 和 “post”。</p><ul><li>PRE ： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li><li>POST ：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201111202214179.png" alt="image-20201111171608201"></p><h4 id="3-3-1-2-过滤器类型"><a href="#3-3-1-2-过滤器类型" class="headerlink" title="3.3.1.2    过滤器类型"></a>3.3.1.2    过滤器类型</h4><p>Spring Cloud Gateway 的 Filter 从作用范围可分为另外两种GatewayFilter 与 GlobalFilter。</p><ul><li>GatewayFilter ：应用到单个路由或者一个分组的路由上。</li><li>GlobalFilter ：应用到所有的路由上。</li></ul><h3 id="3-3-2-局部过滤器"><a href="#3-3-2-局部过滤器" class="headerlink" title="3.3.2    局部过滤器"></a>3.3.2    局部过滤器</h3><p>局部过滤器（GatewayFilter），是针对单个路由的过滤器。可以对访问的URL过滤，进行切面处理。在Spring Cloud Gateway中通过GatewayFilter的形式内置了很多不同类型的局部过滤器。这里简单将Spring Cloud Gateway内置的所有过滤器工厂整理成了一张表格，虽然不是很详细，但能作为速览使用。如下：</p><table><thead><tr><th>过滤器工厂</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>为原始请求添加Header</td><td>Header的名称及值</td></tr><tr><td>AddRequestParameter</td><td>为原始请求添加请求参数</td><td>参数名称及值</td></tr><tr><td>AddResponseHeader</td><td>为原始响应添加Header</td><td>Header的名称及值</td></tr><tr><td>DedupeResponseHeader</td><td>剔除响应头中重复的值</td><td>需要去重的Header名称及去重策略</td></tr><tr><td>Hystrix</td><td>为路由引入Hystrix的断路器保护</td><td>HystrixCommand 的名称</td></tr><tr><td>FallbackHeaders</td><td>为fallbackUri的请求头中添加具体的异常信息</td><td>Header的名称</td></tr><tr><td>PrefixPath</td><td>为原始请求路径添加前缀</td><td>前缀路径</td></tr><tr><td>PreserveHostHeader</td><td>为请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host</td><td>无</td></tr><tr><td>RequestRateLimiter</td><td>用于对请求限流，限流算法为令牌桶</td><td>keyResolver、<br/>rateLimiter、<br/>statusCode、<br/>denyEmptyKey、<br/>emptyKeyStatus</td></tr><tr><td>RedirectTo</td><td>将原始请求重定向到指定的URL</td><td>http状态码及重定向的url</td></tr><tr><td>RemoveHopByHopHeadersFilter</td><td>为原始请求删除IETF组织规定的一系列Header</td><td>默认就会启用，可以通过配置指定仅删除哪些Header</td></tr><tr><td>RemoveRequestHeader</td><td>为原始请求删除某个Header</td><td>Header名称</td></tr><tr><td>RemoveResponseHeader</td><td>为原始响应删除某个Header</td><td>Header名称</td></tr><tr><td>RewritePath</td><td>重写原始的请求路径</td><td>原始路径正则表达式以及重写后路径的正则表达式</td></tr><tr><td>RewriteResponseHeader</td><td>重写原始响应中的某个Header</td><td>Header名称，值的正则表达式，重写后的值</td></tr><tr><td>SaveSession</td><td>在转发请求之前，强制执行WebSession::save 操作</td><td>无</td></tr><tr><td>secureHeaders</td><td>为原始响应添加一系列起安全作用的响应头</td><td>无，支持修改这些安全响应头的值</td></tr><tr><td>SetPath</td><td>修改原始的请求路径</td><td>修改后的路径</td></tr><tr><td>SetResponseHeader</td><td>修改原始响应中某个Header的值</td><td>Header名称，修改后的值</td></tr><tr><td>SetStatus</td><td>修改原始响应的状态码</td><td>HTTP 状态码，可以是数字，也可以是字符串</td></tr><tr><td>StripPrefix</td><td>用于截断原始请求的路径</td><td>使用数字表示要截断的路径的数量</td></tr><tr><td>Retry</td><td>针对不同的响应进行重试</td><td>retries、statuses、methods、series</td></tr><tr><td>RequestSize</td><td>设置允许接收最大请求包的大小。如果请求包大小超过设置的值，则返回  413 Payload Too Large</td><td>请求包大小，单位为字节，默认值为5M</td></tr><tr><td>ModifyRequestBody</td><td>在转发请求之前修改原始请求体内容</td><td>修改后的请求体内容</td></tr><tr><td>ModifyResponseBody</td><td>修改原始响应体的内容</td><td>修改后的响应体内容</td></tr></tbody></table><p>每个过滤器工厂都对应一个实现类，并且这些类的名称必须以 <code>GatewayFilterFactory</code> 结尾，这是Spring Cloud Gateway的一个约定，例如 <code>AddRequestHeader</code> 对应的实现类为<code>AddRequestHeaderGatewayFilterFactory</code> 。对于这些过滤器的使用方式可以参考官方文档</p><h3 id="3-3-3-全局过滤器"><a href="#3-3-3-全局过滤器" class="headerlink" title="3.3.3    全局过滤器"></a>3.3.3    全局过滤器</h3><p>全局过滤器（GlobalFilter）作用于所有路由，Spring Cloud Gateway 定义了Global Filter接口，用户可以自定义实现自己的Global Filter。通过全局过滤器可以实现对权限的统一校验，安全性验证等功能，并且全局过滤器也是程序员使用比较多的过滤器。</p><p>Spring Cloud Gateway内部也是通过一系列的内置全局过滤器对整个路由转发进行处理如下：</p><p><img src="https://img-blog.csdnimg.cn/20201111202219950.png" alt="image-20201111172752293"></p><h2 id="3-4-统一鉴权"><a href="#3-4-统一鉴权" class="headerlink" title="3.4    统一鉴权"></a>3.4    统一鉴权</h2><p>内置的过滤器已经可以完成大部分的功能，但是对于企业开发的一些业务功能处理，还是需要我们自己编写过滤器来实现的，那么我们一起通过代码的形式自定义一个过滤器，去完成统一的权限校验。</p><h3 id="3-4-1-鉴权逻辑"><a href="#3-4-1-鉴权逻辑" class="headerlink" title="3.4.1    鉴权逻辑"></a>3.4.1    鉴权逻辑</h3><p>开发中的鉴权逻辑：</p><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成 token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的 token</li><li>服务端对 token进行解密，判断是否有效。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201111202225798.png" alt="image-20201111173406041"></p><p>如上图，对于验证用户是否已经登录鉴权的过程可以在网关层统一检验。检验的标准就是请求中是否携带token凭证以及token的正确性。</p><h3 id="3-4-2-代码实现"><a href="#3-4-2-代码实现" class="headerlink" title="3.4.2    代码实现"></a>3.4.2    代码实现</h3><p>下面的我们自定义一个GlobalFilter，去校验所有请求的请求参数中是否包含“token”，如何不包含请求参数“token”则不转发路由，否则执行正常的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个全局过滤器</span></span><br><span class="line"><span class="comment"> *      实现 GlobalFilter , Ordered接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行过滤器中的业务逻辑</span></span><br><span class="line"><span class="comment">     *      对请求参数中的access-token进行判断</span></span><br><span class="line"><span class="comment">     *          如果存在此参数:代表已经认证成功</span></span><br><span class="line"><span class="comment">     *          如果不存在此参数 : 认证失败</span></span><br><span class="line"><span class="comment">     * ServerWebExchange : 相当于请求和响应的上下文(zuul中的RequestContext)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了自定义的全局过滤器"</span>);</span><br><span class="line">        <span class="comment">//1.获取请求参数access-token</span></span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(<span class="string">"access-token"</span>);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//3.如果不存在 : 认证失败</span></span><br><span class="line">            System.out.println(<span class="string">"没有登录"</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();    <span class="comment">//请求结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.如果存在,继续执行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);  <span class="comment">//继续向下执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定过滤器的执行顺序 , 返回值越小,执行优先级越高</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义全局过滤器需要实现 GlobalFilter和Ordered接口。</li><li>在 filter方法中完成过滤器的逻辑判断处理</li><li>在 getOrder方法指定此过滤器的优先级，返回值越大级别越低</li><li>ServerWebExchange 就相当于当前请求和响应的上下文，存放着重要的请求-响应属性、请求实例和响应实例等等。一个请求中的request，response都可以通过 ServerWebExchange 获取</li><li>调用 chain.filter 继续向下游执行</li></ul><h2 id="3-5-网关限流"><a href="#3-5-网关限流" class="headerlink" title="3.5    网关限流"></a>3.5    网关限流</h2><h3 id="3-5-1-常见的限流算法"><a href="#3-5-1-常见的限流算法" class="headerlink" title="3.5.1    常见的限流算法"></a>3.5.1    常见的限流算法</h3><h4 id="3-5-1-1-计数器"><a href="#3-5-1-1-计数器" class="headerlink" title="3.5.1.1    计数器"></a>3.5.1.1    计数器</h4><p>计数器限流算法是最简单的一种限流实现方式。其本质是通过维护一个单位时间内的计数器，每次请求计数器加1，当单位时间内计数器累加到大于设定的阈值，则之后的请求都被拒绝，直到单位时间已经过去，再将计数器重置为零</p><p><img src="https://img-blog.csdnimg.cn/2020111120223212.png" alt="image-20201111173856659"></p><h4 id="3-5-1-2-漏桶算法"><a href="#3-5-1-2-漏桶算法" class="headerlink" title="3.5.1.2    漏桶算法"></a>3.5.1.2    漏桶算法</h4><p>漏桶算法可以很好地限制容量池的大小，从而防止流量暴增。漏桶可以看作是一个带有常量服务时间的单服务器队列，如果漏桶（包缓存）溢出，那么数据包会被丢弃。 在网络中，漏桶算法可以控制端口的流量输出速率，平滑网络上的突发流量，实现流量整形，从而为网络提供一个稳定的流量。</p><p><img src="https://img-blog.csdnimg.cn/20201111202240563.png" alt="image-20201111173937574"></p><p>为了更好的控制流量，漏桶算法需要通过两个变量进行控制：一个是桶的大小，支持流量突发增多时可以存多少的水（burst），另一个是水桶漏洞的大小（rate）。</p><h4 id="3-5-1-3-令牌桶算法"><a href="#3-5-1-3-令牌桶算法" class="headerlink" title="3.5.1.3    令牌桶算法"></a>3.5.1.3    令牌桶算法</h4><p>令牌桶算法是对漏桶算法的一种改进，桶算法能够限制请求调用的速率，而令牌桶算法能够在限制调用的平均速率的同时还允许一定程度的突发调用。在令牌桶算法中，存在一个桶，用来存放固定数量的令牌。算法中存在一种机制，以一定的速率往桶中放令牌。每次请求调用需要先获取令牌，只有拿到令牌，才有机会继续执行，否则选择选择等待可用的令牌、或者直接拒绝。放令牌这个动作是持续不断的进行，如果桶中令牌数达到上限，就丢弃令牌，所以就存在这种情况，桶中一直有大量的可用令牌，这时进来的请求就可以直接拿到令牌执行，比如设置qps为100，那么限流器初始化完成一秒后，桶中就已经有100个令牌了，这时服务还没完全启动好，等启动完成对外提供服务时，该限流器可以抵挡瞬时的100个请求。所以，只有桶中没有令牌时，请求才会进行等待，最后相当于以一定的速率执行。</p><p><img src="https://img-blog.csdnimg.cn/2020111120224762.png" alt="image-20201111174318026"></p><h3 id="3-5-2-基于Filter的限流"><a href="#3-5-2-基于Filter的限流" class="headerlink" title="3.5.2    基于Filter的限流"></a>3.5.2    基于Filter的限流</h3><p>SpringCloudGateway官方就提供了基于令牌桶的限流支持。基于其内置的过滤器工厂<code>RequestRateLimiterGatewayFilterFactory</code> 实现。在过滤器工厂中是通过Redis和lua脚本结合的方式进行流量控制。</p><h4 id="3-5-2-1-环境搭建"><a href="#3-5-2-1-环境搭建" class="headerlink" title="3.5.2.1    环境搭建"></a>3.5.2.1    环境搭建</h4><p><strong>导入 redis的依赖</strong></p><p>首先在工程的pom文件中引入gateway的起步依赖和redis的reactive依赖，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--监控依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--redis的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>准备 redis</strong></p><p>参考：<a href="https://wgy1993.gitee.io/archives/bae4ff13.html">https://wgy1993.gitee.io/archives/bae4ff13.html</a></p><h4 id="3-5-2-2-修改application-yml配置文件"><a href="#3-5-2-2-修改application-yml配置文件" class="headerlink" title="3.5.2.2    修改application.yml配置文件"></a>3.5.2.2    修改application.yml配置文件</h4><p>在application.yml配置文件中加入限流的配置，代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">pool:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#配置SpringCloudGateway的路由</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#配置路由 : 路由id,路由到微服务的uri,断言(判断条件)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://service-order</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/order-service/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="comment"># 使用SpEL从容器中获取对象</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">'#&#123;@pathKeyResolver&#125;'</span></span><br><span class="line">            <span class="comment"># 令牌桶每秒填充平均速率</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">            <span class="comment"># 令牌桶的上限</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/order-service/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># RequestRateLimiter : 使用限流过滤器,是springcloud gateway提供的</span></span><br><span class="line">  <span class="comment"># 参数  replenishRate : 向令牌桶中填充的速率</span></span><br><span class="line">  <span class="comment">#       burstCapacity :令牌桶的容量</span></span><br></pre></td></tr></table></figure><p>在 <code>application.yml</code> 中添加了redis的信息，并配置了RequestRateLimiter的限流过滤器：</p><ul><li>burstCapacity ，令牌桶总容量。</li><li>replenishRate ，令牌桶每秒填充平均速率。</li><li>key-resolver ，用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。</li></ul><h4 id="3-5-2-3-配置KeyResolver"><a href="#3-5-2-3-配置KeyResolver" class="headerlink" title="3.5.2.3    配置KeyResolver"></a>3.5.2.3    配置KeyResolver</h4><p>为了达到不同的限流效果和规则，可以通过实现 KeyResolver 接口，定义不同请求类型的限流键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置KeyResolver</span></span><br><span class="line"><span class="comment"> * 定义不同请求类型的限流键</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyResolverConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编写基于请求路径的限流规则</span></span><br><span class="line"><span class="comment">     * //abc</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">pathKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自定义的KeyResolver</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyResolver() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * ServerWebExchange :</span></span><br><span class="line"><span class="comment">             *      上下文参数</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(exchange.getRequest().getPath().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于请求参数的限流</span></span><br><span class="line"><span class="comment">     *  请求 abc ? userId=1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">userKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">                exchange.getRequest().getQueryParams().getFirst(<span class="string">"userId"</span>)</span><br><span class="line">                <span class="comment">//exchange.getRequest().getHeaders().getFirst("X-Forwarded-For") 基于请求ip的限流</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Jmetter模拟5组线程访问，会发现如下结果，当达到令牌桶的总容量3时，其他的请求会返回429错误。</p><p><img src="https://img-blog.csdnimg.cn/20201111202255679.png" alt="image-20201111175433724"></p><p>通过reids的MONITOR可以监听redis的执行过程。这时候Redis中会有对应的数据：</p><p><img src="https://img-blog.csdnimg.cn/20201111202301527.png" alt="image-20201111175528502"></p><h3 id="3-5-3-基于Sentinel的限流"><a href="#3-5-3-基于Sentinel的限流" class="headerlink" title="3.5.3    基于Sentinel的限流"></a>3.5.3    基于Sentinel的限流</h3><p>Sentinel 支持对 Spring Cloud Gateway、Zuul 等主流的 API Gateway 进行限流。</p><p><img src="https://img-blog.csdnimg.cn/20201111202307639.png" alt="image-20201111180213971"></p><p>从 1.6.0 版本开始，Sentinel 提供了 Spring Cloud Gateway 的适配模块，可以提供两种资源维度的限流：</p><ul><li>route  维度：即在 Spring 配置文件中配置的路由条目，资源名为对应的 routeId</li><li>自定义 API 维度：用户可以利用 Sentinel 提供的 API 来自定义一些 API 分组</li></ul><p>Sentinel 1.6.0 引入了 Sentinel API Gateway Adapter Common 模块，此模块中包含网关限流的规则和自定义 API 的实体和管理逻辑：</p><ul><li><code>GatewayFlowRule</code> ：网关限流规则，针对 API Gateway 的场景定制的限流规则，可以针对不同route 或自定义的 API 分组进行限流，支持针对请求中的参数、Header、来源 IP 等进行定制化的限流。</li><li><code>ApiDefinition</code> ：用户自定义的 API 定义分组，可以看做是一些 URL 匹配的组合。比如我们可以定义一个 API 叫  <code>my_api</code> ，请求 path 模式为  <code>/foo/**</code> 和  <code>/baz/**</code> 的都归到  my_api 这个 API分组下面。限流的时候可以针对这个自定义的 API 分组维度进行限流。</li></ul><h4 id="3-5-3-1-环境搭建"><a href="#3-5-3-1-环境搭建" class="headerlink" title="3.5.3.1    环境搭建"></a>3.5.3.1    环境搭建</h4><p>导入Sentinel 的响应依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel限流--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-3-2-编写配置类"><a href="#3-5-3-2-编写配置类" class="headerlink" title="3.5.3.2    编写配置类"></a>3.5.3.2    编写配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sentinel限流的配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">                                ServerCodecConfigurer serverCodecConfigurer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置限流的异常处理器:SentinelGatewayBlockExceptionHandler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置限流过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置初始化的限流参数</span></span><br><span class="line"><span class="comment">     *      用于指定资源的限流规则</span></span><br><span class="line"><span class="comment">     *          1.资源名称 (路由id)</span></span><br><span class="line"><span class="comment">     *          2.配置统计时间</span></span><br><span class="line"><span class="comment">     *          3.配置限流阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"order-service"</span>)    <span class="comment">//资源名称</span></span><br><span class="line">                .setCount(<span class="number">1</span>)    <span class="comment">// 限流阈值</span></span><br><span class="line">                .setIntervalSec(<span class="number">1</span>)    <span class="comment">// 统计时间窗口，单位是秒，默认是 1 秒</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        GatewayRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于 Sentinel 的Gateway限流是通过其提供的Filter来完成的，使用时只需注入对应的SentinelGatewayFilter 实例以及  SentinelGatewayBlockExceptionHandler 实例即可。</li><li>@PostConstruct 定义初始化的加载方法，用于指定资源的限流规则。这里资源的名称为 product-service ，统计时间是1秒内，限流阈值是1。表示每秒只能访问一个请求。</li></ul><h4 id="3-5-3-3-网关配置"><a href="#3-5-3-3-网关配置" class="headerlink" title="3.5.3.3    网关配置"></a>3.5.3.3    网关配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">pool:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#配置SpringCloudGateway的路由</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#配置路由 : 路由id,路由到微服务的uri,断言(判断条件)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://service-order</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/order-service/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/order-service/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p>在一秒钟内多次访问 <a href="http://localhost:8080/order-service/order/buy/1就可以看到限流启作用了。" target="_blank" rel="noopener">http://localhost:8080/order-service/order/buy/1就可以看到限流启作用了。</a></p><p><img src="https://img-blog.csdnimg.cn/20201111202313552.png" alt="image-20201111182845934"></p><h4 id="3-5-3-4-自定义异常提示"><a href="#3-5-3-4-自定义异常提示" class="headerlink" title="3.5.3.4    自定义异常提示"></a>3.5.3.4    自定义异常提示</h4><p>当触发限流后页面显示的是Blocked by Sentinel: FlowException。为了展示更加友好的限流提示，Sentinel支持自定义异常处理。</p><p>您可以在  <code>GatewayCallbackManager</code> 注册回调进行定制：</p><ul><li><code>setBlockHandler</code> ：注册函数用于实现自定义的逻辑处理被限流的请求，对应接口为<code>BlockRequestHandler</code> 。默认实现为  <code>DefaultBlockRequestHandler</code> ，当被限流时会返回类似于下面的错误信息： <code>Blocked by Sentinel: FlowException</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义限流处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBlockHandlers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BlockRequestHandler blockRequestHandler = <span class="keyword">new</span> BlockRequestHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</span><br><span class="line">            Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">"code"</span>, <span class="number">001</span>);</span><br><span class="line">            map.put(<span class="string">"message"</span>, <span class="string">"对不起,接口限流了"</span>);</span><br><span class="line">            <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK).</span><br><span class="line">                    contentType(MediaType.APPLICATION_JSON_UTF8).</span><br><span class="line">                    body(BodyInserters.fromObject(map));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    GatewayCallbackManager.setBlockHandler(blockRequestHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201111202321925.png" alt="image-20201111183225239"></p><h4 id="3-5-3-5-参数限流"><a href="#3-5-3-5-参数限流" class="headerlink" title="3.5.3.5    参数限流"></a>3.5.3.5    参数限流</h4><p>上面的配置是针对整个路由来限流的，如果我们只想对某个路由的参数做限流，那么可以使用参数限流方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置初始化的限流参数</span></span><br><span class="line"><span class="comment"> *      用于指定资源的限流规则</span></span><br><span class="line"><span class="comment"> *          1.资源名称 (路由id)</span></span><br><span class="line"><span class="comment"> *          2.配置统计时间</span></span><br><span class="line"><span class="comment"> *          3.配置限流阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数限流</span></span><br><span class="line">    rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"product-service"</span>)</span><br><span class="line">            .setCount(<span class="number">1</span>)</span><br><span class="line">            .setIntervalSec(<span class="number">1</span>)</span><br><span class="line">            .setParamItem(<span class="keyword">new</span> GatewayParamFlowItem()</span><br><span class="line">                    .setParseStrategy(SentinelGatewayConstants.PARAM_PARSE_STRATEGY_URL_PARAM).setFieldName(<span class="string">"id"</span>)</span><br><span class="line">            )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    GatewayRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过指定 PARAM_PARSE_STRATEGY_URL_PARAM表示从url中获取参数，setFieldName指定参数名称</p><h4 id="3-5-3-6-自定义API分组"><a href="#3-5-3-6-自定义API分组" class="headerlink" title="3.5.3.6    自定义API分组"></a>3.5.3.6    自定义API分组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置初始化的限流参数</span></span><br><span class="line"><span class="comment"> *      用于指定资源的限流规则</span></span><br><span class="line"><span class="comment"> *          1.资源名称 (路由id)</span></span><br><span class="line"><span class="comment"> *          2.配置统计时间</span></span><br><span class="line"><span class="comment"> *          3.配置限流阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"product_api"</span>)</span><br><span class="line">            .setCount(<span class="number">1</span>)</span><br><span class="line">            .setIntervalSec(<span class="number">1</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    GatewayRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义API限流分组</span></span><br><span class="line"><span class="comment"> *      1.定义分组</span></span><br><span class="line"><span class="comment"> *      2.对小组配置限流规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCustomizedApis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;ApiDefinition&gt; definitions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    ApiDefinition api1 = <span class="keyword">new</span> ApiDefinition(<span class="string">"product_api"</span>)</span><br><span class="line">            .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;() &#123;&#123;</span><br><span class="line">                add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/product-service/product/**"</span>).   <span class="comment">//以/product-service/product/开头的所有url</span></span><br><span class="line">                        setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">    ApiDefinition api2 = <span class="keyword">new</span> ApiDefinition(<span class="string">"order_api"</span>)</span><br><span class="line">            .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;() &#123;&#123;</span><br><span class="line">                add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/order-service/order"</span>)); <span class="comment">//完全匹配/order-service/order 的url</span></span><br><span class="line">            &#125;&#125;);</span><br><span class="line">    definitions.add(api1);</span><br><span class="line">    definitions.add(api2);</span><br><span class="line">    GatewayApiDefinitionManager.loadApiDefinitions(definitions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-网关高可用"><a href="#3-6-网关高可用" class="headerlink" title="3.6    网关高可用"></a>3.6    网关高可用</h2><p><strong>高可用HA</strong>（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。我们都知道，单点是系统高可用的大敌，单点往往是系统高可用最大的风险和敌人，应该尽量在系统设计的过程中避免单点。方法论上，高可用保证的原则是“集群化”，或者叫“冗余”：只有一个单点，挂了服务会受影响；如果有冗余备份，挂了还有其他backup能够顶上。</p><p><img src="https://img-blog.csdnimg.cn/20201111202330523.png" alt="image-20201111183743729"></p><p>我们实际使用 Spring Cloud Gateway 的方式如上图，不同的客户端使用不同的负载将请求分发到后端的 Gateway，Gateway 再通过HTTP调用后端服务，最后对外输出。因此为了保证 Gateway 的高可用性，前端可以同时启动多个 Gateway 实例进行负载，在 Gateway 的前端使用 Nginx 或者 F5 进行负载转发以达到高可用性。</p><h3 id="3-6-1-准备多个GateWay工程"><a href="#3-6-1-准备多个GateWay工程" class="headerlink" title="3.6.1    准备多个GateWay工程"></a>3.6.1    准备多个GateWay工程</h3><p>修改 shop_gateway_server 的application.yml。添加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="comment">#配置SpringCloudGateway的路由</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#配置路由 : 路由id,路由到微服务的uri,断言(判断条件)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://service-order</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/order-service/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/order-service/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"><span class="comment">#eureka注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">gateway01</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">gateway02</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span> <span class="comment">#服务端口</span></span><br></pre></td></tr></table></figure><p>通过不同的 profiles配置启动两个网关服务，请求端口分别为8080和8081。浏览器验证发现效果是一致的。</p><h3 id="3-6-2-配置ngnix"><a href="#3-6-2-配置ngnix" class="headerlink" title="3.6.2    配置ngnix"></a>3.6.2    配置ngnix</h3><p>找到ngnix添加负载均衡配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#集群配置</span><br><span class="line">upstream gateway &#123;</span><br><span class="line">  server 127.0.0.1:8081;</span><br><span class="line">  server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#请求转向gateway定义的服务器列表</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">  proxy_pass http:&#x2F;&#x2F;gateway;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器上通过访问<a href="http://localhost/order-service/order/buy/1请求的效果和之前是一样的。这次关闭一台网关服务器，还是可以支持部分请求的访问。" target="_blank" rel="noopener">http://localhost/order-service/order/buy/1请求的效果和之前是一样的。这次关闭一台网关服务器，还是可以支持部分请求的访问。</a></p><h2 id="3-7-执行流程分析"><a href="#3-7-执行流程分析" class="headerlink" title="3.7    执行流程分析"></a>3.7    执行流程分析</h2><p><img src="https://img-blog.csdnimg.cn/2020111120234099.png" alt="image-20201111184443045"></p><p><code>Spring Cloud Gateway</code> 核心处理流程如上图所示，Gateway的客户端向 <code>Spring Cloud Gateway</code> 发送请求，请求首先被 <code>HttpWebHandlerAdapter</code> 进行提取组装成网关上下文，然后网关的上下文会传递到 <code>DispatcherHandler</code> 。 <code>DispatcherHandler</code> 是所有请求的分发处理器， <code>DispatcherHandler</code> 主要负责分发请求对应的处理器。比如请求分发到对应的 <code>RoutePredicateHandlerMapping</code> （路由断言处理映射器）。路由断言处理映射器主要作用用于路由查找，以及找到路由后返回对应的<code>FilterWebHandler</code> 。 <code>FilterWebHandler</code>主要负责组装Filter链并调用Filter执行一系列的Filter处理，然后再把请求转到后端对应的代理服务处理，处理完毕之后将Response返回到Gateway客户端。</p><h1 id="4-微服务的链路追踪概述"><a href="#4-微服务的链路追踪概述" class="headerlink" title="4.    微服务的链路追踪概述"></a>4.    微服务的链路追踪概述</h1><h2 id="4-1-微服务架构下的问题"><a href="#4-1-微服务架构下的问题" class="headerlink" title="4.1    微服务架构下的问题"></a>4.1    微服务架构下的问题</h2><p>在大型系统的微服务化构建中，一个系统会被拆分成许多模块。这些模块负责不同的功能，组合成系统，最终可以提供丰富的功能。在这种架构中，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心，也就意味着这种架构形式也会存在一些问题：</p><ul><li>如何快速发现问题？</li><li>如何判断故障影响范围？</li><li>如何梳理服务依赖以及依赖的合理性？</li><li>如何分析链路性能问题以及实时容量规划？</li></ul><p>分布式链路追踪（Distributed Tracing），就是将一次分布式请求还原成调用链路，进行日志记录，性能监控并将 一次分布式请求的调用情况集中展示。比如各个服务节点上的耗时、请求具体到达哪台机器上、每个服务节点的请求状态等等。</p><p>目前业界比较流行的链路追踪系统如：Twitter的<strong>Zipkin</strong>，阿里的<strong>鹰眼</strong>，美团的<strong>Mtrace</strong>，大众点评的<strong>cat</strong>等，大部分都是基于google发表的 <a href="http://bigbully.github.io/Dapper-translation/" target="_blank" rel="noopener">Dapper</a>。Dapper阐述了分布式系统，特别是微服务架构中链路追踪的概念、数据表示、埋点、传递、收集、存储与展示等技术细节。</p><h2 id="4-2-Sleuth概述"><a href="#4-2-Sleuth概述" class="headerlink" title="4.2    Sleuth概述"></a>4.2    Sleuth概述</h2><h3 id="4-2-1-简介"><a href="#4-2-1-简介" class="headerlink" title="4.2.1    简介"></a>4.2.1    简介</h3><p>Spring Cloud Sleuth 主要功能就是在分布式系统中提供追踪解决方案，并且兼容支持了 zipkin，你只需要在pom文件中引入相应的依赖即可。</p><h3 id="4-2-2-相关概念"><a href="#4-2-2-相关概念" class="headerlink" title="4.2.2    相关概念"></a>4.2.2    相关概念</h3><p>Spring Cloud Sleuth 为Spring Cloud提供了分布式根据的解决方案。它大量借用了Google Dapper的设计。先来了解一下Sleuth中的术语和相关概念。</p><p>Spring Cloud Sleuth采用的是Google的开源项目Dapper的专业术语。</p><ul><li>Span ：基本工作单元，例如，在一个新建的span中发送一个RPC等同于发送一个回应请求给RPC，span通过一个64位ID唯一标识，trace以另一个64位ID表示，span还有其他数据信息，比如摘要、时间戳事件、关键值注释(tags)、span的ID、以及进度ID(通常是IP地址)span在不断的启动和停止，同时记录了时间信息，当你创建了一个span，你必须在未来的某个时刻停止它。</li><li>Trace ：一系列spans组成的一个树状结构，例如，如果你正在跑一个分布式大数据工程，你可能需要创建一个trace。</li><li>Annotation ：用来及时记录一个事件的存在，一些核心annotations用来定义一个请求的开始和结束<ul><li>cs - Client Sent - 客户端发起一个请求，这个annotion描述了这个span的开始</li><li>sr - Server Received - 服务端获得请求并准备开始处理它，如果将其sr减去cs时间戳便可得到网络延迟</li><li>ss - Server Sent - 注解表明请求处理的完成(当请求返回客户端)，如果ss减去sr时间戳便可得到服务端需要的处理请求时间</li><li>cr - Client Received - 表明span的结束，客户端成功接收到服务端的回复，如果cr减去cs时间戳便可得到客户端从服务端获取回复的所有所需时间</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20201111202346952.png" alt="image-20201111185502203"></p><h2 id="4-3-链路追踪Sleuth入门"><a href="#4-3-链路追踪Sleuth入门" class="headerlink" title="4.3    链路追踪Sleuth入门"></a>4.3    链路追踪Sleuth入门</h2><h3 id="4-3-1-配置依赖"><a href="#4-3-1-配置依赖" class="headerlink" title="4.3.1    配置依赖"></a>4.3.1    配置依赖</h3><p>修改微服务工程引入Sleuth依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sleuth链路追踪--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-修改配置文件"><a href="#4-3-2-修改配置文件" class="headerlink" title="4.3.2    修改配置文件"></a>4.3.2    修改配置文件</h3><p>修改application.yml添加日志级别</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">org.springframework.web.servlet.DispatcherServlet:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.sleuth:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>每个微服务都需要添加如上的配置。启动微服务，调用之后，我们可以在控制台观察到 sleuth的日志输出。</p><p><img src="https://img-blog.csdnimg.cn/20201111202355719.png" alt="image-20201111185659086"></p><p>其中 ff8ff8b803a3b558 是TraceId，后面跟着的是SpanId，依次调用有一个全局的TraceId，将调用链路串起来。仔细分析每个微服务的日志，不难看出请求的具体过程。</p><p>查看日志文件并不是一个很好的方法，当微服务越来越多日志文件也会越来越多，通过Zipkin可以将日志聚合，并进行可视化展示和全文检索。</p><h2 id="4-4-Zipkin的概述"><a href="#4-4-Zipkin的概述" class="headerlink" title="4.4    Zipkin的概述"></a>4.4    Zipkin的概述</h2><p>Zipkin  是 Twitter 的一个开源项目，它基于 Google Dapper 实现，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。 我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的 REST API 接口来辅助我们查询跟踪数据以实现对分布式系统的监控程序，从而及时地发现系统中出现的延迟升高问题并找出系统性能瓶颈的根源。除了面向开发的 API 接口之外，它也提供了方便的 UI 组件来帮助我们直观的搜索跟踪信息和分析请求链路明细，比如：可以查询某段时间内各用户请求的处理时间等。 Zipkin 提供了可插拔数据存储方式：In-Memory、MySql、Cassandra 以及 Elasticsearch。</p><p><img src="https://img-blog.csdnimg.cn/20201111202403360.png" alt="image-20201111185817291"></p><p>上图展示了 Zipkin 的基础架构，它主要由 4 个核心组件构成：</p><ul><li>Collector ：收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为Zipkin 内部处理的 Span 格式，以支持后续的存储、分析、展示等功能。</li><li>Storage ：存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中，我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到数据库中。</li><li>RESTful API ：API 组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接系统访问以实现监控等。</li><li>Web UI ：UI 组件，基于 API 组件实现的上层应用。通过 UI 组件用户可以方便而有直观地查询和分析跟踪信息。</li></ul><p>Zipkin 分为两端，一个是 Zipkin 服务端，一个是 Zipkin 客户端，客户端也就是微服务的应用。客户端会配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监听，并生成相应的 Trace 和 Span 信息发送给服务端。发送的方式主要有两种，一种是 HTTP 报文的方式，还有一种是消息总线的方式如 RabbitMQ。</p><p>不论哪种方式，我们都需要：</p><ul><li>一个 Eureka 服务注册中心，这里我们就用之前的  eureka 项目来当注册中心。</li><li>一个 Zipkin 服务端。</li><li>多个微服务，这些微服务中配置 Zipkin 客户端。</li></ul><h2 id="4-5-Zipkin-Server的部署和配置"><a href="#4-5-Zipkin-Server的部署和配置" class="headerlink" title="4.5    Zipkin Server的部署和配置"></a>4.5    Zipkin Server的部署和配置</h2><h3 id="4-5-1-Zipkin-Server下载"><a href="#4-5-1-Zipkin-Server下载" class="headerlink" title="4.5.1    Zipkin Server下载"></a>4.5.1    Zipkin Server下载</h3><p>从spring boot 2.0开始，官方就不再支持使用自建Zipkin Server的方式进行服务链路追踪，而是直接提供了编译好的 jar 包来给我们使用。可以从官方网站下载<a href="https://search.maven.org/remote_content?g=io.zipkin.java&a=zipkin-server&v=LATEST&c=exec" target="_blank" rel="noopener">先下载Zipkin的web UI</a>，我们这里下载的是<code>zipkin -server-2.12.9-exec.jar</code></p><h3 id="4-5-2-启动"><a href="#4-5-2-启动" class="headerlink" title="4.5.2    启动"></a>4.5.2    启动</h3><p>在命令行输入  <code>java  -jar zipkin-server-2.12.9-exec.jar</code> 启动 Zipkin Server</p><p><img src="https://img-blog.csdnimg.cn/20201111202414384.png" alt="image-20201111190153542"></p><ul><li>默认 Zipkin Server的请求端口为 <strong>9411</strong></li><li>Zipkin Server 的启动参数可以通过官方提供的 <a href="https://github.com/openzipkin/zipkin/blob/master/zipkin-server/src/main/resources/zipkin-server-shared.yml" target="_blank" rel="noopener">yml配置文件查找</a></li><li>在浏览器输入 <a href="http://127.0.0.1:9411即可进入到Zipkin">http://127.0.0.1:9411即可进入到Zipkin</a> Server的管理后台</li></ul><h2 id="4-6-客户端Zipkin-Sleuth整合"><a href="#4-6-客户端Zipkin-Sleuth整合" class="headerlink" title="4.6    客户端Zipkin+Sleuth整合"></a>4.6    客户端Zipkin+Sleuth整合</h2><p>通过查看日志分析微服务的调用链路并不是一个很直观的方案，结合zipkin可以很直观地显示微服务之间的调用关系。</p><h3 id="4-6-1-客户端添加依赖"><a href="#4-6-1-客户端添加依赖" class="headerlink" title="4.6.1    客户端添加依赖"></a>4.6.1    客户端添加依赖</h3><p>客户端指的是需要被追踪的微服务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zipkin依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-2-修改客户端配置文件"><a href="#4-6-2-修改客户端配置文件" class="headerlink" title="4.6.2    修改客户端配置文件"></a>4.6.2    修改客户端配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置zipkin采集数据</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411/</span>  <span class="comment">#server的请求地址</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span> <span class="comment">#数据的传输方式 , 以http的形式向server端发送数据</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span> <span class="comment">#采样比</span></span><br></pre></td></tr></table></figure><p>指定了zipkin server的地址，下面制定需采样的百分比，默认为0.1，即10%，这里配置1，是记录全部的sleuth信息，是为了收集到更多的数据（仅供测试用）。在分布式系统中，过于频繁的采样会影响系统性能，所以这里配置需要采用一个合适的值。</p><h3 id="4-6-3-测试"><a href="#4-6-3-测试" class="headerlink" title="4.6.3    测试"></a>4.6.3    测试</h3><p>以此启动每个微服务，启动Zipkin Service。通过浏览器发送一次微服务请求。打开 Zipkin Service控制台，我们可以根据条件追踪每次请求调用过程</p><p><img src="https://img-blog.csdnimg.cn/2020111120242214.png" alt="image-20201111190753656"></p><p>单击该trace可以看到请求的细节</p><p><img src="https://img-blog.csdnimg.cn/20201111202428877.png" alt="image-20201111190816261"></p><h2 id="4-7-基于消息中间件收集数据"><a href="#4-7-基于消息中间件收集数据" class="headerlink" title="4.7    基于消息中间件收集数据"></a>4.7    基于消息中间件收集数据</h2><p>在默认情况下，Zipkin客户端和Server之间是使用HTTP请求的方式进行通信（即同步的请求方式），在网络波动，Server端异常等情况下可能存在信息收集不及时的问题。Zipkin支持与rabbitMQ整合完成异步消息传输。</p><p>加了MQ之后，通信过程如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20201111202437616.png" alt="image-20201111190856411"></p><h3 id="4-7-1-RabbitMQ的安装与启动"><a href="#4-7-1-RabbitMQ的安装与启动" class="headerlink" title="4.7.1    RabbitMQ的安装与启动"></a>4.7.1    RabbitMQ的安装与启动</h3><p>参考：<a href="https://wgy1993.gitee.io/archives/b543ced0.html">https://wgy1993.gitee.io/archives/b543ced0.html</a></p><h3 id="4-7-2-服务端启动"><a href="#4-7-2-服务端启动" class="headerlink" title="4.7.2    服务端启动"></a>4.7.2    服务端启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.12.9-exec.jar --RABBIT_ADDRESSES=192.168.142.128:5672 --RABBIT_USER=wgy --RABBIT_PASSWORD=123456 --RABBIT_VIRTUAL_HOST=/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><ul><li>RABBIT_ADDRESSES ： 指定RabbitMQ地址</li><li>RABBIT_USER： 用户名（默认guest）</li><li>RABBIT_PASSWORD ： 密码（默认guest）</li><li>RABBIT_VIRTUAL_HOST：RabbitMQ服务器（默认/）</li></ul><p>启动Zipkin Server之后，我们打开RabbitMQ的控制台可以看到多了一个Queue</p><p><img src="https://img-blog.csdnimg.cn/20201111202447316.png" alt="image-20201111191205979"></p><p>其中 <code>zipkin</code> 就是为我们自动创建的Queue队列</p><h3 id="4-7-3-客户端配置"><a href="#4-7-3-客户端配置" class="headerlink" title="4.7.3    客户端配置"></a>4.7.3    客户端配置</h3><h4 id="4-7-3-1-配置依赖"><a href="#4-7-3-1-配置依赖" class="headerlink" title="4.7.3.1    配置依赖"></a>4.7.3.1    配置依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入 <code>spring-rabbit</code> 依赖，是Spring提供的对rabbit的封装，客户端会根据配置自动的生产消息并发送到目标队列中</p><h4 id="4-7-3-2-配置消息中间件rabbit-mq地址等信息"><a href="#4-7-3-2-配置消息中间件rabbit-mq地址等信息" class="headerlink" title="4.7.3.2    配置消息中间件rabbit mq地址等信息"></a>4.7.3.2    配置消息中间件rabbit mq地址等信息</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#修改zipkin使用rabbitmq采集数据</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment">#向rabbitmq中发送消息</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span> <span class="comment">#采样比</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">    <span class="attr">listener:</span> <span class="comment"># 这里配置了重试策略</span></span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-7-3-3-测试"><a href="#4-7-3-3-测试" class="headerlink" title="4.7.3.3    测试"></a>4.7.3.3    测试</h4><p>关闭Zipkin Server，并随意请求连接。打开rabbitmq管理后台可以看到，消息已经推送到rabbitmq。当Zipkin Server启动时，会自动的从rabbitmq获取消息并消费，展示追踪数据</p><p>可以看到如下效果：</p><ul><li>请求的耗时时间不会出现突然耗时特长的情况</li><li>当 ZipkinServer不可用时（比如关闭、网络不通等），追踪信息不会丢失，因为这些信息会保存在Rabbitmq服务器上，直到Zipkin服务器可用时，再从Rabbitmq中取出这段时间的信息</li></ul><h2 id="4-8-存储跟踪数据"><a href="#4-8-存储跟踪数据" class="headerlink" title="4.8    存储跟踪数据"></a>4.8    存储跟踪数据</h2><p>Zipkin Server默认时间追踪数据信息保存到内存，这种方式不适合生产环境。因为一旦Service关闭重启或者服务崩溃，就会导致历史数据消失。Zipkin支持将追踪数据持久化到mysql数据库或者存储到elasticsearch中。这里已mysql为例。</p><h3 id="4-8-1-准备数据库"><a href="#4-8-1-准备数据库" class="headerlink" title="4.8.1    准备数据库"></a>4.8.1    准备数据库</h3><p>可以从官网找到Zipkin Server持久mysql的数据库脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">SQLyog Ultimate v11.33 (64 bit)</span><br><span class="line">MySQL - 5.5.58 : Database - zipkin</span><br><span class="line">*********************************************************************</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET NAMES utf8 *&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET SQL_MODE&#x3D;&#39;&#39;*&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40014 SET @OLD_UNIQUE_CHECKS&#x3D;@@UNIQUE_CHECKS, UNIQUE_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET @OLD_FOREIGN_KEY_CHECKS&#x3D;@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO&#39; *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;</span><br><span class="line">CREATE DATABASE &#x2F;*!32312 IF NOT EXISTS*&#x2F;&#96;zipkin&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8 *&#x2F;;</span><br><span class="line"></span><br><span class="line">USE &#96;zipkin&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;zipkin_annotations&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;zipkin_annotations&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;zipkin_annotations&#96; (</span><br><span class="line">  &#96;trace_id_high&#96; bigint(20) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#39;,</span><br><span class="line">  &#96;trace_id&#96; bigint(20) NOT NULL COMMENT &#39;coincides with zipkin_spans.trace_id&#39;,</span><br><span class="line">  &#96;span_id&#96; bigint(20) NOT NULL COMMENT &#39;coincides with zipkin_spans.id&#39;,</span><br><span class="line">  &#96;a_key&#96; varchar(255) NOT NULL COMMENT &#39;BinaryAnnotation.key or Annotation.value if type &#x3D;&#x3D; -1&#39;,</span><br><span class="line">  &#96;a_value&#96; blob COMMENT &#39;BinaryAnnotation.value(), which must be smaller than 64KB&#39;,</span><br><span class="line">  &#96;a_type&#96; int(11) NOT NULL COMMENT &#39;BinaryAnnotation.type() or -1 if Annotation&#39;,</span><br><span class="line">  &#96;a_timestamp&#96; bigint(20) DEFAULT NULL COMMENT &#39;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&#39;,</span><br><span class="line">  &#96;endpoint_ipv4&#96; int(11) DEFAULT NULL COMMENT &#39;Null when Binary&#x2F;Annotation.endpoint is null&#39;,</span><br><span class="line">  &#96;endpoint_ipv6&#96; binary(16) DEFAULT NULL COMMENT &#39;Null when Binary&#x2F;Annotation.endpoint is null, or no IPv6 address&#39;,</span><br><span class="line">  &#96;endpoint_port&#96; smallint(6) DEFAULT NULL COMMENT &#39;Null when Binary&#x2F;Annotation.endpoint is null&#39;,</span><br><span class="line">  &#96;endpoint_service_name&#96; varchar(255) DEFAULT NULL COMMENT &#39;Null when Binary&#x2F;Annotation.endpoint is null&#39;,</span><br><span class="line">  UNIQUE KEY &#96;trace_id_high&#96; (&#96;trace_id_high&#96;,&#96;trace_id&#96;,&#96;span_id&#96;,&#96;a_key&#96;,&#96;a_timestamp&#96;) COMMENT &#39;Ignore insert on duplicate&#39;,</span><br><span class="line">  KEY &#96;trace_id_high_2&#96; (&#96;trace_id_high&#96;,&#96;trace_id&#96;,&#96;span_id&#96;) COMMENT &#39;for joining with zipkin_spans&#39;,</span><br><span class="line">  KEY &#96;trace_id_high_3&#96; (&#96;trace_id_high&#96;,&#96;trace_id&#96;) COMMENT &#39;for getTraces&#x2F;ByIds&#39;,</span><br><span class="line">  KEY &#96;endpoint_service_name&#96; (&#96;endpoint_service_name&#96;) COMMENT &#39;for getTraces and getServiceNames&#39;,</span><br><span class="line">  KEY &#96;a_type&#96; (&#96;a_type&#96;) COMMENT &#39;for getTraces&#39;,</span><br><span class="line">  KEY &#96;a_key&#96; (&#96;a_key&#96;) COMMENT &#39;for getTraces&#39;,</span><br><span class="line">  KEY &#96;trace_id&#96; (&#96;trace_id&#96;,&#96;span_id&#96;,&#96;a_key&#96;) COMMENT &#39;for dependencies job&#39;</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPRESSED;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;zipkin_annotations&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;zipkin_dependencies&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;zipkin_dependencies&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;zipkin_dependencies&#96; (</span><br><span class="line">  &#96;day&#96; date NOT NULL,</span><br><span class="line">  &#96;parent&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;child&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;call_count&#96; bigint(20) DEFAULT NULL,</span><br><span class="line">  UNIQUE KEY &#96;day&#96; (&#96;day&#96;,&#96;parent&#96;,&#96;child&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPRESSED;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;zipkin_dependencies&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;zipkin_spans&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;zipkin_spans&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;zipkin_spans&#96; (</span><br><span class="line">  &#96;trace_id_high&#96; bigint(20) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#39;,</span><br><span class="line">  &#96;trace_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;parent_id&#96; bigint(20) DEFAULT NULL,</span><br><span class="line">  &#96;debug&#96; bit(1) DEFAULT NULL,</span><br><span class="line">  &#96;start_ts&#96; bigint(20) DEFAULT NULL COMMENT &#39;Span.timestamp(): epoch micros used for endTs query and to implement TTL&#39;,</span><br><span class="line">  &#96;duration&#96; bigint(20) DEFAULT NULL COMMENT &#39;Span.duration(): micros used for minDuration and maxDuration query&#39;,</span><br><span class="line">  UNIQUE KEY &#96;trace_id_high&#96; (&#96;trace_id_high&#96;,&#96;trace_id&#96;,&#96;id&#96;) COMMENT &#39;ignore insert on duplicate&#39;,</span><br><span class="line">  KEY &#96;trace_id_high_2&#96; (&#96;trace_id_high&#96;,&#96;trace_id&#96;,&#96;id&#96;) COMMENT &#39;for joining with zipkin_annotations&#39;,</span><br><span class="line">  KEY &#96;trace_id_high_3&#96; (&#96;trace_id_high&#96;,&#96;trace_id&#96;) COMMENT &#39;for getTracesByIds&#39;,</span><br><span class="line">  KEY &#96;name&#96; (&#96;name&#96;) COMMENT &#39;for getTraces and getSpanNames&#39;,</span><br><span class="line">  KEY &#96;start_ts&#96; (&#96;start_ts&#96;) COMMENT &#39;for getTraces ordering and range&#39;</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPRESSED;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;zipkin_spans&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET SQL_MODE&#x3D;@OLD_SQL_MODE *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET FOREIGN_KEY_CHECKS&#x3D;@OLD_FOREIGN_KEY_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET UNIQUE_CHECKS&#x3D;@OLD_UNIQUE_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET SQL_NOTES&#x3D;@OLD_SQL_NOTES *&#x2F;;</span><br></pre></td></tr></table></figure><h3 id="4-8-2-配置启动服务端"><a href="#4-8-2-配置启动服务端" class="headerlink" title="4.8.2    配置启动服务端"></a>4.8.2    配置启动服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.12.9-exec.jar --STORAGE_TYPE=mysql --MYSQL_HOST=127.0.0.1 --MYSQL_TCP_PORT=3306 --MYSQL_DB=zipkin --MYSQL_USER=root --MYSQL_PASS=root</span><br></pre></td></tr></table></figure><ul><li>STORAGE_TYPE : 存储类型</li><li>MYSQL_HOST： mysql主机地址</li><li>MYSQL_TCP_PORT：mysql端口</li><li>MYSQL_DB： mysql数据库名称</li><li>MYSQL_USER：mysql用户名</li><li>MYSQL_PASS ：mysql密码</li></ul><p>配置好服务端之后，可以在浏览器请求几次。回到数据库查看会发现数据已经持久化到mysql中</p><p><img src="https://img-blog.csdnimg.cn/2020111120245777.png" alt="image-20201111191832636"></p><p><img src="https://img-blog.csdnimg.cn/20201111202502904.png" alt="image-20201111191906142"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-微服务网关概述&quot;&gt;&lt;a href=&quot;#1-微服务网关概述&quot; class=&quot;headerlink&quot; title=&quot;1.    微服务网关概述&quot;&gt;&lt;/a&gt;1.    微服务网关概述&lt;/h1&gt;&lt;p&gt;在学习完前面的知识后，微服务架构已经初具雏形。但还有一些问题：不同的微服务一般会有不同的网络地址，客户端在访问这些微服务时必须记住几十甚至几百个地址，这对于客户端方来说太复杂也难以维护。如下图：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringCloud" scheme="https://wgy1993.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(二)</title>
    <link href="https://wgy1993.gitee.io/archives/6f583e1f.html"/>
    <id>https://wgy1993.gitee.io/archives/6f583e1f.html</id>
    <published>2020-11-04T07:46:08.000Z</published>
    <updated>2020-11-04T07:47:05.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-服务调用Feign入门"><a href="#1-服务调用Feign入门" class="headerlink" title="1.    服务调用Feign入门"></a>1.    服务调用Feign入门</h1><p>前面我们使用的RestTemplate实现REST API调用，代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    Product product = <span class="keyword">null</span>;</span><br><span class="line">    product = restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可知，我们是使用拼接字符串的方式构造URL的，该URL只有一个参数。但是，在现实中，URL中往往含有多个参数。这时候我们如果还用这种方式构造URL，那么就会非常痛苦。那应该如何解决？我们带着这样的问题进入到本章的学习。</p><a id="more"></a><h2 id="1-1-Feign简介"><a href="#1-1-Feign简介" class="headerlink" title="1.1    Feign简介"></a>1.1    Feign简介</h2><p>Feign是Netflix开发的声明式，模板化的HTTP客户端，其灵感来自Retrofit,JAXRS-2.0以及WebSocket.</p><ul><li>Feign可帮助我们更加便捷，优雅的调用HTTP API。</li><li>在SpringCloud中，使用Feign非常简单——创建一个接口，并在接口上添加一些注解，代码就完成了。</li><li>Feign支持多种注解，例如Feign自带的注解或者JAX-RS注解等。</li><li>SpringCloud对Feign进行了增强，使Feign支持了SpringMVC注解，并整合了Ribbon和Eureka，从而让Feign的使用更加方便。</li></ul><h2 id="1-2-基于Feign的服务调用"><a href="#1-2-基于Feign的服务调用" class="headerlink" title="1.2    基于Feign的服务调用"></a>1.2    基于Feign的服务调用</h2><h3 id="1-2-1-引入依赖"><a href="#1-2-1-引入依赖" class="headerlink" title="1.2.1    引入依赖"></a>1.2.1    引入依赖</h3><p>在服务消费者 shop_service_order 添加Fegin依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springcloud整合的openFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-配置调用接口"><a href="#1-2-2-配置调用接口" class="headerlink" title="1.2.2    配置调用接口"></a>1.2.2    配置调用接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明需要调用的微服务名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span></span></span><br><span class="line"><span class="comment"> *      name : 服务提供者的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"service-product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置需要调用的微服务接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义各参数绑定时， @PathVariable、@RequestParam、@RequestHeader等可以指定参数属性，在Feign中绑定参数必须通过value属性来指明具体的参数名，不然会抛出异常</li><li>@FeignClient ：注解通过name指定需要调用的微服务的名称，用于创建Ribbon的负载均衡器。会通过动态代理的形式创建ProductFeignClient接口的实现类。</li></ul><h3 id="1-2-3-启动类激活Feign"><a href="#1-2-3-启动类激活Feign" class="headerlink" title="1.2.3    启动类激活Feign"></a>1.2.3    启动类激活Feign</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活Feign</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过@EnableFeignClients注解开启Spring Cloud Feign的支持功能</p><h3 id="1-2-4-通过自动的接口调用远程微服务"><a href="#1-2-4-通过自动的接口调用远程微服务" class="headerlink" title="1.2.4    通过自动的接口调用远程微服务"></a>1.2.4    通过自动的接口调用远程微服务</h3><p>修改 OrderController ，添加ProductFeginClient的自动注入，并在order方法中使用ProductFeginClient 完成微服务调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductFeignClient productFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        product = productFeignClient.findById(id);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-测试效果"><a href="#1-2-5-测试效果" class="headerlink" title="1.2.5    测试效果"></a>1.2.5    测试效果</h3><p><img src="https://img-blog.csdnimg.cn/20201104151437554.png" alt="image-20201104113657373"></p><h2 id="1-3-Feign-和Ribbon的联系"><a href="#1-3-Feign-和Ribbon的联系" class="headerlink" title="1.3    Feign 和Ribbon的联系"></a>1.3    Feign 和Ribbon的联系</h2><p><strong>Ribbon</strong>是一个基于 HTTP 和 TCP<strong>客户端</strong>的负载均衡的工具。它可以在<strong>客户端</strong>配置RibbonServerList（服务端列表），使用 HttpClient 或 RestTemplate 模拟http请求，步骤相当繁琐。</p><p><strong>Feign</strong>是在 Ribbon的基础上进行了一次改进，是一个使用起来更加方便的 HTTP 客户端。采用接口的方式， 只需要创建一个接口，然后在上面添加注解即可 ，将需要调用的其他服务的方法定义成抽象方法即可， 不需要自己构建http请求。然后就像是调用自身工程的方法调用，而感觉不到是调用远程方法，使得编写客户端变得非常容易</p><h2 id="1-4-负载均衡"><a href="#1-4-负载均衡" class="headerlink" title="1.4    负载均衡"></a>1.4    负载均衡</h2><p>Feign 中本身已经集成了Ribbon依赖和自动配置，因此我们不需要额外引入依赖，也不需要再注册RestTemplate 对象。另外，我们可以像上节课中讲的那样去配置Ribbon，可以通过 <code>ribbon.xx</code> 来进行全局配置。也可以通过 <code>服务名.ribbon.xx</code> 来对指定服务配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改ribbon的负载均衡策略   服务名 -  ribbon - NFLoadBalancerRuleClassName : 策略</span></span><br><span class="line"><span class="attr">service-product:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><h1 id="2-服务调用Feign高级"><a href="#2-服务调用Feign高级" class="headerlink" title="2.    服务调用Feign高级"></a>2.    服务调用Feign高级</h1><h2 id="2-1-Feign的配置"><a href="#2-1-Feign的配置" class="headerlink" title="2.1    Feign的配置"></a>2.1    Feign的配置</h2><p>从Spring Cloud Edgware开始，Feign支持使用属性自定义Feign。对于一个指定名称的Feign Client（例如该Feign Client的名称为 feignName ），Feign支持如下配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">feignName:</span>  <span class="comment">#定义FeginClient的名称</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span>  <span class="comment">#建立链接的超时时长 相当于Request.Options</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span>   <span class="comment">#读取超时时长 相当于Request.Options</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">full</span>   <span class="comment"># 配置Feign的日志级别，相当于代码配置方式中的Logger</span></span><br><span class="line">        <span class="attr">errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span>  <span class="comment"># Feign的错误解码器，相当于代码配置方式中的ErrorDecoder</span></span><br><span class="line">        <span class="attr">retryer:</span> <span class="string">com.example.SimpleRetryer</span>    <span class="comment"># 配置重试，相当于代码配置方式中的Retryer</span></span><br><span class="line">        <span class="attr">requestInterceptors:</span>  <span class="comment"># 配置请求拦截器，相当于代码配置方式中的RequestInterceptor</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line">        <span class="attr">decode404:</span> <span class="literal">false</span>  <span class="comment"># 配置熔断不处理404异常</span></span><br></pre></td></tr></table></figure><h2 id="2-2-请求压缩"><a href="#2-2-请求压缩" class="headerlink" title="2.2    请求压缩"></a>2.2    请求压缩</h2><p>Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br></pre></td></tr></table></figure><p>同时，我们也可以对请求的数据类型，以及触发压缩的大小下限进行设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br></pre></td></tr></table></figure><p>注：上面的数据类型、压缩大小下限均为默认值。</p><h2 id="2-3-日志级别"><a href="#2-3-日志级别" class="headerlink" title="2.3    日志级别"></a>2.3    日志级别</h2><p>在开发或者运行阶段往往希望看到Feign请求过程的日志记录，默认情况下Feign的日志是没有开启的。要想用属性配置方式来达到日志效果，只需在 application.yml 中添加如下内容即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置feign日志的输出</span></span><br><span class="line"><span class="comment">#日志配置  NONE : 不输出日志(高)   BASIC: 适用于生产环境追踪问题</span></span><br><span class="line"><span class="comment">#HEADERS : 在BASIC的基础上,记录请求和响应头信息   FULL : 记录所有</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">service-product:</span>  <span class="comment">#需要调用的服务名称</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.wgy.order.feign.ProductFeignClient:</span> <span class="string">debug</span><span class="comment">#Feign日志只会对日志级别为debug的做出响应</span></span><br></pre></td></tr></table></figure><h2 id="2-4-源码分析"><a href="#2-4-源码分析" class="headerlink" title="2.4    源码分析"></a>2.4    源码分析</h2><p><img src="https://img-blog.csdnimg.cn/20201104151454398.png" alt="image-20201104115652348"></p><h1 id="3-微服务架构的高并发问题"><a href="#3-微服务架构的高并发问题" class="headerlink" title="3.    微服务架构的高并发问题"></a>3.    微服务架构的高并发问题</h1><p>通过注册中心已经实现了微服务的服务注册和服务发现，并且通过Ribbon实现了负载均衡，已经借助Feign可以优雅的进行微服务调用。那么我们编写的微服务的性能怎么样呢，是否存在问题呢？</p><h2 id="3-1-性能工具Jmetter"><a href="#3-1-性能工具Jmetter" class="headerlink" title="3.1    性能工具Jmetter"></a>3.1    性能工具Jmetter</h2><p><img src="https://img-blog.csdnimg.cn/20201104151504453.png" alt="image-20201104122453332"></p><p>Apache JMeter 是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。</p><h3 id="3-1-1-安装Jmetter"><a href="#3-1-1-安装Jmetter" class="headerlink" title="3.1.1    安装Jmetter"></a>3.1.1    安装Jmetter</h3><p>Jmetter安装十分简单，将 apache -jmeter-2.13.zip 完整压缩包解压，找到安装目录下bin/jmeter.bat 已管理员身份启动即可</p><p><img src="https://img-blog.csdnimg.cn/20201104151511548.png" alt="image-20201104123216845"></p><h3 id="3-1-2-配置Jmetter"><a href="#3-1-2-配置Jmetter" class="headerlink" title="3.1.2    配置Jmetter"></a>3.1.2    配置Jmetter</h3><h4 id="3-1-2-1-创建新的测试计划"><a href="#3-1-2-1-创建新的测试计划" class="headerlink" title="3.1.2.1    创建新的测试计划"></a>3.1.2.1    创建新的测试计划</h4><p><img src="https://img-blog.csdnimg.cn/20201104151517869.png" alt="image-20201104123240442"></p><h4 id="3-1-2-2-测试计划下创建发起请求的线程组"><a href="#3-1-2-2-测试计划下创建发起请求的线程组" class="headerlink" title="3.1.2.2    测试计划下创建发起请求的线程组"></a>3.1.2.2    测试计划下创建发起请求的线程组</h4><p><img src="https://img-blog.csdnimg.cn/2020110415152443.png" alt="image-20201104123258982"></p><ul><li>可以配置请求的线程数</li><li>以及每个请求发送的请求次数</li></ul><h4 id="3-1-2-3-创建http请求模板"><a href="#3-1-2-3-创建http请求模板" class="headerlink" title="3.1.2.3    创建http请求模板"></a>3.1.2.3    创建http请求模板</h4><p><img src="https://img-blog.csdnimg.cn/20201104151531642.png" alt="image-20201104123502417"></p><h4 id="3-1-2-4-配置测试的接口信息"><a href="#3-1-2-4-配置测试的接口信息" class="headerlink" title="3.1.2.4    配置测试的接口信息"></a>3.1.2.4    配置测试的接口信息</h4><p><img src="https://img-blog.csdnimg.cn/20201104151539433.png" alt="image-20201104123523741"></p><h2 id="3-2-系统负载过高存在的问题"><a href="#3-2-系统负载过高存在的问题" class="headerlink" title="3.2    系统负载过高存在的问题"></a>3.2    系统负载过高存在的问题</h2><h3 id="3-2-1-问题分析"><a href="#3-2-1-问题分析" class="headerlink" title="3.2.1    问题分析"></a>3.2.1    问题分析</h3><p>在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，由于网络原因或者自身的原因，服务并不能保证服务的100%可用，如果单个服务出现问题，调用这个服务就会出现网络延迟，此时若有大量的网络涌入，会形成任务累计，导致服务瘫痪。</p><p>在SpringBoot程序中，默认使用内置tomcat作为web服务器。单tomcat支持最大的并发请求是有限的，如果某一接口阻塞，待执行的任务积压越来越多，那么势必会影响其他接口的调用。</p><p><img src="https://img-blog.csdnimg.cn/20201104151653414.png" alt="image-20201104134044617"></p><h3 id="3-2-2-线程池的形式实现服务隔离"><a href="#3-2-2-线程池的形式实现服务隔离" class="headerlink" title="3.2.2    线程池的形式实现服务隔离"></a>3.2.2    线程池的形式实现服务隔离</h3><h4 id="3-2-2-1-配置坐标"><a href="#3-2-2-1-配置坐标" class="headerlink" title="3.2.2.1    配置坐标"></a>3.2.2.1    配置坐标</h4><p>为了方便实现线以线程池的形式完成资源隔离，需要引入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-metrics-event-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-javanica<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-配置线程池"><a href="#3-2-2-2-配置线程池" class="headerlink" title="3.2.2.2    配置线程池"></a>3.2.2.2    配置线程池</h4><p>配置HystrixCommand接口的实现类，再实现类中可以对线程池进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderCommand</span><span class="params">(RestTemplate restTemplate, Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(setter());</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Setter <span class="title">setter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务分组</span></span><br><span class="line">        HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(<span class="string">"order_product"</span>);</span><br><span class="line">        <span class="comment">// 服务标识</span></span><br><span class="line">        HystrixCommandKey commandKey = HystrixCommandKey.Factory.asKey(<span class="string">"product"</span>);</span><br><span class="line">        <span class="comment">// 线程池名称</span></span><br><span class="line">        HystrixThreadPoolKey threadPoolKey = HystrixThreadPoolKey.Factory.asKey(<span class="string">"order_product_pool"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池配置</span></span><br><span class="line"><span class="comment">         *     withCoreSize :  线程池大小为10</span></span><br><span class="line"><span class="comment">         *     withKeepAliveTimeMinutes:  线程存活时间15秒</span></span><br><span class="line"><span class="comment">         *     withQueueSizeRejectionThreshold  :队列等待的阈值为100,超过100执行拒绝策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HystrixThreadPoolProperties.Setter threadPoolProperties = HystrixThreadPoolProperties.Setter().withCoreSize(<span class="number">50</span>)</span><br><span class="line">                .withKeepAliveTimeMinutes(<span class="number">15</span>).withQueueSizeRejectionThreshold(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 命令属性配置Hystrix 开启超时</span></span><br><span class="line">        HystrixCommandProperties.Setter commandProperties = HystrixCommandProperties.Setter()</span><br><span class="line">                <span class="comment">// 采用线程池方式实现服务隔离</span></span><br><span class="line">                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD)</span><br><span class="line">                <span class="comment">// 禁止</span></span><br><span class="line">                .withExecutionTimeoutEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Setter.withGroupKey(groupKey).andCommandKey(commandKey).andThreadPoolKey(threadPoolKey)</span><br><span class="line">                .andThreadPoolPropertiesDefaults(threadPoolProperties).andCommandPropertiesDefaults(commandProperties);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Product <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://127.0.0.1/product/"</span> + id, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Product <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"不好意思,出错了"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-3-配置调用"><a href="#3-2-2-3-配置调用" class="headerlink" title="3.2.2.3    配置调用"></a>3.2.2.3    配置调用</h4><p>修改 OrderController ，使用自定义的OrderCommand完成调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用OrderCommand调用远程服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderCommand(restTemplate, id).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findOrder</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"根据id查询订单"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-服务熔断Hystrix入门"><a href="#4-服务熔断Hystrix入门" class="headerlink" title="4.    服务熔断Hystrix入门"></a>4.    服务熔断Hystrix入门</h1><h2 id="4-1-服务容错的核心知识"><a href="#4-1-服务容错的核心知识" class="headerlink" title="4.1    服务容错的核心知识"></a>4.1    服务容错的核心知识</h2><h3 id="4-1-1-雪崩效应"><a href="#4-1-1-雪崩效应" class="headerlink" title="4.1.1    雪崩效应"></a>4.1.1    雪崩效应</h3><p>在微服务架构中，一个请求需要调用多个服务是非常常见的。如客户端访问A服务，而A服务需要调用B服务，B服务需要调用C服务，由于网络原因或者自身的原因，如果B服务或者C服务不能及时响应，A服务将处于阻塞状态，直到B服务C服务响应。此时若有大量的请求涌入，容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，造成连锁反应，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。</p><p><img src="https://img-blog.csdnimg.cn/20201104151545628.png" alt="image-20201104124844180"></p><p>雪崩是系统中的蝴蝶效应导致其发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。从源头上我们无法完全杜绝雪崩源头的发生，但是雪崩的根本原因来源于服务之间的强依赖，所以我们可以提前评估，做好<strong>熔断</strong>，<strong>隔离</strong>，<strong>限流</strong>。</p><h3 id="4-1-2-服务隔离"><a href="#4-1-2-服务隔离" class="headerlink" title="4.1.2    服务隔离"></a>4.1.2    服务隔离</h3><p>顾名思义，它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的系统服务。</p><h3 id="4-1-3-熔断降级"><a href="#4-1-3-熔断降级" class="headerlink" title="4.1.3    熔断降级"></a>4.1.3    熔断降级</h3><p>熔断这一概念来源于电子工程中的断路器（Circuit Breaker）。在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p><p><img src="https://img-blog.csdnimg.cn/20201104151552702.png" alt="image-20201104125058257"></p><p>所谓降级，就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。 也可以理解为兜底</p><h3 id="4-1-4-服务限流"><a href="#4-1-4-服务限流" class="headerlink" title="4.1.4    服务限流"></a>4.1.4    服务限流</h3><p>限流可以认为服务降级的一种，限流就是限制系统的输入和输出流量已达到保护系统的目的。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳固运行，一旦达到的需要限制的阈值，就需要限制流量并采取少量措施以完成限制流量的目的。比方：推迟解决，拒绝解决，或者者部分拒绝解决等等。</p><h2 id="4-2-Hystrix介绍"><a href="#4-2-Hystrix介绍" class="headerlink" title="4.2    Hystrix介绍"></a>4.2    Hystrix介绍</h2><p><img src="https://img-blog.csdnimg.cn/20201104151601485.png" alt="image-20201104125204091"></p><p>Hystrix 是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。Hystrix主要通过以下几点实现延迟和容错。</p><ul><li>包裹请求：使用 HystrixCommand包裹对依赖的调用逻辑，每个命令在独立线程中执行。这使用了设计模式中的“命令模式”。</li><li>跳闸机制：当某服务的错误率超过一定的阈值时， Hystrix可以自动或手动跳闸，停止请求该服务一段时间。</li><li>资源隔离： Hystrix为每个依赖都维护了一个小型的线程池（或者信号量）。如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等待，从而加速失败判定。</li><li>监控： Hystrix可以近乎实时地监控运行指标和配置的变化，例如成功、失败、超时、以及被拒绝的请求等。</li><li>回退机制：当请求失败、超时、被拒绝，或当断路器打开时，执行回退逻辑。回退逻辑由开发人员自行提供，例如返回一个缺省值。</li><li>自我修复：断路器打开一段时间后，会自动进入 “半开”状态。</li></ul><h2 id="4-3-Rest实现服务熔断"><a href="#4-3-Rest实现服务熔断" class="headerlink" title="4.3    Rest实现服务熔断"></a>4.3    Rest实现服务熔断</h2><h3 id="4-3-1-引入Hystrix的依赖"><a href="#4-3-1-引入Hystrix的依赖" class="headerlink" title="4.3.1    引入Hystrix的依赖"></a>4.3.1    引入Hystrix的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-启动类激活Hystrix"><a href="#4-3-2-启动类激活Hystrix" class="headerlink" title="4.3.2    启动类激活Hystrix"></a>4.3.2    启动类激活Hystrix</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活hystrix</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用spring提供的RestTemplate发送http请求到商品服务</span></span><br><span class="line"><span class="comment">     *      1.创建RestTemplate对象交给容器管理</span></span><br><span class="line"><span class="comment">     *      2.在使用的时候,调用其方法完成操作 (getXX,postxxx)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@LoadBalanced</span> : 是ribbon提供的负载均衡的注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-配置熔断触发的降级逻辑"><a href="#4-3-3-配置熔断触发的降级逻辑" class="headerlink" title="4.3.3    配置熔断触发的降级逻辑"></a>4.3.3    配置熔断触发的降级逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解配置熔断保护</span></span><br><span class="line"><span class="comment">     *      fallbackmethod : 配置熔断之后的降级方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"orderFallBack"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级方法</span></span><br><span class="line"><span class="comment">     *      和需要收到保护的方法的返回值一致</span></span><br><span class="line"><span class="comment">     *      方法参数一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderFallBack</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"熔断:触发降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有代码可知，为 findById 方法编写一个回退方法orderFallBack，该方法与 findById 方法具有相同的参数与返回值类型，该方法返回一个默认的错误信息。</p><p>在 findById方法上，使用注解@HystrixCommand的fallbackMethod属性，指定熔断触发的降级方法是orderFallBack。</p><ul><li>因为熔断的降级逻辑方法必须跟正常逻辑方法保证： <strong>相同的参数列表和返回值声明</strong>。</li><li>在 findById 方法上 HystrixCommand(fallbackMethod = “orderFallBack”) 用来声明一个降级逻辑的方法</li></ul><p>当 shop -service-product 微服务正常时，浏览器访问 <a href="http://localhost:9001/order/product/1" target="_blank" rel="noopener">http://localhost:9001/order/product/1</a></p><p><img src="https://img-blog.csdnimg.cn/20201104151608597.png" alt="image-20201104131436547"></p><p>可以正常调用服务提供者获取数据。当将商品微服务停止时继续访问</p><p><img src="https://img-blog.csdnimg.cn/20201104151615272.png" alt="image-20201104131451066"></p><p>此时 Hystrix配置已经生效进入熔断降级方法。</p><h4 id="4-3-3-1-默认的Fallback"><a href="#4-3-3-1-默认的Fallback" class="headerlink" title="4.3.3.1    默认的Fallback"></a>4.3.3.1    默认的Fallback</h4><p>我们刚才把fallback写在了某个业务方法上，如果这样的方法很多，那岂不是要写很多。所以我们可以把Fallback配置加在类上，实现默认fallback：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DefaultProperties</span> : 指定此接口中公共的熔断设置</span></span><br><span class="line"><span class="comment"> *      如果过在<span class="doctag">@DefaultProperties</span>指定了公共的降级方法</span></span><br><span class="line"><span class="comment"> *      在<span class="doctag">@HystrixCommand</span>不需要单独指定了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallBack"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解配置熔断保护</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定统一的降级方法</span></span><br><span class="line"><span class="comment">     *      参数 : 没有参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">defaultFallBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"触发统一的降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-2-超时设置"><a href="#4-3-3-2-超时设置" class="headerlink" title="4.3.3.2    超时设置"></a>4.3.3.2    超时设置</h4><p>在之前的案例中，请求在超过1秒后都会返回错误信息，这是因为Hystix的默认超时时长为1，我们可以通过配置修改这个值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span> <span class="comment">#默认的连接超时时间1秒,若1秒没有返回数据,自动的触发降级逻辑</span></span><br></pre></td></tr></table></figure><h2 id="4-4-Feign-实现服务熔断"><a href="#4-4-Feign-实现服务熔断" class="headerlink" title="4.4    Feign 实现服务熔断"></a>4.4    Feign 实现服务熔断</h2><p>SpringCloud Fegin默认已为Feign整合了hystrix，所以添加Feign依赖后就不用在添加hystrix，那么怎么才能让Feign的熔断机制生效呢，只要按以下步骤开发：</p><h3 id="4-4-1-在Feign中配置开启Hystrix"><a href="#4-4-1-在Feign中配置开启Hystrix" class="headerlink" title="4.4.1    在Feign中配置开启Hystrix"></a>4.4.1    在Feign中配置开启Hystrix</h3><p>在Feign中已经内置了hystrix，但是默认是关闭的需要在工程的 application.yml 中开启对hystrix的支持</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment">#开启对hystrix的支持</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="4-4-2-配置FeignClient接口的实现类"><a href="#4-4-2-配置FeignClient接口的实现类" class="headerlink" title="4.4.2    配置FeignClient接口的实现类"></a>4.4.2    配置FeignClient接口的实现类</h3><p>基于Feign实现熔断降级，那么降级方法需要配置到FeignClient接口的实现类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现自定义的ProductFeginClient接口</span></span><br><span class="line"><span class="comment"> *      在接口实现类中编写熔断降级方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFeignClientCallBack</span> <span class="keyword">implements</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断降级的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"feign调用触发熔断降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-修改FeignClient添加hystrix熔断"><a href="#4-4-3-修改FeignClient添加hystrix熔断" class="headerlink" title="4.4.3    修改FeignClient添加hystrix熔断"></a>4.4.3    修改FeignClient添加hystrix熔断</h3><p>@FeignClient 注解中以fallback声明降级方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明需要调用的微服务名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span></span></span><br><span class="line"><span class="comment"> *      name : 服务提供者的名称</span></span><br><span class="line"><span class="comment"> *      fallback : 配置熔断发生降级方法实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"service-product"</span>, fallback = ProductFeignClientCallBack<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置需要调用的微服务接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-服务熔断Hystrix高级"><a href="#5-服务熔断Hystrix高级" class="headerlink" title="5.    服务熔断Hystrix高级"></a>5.    服务熔断Hystrix高级</h1><p>我们知道，当请求失败，被拒绝，超时的时候，都会进入到降级方法中。但进入降级方法并不意味着断路器已经被打开。那么如何才能了解断路器中的状态呢？</p><h2 id="5-1-Hystrix的监控平台"><a href="#5-1-Hystrix的监控平台" class="headerlink" title="5.1    Hystrix的监控平台"></a>5.1    Hystrix的监控平台</h2><p>除了实现容错功能，Hystrix还提供了近乎实时的监控，HystrixCommand和HystrixObservableCommand在执行时，会生成执行结果和运行指标。比如每秒的请求数量，成功数量等。这些状态会暴露在Actuator提供的/health端点中。只需为项目添加 spring -boot-actuator 依赖，重启项目，访问 <a href="http://localhost:9001/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:9001/actuator/hystrix.stream</a> ,即可看到实时的监控数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认只有几个,配置暴露所有actuator监控的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201104151622311.png" alt="image-20201104132946345"></p><h3 id="5-1-1-搭建Hystrix-DashBoard监控"><a href="#5-1-1-搭建Hystrix-DashBoard监控" class="headerlink" title="5.1.1    搭建Hystrix DashBoard监控"></a>5.1.1    搭建Hystrix DashBoard监控</h3><p>刚刚讨论了Hystrix的监控，但访问/hystrix.stream接口获取的都是已文字形式展示的信息。很难通过文字直观的展示系统的运行状态，所以Hystrix官方还提供了基于图形化的DashBoard（仪表板）监控平台。Hystrix仪表板可以显示每个断路器（被@HystrixCommand注解的方法）的状态。</p><h4 id="5-1-1-1-导入依赖"><a href="#5-1-1-1-导入依赖" class="headerlink" title="5.1.1.1    导入依赖"></a>5.1.1.1    导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入hystrix的监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-1-2-添加EnableHystrixDashboard-注解"><a href="#5-1-1-2-添加EnableHystrixDashboard-注解" class="headerlink" title="5.1.1.2    添加EnableHystrixDashboard 注解"></a>5.1.1.2    添加EnableHystrixDashboard 注解</h4><p>在启动类使用@EnableHystrixDashboard注解激活仪表盘项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活Feign</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="comment">//激活hystrix</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//激活hytrix的web监控平台</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-1-3-访问测试"><a href="#5-1-1-3-访问测试" class="headerlink" title="5.1.1.3    访问测试"></a>5.1.1.3    访问测试</h4><p><a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a></p><p><img src="https://img-blog.csdnimg.cn/20201104151630211.png" alt="image-20201104133612092"></p><p>输入监控断点展示监控的详细数据：<a href="http://localhost:9001/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:9001/actuator/hystrix.stream</a></p><p><img src="https://img-blog.csdnimg.cn/20201104151636950.png" alt="image-20201104133735884"></p><p>hystrix控制台面板说明：</p><p><img src="https://img-blog.csdnimg.cn/20201104151644929.png" alt="image-20201104133757649"></p><h3 id="5-1-2-断路器聚合监控Turbine"><a href="#5-1-2-断路器聚合监控Turbine" class="headerlink" title="5.1.2    断路器聚合监控Turbine"></a>5.1.2    断路器聚合监控Turbine</h3><p>在微服务架构体系中，每个服务都需要配置Hystrix DashBoard监控。如果每次只能查看单个实例的监控数据，就需要不断切换监控地址，这显然很不方便。要想看这个系统的Hystrix Dashboard数据就需要用到Hystrix Turbine。Turbine是一个聚合Hystrix 监控数据的工具，他可以将所有相关微服务的Hystrix 监控数据聚合到一起，方便使用。引入Turbine后，整个监控系统架构如下：</p><p><img src="https://img-blog.csdnimg.cn/20201104151703253.png" alt="image-20201104135250255"></p><h4 id="5-1-2-1-搭建TurbineServer"><a href="#5-1-2-1-搭建TurbineServer" class="headerlink" title="5.1.2.1    搭建TurbineServer"></a>5.1.2.1    搭建TurbineServer</h4><p>创建工程 shop_hystrix_turbine 引入相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-2-2-配置多个微服务的hystrix监控"><a href="#5-1-2-2-配置多个微服务的hystrix监控" class="headerlink" title="5.1.2.2    配置多个微服务的hystrix监控"></a>5.1.2.2    配置多个微服务的hystrix监控</h4><p>在application.yml的配置文件中开启turbine并进行相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8031</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix-turbine</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="comment"># 要监控的微服务列表，多个用,分隔</span></span><br><span class="line">  <span class="attr">appConfig:</span> <span class="string">service-order</span></span><br><span class="line">  <span class="attr">clusterNameExpression:</span> <span class="string">"'default'"</span></span><br></pre></td></tr></table></figure><ul><li>eureka 相关配置 ： 指定注册中心地址</li><li>turbine 相关配置：指定需要监控的微服务列表</li></ul><p>turbine会自动的从注册中心中获取需要监控的微服务，并聚合所有微服务中的 /hystrix.stream 数据</p><h4 id="5-1-2-3-配置启动类"><a href="#5-1-2-3-配置启动类" class="headerlink" title="5.1.2.3    配置启动类"></a>5.1.2.3    配置启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//trubin配置</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="comment">//激活hytrix的web监控平台</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbinAppliation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TurbinAppliation<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为一个独立的监控项目，需要配置启动类，开启 HystrixDashboard监控平台，并激活Turbine</p><h4 id="5-1-2-4-测试"><a href="#5-1-2-4-测试" class="headerlink" title="5.1.2.4    测试"></a>5.1.2.4    测试</h4><p>浏览器访问 <a href="http://localhost:8031/hystrix" target="_blank" rel="noopener">http://localhost:8031/hystrix</a> 展示HystrixDashboard。并在url位置输入  <a href="http://localhost:8031/turbine.stream" target="_blank" rel="noopener">http://localhost:8031/turbine.stream</a> ，动态根据turbine.stream数据展示多个微服务的监控数据</p><p><img src="https://img-blog.csdnimg.cn/20201104151709148.png" alt="image-20201104135710872"></p><h2 id="5-2-熔断器的状态"><a href="#5-2-熔断器的状态" class="headerlink" title="5.2    熔断器的状态"></a>5.2    熔断器的状态</h2><p>熔断器有三个状态  CLOSED 、 OPEN 、 HALF_OPEN 熔断器默认关闭状态，当触发熔断后状态变更为OPEN ,在等待到指定的时间，Hystrix会放请求检测服务是否开启，这期间熔断器会变为 HALF_OPEN 半开启状态，熔断探测服务可用则继续变更为  CLOSED 关闭熔断器。</p><p><img src="https://img-blog.csdnimg.cn/20201104151716588.png" alt="image-20201104135753795"></p><ul><li>Closed ：关闭状态（断路器关闭），所有请求都正常访问。代理类维护了最近调用失败的次数，如果某次调用失败，则使失败次数加1。如果最近失败次数超过了在给定时间内允许失败的阈值，则代理类切换到断开(Open)状态。此时代理开启了一个超时时钟，当该时钟超过了该时间，则切换到半断开（Half-Open）状态。该超时时间的设定是给了系统一次机会来修正导致调用失败的错误。</li><li>Open ：打开状态（断路器打开），所有请求都会被降级。Hystix会对请求情况计数，当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全关闭。默认失败比例的阈值是50%，请求次数最少不低于20次。</li><li>Half Open ：半开状态，open状态不是永久的，打开后会进入休眠时间（默认是5S）。随后断路器会自动进入半开状态。此时会释放1次请求通过，若这个请求是健康的，则会关闭断路器，否则继续保持打开，再次进行5秒休眠计时。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201104151722764.png" alt="image-20201104135910774"></p><p>为了能够精确控制请求的成功或失败，我们在 shop_service_order  的调用业务中加入一段逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解配置熔断保护</span></span><br><span class="line"><span class="comment">     *      fallbackmethod : 配置熔断之后的降级方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"orderFallBack"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级方法</span></span><br><span class="line"><span class="comment">     *      和需要收到保护的方法的返回值一致</span></span><br><span class="line"><span class="comment">     *      方法参数一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderFallBack</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"熔断:触发降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果参数是 id为1，一定失败，其它情况都成功。</p><p>我们准备两个请求窗口：</p><ul><li>一个请求：<a href="http://localhost:9001/order/product/2，注定失败" target="_blank" rel="noopener">http://localhost:9001/order/product/2，注定失败</a></li><li>一个请求：<a href="http://localhost:9001/order/product/1，肯定成功" target="_blank" rel="noopener">http://localhost:9001/order/product/1，肯定成功</a></li></ul><p>熔断器的默认触发阈值是20次请求，不好触发。休眠时间时5秒，时间太短，不易观察，为了测试方便，我们可以通过配置修改熔断策略：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">5</span> <span class="comment">#触发熔断的最小请求次数，默认20 /10秒</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">10000</span> <span class="comment">#熔断多少秒后去尝试请求 默认 5   打开状态的时间</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">50</span> <span class="comment">#触发熔断的失败请求最小占比，默认50%</span></span><br></pre></td></tr></table></figure><p>当我们疯狂访问id为2的请求时（超过10次），就会触发熔断。断路器会打开，一切请求都会被降级处理。</p><p>此时你访问id为1的请求，会发现返回的也是失败，而且失败时间很短，只有20毫秒左右：</p><p><img src="https://img-blog.csdnimg.cn/20201104151728247.png" alt="image-20201104142122965"></p><h2 id="5-3-熔断器的隔离策略"><a href="#5-3-熔断器的隔离策略" class="headerlink" title="5.3    熔断器的隔离策略"></a>5.3    熔断器的隔离策略</h2><p>微服务使用Hystrix熔断器实现了服务的自动降级，让微服务具备自我保护的能力，提升了系统的稳定性，也较好的解决雪崩效应。<strong>其使用方式目前支持两种策略</strong>：</p><ul><li><strong>线程池隔离策略</strong>： 使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）</li><li><strong>信号量隔离策略</strong>： 使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）</li></ul><p><strong>线程池和型号量两种策略功能支持对比如下：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201104151735433.png" alt="image-20201104142457580"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">strategy:</span> <span class="string">ExecutionIsolationStrategy.SEMAPHORE</span> <span class="comment">#信号量隔离</span></span><br><span class="line">          <span class="comment">#strategy: # ExecutionIsolationStrategy.THREAD 线程池隔离</span></span><br><span class="line">          <span class="attr">maxConcurrentRequests:</span>  <span class="number">30</span>  <span class="comment">#最大信号量上限</span></span><br></pre></td></tr></table></figure><h2 id="5-4-Hystrix的核心源码"><a href="#5-4-Hystrix的核心源码" class="headerlink" title="5.4    Hystrix的核心源码"></a>5.4    Hystrix的核心源码</h2><p>Hystrix 底层基于 RxJava，RxJava 是响应式编程开发库，因此Hystrix的整个实现策略简单说即：把一个HystrixCommand封装成一个Observable（待观察者），针对自身要实现的核心功能，对Observable进行各种装饰，并在订阅各步装饰的Observable，以便在指定事件到达时，添加自己的业务。</p><p><img src="https://img-blog.csdnimg.cn/20201104151741961.png" alt="image-20201104142836553"></p><h1 id="6-服务熔断Hystrix的替换方案"><a href="#6-服务熔断Hystrix的替换方案" class="headerlink" title="6.    服务熔断Hystrix的替换方案"></a>6.    服务熔断Hystrix的替换方案</h1><p>18年底Netflix官方宣布Hystrix 已经足够稳定，不再积极开发 Hystrix，该项目将处于维护模式。就目前来看Hystrix是比较稳定的，并且Hystrix只是停止开发新的版本，并不是完全停止维护，Bug什么的依然会维护的。因此短期内，Hystrix依然是继续使用的。但从长远来看，Hystrix总会达到它的生命周期，那么Spring Cloud生态中是否有替代产品呢？</p><h2 id="6-1-替换方案介绍"><a href="#6-1-替换方案介绍" class="headerlink" title="6.1    替换方案介绍"></a>6.1    替换方案介绍</h2><h3 id="6-1-1-Alibaba-Sentinel"><a href="#6-1-1-Alibaba-Sentinel" class="headerlink" title="6.1.1    Alibaba Sentinel"></a>6.1.1    Alibaba Sentinel</h3><p>Sentinel 是阿里巴巴开源的一款断路器实现，目前在Spring Cloud的孵化器项目 Spring Cloud Alibaba中的一员Sentinel本身在阿里内部已经被大规模采用，非常稳定。因此可以作为一个较好的替代品。</p><h3 id="6-1-2-Resilience4J"><a href="#6-1-2-Resilience4J" class="headerlink" title="6.1.2    Resilience4J"></a>6.1.2    Resilience4J</h3><p>Resilicence4J 一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x/2.x，而且监控也不像Hystrix一样弄Dashboard/Hystrix等一堆轮子，而是支持和Micrometer（Pivotal开源的监控门面，Spring Boot 2.x中的Actuator就是基于Micrometer的）、prometheus（开源监控系统，来自谷歌的论文）、以及Dropwizard metrics（Spring Boot曾经的模仿对象，类似于Spring Boot）进行整合。</p><h2 id="6-2-Sentinel概述"><a href="#6-2-Sentinel概述" class="headerlink" title="6.2    Sentinel概述"></a>6.2    Sentinel概述</h2><h3 id="6-2-1-Sentinel简介"><a href="#6-2-1-Sentinel简介" class="headerlink" title="6.2.1    Sentinel简介"></a>6.2.1    Sentinel简介</h3><p><img src="https://img-blog.csdnimg.cn/2020110415174913.png" alt="image-20201104143029903"></p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel  具有以下特征:</p><ul><li><strong>丰富的应用场景</strong> ：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong> ：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong> ：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>Sentinel 的主要特性：</p><p><img src="https://img-blog.csdnimg.cn/20201104151757810.png" alt="image-20201104143158547"></p><h3 id="6-2-2-Sentinel-与Hystrix的区别"><a href="#6-2-2-Sentinel-与Hystrix的区别" class="headerlink" title="6.2.2    Sentinel 与Hystrix的区别"></a>6.2.2    Sentinel 与Hystrix的区别</h3><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式、匀速器模式、预热排队模式</td><td>不支持</td><td>简单的 Rate Limiter模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h3 id="6-2-3-名词解释"><a href="#6-2-3-名词解释" class="headerlink" title="6.2.3    名词解释"></a>6.2.3    名词解释</h3><p>Sentinel  可以简单的分为 Sentinel 核心库和 Dashboard。核心库不依赖 Dashboard，但是结合Dashboard 可以取得最好的效果。</p><p>使用 Sentinel 来进行熔断保护，主要分为几个步骤:</p><ol><li>定义资源</li><li>定义规则</li><li>检验规则是否生效</li></ol><p><strong>资源</strong>：可以是任何东西，一个服务，服务里的方法，甚至是一段代码。</p><p><strong>规则</strong>：Sentinel 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则和热点参数规则。Sentinel 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效</p><p>先把可能需要保护的资源定义好，之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。</p><p><img src="https://img-blog.csdnimg.cn/20201104151821107.png" alt="image-20201104150837505"></p><h2 id="6-3-Sentinel中的管理控制台"><a href="#6-3-Sentinel中的管理控制台" class="headerlink" title="6.3    Sentinel中的管理控制台"></a>6.3    Sentinel中的管理控制台</h2><h3 id="6-3-1-下载启动控制台"><a href="#6-3-1-下载启动控制台" class="headerlink" title="6.3.1    下载启动控制台"></a>6.3.1    下载启动控制台</h3><h4 id="6-3-1-1-获取-Sentinel-控制台"><a href="#6-3-1-1-获取-Sentinel-控制台" class="headerlink" title="6.3.1.1    获取 Sentinel 控制台"></a>6.3.1.1    获取 Sentinel 控制台</h4><p>您可以从官方网站中 下载最新版本的控制台 jar 包，下载地址如下：<br><a href="https://github.com/alibaba/Sentinel/releases/download/1.6.3/sentinel-dashboard-1.6.3.jar" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases/download/1.6.3/sentinel-dashboard-1.6.3.jar</a></p><h4 id="6-3-1-2-启动"><a href="#6-3-1-2-启动" class="headerlink" title="6.3.1.2    启动"></a>6.3.1.2    启动</h4><p>使用如下命令启动控制台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.6.3.jar</span><br></pre></td></tr></table></figure><p>其中 - Dserver.port=8080 用于指定 Sentinel 控制台端口为  8080 。</p><p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的登录功能，默认用户名和密码都是  sentinel 。</p><blockquote><p>启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p></blockquote><h3 id="6-3-2-客户端能接入控制台"><a href="#6-3-2-客户端能接入控制台" class="headerlink" title="6.3.2    客户端能接入控制台"></a>6.3.2    客户端能接入控制台</h3><p>控制台启动后，客户端需要按照以下步骤接入到控制台。</p><h4 id="6-3-2-1-引入JAR包"><a href="#6-3-2-1-引入JAR包" class="headerlink" title="6.3.2.1    引入JAR包"></a>6.3.2.1    引入JAR包</h4><p>客户端需要引入 Transport 模块来与 Sentinel 控制台进行通信。可以通过  pom.xml 引入 JAR 包:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2-2-配置启动参数"><a href="#6-3-2-2-配置启动参数" class="headerlink" title="6.3.2.2    配置启动参数"></a>6.3.2.2    配置启动参数</h4><p>在工程的application.yml中添加Sentinel 控制台配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span>   <span class="comment">#sentinel控制台的请求地址</span></span><br></pre></td></tr></table></figure><h3 id="6-3-3-查看机器列表以及健康情况"><a href="#6-3-3-查看机器列表以及健康情况" class="headerlink" title="6.3.3    查看机器列表以及健康情况"></a>6.3.3    查看机器列表以及健康情况</h3><p>默认情况下Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包。也可以配置sentinel.eager=true ,取消Sentinel控制台懒加载。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8081</span>   <span class="comment">#sentinel控制台的请求地址</span></span><br><span class="line">      <span class="attr">datasource:</span><span class="comment">#加载本地规则</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">file:</span></span><br><span class="line">            <span class="attr">file:</span> <span class="string">classpath:flowrule.json</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span> <span class="comment">#立即加载</span></span><br></pre></td></tr></table></figure><p>flowrule.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"orderFindById"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>打开浏览器即可展示Sentinel的管理控制台</p><p><img src="https://img-blog.csdnimg.cn/20201104151803921.png" alt="image-20201104145111970"></p><h2 id="6-4-基于Sentinel的服务保护"><a href="#6-4-基于Sentinel的服务保护" class="headerlink" title="6.4    基于Sentinel的服务保护"></a>6.4    基于Sentinel的服务保护</h2><h3 id="6-4-1-通用资源保护"><a href="#6-4-1-通用资源保护" class="headerlink" title="6.4.1    通用资源保护"></a>6.4.1    通用资源保护</h3><h4 id="6-4-1-1-引入依赖"><a href="#6-4-1-1-引入依赖" class="headerlink" title="6.4.1.1    引入依赖"></a>6.4.1.1    引入依赖</h4><p>需要注意SpringCloud-Alibaba与SpringCloud的版本关系</p><p><img src="https://img-blog.csdnimg.cn/20201104151810155.png" alt="image-20201104145228490"></p><p>父工程引入 alibaba实现的SpringCloud</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程中引入 sentinel</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-4-1-2-配置熔断降级方法"><a href="#6-4-1-2-配置熔断降级方法" class="headerlink" title="6.4.1.2    配置熔断降级方法"></a>6.4.1.2    配置熔断降级方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SentinelResource</span></span></span><br><span class="line"><span class="comment">     *      blockHandler : 声明熔断时调用的降级方法</span></span><br><span class="line"><span class="comment">     *      fallback : 抛出异常执行的降级方法</span></span><br><span class="line"><span class="comment">     *      value : 自定义的资源名称</span></span><br><span class="line"><span class="comment">     *          不设置:当前全类名.方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"orderFindById"</span>, blockHandler = <span class="string">"orderBlockHandler"</span>, fallback = <span class="string">"orderFallback"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义降级逻辑</span></span><br><span class="line"><span class="comment">     *  hystrix和sentinel</span></span><br><span class="line"><span class="comment">     *      熔断执行的降级方法</span></span><br><span class="line"><span class="comment">     *      抛出异常执行的降级方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderBlockHandler</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"触发熔断的降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">orderFallback</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"抛出异常执行的降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要被保护的方法上使用 @SentinelResource注解进行熔断配置。与Hystrix不同的是，Sentinel对抛出异常和熔断降级做了更加细致的区分，通过 blockHandler 指定熔断降级方法，通过 fallback 指定触发异常执行的降级方法。</p><h3 id="6-4-2-Rest实现熔断"><a href="#6-4-2-Rest实现熔断" class="headerlink" title="6.4.2    Rest实现熔断"></a>6.4.2    Rest实现熔断</h3><p>Spring Cloud Alibaba Sentinel 支持对  RestTemplate 的服务调用使用 Sentinel 进行保护，在构造RestTemplate bean的时候需要加上  @SentinelRestTemplate 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestOrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sentinel支持对restTemplate的服务调用使用sentinel方法.在构造</span></span><br><span class="line"><span class="comment">     * RestTemplate对象的时候,只需要加载<span class="doctag">@SentinelRestTemplate</span>即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 资源名:</span></span><br><span class="line"><span class="comment">     *      httpmethod:schema://host:port/path ：协议、主机、端口和路径</span></span><br><span class="line"><span class="comment">     *      httpmethod:schema://host:port ：协议、主机和端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SentinelRestTemplate</span>:</span></span><br><span class="line"><span class="comment">     *  异常降级</span></span><br><span class="line"><span class="comment">     *      fallback      : 降级方法</span></span><br><span class="line"><span class="comment">     *      fallbackClass : 降级配置类</span></span><br><span class="line"><span class="comment">     *  限流熔断</span></span><br><span class="line"><span class="comment">     *      blockHandler</span></span><br><span class="line"><span class="comment">     *      blockHandlerClass</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SentinelRestTemplate</span>(fallbackClass = ExceptionUtils<span class="class">.<span class="keyword">class</span>, <span class="title">fallback</span> </span>= <span class="string">"handleFallback"</span>,</span><br><span class="line">            blockHandler = <span class="string">"handleBlock"</span>, blockHandlerClass = ExceptionUtils<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">RestTemplate</span> <span class="title">restTemplate</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@SentinelRestTemplate 注解的属性支持限流( blockHandler ,  blockHandlerClass )和降级( fallback ,  fallbackClass )的处理。</li><li>其中 blockHandler 或  fallback 属性对应的方法必须是对应  blockHandlerClass 或fallbackClass 属性中的静态方法。</li><li>该方法的参数跟返回值跟org.springframework.http.client.ClientHttpRequestInterceptor#interceptor 方法一致，其中参数多出了一个  BlockException 参数用于获取 Sentinel 捕获的异常。</li></ul><p>比如上述  @SentinelRestTemplate 注解中  ExceptionUtil 的  handleException 属性对应的方法声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 熔断降级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态方法</span></span><br><span class="line"><span class="comment">     * 返回值: SentinelClientHttpResponse</span></span><br><span class="line"><span class="comment">     * 参数 : request , byte[] , clientRquestExcetion , blockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//限流熔断业务逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SentinelClientHttpResponse <span class="title">handleBlock</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution execution, BlockException ex)</span> </span>&#123;</span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">product.setProductName(<span class="string">"block"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SentinelClientHttpResponse(JSON.toJSONString(product));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常降级业务逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SentinelClientHttpResponse <span class="title">handleFallback</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                            ClientHttpRequestExecution execution, BlockException ex)</span> </span>&#123;</span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">product.setProductName(<span class="string">"Fallback"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelClientHttpResponse(JSON.toJSONString(product));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sentinel RestTemplate  限流的资源规则提供两种粒度：</p><ul><li>httpmethod:schema://host:port/path ：协议、主机、端口和路径</li><li>httpmethod:schema://host:port ：协议、主机和端口</li></ul><h3 id="6-4-3-Feign实现熔断"><a href="#6-4-3-Feign实现熔断" class="headerlink" title="6.4.3    Feign实现熔断"></a>6.4.3    Feign实现熔断</h3><p>Sentinel 适配了  Feign 组件。如果想使用，除了引入  <code>sentinel -starter</code> 的依赖外还需要 2 个步骤：</p><ul><li>配置文件打开 sentinel 对 feign 的支持： <code>feign.sentinel.enabled=true</code></li><li>加入 <code>openfeign starter</code> 依赖使  <code>sentinel starter</code> 中的自动化配置类生效：</li></ul><h4 id="6-4-3-1-引入依赖"><a href="#6-4-3-1-引入依赖" class="headerlink" title="6.4.3.1    引入依赖"></a>6.4.3.1    引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springcloud整合的openFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-4-3-2-开启sentinel-支持"><a href="#6-4-3-2-开启sentinel-支持" class="headerlink" title="6.4.3.2    开启sentinel 支持"></a>6.4.3.2    开启sentinel 支持</h4><p>在工程的application.yml中添加sentinel 对 feign 的支持</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment">#激活sentinel的支持</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="6-4-3-3-配置FeignClient"><a href="#6-4-3-3-配置FeignClient" class="headerlink" title="6.4.3.3    配置FeignClient"></a>6.4.3.3    配置FeignClient</h4><p>和使用Hystrix的方式基本一致，需要配置FeignClient接口以及通过 fallback 指定熔断降级方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明需要调用的微服务名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span></span></span><br><span class="line"><span class="comment"> *      name : 服务提供者的名称</span></span><br><span class="line"><span class="comment"> *      fallback : 配置熔断发生降级方法实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"service-product"</span>, fallback = ProductFeignClientCallBack<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置需要调用的微服务接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/product/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-3-4-配置熔断方法"><a href="#6-4-3-4-配置熔断方法" class="headerlink" title="6.4.3.4    配置熔断方法"></a>6.4.3.4    配置熔断方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现自定义的ProductFeginClient接口</span></span><br><span class="line"><span class="comment"> *      在接口实现类中编写熔断降级方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFeignClientCallBack</span> <span class="keyword">implements</span> <span class="title">ProductFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断降级的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setProductName(<span class="string">"feign调用触发熔断降级方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign  对应的接口中的资源名策略定义：httpmethod:protocol://requesturl。 @FeignClient 注解中的所有属性，Sentinel 都做了兼容。</p><p>ProductFeginClient 接口中方法 findById 对应的资源名为 GET: <a href="http://shop-service-product/product/{str}。" target="_blank" rel="noopener">http://shop-service-product/product/{str}。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-服务调用Feign入门&quot;&gt;&lt;a href=&quot;#1-服务调用Feign入门&quot; class=&quot;headerlink&quot; title=&quot;1.    服务调用Feign入门&quot;&gt;&lt;/a&gt;1.    服务调用Feign入门&lt;/h1&gt;&lt;p&gt;前面我们使用的RestTemplate实现REST API调用，代码大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&quot;/buy/&amp;#123;id&amp;#125;&quot;&lt;/span&gt;, method = RequestMethod.GET)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Product &lt;span class=&quot;title&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@PathVariable Long id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Product product = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    product = restTemplate.getForObject(&lt;span class=&quot;string&quot;&gt;&quot;http://service-product/product/1&quot;&lt;/span&gt;, Product&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; product;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由代码可知，我们是使用拼接字符串的方式构造URL的，该URL只有一个参数。但是，在现实中，URL中往往含有多个参数。这时候我们如果还用这种方式构造URL，那么就会非常痛苦。那应该如何解决？我们带着这样的问题进入到本章的学习。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringCloud" scheme="https://wgy1993.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(一)</title>
    <link href="https://wgy1993.gitee.io/archives/c069a57d.html"/>
    <id>https://wgy1993.gitee.io/archives/c069a57d.html</id>
    <published>2020-10-28T07:07:01.000Z</published>
    <updated>2020-10-28T07:20:20.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-微服务基础知识"><a href="#1-微服务基础知识" class="headerlink" title="1.    微服务基础知识"></a>1.    微服务基础知识</h1><h2 id="1-1-系统架构的演变"><a href="#1-1-系统架构的演变" class="headerlink" title="1.1    系统架构的演变"></a>1.1    系统架构的演变</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的应用架构已无法应对，分布式服务架构以及微服务架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><a id="more"></a><h3 id="1-1-1-单体应用架构"><a href="#1-1-1-单体应用架构" class="headerlink" title="1.1.1    单体应用架构"></a>1.1.1    单体应用架构</h3><p>Web应用程序发展的早期，大部分web工程(包含前端页面,web层代码,service层代码,dao层代码)是将所有的功能模块,打包到一起并放在一个web容器中运行。</p><p><img src="https://img-blog.csdnimg.cn/2020102814510464.png" alt="image-20201027174132522"></p><p>比如搭建一个电商系统：客户下订单，商品展示，用户管理。这种将所有功能都部署在一个web容器中运行的系统就叫做单体架构。</p><p><strong>优点：</strong>开发简单，适用于小型应用</p><p><strong>缺点：</strong>不易扩展，维护。代码耦合</p><h3 id="1-1-2-垂直应用架构"><a href="#1-1-2-垂直应用架构" class="headerlink" title="1.1.2    垂直应用架构"></a>1.1.2    垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率</p><p><img src="https://img-blog.csdnimg.cn/20201028145115914.png" alt="image-20201027174603196"></p><p><strong>优点：</strong></p><ul><li>解决高并发问题</li><li>针对不同的模块优化</li><li>方便水平扩展，容错</li></ul><p><strong>缺点：</strong></p><ul><li>系统间相互独立</li><li>重复开发工作</li></ul><h3 id="1-1-3-分布式SOA架构"><a href="#1-1-3-分布式SOA架构" class="headerlink" title="1.1.3    分布式SOA架构"></a>1.1.3    分布式SOA架构</h3><h4 id="1-1-3-1-什么是SOA"><a href="#1-1-3-1-什么是SOA" class="headerlink" title="1.1.3.1    什么是SOA"></a>1.1.3.1    什么是SOA</h4><p>SOA 全称为 Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p><p>站在功能的角度，把业务逻辑抽象成可复用、可组装的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p><p>通过上面的描述可以发现 SOA 有如下几个特点：分布式、可重用、扩展灵活、松耦合</p><h4 id="1-1-3-2-SOA架构"><a href="#1-1-3-2-SOA架构" class="headerlink" title="1.1.3.2    SOA架构"></a>1.1.3.2    SOA架构</h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求</p><p><img src="https://img-blog.csdnimg.cn/20201028145121641.png" alt="image-20201027174926195"></p><p><strong>优点：</strong></p><ul><li>抽取公共的功能为服务,提高开发效率</li><li>对不同的服务进行集群化部署解决系统压力</li><li>基于ESB/DUBBO减少系统耦合</li></ul><p><strong>缺点：</strong></p><ul><li>抽取服务的粒度较大</li><li>服务提供方与调用方接口耦合度较高</li></ul><h3 id="1-1-4-微服务架构"><a href="#1-1-4-微服务架构" class="headerlink" title="1.1.4    微服务架构"></a>1.1.4    微服务架构</h3><p><img src="https://img-blog.csdnimg.cn/20201028145127596.png" alt="image-20201027175043843"></p><p><strong>优点：</strong></p><ul><li>通过服务的原子化拆分，以及微服务的独立打包、部署和升级，小团队的交付周期将缩短，运维成本也将大幅度下降</li><li>微服务遵循单一原则。微服务之间采用Restful等轻量协议传输。</li></ul><p><strong>缺点：</strong></p><ul><li>微服务过多，服务治理成本高，不利于系统维护。</li><li>分布式系统开发的技术成本高（容错、分布式事务等）。</li></ul><h3 id="1-1-5-SOA与微服务的关系"><a href="#1-1-5-SOA与微服务的关系" class="headerlink" title="1.1.5    SOA与微服务的关系"></a>1.1.5    SOA与微服务的关系</h3><p><strong>SOA</strong>（ <code>Service Oriented Architecture</code> ）“面向服务的架构”:他是一种设计方法，其中包含多个服务， 服务之间通过相互依赖最终提供一系列的功能。一个服务通常以独立的形式存在与操作系统进程中。各个服务之间通过网络调用。</p><p><strong>微服务架构:</strong>其实和 SOA 架构类似,微服务是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需<br>要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。<br>这些小应用之间通过服务完成交互和集成。</p><table><thead><tr><th>功能</th><th>SOA</th><th>微服务</th></tr></thead><tbody><tr><td>组件大小</td><td>大块业务逻辑</td><td>单独任务或小块业务逻辑</td></tr><tr><td>耦合</td><td>通常松耦合</td><td>总是松耦合</td></tr><tr><td>公司架构</td><td>任何类型</td><td>小型、专注于功能交叉团队</td></tr><tr><td>管理</td><td>着重中央管理</td><td>着重分散管理</td></tr><tr><td>目标</td><td>确保应用能够交互操作</td><td>执行新功能、快速拓展开发团队</td></tr></tbody></table><h2 id="1-2-分布式核心知识"><a href="#1-2-分布式核心知识" class="headerlink" title="1.2    分布式核心知识"></a>1.2    分布式核心知识</h2><h3 id="1-2-1-分布式中的远程调用"><a href="#1-2-1-分布式中的远程调用" class="headerlink" title="1.2.1    分布式中的远程调用"></a>1.2.1    分布式中的远程调用</h3><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。远程调用通常包含两个部分：序列化和通信协议。常见的序列化协议包括json、xml、hession、protobuf、thrift、text、bytes等，目前主流的远程调用技术有基于HTTP的RESTful接口以及基于TCP的RPC协议。</p><h4 id="1-2-1-1-RESTful接口"><a href="#1-2-1-1-RESTful接口" class="headerlink" title="1.2.1.1    RESTful接口"></a>1.2.1.1    RESTful接口</h4><p>REST，即Representational State Transfer的缩写，如果一个架构符合REST原则，就称它为RESTful架构。</p><ul><li><p><strong>资源（Resources）</strong></p><p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p></li><li><p><strong>表现层（Representation）</strong></p><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。</p></li><li><p><strong>状态转化（State Transfer）</strong></p><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p></li></ul><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><ul><li>每一个URI代表一种资源；</li><li>客户端和服务器之间，传递这种资源的某种表现层；</li><li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</li></ul><h4 id="1-2-1-2-RPC协议"><a href="#1-2-1-2-RPC协议" class="headerlink" title="1.2.1.2    RPC协议"></a>1.2.1.2    RPC协议</h4><p>RPC（Remote Procedure Call ） 一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服务调用更简单、透明。RPC框架负责屏蔽底层的传输方式（TCP或者UDP）、序列化方式（XML/JSON/二进制）和通信细节。开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。</p><p><img src="https://img-blog.csdnimg.cn/20201028145133873.png" alt="image-20201027180232681"></p><p><img src="https://img-blog.csdnimg.cn/20201028145139260.png" alt="image-20201027180246417"></p><h4 id="1-2-1-3-区别与联系"><a href="#1-2-1-3-区别与联系" class="headerlink" title="1.2.1.3    区别与联系"></a>1.2.1.3    区别与联系</h4><table><thead><tr><th>比较项</th><th>RESTful</th><th>RPC</th></tr></thead><tbody><tr><td>通讯协议</td><td>HTTP</td><td>一般使用TCP</td></tr><tr><td>性能</td><td>略低</td><td>较高</td></tr><tr><td>灵活度</td><td>高</td><td>低</td></tr><tr><td>应用</td><td>微服务架构</td><td>SOA架构</td></tr></tbody></table><ul><li><p>HTTP相对更规范，更标准，更通用，无论哪种语言都支持http协议。如果你是对外开放API，例如开放平台，外部的编程语言多种多样，你无法拒绝对每种语言的支持，现在开源中间件，基本最先支持的几个协议都包含RESTful。</p></li><li><p>RPC 框架作为架构微服务化的基础组件，它能大大降低架构微服务化的成本，提高调用方与服务提供方的研发效率，屏蔽跨进程调用函数（服务）的各类复杂细节。让调用方感觉就像调用本地函数一样调用远端函数、让服务提供方感觉就像实现一个本地函数一样来实现服务。</p></li></ul><h3 id="1-2-2-分布式中的CAP原理"><a href="#1-2-2-分布式中的CAP原理" class="headerlink" title="1.2.2    分布式中的CAP原理"></a>1.2.2    分布式中的CAP原理</h3><p>现如今，对于多数大型互联网应用，分布式系统（distributed system）正变得越来越重要。分布式系统的最大难点，就是各个节点的状态如何同步。CAP 定理是这方面的基本定理，也是理解分布式系统的起点。</p><p>CAP理论由 Eric Brewer 在ACM研讨会上提出，而后CAP被奉为分布式领域的重要理论。分布式系统的CAP理论，首先把分布式系统中的三个特性进行了如下归纳：</p><p><img src="https://img-blog.csdnimg.cn/2020102814514539.png" alt="image-20201027180623297"></p><p><strong>Consistency（一致性）</strong>：数据一致更新，所有数据的变化都是同步的<br><strong>Availability（可用性）</strong>：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求<br><strong>Partition tolerance（分区容忍性）</strong>：某个节点的故障，并不影响整个系统的运行</p><blockquote><p>通过学习CAP理论，我们得知任何分布式系统只可同时满足二点，没法三者兼顾，既然一个分布式系统无法同时满足一致性、可用性、分区容错性三个特点，所以我们就需要抛弃一样：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020102814515750.png" alt="image-20201027180701935"></p><table><thead><tr><th>选择</th><th>说明</th></tr></thead><tbody><tr><td>CA</td><td>放弃分区容错性，加强一致性和可用性，其实就是传统的关系型数据库的选择</td></tr><tr><td>AP</td><td>放弃一致性（这里说的一致性是强一致性），追求分区容错性和可用性，这是很多分布式系统设计时的选择，例如很多NoSQL系统就是如此</td></tr><tr><td>CP</td><td>放弃可用性，追求一致性和分区容错性，基本不会选择，网络问题会直接让整个系统不可用</td></tr></tbody></table><p>需要明确一点的是，在一个分布式系统当中，分区容忍性和可用性是最基本的需求，所以在分布是系统中，我们的系统最当关注的就是A（可用性）P（容忍性），通过补偿的机制寻求数据的一致性</p><p><img src="https://img-blog.csdnimg.cn/20201028145202281.png" alt="image-20201027180941287"></p><h2 id="1-3-常见微服务框架"><a href="#1-3-常见微服务框架" class="headerlink" title="1.3    常见微服务框架"></a>1.3    常见微服务框架</h2><h3 id="1-3-1-SpringCloud"><a href="#1-3-1-SpringCloud" class="headerlink" title="1.3.1    SpringCloud"></a>1.3.1    SpringCloud</h3><p><img src="https://img-blog.csdnimg.cn/20201028145207239.png" alt="image-20201027181119484"></p><p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">Spring Cloud</a>是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h3 id="1-3-2-ServiceComb"><a href="#1-3-2-ServiceComb" class="headerlink" title="1.3.2    ServiceComb"></a>1.3.2    ServiceComb</h3><p><img src="https://img-blog.csdnimg.cn/20201028145213857.png" alt="image-20201027181227178"></p><p><a href="http://servicecomb.apache.org/cn/" target="_blank" rel="noopener">Apache ServiceComb</a> 是业界第一个Apache微服务顶级项目， 是一个开源微服务解决方案,致力于帮助企业、用户和开发者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。其提供一站式开源微服务解决方案，融合SDK框架级、0侵入ServiceMesh场景并支持多语言。</p><h3 id="1-3-3-ZeroC-ICE"><a href="#1-3-3-ZeroC-ICE" class="headerlink" title="1.3.3    ZeroC ICE"></a>1.3.3    ZeroC ICE</h3><p><img src="https://img-blog.csdnimg.cn/20201028145219572.png" alt="image-20201027181317969"></p><p><a href="https://zeroc.com/products/ice" target="_blank" rel="noopener">ZeroC IceGrid</a> 是ZeroC公司的杰作，继承了CORBA的血统，是新一代的面向对象的分布式系统中间件。作为一种微服务架构，它基于RPC框架发展而来，具有良好的性能与分布式能力。</p><h1 id="2-SpringCloud概述"><a href="#2-SpringCloud概述" class="headerlink" title="2.    SpringCloud概述"></a>2.    SpringCloud概述</h1><h2 id="2-1-微服务中的相关概念"><a href="#2-1-微服务中的相关概念" class="headerlink" title="2.1    微服务中的相关概念"></a>2.1    微服务中的相关概念</h2><h3 id="2-1-1-服务注册与发现"><a href="#2-1-1-服务注册与发现" class="headerlink" title="2.1.1    服务注册与发现"></a>2.1.1    服务注册与发现</h3><p><strong>服务注册：</strong>服务实例将自身服务信息注册到注册中心。这部分服务信息包括服务所在主机IP和提供服务的Port，以及暴露服务自身状态以及访问协议等信息。</p><p><strong>服务发现：</strong>服务实例请求注册中心获取所依赖服务信息。服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。</p><p><img src="https://img-blog.csdnimg.cn/20201028145226149.png" alt="image-20201027181438919"></p><h3 id="2-1-2-负载均衡"><a href="#2-1-2-负载均衡" class="headerlink" title="2.1.2    负载均衡"></a>2.1.2    负载均衡</h3><p>负载均衡是高可用网络基础架构的关键组件，通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性。</p><p><img src="https://img-blog.csdnimg.cn/20201028145231706.png" alt="image-20201027181508135"></p><h3 id="2-1-3-熔断"><a href="#2-1-3-熔断" class="headerlink" title="2.1.3    熔断"></a>2.1.3    熔断</h3><p><strong>熔断</strong>这一概念来源于电子工程中的断路器（Circuit Breaker）。在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p><p><img src="https://img-blog.csdnimg.cn/20201028145236907.png" alt="image-20201027181538434"></p><h3 id="2-1-4-链路追踪"><a href="#2-1-4-链路追踪" class="headerlink" title="2.1.4    链路追踪"></a>2.1.4    链路追踪</h3><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪</p><p><img src="https://img-blog.csdnimg.cn/2020102814524335.png" alt="image-20201027181647816"></p><h3 id="2-1-5-API网关"><a href="#2-1-5-API网关" class="headerlink" title="2.1.5    API网关"></a>2.1.5    API网关</h3><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：</p><ul><li>客户端需要调用不同的url地址，增加难度</li><li>再一定的场景下，存在跨域请求的问题</li><li>每个微服务都需要进行单独的身份认证</li></ul><p>针对这些问题，API网关顺势而生。</p><p><strong>API网关</strong>直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后，各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。</p><p><img src="https://img-blog.csdnimg.cn/20201028145249210.png" alt="image-20201027181806291"></p><h2 id="2-2-SpringCloud的介绍"><a href="#2-2-SpringCloud的介绍" class="headerlink" title="2.2    SpringCloud的介绍"></a>2.2    SpringCloud的介绍</h2><p><img src="https://img-blog.csdnimg.cn/20201028145254327.png" alt="image-20201027181838018"></p><p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">Spring Cloud</a>是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如<strong>服务发现注册</strong>、<strong>配置中心</strong>、<strong>消息总线</strong>、<strong>负载均衡</strong>、<strong>断路器</strong>、<strong>数据监控</strong>等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h2 id="2-3-SpringCloud的架构"><a href="#2-3-SpringCloud的架构" class="headerlink" title="2.3    SpringCloud的架构"></a>2.3    SpringCloud的架构</h2><h3 id="2-3-1-SpringCloud中的核心组件"><a href="#2-3-1-SpringCloud中的核心组件" class="headerlink" title="2.3.1    SpringCloud中的核心组件"></a>2.3.1    SpringCloud中的核心组件</h3><p><strong>Spring Cloud</strong>的本质是在 Spring Boot 的基础上，增加了一堆微服务相关的规范，并对应用上下文（Application Context）进行了功能增强。既然 Spring Cloud 是规范，那么就需要去实现，目前Spring Cloud 规范已有 Spring官方，Spring Cloud Netflix，Spring Cloud Alibaba等实现。通过组件化的方式，Spring Cloud将这些实现整合到一起构成全家桶式的微服务技术栈。</p><h4 id="2-3-1-1-Spring-Cloud-Netflix组件"><a href="#2-3-1-1-Spring-Cloud-Netflix组件" class="headerlink" title="2.3.1.1    Spring Cloud Netflix组件"></a>2.3.1.1    Spring Cloud Netflix组件</h4><table><thead><tr><th>组件名称</th><th>作用</th></tr></thead><tbody><tr><td>Eureka</td><td>服务注册中心</td></tr><tr><td>Ribbon</td><td>客户端负载均衡</td></tr><tr><td>Feign</td><td>声明式服务调用</td></tr><tr><td>Hystrix</td><td>客户端容错保护</td></tr><tr><td>Zuul</td><td>API服务网关</td></tr></tbody></table><h4 id="2-3-1-2-Spring-Cloud-Alibaba组件"><a href="#2-3-1-2-Spring-Cloud-Alibaba组件" class="headerlink" title="2.3.1.2    Spring Cloud Alibaba组件"></a>2.3.1.2    Spring Cloud Alibaba组件</h4><table><thead><tr><th>组件名称</th><th>作用</th></tr></thead><tbody><tr><td>Nacos</td><td>服务注册中心</td></tr><tr><td>Sentinel</td><td>客户端容错保护</td></tr></tbody></table><h4 id="2-3-1-3-Spring-Cloud原生及其他组件"><a href="#2-3-1-3-Spring-Cloud原生及其他组件" class="headerlink" title="2.3.1.3    Spring Cloud原生及其他组件"></a>2.3.1.3    Spring Cloud原生及其他组件</h4><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Consul</td><td>服务注册中心</td></tr><tr><td>Config</td><td>分布式配置中心</td></tr><tr><td>Gateway</td><td>API服务网关</td></tr><tr><td>Sleuth/Zipkin</td><td>分布式链路追踪</td></tr></tbody></table><h3 id="2-3-2-SpringCloud的体系结构"><a href="#2-3-2-SpringCloud的体系结构" class="headerlink" title="2.3.2    SpringCloud的体系结构"></a>2.3.2    SpringCloud的体系结构</h3><p><img src="https://img-blog.csdnimg.cn/20201028145259591.png" alt="image-20201027182313703"></p><p>从上图可以看出Spring Cloud各个组件相互配合，合作支持了一套完整的微服务架构。</p><ul><li><strong>注册中心</strong>负责服务的注册与发现，很好将各服务连接起来</li><li><strong>断路器</strong>负责监控服务之间的调用情况，连续多次失败进行熔断保护。</li><li><strong>API网关</strong>负责转发所有对外的请求和服务</li><li><strong>配置中心</strong>提供了统一的配置信息管理服务,可以实时的通知各个服务获取最新的配置信息</li><li><strong>链路追踪技术</strong>可以将所有的请求数据记录下来，方便我们进行后续分析</li><li>各个组件又提供了功能完善的<strong>dashboard监控平台</strong>,可以方便的监控各组件的运行状况</li></ul><h1 id="3-案例搭建"><a href="#3-案例搭建" class="headerlink" title="3.    案例搭建"></a>3.    案例搭建</h1><p>使用微服务架构的分布式系统,微服务之间通过网络通信。我们通过服务提供者与服务消费者来描述微服务间的调用关系。</p><blockquote><p>服务提供者：服务的被调用方，提供调用接口的一方<br>服务消费者：服务的调用方，依赖于其他服务的一方</p></blockquote><p>我们以电商系统中常见的用户下单为例，用户向订单微服务发起一个购买的请求。在进行保存订单之前需要调用商品微服务查询当前商品库存，单价等信息。在这种场景下，订单微服务就是一个服务消费者，商品微服务就是一个服务提供者</p><p><img src="https://img-blog.csdnimg.cn/20201028145305315.png" alt="image-20201027183627253"></p><h2 id="3-1-数据库表"><a href="#3-1-数据库表" class="headerlink" title="3.1    数据库表"></a>3.1    数据库表</h2><p><strong>商品表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;tb_product&#96; (</span><br><span class="line">    &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;product_name&#96; varchar(40) DEFAULT NULL COMMENT &#39;名称&#39;,</span><br><span class="line">    &#96;status&#96; int(2) DEFAULT NULL COMMENT &#39;状态&#39;,</span><br><span class="line">    &#96;price&#96; decimal(10,2) DEFAULT NULL COMMENT &#39;单价&#39;,</span><br><span class="line">    &#96;product_desc&#96; varchar(255) DEFAULT NULL COMMENT &#39;描述&#39;,</span><br><span class="line">    &#96;caption&#96; varchar(255) DEFAULT NULL COMMENT &#39;标题&#39;,</span><br><span class="line">    &#96;inventory&#96; int(11) DEFAULT NULL COMMENT &#39;库存&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><h2 id="3-2-搭建环境"><a href="#3-2-搭建环境" class="headerlink" title="3.2    搭建环境"></a>3.2    搭建环境</h2><h3 id="3-2-1-创建父工程shop-parent"><a href="#3-2-1-创建父工程shop-parent" class="headerlink" title="3.2.1    创建父工程shop_parent"></a>3.2.1    创建父工程shop_parent</h3><p>在IDEA中创建父工程 shop_parent 并引入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-snapshot-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-milestone-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-release-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-snapshot-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-milestone-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-创建微服务工程模块"><a href="#3-2-2-创建微服务工程模块" class="headerlink" title="3.2.2    创建微服务工程模块"></a>3.2.2    创建微服务工程模块</h3><ul><li>创建订单微服务模块 shop_service_order</li><li>创建商品微服务模块 shop_service_product</li></ul><h2 id="3-3-搭建商品微服务"><a href="#3-3-搭建商品微服务" class="headerlink" title="3.3    搭建商品微服务"></a>3.3    搭建商品微服务</h2><h3 id="3-3-1-编写实体类"><a href="#3-3-1-编写实体类" class="headerlink" title="3.3.1    编写实体类"></a>3.3.1    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> String productDesc;</span><br><span class="line">    <span class="keyword">private</span> String caption;</span><br><span class="line">    <span class="keyword">private</span> Integer inventory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用了 lombok简化实体类的开发<br>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率</p></blockquote><h3 id="3-3-2-编写dao接口"><a href="#3-3-2-编写dao接口" class="headerlink" title="3.3.2    编写dao接口"></a>3.3.2    编写dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Product</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-编写service层"><a href="#3-3-3-编写service层" class="headerlink" title="3.3.3    编写service层"></a>3.3.3    编写service层</h3><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Product <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Product product)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Product product)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productDao.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        productDao.save(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        productDao.save(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        productDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-编写web层"><a href="#3-3-4-编写web层" class="headerlink" title="3.3.4    编写web层"></a>3.3.4    编写web层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">""</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestBody Product product)</span> </span>&#123;</span><br><span class="line">        productService.save(product);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"保存成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-5-配置启动类"><a href="#3-3-5-配置启动类" class="headerlink" title="3.3.5    配置启动类"></a>3.3.5    配置启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProductApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-6-配置yml文件"><a href="#3-3-6-配置yml文件" class="headerlink" title="3.3.6    配置yml文件"></a>3.3.6    配置yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-product</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-4-搭建订单微服务"><a href="#3-4-搭建订单微服务" class="headerlink" title="3.4    搭建订单微服务"></a>3.4    搭建订单微服务</h2><h3 id="3-4-1-编写实体类"><a href="#3-4-1-编写实体类" class="headerlink" title="3.4.1    编写实体类"></a>3.4.1    编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> String productDesc;</span><br><span class="line">    <span class="keyword">private</span> String caption;</span><br><span class="line">    <span class="keyword">private</span> Integer inventory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-编写web层"><a href="#3-4-2-编写web层" class="headerlink" title="3.4.2    编写web层"></a>3.4.2    编写web层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数:商品id</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *      1.需要配置商品对象</span></span><br><span class="line"><span class="comment">     *      2.需要调用商品服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如何调用商品服务?</span></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-服务调用"><a href="#3-5-服务调用" class="headerlink" title="3.5    服务调用"></a>3.5    服务调用</h2><p>前文已经编写了两个基础的微服务，在用户下单时需要调用商品微服务获取商品数据。那应该怎么做呢？总人皆知商品微服务提供了供人调用的HTTP接口。所以可以再下定单的时候使用http请求的相关工具类完成，如常见的HttpClient，OkHttp，当然也可以使用Spring提供的RestTemplate</p><h3 id="3-5-1-RestTemplate介绍"><a href="#3-5-1-RestTemplate介绍" class="headerlink" title="3.5.1    RestTemplate介绍"></a>3.5.1    RestTemplate介绍</h3><p>Spring框架提供的RestTemplate类可用于在应用中调用rest服务，它简化了与http服务的通信方式，统一了RESTful的标准，封装了http链接， 我们只需要传入url及返回值类型即可。相较于之前常用的HttpClient，RestTemplate是一种更优雅的调用RESTful服务的方式。</p><p>在Spring应用程序中访问第三方REST服务与使用Spring RestTemplate类有关。RestTemplate类的设计原则与许多其他Spring 模板类(例如JdbcTemplate、JmsTemplate)相同，为执行复杂任务提供了一种具有默认行为的简化方法。</p><p>RestTemplate默认依赖JDK提供http连接的能力（HttpURLConnection），如果有需要的话也可以通过setRequestFactory方法替换为例如 Apache HttpComponents、Netty或OkHttp等其它HTTP library。</p><p>考虑到RestTemplate类是为调用REST服务而设计的，因此它的主要方法与REST的基础紧密相连就不足为奇了，后者是HTTP协议的方法:HEAD、GET、POST、PUT、DELETE和OPTIONS。例如，RestTemplate类具有headForHeaders()、getForObject()、postForObject()、put()和delete()等方法。</p><h3 id="3-5-2-RestTemplate方法介绍"><a href="#3-5-2-RestTemplate方法介绍" class="headerlink" title="3.5.2    RestTemplate方法介绍"></a>3.5.2    RestTemplate方法介绍</h3><p><img src="https://img-blog.csdnimg.cn/20201028145313135.png" alt="image-20201027191652471"></p><h3 id="3-5-3-通过RestTemplate调用微服务"><a href="#3-5-3-通过RestTemplate调用微服务" class="headerlink" title="3.5.3    通过RestTemplate调用微服务"></a>3.5.3    通过RestTemplate调用微服务</h3><p>1、在 shop_service_order工程中OrderApplication启动类 中配置RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用spring提供的RestTemplate发送http请求到商品服务</span></span><br><span class="line"><span class="comment">     *      1.创建RestTemplate对象交给容器管理</span></span><br><span class="line"><span class="comment">     *      2.在使用的时候,调用其方法完成操作 (getXX,postxxx)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写下订单方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数:商品id</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *      1.需要配置商品对象</span></span><br><span class="line"><span class="comment">     *      2.需要调用商品服务</span></span><br><span class="line"><span class="comment">     *          使用java中的urlconnection,httpclient,okhttp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如何调用商品服务?</span></span><br><span class="line">        product = restTemplate.getForObject(<span class="string">"http://127.0.0.1:9001/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-硬编码存在的问题"><a href="#3-5-4-硬编码存在的问题" class="headerlink" title="3.5.4    硬编码存在的问题"></a>3.5.4    硬编码存在的问题</h3><p>至此已经可以通过RestTemplate调用商品微服务的RESTFul API接口。但是我们把提供者的网络地址（ip，端口）等硬编码到了代码中，这种做法存在许多问题：</p><ul><li>应用场景有局限</li><li>无法动态调整</li></ul><p>那么应该怎么解决呢，就需要通过注册中心动态的对服务注册和服务发现</p><h1 id="4-服务注册Eureka基础"><a href="#4-服务注册Eureka基础" class="headerlink" title="4.    服务注册Eureka基础"></a>4.    服务注册Eureka基础</h1><h2 id="4-1-微服务的注册中心"><a href="#4-1-微服务的注册中心" class="headerlink" title="4.1    微服务的注册中心"></a>4.1    微服务的注册中心</h2><p>注册中心可以说是微服务架构中的”通讯录“，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就这里找到服务的地址，进行调用。</p><p><img src="https://img-blog.csdnimg.cn/20201028145319153.png" alt="image-20201028111911580"></p><h3 id="4-1-1-注册中心的主要作用"><a href="#4-1-1-注册中心的主要作用" class="headerlink" title="4.1.1    注册中心的主要作用"></a>4.1.1    注册中心的主要作用</h3><p>服务注册中心（下称注册中心）是微服务架构非常重要的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能：</p><ul><li><p>服务发现：</p><ul><li>服务注册/反注册：保存服务提供者和服务调用者的信息</li><li>服务订阅/取消订阅：服务调用者订阅服务提供者的信息，最好有实时推送的功能</li><li>服务路由（可选）：具有筛选整合服务提供者的能力。</li></ul></li><li><p>服务配置：</p><ul><li>配置订阅：服务提供者和服务调用者订阅微服务相关的配置</li><li>配置下发：主动将配置推送给服务提供者和服务调用者</li></ul></li><li><p>服务健康检测</p><ul><li>检测服务提供者的健康情况</li></ul></li></ul><h3 id="4-1-2-常见的注册中心"><a href="#4-1-2-常见的注册中心" class="headerlink" title="4.1.2    常见的注册中心"></a>4.1.2    常见的注册中心</h3><h4 id="4-1-2-1-Zookeeper"><a href="#4-1-2-1-Zookeeper" class="headerlink" title="4.1.2.1    Zookeeper"></a>4.1.2.1    Zookeeper</h4><p>zookeeper它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。简单来说zookeeper=文件系统+监听通知机制。</p><h4 id="4-1-2-2-Eureka"><a href="#4-1-2-2-Eureka" class="headerlink" title="4.1.2.2    Eureka"></a>4.1.2.2    Eureka</h4><p>Eureka是在Java语言上，基于Restful Api开发的服务注册与发现组件，Springcloud Netflix中的重要组件</p><h4 id="4-1-2-3-Consul"><a href="#4-1-2-3-Consul" class="headerlink" title="4.1.2.3    Consul"></a>4.1.2.3    Consul</h4><p>Consul是由HashiCorp基于Go语言开发的支持多数据中心分布式高可用的服务发布和注册服务软件，采用Raft算法保证服务的一致性，且支持健康检查。</p><h4 id="4-1-2-4-Nacos"><a href="#4-1-2-4-Nacos" class="headerlink" title="4.1.2.4    Nacos"></a>4.1.2.4    Nacos</h4><p>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。简单来说 Nacos 就是注册中心 + 配置中心的组合，提供简单易用的特性集，帮助我们解决微服务开发必会涉及到的服务注册与发现，服务配置，服务管理等问题。Nacos 还是 Spring Cloud Alibaba 组件之一，负责服务注册与发现。</p><p>最后我们通过一张表格大致了解Eureka、Consul、Zookeeper的异同点。选择什么类型的服务注册与发现组件可以根据自身项目要求决定。</p><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>一致性算法</th><th>服务健康检查</th><th>对外暴露接口</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>无</td><td>可配支持</td><td>HTTP</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>Raft</td><td>支持</td><td>HTTP/DNS</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>Paxos</td><td>支持</td><td>客户端</td></tr><tr><td>Nacos</td><td>Java</td><td>AP</td><td>Raft</td><td>支持</td><td>HTTP</td></tr></tbody></table><h2 id="4-2-Eureka的概述"><a href="#4-2-Eureka的概述" class="headerlink" title="4.2    Eureka的概述"></a>4.2    Eureka的概述</h2><h3 id="4-2-1-Eureka的基础知识"><a href="#4-2-1-Eureka的基础知识" class="headerlink" title="4.2.1    Eureka的基础知识"></a>4.2.1    Eureka的基础知识</h3><p>Eureka是Netflix开发的服务发现框架，SpringCloud将它集成在自己的子项目spring-cloud-netflix中，实现SpringCloud的服务发现功能。</p><p><img src="https://img-blog.csdnimg.cn/20201028145324583.png" alt="image-20201028112618238"></p><p>上图简要描述了Eureka的基本架构，由3个角色组成：</p><ul><li>Eureka Server<ul><li>提供服务注册和发现</li></ul></li><li>Service Provider<ul><li>服务提供方</li><li>将自身服务注册到Eureka，从而使服务消费方能够找到</li></ul></li><li>Service Consumer<ul><li>服务消费方</li><li>从Eureka获取注册服务列表，从而能够消费服务</li></ul></li></ul><h3 id="4-2-2-Eureka的交互流程与原理"><a href="#4-2-2-Eureka的交互流程与原理" class="headerlink" title="4.2.2    Eureka的交互流程与原理"></a>4.2.2    Eureka的交互流程与原理</h3><p><img src="https://img-blog.csdnimg.cn/20201028145331327.png" alt="image-20201028114453143"></p><p>图是来自Eureka官方的架构图，大致描述了Eureka集群的工作过程。图中包含的组件非常多，可能比较难以理解，我们用通俗易懂的语言解释一下：</p><ul><li>Application Service 相当于本书中的服务提供者，Application Client相当于服务消费者；</li><li>Make Remote Call，可以简单理解为调用RESTful API；</li><li>us-east-1c、us-east-1d等都是zone，它们都属于us-east-1这个region；</li></ul><p><strong>由图可知，Eureka包含两个组件：Eureka Server 和 Eureka Client，它们的作用如下</strong>：</p><ul><li>Eureka Client是一个Java客户端，用于简化与Eureka Server的交互；</li><li>Eureka Server提供服务发现的能力，各个微服务启动时，会通过Eureka Client向Eureka Server进行注册自己的信息（例如网络信息），Eureka Server会存储该服务的信息；</li><li>微服务启动后，会周期性地向Eureka Server发送心跳（默认周期为30秒）以续约自己的信息。如果Eureka Server在一定时间内没有接收到某个微服务节点的心跳，Eureka Server将会注销该微服务节点（默认90秒）；</li><li>每个Eureka Server同时也是Eureka Client，多个Eureka Server之间通过复制的方式完成服务注册表的同步；</li><li>Eureka Client会缓存Eureka Server中的信息。即使所有的Eureka Server节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者。</li></ul><p>综上，Eureka通过心跳检测、健康检查和客户端缓存等机制，提高了系统的灵活性、可伸缩性和可用性。</p><p><img src="https://img-blog.csdnimg.cn/20201028145339758.png" alt="image-20201028114706456"></p><h2 id="4-3-搭建Eureka注册中心"><a href="#4-3-搭建Eureka注册中心" class="headerlink" title="4.3    搭建Eureka注册中心"></a>4.3    搭建Eureka注册中心</h2><h3 id="4-3-1-搭建Eureka服务中心"><a href="#4-3-1-搭建Eureka服务中心" class="headerlink" title="4.3.1    搭建Eureka服务中心"></a>4.3.1    搭建Eureka服务中心</h3><h4 id="4-3-1-1-引入maven坐标"><a href="#4-3-1-1-引入maven坐标" class="headerlink" title="4.3.1.1    引入maven坐标"></a>4.3.1.1    引入maven坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-1-2-配置application-yml"><a href="#4-3-1-2-配置application-yml" class="headerlink" title="4.3.1.2    配置application.yml"></a>4.3.1.2    配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span> <span class="comment">#端口</span></span><br><span class="line"><span class="comment">#配置eureka server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#是否从eureka中获取注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#配置暴露给Eureka Client的请求地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="4-3-1-3-配置启动类"><a href="#4-3-1-3-配置启动类" class="headerlink" title="4.3.1.3    配置启动类"></a>4.3.1.3    配置启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活eureakaserver</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-服务注册中心管理后台"><a href="#4-3-2-服务注册中心管理后台" class="headerlink" title="4.3.2    服务注册中心管理后台"></a>4.3.2    服务注册中心管理后台</h3><p>打开浏览器访问 <a href="http://localhost:9000即可进入EurekaServer内置的管理控制台,显示效果如下">http://localhost:9000即可进入EurekaServer内置的管理控制台,显示效果如下</a></p><p><img src="https://img-blog.csdnimg.cn/20201028145345950.png" alt="image-20201028115228061"></p><h2 id="4-4-服务注册到Eureka注册中心"><a href="#4-4-服务注册到Eureka注册中心" class="headerlink" title="4.4    服务注册到Eureka注册中心"></a>4.4    服务注册到Eureka注册中心</h2><h3 id="4-4-1-商品服务注册"><a href="#4-4-1-商品服务注册" class="headerlink" title="4.4.1    商品服务注册"></a>4.4.1    商品服务注册</h3><h4 id="4-4-1-1-引入maven坐标"><a href="#4-4-1-1-引入maven坐标" class="headerlink" title="4.4.1.1    引入maven坐标"></a>4.4.1.1    引入maven坐标</h4><p>pom文件中添加eureka client的相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入EurekaClient--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-2-配置application-yml文件"><a href="#4-4-1-2-配置application-yml文件" class="headerlink" title="4.4.1.2    配置application.yml文件"></a>4.4.1.2    配置application.yml文件</h4><p>添加Eureka Server的主机地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-product</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-3-启动类添加服务注册注解"><a href="#4-4-1-3-启动类添加服务注册注解" class="headerlink" title="4.4.1.3    启动类添加服务注册注解"></a>4.4.1.3    启动类添加服务注册注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//激活eurekaClient</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProductApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从Spring Cloud Edgware版本开始， @EnableDiscoveryClient 或 @EnableEurekaClient 可省略。只需加上相关依赖，并进行相应配置，即可将微服务注册到服务发现组件上。</p></blockquote><h3 id="4-4-2-订单服务注册"><a href="#4-4-2-订单服务注册" class="headerlink" title="4.4.2    订单服务注册"></a>4.4.2    订单服务注册</h3><h4 id="4-4-2-1-引入maven坐标"><a href="#4-4-2-1-引入maven坐标" class="headerlink" title="4.4.2.1    引入maven坐标"></a>4.4.2.1    引入maven坐标</h4><p>pom文件中添加eureka client的相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入EurekaClient--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-2-配置application-yml文件"><a href="#4-4-2-2-配置application-yml文件" class="headerlink" title="4.4.2.2    配置application.yml文件"></a>4.4.2.2    配置application.yml文件</h4><p>添加Eureka Server的主机地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-order</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br></pre></td></tr></table></figure><h2 id="4-5-Eureka中的自我保护"><a href="#4-5-Eureka中的自我保护" class="headerlink" title="4.5    Eureka中的自我保护"></a>4.5    Eureka中的自我保护</h2><p>微服务第一次注册成功之后，每30秒会发送一次心跳将服务的实例信息注册到注册中心。通知 Eureka Server 该实例仍然存在。如果超过90秒没有发送更新，则服务器将从注册信息中将此服务移除。</p><p>Eureka Server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%，如果出现低于的情况（在单机调试的时候很容易满足，实际在生产环境上通常是由于网络不稳定导致），Eureka Server会将当前的实例注册信息保护起来，同时提示这个警告。保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）</p><p>验证完自我保护机制开启后，并不会马上呈现到web上，而是默认需等待 5 分钟（可以通过eureka.server.wait-time-in-ms-when-sync-empty 配置），即 5 分钟后你会看到下面的提示信息：</p><p><img src="https://img-blog.csdnimg.cn/20201028145353454.png" alt="image-20201028121150330"></p><p><strong>如果关闭自我保护</strong></p><p>通过设置 eureka.enableSelfPreservation=false 来关闭自我保护功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置eureka server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#是否从eureka中获取注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#配置暴露给Eureka Client的请求地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭自我保护</span></span><br></pre></td></tr></table></figure><h2 id="4-6-Eureka中的元数据"><a href="#4-6-Eureka中的元数据" class="headerlink" title="4.6    Eureka中的元数据"></a>4.6    Eureka中的元数据</h2><p>Eureka的元数据有两种：标准元数据和自定义元数据。</p><ul><li>标准元数据：主机名、IP地址、端口号、状态页和健康检查等信息，这些信息都会被发布在服务注册表中，用于服务之间的调用。</li><li>自定义元数据：可以使用eureka.instance.metadata-map配置，符合KEY/VALUE的存储格式。这些元数据可以在远程客户端中访问。</li></ul><p>在程序中可以使用DiscoveryClient 获取指定微服务的所有元数据信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入DiscoveryClient :</span></span><br><span class="line"><span class="comment">     *      springCloud提供的获取原数组的工具类</span></span><br><span class="line"><span class="comment">     *      调用方法获取服务的元数据信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数:商品id</span></span><br><span class="line"><span class="comment">     * 通过订单系统,调用商品服务根据id查询商品信息</span></span><br><span class="line"><span class="comment">     *      1.需要配置商品对象</span></span><br><span class="line"><span class="comment">     *      2.需要调用商品服务</span></span><br><span class="line"><span class="comment">     *          使用java中的urlconnection,httpclient,okhttp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用discoveryClient方法</span></span><br><span class="line">        <span class="comment">//以调用服务名称获取所有的元数据</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"service-product"</span>);</span><br><span class="line">        <span class="comment">//获取唯一的一个元数据</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//根据元数据中的主机地址和端口号拼接请求微服务的URL</span></span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如何调用商品服务?</span></span><br><span class="line">        product = restTemplate.getForObject(<span class="string">"http://"</span> + instance.getHost() + <span class="string">":"</span> + instance.getPort() + <span class="string">"/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-服务注册Eureka高级"><a href="#5-服务注册Eureka高级" class="headerlink" title="5.    服务注册Eureka高级"></a>5.    服务注册Eureka高级</h1><h2 id="5-1-Eureka-Server-高可用集群"><a href="#5-1-Eureka-Server-高可用集群" class="headerlink" title="5.1    Eureka Server 高可用集群"></a>5.1    Eureka Server 高可用集群</h2><p>在上一个章节，实现了单节点的Eureka Server的服务注册与服务发现功能。Eureka Client会定时连接Eureka Server，获取注册表中的信息并缓存到本地。微服务在消费远程API时总是使用本地缓存中的数据。因此一般来说，即使Eureka Server发生宕机，也不会影响到服务之间的调用。但如果Eureka Server宕机时，某些微服务也出现了不可用的情况，Eureka Server中的缓存若不被刷新，就可能会影响到微服务的调用，甚至影响到整个应用系统的高可用。因此，在生成环境中，通常会部署一个高可用的Eureka Server集群。</p><p>Eureka Server可以通过运行多个实例并相互注册的方式实现高可用部署，Eureka Server实例会彼此增量地同步信息，从而确保所有节点数据一致。事实上，节点之间相互注册是Eureka Server的默认行为。</p><p><img src="https://img-blog.csdnimg.cn/20201028145406460.png" alt="image-20201028121623782"></p><h3 id="5-1-1-搭建-Eureka-Server高可用集群"><a href="#5-1-1-搭建-Eureka-Server高可用集群" class="headerlink" title="5.1.1    搭建 Eureka Server高可用集群"></a>5.1.1    搭建 Eureka Server高可用集群</h3><h4 id="5-1-1-1-修改yml配置文件"><a href="#5-1-1-1-修改yml配置文件" class="headerlink" title="5.1.1.1    修改yml配置文件"></a>5.1.1.1    修改yml配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#执行peer1的配置信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">eureka1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#执行peer2的配置信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">eureka2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>在配置文件中通过连字符（—）将文件分为三个部分，第一部分为应用名称，第二部分和第三部分是根据不同的profiles选项动态添加，可以在IDEA启动时进行激活配置</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201028145419990.png" alt="image-20201028122113070"></p><p>使用IDEA启动历次EurekaServerApplicaion分别激活eureka1和eureka2配置。访问<a href="http://localhost:9000和http://localhost:8000/。会发现注册中心">http://localhost:9000和http://localhost:8000/。会发现注册中心</a> EUREKA-SERVER 已经有两个节点，并且registered-replicas (相邻集群复制节点)中已经包含对方。</p><h3 id="5-1-2-服务注册到Eureka-Server集群"><a href="#5-1-2-服务注册到Eureka-Server集群" class="headerlink" title="5.1.2    服务注册到Eureka Server集群"></a>5.1.2    服务注册到Eureka Server集群</h3><p>如果需要将微服务注册到Eureka Server集群只需要修改yml配置文件即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">        <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/,http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="5-2-Eureka中的常见问题"><a href="#5-2-Eureka中的常见问题" class="headerlink" title="5.2    Eureka中的常见问题"></a>5.2    Eureka中的常见问题</h2><h3 id="5-2-1-服务注册慢"><a href="#5-2-1-服务注册慢" class="headerlink" title="5.2.1    服务注册慢"></a>5.2.1    服务注册慢</h3><p>默认情况下，服务注册到Eureka Server的过程较慢。SpringCloud官方文档中给出了详细的原因</p><p><img src="https://img-blog.csdnimg.cn/20201028145426390.png" alt="image-20201028122621641"></p><p>大致含义：服务的注册涉及到心跳，默认心跳间隔为30s。在实例、服务器、客户端都在本地缓存中具有相同的元数据之前，服务不可用于客户端发现（所以可能需要3次心跳）。可以通过配置eureka.instance.leaseRenewalIntervalInSeconds (心跳频率)加快客户端连接到其他服务的过程。在生产中，最好坚持使用默认值，因为在服务器内部有一些计算，他们对续约做出假设。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment">#发送心跳续约间隔</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-服务节点剔除问题"><a href="#5-2-2-服务节点剔除问题" class="headerlink" title="5.2.2    服务节点剔除问题"></a>5.2.2    服务节点剔除问题</h3><p>默认情况下，由于Eureka Server剔除失效服务间隔时间为90s且存在自我保护的机制。所以不能有效而迅速的剔除失效节点，这对开发或测试会造成困扰。解决方案如下：</p><p><strong>Eureka Server：</strong></p><p>配置关闭自我保护，设置剔除无效节点的时间间隔</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置eureka server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#是否从eureka中获取注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#配置暴露给Eureka Client的请求地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭自我保护</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">4000</span> <span class="comment">#剔除时间间隔,单位:毫秒</span></span><br></pre></td></tr></table></figure><p><strong>Eureka Client：</strong></p><p>配置开启健康检查，并设置续约时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment">#发送心跳续约间隔</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment">#eureka client发送心跳给server端后，续约到期时间（默认90秒）</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-监控页面显示ip"><a href="#5-2-3-监控页面显示ip" class="headerlink" title="5.2.3    监控页面显示ip"></a>5.2.3    监控页面显示ip</h3><p>在Eureka Server的管控台中，显示的服务实例名称默认情况下是微服务定义的名称和端口。为了更好的对所有服务进行定位，微服务注册到Eureka Server的时候可以手动配置示例ID。配置方式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9000/eureka/</span> <span class="comment">#多个eurekaserver之间用,隔开</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址注册</span></span><br><span class="line">    <span class="comment">#向注册中心中注册服务id </span></span><br><span class="line">    <span class="comment">#spring.cloud.client.ip-address:获取ip地址</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><h1 id="6-Eureka替换方案Consul"><a href="#6-Eureka替换方案Consul" class="headerlink" title="6.    Eureka替换方案Consul"></a>6.    Eureka替换方案Consul</h1><h2 id="6-1-Eureka闭源的影响"><a href="#6-1-Eureka闭源的影响" class="headerlink" title="6.1    Eureka闭源的影响"></a>6.1    Eureka闭源的影响</h2><h3 id="6-1-1-Eureka闭源影响"><a href="#6-1-1-Eureka闭源影响" class="headerlink" title="6.1.1    Eureka闭源影响"></a>6.1.1    Eureka闭源影响</h3><p><img src="https://img-blog.csdnimg.cn/20201028145434537.png" alt="image-20201028124721663"></p><p>在Euraka的GitHub上，宣布Eureka 2.x闭源。近这意味着如果开发者继续使用作为 2.x 分支上现有工作repo 一部分发布的代码库和工件，则将自负风险。</p><h3 id="6-1-2-Eureka的替换方案"><a href="#6-1-2-Eureka的替换方案" class="headerlink" title="6.1.2    Eureka的替换方案"></a>6.1.2    Eureka的替换方案</h3><h4 id="6-1-2-1-Zookeeper"><a href="#6-1-2-1-Zookeeper" class="headerlink" title="6.1.2.1    Zookeeper"></a>6.1.2.1    Zookeeper</h4><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><h4 id="6-1-2-2-Consul"><a href="#6-1-2-2-Consul" class="headerlink" title="6.1.2.2    Consul"></a>6.1.2.2    Consul</h4><p>consul是近几年比较流行的服务发现工具，工作中用到，简单了解一下。consul的三个主要应用场景：服务发现、服务隔离、服务配置</p><h4 id="6-1-2-3-Nacos"><a href="#6-1-2-3-Nacos" class="headerlink" title="6.1.2.3    Nacos"></a>6.1.2.3    Nacos</h4><p>Nacos 是阿里巴巴推出来的一个新开源项目，这是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><h2 id="6-2-什么是consul"><a href="#6-2-什么是consul" class="headerlink" title="6.2    什么是consul"></a>6.2    什么是consul</h2><h3 id="6-2-1-consul-概述"><a href="#6-2-1-consul-概述" class="headerlink" title="6.2.1    consul 概述"></a>6.2.1    consul 概述</h3><p><img src="https://img-blog.csdnimg.cn/20201028145440595.png" alt="image-20201028124917039"></p><p>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具（比如 ZooKeeper 等）。使用起来也较 为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。</p><p><strong>Consul 的优势：</strong></p><ul><li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是Paxos, 而 etcd 使用的则是 Raft。</li><li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等。 zookeeper 和 etcd 均不提供多数据中心功能的支持。</li><li>支持健康检查。 etcd 不提供此功能。</li><li>支持 http 和 dns 协议接口。 zookeeper 的集成较为复杂, etcd 只支持 http 协议。</li><li>官方提供 web 管理界面, etcd 无此功能。</li><li>综合比较, Consul 作为服务注册和配置管理的新星, 比较值得关注和研究。</li></ul><p><strong>特性：</strong></p><ul><li>服务发现</li><li>健康检查</li><li>Key/Value 存储</li><li>多数据中心</li></ul><h3 id="6-2-2-consul与Eureka的区别"><a href="#6-2-2-consul与Eureka的区别" class="headerlink" title="6.2.2    consul与Eureka的区别"></a>6.2.2    consul与Eureka的区别</h3><h4 id="6-2-2-1-一致性"><a href="#6-2-2-1-一致性" class="headerlink" title="6.2.2.1    一致性"></a>6.2.2.1    一致性</h4><p>Consul强一致性（CP）</p><ul><li>服务注册相比Eureka会稍慢一些。因为Consul的raft协议要求必须过半数的节点都写入成功才认为注册成功</li><li>Leader挂掉时，重新选举期间整个consul不可用。保证了强一致性但牺牲了可用性。</li></ul><p>Eureka保证高可用和最终一致性（AP）</p><ul><li>服务注册相对要快，因为不需要等注册信息replicate到其他节点，也不保证注册信息是否replicate成功</li><li>当数据出现不一致时，虽然A, B上的注册信息不完全相同，但每个Eureka节点依然能够正常对外提供服务，这会出现查询服务信息时如果请求A查不到，但请求B就能查到。如此保证了可用性但牺牲了一致性。</li></ul><h4 id="6-2-2-2-开发语言和使用"><a href="#6-2-2-2-开发语言和使用" class="headerlink" title="6.2.2.2    开发语言和使用"></a>6.2.2.2    开发语言和使用</h4><p>eureka就是个servlet程序，跑在servlet容器中</p><p>Consul则是go编写而成，安装启动即可</p><h3 id="6-2-3-consul的下载与安装"><a href="#6-2-3-consul的下载与安装" class="headerlink" title="6.2.3    consul的下载与安装"></a>6.2.3    consul的下载与安装</h3><p>Consul 不同于 Eureka 需要单独安装，访问 <a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">Consul 官网</a>下载 Consul 的最新版本，我这里是consul1.5x。根据不同的系统类型选择不同的安装包，从下图也可以看出 Consul 支持所有主流系统。</p><p><img src="https://img-blog.csdnimg.cn/20201028145445897.png" alt="image-20201028125500868"></p><p><strong>在linux虚拟中下载consul服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 从官网下载最新版本的Consul服务</span></span><br><span class="line">wget https://releases.hashicorp.com/consul/1.5.3/consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##使用unzip命令解压</span></span><br><span class="line">unzip consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##将解压好的consul可执行命令拷贝到/usr/local/bin目录下</span></span><br><span class="line">cp consul /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment">##测试一下</span></span><br><span class="line">consul</span><br></pre></td></tr></table></figure><p><strong>启动consul服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##已开发者模式快速启动，-client指定客户端可以访问的ip地址</span></span><br><span class="line">consul agent -dev -client=0.0.0.0</span><br></pre></td></tr></table></figure><p>启动成功之后访问： <a href="http://IP:8500" target="_blank" rel="noopener">http://IP:8500</a> ，可以看到 Consul 的管理界面</p><p><img src="https://img-blog.csdnimg.cn/20201028145451879.png" alt="image-20201028125618926"></p><h2 id="6-3-consul的基本使用"><a href="#6-3-consul的基本使用" class="headerlink" title="6.3    consul的基本使用"></a>6.3    consul的基本使用</h2><p>Consul 支持健康检查,并提供了 HTTP 和 DNS 调用的API接口完成服务注册，服务发现，以及K/V存储这些功能。接下来通过发送HTTP请求的形式来了解一下Consul</p><h3 id="6-3-1-服务注册与发现"><a href="#6-3-1-服务注册与发现" class="headerlink" title="6.3.1    服务注册与发现"></a>6.3.1    服务注册与发现</h3><h4 id="6-3-1-1-注册服务"><a href="#6-3-1-1-注册服务" class="headerlink" title="6.3.1.1    注册服务"></a>6.3.1.1    注册服务</h4><p>通过postman发送put请求到 <a href="http://192.168.142.128:8500/v1/catalog/register地址可以完成服务注册" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/register地址可以完成服务注册</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line">    <span class="attr">"Node"</span>: <span class="string">"node01"</span>,</span><br><span class="line">    <span class="attr">"Address"</span>: <span class="string">"192.168.142.128"</span>,</span><br><span class="line">    <span class="attr">"Service"</span>: &#123;</span><br><span class="line">        <span class="attr">"ID"</span>:<span class="string">"mysql-01"</span>,</span><br><span class="line">        <span class="attr">"Service"</span>: <span class="string">"mysql"</span>,</span><br><span class="line">        <span class="attr">"tags"</span>: [<span class="string">"master"</span>,<span class="string">"v1"</span>],</span><br><span class="line">        <span class="attr">"Address"</span>: <span class="string">"192.168.142.128"</span>,</span><br><span class="line">        <span class="attr">"Port"</span>: <span class="number">3306</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-1-2-服务查询"><a href="#6-3-1-2-服务查询" class="headerlink" title="6.3.1.2    服务查询"></a>6.3.1.2    服务查询</h4><p>通过postman发送get请求到<a href="http://192.168.142.128:8500/v1/catalog/services查看所有的服务列表" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/services查看所有的服务列表</a></p><p>通过postman发送get请求到<a href="http://192.168.142.128:8500/v1/catalog/service/服务名" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/service/服务名</a> 查看具体的服务详情</p><h4 id="6-3-1-3-服务删除"><a href="#6-3-1-3-服务删除" class="headerlink" title="6.3.1.3    服务删除"></a>6.3.1.3    服务删除</h4><p>通过postman发送put请求到<a href="http://192.168.142.128:8500/v1/catalog/deregister删除服务" target="_blank" rel="noopener">http://192.168.142.128:8500/v1/catalog/deregister删除服务</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line">    <span class="attr">"Node"</span>: <span class="string">"node01"</span>,</span><br><span class="line">    <span class="attr">"ServiceID"</span>: <span class="string">"mysql-01"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-Consul的KV存储"><a href="#6-3-2-Consul的KV存储" class="headerlink" title="6.3.2    Consul的KV存储"></a>6.3.2    Consul的KV存储</h3><p>可以参照Consul提供的KV存储的 API完成基于Consul的数据存储</p><table><thead><tr><th>含义</th><th>请求路径</th><th>请求方式</th></tr></thead><tbody><tr><td>查看key</td><td>v1/kv/:key</td><td>GET</td></tr><tr><td>保存或更新</td><td>v1/kv/:key</td><td>put</td></tr><tr><td>删除</td><td>/v1/kv/:key</td><td>DELETE</td></tr></tbody></table><ul><li>key值中可以带/, 可以看做是不同的目录结构。</li><li>value的值经过了base64_encode,获取到数据后base64_decode才能获取到原始值。数据不能大于512Kb</li><li>不同数据中心的kv存储系统是独立的，使用dc=?参数指定。</li></ul><h2 id="6-4-基于consul的服务注册"><a href="#6-4-基于consul的服务注册" class="headerlink" title="6.4    基于consul的服务注册"></a>6.4    基于consul的服务注册</h2><h3 id="6-4-1-案例准备"><a href="#6-4-1-案例准备" class="headerlink" title="6.4.1    案例准备"></a>6.4.1    案例准备</h3><p>拷贝一份新的工程，起名为 shop_consul_parent ，并导入相关的子模块</p><h4 id="6-4-1-1-修改pom文件"><a href="#6-4-1-1-修改pom文件" class="headerlink" title="6.4.1.1    修改pom文件"></a>6.4.1.1    修改pom文件</h4><p>修改每个微服务的pom文件，添加SpringCloud提供的基于Consul的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springcloud 提供的对基于consul的服务发现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--actuator的健康检查--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-2-配置服务注册"><a href="#6-4-2-配置服务注册" class="headerlink" title="6.4.2    配置服务注册"></a>6.4.2    配置服务注册</h3><p>修改每个微服务的application.yml配置文件，添加consul服务发现的相关配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="string">...省略</span></span><br><span class="line">  <span class="comment">###开始配置consul的服务注册</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span> <span class="comment">#consul服务器的主机地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span> <span class="comment">#consul服务器的ip地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#是否需要注册</span></span><br><span class="line">        <span class="attr">register:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#注册的实例ID (唯一标志,推荐必填)</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;-1</span></span><br><span class="line">        <span class="comment">#服务的名称</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="comment">#服务的请求端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">$&#123;server.port&#125;</span></span><br><span class="line">        <span class="comment">#健康检查路径</span></span><br><span class="line">        <span class="attr">healthCheckPath:</span> <span class="string">/actuator/health</span></span><br><span class="line">        <span class="comment">#健康检查时间间隔</span></span><br><span class="line">        <span class="attr">healthCheckInterval:</span> <span class="string">15s</span></span><br><span class="line">        <span class="comment">#指定开启ip地址注册</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#当前服务的请求ip</span></span><br><span class="line">        <span class="attr">ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-5-基于consul的服务发现"><a href="#6-5-基于consul的服务发现" class="headerlink" title="6.5    基于consul的服务发现"></a>6.5    基于consul的服务发现</h2><p>由于SpringCloud对Consul进行了封装。对于在消费者端获取服务提供者信息和Eureka是一致的。同样使用 DiscoveryClient 完成调用获取微服务实例信息</p><h2 id="6-6-consul高可用集群"><a href="#6-6-consul高可用集群" class="headerlink" title="6.6    consul高可用集群"></a>6.6    consul高可用集群</h2><p><img src="https://img-blog.csdnimg.cn/2020102814545739.png" alt="image-20201028134442435"></p><p>此图是官网提供的一个事例系统图，图中的Server是consul服务端高可用集群，Client是consul客户端。consul客户端不保存数据，客户端将接收到的请求转发给响应的Server端。Server之间通过局域网或广域网通信实现数据一致性。每个Server或Client都是一个consul agent。Consul集群间使用了GOSSIP协议通信和raft一致性算法。</p><p><img src="https://img-blog.csdnimg.cn/20201028145505802.png" alt="image-20201028134527181"></p><h3 id="6-6-1-Consul的核心知识"><a href="#6-6-1-Consul的核心知识" class="headerlink" title="6.6.1    Consul的核心知识"></a>6.6.1    Consul的核心知识</h3><h4 id="6-6-1-1-Gossip协议"><a href="#6-6-1-1-Gossip协议" class="headerlink" title="6.6.1.1    Gossip协议"></a>6.6.1.1    Gossip协议</h4><p>传统的监控，如ceilometer，由于每个节点都会向server报告状态，随着节点数量的增加server的压力随之增大。在所有的Agent之间（包括服务器模式和普通模式）运行着Gossip协议。服务器节点和普通Agent都会加入这个Gossip集群，收发Gossip消息。每隔一段时间，每个节点都会随机选择几个节点发送Gossip消息，其他节点会再次随机选择其他几个节点接力发送消息。这样一段时间过后，整个集群都能收到这条消息。示意图如下。</p><p><img src="https://img-blog.csdnimg.cn/20201028145511727.png" alt="image-20201028134651051"></p><h4 id="6-6-1-2-RAFT一致性算法"><a href="#6-6-1-2-RAFT一致性算法" class="headerlink" title="6.6.1.2    RAFT一致性算法"></a>6.6.1.2    RAFT一致性算法</h4><p><img src="https://img-blog.csdnimg.cn/20201028145517629.png" alt="image-20201028134705811"></p><h3 id="6-6-2-Consul-集群搭建"><a href="#6-6-2-Consul-集群搭建" class="headerlink" title="6.6.2    Consul 集群搭建"></a>6.6.2    Consul 集群搭建</h3><p><img src="https://img-blog.csdnimg.cn/20201028145523319.png" alt="image-20201028134824996"></p><p>首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server。（这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定）</p><p>服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。（一般微服务和Client绑定）在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回</p><h4 id="6-6-2-1-准备环境"><a href="#6-6-2-1-准备环境" class="headerlink" title="6.6.2.1    准备环境"></a>6.6.2.1    准备环境</h4><table><thead><tr><th>服务器ip</th><th>consul类型</th><th>Node（节点名称）</th><th>序号</th></tr></thead><tbody><tr><td>192.168.74.101</td><td>server</td><td>server-1</td><td>s1</td></tr><tr><td>192.168.74.102</td><td>server</td><td>server-2</td><td>s2</td></tr><tr><td>192.168.74.103</td><td>server</td><td>server-3</td><td>s3</td></tr><tr><td>192.168.71.1</td><td>client</td><td>clent-1</td><td>s4</td></tr></tbody></table><ul><li>Agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。Client模式节点有无数个，官方建议搭配微服务配置</li><li>Agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。</li></ul><h4 id="6-6-2-2-安装consul并启动"><a href="#6-6-2-2-安装consul并启动" class="headerlink" title="6.6.2.2    安装consul并启动"></a>6.6.2.2    安装consul并启动</h4><ul><li>在每个consul节点上安装consul服务，下载安装过程和单节点一致。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##从官网下载最新版本的Consul服务</span></span><br><span class="line">wget https://releases.hashicorp.com/consul/1.5.3/consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##使用unzip命令解压</span></span><br><span class="line">unzip consul_1.5.3_linux_amd64.zip</span><br><span class="line"><span class="comment">##将解压好的consul可执行命令拷贝到/usr/local/bin目录下</span></span><br><span class="line">cp consul /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment">##测试一下</span></span><br><span class="line">consul</span><br></pre></td></tr></table></figure><ul><li>启动每个consul server节点</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#登录s1虚拟机，以server形式运行</span></span></span><br><span class="line">consul agent -server -bootstrap-expect 3 -data-dir /etc/consul.d -node=server-1 -bind=192.168.74.101 -ui -client 0.0.0.0 &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#登录s2 虚拟机，以server形式运行</span></span></span><br><span class="line">consul agent -server -bootstrap-expect 2 -data-dir /etc/consul.d -node=server-2 -bind=192.168.74.102 -ui -client 0.0.0.0 &amp; </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#登录s3 虚拟机，以server形式运行</span></span></span><br><span class="line">consul agent -server -bootstrap-expect 2 -data-dir /etc/consul.d -node=server-3 -bind=192.168.74.103 -ui -client 0.0.0.0 &amp;</span><br></pre></td></tr></table></figure><blockquote><p><strong>-server</strong>： 以server身份启动。</p><p><strong>-bootstrap-expect</strong>：集群要求的最少server数量，当低于这个数量，集群即失效。</p><p><strong>-data-dir</strong>：data存放的目录，更多信息请参阅consul数据同步机制</p><p><strong>-node</strong>：节点id，在同一集群不能重复。</p><p><strong>-bind</strong>：监听的ip地址。</p><p><strong>-client</strong>：客户端的ip地址(0.0.0.0表示不限制)</p><p><strong>&amp;</strong> ：在后台运行，此为linux脚本语法 </p></blockquote><p>至此三个Consul Server模式服务全部启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##在本地电脑中使用client形式启动consul</span></span><br><span class="line">consul agent -client=0.0.0.0 -data-dir /etc/consul.d -node=client-1</span><br></pre></td></tr></table></figure><p><strong>（3） 每个节点加入集群</strong></p><p>在s2，s3，s4 服务其上通过consul join 命令加入 s1中的consul集群中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##加入consul集群</span></span><br><span class="line">consul join 192.168.74.101</span><br></pre></td></tr></table></figure><p><strong>（4） 测试</strong></p><p>在任意一台服务器中输入 consul members查看集群中的所有节点信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##查看consul集群节点信息</span></span><br><span class="line">consul members</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201028145528737.png" alt="image-20201028140112517"></p><p><img src="https://img-blog.csdnimg.cn/20201028145534599.png" alt="image-20201028140118411"></p><h3 id="6-6-3-Consul-常见问题"><a href="#6-6-3-Consul-常见问题" class="headerlink" title="6.6.3    Consul 常见问题"></a>6.6.3    Consul 常见问题</h3><h4 id="6-6-3-1-节点和服务注销"><a href="#6-6-3-1-节点和服务注销" class="headerlink" title="6.6.3.1    节点和服务注销"></a>6.6.3.1    节点和服务注销</h4><p>当服务或者节点失效，Consul不会对注册的信息进行剔除处理，仅仅标记已状态进行标记（并且不可使用）。如果担心失效节点和失效服务过多影响监控。可以通过调用HTTP API的形式进行处理节点和服务的注销可以使用HTTP API:</p><ul><li>注销任意节点和服务：/catalog/deregister</li><li>注销当前节点的服务：/agent/service/deregister/:service_id</li></ul><p>如果某个节点不继续使用了，也可以在本机使用consul leave命令，或者在其它节点使用consul force-leave 节点Id。</p><h4 id="6-6-3-2-健康检查与故障转移"><a href="#6-6-3-2-健康检查与故障转移" class="headerlink" title="6.6.3.2    健康检查与故障转移"></a>6.6.3.2    健康检查与故障转移</h4><p>在集群环境下，健康检查是由服务注册到的Agent来处理的，那么如果这个Agent挂掉了，那么此节点的健康检查就处于无人管理的状态。</p><p>从实际应用看，节点上的服务可能既要被发现，又要发现别的服务，如果节点挂掉了，仅提供被发现的功能实际上服务还是不可用的。当然发现别的服务也可以不使用本机节点，可以通过访问一个Nginx实现的若干Consul节点的负载均衡来实现。</p><h1 id="7-服务调用Ribbon入门"><a href="#7-服务调用Ribbon入门" class="headerlink" title="7.    服务调用Ribbon入门"></a>7.    服务调用Ribbon入门</h1><p>经过以上的学习，已经实现了服务的注册和服务发现。当启动某个服务的时候，可以通过HTTP的形式将信息注册到注册中心，并且可以通过SpringCloud提供的工具获取注册中心的服务列表。但是服务之间的调用还存在很多的问题，如何更加方便的调用微服务，多个微服务的提供者如何选择，如何负载均衡等。</p><h2 id="7-1-Ribbon概述"><a href="#7-1-Ribbon概述" class="headerlink" title="7.1    Ribbon概述"></a>7.1    Ribbon概述</h2><h3 id="7-1-1-什么是Ribbon"><a href="#7-1-1-什么是Ribbon" class="headerlink" title="7.1.1    什么是Ribbon"></a>7.1.1    什么是Ribbon</h3><p>是 Netflixfa 发布的一个负载均衡器，有助于控制 HTTP 和 TCP客户端行为。在 SpringCloud 中，Eureka一般配合Ribbon进行使用，<strong>Ribbon提供了客户端负载均衡的功能</strong>，Ribbon利用从Eureka中读取到的服务信息，在调用服务节点提供的服务时，会合理的进行负载。</p><p>在SpringCloud中可以将注册中心和Ribbon配合使用，Ribbon自动的从注册中心中获取服务提供者的列表信息，并基于内置的负载均衡算法，请求服务</p><h3 id="7-1-2-Ribbon的主要作用"><a href="#7-1-2-Ribbon的主要作用" class="headerlink" title="7.1.2    Ribbon的主要作用"></a>7.1.2    Ribbon的主要作用</h3><h4 id="7-1-2-1-服务调用"><a href="#7-1-2-1-服务调用" class="headerlink" title="7.1.2.1    服务调用"></a>7.1.2.1    服务调用</h4><p>基于Ribbon实现服务调用， 是通过拉取到的所有服务列表组成（服务名-请求路径的）映射关系。借助RestTemplate 最终进行调用</p><h4 id="7-1-2-2-负载均衡"><a href="#7-1-2-2-负载均衡" class="headerlink" title="7.1.2.2    负载均衡"></a>7.1.2.2    负载均衡</h4><p>当有多个服务提供者时，Ribbon可以根据负载均衡的算法自动的选择需要调用的服务地址</p><h2 id="7-2-基于Ribbon实现订单调用商品服务"><a href="#7-2-基于Ribbon实现订单调用商品服务" class="headerlink" title="7.2    基于Ribbon实现订单调用商品服务"></a>7.2    基于Ribbon实现订单调用商品服务</h2><p>不论是基于Eureka的注册中心还是基于Consul的注册中心，SpringCloud Ribbon统一进行了封装，所以对于服务调用，两者的方式是一样的。</p><h3 id="7-2-1-坐标依赖"><a href="#7-2-1-坐标依赖" class="headerlink" title="7.2.1    坐标依赖"></a>7.2.1    坐标依赖</h3><p>在springcloud提供的服务发现的jar中已经包含了Ribbon的依赖。所以这里不需要导入任何额外的坐标</p><h3 id="7-2-2-工程改造"><a href="#7-2-2-工程改造" class="headerlink" title="7.2.2    工程改造"></a>7.2.2    工程改造</h3><h4 id="7-2-2-1-服务提供者"><a href="#7-2-2-1-服务提供者" class="headerlink" title="7.2.2.1    服务提供者"></a>7.2.2.1    服务提供者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.client.ip-address&#125;"</span>) <span class="comment">//spring cloud 自动的获取当前应用的ip地址</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = productService.findById(id);</span><br><span class="line">        product.setProductName(<span class="string">"访问的服务地址:"</span> + ip + <span class="string">":"</span> + port);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">""</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestBody Product product)</span> </span>&#123;</span><br><span class="line">        productService.save(product);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"保存成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-2-2-服务消费者"><a href="#7-2-2-2-服务消费者" class="headerlink" title="7.2.2.2    服务消费者"></a>7.2.2.2    服务消费者</h4><p>修改服务消费者 shop_service_order模块中的启动类OrderApplication ，在创建RestTemplate方法上添加 @LoadBalanced 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用spring提供的RestTemplate发送http请求到商品服务</span></span><br><span class="line"><span class="comment">     *      1.创建RestTemplate对象交给容器管理</span></span><br><span class="line"><span class="comment">     *      2.在使用的时候,调用其方法完成操作 (getXX,postxxx)</span></span><br><span class="line"><span class="comment">     * Springcloud对consul进行了进一步的处理</span></span><br><span class="line"><span class="comment">     *      向其中集成了ribbon的支持</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@LoadBalanced</span> : 是ribbon提供的负载均衡的注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入restTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于ribbon的形式调用远程微服务</span></span><br><span class="line"><span class="comment">     *      1.使用<span class="doctag">@LoadBalanced</span>声明RestTemplate</span></span><br><span class="line"><span class="comment">     *      2.使用服务名称替换ip地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/buy/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        product = restTemplate.getForObject(<span class="string">"http://service-product/product/1"</span>, Product<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-服务调用Ribbon高级"><a href="#8-服务调用Ribbon高级" class="headerlink" title="8.    服务调用Ribbon高级"></a>8.    服务调用Ribbon高级</h1><h2 id="8-1-负载均衡概述"><a href="#8-1-负载均衡概述" class="headerlink" title="8.1    负载均衡概述"></a>8.1    负载均衡概述</h2><h3 id="8-1-1-什么是负载均衡"><a href="#8-1-1-什么是负载均衡" class="headerlink" title="8.1.1    什么是负载均衡"></a>8.1.1    什么是负载均衡</h3><p>在搭建网站时，如果单节点的 web服务性能和可靠性都无法达到要求；或者是在使用外网服务时，经常担心被人攻破，一不小心就会有打开外网端口的情况，通常这个时候加入负载均衡就能有效解决服务问题。</p><p>负载均衡是一种基础的网络服务，其原理是通过运行在前面的负载均衡服务，按照指定的负载均衡算法，将流量分配到后端服务集群上，从而为系统提供并行扩展的能力。</p><p>负载均衡的应用场景包括流量包、转发规则以及后端服务，由于该服务有内外网个例、健康检查等功能，能够有效提供系统的安全性和可用性。</p><p><img src="https://img-blog.csdnimg.cn/20201028145539922.png" alt="image-20201028141654723"></p><h3 id="8-1-2-客户端负载均衡与服务端负载均衡"><a href="#8-1-2-客户端负载均衡与服务端负载均衡" class="headerlink" title="8.1.2    客户端负载均衡与服务端负载均衡"></a>8.1.2    客户端负载均衡与服务端负载均衡</h3><h4 id="8-1-2-1-服务端负载均衡"><a href="#8-1-2-1-服务端负载均衡" class="headerlink" title="8.1.2.1    服务端负载均衡"></a>8.1.2.1    服务端负载均衡</h4><p>先发送请求到负载均衡服务器或者软件，然后通过负载均衡算法，在多个服务器之间选择一个进行访问；即在服务器端再进行负载均衡算法分配</p><h4 id="8-1-2-2-客户端负载均衡"><a href="#8-1-2-2-客户端负载均衡" class="headerlink" title="8.1.2.2    客户端负载均衡"></a>8.1.2.2    客户端负载均衡</h4><p>客户端会有一个服务器地址列表，在发送请求前通过负载均衡算法选择一个服务器，然后进行访问，这是客户端负载均衡；即在客户端就进行负载均衡算法分配</p><h2 id="8-2-基于Ribbon实现负载均衡"><a href="#8-2-基于Ribbon实现负载均衡" class="headerlink" title="8.2    基于Ribbon实现负载均衡"></a>8.2    基于Ribbon实现负载均衡</h2><h3 id="8-2-1-搭建多服务实例"><a href="#8-2-1-搭建多服务实例" class="headerlink" title="8.2.1    搭建多服务实例"></a>8.2.1    搭建多服务实例</h3><p>修改 shop_service_product 的 application.yml 配置文件，已profiles的形式配置多个实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">product1</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">shop-service-product</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">###开始配置consul的服务注册</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span> <span class="comment">#consul服务器的主机地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span> <span class="comment">#consul服务器的ip地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#实例ID</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;-1</span></span><br><span class="line">        <span class="comment">#开启ip地址注册</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#实例的请求ip</span></span><br><span class="line">        <span class="attr">ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">product2</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">shop-service-product</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">###开始配置consul的服务注册</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span> <span class="comment">#consul服务器的主机地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span> <span class="comment">#consul服务器的ip地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#实例ID</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;-2</span></span><br><span class="line">        <span class="comment">#开启ip地址注册</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#实例的请求ip</span></span><br><span class="line">        <span class="attr">ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9004</span></span><br></pre></td></tr></table></figure><p>分别启动两次服务器验证效果，并查看两个控制台发现已轮询的方式调用了商品服务</p><p><img src="https://img-blog.csdnimg.cn/20201028145545863.png" alt="image-20201028142511437"></p><h3 id="8-2-2-负载均衡策略"><a href="#8-2-2-负载均衡策略" class="headerlink" title="8.2.2    负载均衡策略"></a>8.2.2    负载均衡策略</h3><p>Ribbon内置了多种负载均衡策略，内部负责复杂均衡的顶级接口为<code>com.netflix.loadbalancer.IRule</code> ，实现方式如下</p><p><img src="https://img-blog.csdnimg.cn/20201028145552473.png" alt="image-20201028142630338"></p><ul><li><code>com.netflix.loadbalancer.RoundRobinRule</code> ：以轮询的方式进行负载均衡。</li><li><code>com.netflix.loadbalancer.RandomRule</code> ：随机策略</li><li><code>com.netflix.loadbalancer.RetryRule</code> ：重试策略。</li><li><code>com.netflix.loadbalancer.WeightedResponseTimeRule</code> ：权重策略。会计算每个服务的权重，越高的被调用的可能性越大。</li><li><code>com.netflix.loadbalancer.BestAvailableRule</code> ：最佳策略。遍历所有的服务实例，过滤掉故障实例，并返回请求数最小的实例返回。</li><li><code>com.netflix.loadbalancer.AvailabilityFilteringRule</code> ：可用过滤策略。过滤掉故障和请求数超过阈值的服务实例，再从剩下的实力中轮询调用。</li></ul><p>在服务消费者的application.yml配置文件中修改负载均衡策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改ribbon的负载均衡策略   服务名 -  ribbon - NFLoadBalancerRuleClassName : 策略</span></span><br><span class="line"><span class="attr">service-product:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>策略选择：</p><ul><li>如果每个机器配置一样，则建议不修改策略 (推荐)</li><li>如果部分机器配置强，则可以改为 WeightedResponseTimeRule</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-微服务基础知识&quot;&gt;&lt;a href=&quot;#1-微服务基础知识&quot; class=&quot;headerlink&quot; title=&quot;1.    微服务基础知识&quot;&gt;&lt;/a&gt;1.    微服务基础知识&lt;/h1&gt;&lt;h2 id=&quot;1-1-系统架构的演变&quot;&gt;&lt;a href=&quot;#1-1-系统架构的演变&quot; class=&quot;headerlink&quot; title=&quot;1.1    系统架构的演变&quot;&gt;&lt;/a&gt;1.1    系统架构的演变&lt;/h2&gt;&lt;p&gt;随着互联网的发展，网站应用的规模不断扩大，常规的应用架构已无法应对，分布式服务架构以及微服务架构势在必行，亟需一个治理系统确保架构有条不紊的演进。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="SpringCloud" scheme="https://wgy1993.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo</title>
    <link href="https://wgy1993.gitee.io/archives/f6253398.html"/>
    <id>https://wgy1993.gitee.io/archives/f6253398.html</id>
    <published>2020-10-25T07:51:50.000Z</published>
    <updated>2020-10-25T10:53:12.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分布式基础理论"><a href="#1-分布式基础理论" class="headerlink" title="1.    分布式基础理论"></a>1.    分布式基础理论</h1><h2 id="1-1-什么是分布式系统"><a href="#1-1-什么是分布式系统" class="headerlink" title="1.1    什么是分布式系统"></a>1.1    什么是分布式系统</h2><p>分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需<strong>一个治理系统</strong>确保架构有条不紊的演进</p><a id="more"></a><h2 id="1-2-发展演变"><a href="#1-2-发展演变" class="headerlink" title="1.2    发展演变"></a>1.2    发展演变</h2><p><img src="https://img-blog.csdnimg.cn/20201025153534670.png" alt="image-20201025111856418"></p><h3 id="1-2-1-单一应用架构"><a href="#1-2-1-单一应用架构" class="headerlink" title="1.2.1    单一应用架构"></a>1.2.1    单一应用架构</h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><img src="https://img-blog.csdnimg.cn/2020102515355753.png" alt="image-20201025113515988"></p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p><p>缺点： </p><ul><li>性能扩展比较难 </li><li>协同开发问题</li><li>不利于升级维护</li></ul><h3 id="1-2-2-垂直应用架构"><a href="#1-2-2-垂直应用架构" class="headerlink" title="1.2.2    垂直应用架构"></a>1.2.2    垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><img src="https://img-blog.csdnimg.cn/20201025153603899.png" alt="image-20201025113635921"></p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点： 公用模块无法重复利用，开发性的浪费</p><h3 id="1-2-3-分布式服务架构"><a href="#1-2-3-分布式服务架构" class="headerlink" title="1.2.3    分布式服务架构"></a>1.2.3    分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的<strong>分布式服务框架(RPC)</strong>是关键。</p><p><img src="https://img-blog.csdnimg.cn/2020102515361065.png" alt="image-20201025113744168"></p><h3 id="1-2-4-流动计算架构"><a href="#1-2-4-流动计算架构" class="headerlink" title="1.2.4    流动计算架构"></a>1.2.4    流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心(SOA)[ Service Oriented Architecture]是关键</strong>。</p><p><img src="https://img-blog.csdnimg.cn/20201025153616486.png" alt="image-20201025115235739"></p><h2 id="1-3-RPC"><a href="#1-3-RPC" class="headerlink" title="1.3    RPC"></a>1.3    RPC</h2><h3 id="1-3-1-什么叫RPC"><a href="#1-3-1-什么叫RPC" class="headerlink" title="1.3.1    什么叫RPC"></a>1.3.1    什么叫RPC</h3><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><h3 id="1-3-2-RPC基本原理"><a href="#1-3-2-RPC基本原理" class="headerlink" title="1.3.2    RPC基本原理"></a>1.3.2    RPC基本原理</h3><p><img src="https://img-blog.csdnimg.cn/20201025153622524.png" alt="image-20201025115452870"></p><p><img src="https://img-blog.csdnimg.cn/20201025153628428.png" alt="image-20201025115727926"></p><p>RPC两个核心模块：通讯，序列化。</p><p>RPC框架有很多如：dubbo、gRPC、Thrift、HSF(High Speed Service Framework)</p><h1 id="2-dubbo核心概念"><a href="#2-dubbo核心概念" class="headerlink" title="2.    dubbo核心概念"></a>2.    dubbo核心概念</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1    简介"></a>2.1    简介</h2><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>官网：<a href="http://dubbo.apache.org/" target="_blank" rel="noopener">http://dubbo.apache.org/</a></p><h2 id="2-2-基本概念"><a href="#2-2-基本概念" class="headerlink" title="2.2    基本概念"></a>2.2    基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201025153634112.png" alt="image-20201025120046432"></p><p><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者（Consumer）</strong>: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心（Registry）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p>调用关系说明：</p><ul><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><h1 id="3-dubbo环境搭建"><a href="#3-dubbo环境搭建" class="headerlink" title="3.    dubbo环境搭建"></a>3.    dubbo环境搭建</h1><h2 id="3-1-安装zookeeper"><a href="#3-1-安装zookeeper" class="headerlink" title="3.1    安装zookeeper"></a>3.1    安装zookeeper</h2><p>参考文章：<a href="https://wgy1993.gitee.io/archives/e18db595.html">https://wgy1993.gitee.io/archives/e18db595.html</a></p><h2 id="3-2-安装dubbo-admin管理控制台"><a href="#3-2-安装dubbo-admin管理控制台" class="headerlink" title="3.2    安装dubbo-admin管理控制台"></a>3.2    安装dubbo-admin管理控制台</h2><p>dubbo本身并不是一个服务软件。它其实就是一个jar包能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。所以你不用在Linux上启动什么dubbo服务。但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序，不过这个监控即使不装也不影响使用。</p><h3 id="3-2-1-下载dubbo-admin"><a href="#3-2-1-下载dubbo-admin" class="headerlink" title="3.2.1    下载dubbo-admin"></a>3.2.1    下载dubbo-admin</h3><p><a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo-ops</a></p><h3 id="3-2-2-修改dubbo-admin配置"><a href="#3-2-2-修改dubbo-admin配置" class="headerlink" title="3.2.2    修改dubbo-admin配置"></a>3.2.2    修改dubbo-admin配置</h3><p>修改 src\main\resources\application.properties 指定zookeeper地址</p><p><img src="https://img-blog.csdnimg.cn/20201025153639627.png" alt="image-20201025122802440"></p><h3 id="3-2-3-打包dubbo-admin"><a href="#3-2-3-打包dubbo-admin" class="headerlink" title="3.2.3    打包dubbo-admin"></a>3.2.3    打包dubbo-admin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="3-2-4-运行dubbo-admin"><a href="#3-2-4-运行dubbo-admin" class="headerlink" title="3.2.4    运行dubbo-admin"></a>3.2.4    运行dubbo-admin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>默认使用root/root 登陆</p><p><a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a></p><p><img src="https://img-blog.csdnimg.cn/2020102515364571.png" alt="image-20201025123200810"></p><h1 id="4-dubbo-helloworld"><a href="#4-dubbo-helloworld" class="headerlink" title="4.    dubbo-helloworld"></a>4.    dubbo-helloworld</h1><h2 id="4-1-提出需求"><a href="#4-1-提出需求" class="headerlink" title="4.1    提出需求"></a>4.1    提出需求</h2><p>某个电商系统，订单服务需要调用用户服务获取某个用户的所有地址；</p><p>我们现在需要创建两个服务模块进行测试</p><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>订单服务web模块</td><td>创建订单等</td></tr><tr><td>用户服务service模块</td><td>查询用户地址等</td></tr></tbody></table><p>测试预期结果：</p><p>订单服务web模块在A服务器，用户服务模块在B服务器，A可以远程调用B的功能。</p><h2 id="4-2-工程架构"><a href="#4-2-工程架构" class="headerlink" title="4.2    工程架构"></a>4.2    工程架构</h2><h3 id="4-2-1-分包"><a href="#4-2-1-分包" class="headerlink" title="4.2.1    分包"></a>4.2.1    分包</h3><p>建议将服务接口，服务模型，服务异常等均放在 API 包中，因为服务模型及异常也是 API 的一部分，同时，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。</p><p>如果需要，也可以考虑在 API 包中放置一份 spring 的引用配置，这样使用方便，只需在 spring 加载过程中引用此配置即可，配置建议放在模块的包目录下，以免冲突，如：<code>com/alibaba/china/xxx/dubbo-reference.xml</code>。</p><h3 id="4-2-2-粒度"><a href="#4-2-2-粒度" class="headerlink" title="4.2.2    粒度"></a>4.2.2    粒度</h3><p>服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。</p><p>服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。</p><p>不建议使用过于抽象的通用接口，如：Map query(Map)，这样的接口没有明确语义，会给后期维护带来不便。</p><p><img src="https://img-blog.csdnimg.cn/20201025153650824.png" alt="image-20201025123705441"></p><h2 id="4-3-创建模块"><a href="#4-3-创建模块" class="headerlink" title="4.3    创建模块"></a>4.3    创建模块</h2><h3 id="4-3-1-gmall-interface"><a href="#4-3-1-gmall-interface" class="headerlink" title="4.3.1    gmall-interface"></a>4.3.1    gmall-interface</h3><p>公共接口层（model，service，exception…）</p><p>作用：定义公共接口，也可以导入公共依赖</p><h4 id="4-3-1-1-Bean模型"><a href="#4-3-1-1-Bean模型" class="headerlink" title="4.3.1.1    Bean模型"></a>4.3.1.1    Bean模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userAddress; <span class="comment">//用户地址</span></span><br><span class="line">    <span class="keyword">private</span> String userId; <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String consignee; <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNum; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String isDefault; <span class="comment">//是否为默认地址    Y-是     N-否</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-1-2-Service接口"><a href="#4-3-1-2-Service接口" class="headerlink" title="4.3.1.2    Service接口"></a>4.3.1.2    Service接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照用户id返回所有的收货地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-gmall-user"><a href="#4-3-2-gmall-user" class="headerlink" title="4.3.2    gmall-user"></a>4.3.2    gmall-user</h3><p>用户模块（对用户接口的实现）</p><h4 id="4-3-2-1-pom-xml"><a href="#4-3-2-1-pom-xml" class="headerlink" title="4.3.2.1    pom.xml"></a>4.3.2.1    pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-2-Service"><a href="#4-3-2-2-Service" class="headerlink" title="4.3.2.2    Service"></a>4.3.2.2    Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-gmall-order-web"><a href="#4-3-3-gmall-order-web" class="headerlink" title="4.3.3    gmall-order-web"></a>4.3.3    gmall-order-web</h3><p>订单模块（调用用户模块）</p><h4 id="4-3-3-1-pom-xml"><a href="#4-3-3-1-pom-xml" class="headerlink" title="4.3.3.1    pom.xml"></a>4.3.3.1    pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span></span></span><br></pre></td></tr></table></figure><h4 id="4-3-3-2-测试"><a href="#4-3-3-2-测试" class="headerlink" title="4.3.3.2    测试"></a>4.3.3.2    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这样是无法进行调用的。我们gmall-order-web引入了gmall-interface，但是interface的实现是gmall-user，我们并没有引入，而且实际他可能还在别的服务器中。</p><h2 id="4-4-使用dubbo改造"><a href="#4-4-使用dubbo改造" class="headerlink" title="4.4    使用dubbo改造"></a>4.4    使用dubbo改造</h2><h3 id="4-4-1-改造gmall-user作为服务提供者"><a href="#4-4-1-改造gmall-user作为服务提供者" class="headerlink" title="4.4.1    改造gmall-user作为服务提供者"></a>4.4.1    改造gmall-user作为服务提供者</h3><h4 id="4-4-1-1-引入dubbo"><a href="#4-4-1-1-引入dubbo" class="headerlink" title="4.4.1.1    引入dubbo"></a>4.4.1.1    引入dubbo</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6以前的版本引入zkclient操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6及以后的版本引入curator操作zookeeper</span></span><br><span class="line"><span class="comment">    下面两个zk客户端根据dubbo版本2选1即可</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;0.10&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-2-配置提供者"><a href="#4-4-1-2-配置提供者" class="headerlink" title="4.4.1.2    配置提供者"></a>4.4.1.2    配置提供者</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-service-provider"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、指定注册中心的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address="zookeeper://192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务的实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.wgy.gmall.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-1-3-启动服务"><a href="#4-4-1-3-启动服务" class="headerlink" title="4.4.1.3    启动服务"></a>4.4.1.3    启动服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ioc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"provider.xml"</span>);</span><br><span class="line">        ioc.start();</span><br><span class="line">        <span class="comment">// 按任意键退出</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-改造gmall-order-web作为服务消费者"><a href="#4-4-2-改造gmall-order-web作为服务消费者" class="headerlink" title="4.4.2    改造gmall-order-web作为服务消费者"></a>4.4.2    改造gmall-order-web作为服务消费者</h3><h4 id="4-4-2-1-引入dubbo"><a href="#4-4-2-1-引入dubbo" class="headerlink" title="4.4.2.1    引入dubbo"></a>4.4.2.1    引入dubbo</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6以前的版本引入zkclient操作zookeeper</span></span><br><span class="line"><span class="comment">    dubbo 2.6及以后的版本引入curator操作zookeeper</span></span><br><span class="line"><span class="comment">    下面两个zk客户端根据dubbo版本2选1即可</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;0.10&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-2-配置消费者信息"><a href="#4-4-2-2-配置消费者信息" class="headerlink" title="4.4.2.2    配置消费者信息"></a>4.4.2.2    配置消费者信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.gmall.service.impl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"order-service-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明需要调用的远程服务的接口；生成远程服务代理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-3-修改消费者服务实现类"><a href="#4-4-2-3-修改消费者服务实现类" class="headerlink" title="4.4.2.3    修改消费者服务实现类"></a>4.4.2.3    修改消费者服务实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、将服务提供者注册到注册中心（暴露服务）</span></span><br><span class="line"><span class="comment"> *      1.1  导入dubbo依赖（2.6.2）\操作zookeeper的客户端(curator)</span></span><br><span class="line"><span class="comment"> *      1.2  配置服务提供者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2、让服务消费者去注册中心订阅服务提供者的服务地址</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-测试调用"><a href="#4-4-3-测试调用" class="headerlink" title="4.4.3    测试调用"></a>4.4.3    测试调用</h3><p>访问gmall-order-web的initOrder请求，会调用UserService获取用户地址；</p><p>调用成功。说明我们order已经可以调用远程的UserService了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"consumer.xml"</span>);</span><br><span class="line"></span><br><span class="line">        OrderService orderService = applicationContext.getBean(OrderService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        orderService.initOrder(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用完成...."</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-4-注解版"><a href="#4-4-4-注解版" class="headerlink" title="4.4.4    注解版"></a>4.4.4    注解版</h3><h4 id="4-4-4-1-服务提供方"><a href="#4-4-4-1-服务提供方" class="headerlink" title="4.4.4.1    服务提供方"></a>4.4.4.1    服务提供方</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-service-provider"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、指定注册中心的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address="zookeeper://192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、暴露服务   注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.wgy.gmall.service.impl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-4-2-服务消费方"><a href="#4-4-4-2-服务消费方" class="headerlink" title="4.4.4.2    服务消费方"></a>4.4.4.2    服务消费方</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"order-service-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解声明需要调用的远程服务的接口；生成远程服务代理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.wgy.gmall.service.impl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、将服务提供者注册到注册中心（暴露服务）</span></span><br><span class="line"><span class="comment"> *      1.1  导入dubbo依赖（2.6.2）\操作zookeeper的客户端(curator)</span></span><br><span class="line"><span class="comment"> *      1.2  配置服务提供者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2、让服务消费者去注册中心订阅服务提供者的服务地址</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span> <span class="comment">//使用dubbo提供的reference注解引用远程服务</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-监控中心"><a href="#5-监控中心" class="headerlink" title="5.    监控中心"></a>5.    监控中心</h1><h2 id="5-1-dubbo-admin"><a href="#5-1-dubbo-admin" class="headerlink" title="5.1    dubbo-admin"></a>5.1    dubbo-admin</h2><p>图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理</p><h2 id="5-2-dubbo-monitor-simple"><a href="#5-2-dubbo-monitor-simple" class="headerlink" title="5.2    dubbo-monitor-simple"></a>5.2    dubbo-monitor-simple</h2><p>简单的监控中心</p><h3 id="5-2-1-安装"><a href="#5-2-1-安装" class="headerlink" title="5.2.1    安装"></a>5.2.1    安装</h3><h4 id="5-2-1-1-下载-dubbo-ops"><a href="#5-2-1-1-下载-dubbo-ops" class="headerlink" title="5.2.1.1    下载 dubbo-ops"></a>5.2.1.1    下载 dubbo-ops</h4><p><a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo-ops</a></p><h4 id="5-2-1-2-修改配置指定注册中心地址"><a href="#5-2-1-2-修改配置指定注册中心地址" class="headerlink" title="5.2.1.2    修改配置指定注册中心地址"></a>5.2.1.2    修改配置指定注册中心地址</h4><p>进入 dubbo-monitor-simple\src\main\resources\conf，修改 dubbo.properties文件</p><p><img src="https://img-blog.csdnimg.cn/20201025153656220.png" alt="image-20201025132359632"></p><h4 id="5-2-1-3-打包dubbo-monitor-simple"><a href="#5-2-1-3-打包dubbo-monitor-simple" class="headerlink" title="5.2.1.3    打包dubbo-monitor-simple"></a>5.2.1.3    打包dubbo-monitor-simple</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip&#x3D;true</span><br></pre></td></tr></table></figure><h4 id="5-2-1-4-解压-tar-gz-文件，并运行start-bat"><a href="#5-2-1-4-解压-tar-gz-文件，并运行start-bat" class="headerlink" title="5.2.1.4    解压 tar.gz 文件，并运行start.bat"></a>5.2.1.4    解压 tar.gz 文件，并运行start.bat</h4><p>如果缺少servlet-api，自行导入servlet-api再访问监控中心</p><h4 id="5-2-1-5-启动访问8080"><a href="#5-2-1-5-启动访问8080" class="headerlink" title="5.2.1.5    启动访问8080"></a>5.2.1.5    启动访问8080</h4><h3 id="5-2-2-监控中心配置"><a href="#5-2-2-监控中心配置" class="headerlink" title="5.2.2    监控中心配置"></a>5.2.2    监控中心配置</h3><p>所有服务配置连接监控中心，进行监控统计</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 监控中心协议，如果为protocol="registry"，表示从注册中心发现监控中心地址，否则直连监控中心。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dubbo:monitor address="127.0.0.1:7070"&gt;&lt;/dubbo:monitor&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p>Simple Monitor 挂掉不会影响到 Consumer 和 Provider 之间的调用，所以用于生产环境不会有风险。</p><p>Simple Monitor 采用磁盘存储统计信息，请注意安装机器的磁盘限制，如果要集群，建议用mount共享磁盘。</p><h1 id="6-整合SpringBoot"><a href="#6-整合SpringBoot" class="headerlink" title="6.    整合SpringBoot"></a>6.    整合SpringBoot</h1><h2 id="6-1-引入依赖"><a href="#6-1-引入依赖" class="headerlink" title="6.1    引入依赖"></a>6.1    引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意starter版本适配：</p><p><img src="https://img-blog.csdnimg.cn/20201025153701971.png" alt="image-20201025132822959"></p><h2 id="6-2-提供者"><a href="#6-2-提供者" class="headerlink" title="6.2    提供者"></a>6.2    提供者</h2><h3 id="6-2-1-application-properties"><a href="#6-2-1-application-properties" class="headerlink" title="6.2.1    application.properties"></a>6.2.1    application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务名，不能跟别的dubbo提供端重复</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">boot-user-service-provider</span></span><br><span class="line"><span class="comment">#注册中心的地址加端口号</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">192.168.142.128:2181</span></span><br><span class="line"><span class="comment">#指定注册中心协议</span></span><br><span class="line"><span class="meta">dubbo.registry.protocol</span>=<span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分布式固定是dubbo,不要改</span></span><br><span class="line"><span class="meta">dubbo.protocol.name</span>=<span class="string">dubbo</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span>=<span class="string">20880</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监控中心</span></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span>=<span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注解方式要扫描的包</span></span><br><span class="line"><span class="comment">#dubbo.scan.base-packages=com.wgy.gmall</span></span><br></pre></td></tr></table></figure><h3 id="6-2-2-xml配置文件"><a href="#6-2-2-xml配置文件" class="headerlink" title="6.2.2    xml配置文件"></a>6.2.2    xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-service-provider"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、指定注册中心的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dubbo:registry address="zookeeper://192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.142.128:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务的实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.wgy.gmall.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连接监控中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-3-手动创建配置"><a href="#6-2-3-手动创建配置" class="headerlink" title="6.2.3    手动创建配置"></a>6.2.3    手动创建配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDubboConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationConfig <span class="title">applicationConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationConfig applicationConfig = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">        applicationConfig.setName(<span class="string">"boot-user-service-provider"</span>);</span><br><span class="line">        <span class="keyword">return</span> applicationConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;dubbo:registry protocol="zookeeper" address="192.168.142.128:2181"&gt;&lt;/dubbo:registry&gt;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RegistryConfig <span class="title">registryConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RegistryConfig registryConfig = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">        registryConfig.setProtocol(<span class="string">"zookeeper"</span>);</span><br><span class="line">        registryConfig.setAddress(<span class="string">"192.168.142.128:2181"</span>);</span><br><span class="line">        <span class="keyword">return</span> registryConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;dubbo:protocol name="dubbo" port="20882"&gt;&lt;/dubbo:protocol&gt;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProtocolConfig <span class="title">protocolConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProtocolConfig protocolConfig = <span class="keyword">new</span> ProtocolConfig();</span><br><span class="line">        protocolConfig.setName(<span class="string">"dubbo"</span>);</span><br><span class="line">        protocolConfig.setPort(<span class="number">20882</span>);</span><br><span class="line">        <span class="keyword">return</span> protocolConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;dubbo:service interface="com.wgy.gmall.service.UserService"</span></span><br><span class="line"><span class="comment">     * ref="userServiceImpl" timeout="1000" version="1.0.0"&gt;</span></span><br><span class="line"><span class="comment">     * &lt;dubbo:method name="getUserAddressList" timeout="1000"&gt;&lt;/dubbo:method&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/dubbo:service&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceConfig&lt;UserService&gt; <span class="title">userServiceConfig</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        ServiceConfig&lt;UserService&gt; serviceConfig = <span class="keyword">new</span> ServiceConfig&lt;&gt;();</span><br><span class="line">        serviceConfig.setInterface(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        serviceConfig.setRef(userService);</span><br><span class="line">        serviceConfig.setVersion(<span class="string">"1.0.0"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置每一个method的信息</span></span><br><span class="line">        MethodConfig methodConfig = <span class="keyword">new</span> MethodConfig();</span><br><span class="line">        methodConfig.setName(<span class="string">"getUserAddressList"</span>);</span><br><span class="line">        methodConfig.setTimeout(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将method的设置关联到service配置中</span></span><br><span class="line">        List&lt;MethodConfig&gt; methods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        methods.add(methodConfig);</span><br><span class="line">        serviceConfig.setMethods(methods);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ProviderConfig</span></span><br><span class="line">        <span class="comment">//MonitorConfig</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-启动类"><a href="#6-2-4-启动类" class="headerlink" title="6.2.4 启动类"></a>6.2.4 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、导入依赖；</span></span><br><span class="line"><span class="comment"> *      1）、导入dubbo-starter</span></span><br><span class="line"><span class="comment"> *      2）、导入dubbo的其他依赖</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * SpringBoot与dubbo整合的三种方式：</span></span><br><span class="line"><span class="comment"> *      1）、导入dubbo-starter，在application.properties配置属性，使用<span class="doctag">@Service</span>【暴露服务】使用<span class="doctag">@Reference</span>【引用服务】</span></span><br><span class="line"><span class="comment"> *      2）、保留dubbo xml配置文件;</span></span><br><span class="line"><span class="comment"> *              导入dubbo-starter，使用<span class="doctag">@ImportResource</span>导入dubbo的配置文件即可</span></span><br><span class="line"><span class="comment"> *      3）、使用注解API的方式：</span></span><br><span class="line"><span class="comment"> *              将每一个组件手动创建到容器中,让dubbo来扫描其他的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@EnableDubbo //开启基于注解的dubbo功能</span></span><br><span class="line"><span class="comment">//@ImportResource(locations="classpath:provider.xml")</span></span><br><span class="line"><span class="meta">@EnableDubbo</span>(scanBasePackages=<span class="string">"com.wgy.gmall"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootUserServiceProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootUserServiceProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-5-服务提供方"><a href="#6-2-5-服务提供方" class="headerlink" title="6.2.5    服务提供方"></a>6.2.5    服务提供方</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-消费者"><a href="#6-3-消费者" class="headerlink" title="6.3    消费者"></a>6.3    消费者</h2><h3 id="6-3-1-application-properties"><a href="#6-3-1-application-properties" class="headerlink" title="6.3.1    application.properties"></a>6.3.1    application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">boot-order-service-consumer</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://192.168.142.128:2181</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span>=<span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有在配置中写dubbo.scan.base-package,还需要使用@EnableDubbo注解</span></span><br></pre></td></tr></table></figure><h3 id="6-3-2-启动类"><a href="#6-3-2-启动类" class="headerlink" title="6.3.2    启动类"></a>6.3.2    启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootOrderServiceConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootOrderServiceConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-3-服务消费方"><a href="#6-3-3-服务消费方" class="headerlink" title="6.3.3    服务消费方"></a>6.3.3    服务消费方</h3><h4 id="6-3-3-1-Controller"><a href="#6-3-3-1-Controller" class="headerlink" title="6.3.3.1    Controller"></a>6.3.3.1    Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/initOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(@RequestParam(<span class="string">"uid"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.initOrder(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-3-2-Service"><a href="#6-3-3-2-Service" class="headerlink" title="6.3.3.2    Service"></a>6.3.3.2    Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、将服务提供者注册到注册中心（暴露服务）</span></span><br><span class="line"><span class="comment"> *      1.1  导入dubbo依赖（2.6.2）\操作zookeeper的客户端(curator)</span></span><br><span class="line"><span class="comment"> *      1.2  配置服务提供者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2、让服务消费者去注册中心订阅服务提供者的服务地址</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="comment">//@Reference(url = "192.168.142.1:20882")//dubbo直连</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-dubbo配置"><a href="#7-dubbo配置" class="headerlink" title="7.    dubbo配置"></a>7.    dubbo配置</h1><h2 id="7-1-配置原则"><a href="#7-1-配置原则" class="headerlink" title="7.1    配置原则"></a>7.1    配置原则</h2><p><img src="https://img-blog.csdnimg.cn/20201025153707427.png" alt="image-20201025141548834"></p><p>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</p><p>XML 次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。</p><p>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</p><h2 id="7-2-启动时检查"><a href="#7-2-启动时检查" class="headerlink" title="7.2    启动时检查"></a>7.2    启动时检查</h2><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p><p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>另外，如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 check，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 <code>check=&quot;false&quot;</code>，总是会返回引用，当服务恢复时，能自动连上。</p><h3 id="7-2-1-spring-配置文件"><a href="#7-2-1-spring-配置文件" class="headerlink" title="7.2.1    spring 配置文件"></a>7.2.1    spring 配置文件</h3><p>关闭某个服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭所有服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭注册中心启动时检查 (注册订阅失败时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2-通过-dubbo-properties"><a href="#7-2-2-通过-dubbo-properties" class="headerlink" title="7.2.2    通过 dubbo.properties"></a>7.2.2    通过 dubbo.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.reference.com.foo.BarService.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.reference.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.consumer.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.registry.check</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h2 id="7-3-超时时间"><a href="#7-3-超时时间" class="headerlink" title="7.3    超时时间"></a>7.3    超时时间</h2><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间。</p><h3 id="7-3-1-Dubbo消费端"><a href="#7-3-1-Dubbo消费端" class="headerlink" title="7.3.1    Dubbo消费端"></a>7.3.1    Dubbo消费端</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局超时配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- timeout="0" 默认是1000ms--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定接口以及特定方法超时配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2-Dubbo服务端"><a href="#7-3-2-Dubbo服务端" class="headerlink" title="7.3.2    Dubbo服务端"></a>7.3.2    Dubbo服务端</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局超时配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定接口以及特定方法超时配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">interface</span>=<span class="string">"com.wgy.gmall.service.UserService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-3-配置原则"><a href="#7-3-3-配置原则" class="headerlink" title="7.3.3    配置原则"></a>7.3.3    配置原则</h3><p>dubbo推荐在Provider上尽量多配置Consumer端属性：</p><ul><li>作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等</li><li>在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的</li></ul><p>配置的覆盖规则：</p><ul><li>精确优先 (方法级优先，接口级次之，全局配置再次之)</li><li>消费者设置优先(如果级别一样，则消费方优先，提供方次之)</li></ul><p><img src="https://img-blog.csdnimg.cn/20201025153713223.png" alt="image-20201025145109346"></p><h2 id="7-4-重试次数"><a href="#7-4-重试次数" class="headerlink" title="7.4    重试次数"></a>7.4    重试次数</h2><p>失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- retries="":重试次数，不包含第一次调用，0代表不重试 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 幂等（设置重试次数）【查询、删除、修改】、非幂等（不能设置重试次数）【新增】 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重试次数配置如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-5-版本号"><a href="#7-5-版本号" class="headerlink" title="7.5    版本号"></a>7.5    版本号</h2><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p><p>可以按照以下的步骤进行版本迁移：</p><ul><li>在低压力时间段，先升级一半提供者为新版本</li><li>再将所有消费者升级为新版本</li><li>然后将剩下的一半提供者升级为新版本</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 老版本服务提供者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 新版本服务提供者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 老版本服务消费者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 新版本服务消费者配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果不需要区分版本，可以按照以下的方式配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"*"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-高可用"><a href="#8-高可用" class="headerlink" title="8.    高可用"></a>8.    高可用</h1><h2 id="8-1-zookeeper宕机与dubbo直连"><a href="#8-1-zookeeper宕机与dubbo直连" class="headerlink" title="8.1    zookeeper宕机与dubbo直连"></a>8.1    zookeeper宕机与dubbo直连</h2><p>现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务。</p><p>原因：健壮性</p><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</strong></li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><p>高可用：通过设计，减少系统不能提供服务的时间</p><h2 id="8-2-集群下dubbo负载均衡配置"><a href="#8-2-集群下dubbo负载均衡配置" class="headerlink" title="8.2    集群下dubbo负载均衡配置"></a>8.2    集群下dubbo负载均衡配置</h2><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用。</p><p>负载均衡策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Random LoadBalance</span><br><span class="line">随机，按权重设置随机概率。</span><br><span class="line">在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</span><br><span class="line"></span><br><span class="line">RoundRobin LoadBalance</span><br><span class="line">轮循，按公约后的权重设置轮循比率。</span><br><span class="line">存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</span><br><span class="line"></span><br><span class="line">LeastActive LoadBalance</span><br><span class="line">最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</span><br><span class="line">使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</span><br><span class="line"></span><br><span class="line">ConsistentHash LoadBalance</span><br><span class="line">一致性 Hash，相同参数的请求总是发到同一提供者。</span><br><span class="line">当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Consistent_hashing</span><br><span class="line">缺省只对第一个参数 Hash，如果要修改，请配置 &lt;dubbo:parameter key&#x3D;&quot;hash.arguments&quot; value&#x3D;&quot;0,1&quot; &#x2F;&gt;</span><br><span class="line">缺省用 160 份虚拟节点，如果要修改，请配置 &lt;dubbo:parameter key&#x3D;&quot;hash.nodes&quot; value&#x3D;&quot;320&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Reference</span>(loadbalance=<span class="string">"random"</span>,timeout=<span class="number">1000</span>)</span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-整合hystrix，服务熔断与降级处理"><a href="#8-3-整合hystrix，服务熔断与降级处理" class="headerlink" title="8.3    整合hystrix，服务熔断与降级处理"></a>8.3    整合hystrix，服务熔断与降级处理</h2><h3 id="8-3-1-服务降级"><a href="#8-3-1-服务降级" class="headerlink" title="8.3.1    服务降级"></a>8.3.1    服务降级</h3><p><strong>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</strong></p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p><p><code>mock=force:return+null</code> 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</p><p><code>mock=fail:return+null</code> 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响</p><h3 id="8-3-2-集群容错"><a href="#8-3-2-集群容错" class="headerlink" title="8.3.2    集群容错"></a>8.3.2    集群容错</h3><p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p><p><strong>集群容错模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Failover Cluster</span><br><span class="line">失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries&#x3D;&quot;2&quot; 来设置重试次数(不含第一次)。</span><br><span class="line"></span><br><span class="line">重试次数配置如下：</span><br><span class="line">&lt;dubbo:service retries&#x3D;&quot;2&quot; &#x2F;&gt;</span><br><span class="line">或</span><br><span class="line">&lt;dubbo:reference retries&#x3D;&quot;2&quot; &#x2F;&gt;</span><br><span class="line">或</span><br><span class="line">&lt;dubbo:reference&gt;</span><br><span class="line">    &lt;dubbo:method name&#x3D;&quot;findFoo&quot; retries&#x3D;&quot;2&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;dubbo:reference&gt;</span><br><span class="line"></span><br><span class="line">Failfast Cluster</span><br><span class="line">快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</span><br><span class="line"></span><br><span class="line">Failsafe Cluster</span><br><span class="line">失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</span><br><span class="line"></span><br><span class="line">Failback Cluster</span><br><span class="line">失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</span><br><span class="line"></span><br><span class="line">Forking Cluster</span><br><span class="line">并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks&#x3D;&quot;2&quot; 来设置最大并行数。</span><br><span class="line"></span><br><span class="line">Broadcast Cluster</span><br><span class="line">广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。</span><br><span class="line"></span><br><span class="line">集群模式配置</span><br><span class="line">按照以下示例在服务提供方和消费方配置集群模式</span><br><span class="line">&lt;dubbo:service cluster&#x3D;&quot;failsafe&quot; &#x2F;&gt;</span><br><span class="line">或</span><br><span class="line">&lt;dubbo:reference cluster&#x3D;&quot;failsafe&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="8-3-3-整合hystrix"><a href="#8-3-3-整合hystrix" class="headerlink" title="8.3.3    整合hystrix"></a>8.3.3    整合hystrix</h3><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能</p><h4 id="8-3-3-1-配置spring-cloud-starter-netflix-hystrix"><a href="#8-3-3-1-配置spring-cloud-starter-netflix-hystrix" class="headerlink" title="8.3.3.1    配置spring-cloud-starter-netflix-hystrix"></a>8.3.3.1    配置spring-cloud-starter-netflix-hystrix</h4><p>spring boot官方提供了对hystrix的集成，直接在pom.xml里加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在Application类上增加@EnableHystrix来启用hystrix starter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 启动类</span><br><span class="line"> *</span><br><span class="line"> * @author wgy</span><br><span class="line"> *&#x2F;</span><br><span class="line">@EnableDubbo</span><br><span class="line">@EnableHystrix</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class BootOrderServiceConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BootOrderServiceConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-2-配置Provider端"><a href="#8-3-3-2-配置Provider端" class="headerlink" title="8.3.3.2    配置Provider端"></a>8.3.3.2    配置Provider端</h4><p>在Dubbo的Provider上增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>, <span class="string">"北京市昌平区宏福科技园综合楼3层"</span>, <span class="string">"1"</span>, <span class="string">"李老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>, <span class="string">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span>, <span class="string">"1"</span>, <span class="string">"王老师"</span>, <span class="string">"010-56253825"</span>, <span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1, address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-3-配置Consumer端"><a href="#8-3-3-3-配置Consumer端" class="headerlink" title="8.3.3.3    配置Consumer端"></a>8.3.3.3    配置Consumer端</h4><p>对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = “hello”的调用里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(loadbalance=<span class="string">"random"</span>,timeout=<span class="number">1000</span>) <span class="comment">//dubbo直连</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"hello"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户id："</span> + userId);</span><br><span class="line">        <span class="comment">//1、查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : addressList) &#123;</span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">hello</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> UserAddress(<span class="number">10</span>, <span class="string">"测试地址"</span>, <span class="string">"1"</span>, <span class="string">"测试"</span>, <span class="string">"测试"</span>, <span class="string">"Y"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-dubbo原理"><a href="#9-dubbo原理" class="headerlink" title="9.    dubbo原理"></a>9.    dubbo原理</h1><h2 id="9-1-RPC原理"><a href="#9-1-RPC原理" class="headerlink" title="9.1    RPC原理"></a>9.1    RPC原理</h2><p><img src="https://img-blog.csdnimg.cn/20201025153719548.png" alt="image-20201025152238683"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一次完整的RPC调用流程（同步调用，异步另说）如下： </span><br><span class="line">1）服务消费方（client）调用以本地调用方式调用服务； </span><br><span class="line">2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体； </span><br><span class="line">3）client stub找到服务地址，并将消息发送到服务端； </span><br><span class="line">4）server stub收到消息后进行解码； </span><br><span class="line">5）server stub根据解码结果调用本地的服务； </span><br><span class="line">6）本地服务执行并将结果返回给server stub； </span><br><span class="line">7）server stub将返回结果打包成消息并发送至消费方； </span><br><span class="line">8）client stub接收到消息，并进行解码； </span><br><span class="line">9）服务消费方得到最终结果。</span><br><span class="line">RPC框架的目标就是要2~8这些步骤都封装起来，这些细节对用户来说是透明的，不可见的。</span><br></pre></td></tr></table></figure><h2 id="9-2-netty通信原理"><a href="#9-2-netty通信原理" class="headerlink" title="9.2    netty通信原理"></a>9.2    netty通信原理</h2><p>Netty是一个异步事件驱动的网络应用程序框架， 用于快速开发可维护的高性能协议服务器和客户端。它极大地简化并简化了TCP和UDP套接字服务器等网络编程。</p><p>BIO：(Blocking IO)</p><p><img src="https://img-blog.csdnimg.cn/20201025153725879.png" alt="image-20201025152328614"></p><p>NIO (Non-Blocking IO)</p><p><img src="https://img-blog.csdnimg.cn/20201025153732118.png" alt="image-20201025152343149"></p><p>Selector 一般称 为<strong>选择器</strong> ，也可以翻译为 <strong>多路复用器，</strong></p><p>Connect（连接就绪）、Accept（接受就绪）、Read（读就绪）、Write（写就绪）</p><p>Netty基本原理：</p><p><img src="https://img-blog.csdnimg.cn/20201025153738453.png" alt="image-20201025152719647"></p><h2 id="9-3-dubbo原理"><a href="#9-3-dubbo原理" class="headerlink" title="9.3    dubbo原理"></a>9.3    dubbo原理</h2><h3 id="9-3-1-dubbo原理-框架设计"><a href="#9-3-1-dubbo原理-框架设计" class="headerlink" title="9.3.1    dubbo原理   -框架设计"></a>9.3.1    dubbo原理   -框架设计</h3><p><img src="https://img-blog.csdnimg.cn/20201025153745109.png" alt="image-20201025152813545"></p><ul><li><strong>config 配置层</strong>：对外配置接口，以 ServiceConfig, ReferenceConfig 为中心，可以直接初始化配置类，也可以通过 spring 解析配置生成配置类</li><li><strong>proxy 服务代理层</strong>：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 ServiceProxy 为中心，扩展接口为 ProxyFactory</li><li><strong>registry 注册中心层</strong>：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory, Registry, RegistryService</li><li><strong>cluster 路由层</strong>：封装多个提供者的路由及负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster, Directory, Router, LoadBalance</li><li><strong>monitor 监控层</strong>：RPC 调用次数和调用时间监控，以 Statistics 为中心，扩展接口为 MonitorFactory, Monitor, MonitorService</li><li><strong>protocol 远程调用层</strong>：封装 RPC 调用，以 Invocation, Result 为中心，扩展接口为 Protocol, Invoker, Exporter</li><li><strong>exchange 信息交换层</strong>：封装请求响应模式，同步转异步，以 Request, Response 为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer</li><li><strong>transport 网络传输层</strong>：抽象 mina 和 netty 为统一接口，以 Message 为中心，扩展接口为 Channel, Transporter, Client, Server, Codec</li><li><strong>serialize 数据序列化层</strong>：可复用的一些工具，扩展接口为 Serialization, ObjectInput, ObjectOutput, ThreadPool</li></ul><h3 id="9-3-2-dubbo原理-启动解析、加载配置信息"><a href="#9-3-2-dubbo原理-启动解析、加载配置信息" class="headerlink" title="9.3.2    dubbo原理   -启动解析、加载配置信息"></a>9.3.2    dubbo原理   -启动解析、加载配置信息</h3><p><img src="https://img-blog.csdnimg.cn/20201025153751344.png" alt="image-20201025153036742"></p><h3 id="9-3-3-dubbo原理-服务暴露"><a href="#9-3-3-dubbo原理-服务暴露" class="headerlink" title="9.3.3    dubbo原理   -服务暴露"></a>9.3.3    dubbo原理   -服务暴露</h3><p><img src="https://img-blog.csdnimg.cn/20201025153756836.png" alt="image-20201025153141628"></p><h3 id="9-3-4-dubbo原理-服务引用"><a href="#9-3-4-dubbo原理-服务引用" class="headerlink" title="9.3.4    dubbo原理   -服务引用"></a>9.3.4    dubbo原理   -服务引用</h3><p><img src="https://img-blog.csdnimg.cn/20201025153802464.png" alt="image-20201025153209162"></p><h3 id="9-3-5-dubbo原理-服务调用"><a href="#9-3-5-dubbo原理-服务调用" class="headerlink" title="9.3.5    dubbo原理   -服务调用"></a>9.3.5    dubbo原理   -服务调用</h3><p><img src="https://img-blog.csdnimg.cn/20201025153808389.png" alt="image-20201025153304403"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-分布式基础理论&quot;&gt;&lt;a href=&quot;#1-分布式基础理论&quot; class=&quot;headerlink&quot; title=&quot;1.    分布式基础理论&quot;&gt;&lt;/a&gt;1.    分布式基础理论&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是分布式系统&quot;&gt;&lt;a href=&quot;#1-1-什么是分布式系统&quot; class=&quot;headerlink&quot; title=&quot;1.1    什么是分布式系统&quot;&gt;&lt;/a&gt;1.1    什么是分布式系统&lt;/h2&gt;&lt;p&gt;分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统&lt;/p&gt;
&lt;p&gt;分布式系统（distributed system）是建立在网络之上的软件系统。&lt;/p&gt;
&lt;p&gt;随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需&lt;strong&gt;一个治理系统&lt;/strong&gt;确保架构有条不紊的演进&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式架构方案" scheme="https://wgy1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
      <category term="Dubbo" scheme="https://wgy1993.gitee.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://wgy1993.gitee.io/archives/b543ced0.html"/>
    <id>https://wgy1993.gitee.io/archives/b543ced0.html</id>
    <published>2020-10-10T04:39:03.000Z</published>
    <updated>2020-10-10T04:44:09.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-消息中间件概述"><a href="#1-消息中间件概述" class="headerlink" title="1.    消息中间件概述"></a>1.    消息中间件概述</h1><h2 id="1-1-什么是消息中间件"><a href="#1-1-什么是消息中间件" class="headerlink" title="1.1    什么是消息中间件"></a>1.1    什么是消息中间件</h2><p>MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。</p><ul><li><p>为什么使用MQ</p><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong>。</p></li></ul><a id="more"></a><ul><li><p>开发中消息队列通常有如下应用场景：</p><p>1、任务<strong>异步</strong>处理</p><p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p><p>2、应用程序<strong>解耦合</strong></p><p>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p><p>3、<strong>削峰填谷</strong></p><p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。</p><p><img src="https://img-blog.csdnimg.cn/20201010122202295.png" alt="image-20201009165832865"></p><p>消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p><p><img src="https://img-blog.csdnimg.cn/20201010122232464.png" alt="image-20201009165928229"></p><p>但是使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000QPS，直到消费完积压的消息,这就叫做“填谷”</p><p><img src="https://img-blog.csdnimg.cn/20201010122248282.png" alt="image-20201009170012969"></p></li></ul><h2 id="1-2-AMQP-和-JMS"><a href="#1-2-AMQP-和-JMS" class="headerlink" title="1.2    AMQP 和 JMS"></a>1.2    AMQP 和 JMS</h2><p>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</p><h3 id="1-2-1-AMQP"><a href="#1-2-1-AMQP" class="headerlink" title="1.2.1    AMQP"></a>1.2.1    AMQP</h3><p>AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h3 id="1-2-2-JMS"><a href="#1-2-2-JMS" class="headerlink" title="1.2.2    JMS"></a>1.2.2    JMS</h3><p>JMS即Java消息服务（JavaMessage Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><h3 id="1-2-3-AMQP-与-JMS-区别"><a href="#1-2-3-AMQP-与-JMS-区别" class="headerlink" title="1.2.3    AMQP 与 JMS 区别"></a>1.2.3    AMQP 与 JMS 区别</h3><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模式；而AMQP的消息模式更加丰富</li></ul><h2 id="1-3-消息队列产品"><a href="#1-3-消息队列产品" class="headerlink" title="1.3    消息队列产品"></a>1.3    消息队列产品</h2><p>市场上常见的消息队列有如下：</p><ul><li>ActiveMQ：基于JMS</li><li>ZeroMQ：基于C语言开发</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li><li>RocketMQ：基于JMS，阿里巴巴产品</li><li>Kafka：类似MQ的产品；分布式消息系统，高吞吐量</li></ul><h2 id="1-4-RabbitMQ"><a href="#1-4-RabbitMQ" class="headerlink" title="1.4    RabbitMQ"></a>1.4    RabbitMQ</h2><p>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><p>RabbitMQ提供了6种模式：简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式（远程调用，不太算MQ；暂不作介绍）；</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></p><p><img src="https://img-blog.csdnimg.cn/20201010122305209.png" alt="image-20201009170632004"></p><h1 id="2-安装及配置RabbitMQ"><a href="#2-安装及配置RabbitMQ" class="headerlink" title="2.    安装及配置RabbitMQ"></a>2.    安装及配置RabbitMQ</h1><h2 id="2-1-安装Socat"><a href="#2-1-安装Socat" class="headerlink" title="2.1    安装Socat"></a>2.1    安装Socat</h2><p>在线安装依赖环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line">yum install socat</span><br></pre></td></tr></table></figure><h2 id="2-2-安装Erlang"><a href="#2-2-安装Erlang" class="headerlink" title="2.2    安装Erlang"></a>2.2    安装Erlang</h2><p><img src="https://img-blog.csdnimg.cn/20201010122323950.png" alt="image-20201009170829514"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /rabbitmq &amp;&amp; <span class="built_in">cd</span> /rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传 erlang-22.0.7-1.el7.x86_64.rpm 安装包上传</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="2-3-安装RabbitMQ"><a href="#2-3-安装RabbitMQ" class="headerlink" title="2.3    安装RabbitMQ"></a>2.3    安装RabbitMQ</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传 rabbitmq-server-3.7.17-1.el7.noarch.rpm 安装包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.7.17-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201010122337571.png" alt="image-20201009170959146"></p><h2 id="2-4-开启管理界面及配置"><a href="#2-4-开启管理界面及配置" class="headerlink" title="2.4    开启管理界面及配置"></a>2.4    开启管理界面及配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启管理界面</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置远程可使用guest登录mq</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/doc/rabbitmq-server-3.7.17</span><br><span class="line"></span><br><span class="line">cp rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vi /etc/rabbitmq/rabbitmq.config</span><br><span class="line"></span><br><span class="line">// 创建文件</span><br><span class="line">vi /etc/rabbitmq/rabbitmq-env.conf</span><br><span class="line"><span class="comment">#添加内容</span></span><br><span class="line">NODENAME=rabbit@localhost</span><br></pre></td></tr></table></figure><p>修改<code>/etc/rabbitmq/rabbitmq.config</code>配置文件：</p><p><img src="https://img-blog.csdnimg.cn/20201010122351228.png" alt="image-20201009171209807"></p><p><img src="https://img-blog.csdnimg.cn/2020101012240399.png" alt="image-20201009171220495"></p><h2 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5    启动"></a>2.5    启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">centos6用这个命令：</span><br><span class="line">/sbin/service rabbitmq-server restart</span><br><span class="line"></span><br><span class="line">centos7用这个命令：</span><br><span class="line">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="2-6-配置虚拟主机及用户"><a href="#2-6-配置虚拟主机及用户" class="headerlink" title="2.6    配置虚拟主机及用户"></a>2.6    配置虚拟主机及用户</h2><h3 id="2-6-1-用户角色"><a href="#2-6-1-用户角色" class="headerlink" title="2.6.1    用户角色"></a>2.6.1    用户角色</h3><p>RabbitMQ在安装好后，可以访问<code>http://ip地址:15672</code> ；其自带了guest/guest的用户名和密码；如果需要创建自定义用户；那么也可以登录管理界面后，如下操作：</p><p><img src="https://img-blog.csdnimg.cn/20201010122424134.png" alt="image-20201009171339054"></p><p><img src="https://img-blog.csdnimg.cn/20201010122436220.png" alt="image-20201009171416573"></p><p><strong>角色说明</strong>：</p><ul><li><p>超级管理员(administrator)</p><p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p>监控者(monitoring)</p><p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p>策略制定者(policymaker)</p><p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p>普通管理者(management)</p><p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li><li><p>其他</p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ul><h3 id="2-6-2-Virtual-Hosts配置"><a href="#2-6-2-Virtual-Hosts配置" class="headerlink" title="2.6.2    Virtual Hosts配置"></a>2.6.2    Virtual Hosts配置</h3><p>像mysql拥有数据库的概念并且可以指定用户对库和表等操作的权限。RabbitMQ也有类似的权限管理；在RabbitMQ中可以虚拟消息服务器Virtual Host，每个Virtual Hosts相当于一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。 相当于mysql的db。Virtual Name一般以/开头。</p><h4 id="2-6-2-1-创建Virtual-Hosts"><a href="#2-6-2-1-创建Virtual-Hosts" class="headerlink" title="2.6.2.1    创建Virtual Hosts"></a>2.6.2.1    创建Virtual Hosts</h4><p><img src="https://img-blog.csdnimg.cn/20201010122453172.png" alt="image-20201009171626561"></p><h4 id="2-6-2-2-设置Virtual-Hosts权限"><a href="#2-6-2-2-设置Virtual-Hosts权限" class="headerlink" title="2.6.2.2    设置Virtual Hosts权限"></a>2.6.2.2    设置Virtual Hosts权限</h4><p><img src="https://img-blog.csdnimg.cn/2020101012250754.png" alt="image-20201009171658869"></p><p><img src="https://img-blog.csdnimg.cn/20201010122519999.png" alt="image-20201009171712577"></p><p><img src="https://img-blog.csdnimg.cn/20201010122532993.png" alt="image-20201009171957088"></p><h1 id="3-RabbitMQ入门"><a href="#3-RabbitMQ入门" class="headerlink" title="3.    RabbitMQ入门"></a>3.    RabbitMQ入门</h1><h2 id="3-1-创建工程添加依赖"><a href="#3-1-创建工程添加依赖" class="headerlink" title="3.1    创建工程添加依赖"></a>3.1    创建工程添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--RabbitMQ的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-编写生产者"><a href="#3-2-编写生产者" class="headerlink" title="3.2    编写生产者"></a>3.2    编写生产者</h2><p>编写消息生产者com.wgy.rabbitmq.simple.Producer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 消息生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机地址;默认为 localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"192.168.142.128"</span>);</span><br><span class="line">        <span class="comment">//连接端口;默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机名称;默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">//连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">"wgy"</span>);</span><br><span class="line">        <span class="comment">//连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要发送的信息</span></span><br><span class="line">        String message = <span class="string">"你好；小兔子！"</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行上述的消息发送之后；可以登录rabbitMQ的管理控制台，可以发现队列和其消息：</p><p><img src="https://img-blog.csdnimg.cn/20201010122551196.png" alt="image-20201009172453328"></p><p><img src="https://img-blog.csdnimg.cn/20201010122605493.png" alt="image-20201009172514650"></p><h2 id="3-3-编写消费者"><a href="#3-3-编写消费者" class="headerlink" title="3.3    编写消费者"></a>3.3    编写消费者</h2><p>抽取创建connection的工具类com.wgy.rabbitmq.util.ConnectionUtil；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connection的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机地址;默认为 localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"192.168.142.128"</span>);</span><br><span class="line">        <span class="comment">//连接端口;默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机名称;默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/test"</span>);</span><br><span class="line">        <span class="comment">//连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">"wgy"</span>);</span><br><span class="line">        <span class="comment">//连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="keyword">return</span> connectionFactory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写消息的消费者com.wgy.rabbitmq.simple.Consumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不关闭资源，应该一直监听消息</span></span><br><span class="line">        <span class="comment">//channel.close();</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4    小结"></a>3.4    小结</h2><p>上述的入门案例中其实使用的是如下的简单模式：</p><p><img src="https://img-blog.csdnimg.cn/20201010122625581.png" alt="image-20201009172842254"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><blockquote><p>在rabbitMQ中消费者是一定要到某个消息队列中去获取消息的</p></blockquote><h1 id="4-AMQP"><a href="#4-AMQP" class="headerlink" title="4.    AMQP"></a>4.    AMQP</h1><h2 id="4-1-相关概念介绍"><a href="#4-1-相关概念介绍" class="headerlink" title="4.1. 相关概念介绍"></a>4.1. 相关概念介绍</h2><p>AMQP 一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><p>AMQP是一个二进制协议，拥有一些现代化特点：多信道、协商式，异步，安全，扩平台，中立，高效。</p><p>RabbitMQ是AMQP协议的Erlang的实现。</p><table><thead><tr><th align="left">概念</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">连接Connection</td><td align="left">一个网络连接，比如TCP/IP套接字连接。</td></tr><tr><td align="left">会话Session</td><td align="left">端点之间的命名对话。在一个会话上下文中，保证“恰好传递一次”。</td></tr><tr><td align="left">信道Channel</td><td align="left">多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。</td></tr><tr><td align="left">客户端Client</td><td align="left">AMQP连接或者会话的发起者。AMQP是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。</td></tr><tr><td align="left">服务节点Broker</td><td align="left">消息中间件的服务节点；一般情况下可以将一个RabbitMQ Broker看作一台RabbitMQ 服务器。</td></tr><tr><td align="left">端点</td><td align="left">AMQP对话的任意一方。一个AMQP连接包括两个端点（一个是客户端，一个是服务器）。</td></tr><tr><td align="left">消费者Consumer</td><td align="left">一个从消息队列里请求消息的客户端程序。</td></tr><tr><td align="left">生产者Producer</td><td align="left">一个向交换机发布消息的客户端应用程序。</td></tr></tbody></table><h2 id="4-2-RabbitMQ运转流程"><a href="#4-2-RabbitMQ运转流程" class="headerlink" title="4.2    RabbitMQ运转流程"></a>4.2    RabbitMQ运转流程</h2><p>在入门案例中：</p><ul><li>生产者发送消息<ol><li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li><li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li><li>将路由键（空字符串）与队列绑定起来；</li><li>发送消息至RabbitMQ Broker；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li><li>消费者接收消息<ol><li>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</li><li>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</li><li>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</li><li>确认（ack，自动确认）接收到的消息；</li><li>RabbitMQ从队列中删除相应已经被确认的消息；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li></ul><p><img src="https://img-blog.csdnimg.cn/2020101012264267.png" alt="image-20201009173246302"></p><h2 id="4-3-生产者流转过程说明"><a href="#4-3-生产者流转过程说明" class="headerlink" title="4.3    生产者流转过程说明"></a>4.3    生产者流转过程说明</h2><ol><li>客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQP 0-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>客户端调用connection.createChannel方法。此方法开启信道，其包装的channel.open命令发送给Broker,等待channel.basicPublish方法，对应的AMQP命令为Basic.Publish,这个命令包含了content Header 和content Body()。content Header 包含了消息体的属性，例如:投递模式，优先级等，content Body 包含了消息体本身。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="https://img-blog.csdnimg.cn/20201010122656366.png" alt="image-20201009173441245"></p><h2 id="4-4-消费者流转过程说明"><a href="#4-4-消费者流转过程说明" class="headerlink" title="4.4    消费者流转过程说明"></a>4.4    消费者流转过程说明</h2><ol><li>消费者客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQP 0-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>消费者客户端调用connection.createChannel方法。和生产者客户端一样，协议涉及Channel.Open/Open-Ok命令。</li><li>在真正消费之前，消费者客户端需要向Broker 发送Basic.Consume 命令(即调用channel.basicConsume 方法〉将Channel 置为接收模式，之后Broker 回执Basic.Consume - Ok 以告诉消费者客户端准备好消费消息。</li><li>Broker 向消费者客户端推送(Push) 消息，即Basic.Deliver 命令，这个命令和Basic.Publish 命令一样会携带Content Header 和Content Body。</li><li>消费者接收到消息并正确消费之后，向Broker 发送确认，即Basic.Ack 命令。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="https://img-blog.csdnimg.cn/20201010122711378.png" alt="image-20201009173742917"></p><h1 id="5-RabbitMQ工作模式"><a href="#5-RabbitMQ工作模式" class="headerlink" title="5.    RabbitMQ工作模式"></a>5.    RabbitMQ工作模式</h1><h2 id="5-1-Work-queues工作队列模式"><a href="#5-1-Work-queues工作队列模式" class="headerlink" title="5.1    Work queues工作队列模式"></a>5.1    Work queues工作队列模式</h2><h3 id="5-1-1-模式说明"><a href="#5-1-1-模式说明" class="headerlink" title="5.1.1    模式说明"></a>5.1.1    模式说明</h3><p><img src="https://img-blog.csdnimg.cn/20201010122741516.png" alt="image-20201009174655177"></p><p><code>Work Queues</code>与入门程序的<code>简单模式</code>相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</p><h3 id="5-1-2-代码"><a href="#5-1-2-代码" class="headerlink" title="5.1.2    代码"></a>5.1.2    代码</h3><p><code>Work Queues</code>与入门程序的<code>简单模式</code>的代码是几乎一样的；可以完全复制，并复制多一个消费者进行多个消费者同时消费消息的测试。</p><h4 id="5-1-2-1-生产者"><a href="#5-1-2-1-生产者" class="headerlink" title="5.1.2.1    生产者"></a>5.1.2.1    生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Work queues工作队列模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 消息生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 发送信息</span></span><br><span class="line">            String message = <span class="string">"你好；小兔子！work模式--"</span> + i;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">             * 参数4：消息内容</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-2-消费者1"><a href="#5-1-2-2-消费者1" class="headerlink" title="5.1.2.2    消费者1"></a>5.1.2.2    消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠一秒钟</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-3-消费者2"><a href="#5-1-2-3-消费者2" class="headerlink" title="5.1.2.3    消费者2"></a>5.1.2.3    消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠一秒钟</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-3-测试"><a href="#5-1-3-测试" class="headerlink" title="5.1.3    测试"></a>5.1.3    测试</h3><p>启动两个消费者，然后再启动生产者发送消息；到IDEA的两个消费者对应的控制台查看是否竞争性的接收到消息。</p><p><img src="https://img-blog.csdnimg.cn/20201010122802255.png" alt="image-20201009175654681"></p><p><img src="https://img-blog.csdnimg.cn/20201010122818356.png" alt="image-20201009175708698"></p><h3 id="5-1-4-小结"><a href="#5-1-4-小结" class="headerlink" title="5.1.4    小结"></a>5.1.4    小结</h3><p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系。</p><h2 id="5-2-订阅模式类型"><a href="#5-2-订阅模式类型" class="headerlink" title="5.2    订阅模式类型"></a>5.2    订阅模式类型</h2><p>订阅模式示例图：</p><p><img src="https://img-blog.csdnimg.cn/20201010122835127.png" alt="image-20201009175753649"></p><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分</li></ul><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="5-3-Publish-Subscribe发布与订阅模式"><a href="#5-3-Publish-Subscribe发布与订阅模式" class="headerlink" title="5.3    Publish/Subscribe发布与订阅模式"></a>5.3    Publish/Subscribe发布与订阅模式</h2><h3 id="5-3-1-模式说明"><a href="#5-3-1-模式说明" class="headerlink" title="5.3.1    模式说明"></a>5.3.1    模式说明</h3><p><img src="https://img-blog.csdnimg.cn/20201010122854654.png" alt="image-20201009175935312"></p><p>发布订阅模式： 1、每个消费者监听自己的队列。 2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息</p><h3 id="5-3-2-代码"><a href="#5-3-2-代码" class="headerlink" title="5.3.2    代码"></a>5.3.2    代码</h3><h4 id="5-3-2-1-生产者"><a href="#5-3-2-1-生产者" class="headerlink" title="5.3.2.1    生产者"></a>5.3.2.1    生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Publish/Subscribe发布与订阅模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * 发布与订阅使用的交换机类型为：fanout</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_EXCHANGE = <span class="string">"fanout_exchange"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_1 = <span class="string">"fanout_queue_1"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_2 = <span class="string">"fanout_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(FANOUT_EXCHANGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(FANOUT_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(FANOUT_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(FANOUT_QUEUE_1, FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line">        channel.queueBind(FANOUT_QUEUE_2, FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 发送信息</span></span><br><span class="line">            String message = <span class="string">"你好；小兔子！发布订阅模式--"</span> + i;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">             * 参数4：消息内容</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(FANOUT_EXCHANGE, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-2-消费者1"><a href="#5-3-2-2-消费者1" class="headerlink" title="5.3.2.2    消费者1"></a>5.3.2.2    消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.FANOUT_EXCHANGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.FANOUT_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.FANOUT_QUEUE_1, Producer.FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.FANOUT_QUEUE_1, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-3-消费者2"><a href="#5-3-2-3-消费者2" class="headerlink" title="5.3.2.3    消费者2"></a>5.3.2.3    消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.FANOUT_EXCHANGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.FANOUT_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.FANOUT_QUEUE_2, Producer.FANOUT_EXCHANGE, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.FANOUT_QUEUE_2, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-测试"><a href="#5-3-3-测试" class="headerlink" title="5.3.3. 测试"></a>5.3.3. 测试</h3><p>启动所有消费者，然后使用生产者发送消息；在每个消费者对应的控制台可以查看到生产者发送的所有消息；到达<strong>广播</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>fanout_exchange</code> 的交换机，可以查看到如的绑定：</p><p><img src="https://img-blog.csdnimg.cn/2020101012291357.png" alt="image-20201009180701439"></p><h3 id="5-3-4-小结"><a href="#5-3-4-小结" class="headerlink" title="5.3.4    小结"></a>5.3.4    小结</h3><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><p><strong>发布订阅模式与工作队列模式的区别：</strong></p><ul><li>工作队列模式不用定义交换机，而发布/订阅模式需要定义交换机。</li><li>发布/订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)。</li><li>发布/订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑 定到默认的交换机 。</li></ul><h2 id="5-4-Routing路由模式"><a href="#5-4-Routing路由模式" class="headerlink" title="5.4    Routing路由模式"></a>5.4    Routing路由模式</h2><h3 id="5-4-1-模式说明"><a href="#5-4-1-模式说明" class="headerlink" title="5.4.1    模式说明"></a>5.4.1    模式说明</h3><p>路由模式特点：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><img src="https://img-blog.csdnimg.cn/20201010122932269.png" alt="image-20201009182127045"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h3 id="5-4-2-代码"><a href="#5-4-2-代码" class="headerlink" title="5.4.2    代码"></a>5.4.2    代码</h3><p>在编码上与 <code>Publish/Subscribe发布与订阅模式</code> 的区别是交换机的类型为：Direct，还有队列绑定交换机的时候需要指定routing key。</p><h4 id="5-4-2-1-生产者"><a href="#5-4-2-1-生产者" class="headerlink" title="5.4.2.1    生产者"></a>5.4.2.1    生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Routing路由模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * 路由模式的交换机类型为：direct</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_EXCHANGE = <span class="string">"direct_exchange"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE_INSERT = <span class="string">"direct_queue_insert"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE_UPDATE = <span class="string">"direct_queue_update"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(DIRECT_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(DIRECT_QUEUE_INSERT, DIRECT_EXCHANGE, <span class="string">"insert"</span>);</span><br><span class="line">        channel.queueBind(DIRECT_QUEUE_UPDATE, DIRECT_EXCHANGE, <span class="string">"update"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        String message = <span class="string">"新增了商品。路由模式；routing key 为 insert "</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(DIRECT_EXCHANGE, <span class="string">"insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">"修改了商品。路由模式；routing key 为 update"</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchange</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(DIRECT_EXCHANGE, <span class="string">"update"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-2-消费者1"><a href="#5-4-2-2-消费者1" class="headerlink" title="5.4.2.2    消费者1"></a>5.4.2.2    消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.DIRECT_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.DIRECT_QUEUE_INSERT, Producer.DIRECT_EXCHANGE, <span class="string">"insert"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-3-消费者2"><a href="#5-4-2-3-消费者2" class="headerlink" title="5.4.2.3    消费者2"></a>5.4.2.3    消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.DIRECT_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.DIRECT_QUEUE_UPDATE, Producer.DIRECT_EXCHANGE, <span class="string">"update"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-测试"><a href="#5-4-3-测试" class="headerlink" title="5.4.3    测试"></a>5.4.3    测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>direct_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="https://img-blog.csdnimg.cn/20201010122955501.png" alt="image-20201009183006094"></p><h3 id="5-4-4-小结"><a href="#5-4-4-小结" class="headerlink" title="5.4.4. 小结"></a>5.4.4. 小结</h3><p>Routing模式要求队列在绑定交换机时要指定routing key，消息会转发到符合routing key的队列。</p><h2 id="5-5-Topics通配符模式"><a href="#5-5-Topics通配符模式" class="headerlink" title="5.5    Topics通配符模式"></a>5.5    Topics通配符模式</h2><h3 id="5-5-1-模式说明"><a href="#5-5-1-模式说明" class="headerlink" title="5.5.1    模式说明"></a>5.5.1    模式说明</h3><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候<strong>使用通配符</strong>！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p>通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.insert.abc</code> 或者 <code>item.insert</code></p><p><code>item.*</code>：只能匹配<code>item.insert</code></p><h3 id="5-5-2-代码"><a href="#5-5-2-代码" class="headerlink" title="5.5.2    代码"></a>5.5.2    代码</h3><h4 id="5-5-2-1-生产者"><a href="#5-5-2-1-生产者" class="headerlink" title="5.5.2.1    生产者"></a>5.5.2.1    生产者</h4><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.insert</code>、<code>item.update</code>、<code>item.delete</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Topics通配符模式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * 通配符Topic的交换机类型为：topic</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHANGE = <span class="string">"topic_exchange"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_1 = <span class="string">"topic_queue_1"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_2 = <span class="string">"topic_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、topic、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(TOPIC_EXCHANGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        String message = <span class="string">"新增了商品。Topic模式；routing key 为 item.insert "</span>;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHANGE, <span class="string">"item.insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">"修改了商品。Topic模式；routing key 为 item.update"</span>;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHANGE, <span class="string">"item.update"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">"删除了商品。Topic模式；routing key 为 item.delete"</span>;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHANGE, <span class="string">"item.delete"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"已发送消息："</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-2-消费者1"><a href="#5-2-2-2-消费者1" class="headerlink" title="5.2.2.2    消费者1"></a>5.2.2.2    消费者1</h4><p>接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.TOPIC_EXCHANGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.TOPIC_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHANGE, <span class="string">"item.update"</span>);</span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHANGE, <span class="string">"item.delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者1-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.TOPIC_QUEUE_1, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-3-消费者2"><a href="#5-2-2-3-消费者2" class="headerlink" title="5.2.2.3    消费者2"></a>5.2.2.3    消费者2</h4><p>接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.TOPIC_EXCHANGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.TOPIC_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_2, Producer.TOPIC_EXCHANGE, <span class="string">"item.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">"路由key为："</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">"交换机为："</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">"消息id为："</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">"消费者2-接收到的消息为："</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.TOPIC_QUEUE_2, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-3-测试"><a href="#5-5-3-测试" class="headerlink" title="5.5.3    测试"></a>5.5.3    测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果；并且这些routing key可以使用通配符。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>topic_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="https://img-blog.csdnimg.cn/2020101012302493.png" alt="image-20201009184440606"></p><h3 id="5-5-4-小结"><a href="#5-5-4-小结" class="headerlink" title="5.5.4. 小结"></a>5.5.4. 小结</h3><p>Topic主题模式可以实现 <code>Publish/Subscribe发布与订阅模式</code> 和 <code>Routing路由模式</code> 的功能；只是Topic在配置routing key 的时候可以使用通配符，显得更加灵活。</p><h2 id="5-6-模式总结"><a href="#5-6-模式总结" class="headerlink" title="5.6    模式总结"></a>5.6    模式总结</h2><p>RabbitMQ工作模式： </p><p><strong>1、简单模式 HelloWorld</strong> 一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><strong>2、工作队列模式 Work Queue</strong> 一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><strong>3、发布订阅模式 Publish/subscribe</strong> 需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><strong>4、路由模式 Routing</strong> 需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p><strong>5、通配符模式 Topic</strong> 需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><h1 id="6-Spring-Boot整合RabbitMQ"><a href="#6-Spring-Boot整合RabbitMQ" class="headerlink" title="6.    Spring Boot整合RabbitMQ"></a>6.    Spring Boot整合RabbitMQ</h1><h2 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1    简介"></a>6.1    简介</h2><p>在Spring项目中，可以使用Spring-Rabbit去操作RabbitMQ <a href="https://github.com/spring-projects/spring-amqp" target="_blank" rel="noopener">https://github.com/spring-projects/spring-amqp</a></p><p>尤其是在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。</p><p><em>一般在开发过程中</em>：</p><p><strong>生产者工程：</strong></p><ol><li>application.yml文件配置RabbitMQ相关信息；</li><li>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</li><li>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</li></ol><p><strong>消费者工程：</strong></p><ol><li>application.yml文件配置RabbitMQ相关信息</li><li>创建消息处理类，用于接收队列中的消息并进行处理</li></ol><h2 id="6-2-搭建生产者工程"><a href="#6-2-搭建生产者工程" class="headerlink" title="6.2    搭建生产者工程"></a>6.2    搭建生产者工程</h2><h3 id="6-2-1-创建工程添加依赖"><a href="#6-2-1-创建工程添加依赖" class="headerlink" title="6.2.1    创建工程添加依赖"></a>6.2.1    创建工程添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rabbitmq-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用springmvc来进行测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--amqp的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-2-配置RabbitMQ"><a href="#6-2-2-配置RabbitMQ" class="headerlink" title="6.2.2    配置RabbitMQ"></a>6.2.2    配置RabbitMQ</h3><h4 id="6-2-2-1-配置文件"><a href="#6-2-2-1-配置文件" class="headerlink" title="6.2.2.1    配置文件"></a>6.2.2.1    配置文件</h4><p>创建application.yml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="comment">#Rabbitmq的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="6-2-2-2-绑定交换机和队列"><a href="#6-2-2-2-绑定交换机和队列" class="headerlink" title="6.2.2.2    绑定交换机和队列"></a>6.2.2.2    绑定交换机和队列</h4><p>创建RabbitMQ队列与交换机绑定的配置类com.wgy.rabbitmq.config.RabbitMQConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_TOPIC_EXCHANGE = <span class="string">"item_topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_QUEUE = <span class="string">"item_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"itemTopicExchange"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"itemQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">itemQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(ITEM_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">itemQueueExchange</span><span class="params">(@Qualifier(<span class="string">"itemQueue"</span>)</span> Queue queue, @<span class="title">Qualifier</span><span class="params">(<span class="string">"itemTopicExchange"</span>)</span> Exchange exchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">"item.#"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3-启动类"><a href="#6-2-3-启动类" class="headerlink" title="6.2.3    启动类"></a>6.2.3    启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者的启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-消息发送Controller"><a href="#6-2-4-消息发送Controller" class="headerlink" title="6.2.4    消息发送Controller"></a>6.2.4    消息发送Controller</h3><p>我们创建一个SpringMVC的Controller方便我们进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息的测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMsgController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入RabbitMQ的模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendmsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(@RequestParam String msg, @RequestParam String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 发送消息</span></span><br><span class="line"><span class="comment">         * 参数一：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数二：路由key</span></span><br><span class="line"><span class="comment">         * 参数三：发送的消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, key, msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回消息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"发送消息成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-搭建消费者工程"><a href="#6-3-搭建消费者工程" class="headerlink" title="6.3    搭建消费者工程"></a>6.3    搭建消费者工程</h2><h3 id="6-3-1-创建工程添加依赖"><a href="#6-3-1-创建工程添加依赖" class="headerlink" title="6.3.1    创建工程添加依赖"></a>6.3.1    创建工程添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rabbitmq-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-2-配置RabbitMQ"><a href="#6-3-2-配置RabbitMQ" class="headerlink" title="6.3.2    配置RabbitMQ"></a>6.3.2    配置RabbitMQ</h3><p>创建application.yml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"><span class="comment">#Rabbitmq的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.142</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">wgy</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="6-3-3-启动类"><a href="#6-3-3-启动类" class="headerlink" title="6.3.3    启动类"></a>6.3.3    启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-4-消息监听处理类"><a href="#6-3-4-消息监听处理类" class="headerlink" title="6.3.4    消息监听处理类"></a>6.3.4    消息监听处理类</h3><p>编写消息监听器com.wgy.rabbitmq.listener.MyListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者监听类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听某个队列的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收到的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"item_queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListener1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者接收到的消息为："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-5-测试"><a href="#6-3-5-测试" class="headerlink" title="6.3.5    测试"></a>6.3.5    测试</h3><p><img src="https://img-blog.csdnimg.cn/20201010123102469.png" alt="image-20201009202410811"></p><p>在生产者工程springboot-rabbitmq-producer中创建测试类，发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">"item.insert"</span>, <span class="string">"商品新增，routing key 为item.insert"</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">"item.update"</span>, <span class="string">"商品修改，routing key 为item.update"</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">"item.delete"</span>, <span class="string">"商品删除，routing key 为item.delete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先运行上述测试程序（交换机和队列才能先被声明和绑定），然后启动消费者；在消费者工程springboot-rabbitmq-consumer中控制台查看是否接收到对应消息。</p><h1 id="7-RabbitMQ-高级"><a href="#7-RabbitMQ-高级" class="headerlink" title="7.    RabbitMQ 高级"></a>7.    RabbitMQ 高级</h1><h2 id="7-1-过期时间TTL"><a href="#7-1-过期时间TTL" class="headerlink" title="7.1    过期时间TTL"></a>7.1    过期时间TTL</h2><p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ可以对<strong>消息和队列</strong>设置TTL。目前有两种方法可以设置。</p><ul><li>第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间。</li><li>第二种方法是对消息进行单独设置，每条消息TTL可以不同。</li></ul><p>如果上述两种方法同时使用，则消息的过期时间以两者之间TTL较小的那个数值为准。消息在队列的生存时间一旦超过设置的TTL值，就称为dead message被投递到死信队列， 消费者将无法再收到该消息。</p><h3 id="7-1-1-设置队列TTL"><a href="#7-1-1-设置队列TTL" class="headerlink" title="7.1.1    设置队列TTL"></a>7.1.1    设置队列TTL</h3><p>在 <code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code> 文件中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义过期队列及其属性，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_ttl_queue"</span> <span class="attr">name</span>=<span class="string">"my_ttl_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--投递到该队列的消息如果没有消费都将在6秒之后被删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-message-ttl"</span> <span class="attr">value-type</span>=<span class="string">"long"</span> <span class="attr">value</span>=<span class="string">"6000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类导入配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者的启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//导入配置文件</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:/spring/spring-rabbitmq.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在测试类 <code>springboot-rabbitmq-producer\src\test\java\com\wgy\rabbitmq\ProducerTest.java</code> 中编写如下方法发送消息到上述定义的队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期队列消息</span></span><br><span class="line"><span class="comment"> * 投递到该队列的消息如果没有消费都将在6秒之后被删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlQueueTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"my_ttl_queue"</span>, <span class="string">"发送到过期队列my_ttl_queue，6秒内不消费则不能再被消费。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数 x-message-ttl 的值 必须是非负 32 位整数 (0 &lt;= n &lt;= 2^32-1) ，以毫秒为单位表示 TTL 的值。这样，值 6000 表示存在于 队列 中的当前 消息 将最多只存活 6 秒钟。</p></blockquote><p>如果不设置TTL,则表示此消息不会过期。如果将TTL设置为0，则表示除非此时可以直接将消息投递到消费者，否则该消息会被立即丢弃。</p><p><img src="https://img-blog.csdnimg.cn/2020101012312537.png" alt="image-20201009204626436"></p><h3 id="7-1-2-设置消息TTL"><a href="#7-1-2-设置消息TTL" class="headerlink" title="7.1.2    设置消息TTL"></a>7.1.2    设置消息TTL</h3><p>消息的过期时间；只需要在发送消息（可以发送到任何队列，不管该队列是否属于某个交换机）的时候设置过期时间即可。在测试类中编写如下方法发送消息并设置过期时间到队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期消息</span></span><br><span class="line"><span class="comment"> * 该消息投递任何交换机或队列中的时候；如果到了过期时间则将从该队列中删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlMessageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    <span class="comment">//设置消息的过期时间，3秒</span></span><br><span class="line">    messageProperties.setExpiration(<span class="string">"3000"</span>);</span><br><span class="line"></span><br><span class="line">    Message message = <span class="keyword">new</span> Message(<span class="string">"测试过期消息，3秒钟过期"</span>.getBytes(), messageProperties);</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"my_ttl_queue"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>expiration 字段以微秒为单位表示 TTL 值。且与 x-message-ttl 具有相同的约束条件。因为 expiration 字段必须为字符串类型，broker 将只会接受以字符串形式表达的数字。</p><p>当同时指定了 queue 和 message 的 TTL 值，则两者中较小的那个才会起作用。</p></blockquote><h2 id="7-2-死信队列"><a href="#7-2-死信队列" class="headerlink" title="7.2    死信队列"></a>7.2    死信队列</h2><p>DLX，全称为Dead-Letter-Exchange , 可以称之为死信交换机，也有人称之为死信邮箱。当消息在一个队列中变成死信(dead message)之后，它能被重新发送到另一个交换机中，这个交换机就是DLX ，绑定DLX的队列就称之为死信队列。</p><p>消息变成死信，可能是由于以下的原因：</p><ul><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ul><p>DLX也是一个正常的交换机，和一般的交换机没有区别，它能在任何的队列上被指定，实际上就是设置某一个队列的属性。当这个队列中存在死信时，Rabbitmq就会自动地将这个消息重新发布到设置的DLX上去，进而被路由到另一个队列，即死信队列。</p><p>要想使用死信队列，只需要在定义队列的时候设置队列参数 <code>x-dead-letter-exchange</code> 指定交换机即可。</p><p>具体步骤如下面的章节。</p><h3 id="7-2-1-定义死信交换机"><a href="#7-2-1-定义死信交换机" class="headerlink" title="7.2.1    定义死信交换机"></a>7.2.1    定义死信交换机</h3><p>在 <code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code> 文件中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义定向交换机中的持久化死信队列，不存在则自动创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_dlx_queue"</span> <span class="attr">name</span>=<span class="string">"my_dlx_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义广播类型交换机；并绑定上述两个队列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">id</span>=<span class="string">"my_dlx_exchange"</span> <span class="attr">name</span>=<span class="string">"my_dlx_exchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定路由键my_ttl_dlx、my_max_dlx，可以将过期的消息转移到my_dlx_queue队列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_ttl_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_dlx_queue"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_max_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_dlx_queue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2-队列设置死信交换机"><a href="#7-2-2-队列设置死信交换机" class="headerlink" title="7.2.2    队列设置死信交换机"></a>7.2.2    队列设置死信交换机</h3><p>为了测试消息在过期、队列达到最大长度后都将被投递死信交换机上；所以添加配置如下：</p><p>在 <code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code> 文件中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义过期队列及其属性，不存在则自动创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_ttl_dlx_queue"</span> <span class="attr">name</span>=<span class="string">"my_ttl_dlx_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--投递到该队列的消息如果没有消费都将在6秒之后被投递到死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-message-ttl"</span> <span class="attr">value-type</span>=<span class="string">"long"</span> <span class="attr">value</span>=<span class="string">"6000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置当消息过期后投递到对应的死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-dead-letter-exchange"</span> <span class="attr">value</span>=<span class="string">"my_dlx_exchange"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义限制长度的队列及其属性，不存在则自动创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"my_max_dlx_queue"</span> <span class="attr">name</span>=<span class="string">"my_max_dlx_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--投递到该队列的消息最多2个消息，如果超过则最早的消息被删除投递到死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-max-length"</span> <span class="attr">value-type</span>=<span class="string">"long"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置当消息过期后投递到对应的死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"x-dead-letter-exchange"</span> <span class="attr">value</span>=<span class="string">"my_dlx_exchange"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义定向交换机 根据不同的路由key投递消息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">id</span>=<span class="string">"my_normal_exchange"</span> <span class="attr">name</span>=<span class="string">"my_normal_exchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_ttl_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_ttl_dlx_queue"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">"my_max_dlx"</span> <span class="attr">queue</span>=<span class="string">"my_max_dlx_queue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-3-消息过期的死信队列测试"><a href="#7-2-3-消息过期的死信队列测试" class="headerlink" title="7.2.3    消息过期的死信队列测试"></a>7.2.3    消息过期的死信队列测试</h3><h4 id="7-2-3-1-发送消息代码"><a href="#7-2-3-1-发送消息代码" class="headerlink" title="7.2.3.1    发送消息代码"></a>7.2.3.1    发送消息代码</h4><p>添加 <code>springboot-rabbitmq-producer\src\test\java\com\itheima\rabbitmq\ProducerTest.java</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期消息投递到死信队列</span></span><br><span class="line"><span class="comment"> * 投递到一个正常的队列，但是该队列有设置过期时间，到过期时间之后消息会被投递到死信交换机（队列）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dlxTTLMessageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_ttl_dlx"</span>,</span><br><span class="line">            <span class="string">"测试过期消息；6秒过期后会被投递到死信交换机"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-3-2-RabbitMQ管理界面"><a href="#7-2-3-2-RabbitMQ管理界面" class="headerlink" title="7.2.3.2    RabbitMQ管理界面"></a>7.2.3.2    RabbitMQ管理界面</h4><p>未过期：</p><p><img src="https://img-blog.csdnimg.cn/20201010123144841.png" alt="image-20201009205644339"></p><p>过期后：</p><p><img src="https://img-blog.csdnimg.cn/20201010123158431.png" alt="image-20201009210157701"></p><h4 id="7-2-3-3-流程"><a href="#7-2-3-3-流程" class="headerlink" title="7.2.3.3    流程"></a>7.2.3.3    流程</h4><p>具体因为队列消息过期而被投递到死信队列的流程：</p><p><img src="https://img-blog.csdnimg.cn/20201010123214497.png" alt="image-20201009210254208"></p><h3 id="7-2-4-消息过长的死信队列测试"><a href="#7-2-4-消息过长的死信队列测试" class="headerlink" title="7.2.4    消息过长的死信队列测试"></a>7.2.4    消息过长的死信队列测试</h3><h4 id="7-2-4-1-发送消息代码"><a href="#7-2-4-1-发送消息代码" class="headerlink" title="7.2.4.1    发送消息代码"></a>7.2.4.1    发送消息代码</h4><p>添加 <code>springboot-rabbitmq-producer\src\test\java\com\itheima\rabbitmq\ProducerTest.java</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息长度超过2，会投递到死信队列中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dlxMaxMessageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_max_dlx"</span>,</span><br><span class="line">            <span class="string">"发送消息1：消息长度超过2，会被投递到死信队列中！"</span>);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_max_dlx"</span>,</span><br><span class="line">            <span class="string">"发送消息2：消息长度超过2，会被投递到死信队列中！"</span>);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">"my_normal_exchange"</span>,</span><br><span class="line">            <span class="string">"my_max_dlx"</span>,</span><br><span class="line">            <span class="string">"发送消息3：消息长度超过2，会被投递到死信队列中！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-4-2-RabbitMQ管理界面"><a href="#7-2-4-2-RabbitMQ管理界面" class="headerlink" title="7.2.4.2    RabbitMQ管理界面"></a>7.2.4.2    RabbitMQ管理界面</h4><p>上面发送的3条消息中的第1条消息会被投递到死信队列中（如果启动了消费者，那么队列消息很快会被取走消费掉）；</p><p><img src="https://img-blog.csdnimg.cn/20201010123228836.png" alt="image-20201009210522629"></p><h4 id="7-2-4-3-消费者接收死信队列消息"><a href="#7-2-4-3-消费者接收死信队列消息" class="headerlink" title="7.2.4.3    消费者接收死信队列消息"></a>7.2.4.3    消费者接收死信队列消息</h4><p>与过期消息投递到死信队列的代码和配置是共用的，并不需要重新编写。</p><h4 id="7-2-4-4-流程"><a href="#7-2-4-4-流程" class="headerlink" title="7.2.4.4    流程"></a>7.2.4.4    流程</h4><p>消息超过队列最大消息长度而被投递到死信队列的流程在前面的图中已包含。</p><h2 id="7-3-延迟队列"><a href="#7-3-延迟队列" class="headerlink" title="7.3    延迟队列"></a>7.3    延迟队列</h2><p>延迟队列存储的对象是对应的延迟消息；所谓“延迟消息” 是指当消息被发送以后，并不想让消费者立刻拿到消息，而是等待特定时间后，消费者才能拿到这个消息进行消费。</p><p>在RabbitMQ中延迟队列可以通过 <code>过期时间</code> + <code>死信队列</code> 来实现；具体如下流程图所示：</p><p><img src="https://img-blog.csdnimg.cn/20201010123243722.png" alt="image-20201009211706305"></p><p>在上图中；分别设置了两个5秒、10秒的过期队列，然后等到时间到了则会自动将这些消息转移投递到对应的死信队列中，然后消费者再从这些死信队列接收消息就可以实现消息的延迟接收。</p><p>延迟队列的应用场景；如：</p><ul><li>在电商项目中的支付场景；如果在用户下单之后的几十分钟内没有支付成功；那么这个支付的订单算是支付失败，要进行支付失败的异常处理（将库存加回去），这时候可以通过使用延迟队列来处理</li><li>在系统中如有需要在指定的某个时间之后执行的任务都可以通过延迟队列处理</li></ul><h2 id="7-4-消息确认机制"><a href="#7-4-消息确认机制" class="headerlink" title="7.4    消息确认机制"></a>7.4    消息确认机制</h2><p>确认并且保证消息被送达，提供了两种方式：发布确认和事务。(两者不可同时使用)在channel为事务时，不可引入确认模式；同样channel为确认模式下，不可使用事务。</p><h3 id="7-4-1-发布确认"><a href="#7-4-1-发布确认" class="headerlink" title="7.4.1 发布确认"></a>7.4.1 发布确认</h3><p>有两种方式：消息发送成功确认和消息发送失败回调。</p><h4 id="7-4-1-1-消息发送成功确认"><a href="#7-4-1-1-消息发送成功确认" class="headerlink" title="7.4.1.1    消息发送成功确认"></a>7.4.1.1    消息发送成功确认</h4><p>在<code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code></p><p>connectionFactory 中启用消息确认：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- publisher-confirms="true" 表示：启用了消息确认 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">port</span>=<span class="string">"5672"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">username</span>=<span class="string">"wgy"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">password</span>=<span class="string">"123456"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">virtual-host</span>=<span class="string">"/test"</span>/&gt;</span></span><br><span class="line">                           publisher-confirms="true"/&gt;</span><br></pre></td></tr></table></figure><p>配置消息确认回调方法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消息回调处理类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"confirmCallback"</span> <span class="attr">class</span>=<span class="string">"com.wgy.rabbitmq.MsgSendConfirmCallBack"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- confirm-callback="confirmCallback" 表示：消息确认回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">confirm-callback</span>=<span class="string">"confirmCallback"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>消息确认回调方法com.wgy.rabbitmq.MsgSendConfirmCallBack如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息确认回调方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgSendConfirmCallBack</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消息确认成功...."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理丢失的消息</span></span><br><span class="line">            System.out.println(<span class="string">"消息确认失败,"</span> + cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能测试如下：</p><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息确认</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"spring_queue"</span>, <span class="string">"只发队列spring_queue的消息。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理界面确认消息发送成功</p><p><img src="https://img-blog.csdnimg.cn/20201010123309939.png" alt="image-20201009213400014"></p><p>消息确认回调</p><p><img src="https://img-blog.csdnimg.cn/20201010123331866.png" alt="image-20201009213424619"></p><h4 id="7-4-1-2-消息发送失败回调"><a href="#7-4-1-2-消息发送失败回调" class="headerlink" title="7.4.1.2    消息发送失败回调"></a>7.4.1.2    消息发送失败回调</h4><p>在<code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code></p><p>connectionFactory 中启用回调：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- publisher-returns="true" 表示：启用了失败回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">port</span>=<span class="string">"5672"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">username</span>=<span class="string">"wgy"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">password</span>=<span class="string">"123456"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">virtual-host</span>=<span class="string">"/test"</span>/&gt;</span></span><br><span class="line">                           publisher-returns="true"/&gt;</span><br></pre></td></tr></table></figure><p>配置消息失败回调方法如下：</p><blockquote><p>注意：同时需配置mandatory=”true”，否则消息则丢失</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消息失败回调处理类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sendReturnCallback"</span> <span class="attr">class</span>=<span class="string">"com.wgy.rabbitmq.MsgSendReturnCallback"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- return-callback="sendReturnCallback" 表示：消息失败回调 ,同时需配置mandatory="true"，否则消息则丢失--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">confirm-callback</span>=<span class="string">"confirmCallback"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">return-callback</span>=<span class="string">"sendReturnCallback"</span> <span class="attr">mandatory</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>消息失败回调方法com.wgy.rabbitmq.MsgSendReturnCallback如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息失败回调方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgSendReturnCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> i, String s, String s1, String s2)</span> </span>&#123;</span><br><span class="line">        String msgJson = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        System.out.println(<span class="string">"Returned Message："</span> + msgJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能测试如下：</p><p>模拟消息发送失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFailQueueTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//exchange 正确,queue 错误 ,confirm被回调, ack=true; return被回调 replyText:NO_ROUTE</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"test_fail_exchange"</span>, <span class="string">""</span>, <span class="string">"测试消息发送失败进行确认应答。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失败回调结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20201010123352126.png" alt="image-20201009214157010"></p><h3 id="7-4-2-事务支持"><a href="#7-4-2-事务支持" class="headerlink" title="7.4.2    事务支持"></a>7.4.2    事务支持</h3><p>场景：业务处理伴随消息的发送，业务处理失败（事务回滚）后要求消息不发送。rabbitmq 使用调用者的外部事务，通常是首选，因为它是非侵入性的（低耦合）。</p><p>外部事务的配置：<code>springboot-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- channel-transacted="true" 表示：支持事务操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">confirm-callback</span>=<span class="string">"confirmCallback"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">return-callback</span>=<span class="string">"sendReturnCallback"</span> <span class="attr">channel-transacted</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.amqp.rabbit.transaction.RabbitTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>模拟业务处理失败的场景：</p><p>测试类或者测试方法上加入@Transactional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="comment">//@Rollback(false)//在测试的时候，需要手动的方式制定回滚的策略</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由键与队列同名</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"spring_queue"</span>, <span class="string">"只发队列spring_queue的消息--01。"</span>);</span><br><span class="line">    System.out.println(<span class="string">"----------------dosoming:可以是数据库的操作，也可以是其他业务类型的操作---------------"</span>);</span><br><span class="line">    <span class="comment">//模拟业务处理失败</span></span><br><span class="line">    System.out.println(<span class="number">1</span> / <span class="number">0</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"spring_queue"</span>, <span class="string">"只发队列spring_queue的消息--02。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img-blog.csdnimg.cn/20201010123411440.png" alt="image-20201010115015765"></p></li></ul><h2 id="7-5-消息追踪"><a href="#7-5-消息追踪" class="headerlink" title="7.5    消息追踪"></a>7.5    消息追踪</h2><p>消息中心的消息追踪需要使用Trace实现，Trace是Rabbitmq用于记录每一次发送的消息，方便使用Rabbitmq的开发者调试、排错。可通过插件形式提供可视化界面。Trace启动后会自动创建系统Exchange：amq.rabbitmq.trace ,每个队列会自动绑定该Exchange，绑定后发送到队列的消息都会记录到Trace日志。</p><h3 id="7-5-1-消息追踪启用与查看"><a href="#7-5-1-消息追踪启用与查看" class="headerlink" title="7.5.1    消息追踪启用与查看"></a>7.5.1    消息追踪启用与查看</h3><p>以下是trace的相关命令和使用（要使用需要先rabbitmq启用插件，再打开开关才能使用）：</p><table><thead><tr><th align="left">命令集</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">rabbitmq-plugins list</td><td align="left">查看插件列表</td></tr><tr><td align="left">rabbitmq-plugins enable rabbitmq_tracing</td><td align="left">rabbitmq启用trace插件</td></tr><tr><td align="left">rabbitmqctl trace_on</td><td align="left">打开trace的开关</td></tr><tr><td align="left">rabbitmqctl trace_on -p itcast</td><td align="left">打开trace的开关(itcast为需要日志追踪的vhost)</td></tr><tr><td align="left">rabbitmqctl trace_off</td><td align="left">关闭trace的开关</td></tr><tr><td align="left">rabbitmq-plugins disable rabbitmq_tracing</td><td align="left">rabbitmq关闭Trace插件</td></tr><tr><td align="left">rabbitmqctl set_user_tags heima administrator</td><td align="left">只有administrator的角色才能查看日志界面</td></tr></tbody></table><p>安装插件并开启 trace_on 之后，会发现多个 exchange：amq.rabbitmq.trace ，类型为：topic。</p><p><img src="https://img-blog.csdnimg.cn/20201010123437340.png" alt="image-20201010115208825"></p><h3 id="7-5-2-日志追踪"><a href="#7-5-2-日志追踪" class="headerlink" title="7.5.2 日志追踪"></a>7.5.2 日志追踪</h3><p><strong>第一步</strong>：发送消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(&quot;spring_queue&quot;, &quot;只发队列spring_queue的消息--01。&quot;);</span><br></pre></td></tr></table></figure><p>发送成功，web查看多了一条消息</p><p><img src="https://img-blog.csdnimg.cn/20201010123456112.png" alt="image-20201010115248052"></p><p><strong>第二步</strong>：查看trace</p><p><img src="https://img-blog.csdnimg.cn/20201010123515420.png" alt="image-20201010115509051"></p><p><strong>第三步</strong>：点击Tracing查看Trace log files</p><p><img src="https://img-blog.csdnimg.cn/20201010123530349.png" alt="image-20201010115524941"></p><p><strong>第四步</strong>：点击itcast-trace.log确认消息轨迹正确性</p><p>url：<a href="http://127.0.0.1:15672/api/trace-files/itcast-trace.log" target="_blank" rel="noopener">http://127.0.0.1:15672/api/trace-files/itcast-trace.log</a></p><p><img src="https://img-blog.csdnimg.cn/20201010123546110.png" alt="image-20201010115544087"></p><h1 id="8-RabbitMQ集群架构模式"><a href="#8-RabbitMQ集群架构模式" class="headerlink" title="8.    RabbitMQ集群架构模式"></a>8.    RabbitMQ集群架构模式</h1><h2 id="8-1-主备模式"><a href="#8-1-主备模式" class="headerlink" title="8.1    主备模式"></a>8.1    主备模式</h2><p>用来实现RabbitMQ的高可用集群,一般是在并发和数据不是特别多的时候使用,当主节点挂掉以后会从备份节点中选择一个节点出来作为主节点对外提供服务。</p><p><img src="https://img-blog.csdnimg.cn/20201010123603292.png" alt="image-20201010115834461"></p><h2 id="8-2-远程模式"><a href="#8-2-远程模式" class="headerlink" title="8.2    远程模式"></a>8.2    远程模式</h2><p>主要用来实现双活,简称为Shovel模式,所谓的Shovel模式就是让我们可以把消息复制到不同的数据中心,让两个跨地域的集群互联。</p><p><img src="https://img-blog.csdnimg.cn/20201010123615696.png" alt="image-20201010115908963"></p><h2 id="8-3-镜像队列模式"><a href="#8-3-镜像队列模式" class="headerlink" title="8.3    镜像队列模式"></a>8.3    镜像队列模式</h2><p>镜像队列也被称为Mirror队列,主要是用来保证mq消息的可靠性的,他通过消息复制的方式能够保证我们的消息100%不丢失,同时该集群模式也是企业中使用最多的模式。</p><p><img src="https://img-blog.csdnimg.cn/20201010123632386.png" alt="image-20201010115946837"></p><h2 id="8-4-多活模式"><a href="#8-4-多活模式" class="headerlink" title="8.4    多活模式"></a>8.4    多活模式</h2><p>多活模式主要是用来实现异地数据复制，Shovel模式其实也可以实现,但是他的配置及其繁琐同时还要受到版本的限制,所以如果做异地多活我们更加推荐使用多活模式,使用多活模式我们需要借助federation插件来实现集群与集群之间或者节点与节点之前的消息复制,该模式被广泛应用于饿了么、美团、滴滴等企业。</p><p><img src="https://img-blog.csdnimg.cn/20201010123646222.png" alt="image-20201010120051678"></p><h2 id="8-5-集群模式总结"><a href="#8-5-集群模式总结" class="headerlink" title="8.5    集群模式总结"></a>8.5    集群模式总结</h2><p>主备模式下主节点提供读写，从节点不提供读写服务，只是负责提供备份服务,备份节点的主要功能是在主节点宕机时，完成自动切换 从–&gt;主,同时因为主备模式下始终只有一个对外提供服务那么对于高并发的情况下该模式并不合适.</p><p>远程模式可以让我们实现异地多活的mq，但是现在已经有了更好的异地多活解决方案,所以在实际的项目中已经不推荐使用了</p><p>镜像队列模式可以让我们的消息100%不丢失,同时可以结合HAProxy来实现高并发的业务场景所以在项目中使用得最多</p><h1 id="9-RabbitMQ-应用"><a href="#9-RabbitMQ-应用" class="headerlink" title="9.    RabbitMQ 应用"></a>9.    RabbitMQ 应用</h1><h2 id="9-1-消息堆积"><a href="#9-1-消息堆积" class="headerlink" title="9.1    消息堆积"></a>9.1    消息堆积</h2><p>当消息生产的速度长时间，远远大于消费的速度时。就会造成消息堆积。</p><p><img src="https://img-blog.csdnimg.cn/20201010123703438.png" alt="image-20201010120240505"></p><ul><li>消息堆积的影响<ul><li>可能导致新消息无法进入队列</li><li>可能导致旧消息无法丢失</li><li>消息等待消费的时间过长，超出了业务容忍范围。</li></ul></li><li>产生堆积的情况<ul><li>生产者突然大量发布消息</li><li>消费者消费失败</li><li>消费者出现性能瓶颈。</li><li>消费者挂掉</li></ul></li><li>解决办法<ul><li>排查消费者的消费性能瓶颈</li><li>增加消费者的多线程处理</li><li>部署增加多个消费者</li></ul></li></ul><h2 id="9-2-消息丢失"><a href="#9-2-消息丢失" class="headerlink" title="9.2    消息丢失"></a>9.2    消息丢失</h2><p>在实际的生产环境中有可能出现一条消息因为一些原因丢失，导致消息没有消费成功，从而造成数据不一致等问题，造成严重的影响，比如：在一个商城的下单业务中，需要生成订单信息和扣减库存两个动作，如果使用RabbitMQ来实现该业务，那么在订单服务下单成功后需要发送一条消息到库存服务进行扣减库存，如果在此过程中，一条消息因为某些原因丢失，那么就会出现下单成功但是库存没有扣减，从而导致超卖的情况，也就是库存已经没有了，但是用户还能下单，这个问题对于商城系统来说是致命的。</p><p>消息丢失的场景主要分为：消息在生产者丢失，消息在RabbitMQ丢失，消息在消费者丢失。</p><h3 id="9-2-1-消息在生产者丢失"><a href="#9-2-1-消息在生产者丢失" class="headerlink" title="9.2.1    消息在生产者丢失"></a>9.2.1    消息在生产者丢失</h3><h4 id="9-2-1-1-场景介绍"><a href="#9-2-1-1-场景介绍" class="headerlink" title="9.2.1.1    场景介绍"></a>9.2.1.1    场景介绍</h4><p>消息生产者发送消息成功，但是MQ没有收到该消息，消息在从生产者传输到MQ的过程中丢失，一般是由于网络不稳定的原因。</p><h4 id="9-2-1-2-解决方案"><a href="#9-2-1-2-解决方案" class="headerlink" title="9.2.1.2    解决方案"></a>9.2.1.2    解决方案</h4><p>采用RabbitMQ 发送方消息确认机制，当消息成功被MQ接收到时，会给生产者发送一个确认消息，表示接收成功。RabbitMQ 发送方消息确认模式有以下三种：普通确认模式，批量确认模式，异步监听确认模式。spring整合RabbitMQ后只使用了异步监听确认模式。</p><p><strong>说明</strong></p><p>异步监听模式，可以实现边发送消息边进行确认，不影响主线程任务执行。</p><p><strong>步骤</strong></p><p>1、生产者发送3000条消息</p><p>2、在发送消息前开启开启发送方确认模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- publisher-confirms="true" 表示：启用了消息确认 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">port</span>=<span class="string">"5672"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">username</span>=<span class="string">"wgy"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">password</span>=<span class="string">"123456"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">virtual-host</span>=<span class="string">"/test"</span>/&gt;</span></span><br><span class="line">                           publisher-confirms="true"/&gt;</span><br></pre></td></tr></table></figure><p>3、在发送消息前添加异步确认监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息确认回调方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgSendConfirmCallBack</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消息确认成功...."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理丢失的消息</span></span><br><span class="line">            System.out.println(<span class="string">"消息确认失败,"</span> + cause);</span><br><span class="line">            <span class="comment">//重发</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-2-消息在RabbitMQ丢失"><a href="#9-2-2-消息在RabbitMQ丢失" class="headerlink" title="9.2.2    消息在RabbitMQ丢失"></a>9.2.2    消息在RabbitMQ丢失</h3><h4 id="9-2-2-1-场景介绍"><a href="#9-2-2-1-场景介绍" class="headerlink" title="9.2.2.1    场景介绍"></a>9.2.2.1    场景介绍</h4><p>消息成功发送到MQ，消息还没被消费却在MQ中丢失，比如MQ服务器宕机或者重启会出现这种情况</p><h4 id="9-2-2-2-解决方案"><a href="#9-2-2-2-解决方案" class="headerlink" title="9.2.2.2    解决方案"></a>9.2.2.2    解决方案</h4><p>持久化交换机，队列，消息，确保MQ服务器重启时依然能从磁盘恢复对应的交换机，队列和消息。</p><p>spring整合后默认开启了交换机，队列，消息的持久化，所以不修改任何设置就可以保证消息不在RabbitMQ丢失。但是为了以防万一，还是可以申明下。</p><h3 id="9-2-3-消息在消费者丢失"><a href="#9-2-3-消息在消费者丢失" class="headerlink" title="9.2.3    消息在消费者丢失"></a>9.2.3    消息在消费者丢失</h3><h4 id="9-2-3-1-场景介绍"><a href="#9-2-3-1-场景介绍" class="headerlink" title="9.2.3.1    场景介绍"></a>9.2.3.1    场景介绍</h4><p>消息费者消费消息时，如果设置为自动回复MQ，消息者端收到消息后会自动回复MQ服务器，MQ则会删除该条消息，如果消息已经在MQ被删除但是消费者的业务处理出现异常或者消费者服务宕机，那么就会导致该消息没有处理成功从而导致该条消息丢失。 </p><h4 id="9-2-3-2-解决方案"><a href="#9-2-3-2-解决方案" class="headerlink" title="9.2.3.2    解决方案"></a>9.2.3.2    解决方案</h4><p>设置为手动回复MQ服务器，当消费者出现异常或者服务宕机时，MQ服务器不会删除该消息，而是会把消息重发给绑定该队列的消费者，如果该队列只绑定了一个消费者，那么该消息会一直保存在MQ服务器，直到消息者能正常消费为止。本解决方案以一个队列绑定多个消费者为例来说明，一般在生产环境上也会让一个队列绑定多个消费者也就是工作队列模式来减轻压力，提高消息处理效率</p><p>MQ重发消息场景：</p><p>1.消费者未响应ACK，主动关闭频道或者连接</p><p>2.消费者未响应ACK，消费者服务挂掉</p><h2 id="9-3-有序消费消息"><a href="#9-3-有序消费消息" class="headerlink" title="9.3    有序消费消息"></a>9.3    有序消费消息</h2><h3 id="9-3-1-场景介绍"><a href="#9-3-1-场景介绍" class="headerlink" title="9.3.1    场景介绍"></a>9.3.1    场景介绍</h3><h4 id="9-3-1-1-场景1"><a href="#9-3-1-1-场景1" class="headerlink" title="9.3.1.1    场景1"></a>9.3.1.1    场景1</h4><p>当RabbitMQ采用work Queue模式，此时只会有一个Queue但是会有多个Consumer,同时多个Consumer直接是竞争关系，此时就会出现MQ消息乱序的问题。</p><p><img src="https://img-blog.csdnimg.cn/20201010123720650.png" alt="image-20201010121317556"></p><h4 id="9-3-1-2-场景2"><a href="#9-3-1-2-场景2" class="headerlink" title="9.3.1.2    场景2"></a>9.3.1.2    场景2</h4><p>当RabbitMQ采用简单队列模式的时候,如果消费者采用多线程的方式来加速消息的处理,此时也会出现消息乱序的问题。</p><p><img src="https://img-blog.csdnimg.cn/20201010123736804.png" alt="image-20201010121410955"></p><h4 id="9-3-1-3-场景1解决"><a href="#9-3-1-3-场景1解决" class="headerlink" title="9.3.1.3    场景1解决"></a>9.3.1.3    场景1解决</h4><p><img src="https://img-blog.csdnimg.cn/20201010123750799.png" alt="image-20201010121545595"></p><h4 id="9-3-1-4-场景2解决"><a href="#9-3-1-4-场景2解决" class="headerlink" title="9.3.1.4    场景2解决"></a>9.3.1.4    场景2解决</h4><p><img src="https://img-blog.csdnimg.cn/20201010123817700.png" alt="image-20201010121647684"></p><h2 id="9-4-重复消费"><a href="#9-4-重复消费" class="headerlink" title="9.4    重复消费"></a>9.4    重复消费</h2><h3 id="9-4-1-场景介绍"><a href="#9-4-1-场景介绍" class="headerlink" title="9.4.1    场景介绍"></a>9.4.1    场景介绍</h3><p>为了防止消息在消费者端丢失，会采用手动回复MQ的方式来解决，同时也引出了一个问题，消费者处理消息成功，手动回复MQ时由于网络不稳定，连接断开，导致MQ没有收到消费者回复的消息，那么该条消息还会保存在MQ的消息队列，由于MQ的消息重发机制，会重新把该条消息发给和该队列绑定的消息者处理，这样就会导致消息重复消费。而有些操作是不允许重复消费的，比如下单，减库存，扣款等操作。</p><p>MQ重发消息场景：</p><p>1.消费者未响应ACK，主动关闭频道或者连接</p><p>2.消费者未响应ACK，消费者服务挂掉</p><h3 id="9-4-2-解决方案"><a href="#9-4-2-解决方案" class="headerlink" title="9.4.2    解决方案"></a>9.4.2    解决方案</h3><p>如果消费消息的业务是幂等性操作（同一个操作执行多次，结果不变）就算重复消费也没问题，可以不做处理，如果不支持幂等性操作，如：下单，减库存，扣款等，那么可以在消费者端每次消费成功后将该条消息id保存到数据库，每次消费前查询该消息id，如果该条消息id已经存在那么表示已经消费过就不再消费否则就消费。本方案采用redis存储消息id，因为redis是单线程的，并且性能也非常好，提供了很多原子性的命令，本方案使用setnx命令存储消息id。</p><blockquote><p>setnx(key,value):如果key不存在则插入成功且返回1,如果key存在,则不进行任何操作,返回0</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-消息中间件概述&quot;&gt;&lt;a href=&quot;#1-消息中间件概述&quot; class=&quot;headerlink&quot; title=&quot;1.    消息中间件概述&quot;&gt;&lt;/a&gt;1.    消息中间件概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是消息中间件&quot;&gt;&lt;a href=&quot;#1-1-什么是消息中间件&quot; class=&quot;headerlink&quot; title=&quot;1.1    什么是消息中间件&quot;&gt;&lt;/a&gt;1.1    什么是消息中间件&lt;/h2&gt;&lt;p&gt;MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么使用MQ&lt;/p&gt;
&lt;p&gt;在项目中，可将一些无需即时返回且耗时的操作提取出来，进行&lt;strong&gt;异步处理&lt;/strong&gt;，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而&lt;strong&gt;提高&lt;/strong&gt;了&lt;strong&gt;系统&lt;/strong&gt;的&lt;strong&gt;吞吐量&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="服务器中间件" scheme="https://wgy1993.gitee.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="RabbitMQ" scheme="https://wgy1993.gitee.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Docker(一)</title>
    <link href="https://wgy1993.gitee.io/archives/4021575d.html"/>
    <id>https://wgy1993.gitee.io/archives/4021575d.html</id>
    <published>2020-10-04T14:30:59.000Z</published>
    <updated>2020-10-04T14:32:37.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是虚拟化"><a href="#1-什么是虚拟化" class="headerlink" title="1.    什么是虚拟化"></a>1.    什么是虚拟化</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1    概念"></a>1.1    概念</h2><p>在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，<strong>打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源</strong>。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><a id="more"></a><p>在实际的生产环境中，<strong>虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用</strong>，透明化底层物理硬件，从而最大化的利用物理硬件。(<strong>物理资源的充分利用</strong>)</p><p>虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化、虚拟机等等。</p><p><img src="https://img-blog.csdnimg.cn/20201004222608457.png" alt="image-20201004190107360"></p><h2 id="1-2-虚拟化架构"><a href="#1-2-虚拟化架构" class="headerlink" title="1.2    虚拟化架构"></a>1.2    虚拟化架构</h2><h3 id="1-2-1-全虚拟化"><a href="#1-2-1-全虚拟化" class="headerlink" title="1.2.1    全虚拟化"></a>1.2.1    全虚拟化</h3><p>在全虚拟化的虚拟平台中，GuestOS并不知道自己是一台虚拟机，它会认为自己就是运行在计算机物理硬件设备上的HostOS。因为全虚拟化的VMM会将一个OS所能够操作的CPU、内存、外设等物理设备逻辑抽象成为虚拟CPU、虚拟内存、虚拟外设等虚拟设备后，再交由GuestOS来操作使用。这样的GuestOS会将底层硬件平台视为自己所有的，但是实际上，这些都是VMM为GuestOS制造了这种假象。</p><p><img src="https://img-blog.csdnimg.cn/20201004222624335.png" alt="image-20201004190917515"></p><h3 id="1-2-2-操作系统虚拟化"><a href="#1-2-2-操作系统虚拟化" class="headerlink" title="1.2.2    操作系统虚拟化"></a>1.2.2    操作系统虚拟化</h3><p>操作系统层虚拟化是指通过划分一个宿主操作系统的特定部分，产生一个个隔离的操作执行环境。操作系统层的虚拟化是操作系统内核直接提供的虚报化，虚拟出的操作系统之间共享底层宿主操作系统内核和底层的硬件资源。操作系统虚拟化的关键点在于将操作系统与上层应用隔离开，将对操作系统资源的访问进行虚报化，使上层应用觉得自己独占操作系统。</p><p><img src="https://img-blog.csdnimg.cn/20201004222640474.png" alt="image-20201004191806794"></p><h3 id="1-2-3-平台虚拟化"><a href="#1-2-3-平台虚拟化" class="headerlink" title="1.2.3    平台虚拟化"></a>1.2.3    平台虚拟化</h3><p>平台虚拟化表现为在一个给定的硬件平台上宿主机创造一个模拟的计算机环境虚拟机提供给客户机。客户机软件对于用户应用程序没有限制;许多宿主机允许运行真实的操作系统。客户机就好像直接运行在计算机硬件上，伴随着几个明显的警告。虚拟机对硬件资源(如网络，显示器，键盘，硬盘)的访问被统一管理在一个比处理器和系统内存更有限制性的层次上。客户软件经常被限制访问计算机周边设备，或者被限制在较低的设备性能上，这取决于宿主机硬件访问策略设定。</p><p><img src="https://img-blog.csdnimg.cn/20201004222657734.png" alt="image-20201004192230593"></p><h2 id="1-3-hypervisor"><a href="#1-3-hypervisor" class="headerlink" title="1.3    hypervisor"></a>1.3    hypervisor</h2><p>Hypervisor是一种运行在物理服务器和操作系统之间的中间软件层,可允许多个操作系统和应用共享一套基础物理硬件，因此也可以看作是虚拟环境中的“元”操作系统，它可以协调访问服务器上的所有物理设备和虚拟机，也叫<strong>虚拟机监视器</strong>（Virtual Machine Monitor，VMM）。<strong>Hypervisor是所有虚拟化技术的核心</strong>。当服务器启动并执行Hypervisor时，它会给每一台虚拟机分配适量的内存、CPU、网络和磁盘，并加载所有虚拟机的客户操作系统。</p><p>Hypervisor是所有虚拟化技术的核心，软硬件架构和管理更高效、更灵活，硬件的效能能够更好地发挥出来。常见的产品有：VMware、KVM、Xen等等。</p><h1 id="2-Docker-介绍"><a href="#2-Docker-介绍" class="headerlink" title="2.    Docker 介绍"></a>2.    Docker 介绍</h1><h2 id="2-1-容器技术"><a href="#2-1-容器技术" class="headerlink" title="2.1    容器技术"></a>2.1    容器技术</h2><p>在计算机的世界中，容器拥有一段漫长且传奇的历史。容器与管理程序虚拟化（hypervisor virtualization，HV）有所不同，<strong>管理程序虚拟化通过中间层将一台或者多台独立的机器虚拟运行与物理硬件之上，而容器则是直接运行在操作系统内核之上的用户空间</strong>。因此，容器虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。</p><p>由于 “客居”于操作系统，容器只能运行与底层宿主机相同或者相似的操作系统，这看起来并不是非常灵活。例如：可以在Ubuntu服务中运行Redhat Enterprise Linux，但无法再Ubuntu服务器上运行Microsoft Windows。</p><p>相对于彻底隔离的管理程序虚拟化，容器被认为是不安全的。而反对这一观点的人则认为，由于虚拟容器所虚拟的是一个完整的操作系统，这无疑增大了攻击范围，而且还要考虑管理程序层潜在的暴露风险。</p><p>尽管有诸多局限性，容器还是被广泛部署于各种各样的应用场合。在超大规模的多租户服务部署、轻量级沙盒以及对安全要求不太高的隔离环境中，容器技术非常流行。最常见的一个例子就是“权限隔离监牢”（chroot jail），它创建一个隔离的目录环境来运行进程。如果权限隔离监牢正在运行的进程被入侵者攻破，入侵者便会发现自己“身陷囹圄”，因为权限不足被困在容器所创建的目录中，无法对宿主机进一步破坏。</p><p>最新的容器技术引入了OpenVZ、Solaris Zones以及Linux容器（LXC）。使用这些新技术，容器不在仅仅是一个单纯的运行环境。在自己的权限类内，<strong>容器更像是一个完整的宿主机。容器和宿主机之间的隔离更加彻底，容器有独立的网络和存储栈，还拥有自己的资源管理能力，使得同一台宿主机中的多个容器可以友好的共存。</strong></p><p>容器被认为是精益技术，因为容器需要的开销有限。和传统虚拟化以及半虚拟化相比，容器不需要模拟层（emulation layer）和管理层（hypervisor layer），而是使用操作系统的系统调用接口。这<strong>降低了运行单个容器所需的开销，也使得宿主机中可以运行更多的容器</strong>。</p><p>尽管有着光辉的历史，容器仍未得到广泛的认可。一个很重要的原因就是容器技术的复杂性：容器本身就比较复杂，不易安装，管理和自动化也很困难。而Docker就是为了改变这一切而生的。</p><p><img src="https://img-blog.csdnimg.cn/20201004222715182.png" alt="image-20201004193307645"></p><h2 id="2-2-Docker-介绍"><a href="#2-2-Docker-介绍" class="headerlink" title="2.2    Docker 介绍"></a>2.2    Docker 介绍</h2><p>Docker 是一个开发，运输和运行应用程序的开放平台。 Docker使您可以将应用程序与基础架构分离，以便快速交付软件。 使用Docker，您可以像管理应用程序一样管理基础架构（OS）。 通过利用Docker的方法快速发送，测试和部署代码，您可以显着减少编写代码和在生产中运行代码之间的延迟。（代码改了）</p><h2 id="2-3-Docker-好处"><a href="#2-3-Docker-好处" class="headerlink" title="2.3    Docker 好处"></a>2.3    Docker 好处</h2><p>容器提供了隔离性，结论是，容器可以为各种测试提供很好的沙盒环境。并且，容器本身就具有“标准性”的特征，非常适合为服务创建构建块。Docker的一些应用场景如下：</p><ul><li>加速本地开发和构建流程，使其更加高效、更加轻量化。本地开发人员可以构建、运行并分享Docker容器。容器可以在开发环境中构建，然后轻松的提交到测试环境中，并最终进入生产环境。 开发人员与运维人员进行职责的逻辑分离</li><li>能够让独立的服务或应用程序在不同的环境中，得到相同的运行结果。这一点在面向服务的架构和重度依赖微型服务的部署由其实用。</li><li>用 Docker创建隔离的环境来进行测试。例如，用Jenkins CI这样的持续集成工具启动一个用于测试的容器。（持续化集成 war 实际部署：jenkins持续化集成 Jenkins+git ）</li><li>Docker 可以让开发者先在本机上构建一个复杂的程序或架构来进行测试，而不是一开始就在生产环境部署、测试。</li><li>构建一个多用户的平台即服务（ PaaS）基础设施</li><li>为开发、测试提供一个轻量级的独立的沙盒环境</li><li>提供软件即服务（ SaaS）应用程序，例如Memcached即服务</li><li>高性能、超大规模的宿主机部署（可以很多容器）</li></ul><p><img src="https://img-blog.csdnimg.cn/20201004222730761.png" alt="image-20201004193842198"></p><blockquote><p>沙盒：在计算机安全领域，沙盒（英语：sandbox，又译为沙箱）是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。</p></blockquote><h2 id="2-4-集装箱思想"><a href="#2-4-集装箱思想" class="headerlink" title="2.4    集装箱思想"></a>2.4    集装箱思想</h2><p>Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Dock将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件、应用程序。</p><p>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p><p>Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p><p><img src="https://img-blog.csdnimg.cn/20201004222746128.png" alt="image-20201004194007305"></p><h2 id="2-5-container-与vm区别"><a href="#2-5-container-与vm区别" class="headerlink" title="2.5    container 与vm区别"></a>2.5    container 与vm区别</h2><p>物理机：</p><p><img src="https://img-blog.csdnimg.cn/20201004222801435.png" alt="image-20201004194029035"></p><p>虚拟机：</p><p><img src="https://img-blog.csdnimg.cn/20201004222815156.png" alt="image-20201004194037586"></p><p>容器：最大化的利用资源。</p><p><img src="https://img-blog.csdnimg.cn/2020100422282926.png" alt="image-20201004194049515"></p><p>通过上面这三张抽象图，我们大概可以通过类比概括出： 容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。</p><p>容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</p><p>容器在Linux上本机运行，并与其他容器共享主机的内核。 它运行一个独立的进程，不占用任何其他可执行文件的内存，使其轻量级。相比之下，虚拟机（VM）运行一个完整的“客户”操作系统，通过虚拟机管理程序对主机资源进行虚拟访问。 通常，VM提供的环境比大多数应用程序需要的资源更多。</p><h2 id="2-6-虚拟机已死-容器才是未来"><a href="#2-6-虚拟机已死-容器才是未来" class="headerlink" title="2.6    虚拟机已死 容器才是未来"></a>2.6    虚拟机已死 容器才是未来</h2><p><img src="https://img-blog.csdnimg.cn/20201004222843181.png" alt="image-20201004194218420"></p><p><img src="https://img-blog.csdnimg.cn/2020100422285699.png" alt="image-20201004194236046"></p><ul><li>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动 。</li><li>虚拟机（ VM）是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个VM在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此占用大量空间。而且VM启动也十分缓慢 。</li></ul><h1 id="3-Docker-版本以及安装"><a href="#3-Docker-版本以及安装" class="headerlink" title="3.    Docker 版本以及安装"></a>3.    Docker 版本以及安装</h1><h2 id="3-1-Docker-版本介绍"><a href="#3-1-Docker-版本介绍" class="headerlink" title="3.1    Docker 版本介绍"></a>3.1    Docker 版本介绍</h2><p>Docker CE 在 17.03 版本之前叫 Docker Engine, Docker Engine 的版本号范围: 0.1.0 ~1.13.1</p><p>在 2017 年 3 月 2 日, docker 团队宣布企业版 Docker Enterprise Edition ( EE ) 发布. 为了一致, 免费的 Docker Engine 改名为 Docker Community Edition ( CE ), 并且采用基于时间的版本号方案. 就在这一天, Docker EE 和 Docker CE 的 17.03 版本发布, 这也是第一个采用新的版本号方案的版本.</p><p>Docker CE/EE 每个季度发布一次 季度版本, 也就是说每年会发布 4 个季度版本, 17.03,17.06, 17.09, 17.12 就是 2017 年的 4 个季度版本的版本号, 同时 Docker CE 每个月还会发布一个 EDGE 版本，比如 17.04, 17.05, 17.07, 17.08, 17.10, 17.11 ……</p><p>Docker CE 季度版本自发布后会有 4 个月的维护期.</p><p>在基于时间的发布方案中，版本号格式为: YY.MM.，YY.MM 代表年月，patch 代表补丁号，从 0 开始，在季度版本 (如 17.03) 的维护期内，bug 修复相关的更新会以 patch 递增的方式发布, 比如 17.03.0 -&gt; 17.03.1 -&gt; 17.03.2</p><p>Docker is available in two editions:</p><ul><li>Community Edition (CE) ：社区版</li><li>Enterprise Edition (EE) ：企业版</li></ul><h2 id="3-2-Docker-安装"><a href="#3-2-Docker-安装" class="headerlink" title="3.2    Docker 安装"></a>3.2    Docker 安装</h2><h3 id="3-2-1-版本要求"><a href="#3-2-1-版本要求" class="headerlink" title="3.2.1    版本要求"></a>3.2.1    版本要求</h3><p>Docker对Ubuntu的支持是最好的。如果是 CentOS：安装Docker 建议7.x及以上版本。</p><p>Docker支持在多种平台上使用，包括Mac、Windows、Cloud以及Linux系统上等。由于Docker是基于Ubuntu发布的，所以官方更推荐在Ubuntu上使用Docker，开发者也可以根据自己的实际开发环境选择合适的开发。在不同的平台上安装Docker必须满足不同的先决条件。</p><h3 id="3-2-2-安装步骤"><a href="#3-2-2-安装步骤" class="headerlink" title="3.2.2    安装步骤"></a>3.2.2    安装步骤</h3><h4 id="3-2-2-1-安装需要的软件包"><a href="#3-2-2-1-安装需要的软件包" class="headerlink" title="3.2.2.1    安装需要的软件包"></a>3.2.2.1    安装需要的软件包</h4><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-设置yum源"><a href="#3-2-2-2-设置yum源" class="headerlink" title="3.2.2.2    设置yum源"></a>3.2.2.2    设置yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中央仓库</span></span><br><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里仓库</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="3-2-2-3-安装-Docker"><a href="#3-2-2-3-安装-Docker" class="headerlink" title="3.2.2.3    安装 Docker"></a>3.2.2.3    安装 Docker</h4><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装特定版本的 Docker：</p><p>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><h4 id="3-2-2-4-启动Docker"><a href="#3-2-2-4-启动Docker" class="headerlink" title="3.2.2.4    启动Docker"></a>3.2.2.4    启动Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="3-2-2-5-配置国内镜像加速器"><a href="#3-2-2-5-配置国内镜像加速器" class="headerlink" title="3.2.2.5    配置国内镜像加速器"></a>3.2.2.5    配置国内镜像加速器</h4><p><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云镜像加速器地址</a></p><p>直接支付宝登陆，然后进入后台，点击镜像加速器，根据自己的Linux系统输入对应的命令，完成阿里云国内镜像源的配置。</p><p><img src="https://img-blog.csdnimg.cn/2020100422291647.png" alt="image-20201004213342131"></p><h4 id="3-2-2-6-测试"><a href="#3-2-2-6-测试" class="headerlink" title="3.2.2.6    测试"></a>3.2.2.6    测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello‐world</span><br></pre></td></tr></table></figure><h2 id="3-3-常用Docker命令"><a href="#3-3-常用Docker命令" class="headerlink" title="3.3    常用Docker命令"></a>3.3    常用Docker命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看docker详细信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker版本</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动/停止/重启docker：</span></span><br><span class="line">systemctl start/stop/restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#Ubuntu：开机自动启动</span></span><br><span class="line"><span class="comment">#CentOS：手动启动</span></span><br><span class="line"><span class="comment">#开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker运行状态</span></span><br><span class="line">sytemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有容器的状态</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h1 id="4-Docker-架构"><a href="#4-Docker-架构" class="headerlink" title="4.    Docker 架构"></a>4.    Docker 架构</h1><p>Docker使用客户端 - 服务器架构。 Docker客户端与Docker守护进程通信，后者负责构建，运行和分发Docker容器。 Docker客户端和守护程序可以在同一系统上运行，也可以将Docker客户端连接到远程Docker守护程序。 Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。</p><p><img src="https://img-blog.csdnimg.cn/20201004222933120.png" alt="image-20201004214746388"></p><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><h1 id="5-Docker-镜像操作"><a href="#5-Docker-镜像操作" class="headerlink" title="5.    Docker 镜像操作"></a>5.    Docker 镜像操作</h1><p>Docker 镜像是容器的基础。镜像是一个有序集合，其中包含根文件系统更改和在容器运行时中使用的相应执行参数。镜像通常 包含堆叠在彼此之上的联合分层文件系统。镜像没有状态并且始终不会发生更改。 当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><h2 id="5-1-列出镜像"><a href="#5-1-列出镜像" class="headerlink" title="5.1    列出镜像"></a>5.1    列出镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              9140108b62dc        8 days ago          72.9MB</span><br></pre></td></tr></table></figure><ul><li><strong>REPOSITORY</strong> ：表示镜像的仓库源</li><li><strong>TAG</strong> ：镜像的标签（版本），同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如ubuntu仓库源里，有15.10、14.04等多个不同的版本。</li><li><strong>IMAGE ID</strong> ：镜像ID</li><li><strong>CREATED</strong> ：镜像创建时间</li><li><strong>SIZE</strong> ：镜像大小</li></ul><h2 id="5-2-查找镜像"><a href="#5-2-查找镜像" class="headerlink" title="5.2    查找镜像"></a>5.2    查找镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker search 镜像名称</span></span><br><span class="line"></span><br><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201004222948320.png" alt="image-20201004215750349"></p><ul><li><strong>NAME</strong> ：镜像仓库源的名称</li><li><strong>DESCRIPTION</strong>：镜像的描述</li><li><strong>starts</strong>：用户评价，反应一个镜像的受欢迎程度</li><li><strong>OFFICIAL</strong>：是否docker官方发布</li><li><strong>auto commit</strong>：自动构建，表示该镜像由Docker Hub自动构建流程创建的</li></ul><h2 id="5-3-拉取镜像"><a href="#5-3-拉取镜像" class="headerlink" title="5.3    拉取镜像"></a>5.3    拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称[:version]</span><br></pre></td></tr></table></figure><p>Docker镜像首页，包括官方镜像和其它公开镜像。Docker Hub上最受欢迎的10大镜像（通过Docker registry API获取不了镜像被pull的个数，只能通过镜像的stars数量，来衡量镜像的流行度。毫无疑问，拥有最高stars数量的库都是官方库。国情的原因，国内下载 Docker HUB 官方的相关镜像比较慢，可以使用国内（docker.io）的一些镜像加速器，镜像保持和官方一致，关键是速度块，推荐使用。配置镜像加速器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PS：配置镜像加速器（参考该网站具体的文档操作）</span><br><span class="line">‐ 阿里云（先加入阿里云开发者平台：https:&#x2F;&#x2F;dev.aliyun.com）</span><br><span class="line">‐ docker中国加速器（https:&#x2F;&#x2F;www.docker‐cn.com)</span><br><span class="line">‐ USTC加速器（https:&#x2F;&#x2F;lug.ustc.edu.cn&#x2F;wiki&#x2F; ）  真正的公共服务（无需任何操作）</span><br><span class="line">‐ daocloud、网易蜂巢加速器：略</span><br><span class="line"></span><br><span class="line">步骤：</span><br><span class="line">sudo vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">配置内容：    </span><br><span class="line">&#123;    </span><br><span class="line">   &quot;registry‐mirrors&quot;: [&quot;https:&#x2F;&#x2F;cs913o6k.mirror.aliyuncs.com&quot;]      </span><br><span class="line">&#125;</span><br><span class="line">sudo systemctl daemon‐reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="5-4-删除镜像"><a href="#5-4-删除镜像" class="headerlink" title="5.4    删除镜像"></a>5.4    删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、删除一个镜像</span></span><br><span class="line">docker rmi 镜像名称/id</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、删除多个镜像</span></span><br><span class="line">docker rmi 镜像名称1/id1 镜像名称2/id2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、删除所有镜像</span></span><br><span class="line">docker rmi `docker images ‐q`</span><br></pre></td></tr></table></figure><h1 id="6-Docker-容器操作"><a href="#6-Docker-容器操作" class="headerlink" title="6.    Docker 容器操作"></a>6.    Docker 容器操作</h1><p>容器是 Docker 镜像的运行时实例。</p><p><img src="https://img-blog.csdnimg.cn/20201004223000109.png" alt="image-20201004221909011"></p><h2 id="6-1-创建容器"><a href="#6-1-创建容器" class="headerlink" title="6.1    创建容器"></a>6.1    创建容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] image <span class="built_in">command</span> [ARG...]</span><br><span class="line">options选项: -i、-t、-d、--name</span><br><span class="line">-i：交互式容器</span><br><span class="line">-t：tty，终端</span><br><span class="line">-d:后台运行，并且打印容器id</span><br><span class="line"></span><br><span class="line">eg:创建的容器名称不能重复</span><br><span class="line">docker run --name=u1 ubuntu</span><br><span class="line">docker run -i -t --name=u1 ubuntu /bin/bash</span><br><span class="line">docker run -i -t -d --name=u3 ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h2 id="6-2-进入容器"><a href="#6-2-进入容器" class="headerlink" title="6.2    进入容器"></a>6.2    进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">docker attach 容器名称/id (ps:<span class="built_in">exit</span>,容器停止)               </span><br><span class="line">eg：docker attach u3</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">docker <span class="built_in">exec</span> -it 容器名称/id /bin/bash    （ps:<span class="built_in">exit</span>,容器不会停止）</span><br><span class="line">eg：docker <span class="built_in">exec</span> -it u3 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="6-3-查看容器"><a href="#6-3-查看容器" class="headerlink" title="6.3    查看容器"></a>6.3    查看容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps：查看正在运行的容器</span><br><span class="line">docker ps -a：查看运行过的容器（历史）</span><br><span class="line">docker ps -l：最后一次运行的容器</span><br></pre></td></tr></table></figure><h2 id="6-4-停止-启动容器"><a href="#6-4-停止-启动容器" class="headerlink" title="6.4    停止/启动容器"></a>6.4    停止/启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称/id</span><br><span class="line">docker stop 容器名称/id</span><br></pre></td></tr></table></figure><h2 id="6-5-获取容器-镜像的元数据"><a href="#6-5-获取容器-镜像的元数据" class="headerlink" title="6.5    获取容器/镜像的元数据"></a>6.5    获取容器/镜像的元数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看容器/镜像全部信息：</span><br><span class="line">docker inspect 容器/镜像</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器/镜像部分信息：</span></span><br><span class="line">docker inspect -f=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器/镜像</span><br><span class="line">-f：可通过--format代替</span><br></pre></td></tr></table></figure><h2 id="6-6-删除容器"><a href="#6-6-删除容器" class="headerlink" title="6.6    删除容器"></a>6.6    删除容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除一个容器：</span></span><br><span class="line">docker rm 容器名称/id</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除多个容器：</span></span><br><span class="line">docker rm 容器名称1/id1 容器名称2/id2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有容器</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br><span class="line"></span><br><span class="line">PS：无法删除正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="6-7-查看容器日志"><a href="#6-7-查看容器日志" class="headerlink" title="6.7    查看容器日志"></a>6.7    查看容器日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器名称/id</span><br></pre></td></tr></table></figure><h2 id="6-8-文件拷贝"><a href="#6-8-文件拷贝" class="headerlink" title="6.8    文件拷贝"></a>6.8    文件拷贝</h2><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp  需要拷贝的文件或目录 容器名称:容器目录</span><br><span class="line"></span><br><span class="line">例如：docker cp 1.txt c2:/root</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp  容器名称:容器目录 需要拷贝的文件或目录</span><br><span class="line"></span><br><span class="line">例如：docker cp c2:/root/2.txt /root</span><br></pre></td></tr></table></figure><h2 id="6-9-目录挂载"><a href="#6-9-目录挂载" class="headerlink" title="6.9    目录挂载"></a>6.9    目录挂载</h2><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。</p><p>创建容器 添加-v参数 后边为宿主机目录:容器目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c4 -v /opt/:/usr/<span class="built_in">local</span>/myhtml centos</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示</p><p>这是因为 CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数 –privileged=true 来解决挂载的目录没有权限的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --privileged=<span class="literal">true</span> --name=c4 -v /opt/:/usr/<span class="built_in">local</span>/myhtml centos</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-什么是虚拟化&quot;&gt;&lt;a href=&quot;#1-什么是虚拟化&quot; class=&quot;headerlink&quot; title=&quot;1.    什么是虚拟化&quot;&gt;&lt;/a&gt;1.    什么是虚拟化&lt;/h1&gt;&lt;h2 id=&quot;1-1-概念&quot;&gt;&lt;a href=&quot;#1-1-概念&quot; class=&quot;headerlink&quot; title=&quot;1.1    概念&quot;&gt;&lt;/a&gt;1.1    概念&lt;/h2&gt;&lt;p&gt;在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，&lt;strong&gt;打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源&lt;/strong&gt;。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://wgy1993.gitee.io/tags/Docker/"/>
    
      <category term="容器技术" scheme="https://wgy1993.gitee.io/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫(三)</title>
    <link href="https://wgy1993.gitee.io/archives/1f29f91c.html"/>
    <id>https://wgy1993.gitee.io/archives/1f29f91c.html</id>
    <published>2020-10-04T04:48:31.000Z</published>
    <updated>2020-10-04T04:51:18.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-案例扩展"><a href="#1-案例扩展" class="headerlink" title="1.    案例扩展"></a>1.    案例扩展</h1><h2 id="1-1-定时任务"><a href="#1-1-定时任务" class="headerlink" title="1.1    定时任务"></a>1.1    定时任务</h2><p>在案例中我们使用的是Spring内置的Spring Task，这是Spring3.0加入的定时任务功能。我们使用注解的方式定时启动爬虫进行数据爬取。</p><p>我们使用的是@Scheduled注解，其属性如下：</p><a id="more"></a><ul><li><strong>cron</strong>：cron表达式，指定任务在特定时间执行；</li><li><strong>fixedDelay</strong>：上一次任务执行完后多久再执行，参数类型为long，单位ms</li><li><strong>fixedDelayString</strong>：与fixedDelay含义一样，只是参数类型变为String</li><li><strong>fixedRate</strong>：按一定的频率执行任务，参数类型为long，单位ms</li><li><strong>fixedRateString</strong>: 与fixedRate的含义一样，只是将参数类型变为String</li><li><strong>initialDelay</strong>：延迟多久再第一次执行任务，参数类型为long，单位ms</li><li><strong>initialDelayString</strong>：与initialDelay的含义一样，只是将参数类型变为String</li><li><strong>zone</strong>：时区，默认为当前时区，一般没有用到</li></ul><p>我们这里的使用比较简单，固定的间隔时间来启动爬虫。例如可以实现项目启动后，每隔一小时启动一次爬虫。</p><p>但是有可能业务要求更高，并不是定时定期处理，而是在特定的时间进行处理，这个时候我们之前的使用方式就不能满足需求了。例如我要在工作日（周一到周五）的晚上八点执行。这时我们就需要Cron表达式了。</p><h3 id="1-1-1-Cron表达式"><a href="#1-1-1-Cron表达式" class="headerlink" title="1.1.1    Cron表达式"></a>1.1.1    Cron表达式</h3><p>cron的表达式是字符串，实际上是由七子表达式，描述个别细节的时间表。这些子表达式是分开的空白，代表：</p><p>1、Seconds</p><p>2、Minutes</p><p>3、Hours</p><p>4、Day-of-Month</p><p>5、Month</p><p>6、Day-of-Week</p><p>7、Year (可选字段)</p><p>例 “0 0 12 ? * WED” 在每星期三下午12:00 执行, “*” 代表整个时间段</p><p>每一个字段都有一套可以指定有效值，如</p><p>Seconds (秒)      ：可以用数字0－59 表示，</p><p>Minutes(分)       ：可以用数字0－59 表示，</p><p>Hours(时)         ：可以用数字0-23表示,</p><p>Day-of-Month(天)  ：可以用数字1-31 中的任一一个值，但要注意一些特别的月份</p><p>Month(月)       ：可以用0-11 或用字符串:JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC </p><p>Day-of-Week(天)   ：可以用数字1-7表示（1 ＝ 星期日）或用字符口串:SUN, MON, TUE, WED, THU, FRI, SAT</p><p>“/”：为特别单位，表示为“每”如“0/15”表示每隔15分钟执行一次,“0”表示为从“0”分开始, “3/20”表示表示每隔20分钟执行一次，“3”表示从第3分钟开始执行</p><p>“?”：表示每月的某一天，或第周的某一天</p><p>“L”：用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几如“6L”表示“每月的最后一个星期五” </p><h3 id="1-1-2-Cron测试"><a href="#1-1-2-Cron测试" class="headerlink" title="1.1.2    Cron测试"></a>1.1.2    Cron测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(LocalDateTime.now() + <span class="string">"任务执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-网页去重"><a href="#1-2-网页去重" class="headerlink" title="1.2    网页去重"></a>1.2    网页去重</h2><p>之前我们对下载的url地址进行了去重操作，避免同样的url下载多次。其实不光url需要去重，我们对下载的内容也需要去重。</p><p>在网上我们可以找到许多内容相似的文章。但是实际我们只需要其中一个即可，同样的内容没有必要下载多次，那么如何进行去重就需要进行处理了</p><h3 id="1-2-1-去重方案介绍"><a href="#1-2-1-去重方案介绍" class="headerlink" title="1.2.1    去重方案介绍"></a>1.2.1    去重方案介绍</h3><ul><li><p><strong>指纹码对比</strong></p><p>最常见的去重方案是生成文档的指纹门。例如对一篇文章进行MD5加密生成一个字符串，我们可以认为这是文章的指纹码，再和其他的文章指纹码对比，一致则说明文章重复。</p><p>但是这种方式是完全一致则是重复的，如果文章只是多了几个标点符号，那仍旧被认为是重复的，这种方式并不合理。</p></li><li><p><strong>BloomFilter</strong></p><p>这种方式就是我们之前对url进行去重的方式，使用在这里的话，也是对文章进行计算得到一个数，再进行对比，缺点和方法1是一样的，如果只有一点点不一样，也会认为不重复，这种方式不合理。</p></li><li><p><strong>KMP算法</strong></p><p>KMP算法是一种改进的字符串匹配算法。KMP算法的关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。能够找到两个文章有哪些是一样的，哪些不一样。</p><p>这种方式能够解决前面两个方式的“只要一点不一样就是不重复”的问题。但是它的时空复杂度太高了，不适合大数据量的重复比对。</p></li></ul><p>还有一些其他的去重方式：最长公共子串、后缀数组、字典树、DFA等等，但是这些方式的空复杂度并不适合数据量较大的工业应用场景。我们需要找到一款性能高速度快，能够进行相似度对比的去重方案</p><p>Google 的 <strong>simhash 算法</strong>产生的签名，可以满足上述要求。这个算法并不深奥，比较容易理解。这种算法也是目前Google搜索引擎所目前所使用的网页去重算法。</p><h3 id="1-2-2-SimHash"><a href="#1-2-2-SimHash" class="headerlink" title="1.2.2    SimHash"></a>1.2.2    SimHash</h3><h4 id="1-2-2-1-流程介绍"><a href="#1-2-2-1-流程介绍" class="headerlink" title="1.2.2.1    流程介绍"></a>1.2.2.1    流程介绍</h4><p>simhash是由 Charikar 在2002年提出来的，为了便于理解尽量不使用数学公式，分为这几步：</p><p><strong>1、分词</strong>，把需要判断文本分词形成这个文章的特征单词。</p><p><strong>2、hash</strong>，通过hash算法把每个词变成hash值，比如“美国”通过hash算法计算为 100101,“51区”通过hash算法计算为 101011。这样我们的字符串就变成了一串串数字。</p><p><strong>3、加权</strong>，通过 2步骤的hash生成结果，需要按照单词的权重形成加权数字串，“美国”的hash值为“100101”，通过加权计算为“4 -4 -4 4 -4 4”，“51区”计算为 “ 5 -5 5 -5 5 5”。</p><p><strong>4、合并</strong>，把上面各个单词算出来的序列值累加，变成只有一个序列串。 “美国”的 “4 -4 -4 4 -4 4”，“51区”的 “ 5 -5 5 -5 5 5”，把每一位进行累加， “4+5 -4+-5 -4+5 4+-5 -4+5 4+5”–&gt;“9 -9 1 -1 1 9”</p><p><strong>5、降维</strong>，把算出来的 “9 -9 1 -1 1 9”变成 0 1 串，形成最终的simhash签名。 </p><p><img src="https://img-blog.csdnimg.cn/20201004124623447.png" alt="image-20201004121653047"></p><h4 id="1-2-2-2-签名距离计算"><a href="#1-2-2-2-签名距离计算" class="headerlink" title="1.2.2.2    签名距离计算"></a>1.2.2.2    签名距离计算</h4><p>我们把库里的文本都转换为simhash签名，并转换为long类型存储，空间大大减少。现在我们虽然解决了空间，但是如何计算两个simhash的相似度呢？</p><p>我们通过海明距离（Hamming distance）就可以计算出两个simhash到底相似不相似。两个simhash对应二进制（01串）取值不同的数量称为这两个simhash的海明距离。</p><p>举例如下： 10101 和 00110 从第一位开始依次有第一位、第四、第五位不同，则海明距离为3。对于二进制字符串的a和b，海明距离为等于在a XOR b运算结果中1的个数（普遍算法）。</p><h4 id="1-2-2-3-导入simhash工程"><a href="#1-2-2-3-导入simhash工程" class="headerlink" title="1.2.2.3    导入simhash工程"></a>1.2.2.3    导入simhash工程</h4><p>参考项目：<a href="https://github.com/CreekLou/simhash.git" target="_blank" rel="noopener">https://github.com/CreekLou/simhash.git</a></p><p>导入工程simhash，并打开测试用例。</p><p><img src="https://img-blog.csdnimg.cn/20201004124639415.png" alt="image-20201004121854013"></p><h4 id="1-2-2-4-案例整合"><a href="#1-2-2-4-案例整合" class="headerlink" title="1.2.2.4    案例整合"></a>1.2.2.4    案例整合</h4><p>需要先把simhash安装到本地仓库</p><p><img src="https://img-blog.csdnimg.cn/20201004124654969.png" alt="image-20201004121958144"></p><p>在案例的pom.xml中加入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--simhash网页去重--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simhasher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readAllFile</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        String everything = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(filename);</span><br><span class="line">            everything = IOUtils.toString(inputStream);</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> everything;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str1 = readAllFile(<span class="string">"D:/test/testin.txt"</span>);</span><br><span class="line">        SimHasher hash1 = <span class="keyword">new</span> SimHasher(str1);</span><br><span class="line">        <span class="comment">//打印simhash签名</span></span><br><span class="line">        System.out.println(hash1.getSignature());</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line"></span><br><span class="line">        String str2 = readAllFile(<span class="string">"D:/test/testin2.txt"</span>);</span><br><span class="line">        <span class="comment">//打印simhash签名</span></span><br><span class="line">        SimHasher hash2 = <span class="keyword">new</span> SimHasher(str2);</span><br><span class="line">        System.out.println(hash2.getSignature());</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印海明距离</span></span><br><span class="line">        System.out.println(hash1.getHammingDistance(hash2.getSignature()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-代理的使用"><a href="#1-3-代理的使用" class="headerlink" title="1.3    代理的使用"></a>1.3    代理的使用</h2><p>有些网站不允许爬虫进行数据爬取，因为会加大服务器的压力。其中一种最有效的方式是通过ip+时间进行鉴别，因为正常人不可能短时间开启太多的页面，发起太多的请求。</p><p>我们使用的WebMagic可以很方便的设置爬取数据的时间（参考第二天的的爬虫的配置、启动和终止）。但是这样会大大降低我们爬取数据的效率，如果不小心ip被禁了，会让我们无法爬去数据，那么我们就有必要使用代理服务器来爬取数据。</p><h3 id="1-3-1-代理服务器"><a href="#1-3-1-代理服务器" class="headerlink" title="1.3.1    代理服务器"></a>1.3.1    代理服务器</h3><p>代理（英语：Proxy），也称网络代理，是一种特殊的网络服务，允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。</p><p>提供代理服务的电脑系统或其它类型的网络终端称为代理服务器（英文：Proxy Server）。一个完整的代理请求过程为：客户端首先与代理服务器创建连接，接着根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或者获得目标服务器的指定资源。</p><p><img src="https://img-blog.csdnimg.cn/20201004124710599.png" alt="image-20201004122253194"></p><p>我们就需要知道代理服务器在哪里（ip和端口号）才可以使用。网上有很多代理服务器的提供商，但是大多是免费的不好用，付费的还行。</p><p>米扑代理：<a href="https://proxy.mimvp.com/free.php" target="_blank" rel="noopener">https://proxy.mimvp.com/free.php</a></p><h3 id="1-3-2-使用代理"><a href="#1-3-2-使用代理" class="headerlink" title="1.3.2    使用代理"></a>1.3.2    使用代理</h3><p>WebMagic使用的代理APIProxyProvider。因为相对于Site的“配置”，ProxyProvider定位更多是一个“组件”，所以代理不再从Site设置，而是由HttpClientDownloader设置。</p><table><thead><tr><th><strong>API</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>HttpClientDownloader.setProxyProvider(ProxyProvider  proxyProvider)</td><td>设置代理</td></tr></tbody></table><p>ProxyProvider有一个默认实现：SimpleProxyProvider。它是一个基于简单Round-Robin的、没有失败检查的ProxyProvider。可以配置任意个候选代理，每次会按顺序挑选一个代理使用。它适合用在自己搭建的比较稳定的代理的场景。</p><p>如果需要根据实际使用情况对代理服务器进行管理（例如校验是否可用，定期清理、添加代理服务器等），只需要自己实现APIProxyProvider即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建下载器Downloader</span></span><br><span class="line">        HttpClientDownloader httpClientDownloader = <span class="keyword">new</span> HttpClientDownloader();</span><br><span class="line">        <span class="comment">//给下载器设置代理服务器信息</span></span><br><span class="line">        httpClientDownloader.setProxyProvider(SimpleProxyProvider.from(<span class="keyword">new</span> Proxy(<span class="string">"112.109.198.105"</span>, <span class="number">3128</span>)));</span><br><span class="line"></span><br><span class="line">        Spider.create(<span class="keyword">new</span> ProxyTest())</span><br><span class="line">                .addUrl(<span class="string">"http://ip.chinaz.com/"</span>)</span><br><span class="line">                .setDownloader(httpClientDownloader)<span class="comment">//设置下载器</span></span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印获取到的结果以测试代理服务器是否生效</span></span><br><span class="line">        System.out.println(page.getHtml().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-查询案例实现"><a href="#2-查询案例实现" class="headerlink" title="2.    查询案例实现"></a>2.    查询案例实现</h1><p>把上一次上课抓取到的招聘数据作为数据源，实现招聘信息查询功能。首先需要把MySQL的数据添加到索引库中，然后再实现查询功能。我们这里使用的是SpringBoot，需要把Spring Data ElasticSearch 和项目进行整合。</p><h2 id="2-1-开发准备"><a href="#2-1-开发准备" class="headerlink" title="2.1    开发准备"></a>2.1    开发准备</h2><p>需要修改之前的配置，网页去重排除lucene依赖，同时去重的依赖必须放在pom.xml的最下部。因为现在要使用ElasticSearch，需要用到新的lucene依赖。</p><p>添加ES依赖和单元测试依赖，并修改以前的去重依赖，pom.xml效果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringData Jpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--MySQL连接包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--WebMagic核心包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--WebMagic扩展--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--WebMagic对布隆过滤器的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ElasticSearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--simhash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simhasher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改配置文件application.properties，添加以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/crawler</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JPA Configuration:</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ElasticSearch Configuration</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">192.168.142.128:9700</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">wgy-es</span></span><br></pre></td></tr></table></figure><h2 id="2-2-导入数据到索引库"><a href="#2-2-导入数据到索引库" class="headerlink" title="2.2    导入数据到索引库"></a>2.2    导入数据到索引库</h2><h3 id="2-2-1-编写pojo"><a href="#2-2-1-编写pojo" class="headerlink" title="2.2.1    编写pojo"></a>2.2.1    编写pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息实体类es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"jobinfo"</span>, type = <span class="string">"JobInfoField"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfoField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Long)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String companyAddr;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String companyInfo;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String jobName;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String jobAddr;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String jobInfo;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMin;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMax;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-编写dao"><a href="#2-2-2-编写dao" class="headerlink" title="2.2.2    编写dao"></a>2.2.2    编写dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息持久层接口es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">JobInfoField</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-编写Service"><a href="#2-2-3-编写Service" class="headerlink" title="2.2.3    编写Service"></a>2.2.3    编写Service</h3><p>编写Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务接口es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobRepositoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存一条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfoField</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfoField jobInfoField)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(List&lt;JobInfoField&gt; list)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务实现es</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobRepositoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">JobRepositoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepository jobRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfoField jobInfoField)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobRepository.save(jobInfoField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(List&lt;JobInfoField&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobRepository.saveAll(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-编写测试用例"><a href="#2-2-4-编写测试用例" class="headerlink" title="2.2.4    编写测试用例"></a>2.2.4    编写测试用例</h3><p>先执行createIndex()方法创建索引，再执行jobData()导入数据到索引库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ESTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepositoryService jobRepositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引和映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elasticsearchTemplate.createIndex(JobInfoField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.elasticsearchTemplate.putMapping(JobInfoField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入数据到索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobInfoData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明页码数，从1开始</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//声明查询到的数据条数</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//从数据库中查询数据</span></span><br><span class="line">            Page&lt;JobInfo&gt; page = <span class="keyword">this</span>.jobInfoService.findJobInfoByPage(p, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//声明容器存放JobInfoField</span></span><br><span class="line">            List&lt;JobInfoField&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把查询到的数据封装为JobInfoField</span></span><br><span class="line">            <span class="keyword">for</span> (JobInfo jobInfo : page.getContent()) &#123;</span><br><span class="line">                <span class="comment">//声明对象</span></span><br><span class="line">                JobInfoField jobInfoField = <span class="keyword">new</span> JobInfoField();</span><br><span class="line">                <span class="comment">//封装数据,复制数据</span></span><br><span class="line">                BeanUtils.copyProperties(jobInfo, jobInfoField);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把封装好数据的对象放到list容器中</span></span><br><span class="line">                list.add(jobInfoField);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把封装好的数据保存到索引库中</span></span><br><span class="line">            <span class="keyword">this</span>.jobRepositoryService.saveAll(list);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//页码数加一</span></span><br><span class="line">            p++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取查询结果集的数据条数</span></span><br><span class="line">            pageSize = page.getContent().size();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> (pageSize == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-查询案例实现"><a href="#2-3-查询案例实现" class="headerlink" title="2.3    查询案例实现"></a>2.3    查询案例实现</h2><h3 id="2-3-1-页面跳转实现"><a href="#2-3-1-页面跳转实现" class="headerlink" title="2.3.1    页面跳转实现"></a>2.3.1    页面跳转实现</h3><p>添加静态资源到项目中</p><p><img src="https://img-blog.csdnimg.cn/20201004124731558.png" alt="image-20201004124008295"></p><h3 id="2-3-2-编写pojo"><a href="#2-3-2-编写pojo" class="headerlink" title="2.3.2    编写pojo"></a>2.3.2    编写pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果封装类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;JobInfoField&gt; rows;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pageTotal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-编写Controller"><a href="#2-3-3-编写Controller" class="headerlink" title="2.3.3    编写Controller"></a>2.3.3    编写Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepositoryService jobRepositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//salary: *-*</span></span><br><span class="line">    <span class="comment">//page: 1</span></span><br><span class="line">    <span class="comment">//jobaddr: 北京</span></span><br><span class="line">    <span class="comment">//keyword: java</span></span><br><span class="line">    <span class="comment">//Request URL: http://127.0.0.1:80/search</span></span><br><span class="line">    <span class="comment">//Request Method: POST</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件分页查询招聘信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salary</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobaddr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"search"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobResult <span class="title">search</span><span class="params">(String salary, String jobaddr, String keyword, Integer page)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        JobResult jobResult = <span class="keyword">this</span>.jobRepositoryService.search(salary, jobaddr, keyword, page);</span><br><span class="line">        <span class="keyword">return</span> jobResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-编写Service"><a href="#2-3-4-编写Service" class="headerlink" title="2.3.4    编写Service"></a>2.3.4    编写Service</h3><p>在JobRepositoryService编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件分页查询招聘信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jobaddr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JobResult <span class="title">search</span><span class="params">(String salary, String jobaddr, String keyword, Integer page)</span></span>;</span><br></pre></td></tr></table></figure><p>在JobRepositoryServiceImpl实现接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//salary: *-*</span></span><br><span class="line"><span class="comment">//page: 1</span></span><br><span class="line"><span class="comment">//jobaddr: 北京</span></span><br><span class="line"><span class="comment">//keyword: java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobResult <span class="title">search</span><span class="params">(String salary, String jobaddr, String keyword, Integer page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析参数薪资</span></span><br><span class="line">    String[] salarys = salary.split(<span class="string">"-"</span>);</span><br><span class="line">    <span class="keyword">int</span> salaryMin = <span class="number">0</span>, salaryMax = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取最低薪资</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"*"</span>.equals(salarys[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="comment">//如果最小值是*，表示最低薪资是0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果最小值不是*，需要转为数字类型，乘以10000</span></span><br><span class="line">        salaryMin = Integer.parseInt(salarys[<span class="number">0</span>]) * <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取最高薪资</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"*"</span>.equals(salarys[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="comment">//如果最大值是*，代表最大的数也包含,设置为1000万</span></span><br><span class="line">        salaryMax = <span class="number">10000000</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果最大值不是*，需要转为数字类型，乘以10000</span></span><br><span class="line">        salaryMax = Integer.parseInt(salarys[<span class="number">0</span>]) * <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断工作地点是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(jobaddr)) &#123;</span><br><span class="line">        <span class="comment">//如果为空，设置为*</span></span><br><span class="line">        jobaddr = <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断查询关键词是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(keyword)) &#123;</span><br><span class="line">        <span class="comment">//如果为空，设置为*</span></span><br><span class="line">        keyword = <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用dao的方法执行查询</span></span><br><span class="line">    Page&lt;JobInfoField&gt; pages = <span class="keyword">this</span>.jobRepository.findBySalaryMinBetweenAndSalaryMaxBetweenAndJobAddrAndJobNameAndJobInfo(salaryMin, salaryMax, salaryMin, salaryMax, jobaddr, keyword, keyword, PageRequest.of(page - <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装结果对象jobResult</span></span><br><span class="line">    JobResult jobResult = <span class="keyword">new</span> JobResult();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置结果集</span></span><br><span class="line">    jobResult.setRows(pages.getContent());</span><br><span class="line">    <span class="comment">//设置总页数</span></span><br><span class="line">    jobResult.setPageTotal(pages.getTotalPages());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jobResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-编写Dao"><a href="#2-3-5-编写Dao" class="headerlink" title="2.3.5    编写Dao"></a>2.3.5    编写Dao</h3><p>在JobRepository编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件分页查询数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMin 薪资下限最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMax 薪资下限最高值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMin1    薪资上限最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salaryMax1    薪资上限最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jobaddr   工作地</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword   职位名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword1  职位信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable  分页数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  JobInfoField</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;JobInfoField&gt; <span class="title">findBySalaryMinBetweenAndSalaryMaxBetweenAndJobAddrAndJobNameAndJobInfo</span><span class="params">(<span class="keyword">int</span> salaryMin, <span class="keyword">int</span> salaryMax, <span class="keyword">int</span> salaryMin1, <span class="keyword">int</span> salaryMax1, String jobaddr, String keyword, String keyword1, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-6-测试"><a href="#2-3-6-测试" class="headerlink" title="2.3.6    测试"></a>2.3.6    测试</h3><p><img src="https://img-blog.csdnimg.cn/20201004124749394.png" alt="image-20201004124427619"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-案例扩展&quot;&gt;&lt;a href=&quot;#1-案例扩展&quot; class=&quot;headerlink&quot; title=&quot;1.    案例扩展&quot;&gt;&lt;/a&gt;1.    案例扩展&lt;/h1&gt;&lt;h2 id=&quot;1-1-定时任务&quot;&gt;&lt;a href=&quot;#1-1-定时任务&quot; class=&quot;headerlink&quot; title=&quot;1.1    定时任务&quot;&gt;&lt;/a&gt;1.1    定时任务&lt;/h2&gt;&lt;p&gt;在案例中我们使用的是Spring内置的Spring Task，这是Spring3.0加入的定时任务功能。我们使用注解的方式定时启动爬虫进行数据爬取。&lt;/p&gt;
&lt;p&gt;我们使用的是@Scheduled注解，其属性如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="网络爬虫" scheme="https://wgy1993.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫(二)</title>
    <link href="https://wgy1993.gitee.io/archives/61dad937.html"/>
    <id>https://wgy1993.gitee.io/archives/61dad937.html</id>
    <published>2020-10-03T05:40:53.000Z</published>
    <updated>2020-10-03T05:51:51.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-WebMagic介绍"><a href="#1-WebMagic介绍" class="headerlink" title="1.    WebMagic介绍"></a>1.    WebMagic介绍</h1><p>昨天完成了爬虫的入门的学习，是一个最基本的爬虫案例，今天我们要学习一款爬虫框架的使用就是WebMagic。其底层用到了我们上一天课程所使用的HttpClient和Jsoup，让我们能够更方便的开发爬虫。</p><a id="more"></a><p>WebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。</p><p>WebMagic的设计目标是尽量的模块化，并体现爬虫的功能特点。这部分提供非常简单、灵活的API，在基本不改变开发模式的情况下，编写一个爬虫。</p><p>扩展部分(webmagic-extension)提供一些便捷的功能，例如注解模式编写爬虫等。同时内置了一些常用的组件，便于爬虫开发。</p><h2 id="1-1-架构介绍"><a href="#1-1-架构介绍" class="headerlink" title="1.1    架构介绍"></a>1.1    架构介绍</h2><p>WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的设计参考了Scapy，但是实现方式更Java化一些。</p><p>而Spider则将这几个组件组织起来，让它们可以互相交互，流程化的执行，可以认为Spider是一个大的容器，它也是WebMagic逻辑的核心。</p><p>WebMagic总体架构图如下：</p><p><img src="https://img-blog.csdnimg.cn/20201003134213267.png" alt="image-20201003112810451"></p><h3 id="1-1-1-WebMagic的四个组件"><a href="#1-1-1-WebMagic的四个组件" class="headerlink" title="1.1.1    WebMagic的四个组件"></a>1.1.1    WebMagic的四个组件</h3><ul><li><p>Downloader</p><p>Downloader负责从互联网上下载页面，以便后续处理。WebMagic默认使用了Apache HttpClient作为下载工具。</p></li><li><p>PageProcessor</p><p>PageProcessor负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用Jsoup作为HTML解析工具，并基于其开发了解析XPath的工具Xsoup。</p><p>在这四个组件中，PageProcessor对于每个站点每个页面都不一样，是需要使用者定制的部分。</p></li><li><p>Scheduler</p><p>Scheduler负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。</p></li><li><p>Pipeline</p><p>Pipeline负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。</p><p>Pipeline定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline。对于一类需求一般只需编写一个Pipeline。</p></li></ul><h3 id="1-1-2-用于数据流转的对象"><a href="#1-1-2-用于数据流转的对象" class="headerlink" title="1.1.2    用于数据流转的对象"></a>1.1.2    用于数据流转的对象</h3><ul><li><p>Request</p><p>Request是对URL地址的一层封装，一个Request对应一个URL地址。</p><p>它是PageProcessor与Downloader交互的载体，也是PageProcessor控制Downloader唯一方式。</p><p>除了URL本身外，它还包含一个Key-Value结构的字段extra。你可以在extra中保存一些特殊的属性，然后在其他地方读取，以完成不同的功能。例如附加上一个页面的一些信息等。</p></li><li><p>Page</p><p>Page代表了从Downloader下载到的一个页面——可能是HTML，也可能是JSON或者其他文本格式的内容。</p><p>Page是WebMagic抽取过程的核心对象，它提供一些方法可供抽取、结果保存等。</p></li><li><p>ResultItems</p><p>ResultItems相当于一个Map，它保存PageProcessor处理的结果，供Pipeline使用。它的API与Map很类似，值得注意的是它有一个字段skip，若设置为true，则不应被Pipeline处理。</p></li></ul><h2 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2    入门案例"></a>1.2    入门案例</h2><h3 id="1-2-1-加入依赖"><a href="#1-2-1-加入依赖" class="headerlink" title="1.2.1    加入依赖"></a>1.2.1    加入依赖</h3><p>创建Maven工程，并加入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>crawler-webmagic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--WebMagic--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：0.7.3版本对SSL的并不完全，如果是直接从Maven中央仓库下载依赖，在爬取只支持SSL v1.2的网站会有SSL的异常抛出。</p><p>解决方案：</p><ul><li>等作者的0.7.4的版本发布</li><li>直接从github上下载最新的代码，安装到本地仓库</li></ul><p>也可以参考以下资料自己修复</p><p><a href="https://github.com/code4craft/webmagic/issues/701" target="_blank" rel="noopener">https://github.com/code4craft/webmagic/issues/701</a></p><h3 id="1-2-2-加入配置文件"><a href="#1-2-2-加入配置文件" class="headerlink" title="1.2.2    加入配置文件"></a>1.2.2    加入配置文件</h3><p>WebMagic使用slf4j-log4j12作为slf4j的实现。</p><p>添加log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO,A1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-案例实现"><a href="#1-2-3-案例实现" class="headerlink" title="1.2.3    案例实现"></a>1.2.3    案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebMagic入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数，执行爬虫</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">                .addUrl(<span class="string">"https://group.jd.com/index/20000001.htm"</span>)  <span class="comment">//设置爬取数据的页面</span></span><br><span class="line">                .run();<span class="comment">//执行爬虫</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page page</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析返回的数据page，并且把解析的结果放到ResultItems中</span></span><br><span class="line">        <span class="comment">//css选择器</span></span><br><span class="line">        page.putField(<span class="string">"div"</span>, page.getHtml().css(<span class="string">"div.mt h3"</span>).all());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><p><img src="https://img-blog.csdnimg.cn/20201003134240406.png" alt="image-20201003114604954"></p><h1 id="2-WebMagic功能"><a href="#2-WebMagic功能" class="headerlink" title="2.    WebMagic功能"></a>2.    WebMagic功能</h1><h2 id="2-1-实现PageProcessor"><a href="#2-1-实现PageProcessor" class="headerlink" title="2.1    实现PageProcessor"></a>2.1    实现PageProcessor</h2><h3 id="2-1-1-抽取元素Selectable"><a href="#2-1-1-抽取元素Selectable" class="headerlink" title="2.1.1    抽取元素Selectable"></a>2.1.1    抽取元素Selectable</h3><p>WebMagic里主要使用了三种抽取技术：XPath、正则表达式和CSS选择器。另外，对于JSON格式的内容，可使用JsonPath进行解析。</p><h4 id="2-1-1-1-XPath"><a href="#2-1-1-1-XPath" class="headerlink" title="2.1.1.1    XPath"></a>2.1.1.1    XPath</h4><p>获取属性class=mt的div标签，里面的h1标签的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().xpath(<span class="string">"//div[@class=mt]/h1/text()"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-1-1-2-CSS选择器"><a href="#2-1-1-2-CSS选择器" class="headerlink" title="2.1.1.2    CSS选择器"></a>2.1.1.2    CSS选择器</h4><p>CSS选择器是与XPath类似的语言。在上一次的课程中，我们已经学习过了Jsoup的选择器，它比XPath写起来要简单一些，但是如果写复杂一点的抽取规则，就相对要麻烦一点。</p><p>div.mt&gt;h1表示class为mt的div标签下的直接子元素h1标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().css(<span class="string">"div.mt&gt;h1"</span>).toString()</span><br></pre></td></tr></table></figure><p>可是使用:nth-child(n)选择第几个元素，如下选择第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().css(<span class="string">"div#news_div &gt; ul &gt; li:nth-child(1) a"</span>).toString()</span><br></pre></td></tr></table></figure><p>注意：需要使用&gt;，就是直接子元素才可以选择第几个元素</p><h4 id="2-1-1-3-正则表达式"><a href="#2-1-1-3-正则表达式" class="headerlink" title="2.1.1.3    正则表达式"></a>2.1.1.3    正则表达式</h4><p>正则表达式则是一种通用的文本抽取语言。在这里一般用于获取url地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.getHtml().css(<span class="string">"div#news_div a"</span>).regex(<span class="string">".*江苏.*"</span>).all()</span><br></pre></td></tr></table></figure><h3 id="2-1-2-抽取元素API"><a href="#2-1-2-抽取元素API" class="headerlink" title="2.1.2    抽取元素API"></a>2.1.2    抽取元素API</h3><p>Selectable相关的抽取元素链式API是WebMagic的一个核心功能。使用Selectable接口，可以直接完成页面元素的链式抽取，也无需去关心抽取的细节。</p><p>在刚才的例子中可以看到，page.getHtml()返回的是一个Html对象，它实现了Selectable接口。这个接口包含的方法分为两类：抽取部分和获取结果部分。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>xpath(String xpath)</td><td>使用XPath选择</td><td>html.xpath(“//div[@class=’title’]”)</td></tr><tr><td>$(String selector)</td><td>使用Css选择器选择</td><td>html.$(“div.title”)</td></tr><tr><td>$(String selector,String attr)</td><td>使用Css选择器选择</td><td>html.$(“div.title”,”text”)</td></tr><tr><td>css(String selector)</td><td>功能同$()，使用Css选择器选择</td><td>html.css(“div.title”)</td></tr><tr><td>links()</td><td>选择所有链接</td><td>html.links()</td></tr><tr><td>regex(String regex)</td><td>使用正则表达式抽取</td><td>html.regex(“(.*?)&quot;)</td></tr></tbody></table><p>这部分抽取API返回的都是一个<code>Selectable</code>接口，意思是说，是支持链式调用的。例如访问<a href="https://www.jd.com/moreSubject.aspx页面" target="_blank" rel="noopener">https://www.jd.com/moreSubject.aspx页面</a></p><p><img src="https://img-blog.csdnimg.cn/20201003134259798.png" alt="image-20201003120734199"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先获取class为news_div的div</span></span><br><span class="line"><span class="comment">//再获取里面的所有包含文明的元素</span></span><br><span class="line">List&lt;String&gt; list = page.getHtml()</span><br><span class="line">    .css(<span class="string">"div#news_div"</span>)</span><br><span class="line">    .regex(<span class="string">".*文明.*"</span>).all();</span><br></pre></td></tr></table></figure><h3 id="2-1-3-获取结果API"><a href="#2-1-3-获取结果API" class="headerlink" title="2.1.3    获取结果API"></a>2.1.3    获取结果API</h3><p>当链式调用结束时，我们一般都想要拿到一个字符串类型的结果。这时候就需要用到获取结果的API了。</p><p>我们知道，一条抽取规则，无论是XPath、CSS选择器或者正则表达式，总有可能抽取到多条元素。WebMagic对这些进行了统一，可以通过不同的API获取到一个或者多个元素。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>get()</td><td>返回一条String类型的结果</td><td>String link=  html.links().get()</td></tr><tr><td>toString()</td><td>同get()，返回一条String类型的结果</td><td>String link=  html.links().toString()</td></tr><tr><td>all()</td><td>返回所有抽取结果</td><td>List links=  html.links().all()</td></tr></tbody></table><p>当有多条数据的时候，使用get()和toString()都是获取第一个url地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str = page.getHtml()</span><br><span class="line">    .css(<span class="string">"div#news_div"</span>)</span><br><span class="line">    .links().regex(<span class="string">".*[0-3]$"</span>).toString();</span><br><span class="line"></span><br><span class="line">String get = page.getHtml()</span><br><span class="line">    .css(<span class="string">"div#news_div"</span>)</span><br><span class="line">    .links().regex(<span class="string">".*[0-3]$"</span>).get();</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img-blog.csdnimg.cn/20201003134322403.png" alt="image-20201003121114333"></p><p>这里selectable.toString()采用了toString()这个接口，是为了在输出以及和一些框架结合的时候，更加方便。因为一般情况下，我们都只需要选择一个元素！selectable.all()则会获取到所有元素。</p><h3 id="2-1-4-获取链接"><a href="#2-1-4-获取链接" class="headerlink" title="2.1.4    获取链接"></a>2.1.4    获取链接</h3><p>有了处理页面的逻辑，我们的爬虫就接近完工了，但是现在还有一个问题：一个站点的页面是很多的，一开始我们不可能全部列举出来，于是如何发现后续的链接，是一个爬虫不可缺少的一部分。</p><p>下面的例子就是获取<a href="https://www.jd.com/moreSubject.aspx这个页面中所有符合[https://www.jd.com/news.\\w+?.*](https://www.jd.com/news./w+?.*)正则表达式的url地址并将这些链接加入到待抓取的队列中去。" target="_blank" rel="noopener">https://www.jd.com/moreSubject.aspx这个页面中所有符合[https://www.jd.com/news.\\w+?.*](https://www.jd.com/news./w+?.*)正则表达式的url地址并将这些链接加入到待抓取的队列中去。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    page.addTargetRequests(page.getHtml().links()</span><br><span class="line">                           .regex(<span class="string">"(https://www.jd.com/news.\\w+?.*)"</span>).all());</span><br><span class="line">    System.out.println(page.getHtml().css(<span class="string">"div.mt&gt;h1"</span>).all());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        .addUrl(<span class="string">"https://www.jd.com/moreSubject.aspx"</span>)</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-使用Pipeline保存结果"><a href="#2-2-使用Pipeline保存结果" class="headerlink" title="2.2    使用Pipeline保存结果"></a>2.2    使用Pipeline保存结果</h2><p>WebMagic用于保存结果的组件叫做<code>Pipeline</code>。我们现在通过“控制台输出结果”这件事也是通过一个内置的Pipeline完成的，它叫做<code>ConsolePipeline</code>。</p><p>那么，我现在想要把结果用保存到文件中，怎么做呢？只将Pipeline的实现换成”FilePipeline”就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        <span class="comment">//初始访问url地址</span></span><br><span class="line">        .addUrl(<span class="string">"https://www.jd.com/moreSubject.aspx"</span>)</span><br><span class="line">        .addPipeline(<span class="keyword">new</span> FilePipeline(<span class="string">"C:\\Users\\wgy\\Desktop\\result"</span>))<span class="comment">//Pipeline保存结果到文件</span></span><br><span class="line">        .thread(<span class="number">5</span>)<span class="comment">//设置线程数</span></span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-爬虫的配置、启动和终止"><a href="#2-3-爬虫的配置、启动和终止" class="headerlink" title="2.3    爬虫的配置、启动和终止"></a>2.3    爬虫的配置、启动和终止</h2><h3 id="2-3-1-Spider"><a href="#2-3-1-Spider" class="headerlink" title="2.3.1    Spider"></a>2.3.1    Spider</h3><p>Spider是爬虫启动的入口。在启动爬虫之前，我们需要使用一个PageProcessor创建一个Spider对象，然后使用run()进行启动。</p><p>同时Spider的其他组件（Downloader、Scheduler、Pipeline）都可以通过set方法来进行设置。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">create(PageProcessor)</td><td>创建Spider</td><td>Spider.create(new  GithubRepoProcessor())</td></tr><tr><td align="left">addUrl(String…)</td><td>添加初始的URL</td><td>spider .addUrl(“<a href="http://webmagic.io/docs/&quot;" target="_blank" rel="noopener">http://webmagic.io/docs/&quot;</a>)</td></tr><tr><td align="left">thread(n)</td><td>开启n个线程</td><td>spider.thread(5)</td></tr><tr><td align="left">run()</td><td>启动，会阻塞当前线程执行</td><td>spider.run()</td></tr><tr><td align="left">start()/runAsync()</td><td>异步启动，当前线程继续执行</td><td>spider.start()</td></tr><tr><td align="left">stop()</td><td>停止爬虫</td><td>spider.stop()</td></tr><tr><td align="left">addPipeline(Pipeline)</td><td>添加一个Pipeline，一个Spider可以有多个Pipeline</td><td>spider .addPipeline(new  ConsolePipeline())</td></tr><tr><td align="left">setScheduler(Scheduler)</td><td>设置Scheduler，一个Spider只能有个一个Scheduler</td><td>spider.setScheduler(new  RedisScheduler())</td></tr><tr><td align="left">setDownloader(Downloader)</td><td>设置Downloader，一个Spider只能有个一个Downloader</td><td>spider .setDownloader(  new SeleniumDownloader())</td></tr><tr><td align="left">get(String)</td><td>同步调用，并直接取得结果</td><td>ResultItems result = spider.get(“<a href="http://webmagic.io/docs/&quot;" target="_blank" rel="noopener">http://webmagic.io/docs/&quot;</a>)</td></tr><tr><td align="left">getAll(String…)</td><td>同步调用，并直接取得一堆结果</td><td>List<ResultItems>  results = spider.getAll(“<a href="http://webmagic.io/docs/&quot;" target="_blank" rel="noopener">http://webmagic.io/docs/&quot;</a>, “<a href="http://webmagic.io/xxx&quot;" target="_blank" rel="noopener">http://webmagic.io/xxx&quot;</a>)</td></tr></tbody></table><h3 id="2-3-2-爬虫配置Site"><a href="#2-3-2-爬虫配置Site" class="headerlink" title="2.3.2    爬虫配置Site"></a>2.3.2    爬虫配置Site</h3><p>Site.me()可以对爬虫进行一些配置配置，包括编码、抓取间隔、超时时间、重试次数等。在这里我们先简单设置一下：重试次数为3次，抓取间隔为一秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">    .setCharset(<span class="string">"UTF-8"</span>)<span class="comment">//编码</span></span><br><span class="line">    .setSleepTime(<span class="number">1</span>)<span class="comment">//抓取间隔时间</span></span><br><span class="line">    .setTimeOut(<span class="number">1000</span>*<span class="number">10</span>)<span class="comment">//超时时间</span></span><br><span class="line">    .setRetrySleepTime(<span class="number">3000</span>)<span class="comment">//重试时间</span></span><br><span class="line">    .setRetryTimes(<span class="number">3</span>);<span class="comment">//重试次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> site;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>站点本身的一些配置信息，例如编码、HTTP头、超时时间、重试策略等、代理等，都可以通过设置Site对象来进行配置。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">setCharset(String)</td><td>设置编码</td><td>site.setCharset(“utf-8”)</td></tr><tr><td align="left">setUserAgent(String)</td><td>设置UserAgent</td><td>site.setUserAgent(“Spider”)</td></tr><tr><td align="left">setTimeOut(int)</td><td>设置超时时间，  单位是毫秒</td><td>site.setTimeOut(3000)</td></tr><tr><td align="left">setRetryTimes(int)</td><td>设置重试次数</td><td>site.setRetryTimes(3)</td></tr><tr><td align="left">setCycleRetryTimes(int)</td><td>设置循环重试次数</td><td>site.setCycleRetryTimes(3)</td></tr><tr><td align="left">addCookie(String,String)</td><td>添加一条cookie</td><td>site.addCookie(“dotcomt_user”,”code4craft”)</td></tr><tr><td align="left">setDomain(String)</td><td>设置域名，需设置域名后，addCookie才可生效</td><td>site.setDomain(“github.com”)</td></tr><tr><td align="left">addHeader(String,String)</td><td>添加一条addHeader</td><td>site.addHeader(“Referer”,”<a href="https://github.com/" target="_blank" rel="noopener">https://github.com</a>“)</td></tr><tr><td align="left">setHttpProxy(HttpHost)</td><td>设置Http代理</td><td>site.setHttpProxy(new  HttpHost(“127.0.0.1”,8080))</td></tr></tbody></table><h1 id="3-爬虫分类"><a href="#3-爬虫分类" class="headerlink" title="3.    爬虫分类"></a>3.    爬虫分类</h1><p>网络爬虫按照系统结构和实现技术，大致可以分为以下几种类型：通用网络爬虫、聚焦网络爬虫、增量式网络爬虫、深层网络爬虫。 实际的网络爬虫系统通常是几种爬虫技术相结合实现的</p><h2 id="3-1-通用网络爬虫"><a href="#3-1-通用网络爬虫" class="headerlink" title="3.1    通用网络爬虫"></a>3.1    通用网络爬虫</h2><p>通用网络爬虫又称全网爬虫（Scalable Web Crawler），爬行对象从一些种子 URL 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p><p>这类网络爬虫的爬行范围和数量巨大，对于爬行速度和存储空间要求较高，对于爬行页面的顺序要求相对较低，同时由于待刷新的页面太多，通常采用并行工作方式，但需要较长时间才能刷新一次页面。</p><p><strong>简单的说就是互联网上抓取所有数据。</strong></p><h2 id="3-2-聚焦网络爬虫"><a href="#3-2-聚焦网络爬虫" class="headerlink" title="3.2    聚焦网络爬虫"></a>3.2    聚焦网络爬虫</h2><p>聚焦网络爬虫（Focused Crawler），又称主题网络爬虫（Topical Crawler），是指选择性地爬行那些与预先定义好的主题相关页面的网络爬虫。</p><p>和通用网络爬虫相比，聚焦爬虫只需要爬行与主题相关的页面，极大地节省了硬件和网络资源，保存的页面也由于数量少而更新快，还可以很好地满足一些特定人群对特定领域信息的需求 。</p><p><strong>简单的说就是互联网上只抓取某一种数据。</strong></p><h2 id="3-3-增量式网络爬虫"><a href="#3-3-增量式网络爬虫" class="headerlink" title="3.3    增量式网络爬虫"></a>3.3    增量式网络爬虫</h2><p>增量式网络爬虫（Incremental Web Crawler）是 指 对 已 下 载 网 页 采 取 增量式更新和只爬行新产生的或者已经发生变化网页的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p><p>和周期性爬行和刷新页面的网络爬虫相比，增量式爬虫只会在需要的时候爬行新产生或发生更新的页面 ，并不重新下载没有发生变化的页面，可有效减少数据下载量，及时更新已爬行的网页，减小时间和空间上的耗费，但是增加了爬行算法的复杂度和实现难度。</p><p><strong>简单的说就是互联网上只抓取刚刚更新的数据。</strong></p><h2 id="3-4-Deep-Web-爬虫"><a href="#3-4-Deep-Web-爬虫" class="headerlink" title="3.4    Deep Web 爬虫"></a>3.4    Deep Web 爬虫</h2><p>Web 页面按存在方式可以分为表层网页（Surface Web）和深层网页（Deep Web，也称 Invisible Web Pages 或 Hidden Web）。 </p><p>表层网页是指传统搜索引擎可以索引的页面，以超链接可以到达的静态网页为主构成的 Web 页面。</p><p><strong>Deep Web 是那些大部分内容不能通过静态链接获取的、隐藏在搜索表单后的，只有用户提交一些关键词才能获得的 Web 页面。</strong></p><h1 id="4-案例开发分析"><a href="#4-案例开发分析" class="headerlink" title="4.    案例开发分析"></a>4.    案例开发分析</h1><p>我们已经学完了WebMagic的基本使用方法，现在准备使用WebMagic实现爬取数据的功能。这里是一个比较完整的实现。</p><p>在这里我们实现的是聚焦网络爬虫，只爬取招聘的相关数据。</p><h2 id="4-1-业务分析"><a href="#4-1-业务分析" class="headerlink" title="4.1    业务分析"></a>4.1    业务分析</h2><p>今天要实现的是爬取<a href="https://www.51job.com/上的招聘信息。只爬取“计算机软件”和“互联网电子商务”两个行业的信息。" target="_blank" rel="noopener">https://www.51job.com/上的招聘信息。只爬取“计算机软件”和“互联网电子商务”两个行业的信息。</a></p><p>首先访问页面并搜索两个行业。结果如下</p><p><img src="https://img-blog.csdnimg.cn/20201003134348360.png" alt="image-20201003123904740"></p><p>点击职位详情页，我们分析发现详情页还有一些数据需要抓取：</p><p>职位、公司名称、工作地点、薪资、发布时间、职位信息、公司联系方式、公司信息</p><p><img src="https://img-blog.csdnimg.cn/20201003134408578.png" alt="image-20201003123958691"></p><p><img src="https://img-blog.csdnimg.cn/20201003134423654.png" alt="image-20201003124005488"></p><h2 id="4-2-数据库表"><a href="#4-2-数据库表" class="headerlink" title="4.2    数据库表"></a>4.2    数据库表</h2><p>根据以上信息，设计数据库表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;job_info&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,</span><br><span class="line">    &#96;company_name&#96; varchar(100) DEFAULT NULL COMMENT &#39;公司名称&#39;,</span><br><span class="line">    &#96;company_addr&#96; varchar(200) DEFAULT NULL COMMENT &#39;公司联系方式&#39;,</span><br><span class="line">    &#96;company_info&#96; text COMMENT &#39;公司信息&#39;,</span><br><span class="line">    &#96;job_name&#96; varchar(100) DEFAULT NULL COMMENT &#39;职位名称&#39;,</span><br><span class="line">    &#96;job_addr&#96; varchar(50) DEFAULT NULL COMMENT &#39;工作地点&#39;,</span><br><span class="line">    &#96;job_info&#96; text COMMENT &#39;职位信息&#39;,</span><br><span class="line">    &#96;salary_min&#96; int(10) DEFAULT NULL COMMENT &#39;薪资范围，最小&#39;,</span><br><span class="line">    &#96;salary_max&#96; int(10) DEFAULT NULL COMMENT &#39;薪资范围，最大&#39;,</span><br><span class="line">    &#96;url&#96; varchar(150) DEFAULT NULL COMMENT &#39;招聘信息详情页&#39;,</span><br><span class="line">    &#96;time&#96; varchar(10) DEFAULT NULL COMMENT &#39;职位最近发布时间&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;招聘信息&#39;;</span><br></pre></td></tr></table></figure><h2 id="4-3-实现流程"><a href="#4-3-实现流程" class="headerlink" title="4.3    实现流程"></a>4.3    实现流程</h2><p>我们需要解析职位列表页，获取职位的详情页，再解析页面获取数据。</p><p>获取url地址的流程如下</p><p><img src="https://img-blog.csdnimg.cn/2020100313444433.png" alt="image-20201003124220603"></p><p>但是在这里有个问题：在解析页面的时候，很可能会解析出相同的url地址(例如商品标题和商品图片超链接，而且url一样)，如果不进行处理，同样的url会解析处理多次，浪费资源。所以我们需要有一个url去重的功能</p><h3 id="4-3-1-Scheduler组件"><a href="#4-3-1-Scheduler组件" class="headerlink" title="4.3.1    Scheduler组件"></a>4.3.1    Scheduler组件</h3><p>WebMagic提供了Scheduler可以帮助我们解决以上问题。</p><p>Scheduler是WebMagic中进行URL管理的组件。一般来说，Scheduler包括两个作用：</p><ul><li>对待抓取的URL队列进行管理。</li><li>对已抓取的URL进行去重。</li></ul><p>WebMagic内置了几个常用的Scheduler。如果你只是在本地执行规模比较小的爬虫，那么基本无需定制Scheduler，但是了解一下已经提供的几个Scheduler还是有意义的。</p><table><thead><tr><th><strong>类</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>DuplicateRemovedScheduler</td><td>抽象基类，提供一些模板方法</td><td>继承它可以实现自己的功能</td></tr><tr><td>QueueScheduler</td><td>使用内存队列保存待抓取URL</td><td></td></tr><tr><td>PriorityScheduler</td><td>使用带有优先级的内存队列保存待抓取URL</td><td>耗费内存较QueueScheduler更大，但是当设置了request.priority之后，只能使用PriorityScheduler才可使优先级生效</td></tr><tr><td>FileCacheQueueScheduler</td><td>使用文件保存抓取URL，可以在关闭程序并下次启动时，从之前抓取到的URL继续抓取</td><td>需指定路径，会建立.urls.txt和.cursor.txt两个文件</td></tr><tr><td>RedisScheduler</td><td>使用Redis保存抓取队列，可进行多台机器同时合作抓取</td><td>需要安装并启动redis</td></tr></tbody></table><p>去重部分被单独抽象成了一个接口：DuplicateRemover，从而可以为同一个Scheduler选择不同的去重方式，以适应不同的需要，目前提供了两种去重方式。</p><table><thead><tr><th><strong>类</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>HashSetDuplicateRemover</td><td>使用HashSet来进行去重，占用内存较大</td></tr><tr><td>BloomFilterDuplicateRemover</td><td>使用BloomFilter来进行去重，占用内存较小，但是可能漏抓页面</td></tr></tbody></table><p>RedisScheduler是使用Redis的set进行去重，其他的Scheduler默认都使用HashSetDuplicateRemover来进行去重。</p><p>如果要使用BloomFilter，必须要加入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--WebMagic对布隆过滤器的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改代码，添加布隆过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        <span class="comment">//初始访问url地址</span></span><br><span class="line">        .addUrl(<span class="string">"https://www.jd.com/moreSubject.aspx"</span>)</span><br><span class="line">        .addPipeline(<span class="keyword">new</span> FilePipeline(<span class="string">"D:/webmagic/"</span>))</span><br><span class="line">        .setScheduler(<span class="keyword">new</span> QueueScheduler().setDuplicateRemover(<span class="keyword">new</span> BloomFilterDuplicateRemover(<span class="number">10000000</span>)));<span class="comment">//设置布隆去重过滤器，指定最多对1000万数据进行去重操作</span></span><br><span class="line">    .thread(<span class="number">5</span>)<span class="comment">//设置线程数</span></span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-三种去重方式"><a href="#4-3-2-三种去重方式" class="headerlink" title="4.3.2    三种去重方式"></a>4.3.2    三种去重方式</h3><p>去重就有三种实现方式，那有什么不同呢？</p><ul><li><p><strong>HashSet</strong></p><p>使用java中的HashSet不能重复的特点去重。优点是容易理解。使用方便。</p><p>缺点：占用内存大，性能较低。</p></li><li><p><strong>Redis去重</strong></p><p>使用Redis的set进行去重。优点是速度快（Redis本身速度就很快），而且去重不会占用爬虫服务器的资源，可以处理更大数据量的数据爬取。</p><p>缺点：需要准备Redis服务器，增加开发和使用成本。</p></li><li><p><strong>布隆过滤器（BloomFilter）</strong></p><p>使用布隆过滤器也可以实现去重。优点是占用的内存要比使用HashSet要小的多，也适合大量数据的去重操作。</p><p>缺点：有误判的可能。没有重复可能会判定重复，但是重复数据一定会判定重复。</p></li></ul><p>布隆过滤器 (Bloom Filter)是由Burton Howard Bloom于1970年提出，它是一种space efficient的概率型数据结构，用于判断一个元素是否在集合中。在垃圾邮件过滤的黑白名单方法、爬虫(Crawler)的网址判重模块中等等经常被用到。</p><p>哈希表也能用于判断元素是否在集合中，但是布隆过滤器只需要哈希表的1/8或1/4的空间复杂度就能完成同样的问题。布隆过滤器可以插入元素，但不可以删除已有元素。其中的元素越多，误报率越大，但是漏报是不可能的。</p><p><strong>原理：</strong></p><p>布隆过滤器需要的是一个位数组(和位图类似)和K个映射函数(和Hash表类似)，在初始状态时，对于长度为m的位数组array，它的所有位被置0。</p><p><img src="https://img-blog.csdnimg.cn/20201003134500977.png" alt="image-20201003125911966"></p><p>对于有n个元素的集合S={S1,S2…Sn},通过k个映射函数{f1,f2,……fk}，将集合S中的每个元素Sj(1&lt;=j&lt;=n)映射为K个值{g1,g2…gk}，然后再将位数组array中相对应的array[g1],array[g2]……array[gk]置为1：</p><p><img src="https://img-blog.csdnimg.cn/20201003134516105.png" alt="image-20201003125925362"></p><p>如果要查找某个元素item是否在S中，则通过映射函数{f1,f2,…fk}得到k个值{g1,g2…gk}，然后再判断array[g1],array[g2]…array[gk]是否都为1，若全为1，则item在S中，否则item不在S中。</p><p>布隆过滤器会造成一定的误判，因为集合中的若干个元素通过映射之后得到的数值恰巧包括g1,g2,…gk，在这种情况下可能会造成误判，但是概率很小。</p><h1 id="5-案例实现"><a href="#5-案例实现" class="headerlink" title="5.    案例实现"></a>5.    案例实现</h1><h2 id="5-1-开发准备"><a href="#5-1-开发准备" class="headerlink" title="5.1    开发准备"></a>5.1    开发准备</h2><h3 id="5-1-1-创建工程"><a href="#5-1-1-创建工程" class="headerlink" title="5.1.1    创建工程"></a>5.1.1    创建工程</h3><p>创建Maven工程，并加入依赖。pom.xml为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>crawler-job<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringData Jpa--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySQL连接包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--WebMagic核心包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--WebMagic扩展--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--WebMagic对布隆过滤器的支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-2-加入配置文件"><a href="#5-1-2-加入配置文件" class="headerlink" title="5.1.2    加入配置文件"></a>5.1.2    加入配置文件</h3><p>添加application.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/crawler</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JPA Configuration:</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><h3 id="5-1-3-编写Pojo"><a href="#5-1-3-编写Pojo" class="headerlink" title="5.1.3    编写Pojo"></a>5.1.3    编写Pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> String companyAddr;</span><br><span class="line">    <span class="keyword">private</span> String companyInfo;</span><br><span class="line">    <span class="keyword">private</span> String jobName;</span><br><span class="line">    <span class="keyword">private</span> String jobAddr;</span><br><span class="line">    <span class="keyword">private</span> String jobInfo;</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMin;</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMax;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//get/set/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-4-编写Dao"><a href="#5-1-4-编写Dao" class="headerlink" title="5.1.4    编写Dao"></a>5.1.4    编写Dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息持久层接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobInfoDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">JobInfo</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-5-编写Service"><a href="#5-1-5-编写Service" class="headerlink" title="5.1.5    编写Service"></a>5.1.5    编写Service</h3><p>编写Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存工作信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfo jobInfo)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询工作信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;JobInfo&gt; <span class="title">findJobInfo</span><span class="params">(JobInfo jobInfo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息业务实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">JobInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoDao jobInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfo jobInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据url和发布时间查询数据</span></span><br><span class="line">        JobInfo param = <span class="keyword">new</span> JobInfo();</span><br><span class="line">        param.setUrl(jobInfo.getUrl());</span><br><span class="line">        param.setTime(jobInfo.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        List&lt;JobInfo&gt; list = <span class="keyword">this</span>.findJobInfo(param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断查询结果是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果查询结果为空，表示招聘信息数据不存在，或者已经更新了，需要新增或者更新数据库</span></span><br><span class="line">            <span class="keyword">this</span>.jobInfoDao.saveAndFlush(jobInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;JobInfo&gt; <span class="title">findJobInfo</span><span class="params">(JobInfo jobInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        Example example = Example.of(jobInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        List list = <span class="keyword">this</span>.jobInfoDao.findAll(example);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-6-编写引导类"><a href="#5-1-6-编写引导类" class="headerlink" title="5.1.6    编写引导类"></a>5.1.6    编写引导类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-功能实现"><a href="#5-2-功能实现" class="headerlink" title="5.2    功能实现"></a>5.2    功能实现</h2><h3 id="5-2-1-编写url解析功能"><a href="#5-2-1-编写url解析功能" class="headerlink" title="5.2.1    编写url解析功能"></a>5.2.1    编写url解析功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 招聘信息解析</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">"https://search.51job.com/list/060000,000000,0000,32%252c01,9,99,Java,2,1.html?lang=c&amp;postchannel=0000&amp;workyear=03&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare="</span>;</span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">            .setCharset(<span class="string">"GBK"</span>)<span class="comment">//设置编码</span></span><br><span class="line">            .setTimeOut(<span class="number">10</span> * <span class="number">1000</span>)<span class="comment">//设置超时时间</span></span><br><span class="line">            .setRetrySleepTime(<span class="number">3000</span>)<span class="comment">//设置重试的间隔时间</span></span><br><span class="line">            .setRetryTimes(<span class="number">3</span>);<span class="comment">//设置重试的次数</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringDataPipeline springDataPipeline;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page page</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//解析页面，获取招聘信息详情的url地址</span></span><br><span class="line">        List&lt;Selectable&gt; list = page.getHtml().css(<span class="string">"div.j_joblist div.e"</span>).nodes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断获取到的集合是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果为空，表示这是招聘详情页,解析页面，获取招聘详情信息，保存数据</span></span><br><span class="line">            <span class="keyword">this</span>.saveJobInfo(page);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不为空，表示这是列表页,解析出详情页的url地址，放到任务队列中</span></span><br><span class="line">            <span class="keyword">for</span> (Selectable selectable : list) &#123;</span><br><span class="line">                <span class="comment">//获取url地址</span></span><br><span class="line">                String jobInfoUrl = selectable.links().toString();</span><br><span class="line">                <span class="comment">//把获取到的url地址放到任务队列中</span></span><br><span class="line">                page.addTargetRequest(jobInfoUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下一页的url</span></span><br><span class="line">        String bkUrl = page.getHtml().css(<span class="string">"div.p_in li.bk"</span>).nodes().get(<span class="number">1</span>).links().toString();</span><br><span class="line">        <span class="comment">//把url放到任务队列中</span></span><br><span class="line">        page.addTargetRequest(bkUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initialDelay当任务启动后，等等多久执行方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * fixedDelay每个多久执行方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(initialDelay = <span class="number">1000</span>, fixedDelay = <span class="number">100</span> * <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">                .addUrl(url)</span><br><span class="line">                .setScheduler(<span class="keyword">new</span> QueueScheduler().setDuplicateRemover(<span class="keyword">new</span> BloomFilterDuplicateRemover(<span class="number">100000</span>)))</span><br><span class="line">                .thread(<span class="number">10</span>)</span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-编写页面解析功能"><a href="#5-2-2-编写页面解析功能" class="headerlink" title="5.2.2    编写页面解析功能"></a>5.2.2    编写页面解析功能</h3><p>薪水的计算工具类MathSalary</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算薪水工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathSalary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取薪水范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salaryStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] getSalary(String salaryStr) &#123;</span><br><span class="line">        <span class="comment">//声明存放薪水范围的数组</span></span><br><span class="line">        Integer[] salary = <span class="keyword">new</span> Integer[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//"500/天"</span></span><br><span class="line">        <span class="comment">//0.8-1.2万/月</span></span><br><span class="line">        <span class="comment">//5-8千/月</span></span><br><span class="line">        <span class="comment">//5-6万/年</span></span><br><span class="line">        String date = salaryStr.substring(salaryStr.length() - <span class="number">1</span>, salaryStr.length());</span><br><span class="line">        <span class="comment">//如果是按天，则直接乘以240进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"月"</span>.equals(date) &amp;&amp; !<span class="string">"年"</span>.equals(date)) &#123;</span><br><span class="line">            salaryStr = salaryStr.substring(<span class="number">0</span>, salaryStr.length() - <span class="number">2</span>);</span><br><span class="line">            salary[<span class="number">0</span>] = salary[<span class="number">1</span>] = str2Num(salaryStr, <span class="number">240</span>);</span><br><span class="line">            <span class="keyword">return</span> salary;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String unit = salaryStr.substring(salaryStr.length() - <span class="number">3</span>, salaryStr.length() - <span class="number">2</span>);</span><br><span class="line">        String[] salarys = salaryStr.substring(<span class="number">0</span>, salaryStr.length() - <span class="number">3</span>).split(<span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        salary[<span class="number">0</span>] = mathSalary(date, unit, salarys[<span class="number">0</span>]);</span><br><span class="line">        salary[<span class="number">1</span>] = mathSalary(date, unit, salarys[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据条件计算薪水</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title">mathSalary</span><span class="params">(String date, String unit, String salaryStr)</span> </span>&#123;</span><br><span class="line">        Integer salary = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断单位是否是万</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"万"</span>.equals(unit)) &#123;</span><br><span class="line">            <span class="comment">//如果是万，薪水乘以10000</span></span><br><span class="line">            salary = str2Num(salaryStr, <span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则乘以1000</span></span><br><span class="line">            salary = str2Num(salaryStr, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断时间是否是月</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"月"</span>.equals(date)) &#123;</span><br><span class="line">            <span class="comment">//如果是月，薪水乘以12</span></span><br><span class="line">            salary = str2Num(salary.toString(), <span class="number">12</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">str2Num</span><span class="params">(String salaryStr, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把字符串转为小数，必须用Number接受，否则会有精度丢失的问题</span></span><br><span class="line">            Number result = Float.parseFloat(salaryStr) * num;</span><br><span class="line">            <span class="keyword">return</span> result.intValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析页面，获取招聘详情信息，保存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析页面，获取招聘详情信息，保存数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveJobInfo</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建招聘详情对象</span></span><br><span class="line">    JobInfo jobInfo = <span class="keyword">new</span> JobInfo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析页面</span></span><br><span class="line">    Html html = page.getHtml();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据，封装到对象中</span></span><br><span class="line">    jobInfo.setCompanyName(html.css(<span class="string">"div.cn p.cname a"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setCompanyAddr(Jsoup.parse(html.css(<span class="string">"div.bmsg"</span>).nodes().get(<span class="number">1</span>).toString()).text());</span><br><span class="line">    jobInfo.setCompanyInfo(Jsoup.parse(html.css(<span class="string">"div.tmsg"</span>).toString()).text());</span><br><span class="line">    jobInfo.setJobName(html.css(<span class="string">"div.cn h1"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setJobAddr(html.css(<span class="string">"div.cn span.lname"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setJobInfo(Jsoup.parse(html.css(<span class="string">"div.job_msg"</span>).toString()).text());</span><br><span class="line">    jobInfo.setUrl(page.getUrl().toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取薪资</span></span><br><span class="line">    Integer[] salary = MathSalary.getSalary(html.css(<span class="string">"div.cn strong"</span>, <span class="string">"text"</span>).toString());</span><br><span class="line">    jobInfo.setSalaryMin(salary[<span class="number">0</span>]);</span><br><span class="line">    jobInfo.setSalaryMax(salary[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取发布时间</span></span><br><span class="line">    String time = Jsoup.parse(html.css(<span class="string">"div.t1 span"</span>).regex(<span class="string">".*发布"</span>).toString()).text();</span><br><span class="line">    jobInfo.setTime(time.substring(<span class="number">0</span>, time.length() - <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把结果保存起来</span></span><br><span class="line">    page.putField(<span class="string">"jobInfo"</span>, jobInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-使用和定制Pipeline"><a href="#5-3-使用和定制Pipeline" class="headerlink" title="5.3    使用和定制Pipeline"></a>5.3    使用和定制Pipeline</h2><p>在WebMagic中，Pileline是抽取结束后，进行处理的部分，它主要用于抽取结果的保存，也可以定制Pileline可以实现一些通用的功能。在这里我们会定制Pipeline实现数据导入到数据库中</p><h3 id="5-3-1-Pipeline输出"><a href="#5-3-1-Pipeline输出" class="headerlink" title="5.3.1    Pipeline输出"></a>5.3.1    Pipeline输出</h3><p>Pipeline的接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ResultItems保存了抽取结果，它是一个Map结构，</span></span><br><span class="line">    <span class="comment">//在page.putField(key,value)中保存的数据，</span></span><br><span class="line">    <span class="comment">//可以通过ResultItems.get(key)获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ResultItems resultItems, Task task)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Pipeline其实就是将PageProcessor抽取的结果，继续进行了处理的，其实在Pipeline中完成的功能，你基本上也可以直接在PageProcessor实现，那么为什么会有Pipeline？有几个原因：</p><ul><li><p>为了模块分离</p><p>“页面抽取”和“后处理、持久化”是爬虫的两个阶段，将其分离开来，一个是代码结构比较清晰，另一个是以后也可能将其处理过程分开，分开在独立的线程以至于不同的机器执行。</p></li><li><p>Pipeline的功能比较固定，更容易做成通用组件</p><p>每个页面的抽取方式千变万化，但是后续处理方式则比较固定，例如保存到文件、保存到数据库这种操作，这些对所有页面都是通用的。</p></li></ul><p>在WebMagic里，一个Spider可以有多个Pipeline，使用Spider.addPipeline()即可增加一个Pipeline。这些Pipeline都会得到处理，例如可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spider.addPipeline(<span class="keyword">new</span> ConsolePipeline()).addPipeline(<span class="keyword">new</span> FilePipeline())</span><br></pre></td></tr></table></figure><p>实现输出结果到控制台，并且保存到文件的目标。</p><h3 id="5-3-2-已有的Pipeline"><a href="#5-3-2-已有的Pipeline" class="headerlink" title="5.3.2    已有的Pipeline"></a>5.3.2    已有的Pipeline</h3><p>WebMagic中就已经提供了控制台输出、保存到文件、保存为JSON格式的文件几种通用的Pipeline。</p><table><thead><tr><th><strong>类</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>ConsolePipeline</td><td>输出结果到控制台</td><td>抽取结果需要实现toString方法</td></tr><tr><td>FilePipeline</td><td>保存结果到文件</td><td>抽取结果需要实现toString方法</td></tr><tr><td>JsonFilePipeline</td><td>JSON格式保存结果到文件</td><td></td></tr><tr><td>ConsolePageModelPipeline</td><td>(注解模式)输出结果到控制台</td><td></td></tr><tr><td>FilePageModelPipeline</td><td>(注解模式)保存结果到文件</td><td></td></tr><tr><td>JsonFilePageModelPipeline</td><td>(注解模式)JSON格式保存结果到文件</td><td>想持久化的字段需要有getter方法</td></tr></tbody></table><h3 id="5-3-3-案例自定义Pipeline导入数据"><a href="#5-3-3-案例自定义Pipeline导入数据" class="headerlink" title="5.3.3    案例自定义Pipeline导入数据"></a>5.3.3    案例自定义Pipeline导入数据</h3><p>自定义SpringDataPipeline</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Pipeline导入数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataPipeline</span> <span class="keyword">implements</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ResultItems resultItems, Task task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取封装好的招聘详情对象</span></span><br><span class="line">        JobInfo jobInfo = resultItems.get(<span class="string">"jobInfo"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断数据是否不为空</span></span><br><span class="line">        <span class="keyword">if</span> (jobInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果不为空把数据保存到数据库中</span></span><br><span class="line">            <span class="keyword">this</span>.jobInfoService.save(jobInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JobProcessor中修改process()启动的逻辑，添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SpringDataPipeline springDataPipeline;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialDelay当任务启动后，等等多久执行方法</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * fixedDelay每个多久执行方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scheduled</span>(initialDelay = <span class="number">1000</span>, fixedDelay = <span class="number">100</span> * <span class="number">1000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">        .addUrl(url)</span><br><span class="line">        .setScheduler(<span class="keyword">new</span> QueueScheduler().setDuplicateRemover(<span class="keyword">new</span> BloomFilterDuplicateRemover(<span class="number">100000</span>)))</span><br><span class="line">        .thread(<span class="number">10</span>)</span><br><span class="line">        .addPipeline(<span class="keyword">this</span>.springDataPipeline)</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-WebMagic介绍&quot;&gt;&lt;a href=&quot;#1-WebMagic介绍&quot; class=&quot;headerlink&quot; title=&quot;1.    WebMagic介绍&quot;&gt;&lt;/a&gt;1.    WebMagic介绍&lt;/h1&gt;&lt;p&gt;昨天完成了爬虫的入门的学习，是一个最基本的爬虫案例，今天我们要学习一款爬虫框架的使用就是WebMagic。其底层用到了我们上一天课程所使用的HttpClient和Jsoup，让我们能够更方便的开发爬虫。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="网络爬虫" scheme="https://wgy1993.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫(一)</title>
    <link href="https://wgy1993.gitee.io/archives/ceeb4255.html"/>
    <id>https://wgy1993.gitee.io/archives/ceeb4255.html</id>
    <published>2020-10-02T05:04:34.000Z</published>
    <updated>2020-10-02T05:14:00.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-网络爬虫"><a href="#1-网络爬虫" class="headerlink" title="1.    网络爬虫"></a>1.    网络爬虫</h1><h2 id="1-1-网络爬虫介绍"><a href="#1-1-网络爬虫介绍" class="headerlink" title="1.1    网络爬虫介绍"></a>1.1    网络爬虫介绍</h2><p>在大数据时代，信息的采集是一项重要的工作，而互联网中的数据是海量的，如果单纯靠人力进行信息采集，不仅低效繁琐，搜集的成本也会提高。如何自动高效地获取互联网中我们感兴趣的信息并为我们所用是一个重要的问题，而爬虫技术就是为了解决这些问题而生的。</p><a id="more"></a><p>网络爬虫（Web crawler）也叫做网络机器人，可以代替人们自动地在互联网中进行数据信息的采集与整理。它<strong>是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本</strong>，可以自动采集所有其能够访问到的页面内容，以获取相关数据。</p><p>从功能上来讲，爬虫一般分为数据采集，处理，储存三个部分。爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列,直到满足系统的一定停止条件。</p><h2 id="1-2-为什么学网络爬虫"><a href="#1-2-为什么学网络爬虫" class="headerlink" title="1.2    为什么学网络爬虫"></a>1.2    为什么学网络爬虫</h2><p>我们初步认识了网络爬虫，但是为什么要学习网络爬虫呢？只有清晰地知道我们的学习目的，才能够更好地学习这一项知识。在此，总结了4种常见的学习爬虫的原因：</p><ul><li><p>可以实现搜索引擎</p><p>我们学会了爬虫编写之后，就可以利用爬虫自动地采集互联网中的信息，采集回来后进行相应的存储或处理，在需要检索某些信息的时候，只需在采集回来的信息中进行检索，即实现了私人的搜索引擎。</p></li><li><p>大数据时代，可以让我们获取更多的数据源。</p><p>在进行大数据分析或者进行数据挖掘的时候，需要有数据源进行分析。我们可以从某些提供数据统计的网站获得，也可以从某些文献或内部资料中获得，但是这些获得数据的方式，有时很难满足我们对数据的需求，而手动从互联网中去寻找这些数据，则耗费的精力过大。此时就可以利用爬虫技术，自动地从互联网中获取我们感兴趣的数据内容，并将这些数据内容爬取回来，作为我们的数据源，再进行更深层次的数据分析，并获得更多有价值的信息。</p></li><li><p>可以更好地进行搜索引擎优化（SEO）。</p><p>对于很多SEO从业者来说，为了更好的完成工作，那么就必须要对搜索引擎的工作原理非常清楚，同时也需要掌握搜索引擎爬虫的工作原理。而学习爬虫，可以更深层次地理解搜索引擎爬虫的工作原理，这样在进行搜索引擎优化时，才能知己知彼，百战不殆。</p></li><li><p>有利于就业。</p><p>从就业来说，爬虫工程师方向是不错的选择之一，因为目前爬虫工程师的需求越来越大，而能够胜任这方面岗位的人员较少，所以属于一个比较紧缺的职业方向，并且随着大数据时代和人工智能的来临，爬虫技术的应用将越来越广泛，在未来会拥有很好的发展空间。</p></li></ul><h2 id="2-1-爬虫入门程序"><a href="#2-1-爬虫入门程序" class="headerlink" title="2.1    爬虫入门程序"></a>2.1    爬虫入门程序</h2><h3 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1    环境准备"></a>2.1.1    环境准备</h3><ul><li>JDK1.8</li><li>IntelliJ IDEA</li><li>IDEA自带的Maven</li></ul><h3 id="2-1-2-创建工程添加依赖"><a href="#2-1-2-创建工程添加依赖" class="headerlink" title="2.1.2    创建工程添加依赖"></a>2.1.2    创建工程添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HttpClient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-加入log4j-properties"><a href="#2-1-3-加入log4j-properties" class="headerlink" title="2.1.3    加入log4j.properties"></a>2.1.3    加入log4j.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="meta">log4j.logger.com.wgy</span> = <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-编写代码"><a href="#2-1-4-编写代码" class="headerlink" title="2.1.4    编写代码"></a>2.1.4    编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬虫入门程序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrawlerFirst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 打开浏览器,创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 输入网址,发起get请求创建HttpGet对象</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用User-Agent防止HttpClient发送http请求时403 Forbidden和安全拦截</span></span><br><span class="line">        <span class="comment">//String userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36";</span></span><br><span class="line">        <span class="comment">//httpGet.setHeader("User-Agent", userAgent);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.按回车，发起请求，返回响应，使用HttpClient对象发起请求</span></span><br><span class="line">        CloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 解析响应，获取数据</span></span><br><span class="line">        <span class="comment">//判断状态码是否是200</span></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            String content = EntityUtils.toString(entity, <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-HttpClient"><a href="#2-HttpClient" class="headerlink" title="2.    HttpClient"></a>2.    HttpClient</h1><p>网络爬虫就是用程序帮助我们访问网络上的资源，我们一直以来都是使用HTTP协议访问互联网的网页，网络爬虫需要编写程序，在这里使用同样的HTTP协议访问网页。</p><p>这里我们使用Java的HTTP协议客户端 HttpClient这个技术，来实现抓取网页数据。</p><h2 id="2-1-GET请求"><a href="#2-1-GET请求" class="headerlink" title="2.1    GET请求"></a>2.1    GET请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GET请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpGetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置url访问地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/20201002130058150.png" alt="image-20201002100913997"></p><h2 id="2-2-带参数的GET请求"><a href="#2-2-带参数的GET请求" class="headerlink" title="2.2    带参数的GET请求"></a>2.2    带参数的GET请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带参数的GET请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpGetParamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求地址是：http://yun.itheima.com/search?keys=Java</span></span><br><span class="line">        <span class="comment">//创建URIBuilder</span></span><br><span class="line">        URIBuilder uriBuilder = <span class="keyword">new</span> URIBuilder(<span class="string">"http://yun.itheima.com/search"</span>);</span><br><span class="line">        <span class="comment">//设置参数</span></span><br><span class="line">        uriBuilder.setParameter(<span class="string">"keys"</span>, <span class="string">"Java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置url访问地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"发起请求的信息："</span> + httpGet);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/20201002130152447.png" alt="image-20201002101034787"></p><h2 id="2-3-POST请求"><a href="#2-3-POST请求" class="headerlink" title="2.3    POST请求"></a>2.3    POST请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POST请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPostTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpPost对象，设置url访问地址</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/20201002130210340.png" alt="image-20201002101146636"></p><h2 id="2-4-带参数的POST请求"><a href="#2-4-带参数的POST请求" class="headerlink" title="2.4    带参数的POST请求"></a>2.4    带参数的POST请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带参数的POST请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPostParamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpPost对象，设置url访问地址</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"http://yun.itheima.com/search"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明List集合，封装表单中的参数</span></span><br><span class="line">        List&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求地址是：http://yun.itheima.com/search?keys=Java</span></span><br><span class="line">        params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"keys"</span>, <span class="string">"Java"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建表单的Entity对象,第一个参数就是封装好的表单数据，第二个参数就是编码</span></span><br><span class="line">        UrlEncodedFormEntity formEntity = <span class="keyword">new</span> UrlEncodedFormEntity(params, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置表单的Entity对象到Post请求中</span></span><br><span class="line">        httpPost.setEntity(formEntity);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果：</p><p><img src="https://img-blog.csdnimg.cn/2020100213023287.png" alt="image-20201002102830320"></p><h2 id="2-5-连接池"><a href="#2-5-连接池" class="headerlink" title="2.5    连接池"></a>2.5    连接池</h2><p>如果每次请求都要创建HttpClient，会有频繁创建和销毁的问题，可以使用连接池来解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpClient连接池</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientPoolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池管理器</span></span><br><span class="line">        PoolingHttpClientConnectionManager cm = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个主机的最大连接数</span></span><br><span class="line">        cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用连接池管理器发起请求</span></span><br><span class="line">        doGet(cm);</span><br><span class="line">        doGet(cm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(PoolingHttpClientConnectionManager cm)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不是每次创建新的HttpClient，而是从连接池中获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();</span><br><span class="line"></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//不能关闭HttpClient，由连接池管理HttpClient</span></span><br><span class="line">                <span class="comment">//httpClient.close();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-请求参数"><a href="#2-6-请求参数" class="headerlink" title="2.6    请求参数"></a>2.6    请求参数</h2><p>有时候因为网络，或者目标服务器的原因，请求需要更长的时间才能完成，我们需要自定义相关时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置url访问地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置请求信息</span></span><br><span class="line">        RequestConfig config = RequestConfig.custom().setConnectTimeout(<span class="number">1000</span>)   <span class="comment">//创建连接的最长时间，单位是毫秒</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">500</span>)   <span class="comment">//设置获取连接的最长时间，单位是毫秒</span></span><br><span class="line">                .setSocketTimeout(<span class="number">10</span> * <span class="number">1000</span>)      <span class="comment">//设置数据传输的最长时间，单位是毫秒</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给请求设置请求信息</span></span><br><span class="line">        httpGet.setConfig(config);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Jsoup"><a href="#3-Jsoup" class="headerlink" title="3.    Jsoup"></a>3.    Jsoup</h1><p>我们抓取到页面之后，还需要对页面进行解析。可以使用字符串处理工具解析页面，也可以使用正则表达式，但是这些方法都会带来很大的开发成本，所以我们需要使用一款专门解析html页面的技术。</p><h2 id="3-1-Jsoup介绍"><a href="#3-1-Jsoup介绍" class="headerlink" title="3.1    Jsoup介绍"></a>3.1    Jsoup介绍</h2><p>Jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><p>Jsoup的主要功能如下：</p><ul><li>从一个URL，文件或字符串中解析HTML；</li><li>使用DOM或CSS选择器来查找、取出数据；</li><li>可操作HTML元素、属性、文本；</li></ul><h2 id="3-2-Jsoup解析"><a href="#3-2-Jsoup解析" class="headerlink" title="3.2    Jsoup解析"></a>3.2    Jsoup解析</h2><p>Jsoup依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HttpClient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Jsoup--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-1-解析url"><a href="#3-2-1-解析url" class="headerlink" title="3.2.1    解析url"></a>3.2.1    解析url</h3><p>Jsoup可以直接输入url，它会发起请求并获取数据，封装为Document对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析url</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUrl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析url地址,第一个参数是访问的url，第二个参数是访问时候的超时时间</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> URL(<span class="string">"http://www.itcast.cn"</span>), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用标签选择器，获取title标签中的内容</span></span><br><span class="line">        String title = doc.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        System.out.println(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：虽然使用Jsoup可以替代HttpClient直接发起请求解析数据，但是往往不会这样用，因为实际的开发过程中，需要使用到多线程，连接池，代理等等方式，而jsoup对这些的支持并不是很好，所以我们一般把jsoup仅仅作为Html解析工具使用</p><h3 id="3-2-2-解析字符串"><a href="#3-2-2-解析字符串" class="headerlink" title="3.2.2    解析字符串"></a>3.2.2    解析字符串</h3><p>先准备以下html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>传智播客官网-一样的教育,不一样的品质<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"city_bj"</span>&gt;</span>北京中心<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fb:img</span> <span class="attr">src</span>=<span class="string">"/2018czgw/images/slogan.jpg"</span> <span class="attr">class</span>=<span class="string">"slogan"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city_in"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city_con"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"class_a class_b"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.itcast.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"s_name"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://sh.itcast.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"s_name"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://gz.itcast.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">abc</span>=<span class="string">"123"</span> <span class="attr">class</span>=<span class="string">"s_name"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Jsoup可以直接输入字符串，并封装为Document对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用工具类读取文件，获取字符串</span></span><br><span class="line">        String content = FileUtils.readFileToString(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析字符串</span></span><br><span class="line">        Document doc = Jsoup.parse(content);</span><br><span class="line"></span><br><span class="line">        String title = doc.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line"></span><br><span class="line">        System.out.println(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-解析文件"><a href="#3-2-3-解析文件" class="headerlink" title="3.2.3    解析文件"></a>3.2.3    解析文件</h3><p>Jsoup可以直接解析文件，并封装为Document对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析文件</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        String title = doc.getElementsByTag(<span class="string">"title"</span>).first().text();</span><br><span class="line"></span><br><span class="line">        System.out.println(title);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-使用dom方式遍历文档"><a href="#3-2-4-使用dom方式遍历文档" class="headerlink" title="3.2.4    使用dom方式遍历文档"></a>3.2.4    使用dom方式遍历文档</h3><h4 id="3-2-4-1-元素获取"><a href="#3-2-4-1-元素获取" class="headerlink" title="3.2.4.1    元素获取"></a>3.2.4.1    元素获取</h4><ul><li>根据id查询元素getElementById</li><li>根据标签获取元素getElementsByTag</li><li>根据class获取元素getElementsByClass</li><li>根据属性获取元素getElementsByAttribute</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDOM</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析文件，获取Document对象</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取元素</span></span><br><span class="line">        <span class="comment">//1.根据id查询元素getElementById</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementById("city_bj");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据标签获取元素getElementsByTag</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByTag("span").first();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据class获取元素getElementsByClass</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByClass("class_a class_b").first();</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByClass("class_a").first();</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByClass("class_b").first();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.根据属性获取元素getElementsByAttribute</span></span><br><span class="line">        <span class="comment">//Element element = doc.getElementsByAttribute("abc").first();</span></span><br><span class="line">        Element element = doc.getElementsByAttributeValue(<span class="string">"href"</span>, <span class="string">"http://sh.itcast.cn"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印元素的内容</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的元素内容是："</span> + element.text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-2-元素中获取数据"><a href="#3-2-4-2-元素中获取数据" class="headerlink" title="3.2.4.2    元素中获取数据"></a>3.2.4.2    元素中获取数据</h4><ul><li>从元素中获取id</li><li>从元素中获取className</li><li>从元素中获取属性的值attr</li><li>从元素中获取所有属性attributes</li><li>从元素中获取文本内容text</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素中获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析文件，获取Document</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id获取元素</span></span><br><span class="line">        Element element = doc.getElementById(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素中获取数据</span></span><br><span class="line">        <span class="comment">//1.从元素中获取id</span></span><br><span class="line">        str = element.id();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.从元素中获取className</span></span><br><span class="line">        str = element.className();</span><br><span class="line">        <span class="comment">//Set&lt;String&gt; classSet = element.classNames();</span></span><br><span class="line">        <span class="comment">//for (String s : classSet ) &#123;</span></span><br><span class="line">        <span class="comment">//    System.out.println(s);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.从元素中获取属性的值attr</span></span><br><span class="line">        <span class="comment">//str = element.attr("id");</span></span><br><span class="line">        str = element.attr(<span class="string">"class"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.从元素中获取所有属性attributes</span></span><br><span class="line">        Attributes attributes = element.attributes();</span><br><span class="line">        System.out.println(attributes.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.从元素中获取文本内容text</span></span><br><span class="line">        str = element.text();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印获取到的内容</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的数据是："</span> + str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-使用选择器语法查找元素"><a href="#3-2-5-使用选择器语法查找元素" class="headerlink" title="3.2.5    使用选择器语法查找元素"></a>3.2.5    使用选择器语法查找元素</h3><p>Jsoup elements对象支持类似于CSS (或jquery)的选择器语法，来实现非常强大和灵活的查找功能。这个select 方法在Document, Element,或Elements对象中都可以使用。且是上下文相关的，因此可实现指定元素的过滤，或者链式选择访问。</p><p>Select方法将返回一个Elements集合，并提供一组方法来抽取和处理结果。</p><h4 id="3-2-5-1-Selector选择器概述"><a href="#3-2-5-1-Selector选择器概述" class="headerlink" title="3.2.5.1    Selector选择器概述"></a>3.2.5.1    Selector选择器概述</h4><ul><li><strong>tagname</strong>: 通过标签查找元素，比如：span</li><li><strong>#id</strong>: 通过ID查找元素，比如：# city_bj</li><li><strong>.class</strong>: 通过class名称查找元素，比如：.class_a</li><li><strong>[attribute]</strong>: 利用属性查找元素，比如：[abc]</li><li><strong>[attr=value]</strong>: 利用属性值来查找元素，比如：[class=s_name]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Selector选择器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelector</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析html文件，获取Document对象</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//tagname: 通过标签查找元素，比如：span</span></span><br><span class="line">        Elements elements = doc.select(<span class="string">"span"</span>);</span><br><span class="line">        <span class="comment">//for (Element element : elements) &#123;</span></span><br><span class="line">        <span class="comment">//    System.out.println(element.text());</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//#id: 通过ID查找元素，比如：#city_bj</span></span><br><span class="line">        <span class="comment">//Element element = doc.select("#city_bj").first();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//.class: 通过class名称查找元素，比如：.class_a</span></span><br><span class="line">        <span class="comment">//Element element = doc.select(".class_a").first();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//[attribute]: 利用属性查找元素，比如：[abc]</span></span><br><span class="line">        Element element = doc.select(<span class="string">"[abc]"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[attr=value]: 利用属性值来查找元素，比如：[class=s_name]</span></span><br><span class="line">        Elements elements1 = doc.select(<span class="string">"[class=s_name]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element element1 : elements1) &#123;</span><br><span class="line">            System.out.println(element1.text());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        System.out.println(<span class="string">"获取到的结果是："</span> + element.text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-5-2-Selector选择器组合使用"><a href="#3-2-5-2-Selector选择器组合使用" class="headerlink" title="3.2.5.2    Selector选择器组合使用"></a>3.2.5.2    Selector选择器组合使用</h4><ul><li><strong>el#id</strong>: 元素+ID，比如： h3#city_bj</li><li><strong>el.class</strong>: 元素+class，比如： li.class_a</li><li><strong>el[attr]</strong>: 元素+属性名，比如： span[abc]</li><li><strong>任意组合</strong>: 比如：span[abc].s_name</li><li><strong>ancestor child</strong>: 查找某个元素下子元素，比如：.city_con li 查找”city_con”下的所有li</li><li><strong>parent &gt; child</strong>: 查找某个父元素下的直接子元素，比如：.city_con &gt; ul &gt; li 查找city_con第一级（直接子元素）的ul，再找所有ul下的第一级li</li><li><strong>parent &gt; *</strong>: 查找某个父元素下所有直接子元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsoup测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupFirstTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Selector选择器组合使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelector2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析html文件，获取Document对象</span></span><br><span class="line">        Document doc = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\test.html"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//el#id: 元素+ID，比如： h3#city_bj</span></span><br><span class="line">        Element element = doc.select(<span class="string">"h3#city_bj"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//el.class: 元素+class，比如： li.class_a</span></span><br><span class="line">        element = doc.select(<span class="string">"li.class_a"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//el[attr]: 元素+属性名，比如： span[abc]</span></span><br><span class="line">        element = doc.select(<span class="string">"span[abc]"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//任意组合: 比如：span[abc].s_name</span></span><br><span class="line">        element = doc.select(<span class="string">"span[abc].s_name"</span>).first();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ancestor child: 查找某个元素下子元素，比如：.city_con li 查找"city_con"下的所有li</span></span><br><span class="line">        Elements elements = doc.select(<span class="string">".city_con li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//parent &gt; child: 查找某个父元素下的直接子元素，比如：</span></span><br><span class="line">        <span class="comment">//.city_con &gt; ul &gt; li 查找city_con第一级（直接子元素）的ul，再找所有ul下的第一级li</span></span><br><span class="line">        elements = doc.select(<span class="string">".city_con &gt; ul &gt; li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//parent &gt; *: 查找某个父元素下所有直接子元素</span></span><br><span class="line">        elements = doc.select(<span class="string">".city_con &gt; ul &gt; *"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"获取到的内容是："</span> + element.text());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element element1 : elements) &#123;</span><br><span class="line">            System.out.println(<span class="string">"遍历的结果："</span> + element1.text());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-爬虫案例"><a href="#4-爬虫案例" class="headerlink" title="4.    爬虫案例"></a>4.    爬虫案例</h1><p>学习了HttpClient和Jsoup，就掌握了如何抓取数据和如何解析数据，接下来，我们做一个小练习，把京东的手机数据抓取下来。</p><p>主要目的是HttpClient和Jsoup的学习。</p><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1    需求分析"></a>4.1    需求分析</h2><p>首先访问京东，搜索手机，分析页面，我们抓取以下商品数据：商品图片、价格、标题、商品详情页</p><p><img src="https://img-blog.csdnimg.cn/20201002130304635.png" alt="image-20201002110636907"></p><h3 id="4-1-1-SPU和SKU"><a href="#4-1-1-SPU和SKU" class="headerlink" title="4.1.1    SPU和SKU"></a>4.1.1    SPU和SKU</h3><p>除了以上四个属性以外，我们发现上图中的苹果手机有四种产品，我们应该每一种都要抓取。那么这里就必须要了解spu和sku的概念</p><p>SPU = Standard Product Unit （标准产品单位）</p><p>SPU是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。通俗点讲，属性值、特性相同的商品就可以称为一个SPU。</p><p>例如上图中的苹果手机就是SPU，包括红色、深灰色、金色、银色</p><p>SKU=stock keping unit(库存量单位)</p><p>SKU即库存进出计量的单位， 可以是以件、盒、托盘等为单位。SKU是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管理模式来处理。在服装、鞋类商品中使用最多最普遍。</p><p>例如上图中的苹果手机有几个款式，红色苹果手机，就是一个sku</p><p>查看页面的源码也可以看出区别</p><p><img src="https://img-blog.csdnimg.cn/20201002130320403.png" alt="image-20201002110804078"></p><h2 id="4-2-开发准备"><a href="#4-2-开发准备" class="headerlink" title="4.2    开发准备"></a>4.2    开发准备</h2><h3 id="4-2-1-数据库表"><a href="#4-2-1-数据库表" class="headerlink" title="4.2.1    数据库表"></a>4.2.1    数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;jd_item&#96; (</span><br><span class="line">    &#96;id&#96; bigint(10) NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,</span><br><span class="line">    &#96;spu&#96; bigint(15) DEFAULT NULL COMMENT &#39;商品集合id&#39;,</span><br><span class="line">    &#96;sku&#96; bigint(15) DEFAULT NULL COMMENT &#39;商品最小品类单元id&#39;,</span><br><span class="line">    &#96;title&#96; varchar(100) DEFAULT NULL COMMENT &#39;商品标题&#39;,</span><br><span class="line">    &#96;price&#96; bigint(10) DEFAULT NULL COMMENT &#39;商品价格&#39;,</span><br><span class="line">    &#96;pic&#96; varchar(200) DEFAULT NULL COMMENT &#39;商品图片&#39;,</span><br><span class="line">    &#96;url&#96; varchar(200) DEFAULT NULL COMMENT &#39;商品详情地址&#39;,</span><br><span class="line">    &#96;created&#96; datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">    &#96;updated&#96; datetime DEFAULT NULL COMMENT &#39;更新时间&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">    KEY &#96;sku&#96; (&#96;sku&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;京东商品表&#39;;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-添加依赖"><a href="#4-2-2-添加依赖" class="headerlink" title="4.2.2    添加依赖"></a>4.2.2    添加依赖</h3><p>使用Spring Boot+Spring Data JPA和定时任务进行开发，需要创建Maven工程并添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>crawler-jd<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringData Jpa--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySQL连接包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- HttpClient --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Jsoup--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-添加配置文件"><a href="#4-2-3-添加配置文件" class="headerlink" title="4.2.3    添加配置文件"></a>4.2.3    添加配置文件</h3><p>加入application.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/crawler</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JPA Configuration:</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3    代码实现"></a>4.3    代码实现</h2><h3 id="4-3-1-编写pojo"><a href="#4-3-1-编写pojo" class="headerlink" title="4.3.1    编写pojo"></a>4.3.1    编写pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 京东商品实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"jd_item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标准产品单位（商品集合）</span></span><br><span class="line">    <span class="keyword">private</span> Long spu;</span><br><span class="line">    <span class="comment">//库存量单位（最小品类单元）</span></span><br><span class="line">    <span class="keyword">private</span> Long sku;</span><br><span class="line">    <span class="comment">//商品标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//商品价格</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="comment">//商品图片</span></span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="comment">//商品详情地址</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updated;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//get/set/toString...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-编写dao"><a href="#4-3-2-编写dao" class="headerlink" title="4.3.2    编写dao"></a>4.3.2    编写dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Item</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-编写Service"><a href="#4-3-3-编写Service" class="headerlink" title="4.3.3    编写Service"></a>4.3.3    编写Service</h3><p>ItemService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Item item)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findAll</span><span class="params">(Item item)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ItemServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemDao itemDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemDao.save(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findAll</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明查询条件</span></span><br><span class="line">        Example&lt;Item&gt; example = Example.of(item);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据查询条件进行查询数据</span></span><br><span class="line">        List&lt;Item&gt; list = <span class="keyword">this</span>.itemDao.findAll(example);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-编写引导类"><a href="#4-3-4-编写引导类" class="headerlink" title="4.3.4    编写引导类"></a>4.3.4    编写引导类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//使用定时任务，需要先开启定时任务，需要添加注解</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-封装HttpClient"><a href="#4-3-5-封装HttpClient" class="headerlink" title="4.3.5    封装HttpClient"></a>4.3.5    封装HttpClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpClient工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PoolingHttpClientConnectionManager cm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cm = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        <span class="keyword">this</span>.cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个主机的最大连接数</span></span><br><span class="line">        <span class="keyword">this</span>.cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据请求地址下载页面数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 页面数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGetHtml</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(<span class="keyword">this</span>.cm).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建httpGet请求对象，设置url地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用User-Agent防止HttpClient发送http请求时403 Forbidden和安全拦截</span></span><br><span class="line">        String userAgent = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36"</span>;</span><br><span class="line">        httpGet.setHeader(<span class="string">"User-Agent"</span>, userAgent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求信息</span></span><br><span class="line">        httpGet.setConfig(<span class="keyword">this</span>.getConfig());</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取响应</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应，返回结果</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//判断响应体Entity是否不为空，如果不为空就可以使用EntityUtils</span></span><br><span class="line">                <span class="keyword">if</span> (response.getEntity() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                    <span class="keyword">return</span> content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回空串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图片名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGetImage</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(<span class="keyword">this</span>.cm).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建httpGet请求对象，设置url地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用User-Agent防止HttpClient发送http请求时403 Forbidden和安全拦截</span></span><br><span class="line">        String userAgent = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36"</span>;</span><br><span class="line">        httpGet.setHeader(<span class="string">"User-Agent"</span>, userAgent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求信息</span></span><br><span class="line">        httpGet.setConfig(<span class="keyword">this</span>.getConfig());</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用HttpClient发起请求，获取响应</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应，返回结果</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//判断响应体Entity是否不为空</span></span><br><span class="line">                <span class="keyword">if</span> (response.getEntity() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//下载图片</span></span><br><span class="line">                    <span class="comment">//获取图片的后缀</span></span><br><span class="line">                    String extName = url.substring(url.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//创建图片名，重命名图片</span></span><br><span class="line">                    String picName = UUID.randomUUID().toString() + extName;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//下载图片</span></span><br><span class="line">                    <span class="comment">//声明OutPutStream</span></span><br><span class="line">                    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\wgy\\Desktop\\images\\"</span> + picName));</span><br><span class="line">                    response.getEntity().writeTo(outputStream);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//返回图片名称</span></span><br><span class="line">                    <span class="keyword">return</span> picName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果下载失败，返回空串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RequestConfig <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestConfig config = RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(<span class="number">1000</span>)    <span class="comment">//创建连接的最长时间</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">500</span>)  <span class="comment">// 获取连接的最长时间</span></span><br><span class="line">                .setSocketTimeout(<span class="number">10000</span>)    <span class="comment">//数据传输的最长时间</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-6-实现数据抓取"><a href="#4-3-6-实现数据抓取" class="headerlink" title="4.3.6    实现数据抓取"></a>4.3.6    实现数据抓取</h3><p>使用定时任务，可以定时抓取最新的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务：京东商品手机信息下载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpUtils httpUtils;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载任务</span></span><br><span class="line"><span class="comment">     * 当下载任务完成后，间隔100秒进行下一次的任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">100</span> * <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//声明需要解析的初始地址</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword=%E6%89%8B%E6%9C%BA&amp;wq=%E6%89%8B%E6%9C%BA&amp;s=51&amp;click=0&amp;page="</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照页面对手机的搜索结果进行遍历解析</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i = i + <span class="number">2</span>) &#123;</span><br><span class="line">            String html = httpUtils.doGetHtml(url + i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析页面，获取商品数据并存储</span></span><br><span class="line">            <span class="keyword">this</span>.parse(html);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"手机数据抓取完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析页面，获取商品数据并存储</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String html)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析html获取Document</span></span><br><span class="line">        Document doc = Jsoup.parse(html);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取spu信息</span></span><br><span class="line">        Elements spuEles = doc.select(<span class="string">"div#J_goodsList &gt; ul &gt; li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element spuEle : spuEles) &#123;</span><br><span class="line">            <span class="comment">//获取spu</span></span><br><span class="line">            <span class="keyword">long</span> spu = Long.parseLong(StringUtils.isEmpty(spuEle.attr(<span class="string">"data-spu"</span>)) ? <span class="string">"0"</span> : spuEle.attr(<span class="string">"data-spu"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取sku信息</span></span><br><span class="line">            Elements skuEles = spuEle.select(<span class="string">"li.ps-item"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Element skuEle : skuEles) &#123;</span><br><span class="line">                <span class="comment">//获取sku</span></span><br><span class="line">                <span class="keyword">long</span> sku = Long.parseLong(skuEle.select(<span class="string">"[data-sku]"</span>).attr(<span class="string">"data-sku"</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//根据sku查询商品数据</span></span><br><span class="line">                Item item = <span class="keyword">new</span> Item();</span><br><span class="line">                item.setSku(sku);</span><br><span class="line">                List&lt;Item&gt; list = <span class="keyword">this</span>.itemService.findAll(item);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果商品存在，就进行下一个循环，该商品不保存，因为已存在</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置商品的spu</span></span><br><span class="line">                item.setSpu(spu);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的详情的url</span></span><br><span class="line">                String itemUrl = <span class="string">"https://item.jd.com/"</span> + sku + <span class="string">".html"</span>;</span><br><span class="line">                item.setUrl(itemUrl);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的图片</span></span><br><span class="line">                String picUrl = <span class="string">"https:"</span> + skuEle.select(<span class="string">"img[data-sku]"</span>).first().attr(<span class="string">"data-lazy-img"</span>);</span><br><span class="line">                picUrl = picUrl.replace(<span class="string">"/n7/"</span>, <span class="string">"/n1/"</span>);</span><br><span class="line">                String picName = <span class="keyword">this</span>.httpUtils.doGetImage(picUrl);</span><br><span class="line">                item.setPic(picName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的价格</span></span><br><span class="line">                String priceJson = <span class="keyword">this</span>.httpUtils.doGetHtml(<span class="string">"https://p.3.cn/prices/mgets?skuIds=J_"</span> + sku);</span><br><span class="line">                <span class="keyword">double</span> price = MAPPER.readTree(priceJson).get(<span class="number">0</span>).get(<span class="string">"p"</span>).asDouble();</span><br><span class="line">                item.setPrice(price);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取商品的标题</span></span><br><span class="line">                String itemInfo = <span class="keyword">this</span>.httpUtils.doGetHtml(item.getUrl());</span><br><span class="line">                String title = Jsoup.parse(itemInfo).select(<span class="string">"div.sku-name"</span>).text();</span><br><span class="line">                item.setTitle(title);</span><br><span class="line"></span><br><span class="line">                item.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">                item.setUpdated(item.getCreated());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//保存商品数据到数据库中</span></span><br><span class="line">                <span class="keyword">this</span>.itemService.save(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-网络爬虫&quot;&gt;&lt;a href=&quot;#1-网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;1.    网络爬虫&quot;&gt;&lt;/a&gt;1.    网络爬虫&lt;/h1&gt;&lt;h2 id=&quot;1-1-网络爬虫介绍&quot;&gt;&lt;a href=&quot;#1-1-网络爬虫介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1    网络爬虫介绍&quot;&gt;&lt;/a&gt;1.1    网络爬虫介绍&lt;/h2&gt;&lt;p&gt;在大数据时代，信息的采集是一项重要的工作，而互联网中的数据是海量的，如果单纯靠人力进行信息采集，不仅低效繁琐，搜集的成本也会提高。如何自动高效地获取互联网中我们感兴趣的信息并为我们所用是一个重要的问题，而爬虫技术就是为了解决这些问题而生的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="网络爬虫" scheme="https://wgy1993.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus(二)</title>
    <link href="https://wgy1993.gitee.io/archives/1ea41e8e.html"/>
    <id>https://wgy1993.gitee.io/archives/1ea41e8e.html</id>
    <published>2020-10-01T03:32:11.000Z</published>
    <updated>2020-10-01T03:37:17.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ActiveRecord"><a href="#1-ActiveRecord" class="headerlink" title="1.    ActiveRecord"></a>1.    ActiveRecord</h1><p>ActiveRecord（简称AR）一直广受动态语言（ PHP 、 Ruby 等）的喜爱，而 Java 作为准静态语言，对于ActiveRecord 往往只能感叹其优雅，所以我们也在 AR 道路上进行了一定的探索，喜欢大家能够喜欢。</p><a id="more"></a><blockquote><p>什么是ActiveRecord？</p><p>ActiveRecord也属于ORM（对象关系映射）层，由Rails最早提出，遵循标准的ORM模型：表映射到记录，记录映射到对象，字段映射到对象属性。配合遵循的命名和配置惯例，能够很大程度的快速实现模型的操作，而且简洁易懂。</p><p>ActiveRecord的主要思想是：</p><ul><li>每一个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录；通常表的每个字段在类中都有相应的Field；</li><li>ActiveRecord 同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即CURD;；</li><li>ActiveRecord 是一种领域模型(Domain Model)，封装了部分业务逻辑；</li></ul></blockquote><h2 id="1-1-开启AR之旅"><a href="#1-1-开启AR之旅" class="headerlink" title="1.1    开启AR之旅"></a>1.1    开启AR之旅</h2><p>在MP中，开启AR非常简单，只需要将实体对象继承Model即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-根据主键查询"><a href="#1-2-根据主键查询" class="headerlink" title="1.2    根据主键查询"></a>1.2    根据主键查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        User user1 = user.selectById();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-新增数据"><a href="#1-3-新增数据" class="headerlink" title="1.3    新增数据"></a>1.3    新增数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"diaochan"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setName(<span class="string">"貂蝉"</span>);</span><br><span class="line">        user.setMail(<span class="string">"diaochan@test.cn"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用AR的insert方法进行插入数据</span></span><br><span class="line">        <span class="keyword">boolean</span> insert = user.insert();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + insert);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-更新操作"><a href="#1-4-更新操作" class="headerlink" title="1.4    更新操作"></a>1.4    更新操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">13L</span>);<span class="comment">// 查询条件</span></span><br><span class="line">        user.setAge(<span class="number">31</span>); <span class="comment">// 更新的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = user.updateById();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-删除操作"><a href="#1-5-删除操作" class="headerlink" title="1.5    删除操作"></a>1.5    删除操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">13L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> delete = user.deleteById();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-根据条件查询"><a href="#1-6-根据条件查询" class="headerlink" title="1.6    根据条件查询"></a>1.6    根据条件查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.ge(<span class="string">"age"</span>, <span class="number">30</span>); <span class="comment">//大于等于30岁的用户查询出来</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = user.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user1 : users) &#123;</span><br><span class="line">            System.out.println(user1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Oracle-主键Sequence"><a href="#2-Oracle-主键Sequence" class="headerlink" title="2.    Oracle 主键Sequence"></a>2.    Oracle 主键Sequence</h1><p>在mysql中，主键往往是自增长的，这样使用起来是比较方便的，如果使用的是Oracle数据库，那么就不能使用自增长了，就得使用Sequence 序列生成id值了。</p><h2 id="2-1-部署Oracle环境"><a href="#2-1-部署Oracle环境" class="headerlink" title="2.1    部署Oracle环境"></a>2.1    部署Oracle环境</h2><p>为了简化环境部署，这里使用Docker环境进行部署安装Oracle。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull sath89/oracle-12c</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker create --name oracle -p 1521:1521 sath89/oracle-12c</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">docker start oracle &amp;&amp; docker logs -f oracle</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过用户名密码即可登录</span></span><br><span class="line">用户名和密码为： system/oracle</span><br></pre></td></tr></table></figure><p>下面使用navicat12进行连接并操作oracle。</p><p>需要注意的是：由于安装的Oracle是64位版本，所以navicat也是需要使用64为版本，否则连接不成功。</p><p><img src="https://img-blog.csdnimg.cn/20201001112621998.png" alt="image-20201001094008097"></p><h2 id="2-2-创建表以及序列"><a href="#2-2-创建表以及序列" class="headerlink" title="2.2    创建表以及序列"></a>2.2    创建表以及序列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表，表名以及字段名都要大写</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"TB_USER"</span> (</span><br><span class="line">    <span class="string">"ID"</span> <span class="built_in">NUMBER</span>(<span class="number">20</span>) <span class="keyword">VISIBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">    <span class="string">"USER_NAME"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"PASSWORD"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"NAME"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"AGE"</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>) <span class="keyword">VISIBLE</span> ,</span><br><span class="line">    <span class="string">"EMAIL"</span> <span class="built_in">VARCHAR2</span>(<span class="number">255</span> <span class="keyword">BYTE</span>) <span class="keyword">VISIBLE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建序列</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> SEQ_USER <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1</span> <span class="keyword">INCREMENT</span> <span class="keyword">BY</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-3-jdbc驱动包"><a href="#2-3-jdbc驱动包" class="headerlink" title="2.3    jdbc驱动包"></a>2.3    jdbc驱动包</h2><p>由于版权原因，我们不能直接通过maven的中央仓库下载oracle数据库的jdbc驱动包，所以我们需要将驱动包安装到本地仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ojdbc8.jar</span></span><br><span class="line">mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.1.0.1 -Dpackaging=jar -Dfile=ojdbc8.jar</span><br></pre></td></tr></table></figure><p>安装完成后的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-修改application-properties"><a href="#2-4-修改application-properties" class="headerlink" title="2.4    修改application.properties"></a>2.4    修改application.properties</h2><p>对于application.properties的修改，需要修改2个位置，分别是：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库连接配置</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:oracle:thin:@192.168.142.128:1521:xe</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">system</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">oracle</span></span><br><span class="line"><span class="comment">#id生成策略</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.id-type</span>=<span class="string">input</span></span><br></pre></td></tr></table></figure><h2 id="2-5-配置序列"><a href="#2-5-配置序列" class="headerlink" title="2.5    配置序列"></a>2.5    配置序列</h2><p>使用Oracle的序列需要做2件事情：</p><p>1、需要配置MP的序列生成器到Spring容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Oracle的序列生成器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OracleKeyGenerator <span class="title">oracleKeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OracleKeyGenerator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在实体对象中指定序列的名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@KeySequence</span>(value = <span class="string">"SEQ_USER"</span>, clazz = Long<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-测试"><a href="#2-6-测试" class="headerlink" title="2.6    测试"></a>2.6    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Oracle 主键Sequence</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setEmail(<span class="string">"test@itcast.cn"</span>);</span><br><span class="line">        user.setName(<span class="string">"曹操"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"caocao"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user); <span class="comment">//返回的result是受影响的行数，并不是自增后的id</span></span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">        </span><br><span class="line">        System.out.println(user.getId()); <span class="comment">//自增后的id会回填到对象中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectById(<span class="number">8L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201001112640289.png" alt="image-20201001095124743"></p><h1 id="3-插件"><a href="#3-插件" class="headerlink" title="3.    插件"></a>3.    插件</h1><h2 id="3-1-mybatis的插件机制"><a href="#3-1-mybatis的插件机制" class="headerlink" title="3.1    mybatis的插件机制"></a>3.1    mybatis的插件机制</h2><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>我们看到了可以拦截Executor接口的部分方法，比如update，query，commit，rollback等方法，还有其他接口的一些方法等。</p><p>总体概括为：</p><ul><li>拦截执行器的方法</li><li>拦截参数的处理</li><li>拦截结果集的处理</li><li>拦截Sql语法构建的处理</li></ul><p>拦截器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(</span><br><span class="line">        type = Executor<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">method</span> </span>= <span class="string">"update"</span>,</span><br><span class="line">        args = &#123;MappedStatement<span class="class">.<span class="keyword">class</span>, <span class="title">Object</span>.<span class="title">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//拦截方法，具体业务逻辑编写的位置</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建target对象的代理对象,目的是将当前拦截器加入到该对象中</span></span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//属性设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入到Spring容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入自定义的拦截器（插件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyInterceptor <span class="title">myInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过xml配置，mybatis-config.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.wgy.plugins.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-执行分析插件"><a href="#3-2-执行分析插件" class="headerlink" title="3.2    执行分析插件"></a>3.2    执行分析插件</h2><p>在MP中提供了对SQL执行的分析的插件，可用作阻断全表更新、删除的操作，注意：该插件仅适用于开发环境，不适用于生产环境。</p><p>SpringBoot配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL分析插件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlExplainInterceptor <span class="title">sqlExplainInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlExplainInterceptor sqlExplainInterceptor = <span class="keyword">new</span> SqlExplainInterceptor();</span><br><span class="line"></span><br><span class="line">        List&lt;ISqlParser&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//全表更新、删除的阻断器</span></span><br><span class="line">        list.add(<span class="keyword">new</span> BlockAttackSqlParser());</span><br><span class="line"></span><br><span class="line">        sqlExplainInterceptor.setSqlParserList(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlExplainInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试全表更新，SQL分析器阻断效果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">31</span>); <span class="comment">// 更新的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = user.update(<span class="keyword">null</span>); <span class="comment">//全表更新</span></span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Prohibition of table update operation</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.Assert.notNull(Assert.java:72)</span><br><span class="line">at com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser.processUpdate(BlockAttackSqlParser.java:45)</span><br><span class="line">at com.baomidou.mybatisplus.core.parser.AbstractJsqlParser.processParser(AbstractJsqlParser.java:92)</span><br><span class="line">at com.baomidou.mybatisplus.core.parser.AbstractJsqlParser.parser(AbstractJsqlParser.java:67)</span><br><span class="line">at com.baomidou.mybatisplus.extension.handlers.AbstractSqlParserHandler.sqlParser(AbstractSqlParserHandler.java:76)</span><br><span class="line">at com.baomidou.mybatisplus.extension.plugins.SqlExplainInterceptor.intercept(SqlExplainInterceptor.java:63)</span><br><span class="line">at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)</span><br><span class="line">at com.sun.proxy.$Proxy67.update(Unknown Source)</span><br><span class="line">at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)</span><br><span class="line">... 32 more</span><br></pre></td></tr></table></figure><p>可以看到，当执行全表更新时，会抛出异常，这样有效防止了一些误操作。</p><h2 id="3-3-性能分析插件"><a href="#3-3-性能分析插件" class="headerlink" title="3.3    性能分析插件"></a>3.3    性能分析插件</h2><p>性能分析拦截器，用于输出每条 SQL 语句及其执行时间，可以设置最大执行时间，超过时间会抛出异常。</p><blockquote><p><strong>该插件只用于开发环境，不建议生产环境使用。</strong></p></blockquote><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 性能分析插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--最大的执行时间，单位为毫秒--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTime"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对输出的SQL做格式化，默认为false--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Time：11 ms - ID：com.wgy.mapper.UserMapper.selectById</span><br><span class="line">Execute SQL：</span><br><span class="line">    SELECT</span><br><span class="line">        id,</span><br><span class="line">        user_name,</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        email AS mail </span><br><span class="line">    FROM</span><br><span class="line">        tb_user </span><br><span class="line">    WHERE</span><br><span class="line">        id&#x3D;2</span><br></pre></td></tr></table></figure><p>可以看到，执行时间为11ms。如果将maxTime设置为1，那么，该操作会抛出异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException:  The SQL execution time is too large, please optimize ! </span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)</span><br><span class="line">................</span><br></pre></td></tr></table></figure><h2 id="3-4-乐观锁插件"><a href="#3-4-乐观锁插件" class="headerlink" title="3.4    乐观锁插件"></a>3.4    乐观锁插件</h2><h3 id="3-4-1-主要适用场景"><a href="#3-4-1-主要适用场景" class="headerlink" title="3.4.1    主要适用场景"></a>3.4.1    主要适用场景</h3><p>意图：</p><p>当要更新一条记录的时候，希望这条记录没有被别人更新</p><p>乐观锁实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果 version不对，就更新失败</li></ul><h3 id="3-4-2-插件配置"><a href="#3-4-2-插件配置" class="headerlink" title="3.4.2    插件配置"></a>3.4.2    插件配置</h3><p>spring xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>spring boot:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过xml配置，mybatis-config.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--乐观锁插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-3-注解实体字段"><a href="#3-4-3-注解实体字段" class="headerlink" title="3.4.3    注解实体字段"></a>3.4.3    注解实体字段</h3><p>需要为实体字段添加@Version注解。</p><p>1、为表添加version字段，并且设置初始值为1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &#96;tb_user&#96; ADD COLUMN &#96;version&#96; int(10) NULL AFTER &#96;email&#96;;</span><br><span class="line"></span><br><span class="line">UPDATE &#96;tb_user&#96; SET &#96;version&#96;&#x3D;&#39;1&#39;;</span><br></pre></td></tr></table></figure><p>2、为User实体对象添加version字段，并且添加@Version注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-测试"><a href="#3-4-4-测试" class="headerlink" title="3.4.4    测试"></a>3.4.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapper2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试乐观锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">2L</span>);<span class="comment">// 查询条件</span></span><br><span class="line"></span><br><span class="line">        User userVersion = user.selectById();</span><br><span class="line"></span><br><span class="line">        user.setAge(<span class="number">21</span>); <span class="comment">// 更新的数据</span></span><br><span class="line">        user.setVersion(userVersion.getVersion()); <span class="comment">// 当前的版本信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = user.updateById();</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新的条件中有version条件，并且更新的version为2。</p><p>如果再次执行，更新则不成功。这样就避免了多人同时更新时导致数据的不一致。</p><h3 id="3-4-5-特别说明"><a href="#3-4-5-特别说明" class="headerlink" title="3.4.5    特别说明"></a>3.4.5    特别说明</h3><ul><li>支持的数据类型只有 :int,Integer,long,Long,Date,Timestamp,LocalDateTime</li><li>整数类型下 newVersion = oldVersion + 1</li><li>newVersion 会回写到  entity 中</li><li>仅支持 updateById(id) 与  update(entity, wrapper) 方法</li><li>在 update(entity, wrapper) 方法下, wrapper 不能复用!!!</li></ul><h1 id="4-Sql-注入器"><a href="#4-Sql-注入器" class="headerlink" title="4.    Sql 注入器"></a>4.    Sql 注入器</h1><p>我们已经知道，在MP中，通过AbstractSqlInjector将BaseMapper中的方法注入到了Mybatis容器，这样这些方法才可以正常执行。</p><p>那么，如果我们需要扩充BaseMapper中的方法，又该如何实现呢？</p><p>下面我们以扩展findAll方法为例进行学习。</p><h2 id="4-1-编写MyBaseMapper"><a href="#4-1-编写MyBaseMapper" class="headerlink" title="4.1    编写MyBaseMapper"></a>4.1    编写MyBaseMapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩充BaseMapper中的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyBaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展其他的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的Mapper都可以继承该Mapper，这样实现了统一的扩展。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">MyBaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-编写MySqlInjector"><a href="#4-2-编写MySqlInjector" class="headerlink" title="4.2    编写MySqlInjector"></a>4.2    编写MySqlInjector</h2><p>如果直接继承AbstractSqlInjector的话，原有的BaseMapper中的方法将失效，所以我们选择继承DefaultSqlInjector进行扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SQL 注入器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlInjector</span> <span class="keyword">extends</span> <span class="title">DefaultSqlInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取父类中的集合</span></span><br><span class="line">        list.addAll(<span class="keyword">super</span>.getMethodList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再扩充自定义的方法</span></span><br><span class="line">        list.add(<span class="keyword">new</span> FindAll());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-编写FindAll"><a href="#4-3-编写FindAll" class="headerlink" title="4.3    编写FindAll"></a>4.3    编写FindAll</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的查询所有方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAll</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"select * from "</span> + tableInfo.getTableName();</span><br><span class="line">        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addSelectMappedStatement(mapperClass, <span class="string">"findAll"</span>, sqlSource, modelClass, tableInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-注册到Spring容器"><a href="#4-4-注册到Spring容器" class="headerlink" title="4.4    注册到Spring容器"></a>4.4    注册到Spring容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入自定义的SQL注入器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlInjector <span class="title">mySqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5    测试"></a>4.5    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sql注入器测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-自动填充功能"><a href="#5-自动填充功能" class="headerlink" title="5.    自动填充功能"></a>5.    自动填充功能</h1><p>有些时候我们可能会有这样的需求，插入或者更新数据时，希望有些字段可以自动填充数据，比如密码、version等。在MP中提供了这样的功能，可以实现自动填充。</p><h2 id="5-1-添加-TableField注解"><a href="#5-1-添加-TableField注解" class="headerlink" title="5.1    添加@TableField注解"></a>5.1    添加@TableField注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据时进行填充</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, fill = FieldFill.INSERT) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(exist = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//在数据库表中是不存在的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为password添加自动填充功能，在新增数据时有效。</p><p>FieldFill提供了多种模式选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FieldFill &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入和更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-编写MyMetaObjectHandler"><a href="#5-2-编写MyMetaObjectHandler" class="headerlink" title="5.2    编写MyMetaObjectHandler"></a>5.2    编写MyMetaObjectHandler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动填充功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据时填充</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先获取到password的值，再进行判断，如果为空，就进行填充，如果不为空，就不做处理</span></span><br><span class="line">        Object password = getFieldValByName(<span class="string">"password"</span>, metaObject);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == password) &#123;</span><br><span class="line">            setFieldValByName(<span class="string">"password"</span>, <span class="string">"888888"</span>, metaObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据时填充</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-测试"><a href="#5-3-测试" class="headerlink" title="5.3    测试"></a>5.3    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"关羽"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"guanyu"</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    user.setMail(<span class="string">"guanyu@itast.cn"</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-逻辑删除"><a href="#6-逻辑删除" class="headerlink" title="6.    逻辑删除"></a>6.    逻辑删除</h1><p>开发系统时，有时候在实现功能时，删除操作需要实现逻辑删除，所谓逻辑删除就是将数据标记为删除，而并非真正的物理删除（非DELETE操作），查询时需要携带状态条件，确保被标记的数据不被查询到。这样做的目的就是避免数据被真正的删除。</p><h2 id="6-1-修改表结构"><a href="#6-1-修改表结构" class="headerlink" title="6.1    修改表结构"></a>6.1    修改表结构</h2><p>为tb_user表增加deleted字段，用于表示数据是否被删除，1代表删除，0代表未删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &#96;tb_user&#96; ADD COLUMN &#96;deleted&#96; int(1) NULL DEFAULT 0 COMMENT &#39;1代表删除，0代表未删除&#39; AFTER &#96;version&#96;;</span><br></pre></td></tr></table></figure><p>同时，也修改User实体，增加deleted属性并且添加@TableLogic注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据时进行填充</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, fill = FieldFill.INSERT) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(exist = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//在数据库表中是不存在的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span> <span class="comment">// 逻辑删除字段 ，1-删除，0-未删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-配置"><a href="#6-2-配置" class="headerlink" title="6.2    配置"></a>6.2    配置</h2><p>application.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除状态的值为：1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 未删除状态的值为：0</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h2 id="6-3-测试"><a href="#6-3-测试" class="headerlink" title="6.3    测试"></a>6.3    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> delete = user.deleteById();</span><br><span class="line">    System.out.println(<span class="string">"result =&gt; "</span> + delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.deleteById]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: UPDATE tb_user SET deleted&#x3D;1 WHERE id&#x3D;? AND deleted&#x3D;0</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.deleteById]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Long)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.deleteById]-[DEBUG] &lt;&#x3D;&#x3D;  Updates: 1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201001112703298.png" alt="image-20201001110233248"></p><p>测试查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据主键查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    User user1 = user.selectById();</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: SELECT</span><br><span class="line">id,user_name,password,name,age,email,version,deleted FROM tb_user WHERE id&#x3D;? AND deleted&#x3D;0</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Long)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &lt;&#x3D;&#x3D;   Total: 0</span><br></pre></td></tr></table></figure><p>可见，已经实现了逻辑删除。</p><h1 id="7-通用枚举"><a href="#7-通用枚举" class="headerlink" title="7.    通用枚举"></a>7.    通用枚举</h1><p>解决了繁琐的配置，让 mybatis 优雅的使用枚举属性！</p><h2 id="7-1-修改表结构"><a href="#7-1-修改表结构" class="headerlink" title="7.1    修改表结构"></a>7.1    修改表结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &#96;tb_user&#96; ADD COLUMN &#96;sex&#96; int(1) NULL DEFAULT 1 COMMENT &#39;1-男，2-女&#39; AFTER &#96;deleted&#96;;</span><br></pre></td></tr></table></figure><h2 id="7-2-定义枚举"><a href="#7-2-定义枚举" class="headerlink" title="7.2    定义枚举"></a>7.2    定义枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SexEnum implements IEnum&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    MAN(<span class="number">1</span>, <span class="string">"男"</span>),</span><br><span class="line">    WOMAN(<span class="number">2</span>, <span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    SexEnum(<span class="keyword">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-配置"><a href="#7-3-配置" class="headerlink" title="7.3    配置"></a>7.3    配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 枚举包扫描</span></span><br><span class="line"><span class="meta">mybatis-plus.type-enums-package</span>=<span class="string">com.wgy.enums</span></span><br></pre></td></tr></table></figure><h2 id="7-4-修改实体"><a href="#7-4-修改实体" class="headerlink" title="7.4    修改实体"></a>7.4    修改实体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据时进行填充</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, fill = FieldFill.INSERT) <span class="comment">//查询时不返回该字段的值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"email"</span>) <span class="comment">//指定数据表中字段名</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(exist = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//在数据库表中是不存在的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">//乐观锁的版本字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span> <span class="comment">// 逻辑删除字段 ，1-删除，0-未删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex; <span class="comment">//性别，枚举类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-测试"><a href="#7-5-测试" class="headerlink" title="7.5    测试"></a>7.5    测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"diaochan"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    user.setName(<span class="string">"貂蝉"</span>);</span><br><span class="line">    user.setMail(<span class="string">"diaochan@itast.cn"</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line">    user.setSex(SexEnum.WOMAN); <span class="comment">//使用的是枚举</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用AR的insert方法进行插入数据</span></span><br><span class="line">    <span class="keyword">boolean</span> insert = user.insert();</span><br><span class="line">    System.out.println(<span class="string">"result =&gt; "</span> + insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201001112745766.png" alt="image-20201001111458479"></p><p>查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据主键查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    User user1 = user.selectById();</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: SELECT id,user_name,password,name,age,email,version,deleted,sex FROM tb_user WHERE id&#x3D;? AND</span><br><span class="line">deleted&#x3D;0</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Long)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectById]-[DEBUG] &lt;&#x3D;&#x3D;   Total: 1</span><br><span class="line">User(id&#x3D;2, userName&#x3D;lisi, password&#x3D;123456, name&#x3D;李四, age&#x3D;30, email&#x3D;test2@itcast.cn,address&#x3D;null, version&#x3D;2, deleted&#x3D;0, sex&#x3D;女)</span><br></pre></td></tr></table></figure><p>从测试可以看出，可以很方便的使用枚举了。</p><p>查询条件时也是有效的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用枚举查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBySex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">"sex"</span>, SexEnum.WOMAN); <span class="comment">//查询性别为女的数据</span></span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = user.selectList(wrapper);</span><br><span class="line">    <span class="keyword">for</span> (User user1 : users) &#123;</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] [com.wgy.mapper.UserMapper.selectList]-[DEBUG]  &#x3D;&#x3D;&gt; Preparing: SELECT id,user_name,password,name,age,email,version,deleted,sex FROM tb_user WHERE deleted&#x3D;0</span><br><span class="line">AND sex &#x3D; ?</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectList]-[DEBUG] &#x3D;&#x3D;&gt; Parameters: 2(Integer)</span><br><span class="line">[main] [com.wgy.mapper.UserMapper.selectList]-[DEBUG] &lt;&#x3D;&#x3D;   Total: 3</span><br></pre></td></tr></table></figure><h1 id="8-代码生成器"><a href="#8-代码生成器" class="headerlink" title="8.    代码生成器"></a>8.    代码生成器</h1><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><p><img src="https://img-blog.csdnimg.cn/20201001112936926.png" alt="image-20201001111943866"></p><h2 id="8-1-创建工程"><a href="#8-1-创建工程" class="headerlink" title="8.1    创建工程"></a>8.1    创建工程</h2><p>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mp-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-代码"><a href="#8-2-代码" class="headerlink" title="8.2    代码"></a>8.2    代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * mysql 代码生成器演示例子</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RUN THIS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"wgy"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">"模块名"</span>));</span><br><span class="line">        pc.setParent(<span class="string">"com.wgy.generator"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/mapper.xml.ftl"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/mp-generator/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(<span class="keyword">new</span> TemplateConfig().setXml(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">//        strategy.setSuperEntityClass("com.baomidou.mybatisplus.samples.generator.common.BaseEntity");</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        strategy.setSuperControllerClass("com.baomidou.mybatisplus.samples.generator.common.BaseController");</span></span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名"</span>));</span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">"id"</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span></span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-测试"><a href="#8-3-测试" class="headerlink" title="8.3    测试"></a>8.3    测试</h2><p><img src="https://img-blog.csdnimg.cn/20201001113002249.png" alt="image-20201001112221848"></p><p>代码已生成：</p><p><img src="https://img-blog.csdnimg.cn/20201001113017816.png" alt="image-20201001112306549"></p><h1 id="9-MybatisX-快速开发插件"><a href="#9-MybatisX-快速开发插件" class="headerlink" title="9.    MybatisX 快速开发插件"></a>9.    MybatisX 快速开发插件</h1><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。</p><p>安装方法：打开 IDEA，进入 File -&gt; Settings -&gt; Plugins -&gt; Browse Repositories，输入  mybatisx 搜索并安装。</p><p>功能：</p><ul><li>Java  与 XML 来回跳转</li><li>Mapper  方法自动生成 XML</li></ul><p><img src="https://img-blog.csdnimg.cn/20201001113034308.png" alt="image-20201001112422921"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-ActiveRecord&quot;&gt;&lt;a href=&quot;#1-ActiveRecord&quot; class=&quot;headerlink&quot; title=&quot;1.    ActiveRecord&quot;&gt;&lt;/a&gt;1.    ActiveRecord&lt;/h1&gt;&lt;p&gt;ActiveRecord（简称AR）一直广受动态语言（ PHP 、 Ruby 等）的喜爱，而 Java 作为准静态语言，对于ActiveRecord 往往只能感叹其优雅，所以我们也在 AR 道路上进行了一定的探索，喜欢大家能够喜欢。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
      <category term="Mybatis-Plus" scheme="https://wgy1993.gitee.io/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus(一)</title>
    <link href="https://wgy1993.gitee.io/archives/b19585ec.html"/>
    <id>https://wgy1993.gitee.io/archives/b19585ec.html</id>
    <published>2020-09-29T10:24:33.000Z</published>
    <updated>2020-09-29T10:39:55.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-了解Mybatis-Plus"><a href="#1-了解Mybatis-Plus" class="headerlink" title="1.    了解Mybatis-Plus"></a>1.    了解Mybatis-Plus</h1><h2 id="1-1-Mybatis-Plus介绍"><a href="#1-1-Mybatis-Plus介绍" class="headerlink" title="1.1    Mybatis-Plus介绍"></a>1.1    Mybatis-Plus介绍</h2><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>官网： <a href="https://mybatis.plus/" target="_blank" rel="noopener">https://mybatis.plus/</a> 或 <a href="https://mp.baomidou.com/" target="_blank" rel="noopener">https://mp.baomidou.com/</a></p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200929181032531.png" alt="image-20200928214057580"></p><blockquote><p><strong>愿景</strong><br>我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200929181051358.png" alt="image-20200928214552002"></p><h2 id="1-2-代码以及文档"><a href="#1-2-代码以及文档" class="headerlink" title="1.2    代码以及文档"></a>1.2    代码以及文档</h2><p>文档地址：<a href="https://mybatis.plus/guide/" target="_blank" rel="noopener">https://mybatis.plus/guide/</a></p><p>源码地址：<a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">https://github.com/baomidou/mybatis-plus</a></p><h2 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3    特性"></a>1.3    特性</h2><ul><li>无侵入 ：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小 ：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持多种数据库 ：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</li><li>支持主键自动生成 ：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 XML 热加载：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作 ：支持全局通用方法注入（ Write once, use anywhere ）</li><li>支持关键词自动转义 ：支持数据库关键词（order、key……）自动转义，还可自定义关键词</li><li>内置代码生成器 ：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件 ：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List查询</li><li>内置性能分析插件 ：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件 ：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li><li>内置 Sql 注入剥离器：支持 Sql 注入剥离，有效预防 Sql 注入攻击</li></ul><h2 id="1-4-架构"><a href="#1-4-架构" class="headerlink" title="1.4    架构"></a>1.4    架构</h2><p><img src="https://img-blog.csdnimg.cn/20200929181107229.png" alt="image-20200928214840984"></p><h2 id="1-5-作者"><a href="#1-5-作者" class="headerlink" title="1.5    作者"></a>1.5    作者</h2><p>Mybatis-Plus是由baomidou（苞米豆）组织开发并且开源的，目前该组织大概有30人左右。</p><p>码云地址：<a href="https://gitee.com/organizations/baomidou" target="_blank" rel="noopener">https://gitee.com/organizations/baomidou</a></p><p><img src="https://img-blog.csdnimg.cn/20200929181125612.png" alt="image-20200928214908502"></p><h1 id="2-快速开始"><a href="#2-快速开始" class="headerlink" title="2.    快速开始"></a>2.    快速开始</h1><p>对于 Mybatis整合MP有常常有三种用法，分别是Mybatis+MP、Spring+Mybatis+MP、Spring Boot+Mybatis+MP。</p><h2 id="2-1-创建数据库以及表"><a href="#2-1-创建数据库以及表" class="headerlink" title="2.1    创建数据库以及表"></a>2.1    创建数据库以及表</h2><p><img src="https://img-blog.csdnimg.cn/20200929181142159.png" alt="image-20200928215001770"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--  创建测试表</span><br><span class="line">CREATE TABLE &#96;tb_user&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键ID&#39;,</span><br><span class="line">    &#96;user_name&#96; varchar(20) NOT NULL COMMENT &#39;用户名&#39;,</span><br><span class="line">    &#96;password&#96; varchar(20) NOT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">    &#96;name&#96; varchar(30) DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">    &#96;age&#96; int(11) DEFAULT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">    &#96;email&#96; varchar(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- 插入测试数据</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;1&#39;, &#39;zhangsan&#39;, &#39;123456&#39;, &#39;张三&#39;, &#39;18&#39;, &#39;test1@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;2&#39;, &#39;lisi&#39;, &#39;123456&#39;, &#39;李四&#39;, &#39;20&#39;, &#39;test2@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;3&#39;, &#39;wangwu&#39;, &#39;123456&#39;, &#39;王五&#39;, &#39;28&#39;, &#39;test3@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;4&#39;, &#39;zhaoliu&#39;, &#39;123456&#39;, &#39;赵六&#39;, &#39;21&#39;, &#39;test4@test.cn&#39;);</span><br><span class="line">INSERT INTO &#96;tb_user&#96; (&#96;id&#96;, &#96;user_name&#96;, &#96;password&#96;, &#96;name&#96;, &#96;age&#96;, &#96;email&#96;) VALUES</span><br><span class="line">(&#39;5&#39;, &#39;sunqi&#39;, &#39;123456&#39;, &#39;孙七&#39;, &#39;24&#39;, &#39;test5@test.cn&#39;);</span><br></pre></td></tr></table></figure><h2 id="2-2-创建工程导入依赖"><a href="#2-2-创建工程导入依赖" class="headerlink" title="2.2    创建工程导入依赖"></a>2.2    创建工程导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-plus-simple<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-plus-spring<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus插件依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化bean代码的工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Mybatis-MP"><a href="#2-3-Mybatis-MP" class="headerlink" title="2.3    Mybatis + MP"></a>2.3    Mybatis + MP</h2><p>下面演示，通过纯Mybatis与Mybatis-Plus整合。</p><h3 id="2-3-1-创建子Module"><a href="#2-3-1-创建子Module" class="headerlink" title="2.3.1    创建子Module"></a>2.3.1    创建子Module</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> =<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-Mybatis实现查询User"><a href="#2-3-2-Mybatis实现查询User" class="headerlink" title="2.3.2    Mybatis实现查询User"></a>2.3.2    Mybatis实现查询User</h3><h4 id="2-3-2-1-编写mybatis-config-xml文件"><a href="#2-3-2-1-编写mybatis-config-xml文件" class="headerlink" title="2.3.2.1    编写mybatis-config.xml文件"></a>2.3.2.1    编写mybatis-config.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>autoReconnect=true<span class="symbol">&amp;amp;</span>allowMultiQueries=true<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-编写User对象"><a href="#2-3-2-2-编写User对象" class="headerlink" title="2.3.2.2    编写User对象"></a>2.3.2.2    编写User对象</h4><p>使用lombok进行了进化bean操作。注意：注解不生效需要Idea安装lombok插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span><span class="comment">//注解包含包含getter、setter、NoArgsConstructor注解</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//注解会生成对应的无参构造方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//注解会生成对应的有参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-编写UserMapper接口"><a href="#2-3-2-3-编写UserMapper接口" class="headerlink" title="2.3.2.3    编写UserMapper接口"></a>2.3.2.3    编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-4-编写UserMapper-xml文件"><a href="#2-3-2-4-编写UserMapper-xml文件" class="headerlink" title="2.3.2.4    编写UserMapper.xml文件"></a>2.3.2.4    编写UserMapper.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.pojo.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-5-测试"><a href="#2-3-2-5-测试" class="headerlink" title="2.3.2.5    测试"></a>2.3.2.5    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String config = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Mybatis-MP实现查询User"><a href="#2-3-3-Mybatis-MP实现查询User" class="headerlink" title="2.3.3    Mybatis+MP实现查询User"></a>2.3.3    Mybatis+MP实现查询User</h3><h4 id="2-3-3-1-Mapper继承BaseMapper"><a href="#2-3-3-1-Mapper继承BaseMapper" class="headerlink" title="2.3.3.1    Mapper继承BaseMapper"></a>2.3.3.1    Mapper继承BaseMapper</h4><p>将UserMapper继承BaseMapper，将拥有了BaseMapper中的所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-MybatisSqlSessionFactoryBuilder进程构建"><a href="#2-3-3-2-MybatisSqlSessionFactoryBuilder进程构建" class="headerlink" title="2.3.3.2    MybatisSqlSessionFactoryBuilder进程构建"></a>2.3.3.2    MybatisSqlSessionFactoryBuilder进程构建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MybatisPlus测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String config = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//这里使用的是MP中的MybatisSqlSessionFactoryBuilder</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> MybatisSqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = userMapper.findAll();</span></span><br><span class="line">        <span class="comment">//可以调用BaseMapper中定义的方法</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行报错：</p><p><img src="https://img-blog.csdnimg.cn/20200929181204524.png" alt="image-20200928220631678"></p><p>解决：在 User对象中添加@TableName，指定数据库表名</p><p><img src="https://img-blog.csdnimg.cn/20200929181225895.png" alt="image-20200928220650548"></p><p><strong>简单说明：</strong></p><p>由于使用了 MybatisSqlSessionFactoryBuilder进行了构建，继承的BaseMapper中的方法就载入到了SqlSession中，所以就可以直接使用相关的方法；</p><p><img src="https://img-blog.csdnimg.cn/20200929181243717.png" alt="image-20200928220742785"></p><h2 id="2-4-Spring-Mybatis-MP"><a href="#2-4-Spring-Mybatis-MP" class="headerlink" title="2.4    Spring + Mybatis + MP"></a>2.4    Spring + Mybatis + MP</h2><p>引入了Spring框架，数据源、构建等工作就交给了Spring管理。</p><h3 id="2-4-1-创建子Module"><a href="#2-4-1-创建子Module" class="headerlink" title="2.4.1    创建子Module"></a>2.4.1    创建子Module</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-实现查询User"><a href="#2-4-2-实现查询User" class="headerlink" title="2.4.2    实现查询User"></a>2.4.2    实现查询User</h3><h4 id="2-4-2-1-编写jdbc-properties"><a href="#2-4-2-1-编写jdbc-properties" class="headerlink" title="2.4.2.1    编写jdbc.properties"></a>2.4.2.1    编写jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-2-编写applicationContext-xml"><a href="#2-4-2-2-编写applicationContext-xml" class="headerlink" title="2.4.2.2    编写applicationContext.xml"></a>2.4.2.2    编写applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:*.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.wgy.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-3-编写User对象"><a href="#2-4-2-3-编写User对象" class="headerlink" title="2.4.2.3    编写User对象"></a>2.4.2.3    编写User对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-4-编写UserMapper接口"><a href="#2-4-2-4-编写UserMapper接口" class="headerlink" title="2.4.2.4    编写UserMapper接口"></a>2.4.2.4    编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-5-测试"><a href="#2-4-2-5-测试" class="headerlink" title="2.4.2.5    测试"></a>2.4.2.5    测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring + Mybatis + MP测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisSpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>测试报错需将jdbc.properties、applicationContext.xml复制到test/resources下</p><h2 id="2-5-SpringBoot-Mybatis-MP"><a href="#2-5-SpringBoot-Mybatis-MP" class="headerlink" title="2.5    SpringBoot + Mybatis + MP"></a>2.5    SpringBoot + Mybatis + MP</h2><p>使用SpringBoot将进一步的简化MP的整合，需要注意的是，由于使用SpringBoot需要继承parent，所以需要重新创建工程，并不是创建子Module。</p><h3 id="2-5-1-创建工程导入依赖"><a href="#2-5-1-创建工程导入依赖" class="headerlink" title="2.5.1    创建工程导入依赖"></a>2.5.1    创建工程导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wgy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mp-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化代码的工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-编写application-properties"><a href="#2-5-2-编写application-properties" class="headerlink" title="2.5.2    编写application.properties"></a>2.5.2    编写application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">mp-springboot</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="2-5-3-编写User对象"><a href="#2-5-3-编写User对象" class="headerlink" title="2.5.3    编写User对象"></a>2.5.3    编写User对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-4-编写UserMapper接口"><a href="#2-5-4-编写UserMapper接口" class="headerlink" title="2.5.4    编写UserMapper接口"></a>2.5.4    编写UserMapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-5-编写启动类"><a href="#2-5-5-编写启动类" class="headerlink" title="2.5.5    编写启动类"></a>2.5.5    编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-6-测试"><a href="#2-5-6-测试" class="headerlink" title="2.5.6    测试"></a>2.5.6    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot + Mybatis + MP测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MybatisSpringBootTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-通用CRUD"><a href="#3-通用CRUD" class="headerlink" title="3.    通用CRUD"></a>3.    通用CRUD</h1><p>通过前面的学习，我们了解到通过继承BaseMapper就可以获取到各种各样的单表操作，接下来我们将详细讲解这些操作。</p><p><img src="https://img-blog.csdnimg.cn/20200929181310355.png" alt="image-20200929164247128"></p><h2 id="3-1-插入操作"><a href="#3-1-插入操作" class="headerlink" title="3.1    插入操作"></a>3.1    插入操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setMail(<span class="string">"1@test.cn"</span>);</span><br><span class="line">        user.setName(<span class="string">"曹操"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"caocao"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user); <span class="comment">//result数据库受影响的行数</span></span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取自增长后的id值, 自增长后的id值会回填到user对象中</span></span><br><span class="line">        System.out.println(<span class="string">"id =&gt; "</span> + user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据已经写入到了数据库，但是， id的值不正确，我们期望的是数据库自增长，实际是MP生成了id的值写入到了数据库。</p><p>如何设置id的生成策略呢？</p><p>修改User对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO) <span class="comment">//指定id类型为自增长</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-TableField"><a href="#3-1-1-TableField" class="headerlink" title="3.1.1    @TableField"></a>3.1.1    @TableField</h3><p>在MP中通过@TableField注解可以指定字段的一些属性，常常解决的问题有2个：</p><ul><li>对象中的属性名和字段名不一致的问题（非驼峰）</li><li>对象中的属性字段在表中不存在的问题</li></ul><p><img src="https://img-blog.csdnimg.cn/20200929181326224.png" alt="image-20200929165030809"></p><p>其他用法，如大字段不加入查询字段：</p><p><img src="https://img-blog.csdnimg.cn/20200929181343102.png" alt="image-20200929165050520"></p><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/20200929181358836.png" alt="image-20200929165114538"></p><h2 id="3-2-更新操作"><a href="#3-2-更新操作" class="headerlink" title="3.2    更新操作"></a>3.2    更新操作</h2><p>在MP中，更新操作有2种，一种是根据id更新，另一种是根据条件更新。</p><h3 id="3-2-1-根据id更新"><a href="#3-2-1-根据id更新" class="headerlink" title="3.2.1    根据id更新"></a>3.2.1    根据id更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>); <span class="comment">//条件，根据id更新</span></span><br><span class="line">        user.setAge(<span class="number">19</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        user.setPassword(<span class="string">"666666"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-根据条件更新"><a href="#3-2-2-根据条件更新" class="headerlink" title="3.2.2    根据条件更新"></a>3.2.2    根据条件更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">20</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        user.setPassword(<span class="string">"8888888"</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"user_name"</span>, <span class="string">"zhangsan"</span>); <span class="comment">//匹配user_name = zhangsan 的用户数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据条件做更新</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.update(user, wrapper);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，通过UpdateWrapper进行更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">        wrapper.set(<span class="string">"age"</span>, <span class="number">21</span>).set(<span class="string">"password"</span>, <span class="string">"999999"</span>) <span class="comment">//更新的字段</span></span><br><span class="line">                .eq(<span class="string">"user_name"</span>, <span class="string">"zhangsan"</span>); <span class="comment">//更新的条件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据条件做更新</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.update(<span class="keyword">null</span>, wrapper);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-删除操作"><a href="#3-3-删除操作" class="headerlink" title="3.3    删除操作"></a>3.3    删除操作</h2><h3 id="3-3-1-deleteById"><a href="#3-3-1-deleteById" class="headerlink" title="3.3.1    deleteById"></a>3.3.1    deleteById</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据id删除数据</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteById(<span class="number">9L</span>);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-deleteByMap"><a href="#3-3-2-deleteByMap" class="headerlink" title="3.3.2    deleteByMap"></a>3.3.2    deleteByMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"user_name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">        map.put(<span class="string">"password"</span>, <span class="string">"999999"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据map删除数据，多条件之间是and关系</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteByMap(map);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-delete"><a href="#3-3-3-delete" class="headerlink" title="3.3.3    delete"></a>3.3.3    delete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用法一：</span></span><br><span class="line"><span class="comment">//        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        wrapper.eq("user_name", "caocao1")</span></span><br><span class="line"><span class="comment">//                .eq("password", "123456");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用法二：</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"caocao"</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据包装条件做删除</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.delete(wrapper);</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-deleteBatchIds"><a href="#3-3-4-deleteBatchIds" class="headerlink" title="3.3.4    deleteBatchIds"></a>3.3.4    deleteBatchIds</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据id批量删除数据</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteBatchIds(Arrays.asList(<span class="number">10L</span>, <span class="number">11L</span>));</span><br><span class="line">        System.out.println(<span class="string">"result =&gt; "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-查询操作"><a href="#3-4-查询操作" class="headerlink" title="3.4    查询操作"></a>3.4    查询操作</h2><p>MP提供了多种查询操作，包括根据id查询、批量查询、查询单条数据、查询列表、分页查询等操作</p><h3 id="3-4-1-selectById"><a href="#3-4-1-selectById" class="headerlink" title="3.4.1    selectById"></a>3.4.1    selectById</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-selectBatchIds"><a href="#3-4-2-selectBatchIds" class="headerlink" title="3.4.2    selectBatchIds"></a>3.4.2    selectBatchIds</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据id批量查询数据</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>, <span class="number">100L</span>));</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-selectOne"><a href="#3-4-3-selectOne" class="headerlink" title="3.4.3    selectOne"></a>3.4.3    selectOne</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        wrapper.eq(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">// 查询的数据超过一条时，会抛出异常</span></span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectOne(wrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-selectCount"><a href="#3-4-4-selectCount" class="headerlink" title="3.4.4    selectCount"></a>3.4.4    selectCount</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.gt(<span class="string">"age"</span>, <span class="number">20</span>); <span class="comment">// 条件：年龄大于20岁的用户</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据条件查询数据条数</span></span><br><span class="line">        Integer count = <span class="keyword">this</span>.userMapper.selectCount(wrapper);</span><br><span class="line">        System.out.println(<span class="string">"count =&gt; "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-5-selectList"><a href="#3-4-5-selectList" class="headerlink" title="3.4.5    selectList"></a>3.4.5    selectList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        wrapper.like(<span class="string">"email"</span>, <span class="string">"itcast"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-6-selectPage"><a href="#3-4-6-selectPage" class="headerlink" title="3.4.6    selectPage"></a>3.4.6    selectPage</h3><p>配置分页插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置分页插件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wgy.mapper"</span>) <span class="comment">//设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者config配置分页插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//查询第一页，查询1条数据</span></span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        wrapper.like(<span class="string">"email"</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        IPage&lt;User&gt; iPage = <span class="keyword">this</span>.userMapper.selectPage(page, wrapper);</span><br><span class="line">        System.out.println(<span class="string">"数据总条数： "</span> + iPage.getTotal());</span><br><span class="line">        System.out.println(<span class="string">"数据总页数： "</span> + iPage.getPages());</span><br><span class="line">        System.out.println(<span class="string">"当前页数： "</span> + iPage.getCurrent());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; records = iPage.getRecords();</span><br><span class="line">        <span class="keyword">for</span> (User record : records) &#123;</span><br><span class="line">            System.out.println(record);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-SQL注入的原理"><a href="#3-5-SQL注入的原理" class="headerlink" title="3.5    SQL注入的原理"></a>3.5    SQL注入的原理</h2><p>前面我们已经知道，MP在启动后会将BaseMapper中的一系列的方法注册到mappedStatements中，那么究竟是如何注入的呢？流程又是怎么样的？下面我们将一起来分析下。</p><p>在MP中，ISqlInjector负责SQL的注入工作，它是一个接口，AbstractSqlInjector是它的实现类，实现关系如下：</p><p><img src="https://img-blog.csdnimg.cn/20200929181429233.png" alt="image-20200929172718261"></p><p>在 AbstractSqlInjector中，主要是由inspectInject()方法进行注入的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inspectInject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; modelClass = extractModelClass(mapperClass);</span><br><span class="line">    <span class="keyword">if</span> (modelClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String className = mapperClass.toString();</span><br><span class="line">        Set&lt;String&gt; mapperRegistryCache = GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());</span><br><span class="line">        <span class="keyword">if</span> (!mapperRegistryCache.contains(className)) &#123;</span><br><span class="line">            List&lt;AbstractMethod&gt; methodList = <span class="keyword">this</span>.getMethodList();</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methodList)) &#123;</span><br><span class="line">                TableInfo tableInfo = TableInfoHelper.initTableInfo(builderAssistant, modelClass);</span><br><span class="line">                <span class="comment">// 循环注入自定义方法</span></span><br><span class="line">                methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass, tableInfo));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(mapperClass.toString() + <span class="string">", No effective injection method was found."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mapperRegistryCache.add(className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现方法中， <code>methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass,tableInfo));</code> 是关键，循环遍历方法，进行注入。</p><p>最终调用抽象方法injectMappedStatement进行真正的注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入自定义 MappedStatement</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapperClass mapper 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modelClass  mapper 泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableInfo   数据库表反射信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MappedStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span></span>;</span><br></pre></td></tr></table></figure><p>查看该方法的实现：</p><p><img src="https://img-blog.csdnimg.cn/202009291814466.png" alt="image-20200929173100798"></p><p>以 SelectById为例查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID 查询一条数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-04-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectById</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        SqlMethod sqlMethod = SqlMethod.LOGIC_SELECT_BY_ID;</span><br><span class="line">        SqlSource sqlSource = <span class="keyword">new</span> RawSqlSource(configuration, String.format(sqlMethod.getSql(),</span><br><span class="line">            sqlSelectColumns(tableInfo, <span class="keyword">false</span>),</span><br><span class="line">            tableInfo.getTableName(), tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),</span><br><span class="line">            tableInfo.getLogicDeleteSql(<span class="keyword">true</span>, <span class="keyword">false</span>)), Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addSelectMappedStatement(mapperClass, sqlMethod.getMethod(), sqlSource, modelClass, tableInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，生成了SqlSource对象，再将SQL通过addSelectMappedStatement方法添加到meppedStatements中</p><p><img src="https://img-blog.csdnimg.cn/20200929181503183.png" alt="image-20200929173213333"></p><h1 id="4-配置"><a href="#4-配置" class="headerlink" title="4.    配置"></a>4.    配置</h1><p>在MP中有大量的配置，其中有一部分是Mybatis原生的配置，另一部分是MP的配置，详情：<a href="https://mybatis.plus/config/" target="_blank" rel="noopener">https://mybatis.plus/config/</a></p><p>下面我们对常用的配置做讲解。</p><h2 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1    基本配置"></a>4.1    基本配置</h2><h3 id="4-1-1-configLocation"><a href="#4-1-1-configLocation" class="headerlink" title="4.1.1    configLocation"></a>4.1.1    configLocation</h3><p>MyBatis 配置文件位置，如果您有单独的 MyBatis 配置，请将其路径配置到 configLocation 中。 MyBatis Configuration 的具体内容请参考MyBatis 官方文档</p><p>Spring Boot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定全局的配置文件</span></span><br><span class="line"><span class="meta">mybatis-plus.config-location</span>=<span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure><p>Spring MVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-mapperLocations"><a href="#4-1-2-mapperLocations" class="headerlink" title="4.1.2    mapperLocations"></a>4.1.2    mapperLocations</h3><p>MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置。</p><p>Spring Boot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定Mapper.xml文件的路径</span></span><br><span class="line"><span class="meta">mybatis-plus.mapper-locations</span>=<span class="string">classpath*:mybatis/*.xml</span></span><br></pre></td></tr></table></figure><p>Spring MVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:mybatis/*.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Maven  多模块项目的扫描路径需以  classpath*: 开头 （即加载多个 jar 包下的 XML 文件）</p></blockquote><p><strong>测试：</strong></p><p>UserMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wgy.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"com.wgy.pojo.User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.findById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-typeAliasesPackage"><a href="#4-1-3-typeAliasesPackage" class="headerlink" title="4.1.3    typeAliasesPackage"></a>4.1.3    typeAliasesPackage</h3><p>MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。</p><p>Spring Boot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实体对象的扫描包</span></span><br><span class="line"><span class="meta">mybatis-plus.type-aliases-package</span>=<span class="string">com.wgy.pojo</span></span><br></pre></td></tr></table></figure><p>Spring MVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.baomidou.mybatisplus.samples.quickstart.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-进阶配置"><a href="#4-2-进阶配置" class="headerlink" title="4.2    进阶配置"></a>4.2    进阶配置</h2><p>本部分（Configuration）的配置大都为 MyBatis 原生支持的配置，这意味着您可以通过 MyBatis XML 配置文件的形式进行配置。</p><h3 id="4-2-1-mapUnderscoreToCamelCase"><a href="#4-2-1-mapUnderscoreToCamelCase" class="headerlink" title="4.2.1    mapUnderscoreToCamelCase"></a>4.2.1    mapUnderscoreToCamelCase</h3><p>类型： boolean</p><p>默认值： true</p><p>是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射。</p><blockquote><p>注意：</p><p>此属性在 MyBatis 中原默认值为 false，在 MyBatis-Plus 中，此属性也将用于生成最终的 SQL 的 select body</p><p>如果您的数据库命名符合规则无需使用  @TableField 注解指定数据库字段名</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭自动驼峰映射，该参数不能和mybatis-plus.config-location同时存在</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.map-underscore-to-camel-case</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-cacheEnabled"><a href="#4-2-2-cacheEnabled" class="headerlink" title="4.2.2    cacheEnabled"></a>4.2.2    cacheEnabled</h3><p>类型： boolean</p><p>默认值： true</p><p>全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.cache-enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h2 id="4-3-DB-策略配置"><a href="#4-3-DB-策略配置" class="headerlink" title="4.3    DB 策略配置"></a>4.3    DB 策略配置</h2><h3 id="4-3-1-idType"><a href="#4-3-1-idType" class="headerlink" title="4.3.1    idType"></a>4.3.1    idType</h3><p>类型： com.baomidou.mybatisplus.annotation.IdType</p><p>默认值： ID_WORKER</p><p>全局默认主键类型，设置后，即可省略实体对象中的@TableId(type = IdType.AUTO)配置。</p><p>SpringBoot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局的id生成策略</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.id-type</span>=<span class="string">auto</span></span><br></pre></td></tr></table></figure><p>SpringMVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"globalConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbConfig"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idType"</span> <span class="attr">value</span>=<span class="string">"AUTO"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-tablePrefix"><a href="#4-3-2-tablePrefix" class="headerlink" title="4.3.2    tablePrefix"></a>4.3.2    tablePrefix</h3><p>类型： String</p><p>默认值： null</p><p>表名前缀，全局配置后可省略 @TableName()配置。</p><p>SpringBoot：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局的表名的前缀</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.table-prefix</span>=<span class="string">tb_</span></span><br></pre></td></tr></table></figure><p>SpringMVC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"globalConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbConfig"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idType"</span> <span class="attr">value</span>=<span class="string">"AUTO"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tablePrefix"</span> <span class="attr">value</span>=<span class="string">"tb_"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-条件构造器"><a href="#5-条件构造器" class="headerlink" title="5.    条件构造器"></a>5.    条件构造器</h1><p>在MP中，Wrapper接口的实现类关系如下：</p><p><img src="https://img-blog.csdnimg.cn/20200929181524254.png" alt="image-20200929174953137"></p><p>可以看到， AbstractWrapper和AbstractChainWrapper是重点实现，接下来我们重点学习AbstractWrapper以及其子类。</p><blockquote><p>说明:</p><p>QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类 用于生成 sql的 where 条件, entity 属性也用于生成 sql 的 where 条件 注意: entity 生成的 where 条件与 使用各个 api 生成的 where 条件<strong>没有任何关联行为</strong></p></blockquote><p>官网文档地址： <a href="https://mybatis.plus/guide/wrapper.html" target="_blank" rel="noopener">https://mybatis.plus/guide/wrapper.html</a></p><h2 id="5-1-allEq"><a href="#5-1-allEq" class="headerlink" title="5.1    allEq"></a>5.1    allEq</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq (Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, boolean null2IsNull)</span><br><span class="line">allEq(boolean condition, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br></pre></td></tr></table></figure><p>全部eq(或个别isNull )</p><blockquote><p>个别参数说明:  params :  key 为数据库字段名, value 为字段值  null2IsNull : </p><p>为 true 则在 map 的 value 为null 时调用 isNull 方法,为 false 时则忽略 value 为 null 的</p><p>例 1:  <code>allEq({id:1,name:&quot; 老王&quot;,age:null}) ---&gt; id = 1 and name = &#39; 老王&#39; and age is null</code><br>例 2:  <code>allEq({id:1,name:&quot; 老王&quot;,age:null}, false) ---&gt; id = 1 and name = &#39; 老王&#39;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq (BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br><span class="line">allEq(boolean condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull)</span><br></pre></td></tr></table></figure><blockquote><p>个别参数说明:  filter : 过滤函数,是否允许字段传入比对条件中  params 与  null2IsNull : 同上</p><p>例 1:  allEq((k,v)  -&gt; k.indexOf(“a”) &gt; 0, {id:1,name:”老王”,age:null}) —&gt; name = ‘老王’ and age is null<br>例 2:  allEq((k,v)  -&gt; k.indexOf(“a”) &gt; 0, {id:1,name:”老王”,age:null}, false) —&gt; name =’老王’</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * allEq条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAllEq</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"name"</span>, <span class="string">"李四"</span>);</span><br><span class="line">        params.put(<span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">        params.put(<span class="string">"password"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        null2IsNull : 为 true 则在 map 的 value 为null 时调用 isNull</span></span><br><span class="line"><span class="comment">//        SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE password IS NULL AND name = ? AND age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq(params);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        为 false 时则忽略 value 为 null 的</span></span><br><span class="line"><span class="comment">//        SELECT id, user_name, name, age, email AS mail FROM tb_user WHERE name = ?AND age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq(params, false);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        SELECT id, user_name, name, age, email AS mail FROM tb_user WHERE age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq((k, v) -&gt; (k.equals("age") || k.equals("id")) , params);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        SELECT id, user_name, name, age, email AS mail FROM tb_user WHERE name = ?AND age = ?</span></span><br><span class="line">        wrapper.allEq((k, v) -&gt; (k.equals(<span class="string">"age"</span>) || k.equals(<span class="string">"id"</span>) || k.equals(<span class="string">"name"</span>)), params);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-基本比较操作"><a href="#5-2-基本比较操作" class="headerlink" title="5.2    基本比较操作"></a>5.2    基本比较操作</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>eq</td><td>等于 =</td></tr><tr><td>ne</td><td>不等于 &lt;&gt;</td></tr><tr><td>gt</td><td>大于 &gt;</td></tr><tr><td>ge</td><td>大于等于 &gt;=</td></tr><tr><td>lt</td><td>小于 &lt;</td></tr><tr><td>le</td><td>小于等于 &lt;=</td></tr><tr><td>between</td><td>BETWEEN  值1 AND 值2</td></tr><tr><td>notBetween</td><td>NOT BETWEEN  值1 AND 值2</td></tr><tr><td>in</td><td>字段 IN (value.get(0), value.get(1), …)</td></tr><tr><td>notIn</td><td>字段 NOT IN (v0, v1, …)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SELECT id,user_name,password,name,age,email FROM tb_user WHERE password = ? AND age &gt;= ? AND name IN (?,?,?)</span></span><br><span class="line">        wrapper.eq(<span class="string">"password"</span>, <span class="string">"123456"</span>)</span><br><span class="line">                .ge(<span class="string">"age"</span>, <span class="number">20</span>)</span><br><span class="line">                .in(<span class="string">"name"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"赵六"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-模糊查询"><a href="#5-3-模糊查询" class="headerlink" title="5.3    模糊查询"></a>5.3    模糊查询</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>like</td><td>LIKE ‘% 值%’<br/>例 :  like(“name”, “ 王”) —&gt; name like ‘% 王%’</td></tr><tr><td>notLike</td><td>NOT LIKE ‘% 值%’<br/>例 :  notLike(“name”, “ 王”) —&gt; name not like ‘% 王%’</td></tr><tr><td>likeLeft</td><td>LIKE ‘% 值’<br/>例 :  likeLeft(“name”, “ 王”) —&gt; name like ‘% 王’</td></tr><tr><td>likeRight</td><td>LIKE ‘ 值%’<br/>例 :  likeRight(“name”, “ 王”) —&gt; name like ‘ 王%’</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name LIKE ?</span></span><br><span class="line">        <span class="comment">// 参数：%五(String)</span></span><br><span class="line">        wrapper.likeLeft(<span class="string">"name"</span>, <span class="string">"五"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-排序"><a href="#5-4-排序" class="headerlink" title="5.4    排序"></a>5.4    排序</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>orderBy</td><td>排序： ORDER BY 字段, …<br/>例 :  orderBy(true, true, “id”, “name”) —&gt; order by id ASC,name ASC</td></tr><tr><td>orderByAsc</td><td>排序： ORDER BY 字段, … ASC<br/>例 :  orderByAsc(“id”, “name”) —&gt; order by id ASC,name ASC</td></tr><tr><td>orderByDesc</td><td>排序： ORDER BY 字段, … DESC<br/>例 :  orderByDesc(“id”, “name”) —&gt; order by id DESC,name DESC</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderByAgeDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//按照年龄倒序排序</span></span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user ORDER BY age DESC</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-逻辑查询"><a href="#5-5-逻辑查询" class="headerlink" title="5.5    逻辑查询"></a>5.5    逻辑查询</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>or</td><td>拼接 OR<br/>主动调用 or 表示紧接着下一个方法不是用 and 连接!(不调用 or 则默认为使用 and 连接)</td></tr><tr><td>and</td><td>AND  嵌套<br/>例 :  and(i  -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”)) —&gt; and (name = ‘李白’ and status&lt;&gt; ‘活着’)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">"name"</span>, <span class="string">"王五"</span>).or().eq(<span class="string">"age"</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-select"><a href="#2-6-select" class="headerlink" title="2.6    select"></a>2.6    select</h2><p>在MP查询中，默认查询所有的字段，如果有需要也可以通过select方法进行指定字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用CRUD</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//SELECT id,name,age FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">"name"</span>, <span class="string">"王五"</span>)</span><br><span class="line">                .or()</span><br><span class="line">                .eq(<span class="string">"age"</span>, <span class="number">21</span>)</span><br><span class="line">                .select(<span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"age"</span>); <span class="comment">//指定查询的字段</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-了解Mybatis-Plus&quot;&gt;&lt;a href=&quot;#1-了解Mybatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;1.    了解Mybatis-Plus&quot;&gt;&lt;/a&gt;1.    了解Mybatis-Plus&lt;/h1&gt;&lt;h2 id=&quot;1-1-Mybatis-Plus介绍&quot;&gt;&lt;a href=&quot;#1-1-Mybatis-Plus介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1    Mybatis-Plus介绍&quot;&gt;&lt;/a&gt;1.1    Mybatis-Plus介绍&lt;/h2&gt;&lt;p&gt;MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;p&gt;官网： &lt;a href=&quot;https://mybatis.plus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.plus/&lt;/a&gt; 或 &lt;a href=&quot;https://mp.baomidou.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.baomidou.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="https://wgy1993.gitee.io/tags/MyBatis/"/>
    
      <category term="Mybatis-Plus" scheme="https://wgy1993.gitee.io/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringData(二)</title>
    <link href="https://wgy1993.gitee.io/archives/dc35f26.html"/>
    <id>https://wgy1993.gitee.io/archives/dc35f26.html</id>
    <published>2020-09-27T11:25:48.000Z</published>
    <updated>2020-09-27T11:31:55.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringData-Redis"><a href="#1-SpringData-Redis" class="headerlink" title="1.    SpringData Redis"></a>1.    SpringData Redis</h1><h2 id="1-1-SpringData-Redis-简介"><a href="#1-1-SpringData-Redis-简介" class="headerlink" title="1.1    SpringData Redis 简介"></a>1.1    SpringData Redis 简介</h2><p>Redis是一个基于内存的数据结构存储系统，它可以用作数据库或者缓存。它支持多种类型的数据结构，这些数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和Zset（有序集合）。</p><a id="more"></a><p>SpringData Redis的作用是通过一段简单的配置即可访问redis服务，它的底层是对java提供的redis开发包(比如jedis等)进行了高度封装，主要提供了如下功能：</p><ul><li>连接池自动管理，提供了一个高度封装的 RedisTemplate类,基于这个类的对象可以对redis进行各种操作</li><li>针对 jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口<ul><li>ValueOperations ：简单字符串类型数据操作</li><li>SetOperations ：set类型数据操作</li><li>ZSetOperations ：zset类型数据操作</li><li>HashOperations ：map类型的数据操作</li><li>ListOperations ：list类型的数据操作</li></ul></li></ul><h2 id="1-2-Redis-环境搭建"><a href="#1-2-Redis-环境搭建" class="headerlink" title="1.2    Redis 环境搭建"></a>1.2    Redis 环境搭建</h2><h3 id="1-2-1-安装redis的依赖环境"><a href="#1-2-1-安装redis的依赖环境" class="headerlink" title="1.2.1    安装redis的依赖环境"></a>1.2.1    安装redis的依赖环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure><h3 id="1-2-2-上传安装包"><a href="#1-2-2-上传安装包" class="headerlink" title="1.2.2    上传安装包"></a>1.2.2    上传安装包</h3><p>获取到安装包,并将它上传到linux的/usr/local/src/目录下</p><h3 id="1-2-3-解压"><a href="#1-2-3-解压" class="headerlink" title="1.2.3    解压"></a>1.2.3    解压</h3><p>解压安装包,得到一个redis-5.0.4目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.4.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-2-4-编译"><a href="#1-2-4-编译" class="headerlink" title="1.2.4    编译"></a>1.2.4    编译</h3><p>进入redis目录,在目录下执行make命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-5.0.4</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="1-2-5-安装"><a href="#1-2-5-安装" class="headerlink" title="1.2.5    安装"></a>1.2.5    安装</h3><p>执行安装命令,注意此处指定了安装目录为/usr/local/redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/usr/<span class="built_in">local</span>/redis install</span><br></pre></td></tr></table></figure><h3 id="1-2-6-复制配置文件"><a href="#1-2-6-复制配置文件" class="headerlink" title="1.2.6    复制配置文件"></a>1.2.6    复制配置文件</h3><p>将配置文件复制到redis的安装目录的bin目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/bin/</span><br><span class="line"></span><br><span class="line">cp /usr/<span class="built_in">local</span>/src/redis-5.0.4/redis.conf ./</span><br></pre></td></tr></table></figure><h3 id="1-2-7-修改-redis的配置文件"><a href="#1-2-7-修改-redis的配置文件" class="headerlink" title="1.2.7    修改 redis的配置文件"></a>1.2.7    修改 redis的配置文件</h3><p>修改redis的配置文件,将注解绑定和保护模式关闭,方便我们从客户端连接测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927191822227.png" alt="image-20200927172919574"></p><h3 id="1-2-8-启动-redis服务"><a href="#1-2-8-启动-redis服务" class="headerlink" title="1.2.8    启动 redis服务"></a>1.2.8    启动 redis服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;src&#x2F;redis-server redis.conf</span><br></pre></td></tr></table></figure><h2 id="1-3-SpringData-Redis-入门案例"><a href="#1-3-SpringData-Redis-入门案例" class="headerlink" title="1.3    SpringData Redis 入门案例"></a>1.3    SpringData Redis 入门案例</h2><h3 id="1-3-1-创建工程，引入坐标"><a href="#1-3-1-创建工程，引入坐标" class="headerlink" title="1.3.1    创建工程，引入坐标"></a>1.3.1    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-创建配置文件"><a href="#1-3-2-创建配置文件" class="headerlink" title="1.3.2    创建配置文件"></a>1.3.2    创建配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Jedis连接池参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大空闲连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最小空闲连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Jedis连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:hostName</span>=<span class="string">"192.168.142.128"</span> <span class="attr">p:port</span>=<span class="string">"6379"</span> <span class="attr">p:poolConfig-ref</span>=<span class="string">"jedisPoolConfig"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Redis的模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置jedis的连接工厂,目的是为了获取jedis连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置非hash类型的序列化器--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="keySerializer"&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="valueSerializer"&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-测试"><a href="#1-3-3-测试" class="headerlink" title="1.3.3    测试"></a>1.3.3    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Redis 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试:向redis保存一条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"name"</span>, <span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        String name = (String) redisTemplate.opsForValue().get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-SpringData-Redis-的序列化器"><a href="#1-4-SpringData-Redis-的序列化器" class="headerlink" title="1.4    SpringData Redis 的序列化器"></a>1.4    SpringData Redis 的序列化器</h2><p>通过Redis提供的客户端查看入门案例中存入redis的数据</p><p><img src="https://img-blog.csdnimg.cn/20200927191842166.png" alt="image-20200927173337242"></p><p>这时候会发现，存入的数据并不是简单的字符串，而是一些类似于二进制的数据，这是怎么回事呢？</p><p>原来，SpringData Redis在保存数据的时候，底层有一个序列化器在工作，它会将要保存的数据（键和值）按照一定的规则进行序列化操作后再进行存储。spring-data-redis提供如下几种序列化器：</p><ul><li>StringRedisSerializer:  简单的字符串序列化</li><li>GenericToStringSerializer:  可以将任何对象泛化为字符串并序列化</li><li>Jackson2JsonRedisSerializer:  序列化对象为json字符串</li><li>GenericJackson2JsonRedisSerializer: 功能同上,但是更容易反序列化</li><li>OxmSerializer:  序列化对象为xml字符串</li><li>JdkSerializationRedisSerializer:  序列化对象为二进制数据</li></ul><p>RedisTemplate默认使用的是JdkSerializationRedisSerializer对数据进行序列化。</p><p>那么如何选择自己想要的序列化器呢？SpringData提供了两种方式：</p><p>1、通过配置文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Redis的模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置jedis的连接工厂,目的是为了获取jedis连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置非hash类型的序列化器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、通过RedisTemplate设定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">    redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取操作简单字符串类型数据的数据句柄</span></span><br><span class="line">    ValueOperations operations = redisTemplate.opsForValue();</span><br><span class="line">    operations.set(<span class="string">"name3"</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    String name = (String) redisTemplate.opsForValue().get(<span class="string">"name3"</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-SpringData-Redis-运行原理分析"><a href="#1-5-SpringData-Redis-运行原理分析" class="headerlink" title="1.5    SpringData Redis 运行原理分析"></a>1.5    SpringData Redis 运行原理分析</h2><p>我们从入门案例中已经知道SpringData Redis操作Redis服务器只要是通过RestTemplate实现的，那么RestTemplate底层到底是如何操作redis的呢，下面我们通过源码追踪的形式看一看。</p><p>1、首先看配置文件中关于RestTemplate的bean的配置，可以看到在RedisTemplate的bean声明中注入了一个JedisConnectionFactory实例，顾名思义，这个连接工厂是用来获取Jedis连接的，那么通过这种方式RedisTemplate就可以拿到操作Redis服务器的句柄了。</p><p><img src="https://img-blog.csdnimg.cn/20200927191901197.png" alt="image-20200927173932509"></p><p>2、使用debug运行入门案例，观察创建好的RestTemplate实例，可以看到里面主要有序列化器和redis的连接信息，基于这些，我们就可以对redis进行操作了</p><p><img src="https://img-blog.csdnimg.cn/20200927191918278.png" alt="image-20200927173949271"></p><p>3 、跟踪进入set方法，我们可以看到set方法中使用了一个connection来进行操作，这个connection的类型是JedisConnetion，而这个connection肯定是通过配置文件配置的JedisConnectionFactory产生的，也就是底层开始调用jedis的api了。</p><p><img src="https://img-blog.csdnimg.cn/20200927191935597.png" alt="image-20200927174006887"></p><p>4 、继续追踪set方法，选择JedisStringCommands实现</p><p><img src="https://img-blog.csdnimg.cn/20200927191951533.png" alt="image-20200927174017693"></p><p>5 、继续之宗set方法，可以看到底层已经获取到了jedis的实例，再调用set方法已经在调jedis的set了</p><p><img src="https://img-blog.csdnimg.cn/20200927192009654.png" alt="image-20200927174028688"></p><p>6 、再追踪一步，就会发现，底层最终调用的是jedis的原生API，setCommand方法，这个方法就是jedis提供的对redis的各种操作命令了。</p><p><img src="https://img-blog.csdnimg.cn/20200927192027668.png" alt="image-20200927174042513"></p><p>至此，我们的分析完毕。得到的结论就是：</p><p>SpringData提供redisTemplate就是在原生的Jedis或者其他操作redis的技术上做的一层封装，它屏蔽掉了这些原生技术的实现细节，统一了调用接口，使得我们的操作更加简单明了。</p><h2 id="1-6-SpringData-Redis-常见操作"><a href="#1-6-SpringData-Redis-常见操作" class="headerlink" title="1.6    SpringData Redis 常见操作"></a>1.6    SpringData Redis 常见操作</h2><p>本章节我们来学习如何使用SpringData Redis来操作Redis的各种数据类型.</p><p>在Redis中有五种常见类型,SpringData Redis对每一种数据类型都提供了一个xxxOperations的API,他们分别是:</p><ul><li>ValueOperations : 用来操作字符串类型数据</li><li>HashOperations: 用来操作hash类型数据</li><li>ListOperations: 用来操作list类型数据</li><li>SetOperations: 用来操作set类型数据</li><li>ZSetOperations: 用来操作zset类型数据</li></ul><h3 id="1-6-1-String类型"><a href="#1-6-1-String类型" class="headerlink" title="1.6.1    String类型"></a>1.6.1    String类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisStringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ValueOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向数据库中保存name--heima</span></span><br><span class="line">        operations.set(<span class="string">"name"</span>, <span class="string">"heima"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相关数据库保存name1--heima1  有效时间为10s</span></span><br><span class="line">        operations.set(<span class="string">"name1"</span>, <span class="string">"heima1"</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换 heima    ---&gt;   heXXa   offset 索引位置是从0开始</span></span><br><span class="line">        operations.set(<span class="string">"name"</span>, <span class="string">"XX"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当key不存在的时候,执行保存操作;当key存在的时候,什么都不做</span></span><br><span class="line">        operations.setIfAbsent(<span class="string">"name1"</span>, <span class="string">"heima"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量保存</span></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"name2"</span>, <span class="string">"heima2"</span>);</span><br><span class="line">        map.put(<span class="string">"name3"</span>, <span class="string">"heima3"</span>);</span><br><span class="line">        map.put(<span class="string">"name4"</span>, <span class="string">"heima4"</span>);</span><br><span class="line"></span><br><span class="line">        operations.multiSet(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//追加 当key存在时,会执行追加操作;当key不存在时,会执行保存操作</span></span><br><span class="line">        operations.append(<span class="string">"name5"</span>, <span class="string">"Heima"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据key获取value</span></span><br><span class="line">        String value = operations.get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(value);<span class="comment">//heXXaHeima</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先根据key获取value,然后再根据value进行截取,从start位置截取到end位置[包含start和end]</span></span><br><span class="line">        String value2 = operations.get(<span class="string">"name"</span>, <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(value2);<span class="comment">//heXXaHeima--&gt;Hei</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量获取</span></span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        keys.add(<span class="string">"name2"</span>);</span><br><span class="line">        keys.add(<span class="string">"name3"</span>);</span><br><span class="line">        keys.add(<span class="string">"name4"</span>);</span><br><span class="line">        List&lt;String&gt; values = operations.multiGet(keys);</span><br><span class="line">        <span class="keyword">for</span> (String s : values) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据key获取value的长度</span></span><br><span class="line">        Long size = operations.size(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自增</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.set(<span class="string">"age"</span>, <span class="string">"18"</span>);</span><br><span class="line">        operations.increment(<span class="string">"age"</span>);<span class="comment">//自增1---&gt;19</span></span><br><span class="line">        System.out.println(operations.get(<span class="string">"age"</span>));</span><br><span class="line">        operations.increment(<span class="string">"age"</span>, <span class="number">5</span>);<span class="comment">//自增5</span></span><br><span class="line">        System.out.println(operations.get(<span class="string">"age"</span>));<span class="comment">//----&gt;24</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//自减</span></span><br><span class="line">        operations.decrement(<span class="string">"age"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单个删除</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        keys.add(<span class="string">"name2"</span>);</span><br><span class="line">        keys.add(<span class="string">"name3"</span>);</span><br><span class="line">        keys.add(<span class="string">"name4"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量删除</span></span><br><span class="line">        redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-Hash-类型"><a href="#1-6-2-Hash-类型" class="headerlink" title="1.6.2    Hash 类型"></a>1.6.2    Hash 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hash类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisHashTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HashOperations&lt;String, String, Article&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"程序员"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        operations.put(<span class="string">"article"</span>, <span class="string">"3"</span>, article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断hashkey是否存在</span></span><br><span class="line">        Boolean flag = operations.hasKey(<span class="string">"article"</span>, <span class="string">"3"</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据key和hashkay获取操作</span></span><br><span class="line">        Article article = operations.get(<span class="string">"article"</span>, <span class="string">"2"</span>);</span><br><span class="line">        System.out.println(article);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据key获取所有的hashkey</span></span><br><span class="line">        Set&lt;String&gt; set = operations.keys(<span class="string">"article"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = operations.values(<span class="string">"article"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article art : articles) &#123;</span><br><span class="line">            System.out.println(art);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Article&gt; map = operations.entries(<span class="string">"article"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Article&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当hash中的数据全部被删除后,整个hash就没了</span></span><br><span class="line">        operations.delete(<span class="string">"article"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-List-类型"><a href="#1-6-3-List-类型" class="headerlink" title="1.6.3    List 类型"></a>1.6.3    List 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ListOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从左边添加一个元素</span></span><br><span class="line">        operations.leftPush(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">        <span class="comment">//从左边添加多个元素</span></span><br><span class="line">        operations.leftPushAll(<span class="string">"students"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhaoliu"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从右边添加一个元素</span></span><br><span class="line">        operations.rightPush(<span class="string">"students"</span>, <span class="string">"zhangsan1"</span>);</span><br><span class="line">        <span class="comment">//从右边添加多个元素</span></span><br><span class="line">        operations.rightPushAll(<span class="string">"students"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhaoliu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据key和索引进行查询</span></span><br><span class="line">        <span class="comment">//0和正数代表从左边开始    0  1  2</span></span><br><span class="line">        <span class="comment">//负数代表从右边开始       -1   -2  -3</span></span><br><span class="line">        String student = operations.index(<span class="string">"students"</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">        String student1 = operations.index(<span class="string">"students"</span>, -<span class="number">2</span>);</span><br><span class="line">        System.out.println(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//范围查询</span></span><br><span class="line">        <span class="comment">//根据key  [start,end]  包括首尾</span></span><br><span class="line">        List&lt;String&gt; students = operations.range(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : students) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从左边删除第一个元素</span></span><br><span class="line">        <span class="comment">//String s = operations.leftPop("students");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从右边删除第一个元素</span></span><br><span class="line">        <span class="comment">//operations.rightPop("students");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// count &gt; 0：删除左边起第几个等于指定值的元素</span></span><br><span class="line">        <span class="comment">// count &lt; 0：删除右边起第几个等于指定值的元素</span></span><br><span class="line">        <span class="comment">// count = 0：删除所有等于value的元素。</span></span><br><span class="line">        <span class="comment">//删除左边起第二个wangwu</span></span><br><span class="line">        operations.remove(<span class="string">"students"</span>, <span class="number">2</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-4-Set-类型"><a href="#1-6-4-Set-类型" class="headerlink" title="1.6.4    Set 类型"></a>1.6.4    Set 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SetOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询所有元素</span></span><br><span class="line">        Set&lt;String&gt; students = operations.members(<span class="string">"students"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机获取一个元素</span></span><br><span class="line">        String student = operations.randomMember(<span class="string">"students"</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机多个元素[可能会重复]</span></span><br><span class="line">        List&lt;String&gt; stus = operations.randomMembers(<span class="string">"students"</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String stu : stus) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//移除元素,并返回移除成功个数</span></span><br><span class="line">        Long count = operations.remove(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="string">"wangwu"</span>, <span class="string">"sunliu"</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机移除指定集合中的多少个元素</span></span><br><span class="line">        List&lt;String&gt; students = operations.pop(<span class="string">"students"</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多集合操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMoreSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.add(<span class="string">"names1"</span>, <span class="string">"zhangsan"</span>, <span class="string">"li"</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">        operations.add(<span class="string">"names2"</span>, <span class="string">"zhangsan"</span>, <span class="string">"li"</span>, <span class="string">"zhaoliu"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取交集</span></span><br><span class="line">        Set&lt;String&gt; sets1 = operations.intersect(<span class="string">"names1"</span>, <span class="string">"names2"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : sets1) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取并集</span></span><br><span class="line">        Set&lt;String&gt; sets2 = operations.union(<span class="string">"names1"</span>, <span class="string">"names2"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : sets2) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取差集[第一个集合中存在,但是在第二个集合中不存在的元素]</span></span><br><span class="line">        Set&lt;String&gt; sets3 = operations.difference(<span class="string">"names2"</span>, <span class="string">"names1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : sets3) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-5-ZSet-类型"><a href="#1-6-5-ZSet-类型" class="headerlink" title="1.6.5    ZSet 类型"></a>1.6.5    ZSet 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ZSet类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-redis.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisZSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ZSetOperations&lt;String, String&gt; operations = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        operations = redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="number">100</span>);</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"lisi"</span>, <span class="number">60</span>);</span><br><span class="line">        operations.add(<span class="string">"students"</span>, <span class="string">"wangwu"</span>, <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分数的增减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//incrementScore 可以用来增减分数  增加就用正数    减少用负数</span></span><br><span class="line">        <span class="comment">//增加分数</span></span><br><span class="line">        operations.incrementScore(<span class="string">"students"</span>, <span class="string">"wangwu"</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//减少分数</span></span><br><span class="line">        operations.incrementScore(<span class="string">"students"</span>, <span class="string">"wangwu"</span>, -<span class="number">70</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个元素的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询一个元素的分数</span></span><br><span class="line">        Double score = operations.score(<span class="string">"students"</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">        System.out.println(score);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询一个元素在集合中的排名   排名从0开始</span></span><br><span class="line">        Long rank = operations.rank(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">        System.out.println(rank);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据一个区间获得一个列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据排名区间来获取元素列表</span></span><br><span class="line">        Set&lt;String&gt; students = operations.range(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; set = operations.rangeWithScores(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : set) &#123;</span><br><span class="line">            System.out.println(tuple.getValue() + <span class="string">"同学,得了"</span> + tuple.getScore() + <span class="string">"分"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据分数区间来获取列表</span></span><br><span class="line">        Set&lt;String&gt; students2 = operations.rangeByScore(<span class="string">"students"</span>, <span class="number">60</span>, <span class="number">90</span>);</span><br><span class="line">        <span class="keyword">for</span> (String student : students2) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; set2 = operations.rangeByScoreWithScores(<span class="string">"students"</span>, <span class="number">60</span>, <span class="number">90</span>);</span><br><span class="line">        <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : set2) &#123;</span><br><span class="line">            System.out.println(tuple.getValue() + <span class="string">"同学,得了"</span> + tuple.getScore() + <span class="string">"分"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//统计一个集合中元素</span></span><br><span class="line">        Long zCard = operations.zCard(<span class="string">"students"</span>);</span><br><span class="line">        System.out.println(zCard);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据一个分数区间统计元素数量</span></span><br><span class="line">        Long count = operations.count(<span class="string">"students"</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据key-value删除  value允许传入多个</span></span><br><span class="line">        operations.remove(<span class="string">"students"</span>, <span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据排名区间删除</span></span><br><span class="line">        operations.removeRange(<span class="string">"students"</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据分数区间删除</span></span><br><span class="line">        operations.removeRangeByScore(<span class="string">"students"</span>, <span class="number">70</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Repository和Template的选用"><a href="#2-Repository和Template的选用" class="headerlink" title="2.    Repository和Template的选用"></a>2.    Repository和Template的选用</h1><p>经过前面的章节，我们学习了SpringData家族中jpa和redis的使用，在感受到SpringData技术使用方便的同时，也隐隐约约感觉有点问题，那就是jpa和redis的使用思路好像不是很一致。</p><p>我们使用SpringDataJpa的时候，采用了继承SpringData提供的一个接口的形式，即 <code>public interface ArticleDao extends JpaRepository&lt;Article,Integer&gt;,JpaSpecificationExecutor&lt;Article&gt;</code> ，但是使用SpingData Redis的时候，却是使用了在实现类中注入一个 redisTemplate 的方式，那么这两种方式到底有什么关系，用哪个更好呢？</p><p>其实这两种方式都可以完成我们对持久层的操作，但是对比两种方式的使用，就会发现：</p><p>第一种方式，直接继承xxxRepository接口，可以不必自己去写实现类，而轻松实现简单的增删改查、分页、排序操作，但是对于非常复杂的查询，用起来就比较的费力了；</p><p>第二种方式，直接使用xxxTemplate，就需要自己写实现类，但是这样增删改查可以自己控制，对于复杂查询来说，用起来更加得心应手。</p><p>所以，两种方式在企业开发中都可能用到，甚至有的项目开发中会同时使用两种方式:对于简单的操作，直接继承Repository接口，对于复杂操作，使用Template完成。所以我们用的时候也要根据实际场景进行灵活选用。</p><h1 id="3-SpringData-ElasticSearch"><a href="#3-SpringData-ElasticSearch" class="headerlink" title="3.    SpringData ElasticSearch"></a>3.    SpringData ElasticSearch</h1><h2 id="3-1-SpringData-ElasticSearch-简介"><a href="#3-1-SpringData-ElasticSearch-简介" class="headerlink" title="3.1    SpringData ElasticSearch 简介"></a>3.1    SpringData ElasticSearch 简介</h2><p>Elasticsearch是一个实时的分布式搜索和分析引擎。它底层封装了Lucene框架,可以提供分布式多用户的全文搜索服务。</p><p>Spring Data ElasticSearch是SpringData技术对ElasticSearch原生API封装之后的产物,它通过对原生API的封装,使得程序员可以简单的对ElasticSearch进行各种操作。</p><h2 id="3-2-ElasticSearch-环境搭建"><a href="#3-2-ElasticSearch-环境搭建" class="headerlink" title="3.2    ElasticSearch 环境搭建"></a>3.2    ElasticSearch 环境搭建</h2><h3 id="3-2-1-安装ElasticSearch"><a href="#3-2-1-安装ElasticSearch" class="headerlink" title="3.2.1    安装ElasticSearch"></a>3.2.1    安装ElasticSearch</h3><h4 id="3-2-1-1-准备工作"><a href="#3-2-1-1-准备工作" class="headerlink" title="3.2.1.1    准备工作"></a>3.2.1.1    准备工作</h4><p>修改进程限制,编辑/etc/security/limits.conf,添加下面的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020092719205071.png" alt="image-20200927175520404"></p><p> 修改系统变量的最大值,编辑/etc/sysctl.conf,添加下面的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count = 655360</span><br></pre></td></tr></table></figure><p>保存修改之后 ,执行 sysctl -p 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h4 id="3-2-1-2-文件上传"><a href="#3-2-1-2-文件上传" class="headerlink" title="3.2.1.2    文件上传"></a>3.2.1.2    文件上传</h4><p>上传文件到src目录下</p><h4 id="3-2-1-3-文件解压"><a href="#3-2-1-3-文件解压" class="headerlink" title="3.2.1.3    文件解压"></a>3.2.1.3    文件解压</h4><p>直接将软件解压到安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-5.6.8.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><h4 id="3-2-1-4-添加用户"><a href="#3-2-1-4-添加用户" class="headerlink" title="3.2.1.4    添加用户"></a>3.2.1.4    添加用户</h4><p>新增加一个es用户,并将elasticsearch-5.6.8目录的所属用户和用户组改成es</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd es</span><br><span class="line"></span><br><span class="line">chown es:es -R ../elasticsearch-5.6.8</span><br></pre></td></tr></table></figure><p>切换到新创建的 es用户,执行后续操作</p><h4 id="3-2-1-5-修改配置"><a href="#3-2-1-5-修改配置" class="headerlink" title="3.2.1.5    修改配置"></a>3.2.1.5    修改配置</h4><p>编辑配置文件,修改数据文件和日志文件的存储位置以及es的绑定地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-5.6.8/config/</span><br><span class="line"></span><br><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927192105484.png" alt="image-20200927175815186"></p><h4 id="3-2-1-6-启动-elasticSearch"><a href="#3-2-1-6-启动-elasticSearch" class="headerlink" title="3.2.1.6    启动 elasticSearch"></a>3.2.1.6    启动 elasticSearch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-5.6.8/bin/</span><br><span class="line"></span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure><h4 id="3-2-1-7-访问测试"><a href="#3-2-1-7-访问测试" class="headerlink" title="3.2.1.7    访问测试"></a>3.2.1.7    访问测试</h4><p>通过服务器的9200端口访问,得到下面的结果,证明安装成功.</p><p><img src="https://img-blog.csdnimg.cn/20200927192120969.png" alt="image-20200927175910126"></p><h3 id="3-2-2-安装-Head插件"><a href="#3-2-2-安装-Head插件" class="headerlink" title="3.2.2    安装 Head插件"></a>3.2.2    安装 Head插件</h3><h4 id="3-2-2-1-安装nodeJS"><a href="#3-2-2-1-安装nodeJS" class="headerlink" title="3.2.2.1    安装nodeJS"></a>3.2.2.1    安装nodeJS</h4><p>将nodeJS的安装包上传到/usr/local/src下,然后解压到/usr/local下,然后将npm和node建立软连接到/usr/local/bin/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf node-v10.16.0-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-安装-cnpm"><a href="#3-2-2-2-安装-cnpm" class="headerlink" title="3.2.2.2    安装 cnpm"></a>3.2.2.2    安装 cnpm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/cnpm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><h4 id="3-2-2-3-安装-grunt"><a href="#3-2-2-3-安装-grunt" class="headerlink" title="3.2.2.3    安装 grunt"></a>3.2.2.3    安装 grunt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v10.16.0-linux-x64/bin/grunt /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><h4 id="3-2-2-4-安装-head插件"><a href="#3-2-2-4-安装-head插件" class="headerlink" title="3.2.2.4    安装 head插件"></a>3.2.2.4    安装 head插件</h4><p>上传head插件到/usr/local/src/下,然后解压到/usr/local下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-head-master.zip</span><br><span class="line"></span><br><span class="line">cp -R elasticsearch-head-master /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure><h4 id="3-2-2-5-安装-head插件所需依赖"><a href="#3-2-2-5-安装-head插件所需依赖" class="headerlink" title="3.2.2.5    安装 head插件所需依赖"></a>3.2.2.5    安装 head插件所需依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-head-master</span><br><span class="line"></span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><h4 id="3-2-2-6-修改-elasticsearch的配置"><a href="#3-2-2-6-修改-elasticsearch的配置" class="headerlink" title="3.2.2.6    修改 elasticsearch的配置"></a>3.2.2.6    修改 elasticsearch的配置</h4><p>编辑配置文件:/usr/local/elasticsearch-5.6.8/config/elasticsearch.yml,添加跨域请求允许,即增加以下两行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>修改完毕之后 ,要对elasticsearch进行重启</p><h4 id="3-2-2-7-启动head"><a href="#3-2-2-7-启动head" class="headerlink" title="3.2.2.7    启动head"></a>3.2.2.7    启动head</h4><p>在head目录下启动插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt server</span><br></pre></td></tr></table></figure><h4 id="3-2-2-8-访问测试"><a href="#3-2-2-8-访问测试" class="headerlink" title="3.2.2.8    访问测试"></a>3.2.2.8    访问测试</h4><p>通过服务器的9100端口访问,得到下面的结果,证明安装成功.</p><p><img src="https://img-blog.csdnimg.cn/2020092719213853.png" alt="image-20200927180434153"></p><h3 id="3-2-3-安装-IK分词器"><a href="#3-2-3-安装-IK分词器" class="headerlink" title="3.2.3    安装 IK分词器"></a>3.2.3    安装 IK分词器</h3><h4 id="3-2-3-1-说明"><a href="#3-2-3-1-说明" class="headerlink" title="3.2.3.1    说明"></a>3.2.3.1    说明</h4><p>ES默认的中文分词器是将每一个汉字作为一个词，这显然不合适，而IK分词是一款国人开发的相对简单的中文分词器，它包含大量的中文词，而且支持自定义分词。</p><p>ik分词器提供的分词规则：</p><ul><li>ik_max_word ：会将文本做最细粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国、中华人民、中华、华人、人民共和国、人民、共和国、大会堂、大会、会堂等词语。</li><li>ik_smart ：会做最粗粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为中华人民共和国、人民大会堂</li></ul><p>两种分词器使用的最佳实践是：索引时用ik_max_word，在搜索时用ik_smart。即：索引时最大化的将文章内容分词，搜索时更精确的搜索到想要的结果。</p><h4 id="3-2-3-2-安装"><a href="#3-2-3-2-安装" class="headerlink" title="3.2.3.2    安装"></a>3.2.3.2    安装</h4><p>第一步:下载得到ik分词器的安装包,将其解压得到有一个文件夹,并将文件夹重命名为ik</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-analysis-ik-5.6.8.zip</span><br></pre></td></tr></table></figure><p>第二步 :将elastaicsearch文件夹拷贝到elastaicsearch-5.6.8下的plugins目录下,并重命名为ik</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r elasticsearch /usr/<span class="built_in">local</span>/elasticsearch-5.6.8/plugins/ik</span><br></pre></td></tr></table></figure><p>第三步 :重新启动elasticsearch即可加载IK分词器</p><p>第四部:测试</p><p>http://服务地址:9200/_analyze?analyzer=ik_smart&amp;pretty=true&amp;text=我是程序员</p><p><img src="https://img-blog.csdnimg.cn/20200927192155707.png" alt="image-20200927180741599"></p><h2 id="3-3-ElasticSearch-基础知识回顾"><a href="#3-3-ElasticSearch-基础知识回顾" class="headerlink" title="3.3    ElasticSearch 基础知识回顾"></a>3.3    ElasticSearch 基础知识回顾</h2><h3 id="3-3-1-核心概念"><a href="#3-3-1-核心概念" class="headerlink" title="3.3.1    核心概念"></a>3.3.1    核心概念</h3><h4 id="3-3-1-1-索引-index"><a href="#3-3-1-1-索引-index" class="headerlink" title="3.3.1.1    索引 index"></a>3.3.1.1    索引 index</h4><p>一个索引就是一个拥有几分相似特征的文档的集合。<strong>索引就类似于关系型数据库中的库的概念。</strong></p><h4 id="3-3-1-2-类型-type"><a href="#3-3-1-2-类型-type" class="headerlink" title="3.3.1.2    类型 type"></a>3.3.1.2    类型 type</h4><p>一个类型是索引中的一个逻辑上的分类/分区。<strong>类型就类似于关系型数据库中的数据表的概念。</strong></p><h4 id="3-3-1-3-映射-mapping"><a href="#3-3-1-3-映射-mapping" class="headerlink" title="3.3.1.3    映射 mapping"></a>3.3.1.3    映射 mapping</h4><p>映射是对类型中的字段的限制。<strong>映射就类似于关系型数据库中的数据表结构的概念。</strong></p><h4 id="3-3-1-4-文档-document"><a href="#3-3-1-4-文档-document" class="headerlink" title="3.3.1.4    文档 document"></a>3.3.1.4    文档 document</h4><p>一个文档是一个可被索引的基础信息单元。<strong>文档就类似于关系型数据库中的行的概念。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ElasticSearch跟关系型数据库中概念的对比：</span><br><span class="line">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</span><br><span class="line">Elasticsearch -&gt; Indices -&gt; Types -&gt; Documents -&gt; Fields</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927192215128.png" alt="image-20200927181707142"></p><h3 id="3-3-2-常见操作"><a href="#3-3-2-常见操作" class="headerlink" title="3.3.2    常见操作"></a>3.3.2    常见操作</h3><h4 id="3-3-2-1-创建工程，引入坐标"><a href="#3-3-2-1-创建工程，引入坐标" class="headerlink" title="3.3.2.1    创建工程，引入坐标"></a>3.3.2.1    创建工程，引入坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--elasticsearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-2-操作测试"><a href="#3-3-2-2-操作测试" class="headerlink" title="3.3.2.2    操作测试"></a>3.3.2.2    操作测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TransportClient client = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置集群名称</span></span><br><span class="line">            Settings settings = Settings.builder().put(<span class="string">"cluster.name"</span>, <span class="string">"wgy-es"</span>).build();<span class="comment">// 集群名</span></span><br><span class="line">            client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">                    .addTransportAddress(</span><br><span class="line">                            <span class="keyword">new</span> TransportAddress(</span><br><span class="line">                                    InetAddress.getByName(<span class="string">"192.168.142.128"</span>), <span class="number">9700</span></span><br><span class="line">                            )</span><br><span class="line">                    );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"初始化失败...."</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        client.admin().indices().prepareCreate(<span class="string">"test"</span>).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引,可以一次性删除多个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        client.admin().indices().prepareDelete(<span class="string">"test"</span>, <span class="string">"springData"</span>).get();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateMappping</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        XContentBuilder builder = XContentFactory.jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(<span class="string">"article"</span>)</span><br><span class="line">                .startObject(<span class="string">"properties"</span>)</span><br><span class="line"></span><br><span class="line">                .startObject(<span class="string">"title"</span>)</span><br><span class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</span><br><span class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</span><br><span class="line">                .field(<span class="string">"analyzer"</span>, <span class="string">"ik_smart"</span>)</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .startObject(<span class="string">"content"</span>)</span><br><span class="line">                .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</span><br><span class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</span><br><span class="line">                .field(<span class="string">"analyzer"</span>, <span class="string">"ik_smart"</span>)</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .startObject(<span class="string">"hits"</span>)</span><br><span class="line">                .field(<span class="string">"type"</span>, <span class="string">"long"</span>)</span><br><span class="line">                .field(<span class="string">"store"</span>, <span class="string">"true"</span>)</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建映射(表结构)</span></span><br><span class="line">        PutMappingRequest mapping = Requests.putMappingRequest(<span class="string">"test"</span>)<span class="comment">//指定索引(库)</span></span><br><span class="line">                .type(<span class="string">"article"</span>)<span class="comment">//指定类型(表)</span></span><br><span class="line">                .source(builder);</span><br><span class="line">        client.admin().indices().putMapping(mapping).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateDocuments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装数据</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"title"</span>, <span class="string">"程序员"</span>);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"程序员其实很低调"</span>);</span><br><span class="line">        map.put(<span class="string">"hits"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文档</span></span><br><span class="line">        client.prepareIndex(<span class="string">"test"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>).setSource(map).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateDocuments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装数据</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"title"</span>, <span class="string">"程序员2"</span>);</span><br><span class="line">        map.put(<span class="string">"content"</span>, <span class="string">"程序员很低调2"</span>);</span><br><span class="line">        map.put(<span class="string">"hits"</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改文档</span></span><br><span class="line">        client.prepareUpdate(<span class="string">"test"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>).setDoc(map).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteDocuments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.prepareDelete(<span class="string">"test"</span>, <span class="string">"article"</span>, <span class="string">"1"</span>).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 设置index type  查询条件,返回一个查询结果对象</span></span><br><span class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"test"</span>).setTypes(<span class="string">"article"</span>)<span class="comment">//设置index和type,允许传入多个</span></span><br><span class="line">                .setQuery(QueryBuilders.matchAllQuery())<span class="comment">//设置查询条件 :查询所有</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 检索的命中对象</span></span><br><span class="line">        SearchHits hits = searchResponse.getHits();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取查询结果数</span></span><br><span class="line">        System.out.println(<span class="string">"总共查询到"</span> + hits.getTotalHits() + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取结果</span></span><br><span class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            SearchHit searchHit = iterator.next();</span><br><span class="line">            System.out.println(searchHit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据title查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//QueryBuilders.termQuery("属性","值[分词之后存在]")</span></span><br><span class="line">        <span class="comment">//1 设置index type  查询条件,返回一个查询结果对象</span></span><br><span class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"test"</span>).setTypes(<span class="string">"article"</span>)<span class="comment">//设置index和type,允许传入多个</span></span><br><span class="line">                .setQuery(QueryBuilders.termQuery(<span class="string">"title"</span>, <span class="string">"员"</span>))<span class="comment">//设置查询条件 :根据title查询</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 检索的命中对象</span></span><br><span class="line">        SearchHits hits = searchResponse.getHits();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取查询结果数</span></span><br><span class="line">        System.out.println(<span class="string">"总共查询到"</span> + hits.getTotalHits() + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取结果</span></span><br><span class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            SearchHit searchHit = iterator.next();</span><br><span class="line">            System.out.println(searchHit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页和排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 设置index type  查询条件,返回一个查询结果对象</span></span><br><span class="line">        SearchResponse searchResponse = client.prepareSearch(<span class="string">"test"</span>).setTypes(<span class="string">"article"</span>)<span class="comment">//设置index和type,允许传入多个</span></span><br><span class="line">                .setQuery(QueryBuilders.matchAllQuery())<span class="comment">//设置查询条件 :查询所有</span></span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">20</span>)<span class="comment">//设置分页的条件 .setFrom(从第几行开始查).setSize(查多少行)</span></span><br><span class="line">                .addSort(<span class="string">"hits"</span>, SortOrder.ASC)<span class="comment">//设置分页条件 .addSort(属性, 排序规则)</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 检索的命中对象</span></span><br><span class="line">        SearchHits hits = searchResponse.getHits();<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取查询结果数</span></span><br><span class="line">        System.out.println(<span class="string">"总共查询到"</span> + hits.getTotalHits() + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取结果</span></span><br><span class="line">        Iterator&lt;SearchHit&gt; iterator = hits.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            SearchHit searchHit = iterator.next();</span><br><span class="line">            System.out.println(searchHit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-SpringData-ElasticSearch-入门案例"><a href="#3-4-SpringData-ElasticSearch-入门案例" class="headerlink" title="3.4    SpringData ElasticSearch 入门案例"></a>3.4    SpringData ElasticSearch 入门案例</h2><h3 id="3-4-1-目标"><a href="#3-4-1-目标" class="headerlink" title="3.4.1    目标"></a>3.4.1    目标</h3><p>通过SpringData ES技术向ElasticSearch数据库存储一条数据</p><h3 id="3-4-2-创建工程，引入坐标"><a href="#3-4-2-创建工程，引入坐标" class="headerlink" title="3.4.2    创建工程，引入坐标"></a>3.4.2    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--elasticsearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring-data-elasticsearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-3-添加配置文件"><a href="#3-4-3-添加配置文件" class="headerlink" title="3.4.3    添加配置文件"></a>3.4.3    添加配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:elasticsearch</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描dao包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:transport-client</span> <span class="attr">id</span>=<span class="string">"client"</span> <span class="attr">cluster-nodes</span>=<span class="string">"192.168.142.128:9700"</span> <span class="attr">cluster-name</span>=<span class="string">"wgy-es"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置搜索模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"elasticsearchTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.elasticsearch.core.ElasticsearchTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"client"</span> <span class="attr">ref</span>=<span class="string">"client"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4-创建实体类"><a href="#3-4-4-创建实体类" class="headerlink" title="3.4.4    创建实体类"></a>3.4.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//indexName指定索引名称   type  指定类型名称</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"test-sd"</span>, type = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">false</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * index：是否设置分词  默认是true</span></span><br><span class="line"><span class="comment">     * analyzer：存储时使用的分词器</span></span><br><span class="line"><span class="comment">     * searchAnalyze：搜索时使用的分词器</span></span><br><span class="line"><span class="comment">     * store：是否存储 默认是false</span></span><br><span class="line"><span class="comment">     * type: 数据类型 默认值是FieldType.Auto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field</span>(analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field</span>(analyzer = <span class="string">"ik_smart"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>, type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line">    <span class="meta">@Field</span>(store = <span class="keyword">true</span>, type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer hits;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-5-自定义-dao接口"><a href="#3-4-5-自定义-dao接口" class="headerlink" title="3.4.5    自定义 dao接口"></a>3.4.5    自定义 dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * 自定义的接口需要继承ElasticsearchRepository&lt;实体类型,主键类型&gt;  基本的crud 分页</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-6-测试"><a href="#3-4-6-测试" class="headerlink" title="3.4.6    测试"></a>3.4.6    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过SpringData ES技术向ElasticSearch数据库存储一条数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引</span></span><br><span class="line">        template.createIndex(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建映射</span></span><br><span class="line">        template.putMapping(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文档</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setTitle(<span class="string">"sd-程序员"</span>);</span><br><span class="line">        article.setContext(<span class="string">"sd-程序员很棒"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存文档</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-SpringData-ElasticSearch-实现CRUD操作"><a href="#3-5-SpringData-ElasticSearch-实现CRUD操作" class="headerlink" title="3.5    SpringData ElasticSearch 实现CRUD操作"></a>3.5    SpringData ElasticSearch 实现CRUD操作</h2><h3 id="3-5-1-增删改"><a href="#3-5-1-增删改" class="headerlink" title="3.5.1    增删改"></a>3.5.1    增删改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过SpringData ES技术向ElasticSearch数据库存储一条数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引</span></span><br><span class="line">        template.createIndex(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建映射</span></span><br><span class="line">        template.putMapping(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文档</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setTitle(<span class="string">"sd-程序员"</span>);</span><br><span class="line">        article.setContext(<span class="string">"sd-程序员很棒"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存文档</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断数据库中是否有你指定的id的文档,如果没有,就进行保存,如果有,就进行更新</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setTitle(<span class="string">"sd-程序员1"</span>);</span><br><span class="line">        article.setContext(<span class="string">"sd-程序员很棒1"</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据主键删除</span></span><br><span class="line">        articleDao.deleteById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-接口方法查询"><a href="#3-5-2-接口方法查询" class="headerlink" title="3.5.2    接口方法查询"></a>3.5.2    接口方法查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Article&gt; all = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : all) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Article&gt; opt = articleDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(opt.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//page代表的页码,从0开始</span></span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        Iterable&lt;Article&gt; all = articleDao.findAll(sort);</span><br><span class="line">        <span class="keyword">for</span> (Article article : all) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页+排序查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>, sort);<span class="comment">//page代表的页码,从0开始</span></span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-命名规则查询"><a href="#3-5-3-命名规则查询" class="headerlink" title="3.5.3    命名规则查询"></a>3.5.3    命名规则查询</h3><p>es的命名规则跟jpa基本一致，常见的如下：</p><table><thead><tr><th>关键字</th><th>命名规则</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>findByField1AndField2</td><td>根据Field1和Field2获得数据</td><td>findByTitleAndContent</td></tr><tr><td>or</td><td>findByField1OrField2</td><td>根据Field1或Field2获得数据</td><td>findByTitleOrContent</td></tr><tr><td>is</td><td>findByField</td><td>根据Field获得数据</td><td>findByTitle</td></tr><tr><td>not</td><td>findByFieldNot</td><td>根据Field获得补集数据</td><td>findByTitleNot</td></tr><tr><td>between</td><td>findByFieldBetween</td><td>获得指定范围的数据</td><td>findByPriceBetween</td></tr><tr><td>lessThanEqual</td><td>findByFieldLessThan</td><td>获得小于等于指定值的数据</td><td>findBy</td></tr></tbody></table><p>下面,我们在dao接口中按照规则进行自定义查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * 自定义的接口需要继承ElasticsearchRepository&lt;实体类型,主键类型&gt;  基本的crud 分页</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleOrContext</span><span class="params">(String title, String context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询(含分页)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleOrContext</span><span class="params">(String title, String context, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData ElasticSearch 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext-es.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitle(<span class="string">"员"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleOrContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleOrContext(<span class="string">"程序员"</span>, <span class="string">"程序员"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题或内容查询(含分页)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleOrContextWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>, sort);<span class="comment">//page代表的页码,从0开始</span></span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleOrContext(<span class="string">"程序员"</span>, <span class="string">"程序员"</span>, pageable);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-SpringData-MongoDB"><a href="#4-SpringData-MongoDB" class="headerlink" title="4.    SpringData MongoDB"></a>4.    SpringData MongoDB</h1><h2 id="4-1-SpringData-MongoDB-简介"><a href="#4-1-SpringData-MongoDB-简介" class="headerlink" title="4.1    SpringData MongoDB 简介"></a>4.1    SpringData MongoDB 简介</h2><p>MongoDB 是一个跨平台的，面向文档的数据库，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的一种格式，因此可以存储比较复杂的数据类型。</p><p>MongoDB主要由文档(document)、集合(collection)、数据库(database)三部分组成</p><ul><li>文档（ document）就相当于关系数据库中的一行记录</li><li>多个文档组成一个集合（ collection），相当于关系数据库的表</li><li>多个集合组织在一起，就是数据库（ database），一个 MongoDB 实例支持多个数据库</li></ul><p><img src="https://img-blog.csdnimg.cn/20200927192241933.png" alt="image-20200927183737768"></p><p>SpringData MongoDB是SpringData技术封装了mongodb-driver技术之后的产物,它可以用更加简单的方式操作MongoDB。</p><h2 id="4-2-MongoDB-环境搭建"><a href="#4-2-MongoDB-环境搭建" class="headerlink" title="4.2    MongoDB 环境搭建"></a>4.2    MongoDB 环境搭建</h2><h3 id="4-2-1-解压"><a href="#4-2-1-解压" class="headerlink" title="4.2.1    解压"></a>4.2.1    解压</h3><p>上传文件到服务器，然后将其解压到/usr/local下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-rhel70-4.0.10.tgz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure><h3 id="4-2-2-创建需要的目录"><a href="#4-2-2-创建需要的目录" class="headerlink" title="4.2.2    创建需要的目录"></a>4.2.2    创建需要的目录</h3><p>进入软件的安装目录下,创建数据存储和日志存储目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb-linux-x86_64-rhel70-4.0.10/</span><br><span class="line"></span><br><span class="line">mkdir data</span><br><span class="line">touch <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-创建配置文件"><a href="#4-2-3-创建配置文件" class="headerlink" title="4.2.3    创建配置文件"></a>4.2.3    创建配置文件</h3><p>进入bin目录,创建mongodb的配置文件mongo.conf ,文件内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/usr/local/mongodb-linux-x86_64-rhel70-4.0.10/data</span><br><span class="line">logpath=/usr/local/mongodb-linux-x86_64-rhel70-4.0.10/log</span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">port=27017</span><br><span class="line">fork=true</span><br></pre></td></tr></table></figure><h3 id="4-2-4-启动-mongodb"><a href="#4-2-4-启动-mongodb" class="headerlink" title="4.2.4    启动 mongodb"></a>4.2.4    启动 mongodb</h3><p>使用./mongod -f mongo.conf 启动服务,见到类似如下提示,证明启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod -f mongo.conf</span><br></pre></td></tr></table></figure><h2 id="4-3-SpringData-MongoDB-入门案例"><a href="#4-3-SpringData-MongoDB-入门案例" class="headerlink" title="4.3    SpringData MongoDB 入门案例"></a>4.3    SpringData MongoDB 入门案例</h2><h3 id="4-3-1-目标"><a href="#4-3-1-目标" class="headerlink" title="4.3.1    目标"></a>4.3.1    目标</h3><p>通过SpringData技术向Mongodb数据库存储一条数据</p><h3 id="4-3-2-创建工程，引入坐标"><a href="#4-3-2-创建工程，引入坐标" class="headerlink" title="4.3.2    创建工程，引入坐标"></a>4.3.2    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-data-mongodb--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-创建配置文件"><a href="#4-3-3-创建配置文件" class="headerlink" title="4.3.3    创建配置文件"></a>4.3.3    创建配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mongo</span>=<span class="string">"http://www.springframework.org/schema/data/mongo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/mongo</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/mongo/spring-mongo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring连接mongodb数据库的配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        host="192.168.142.128" 指定mongodb服务所在主机地址</span></span><br><span class="line"><span class="comment">        port="27017"  指定mongodb服务所在主机端口号</span></span><br><span class="line"><span class="comment">        dbname="springdata"  数据名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span> <span class="attr">port</span>=<span class="string">"27017"</span> <span class="attr">id</span>=<span class="string">"mongo"</span> <span class="attr">credentials</span>=<span class="string">"bobo:123456@springdata"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mongo:client-options</span> <span class="attr">write-concern</span>=<span class="string">"SAFE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">id</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">dbname</span>=<span class="string">"springdata"</span> <span class="attr">mongo-ref</span>=<span class="string">"mongo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mongoTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.mongodb.core.MongoTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">ref</span>=<span class="string">"mongoDbFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-创建实体类"><a href="#4-3-4-创建实体类" class="headerlink" title="4.3.4    创建实体类"></a>4.3.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//使用@Document建立的是实体类和collection的关系</span></span><br><span class="line"><span class="meta">@Document</span>(<span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//用来标识主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用@Field建立实体类中属性跟collection中字段的映射关系,如果省略,代表两个名称一致</span></span><br><span class="line">    <span class="comment">//@Field</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Integer hits;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-自定义-dao接口"><a href="#4-3-5-自定义-dao接口" class="headerlink" title="4.3.5    自定义 dao接口"></a>4.3.5    自定义 dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-6-测试"><a href="#4-3-6-测试" class="headerlink" title="4.3.6    测试"></a>4.3.6    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setName(<span class="string">"程序员"</span>);</span><br><span class="line">        article.setContent(<span class="string">"程序员很低调"</span>);</span><br><span class="line">        article.setHits(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-SpringData-MongoDB-实现CRUD操作"><a href="#4-4-SpringData-MongoDB-实现CRUD操作" class="headerlink" title="4.4    SpringData MongoDB 实现CRUD操作"></a>4.4    SpringData MongoDB 实现CRUD操作</h2><h3 id="4-4-1-增删改"><a href="#4-4-1-增删改" class="headerlink" title="4.4.1    增删改"></a>4.4.1    增删改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setName(<span class="string">"程序员"</span>);</span><br><span class="line">        article.setContent(<span class="string">"程序员很低调"</span>);</span><br><span class="line">        article.setHits(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setId(<span class="number">1</span>);</span><br><span class="line">        article.setName(<span class="string">"程序员2"</span>);</span><br><span class="line">        article.setContent(<span class="string">"程序员很低调2"</span>);</span><br><span class="line">        article.setHits(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        articleDao.deleteById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-简单查询"><a href="#4-4-2-简单查询" class="headerlink" title="4.4.2    简单查询"></a>4.4.2    简单查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Article&gt; opt = articleDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(opt.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页和排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置排序条件</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"hits"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">1</span>, <span class="number">3</span>, sort);</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-命名规则查询"><a href="#4-4-3-命名规则查询" class="headerlink" title="4.4.3    命名规则查询"></a>4.4.3    命名规则查询</h3><p>定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据点击量查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByHitsGreaterThan</span><span class="params">(Integer hits)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData MongoDB 入门案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByNameLike(<span class="string">"程序员1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据点击量查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByHitsGreaterThan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByHitsGreaterThan(<span class="number">105</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-综合案例"><a href="#5-综合案例" class="headerlink" title="5.    综合案例"></a>5.    综合案例</h1><h2 id="5-1-案例说明及思路分析"><a href="#5-1-案例说明及思路分析" class="headerlink" title="5.1    案例说明及思路分析"></a>5.1    案例说明及思路分析</h2><h3 id="5-1-1-案例目标"><a href="#5-1-1-案例目标" class="headerlink" title="5.1.1    案例目标"></a>5.1.1    案例目标</h3><p>通过一个【文章】案例来综合使用SpringData技术，案例中将涉及到jpa、redis、es、mongo的使用，可以很好的将前面章节所学知识点加以练习巩固。</p><h3 id="5-1-2-涉及技术分析"><a href="#5-1-2-涉及技术分析" class="headerlink" title="5.1.2    涉及技术分析"></a>5.1.2    涉及技术分析</h3><p>案例以常见网站中的文章管理和查询为背景，涉及到文章内容、最新文章列表、文章评论、文章检索等功能，下面具体分析：</p><ul><li>文章内容分为文章基础和文章详情两部分，分别存储在 mysql的文章表和文章详情表中</li><li>最新文章列表展示的是热点数据，访问量比较大，采用 redis存储</li><li>文章评论数据量大，数据价值较低，存放在 mongodb中</li><li>全文检索使用 ES实现，本次直接向ES中插入测试数据测试，后期可以考虑使用logstash从数据库同步</li></ul><p><img src="https://img-blog.csdnimg.cn/20200927192306350.png" alt="image-20200927184920622"></p><h3 id="5-1-3-功能分析"><a href="#5-1-3-功能分析" class="headerlink" title="5.1.3    功能分析"></a>5.1.3    功能分析</h3><h4 id="5-1-3-1-数据后台管理"><a href="#5-1-3-1-数据后台管理" class="headerlink" title="5.1.3.1    数据后台管理"></a>5.1.3.1    数据后台管理</h4><table><thead><tr><th>功能</th><th>mysql</th><th>redis</th><th>mongodb</th><th>ES</th></tr></thead><tbody><tr><td>添加文章</td><td>添加数据</td><td>清空缓存</td><td></td><td>添加数据</td></tr><tr><td>修改文章</td><td>修改数据</td><td>清空缓存</td><td></td><td>修改数据</td></tr><tr><td>删除文章</td><td>删除数据</td><td>清空缓存</td><td>删除文章评论</td><td>删除数据</td></tr><tr><td>添加评论</td><td></td><td></td><td>添加文章评论</td><td></td></tr><tr><td>删除评论</td><td></td><td></td><td>删除文章评论</td><td></td></tr></tbody></table><h4 id="5-1-3-2-数据查询功能"><a href="#5-1-3-2-数据查询功能" class="headerlink" title="5.1.3.2    数据查询功能"></a>5.1.3.2    数据查询功能</h4><table><thead><tr><th>功能</th><th>mysql</th><th>redis</th><th>mongodb</th><th>ES</th></tr></thead><tbody><tr><td>查询最新文章</td><td>当redis中不存在时来数据库查</td><td>先从redis查，没有再去数据库查，查到以后放入redis</td><td></td><td></td></tr><tr><td>查询文章评论</td><td></td><td></td><td>根据文章标识从mongo中获取评论数据</td><td></td></tr><tr><td>文章检索</td><td></td><td></td><td></td><td>使用es实现文章检索功能</td></tr></tbody></table><h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2    代码实现"></a>5.2    代码实现</h2><h3 id="5-2-1-项目结构说明"><a href="#5-2-1-项目结构说明" class="headerlink" title="5.2.1    项目结构说明"></a>5.2.1    项目结构说明</h3><p>本次案例采用Spring为核心骨架，使用SpringData实现持久层操作，采用junit进行功能测试，完整项目结构如下图所示</p><p><img src="https://img-blog.csdnimg.cn/20200927192320563.png" alt="image-20200927185454626"></p><h3 id="5-2-2-创建工程，引入坐标"><a href="#5-2-2-创建工程，引入坐标" class="headerlink" title="5.2.2    创建工程，引入坐标"></a>5.2.2    创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring框架相关jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--es--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mongo--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-加入配置文件"><a href="#5-2-3-加入配置文件" class="headerlink" title="5.2.3    加入配置文件"></a>5.2.3    加入配置文件</h3><h4 id="5-2-3-1-jpa-配置文件"><a href="#5-2-3-1-jpa-配置文件" class="headerlink" title="5.2.3.1    jpa 配置文件"></a>5.2.3.1    jpa 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///case"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.EntityManagerFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定实体类所在的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定jpa的实现提供者 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistenceProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.hibernate.jpa.HibernatePersistenceProvider"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JPA供应商适配器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否生成DDL语句   是否自动建表 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"generateDdl"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库厂商名称 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"MYSQL"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databasePlatform"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQLDialect"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否显示SQL --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"showSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合spring data jpa --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring 通过代理的方式为dao接口提供实现类，需要指明为哪些接口去产生代理类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.dao"</span> <span class="attr">transaction-manager-ref</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.txAdvice --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5.aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.wgy.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-2-redis-配置文件"><a href="#5-2-3-2-redis-配置文件" class="headerlink" title="5.2.3.2    redis 配置文件"></a>5.2.3.2    redis 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- redis 相关配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大空闲数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"300"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接时的最大等待毫秒数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在提取一个jedis实例时，是否提前进行验证操作；如果为true，则得到的jedis实例均是可用的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:host-name</span>=<span class="string">"192.168.142.128"</span> <span class="attr">p:port</span>=<span class="string">"6379"</span> <span class="attr">p:pool-config-ref</span>=<span class="string">"poolConfig"</span> <span class="attr">p:password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--redisTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定数据序列化器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-3-es-配置文件"><a href="#5-2-3-3-es-配置文件" class="headerlink" title="5.2.3.3    es 配置文件"></a>5.2.3.3    es 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:elasticsearch</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/data/elasticsearch</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描dao包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.es"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch:transport-client</span> <span class="attr">id</span>=<span class="string">"client"</span> <span class="attr">cluster-nodes</span>=<span class="string">"192.168.142.128:9700"</span> <span class="attr">cluster-name</span>=<span class="string">"wgy-es"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置搜索模板  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"elasticsearchTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.elasticsearch.core.ElasticsearchTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"client"</span> <span class="attr">ref</span>=<span class="string">"client"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-4-mongo-配置文件"><a href="#5-2-3-4-mongo-配置文件" class="headerlink" title="5.2.3.4    mongo 配置文件"></a>5.2.3.4    mongo 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mongo</span>=<span class="string">"http://www.springframework.org/schema/data/mongo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://www.springframework.org/schema/data/mongo</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/mongo/spring-mongo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.mongo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring连接mongodb数据库的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">host</span>=<span class="string">"192.168.142.128"</span> <span class="attr">port</span>=<span class="string">"27017"</span> <span class="attr">id</span>=<span class="string">"mongo"</span> <span class="attr">credentials</span>=<span class="string">"bobo:123456@case"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mongo:client-options</span> <span class="attr">write-concern</span>=<span class="string">"SAFE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">id</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">dbname</span>=<span class="string">"case"</span> <span class="attr">mongo-ref</span>=<span class="string">"mongo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mongoTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.mongodb.core.MongoTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">ref</span>=<span class="string">"mongoDbFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-5-汇总配置文件"><a href="#5-2-3-5-汇总配置文件" class="headerlink" title="5.2.3.5    汇总配置文件"></a>5.2.3.5    汇总配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--汇总其它配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-jpa.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-redis.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-es.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-mongo.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-4-创建实体类"><a href="#5-2-4-创建实体类" class="headerlink" title="5.2.4    创建实体类"></a>5.2.4    创建实体类</h3><h4 id="5-2-4-1-Article（对应数据库文章表）"><a href="#5-2-4-1-Article（对应数据库文章表）" class="headerlink" title="5.2.4.1    Article（对应数据库文章表）"></a>5.2.4.1    Article（对应数据库文章表）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//文章标题</span></span><br><span class="line">    <span class="keyword">private</span> String author;<span class="comment">//文章作者</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立从Article到ArticleData的一对一关系</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-2-ArticleData-（对应数据库文章表）"><a href="#5-2-4-2-ArticleData-（对应数据库文章表）" class="headerlink" title="5.2.4.2    ArticleData （对应数据库文章表）"></a>5.2.4.2    ArticleData （对应数据库文章表）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章详情实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article_data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleData</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//文章内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立从ArticleData到Article的一对一关系</span></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="comment">//@JoinColumn(name=当前表的外键字段名称,referencedColumnName 指向对方表的主键)</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"articleId"</span>, referencedColumnName = <span class="string">"aid"</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-3-EsArticle-对应ES中的文章"><a href="#5-2-4-3-EsArticle-对应ES中的文章" class="headerlink" title="5.2.4.3    EsArticle ( 对应ES中的文章)"></a>5.2.4.3    EsArticle ( 对应ES中的文章)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"case"</span>, type = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsArticle</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键标识</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_max_word"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//标题</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_max_word"</span>, searchAnalyzer = <span class="string">"ik_smart"</span>, store = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//内容</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text)</span><br><span class="line">    <span class="keyword">private</span> String author;<span class="comment">//作者</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Date)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-4-Comment-对应mongodb中的评论"><a href="#5-2-4-4-Comment-对应mongodb中的评论" class="headerlink" title="5.2.4.4    Comment ( 对应mongodb中的评论)"></a>5.2.4.4    Comment ( 对应mongodb中的评论)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"comment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String cid;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer aid;<span class="comment">//文章标识</span></span><br><span class="line">    <span class="keyword">private</span> String comment;<span class="comment">//评论</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;<span class="comment">//评论者昵称</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-5-创建-dao层接口"><a href="#5-2-5-创建-dao层接口" class="headerlink" title="5.2.5    创建 dao层接口"></a>5.2.5    创建 dao层接口</h3><h4 id="5-2-5-1-ArticleDao"><a href="#5-2-5-1-ArticleDao" class="headerlink" title="5.2.5.1    ArticleDao"></a>5.2.5.1    ArticleDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-2-ArticleDataDao"><a href="#5-2-5-2-ArticleDataDao" class="headerlink" title="5.2.5.2    ArticleDataDao"></a>5.2.5.2    ArticleDataDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章详情dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDataDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">ArticleData</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid修改ArticleData中的content</span></span><br><span class="line"><span class="comment">     * Jpa规定如果想使用JPQL进行更新或者删除操作,必须要使用<span class="doctag">@Modifying</span>显示声明</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"update ArticleData ad set ad.content = ?1 where ad.article.aid = ?2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateContentByAid</span><span class="params">(String content, Integer aid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid删除ArticleData中的文章详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"delete from ArticleData ad where ad.article.aid = ?1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-3-EsArticleDao"><a href="#5-2-5-3-EsArticleDao" class="headerlink" title="5.2.5.3    EsArticleDao"></a>5.2.5.3    EsArticleDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es文章dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EsArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">EsArticle</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据title或者content进行查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;EsArticle&gt; <span class="title">findByTitleOrContent</span><span class="params">(String title, String content, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-4-CommentDao"><a href="#5-2-5-4-CommentDao" class="headerlink" title="5.2.5.4    CommentDao"></a>5.2.5.4    CommentDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论dao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Comment</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 命名规则查询:按照aid查询到一个文章的所有评论</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Comment&gt; <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-6-创建-service层"><a href="#5-2-6-创建-service层" class="headerlink" title="5.2.6    创建 service层"></a>5.2.6    创建 service层</h3><h4 id="5-2-6-1-ArticleService接口"><a href="#5-2-6-1-ArticleService接口" class="headerlink" title="5.2.6.1    ArticleService接口"></a>5.2.6.1    ArticleService接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> article</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> article</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新文章列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findNewArticleList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章检索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;EsArticle&gt; <span class="title">search</span><span class="params">(Integer pageNum, Integer pageSize, String keyword)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-6-2-ArticleServiceImpl-实现类"><a href="#5-2-6-2-ArticleServiceImpl-实现类" class="headerlink" title="5.2.6.2    ArticleServiceImpl 实现类"></a>5.2.6.2    ArticleServiceImpl 实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDataDao articleDataDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EsArticleDao esArticleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentDao commentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向mysql保存文章和文章详情</span></span><br><span class="line">        articleDataDao.save(article.getArticleData());</span><br><span class="line">        articleDao.save(article);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空redis缓存</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向ES中保存数据</span></span><br><span class="line">        EsArticle esArticle = <span class="keyword">new</span> EsArticle();</span><br><span class="line">        esArticle.setCreateTime(article.getCreateTime());</span><br><span class="line">        esArticle.setContent(article.getArticleData().getContent());</span><br><span class="line">        esArticle.setTitle(article.getTitle());</span><br><span class="line">        esArticle.setAuthor(article.getAuthor());</span><br><span class="line">        esArticle.setId(article.getAid());</span><br><span class="line">        esArticleDao.save(esArticle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//更新article</span></span><br><span class="line">        Article articleParam = <span class="keyword">new</span> Article();</span><br><span class="line">        articleParam.setTitle(article.getTitle());</span><br><span class="line">        articleParam.setAid(article.getAid());</span><br><span class="line">        articleParam.setAuthor(article.getAuthor());</span><br><span class="line">        articleParam.setCreateTime(article.getCreateTime());</span><br><span class="line">        articleDao.save(articleParam);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新articleData</span></span><br><span class="line">        articleDataDao.updateContentByAid(article.getArticleData().getContent(), article.getAid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空redis缓存</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向ES中保存数据</span></span><br><span class="line">        EsArticle esArticle = <span class="keyword">new</span> EsArticle();</span><br><span class="line">        esArticle.setId(article.getAid());</span><br><span class="line">        esArticle.setCreateTime(article.getCreateTime());</span><br><span class="line">        esArticle.setContent(article.getArticleData().getContent());</span><br><span class="line">        esArticle.setTitle(article.getTitle());</span><br><span class="line">        esArticle.setAuthor(article.getAuthor());</span><br><span class="line">        esArticleDao.save(esArticle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//删除articleData</span></span><br><span class="line">        articleDataDao.deleteByAid(aid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除article</span></span><br><span class="line">        articleDao.deleteById(aid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除mongodb中相关的评论</span></span><br><span class="line">        <span class="comment">//1---先根据aid查询到一个comment列表</span></span><br><span class="line">        List&lt;Comment&gt; comments = commentDao.findByAid(aid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2---删除一个评论列表</span></span><br><span class="line">        commentDao.deleteAll(comments);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空redis</span></span><br><span class="line">        redisTemplate.delete(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除ES中的数据</span></span><br><span class="line">        esArticleDao.deleteById(aid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findNewArticleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 先从redis中获取</span></span><br><span class="line">        String value = redisTemplate.opsForValue().get(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 如果redis中没有,去数据库中查询,查询到以后,要存入redis</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">            <span class="comment">//设置分页排序条件</span></span><br><span class="line">            Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, Sort.by(Sort.Order.desc(<span class="string">"createTime"</span>)));</span><br><span class="line">            Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line">            List&lt;Article&gt; content = page.getContent();</span><br><span class="line">            <span class="comment">//将结果转成String,存入redis</span></span><br><span class="line">            <span class="keyword">if</span> (content != <span class="keyword">null</span> &amp;&amp; content.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value = JSONObject.toJSONString(content);</span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">"articles"</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3 将结果转成List返回</span></span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseArray(value, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;EsArticle&gt; <span class="title">search</span><span class="params">(Integer pageNum, Integer pageSize, String keyword)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置分页条件</span></span><br><span class="line">        Pageable pageable = PageRequest.of(pageNum, pageSize);</span><br><span class="line">        <span class="keyword">return</span> esArticleDao.findByTitleOrContent(keyword, keyword, pageable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-6-3-CommentService-接口"><a href="#5-2-6-3-CommentService-接口" class="headerlink" title="5.2.6.3    CommentService 接口"></a>5.2.6.3    CommentService 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveComment</span><span class="params">(Comment comment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByCid</span><span class="params">(String cid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文章标识查询评论数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Comment&gt; <span class="title">findCommentsByAid</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-6-4-CommentServiceImpl-实现类"><a href="#5-2-6-4-CommentServiceImpl-实现类" class="headerlink" title="5.2.6.4    CommentServiceImpl 实现类"></a>5.2.6.4    CommentServiceImpl 实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论业务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentServiceImpl</span> <span class="keyword">implements</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentDao commentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveComment</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">        commentDao.save(comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByCid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">        commentDao.deleteById(cid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Comment&gt; <span class="title">findCommentsByAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commentDao.findByAid(aid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-7-测试"><a href="#5-2-7-测试" class="headerlink" title="5.2.7    测试"></a>5.2.7    测试</h3><h4 id="5-2-7-1-后台管理功能测试"><a href="#5-2-7-1-后台管理功能测试" class="headerlink" title="5.2.7.1    后台管理功能测试"></a>5.2.7.1    后台管理功能测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测后台管理功能测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManageTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备测试数据</span></span><br><span class="line">        ArticleData articleData = <span class="keyword">new</span> ArticleData();</span><br><span class="line">        articleData.setContent(<span class="string">"1程序员专注于IT培训,Java培训,人工智能培训,Python培训,大数据培训,区\n"</span> +</span><br><span class="line">                <span class="string">"块链培训,UI设计培训,PHP培训,Web前端培训,软件测试培训,产品经理培训，并提供Java培训,大数据培训,区块链培训,UI\n"</span> +</span><br><span class="line">                <span class="string">"设计培训,PHP培训,软件测试培训,产品经理培训等服务。"</span>);</span><br><span class="line"></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"1程序员介绍"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"1程序员"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两者关系</span></span><br><span class="line">        article.setArticleData(articleData);</span><br><span class="line">        articleData.setArticle(article);</span><br><span class="line"></span><br><span class="line">        articleService.saveArticle(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备测试数据</span></span><br><span class="line">        ArticleData articleData = <span class="keyword">new</span> ArticleData();</span><br><span class="line">        articleData.setContent(<span class="string">"2程序员专注于IT培训,Java培训,人工智能培训,Python培训,大数据培训,区\n"</span> +</span><br><span class="line">                <span class="string">"块链培训,UI设计培训,PHP培训,Web前端培训,软件测试培训,产品经理培训，并提供Java培训,大数据培训,区块链培训,UI\n"</span> +</span><br><span class="line">                <span class="string">"设计培训,PHP培训,软件测试培训,产品经理培训等服务。"</span>);</span><br><span class="line"></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setAid(<span class="number">6</span>);</span><br><span class="line">        article.setTitle(<span class="string">"6程序员介绍"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"6程序员"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        article.setArticleData(articleData);</span><br><span class="line"></span><br><span class="line">        articleService.updateArticle(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        articleService.deleteByAid(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Comment comment = <span class="keyword">new</span> Comment();</span><br><span class="line">        comment.setCid(UUID.randomUUID().toString());</span><br><span class="line">        comment.setAid(<span class="number">3</span>);</span><br><span class="line">        comment.setComment(<span class="string">"2程序员真棒!!!"</span>);</span><br><span class="line">        comment.setNickname(<span class="string">"2程序员"</span>);</span><br><span class="line">        commentService.saveComment(comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        commentService.deleteByCid(<span class="string">"3974c94a-384e-4b1f-9eb2-64d72896054d"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-7-2-前台查看测试"><a href="#5-2-7-2-前台查看测试" class="headerlink" title="5.2.7.2    前台查看测试"></a>5.2.7.2    前台查看测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台查看测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新文章列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindNewArticleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; list = articleService.findNewArticleList();</span><br><span class="line">        <span class="keyword">for</span> (Article article : list) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文章获取评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCommentsByAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Comment&gt; comments = commentService.findCommentsByAid(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (Comment comment : comments) &#123;</span><br><span class="line">            System.out.println(comment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章全文检索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;EsArticle&gt; esArticles = articleService.search(<span class="number">0</span>, <span class="number">10</span>, <span class="string">"程序员"</span>);</span><br><span class="line">        <span class="keyword">for</span> (EsArticle esArticle : esArticles) &#123;</span><br><span class="line">            System.out.println(esArticle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringData-Redis&quot;&gt;&lt;a href=&quot;#1-SpringData-Redis&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringData Redis&quot;&gt;&lt;/a&gt;1.    SpringData Redis&lt;/h1&gt;&lt;h2 id=&quot;1-1-SpringData-Redis-简介&quot;&gt;&lt;a href=&quot;#1-1-SpringData-Redis-简介&quot; class=&quot;headerlink&quot; title=&quot;1.1    SpringData Redis 简介&quot;&gt;&lt;/a&gt;1.1    SpringData Redis 简介&lt;/h2&gt;&lt;p&gt;Redis是一个基于内存的数据结构存储系统，它可以用作数据库或者缓存。它支持多种类型的数据结构，这些数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和Zset（有序集合）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MySQL" scheme="https://wgy1993.gitee.io/tags/MySQL/"/>
    
      <category term="Redis" scheme="https://wgy1993.gitee.io/tags/Redis/"/>
    
      <category term="MongoDB" scheme="https://wgy1993.gitee.io/tags/MongoDB/"/>
    
      <category term="SpringData" scheme="https://wgy1993.gitee.io/tags/SpringData/"/>
    
      <category term="Elasticsearch" scheme="https://wgy1993.gitee.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>SpringData(一)</title>
    <link href="https://wgy1993.gitee.io/archives/a2f2c444.html"/>
    <id>https://wgy1993.gitee.io/archives/a2f2c444.html</id>
    <published>2020-09-23T14:19:01.000Z</published>
    <updated>2020-09-26T14:24:48.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SpringData概述"><a href="#1-SpringData概述" class="headerlink" title="1.    SpringData概述"></a>1.    SpringData概述</h1><h2 id="1-1-持久层开发的问题"><a href="#1-1-持久层开发的问题" class="headerlink" title="1.1    持久层开发的问题"></a>1.1    持久层开发的问题</h2><p>随着互联网技术的发展，现在的企业开发中用到的用于数据存储的产品，不再仅仅是关系型数据库，而是要根据场景需要选择不同的存储技术，比如用于缓存热点数据的redis，用于存储文档数据的mongodb，用于支持强大搜索功能的elasticsearch等等。</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200926212823408.png" alt="image-20200926180111152"></p><p>在Java中，对于上面所说的产品都提供了优秀的访问技术。比如针对关系型数据库的mybatis、jpa等技术，针对于redis的jedis技术等等….. 这些技术虽然可以很好的针对各个存储产品进行访问操作，但同时也带来了新的问题，那就是不同的持久层技术的API是不一样的。</p><p>这样一来，开发人员就必须同时掌握多种数据访问技术，这无疑增加了开发成本。那么我们会想，有没有这样一种技术，它可以使用一套API支持各个不同的存储的访问呢？就在这样的需求下，SpringData产生了。</p><p><img src="https://img-blog.csdnimg.cn/20200926212910375.png" alt="image-20200926180139065"></p><h2 id="1-2-SpringData-简介"><a href="#1-2-SpringData-简介" class="headerlink" title="1.2    SpringData 简介"></a>1.2    SpringData 简介</h2><h3 id="1-2-1-什么是SpringData"><a href="#1-2-1-什么是SpringData" class="headerlink" title="1.2.1    什么是SpringData"></a>1.2.1    什么是SpringData</h3><p>SpringData是一个用来简化dao层开发的框架。它在保证了各个底层存储特性的同时，提供了一套统一的数据访问API。它可以很好的支持常用的关系型数据库和非关系型数据库。</p><p>使用SpringData作为dao层开发技术，将大大简化代码量，而且其API比各个技术的原生API更加简单易用。</p><h3 id="1-2-2-SpringData的主要模块"><a href="#1-2-2-SpringData的主要模块" class="headerlink" title="1.2.2    SpringData的主要模块"></a>1.2.2    SpringData的主要模块</h3><p>SpringData支持的持久层技术非常多，我们只介绍几个常见的：</p><ul><li>Spring Data common SpringData 的核心模块，定义了SpringData的核心功能</li><li>Spring Data JDBC 对JDBC的Spring Data存储库支持</li><li>Spring Data JPA 对JPA的Spring Data存储库支持</li><li>Spring Data MongoDB 对MongoDB的基于Spring对象文档的存储库支持</li><li>Spring Data Redis 封装Jedis技术，对redis实现访问操作</li><li>Spring Data Elasticsearch 对Elasticsearch实现访问操作</li></ul><h1 id="2-JPA回顾"><a href="#2-JPA回顾" class="headerlink" title="2.    JPA回顾"></a>2.    JPA回顾</h1><h2 id="2-1-JPA-基础"><a href="#2-1-JPA-基础" class="headerlink" title="2.1    JPA 基础"></a>2.1    JPA 基础</h2><p>Hibernate 是一个全自动的ORM框架，是对 JDBC技术的封装。它在实体类和数据库表之间建立了映射关系，使得程序员可以使用面向对象编程思维来操纵数据库，而Hibernate会自动给我们生成 SQL语句。</p><p>JPA 的全称是 Java Persistence API，即 Java 持久化 API，是 SUN 公司推出的一套基于 ORM 的规范，注意不是 ORM 框架——因为 JPA 并未提供 ORM 实现，它只是提供了一些编程的 API 接口。</p><p><img src="https://img-blog.csdnimg.cn/20200926212927694.png" alt="image-20200926180913761"></p><h2 id="2-2-JPA-实战"><a href="#2-2-JPA-实战" class="headerlink" title="2.2    JPA 实战"></a>2.2    JPA 实战</h2><h3 id="2-2-1-目标"><a href="#2-2-1-目标" class="headerlink" title="2.2.1    目标"></a>2.2.1    目标</h3><p>搭建Jpa环境，并实现一条数据的增删改查。</p><h3 id="2-2-2-准备数据库环境"><a href="#2-2-2-准备数据库环境" class="headerlink" title="2.2.2    准备数据库环境"></a>2.2.2    准备数据库环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--准备数据库，创建一张文章表备用</span><br><span class="line">CREATE TABLE &#96;article&#96; (</span><br><span class="line">    &#96;aid&#96; int(11) NOT NULL auto_increment COMMENT &#39;主键&#39;,</span><br><span class="line">    &#96;author&#96; varchar(255) default NULL COMMENT &#39;作者&#39;,</span><br><span class="line">    &#96;createTime&#96; datetime default NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">    &#96;title&#96; varchar(255) default NULL COMMENT &#39;标题&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;aid&#96;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-2-3-创建-java工程，导入坐标"><a href="#2-2-3-创建-java工程，导入坐标" class="headerlink" title="2.2.3    创建 java工程，导入坐标"></a>2.2.3    创建 java工程，导入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Jpa的支撑框架hibernate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-创建实体类"><a href="#2-2-4-创建实体类" class="headerlink" title="2.2.4    创建实体类"></a>2.2.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-在实体类中配置映射关系"><a href="#2-2-5-在实体类中配置映射关系" class="headerlink" title="2.2.5    在实体类中配置映射关系"></a>2.2.5    在实体类中配置映射关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span><span class="comment">//告诉jpa这是一个实体类，需要把它跟数据库中的表做映射</span></span><br><span class="line"><span class="comment">//使用注解建立实体类和数据表之间的对应关系</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)<span class="comment">//@Table建立了实体类和数据表的关系  name指向表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//标识这是主键字段</span></span><br><span class="line">    <span class="comment">//指定主键生成策略，GenerationType.IDENTITY就是对应到mysql中的数据自增策略</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="comment">//使用@Column映射类的属性和数据表的字段关系  name指定表中的字段名</span></span><br><span class="line">    <span class="comment">//当类的属性名和数据表的字段名一致时，此注解可省略</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-加入-JPA-的核心配置文件"><a href="#2-2-6-加入-JPA-的核心配置文件" class="headerlink" title="2.2.6    加入 JPA 的核心配置文件"></a>2.2.6    加入 JPA 的核心配置文件</h3><p>在maven工程的resources路径下创建一个名为META-INF的文件夹，在文件夹下创建一个名为persistence.xml的配置文件。注意： META-INF文件夹名称不能修改,persistence.xml文件名称不能改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/persistence</span></span></span><br><span class="line"><span class="tag"><span class="string">             http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--持久化单元</span></span><br><span class="line"><span class="comment">        name 持久化单元的名称 唯一</span></span><br><span class="line"><span class="comment">        transaction-type  事务类型</span></span><br><span class="line"><span class="comment">            RESOURCE_LOCAL  本地事务</span></span><br><span class="line"><span class="comment">            JTA   分布式事务</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"springdata"</span> <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置 JPA 规范的服务提供商,当项目中只有一个JPA的实现时,此选项可省略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定实体类,此选项可省略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.wgy.domain.Article<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--跟数据库相关的信息 驱动 url 用户名 密码--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///springdata"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--jpa的核心配置中兼容hibernate的配置--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否显示SQL--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否格式化显示的SQL--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                自动建表</span></span><br><span class="line"><span class="comment">                    update  如果数据库存在数据表,就使用;不存在,就创建</span></span><br><span class="line"><span class="comment">                    create  不管数据库有没有数据表,每次SQL请求都会重新建表</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-7-测试"><a href="#2-2-7-测试" class="headerlink" title="2.2.7    测试"></a>2.2.7    测试</h3><h4 id="2-2-7-1-实现保存操作"><a href="#2-2-7-1-实现保存操作" class="headerlink" title="2.2.7.1    实现保存操作"></a>2.2.7.1    实现保存操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 创建持久化管理器工厂</span></span><br><span class="line">    String persistenceUnitName = <span class="string">"springdata"</span>;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(persistenceUnitName);</span><br><span class="line">    <span class="comment">//2 创建持久化管理器</span></span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    <span class="comment">//3 获取事务</span></span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line">    <span class="comment">//4 操作</span></span><br><span class="line">    Article article = <span class="keyword">new</span> Article();</span><br><span class="line">    article.setTitle(<span class="string">"测试文章标题"</span>);</span><br><span class="line">    article.setAuthor(<span class="string">"保存"</span>);</span><br><span class="line">    article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    entityManager.persist(article);</span><br><span class="line">    <span class="comment">//5 事务提交</span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    <span class="comment">//6 关闭资源</span></span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-7-2-实现查询操作"><a href="#2-2-7-2-实现查询操作" class="headerlink" title="2.2.7.2    实现查询操作"></a>2.2.7.2    实现查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(<span class="string">"springdata"</span>);</span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line"></span><br><span class="line">    Article article = entityManager.find(Article<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">    System.out.println(article);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-7-3-实现修改操作"><a href="#2-2-7-3-实现修改操作" class="headerlink" title="2.2.7.3    实现修改操作"></a>2.2.7.3    实现修改操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(<span class="string">"springdata"</span>);</span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line"></span><br><span class="line">    Article article = entityManager.find(Article<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    article.setAuthor(<span class="string">"保存更新"</span>);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-7-4-实现删除操作"><a href="#2-2-7-4-实现删除操作" class="headerlink" title="2.2.7.4    实现删除操作"></a>2.2.7.4    实现删除操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EntityManagerFactory factory = Persistence.createEntityManagerFactory(<span class="string">"springdata"</span>);</span><br><span class="line">    EntityManager entityManager = factory.createEntityManager();</span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line"></span><br><span class="line">    Article article = entityManager.find(Article<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    entityManager.remove(article);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-JPA-的重要API介绍"><a href="#2-3-JPA-的重要API介绍" class="headerlink" title="2.3    JPA 的重要API介绍"></a>2.3    JPA 的重要API介绍</h2><h3 id="2-3-1-EntityManagerFactory"><a href="#2-3-1-EntityManagerFactory" class="headerlink" title="2.3.1    EntityManagerFactory"></a>2.3.1    EntityManagerFactory</h3><p>EntityManagerFactory接口主要用来创建EntityManager实例</p><p>EntityManagerFactory是一个线程安全的对象，并且其创建极其浪费资源，所以编程的时候要保持它是单例的。</p><h3 id="2-3-2-EntityManager"><a href="#2-3-2-EntityManager" class="headerlink" title="2.3.2    EntityManager"></a>2.3.2    EntityManager</h3><p>在JPA规范中,EntityManager是操作数据库的重要API，他是线程不安全的，需要保持线程独有。</p><p>重要方法说明：</p><ul><li>getTransaction: 获取事务对象</li><li>persist：保存操作</li><li>merge：更新操作</li><li>remove：删除操作</li><li>find/getReference：根据id查询</li></ul><h1 id="3-SpringData-JPA基础"><a href="#3-SpringData-JPA基础" class="headerlink" title="3.    SpringData JPA基础"></a>3.    SpringData JPA基础</h1><h2 id="3-1-SpringData-JPA-简介"><a href="#3-1-SpringData-JPA-简介" class="headerlink" title="3.1    SpringData JPA 简介"></a>3.1    SpringData JPA 简介</h2><p>SpringData JPA是Spring Data家族的一个成员，是Spring Data对JPA封装之后的产物，目的在于简化基于JPA的数据访问技术。使用SpringData JPA技术之后，开发者只需要声明Dao层的接口，不必再写实现类或其它代码，剩下的一切交给SpringData JPA来搞定 。</p><h2 id="3-2-SpringData-JPA-快速入门"><a href="#3-2-SpringData-JPA-快速入门" class="headerlink" title="3.2    SpringData JPA 快速入门"></a>3.2    SpringData JPA 快速入门</h2><h3 id="3-2-1-目标"><a href="#3-2-1-目标" class="headerlink" title="3.2.1    目标"></a>3.2.1    目标</h3><p>搭建SpringData JPA环境，并实现一条数据的增删改查。</p><h3 id="3-2-2-准备数据环境"><a href="#3-2-2-准备数据环境" class="headerlink" title="3.2.2    准备数据环境"></a>3.2.2    准备数据环境</h3><p>下面的操作让JPA自动生成表结构</p><h3 id="3-2-3-创建-java工程，导入坐标"><a href="#3-2-3-创建-java工程，导入坐标" class="headerlink" title="3.2.3    创建 java工程，导入坐标"></a>3.2.3    创建 java工程，导入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring框架相关jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-创建实体类"><a href="#3-2-4-创建实体类" class="headerlink" title="3.2.4    创建实体类"></a>3.2.4    创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-在实体类中配置映射关系"><a href="#3-2-5-在实体类中配置映射关系" class="headerlink" title="3.2.5    在实体类中配置映射关系"></a>3.2.5    在实体类中配置映射关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//声明当前私有属性为主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//配置主键的生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="comment">//声明类的属性跟数据表字段的对应关系，如果属性名称和字段名称一致，可省略</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-编写-dao接口"><a href="#3-2-6-编写-dao接口" class="headerlink" title="3.2.6    编写 dao接口"></a>3.2.6    编写 dao接口</h3><p>使用 Spring Data JPA操作数据库，只需要按照框架的规范提供 dao 接口，不需要提供在接口中定义方法，也不需要为接口提供实现类就能完成基本的数据库的增删改查等功能。</p><p>在 Spring Data JPA 中，对于定义符合规范的 Dao 层接口，我们只需要遵循以下几点就可以了：</p><ul><li>创建一个 Dao 层接口，并实现 JpaRepository 和 JpaSpecificationExecutor</li><li>提供相应的泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-7-添加-Spring整合Jpa的配置文件"><a href="#3-2-7-添加-Spring整合Jpa的配置文件" class="headerlink" title="3.2.7    添加 Spring整合Jpa的配置文件"></a>3.2.7    添加 Spring整合Jpa的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/jdbc</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wgy"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///springdata"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置EntityManagerFactory 可以产生entityManger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置一个数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定实体类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.wgy.domain"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置服务的提供商--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistenceProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.hibernate.jpa.HibernatePersistenceProvider"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringData Jpa 兼容Hibernate使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置数据库名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"MYSQL"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否自动建表  true 自动建表  false 不会自动建表--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"generateDdl"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否显示SQL--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"showSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--做一个jpa:repository的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--base-package 配置dao包的包名 它会为这个包先所有的接口动态产生代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.wgy.dao"</span> <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactory"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">transaction-manager-ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-8-测试"><a href="#3-2-8-测试" class="headerlink" title="3.2.8    测试"></a>3.2.8    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataJpaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"SpringData Jpa保存测试1"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Article&gt; optional = articleDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setAuthor(<span class="string">"测试2"</span>);</span><br><span class="line">        article.setAid(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Spingdata Jpa的保存和修改使用的都是save方法</span></span><br><span class="line">        <span class="comment">//关键来看传入的实体是否有主键</span></span><br><span class="line">        <span class="comment">//---如果有主键,代表要修改</span></span><br><span class="line">        <span class="comment">//---如果没有主键,代表要保存</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        articleDao.deleteById(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-SpringData-Jpa-运行原理分析"><a href="#3-3-SpringData-Jpa-运行原理分析" class="headerlink" title="3.3    SpringData Jpa 运行原理分析"></a>3.3    SpringData Jpa 运行原理分析</h2><h3 id="3-3-1-SpringData中的几个重要接口"><a href="#3-3-1-SpringData中的几个重要接口" class="headerlink" title="3.3.1    SpringData中的几个重要接口"></a>3.3.1    SpringData中的几个重要接口</h3><p>思考一个问题：自定义的接口中没有写任何的方法声明，那么测试类中调用的接口中的方法是哪来的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">自定义的接口继承了两个接口，方法肯定来自里面，追踪关系得到下面的继承关系</span><br><span class="line"> Repository 标记接口：继承了此接口后会被Spring识别，进而可以在接口中声明一些满足规范的方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> CrudRepository 实现了基本增删改查方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> PagingAndSortingRepository 实现了分页和排序的方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> JpaRepository 重写了几个查找和删除的方法</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line"> ArticleDao</span><br><span class="line">通过上面的继承关系，我们可以看到我们自定义的接口ArticleDao继承了一系列的Repository接口，而每一个接口都会给我们提供一部分的功能，这样继承下来，我们的ArticleDao不用任何的方法声明就拥有了很多的功能了。</span><br></pre></td></tr></table></figure><h3 id="3-3-2-SpringData-Jpa-底层运行原理"><a href="#3-3-2-SpringData-Jpa-底层运行原理" class="headerlink" title="3.3.2    SpringData Jpa 底层运行原理"></a>3.3.2    SpringData Jpa 底层运行原理</h3><p>思考一个问题：我们找到了定义方法的接口，但并没有看到实现类，没有实现来就无法创建对象，那么真正干活的实现类到底在哪，它又是如何产生对象的呢？</p><p>下面我们通过debug的形式，寻找答案：</p><p>1、在运行时，Spring会使用JdkDynamicAopProxy为dao接口生成一个代理对象</p><p><img src="https://img-blog.csdnimg.cn/20200926213000393.png" alt="image-20200926184720791"></p><p>2、那么这个代理对象是根据那个类代理出来的呢？点击进入JdkDynamicAopProxy源码查看invoke方法，发现targetSource代理的是SimpleJpaRepository类</p><p><img src="https://img-blog.csdnimg.cn/20200926213019877.png" alt="image-20200926184747404"></p><p>3、通过对SimpleJpaRepository中代码的分析，我们看到最终执行保存的是EntityManager对象</p><p><img src="https://img-blog.csdnimg.cn/20200926213042376.png" alt="image-20200926184803641"></p><p>总结：使用 SpringData JPA开发底层还是用的JPA的API，SpringData JPA只是对标准 JPA 操作进行了进一步封装，已达到简化了Dao层代码开发的目的。</p><h3 id="3-3-3-SpringData-Jpa-与-Jpa-及-Hibernate的关系"><a href="#3-3-3-SpringData-Jpa-与-Jpa-及-Hibernate的关系" class="headerlink" title="3.3.3    SpringData Jpa 与 Jpa 及 Hibernate的关系"></a>3.3.3    SpringData Jpa 与 Jpa 及 Hibernate的关系</h3><p><img src="https://img-blog.csdnimg.cn/20200926213059256.png" alt="image-20200926184834200"></p><h3 id="3-3-4-SpringData-Jpa-CUD方法"><a href="#3-3-4-SpringData-Jpa-CUD方法" class="headerlink" title="3.3.4    SpringData Jpa CUD方法"></a>3.3.4    SpringData Jpa CUD方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa CUD测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataJpaCUDTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试保存"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存一个实体</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存一个实体,并且立即刷新缓存</span></span><br><span class="line">        <span class="comment">//articleDao.saveAndFlush(article);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article1 = <span class="keyword">new</span> Article();</span><br><span class="line">        article1.setTitle(<span class="string">"测试保存1"</span>);</span><br><span class="line">        article1.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article1.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setTitle(<span class="string">"测试保存2"</span>);</span><br><span class="line">        article2.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article2.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Article article3 = <span class="keyword">new</span> Article();</span><br><span class="line">        article3.setTitle(<span class="string">"测试保存3"</span>);</span><br><span class="line">        article3.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article3.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(article1);</span><br><span class="line">        list.add(article2);</span><br><span class="line">        list.add(article3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存多个实体</span></span><br><span class="line">        articleDao.saveAll(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1  根据主键删除</span></span><br><span class="line">        <span class="comment">//articleDao.deleteById(13);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 根据实体删除,但是这个实体必须要有主键</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setAid(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        articleDao.delete(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 删除所有  先查询--再一条条的删除</span></span><br><span class="line">        <span class="comment">//articleDao.deleteAll();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 删除所有  一下子删除所有记录</span></span><br><span class="line">        <span class="comment">//articleDao.deleteAllInBatch();</span></span><br><span class="line"></span><br><span class="line">        Article article1 = <span class="keyword">new</span> Article();</span><br><span class="line">        article1.setAid(<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setAid(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(article1);</span><br><span class="line">        list.add(article2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 批量删除指定数据  一条语句搞定</span></span><br><span class="line">        <span class="comment">//articleDao.deleteInBatch(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 先一条条的查,然后再一条条的删除</span></span><br><span class="line">        articleDao.deleteAll(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-SpringData-JPA的多种查询方式"><a href="#4-SpringData-JPA的多种查询方式" class="headerlink" title="4.    SpringData JPA的多种查询方式"></a>4.    SpringData JPA的多种查询方式</h1><h2 id="4-1-父接口方法查询"><a href="#4-1-父接口方法查询" class="headerlink" title="4.1    父接口方法查询"></a>4.1    父接口方法查询</h2><p>我们自定义的Dao接口可以使用它的父接口提供的方法，可以使用的方法如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/2020092621311925.png" alt="image-20200926185318758"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * 父接口方法查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query1Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据一个主键查询</span></span><br><span class="line">        Optional&lt;Article&gt; optional = articleDao.findById(<span class="number">21</span>);</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据多个主键查询</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">21</span>);</span><br><span class="line">        list.add(<span class="number">23</span>);</span><br><span class="line">        list.add(<span class="number">25</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAllById(list);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有--排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照aid倒序排列</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"aid"</span>));</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll(sort);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有--分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//处理分页条件</span></span><br><span class="line">        <span class="comment">//page   当前是第几页(从0开始)    size  每页大小</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//总记录数  总页数  每页多少</span></span><br><span class="line">        System.out.println(<span class="string">"总记录数:"</span> + page.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"总页数:"</span> + page.getTotalPages());</span><br><span class="line">        System.out.println(<span class="string">"每页多少:"</span> + page.getSize());</span><br><span class="line">        <span class="comment">//当前页的元素</span></span><br><span class="line">        List&lt;Article&gt; content = page.getContent();</span><br><span class="line">        <span class="keyword">for</span> (Article article : content) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有--分页+排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照aid倒序排列</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Order.desc(<span class="string">"aid"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理分页条件</span></span><br><span class="line">        <span class="comment">//page   当前是第几页(从0开始)    size  每页大小</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>, sort);</span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(pageable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//总记录数  总页数  每页多少</span></span><br><span class="line">        System.out.println(<span class="string">"总记录数:"</span> + page.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"总页数:"</span> + page.getTotalPages());</span><br><span class="line">        System.out.println(<span class="string">"每页多少:"</span> + page.getSize());</span><br><span class="line">        <span class="comment">//当前页的元素</span></span><br><span class="line">        List&lt;Article&gt; content = page.getContent();</span><br><span class="line">        <span class="keyword">for</span> (Article article : content) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-方法命名规则查询"><a href="#4-2-方法命名规则查询" class="headerlink" title="4.2    方法命名规则查询"></a>4.2    方法命名规则查询</h2><p>顾名思义，方法命名规则查询就是根据方法的名字，就能创建查询。只需要按照SpringData JPA提供的方法命名规则定义方法的名称，就可以完成查询工作。</p><p>SpringData JPA在程序执行的时候会根据方法名称进行解析，并自动生成查询语句进行查询.</p><p>按照SpringData JPA定义的规则，查询方法以findBy开头，涉及条件查询时，条件的属性用条件关键字连接，要注意的是：条件属性首字母需大写。框架在进行方法名解析时，会先把方法名多余的前缀截取掉，然后对剩下部分进行解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleLike</span><span class="params">(String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题和作者查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByTitleAndAuthor</span><span class="params">(String title, String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 &lt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByAidIsLessThan</span><span class="params">(Integer aid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 between</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startAid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endAid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByAidBetween</span><span class="params">(Integer startAid, Integer endAid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 in</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByAidIn</span><span class="params">(List&lt;Integer&gt; aids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据创建时间之后查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> createTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCreateTimeAfter</span><span class="params">(Date createTime)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * 方法命名规则查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitle(<span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleLike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleLike(<span class="string">"%测试%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题和作者查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByTitleAndAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByTitleAndAuthor(<span class="string">"测试"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 &lt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAidIsLessThan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByAidIsLessThan(<span class="number">25</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 between</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAidBetween</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByAidBetween(<span class="number">25</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID范围查询 in</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByAidIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">29</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByAidIn(list);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据创建时间之后查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCreateTimeAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCreateTimeAfter(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>关键字</th><th>例子</th><th>对应的JPQL语句</th></tr></thead><tbody><tr><td>And</td><td>findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ? 2</td></tr><tr><td>Or</td><td>findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td>Is,Equals</td><td>indByFirstnameIs,<br/>findByFirstnameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td>Between</td><td>findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td>LessThan</td><td>findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td>LessThanEqual</td><td>findByAgeLessThanEqual</td><td>… where x.age &lt;= ?1</td></tr><tr><td>GreaterThan</td><td>findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td>GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td>After</td><td>findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td>Before</td><td>findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td>IsNull</td><td>findByAgeIsNull</td><td>… where x.age is null</td></tr><tr><td>IsNotNull,NotNull</td><td>findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td>Like</td><td>findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td>NotLike</td><td>findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td>StartingWith</td><td>findByFirstnameStartingWith</td><td>… where x.firstname like ?1<br/>(parameter bound with appended %)</td></tr><tr><td>EndingWith</td><td>findByFirstnameEndingWith</td><td>… where x.firstname like ?1<br/>(parameter bound with prepended %)</td></tr><tr><td>Containing</td><td>findByFirstnameContaining</td><td>… where x.firstname like ?1<br/>(parameter bound wrapped in %)</td></tr><tr><td>OrderBy</td><td>findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td>Not</td><td>findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td>In</td><td>findByAgeIn(Collection ages)</td><td>… where x.age in ?1</td></tr><tr><td>NotIn</td><td>findByAgeNotIn(Collection age)</td><td>… where x.age not in ?1</td></tr><tr><td>TRUE</td><td>findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td>FALSE</td><td>findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td>IgnoreCase</td><td>findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstame) = U</td></tr></tbody></table><h2 id="4-3-JPQL-查询"><a href="#4-3-JPQL-查询" class="headerlink" title="4.3    JPQL 查询"></a>4.3    JPQL 查询</h2><p>使用SpringData JPA提供的查询方法已经可以解决大部分的应用场景，但是对于某些业务来说，我们还需要灵活的构造查询条件，这时就可以使用@Query注解，结合JPQL的语句方式完成查询。</p><p>JPQL，全称是Java Persistence Query Language。JPQL语句是JPA中定义的一种查询语言，此种语言的用意是让开发者忽略数据库表和表中的字段，而关注实体类及实体类中的属性。</p><p>它的写法十分类似于SQL语句的写法，但是要把查询的表名换成实体类名称，把表中的字段名换成实体类的属性名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示位置参数绑定[按照title和author查询]</span></span><br><span class="line"><span class="comment">     * 占位符从1开始</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title = ?1 and a.author=?2"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition1</span><span class="params">(String title, String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示名字参数绑定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title = :title and a.author = :authors"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition2</span><span class="params">(@Param(<span class="string">"title"</span>)</span> String title, @<span class="title">Param</span><span class="params">(<span class="string">"authors"</span>)</span> String author)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示like模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title like %:title%"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition3</span><span class="params">(@Param(<span class="string">"title"</span>)</span> String title)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示排序查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title like %:title% order by a.aid desc "</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition4</span><span class="params">(@Param(<span class="string">"title"</span>)</span> String title)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示分页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title like %:title%"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition5</span><span class="params">(Pageable pageable, @Param(<span class="string">"title"</span>)</span> String title)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入集合参数查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.aid in :aids"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition6</span><span class="params">(@Param(<span class="string">"aids"</span>)</span> List&lt;Integer&gt; aids)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入Bean进行查询（SPEL表达式查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> article</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Article a where a.title = :#&#123;#article.title&#125; and a.author = :#&#123;#article.author&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByCondition7</span><span class="params">(@Param(<span class="string">"article"</span>)</span> Article article)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * JPQL 查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query3Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示位置参数绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition1(<span class="string">"测试保存1"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示名字参数绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition2(<span class="string">"测试保存1"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示like模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition3(<span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示排序查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition4(<span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition5(pageable, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入集合参数查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">29</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition6(list);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示传入Bean进行查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article articleParam = <span class="keyword">new</span> Article();</span><br><span class="line">        articleParam.setTitle(<span class="string">"测试保存1"</span>);</span><br><span class="line">        articleParam.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition7(articleParam);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地SQL查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findByCondition8(<span class="string">"测试保存1"</span>, <span class="string">"测试"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-本地-SQL查询"><a href="#4-4-本地-SQL查询" class="headerlink" title="4.4    本地 SQL查询"></a>4.4    本地 SQL查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地SQL查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from article a where a.title = ?1 and a.author =?2"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">List&lt;Article&gt; <span class="title">findByCondition8</span><span class="params">(String title, String author)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-5-Specifications-动态查询"><a href="#4-5-Specifications-动态查询" class="headerlink" title="4.5    Specifications 动态查询"></a>4.5    Specifications 动态查询</h2><p>有时我们在查询某个实体的时候，给定的条件是不固定的，这时就需要动态构建相应的查询语句，在 Spring Data JPA 中可以通过 JpaSpecificationExecutor 接口查询。相比 JPQL,其优势是类型安全,更加的面向对象，缺点是书写比较麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa Query测试</span></span><br><span class="line"><span class="comment"> * Specifications 动态查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query4Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照标题和作者进行查询,以不为空的属性作为查询条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就模拟从从外边传入的变量</span></span><br><span class="line">        String title = <span class="string">"测试保存1"</span>;</span><br><span class="line">        String author = <span class="string">"测试"</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = articleDao.findAll(<span class="keyword">new</span> Specification&lt;Article&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root  代表实体对象,我们可以通过它获取属性值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cq    用于生成SQL语句</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb    用于拼接查询条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Article&gt; root, CriteriaQuery&lt;?&gt; cq, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(title)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.like(root.get("title").as(String.class), "%" + title + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(author)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"author"</span>).as(String<span class="class">.<span class="keyword">class</span>), <span class="title">author</span>)</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> cb.and(list.toArray(<span class="keyword">new</span> Predicate[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就模拟从从外边传入的变量</span></span><br><span class="line">        String title = <span class="string">""</span>;</span><br><span class="line">        String author = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(<span class="keyword">new</span> Specification&lt;Article&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root  代表实体对象,我们可以通过它获取属性值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cq    用于生成SQL语句</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb    用于拼接查询条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Article&gt; root, CriteriaQuery&lt;?&gt; cq, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(title)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.like(root.get("title").as(String.class), "%" + title + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(author)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"author"</span>).as(String<span class="class">.<span class="keyword">class</span>), <span class="title">author</span>)</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> cb.and(list.toArray(<span class="keyword">new</span> Predicate[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithPageAndSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就模拟从从外边传入的变量</span></span><br><span class="line">        String title = <span class="string">""</span>;</span><br><span class="line">        String author = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>, Sort.by(Sort.Order.desc(<span class="string">"aid"</span>)));</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = articleDao.findAll(<span class="keyword">new</span> Specification&lt;Article&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root  代表实体对象,我们可以通过它获取属性值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cq    用于生成SQL语句</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb    用于拼接查询条件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Article&gt; root, CriteriaQuery&lt;?&gt; cq, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(title)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.like(root.get("title").as(String.class), "%" + title + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(author)) &#123;</span><br><span class="line">                    <span class="comment">//拼接作为查询条件</span></span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"author"</span>).as(String<span class="class">.<span class="keyword">class</span>), <span class="title">author</span>)</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> cb.and(list.toArray(<span class="keyword">new</span> Predicate[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, pageable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Article article : page.getContent()) &#123;</span><br><span class="line">            System.out.println(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-SpringData-JPA实现多表操作"><a href="#5-SpringData-JPA实现多表操作" class="headerlink" title="5.    SpringData JPA实现多表操作"></a>5.    SpringData JPA实现多表操作</h1><h2 id="5-1-多表关系分析"><a href="#5-1-多表关系分析" class="headerlink" title="5.1    多表关系分析"></a>5.1    多表关系分析</h2><p>数据库中多表之间存在着三种关系，如图所示。</p><p><img src="https://img-blog.csdnimg.cn/20200926213147618.png" alt="image-20200926210502854"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">从图可以看出，系统设计的三种实体关系分别为： 多对多、一对多和一对一关系。</span><br><span class="line">注意：一对多关系可以看为两种： 即一对多，多对一。所以说四种更精确。</span><br><span class="line"></span><br><span class="line">在实际开发中，我们数据库的表难免会有相互的关联关系，在操作表的时候就有可能会涉及到多张表的操作。</span><br><span class="line">而在这种实现了ORM思想的框架中（如 JPA），可以让我们通过操作实体类就实现对数据库表的操作。</span><br><span class="line">所以今天我们的学习重点是：掌握配置实体之间的关联关系</span><br><span class="line">第一步：首先确定两张表之间的关系</span><br><span class="line">第二步：在实体类中描述出两个实体的关系</span><br><span class="line">第三步：配置出实体类和数据库表的关系映射（重点）</span><br></pre></td></tr></table></figure><h2 id="5-2-案例表间关系"><a href="#5-2-案例表间关系" class="headerlink" title="5.2    案例表间关系"></a>5.2    案例表间关系</h2><p><img src="https://img-blog.csdnimg.cn/20200926213203811.png" alt="image-20200926210544312"></p><h2 id="5-3-一对一关系"><a href="#5-3-一对一关系" class="headerlink" title="5.3    一对一关系"></a>5.3    一对一关系</h2><h3 id="5-3-1-数据环境"><a href="#5-3-1-数据环境" class="headerlink" title="5.3.1    数据环境"></a>5.3.1    数据环境</h3><p>article和article_data的一对一关系</p><p><img src="https://img-blog.csdnimg.cn/20200926213220486.png" alt="image-20200926210630988"></p><h3 id="5-3-2-创建实体类，并配置表间关系"><a href="#5-3-2-创建实体类，并配置表间关系" class="headerlink" title="5.3.2    创建实体类，并配置表间关系"></a>5.3.2    创建实体类，并配置表间关系</h3><h4 id="5-3-2-1-创建文章类"><a href="#5-3-2-1-创建文章类" class="headerlink" title="5.3.2.1    创建文章类"></a>5.3.2.1    创建文章类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1声明类间关系</span></span><br><span class="line">    <span class="comment">//声明主动放弃关系维护 mappedBy="当前类在对方类中的属性名"</span></span><br><span class="line">    <span class="comment">//设置级联操作,当保存Article的时候,同时保存ArticleData</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>, cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 在类中使用注解再声明表间关系</span></span><br><span class="line">    <span class="comment">// --书写注解</span></span><br><span class="line">    <span class="comment">// --明确谁来维护关系(在多的一方维护关系)</span></span><br><span class="line">    <span class="comment">//  ----在维护的一方主动声明维护策略,在不维护的一方声明主动放弃</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-2-创建文章详情类"><a href="#5-3-2-2-创建文章详情类" class="headerlink" title="5.3.2.2    创建文章详情类"></a>5.3.2.2    创建文章详情类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章详情实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article_data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleData</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让这个实体维护关系</span></span><br><span class="line">    <span class="comment">//name                    当前表中的外键名</span></span><br><span class="line">    <span class="comment">//referencedColumnName    指向的对方表中的主键名</span></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"articleId"</span>, referencedColumnName = <span class="string">"aid"</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-添加-ArticleDao接口"><a href="#5-3-3-添加-ArticleDao接口" class="headerlink" title="5.3.3    添加 ArticleDao接口"></a>5.3.3    添加 ArticleDao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-4-测试"><a href="#5-3-4-测试" class="headerlink" title="5.3.4    测试"></a>5.3.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">One2OneTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建文章对象</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试好文章"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文章内容对象</span></span><br><span class="line">        ArticleData articleData = <span class="keyword">new</span> ArticleData();</span><br><span class="line">        articleData.setContent(<span class="string">"真是一篇好文章"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两个对象间的关系</span></span><br><span class="line">        article.setArticleData(articleData);</span><br><span class="line">        articleData.setArticle(article);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-一对多关系"><a href="#5-4-一对多关系" class="headerlink" title="5.4    一对多关系"></a>5.4    一对多关系</h2><h3 id="5-4-1-数据环境"><a href="#5-4-1-数据环境" class="headerlink" title="5.4.1    数据环境"></a>5.4.1    数据环境</h3><p>article和comment的一对多关系</p><p><img src="https://img-blog.csdnimg.cn/20200926213241429.png" alt="image-20200926211406496"></p><h3 id="5-4-2-创建实体类，并配置表间关系"><a href="#5-4-2-创建实体类，并配置表间关系" class="headerlink" title="5.4.2    创建实体类，并配置表间关系"></a>5.4.2    创建实体类，并配置表间关系</h3><h4 id="5-4-2-1-修改文章类，添加文章跟评论的映射"><a href="#5-4-2-1-修改文章类，添加文章跟评论的映射" class="headerlink" title="5.4.2.1    修改文章类，添加文章跟评论的映射"></a>5.4.2.1    修改文章类，添加文章跟评论的映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立文章对评论的一对多关系</span></span><br><span class="line">    <span class="comment">//在一的一方声明放弃维护关系</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"article"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1声明类间关系</span></span><br><span class="line">    <span class="comment">//声明主动放弃关系维护 mappedBy="当前类在对方类中的属性名"</span></span><br><span class="line">    <span class="comment">//设置级联操作,当保存Article的时候,同时保存ArticleData</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>, cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 在类中使用注解再声明表间关系</span></span><br><span class="line">    <span class="comment">// --书写注解</span></span><br><span class="line">    <span class="comment">// --明确谁来维护关系(在多的一方维护关系)</span></span><br><span class="line">    <span class="comment">//  ----在维护的一方主动声明维护策略,在不维护的一方声明主动放弃</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-2-创建文章评论类"><a href="#5-4-2-2-创建文章评论类" class="headerlink" title="5.4.2.2    创建文章评论类"></a>5.4.2.2    创建文章评论类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章评论实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"comment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立评论到文章的多对一关系</span></span><br><span class="line">    <span class="comment">//在多的一方维护关系</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"aid"</span>, referencedColumnName = <span class="string">"aid"</span>)</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-添加-CommentDao接口"><a href="#5-4-3-添加-CommentDao接口" class="headerlink" title="5.4.3    添加 CommentDao接口"></a>5.4.3    添加 CommentDao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Comment</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Comment</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-4-测试"><a href="#5-4-4-测试" class="headerlink" title="5.4.4    测试"></a>5.4.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">One2ManyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentDao commentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建文章对象</span></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">"测试好文章"</span>);</span><br><span class="line">        article.setAuthor(<span class="string">"测试"</span>);</span><br><span class="line">        article.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文章评论对象</span></span><br><span class="line">        Comment comment1 = <span class="keyword">new</span> Comment();</span><br><span class="line">        comment1.setComment(<span class="string">"真不错"</span>);</span><br><span class="line">        Comment comment2 = <span class="keyword">new</span> Comment();</span><br><span class="line">        comment2.setComment(<span class="string">"挺好的"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两个对象间的关系</span></span><br><span class="line">        comment1.setArticle(article);</span><br><span class="line">        comment2.setArticle(article);</span><br><span class="line"></span><br><span class="line">        Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        comments.add(comment1);</span><br><span class="line">        comments.add(comment2);</span><br><span class="line">        article.setComments(comments);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作</span></span><br><span class="line">        articleDao.save(article);</span><br><span class="line">        commentDao.save(comment1);</span><br><span class="line">        commentDao.save(comment2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-多对多关系"><a href="#5-5-多对多关系" class="headerlink" title="5.5    多对多关系"></a>5.5    多对多关系</h2><h3 id="5-5-1-数据环境"><a href="#5-5-1-数据环境" class="headerlink" title="5.5.1    数据环境"></a>5.5.1    数据环境</h3><p>article跟type之间的多对多关系</p><p><img src="https://img-blog.csdnimg.cn/20200926213301861.png" alt="image-20200926211907508"></p><h3 id="5-5-2-创建实体类，并配置表间关系"><a href="#5-5-2-创建实体类，并配置表间关系" class="headerlink" title="5.5.2    创建实体类，并配置表间关系"></a>5.5.2    创建实体类，并配置表间关系</h3><h4 id="5-5-2-1-修改文章类，添加文章跟评论用户的多对多关系"><a href="#5-5-2-1-修改文章类，添加文章跟评论用户的多对多关系" class="headerlink" title="5.5.2.1    修改文章类，添加文章跟评论用户的多对多关系"></a>5.5.2.1    修改文章类，添加文章跟评论用户的多对多关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"articles"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Type&gt; types = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立文章对评论的一对多关系</span></span><br><span class="line">    <span class="comment">//在一的一方声明放弃维护关系</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"article"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1声明类间关系</span></span><br><span class="line">    <span class="comment">//声明主动放弃关系维护 mappedBy="当前类在对方类中的属性名"</span></span><br><span class="line">    <span class="comment">//设置级联操作,当保存Article的时候,同时保存ArticleData</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"article"</span>, cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="keyword">private</span> ArticleData articleData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 在类中使用注解再声明表间关系</span></span><br><span class="line">    <span class="comment">// --书写注解</span></span><br><span class="line">    <span class="comment">// --明确谁来维护关系(在多的一方维护关系)</span></span><br><span class="line">    <span class="comment">//  ----在维护的一方主动声明维护策略,在不维护的一方声明主动放弃</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-2-2-创建文章用户类"><a href="#5-5-2-2-创建文章用户类" class="headerlink" title="5.5.2.2    创建文章用户类"></a>5.5.2.2    创建文章用户类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"type"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer tid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">            <span class="comment">//代表中间表名称</span></span><br><span class="line">            name = <span class="string">"article_type"</span>,</span><br><span class="line">            <span class="comment">//中间表的外键对应到当前表的主键名称</span></span><br><span class="line">            joinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"tid"</span>, referencedColumnName = <span class="string">"tid"</span>)&#125;,</span><br><span class="line">            <span class="comment">//中间表的外键对应到对方表的主键名称</span></span><br><span class="line">            inverseJoinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"aid"</span>, referencedColumnName = <span class="string">"aid"</span>)&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Article&gt; articles = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set和get方法。。。</span></span><br><span class="line">    <span class="comment">//省略toString方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-3-添加-TypeDao接口"><a href="#5-5-3-添加-TypeDao接口" class="headerlink" title="5.5.3    添加 TypeDao接口"></a>5.5.3    添加 TypeDao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao接口</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本 CRUD 操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Type</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Type</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-4-测试"><a href="#5-5-4-测试" class="headerlink" title="5.5.4    测试"></a>5.5.4    测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringData Jpa测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wgy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Many2ManyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TypeDao typeDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建文章对象</span></span><br><span class="line">        Article article1 = <span class="keyword">new</span> Article();</span><br><span class="line">        article1.setTitle(<span class="string">"测试好文章11"</span>);</span><br><span class="line">        article1.setAuthor(<span class="string">"测试11"</span>);</span><br><span class="line">        article1.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setTitle(<span class="string">"测试好文章22"</span>);</span><br><span class="line">        article2.setAuthor(<span class="string">"测试22"</span>);</span><br><span class="line">        article2.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文章类型对象</span></span><br><span class="line">        Type type1 = <span class="keyword">new</span> Type();</span><br><span class="line">        type1.setName(<span class="string">"军事"</span>);</span><br><span class="line">        Type type2 = <span class="keyword">new</span> Type();</span><br><span class="line">        type2.setName(<span class="string">"民政"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立两个对象间的关系</span></span><br><span class="line">        Set&lt;Type&gt; types = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        types.add(type1);</span><br><span class="line">        types.add(type2);</span><br><span class="line">        article1.setTypes(types);</span><br><span class="line">        article2.setTypes(types);</span><br><span class="line"></span><br><span class="line">        Set&lt;Article&gt; articles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        articles.add(article1);</span><br><span class="line">        articles.add(article2);</span><br><span class="line">        type1.setArticles(articles);</span><br><span class="line">        type2.setArticles(articles);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作</span></span><br><span class="line">        articleDao.save(article1);</span><br><span class="line">        articleDao.save(article2);</span><br><span class="line">        typeDao.save(type1);</span><br><span class="line">        typeDao.save(type2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-SpringData概述&quot;&gt;&lt;a href=&quot;#1-SpringData概述&quot; class=&quot;headerlink&quot; title=&quot;1.    SpringData概述&quot;&gt;&lt;/a&gt;1.    SpringData概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-持久层开发的问题&quot;&gt;&lt;a href=&quot;#1-1-持久层开发的问题&quot; class=&quot;headerlink&quot; title=&quot;1.1    持久层开发的问题&quot;&gt;&lt;/a&gt;1.1    持久层开发的问题&lt;/h2&gt;&lt;p&gt;随着互联网技术的发展，现在的企业开发中用到的用于数据存储的产品，不再仅仅是关系型数据库，而是要根据场景需要选择不同的存储技术，比如用于缓存热点数据的redis，用于存储文档数据的mongodb，用于支持强大搜索功能的elasticsearch等等。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架" scheme="https://wgy1993.gitee.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringData" scheme="https://wgy1993.gitee.io/tags/SpringData/"/>
    
  </entry>
  
</feed>
